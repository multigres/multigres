// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// ImportQual - Private struct for the result of import_qualification production
// Matches PostgreSQL's ImportQual from gram.y
type ImportQual struct {
	typ        ast.ImportForeignSchemaType
	tableNames *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:58
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into           *ast.IntoClause
	onconflict     *ast.OnConflictClause
	windef         *ast.WindowDef
	createStmt     *ast.CreateStmt
	indexStmt      *ast.IndexStmt
	alterStmt      *ast.AlterTableStmt
	dropStmt       *ast.DropStmt
	columnDef      *ast.ColumnDef
	constraint     *ast.Constraint
	indexElem      *ast.IndexElem
	alterCmd       *ast.AlterTableCmd
	with           *ast.WithClause
	rangevar       *ast.RangeVar
	objType        ast.ObjectType
	dropBehav      ast.DropBehavior
	setquant       ast.SetQuantifier
	typnam         *ast.TypeName
	partspec       *ast.PartitionSpec
	partboundspec  *ast.PartitionBoundSpec
	oncommit       ast.OnCommitAction
	defelt         *ast.DefElem
	target         *ast.ResTarget            // For select targets, insert columns
	alias          *ast.Alias                // For table and column aliases
	jtype          ast.JoinType              // For join type specifications
	jexpr          *ast.JoinExpr             // For joined table expressions
	keyaction      *ast.KeyAction            // For foreign key actions
	keyactions     *ast.KeyActions           // For foreign key action sets
	funparam       *ast.FunctionParameter    // For function parameters
	funparammode   ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt       *ast.VariableSetStmt      // For SET/RESET statements
	rolespec       *ast.RoleSpec
	objwithargs    *ast.ObjectWithArgs
	statelem       *ast.StatsElem
	accesspriv     *ast.AccessPriv             // For privilege specifications
	privtarget     *PrivTarget                 // For privilege target specifications
	vacrel         *ast.VacuumRelation         // For vacuum relation specifications
	importqual     *ImportQual                 // For import qualification specifications
	importqualtype ast.ImportForeignSchemaType // For import qualification type

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:15194

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 123,
	540, 123,
	-2, 1630,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 126,
	1, 1544,
	26, 1544,
	36, 1544,
	74, 1544,
	100, 1544,
	532, 1544,
	540, 1544,
	-2, 1548,
	-1, 129,
	67, 1960,
	84, 1960,
	85, 2667,
	236, 2852,
	307, 2127,
	419, 1960,
	480, 1960,
	-2, 136,
	-1, 170,
	68, 1547,
	69, 1547,
	130, 1547,
	269, 1547,
	280, 1547,
	316, 1547,
	470, 1547,
	509, 1547,
	-2, 1549,
	-1, 182,
	1, 123,
	540, 123,
	-2, 1630,
	-1, 225,
	85, 2666,
	-2, 1959,
	-1, 312,
	61, 344,
	64, 344,
	527, 344,
	533, 344,
	-2, 2708,
	-1, 778,
	1, 347,
	540, 347,
	-2, 3179,
	-1, 779,
	1, 388,
	540, 388,
	-2, 3179,
	-1, 780,
	1, 279,
	540, 279,
	-2, 3179,
	-1, 781,
	1, 321,
	540, 321,
	-2, 3179,
	-1, 786,
	1, 283,
	540, 283,
	-2, 3179,
	-1, 787,
	1, 200,
	540, 200,
	-2, 3179,
	-1, 821,
	7, 1460,
	16, 1460,
	17, 1460,
	531, 1460,
	-2, 142,
	-1, 822,
	7, 1461,
	16, 1461,
	17, 1461,
	531, 1461,
	-2, 143,
	-1, 847,
	68, 1533,
	69, 1533,
	130, 1533,
	280, 1533,
	-2, 1550,
	-1, 853,
	68, 1534,
	69, 1534,
	130, 1534,
	280, 1534,
	-2, 1553,
	-1, 910,
	84, 1960,
	480, 1960,
	-2, 135,
	-1, 912,
	209, 124,
	-2, 2673,
	-1, 998,
	531, 1462,
	-2, 3131,
	-1, 1019,
	93, 2988,
	398, 2163,
	401, 2988,
	-2, 2056,
	-1, 1023,
	93, 2988,
	398, 2163,
	401, 2988,
	-2, 2056,
	-1, 1092,
	531, 2056,
	-2, 2531,
	-1, 1189,
	74, 152,
	-2, 158,
	-1, 1273,
	68, 1533,
	69, 1533,
	130, 1533,
	280, 1533,
	-2, 1554,
	-1, 1327,
	7, 1251,
	531, 1251,
	-2, 525,
	-1, 1342,
	7, 576,
	16, 576,
	17, 576,
	531, 576,
	-2, 1299,
	-1, 1364,
	7, 1505,
	-2, 526,
	-1, 1372,
	7, 1475,
	-2, 509,
	-1, 1373,
	7, 1510,
	531, 1510,
	-2, 510,
	-1, 1374,
	7, 1482,
	-2, 511,
	-1, 1375,
	7, 1510,
	531, 1510,
	-2, 512,
	-1, 1376,
	7, 1510,
	531, 1510,
	-2, 513,
	-1, 1377,
	7, 1469,
	-2, 515,
	-1, 1378,
	7, 1469,
	-2, 516,
	-1, 1379,
	7, 1512,
	-2, 519,
	-1, 1380,
	7, 1472,
	-2, 523,
	-1, 1381,
	7, 1473,
	-2, 524,
	-1, 1383,
	7, 1510,
	531, 1510,
	-2, 540,
	-1, 1384,
	7, 1469,
	-2, 544,
	-1, 1385,
	7, 1476,
	-2, 549,
	-1, 1386,
	7, 1474,
	-2, 552,
	-1, 1387,
	7, 1508,
	-2, 554,
	-1, 1388,
	7, 1508,
	-2, 555,
	-1, 1389,
	7, 1493,
	531, 1493,
	-2, 559,
	-1, 1544,
	6, 2056,
	12, 2056,
	534, 2056,
	535, 2056,
	-2, 2049,
	-1, 1620,
	531, 1386,
	-2, 3133,
	-1, 1926,
	16, 1464,
	17, 1464,
	-2, 1385,
	-1, 2038,
	127, 2950,
	411, 2950,
	-2, 1124,
	-1, 2072,
	21, 1423,
	432, 1423,
	510, 1423,
	-2, 886,
	-1, 2074,
	21, 1425,
	432, 1425,
	510, 1425,
	-2, 833,
	-1, 2079,
	1, 702,
	26, 702,
	36, 702,
	64, 702,
	65, 702,
	68, 702,
	69, 702,
	71, 702,
	72, 702,
	73, 702,
	74, 702,
	100, 702,
	130, 702,
	269, 702,
	280, 702,
	316, 702,
	470, 702,
	484, 702,
	509, 702,
	515, 702,
	532, 702,
	540, 702,
	541, 702,
	-2, 1539,
	-1, 2084,
	21, 1517,
	432, 1517,
	510, 1517,
	-2, 1513,
	-1, 2541,
	68, 1548,
	69, 1548,
	130, 1548,
	269, 1548,
	280, 1548,
	316, 1548,
	470, 1548,
	509, 1548,
	-2, 1220,
	-1, 2550,
	7, 1386,
	531, 1386,
	-2, 1269,
	-1, 2679,
	117, 136,
	307, 2127,
	460, 136,
	-2, 1960,
	-1, 2731,
	536, 158,
	-2, 2521,
	-1, 2767,
	531, 2129,
	-2, 268,
	-1, 2844,
	40, 1469,
	134, 1469,
	509, 1469,
	527, 1469,
	529, 1469,
	532, 1469,
	541, 1469,
	-2, 1464,
	-1, 3050,
	531, 2056,
	-2, 2532,
	-1, 3192,
	36, 2955,
	66, 2955,
	-2, 550,
	-1, 3193,
	36, 2956,
	66, 2956,
	-2, 423,
	-1, 3199,
	127, 2953,
	411, 2953,
	-2, 1233,
	-1, 3200,
	127, 2954,
	411, 2954,
	-2, 1234,
	-1, 3216,
	1, 468,
	26, 468,
	36, 468,
	64, 468,
	65, 468,
	68, 468,
	69, 468,
	71, 468,
	72, 468,
	74, 468,
	100, 468,
	130, 468,
	269, 468,
	280, 468,
	316, 468,
	470, 468,
	484, 468,
	509, 468,
	515, 468,
	529, 468,
	532, 468,
	533, 468,
	540, 468,
	-2, 167,
	-1, 3217,
	1, 466,
	26, 466,
	36, 466,
	64, 466,
	65, 466,
	68, 466,
	69, 466,
	71, 466,
	72, 466,
	74, 466,
	100, 466,
	130, 466,
	269, 466,
	280, 466,
	316, 466,
	470, 466,
	484, 466,
	509, 466,
	515, 466,
	529, 466,
	532, 466,
	533, 466,
	540, 466,
	-2, 167,
	-1, 3220,
	1, 485,
	26, 485,
	36, 485,
	64, 485,
	65, 485,
	68, 485,
	69, 485,
	71, 485,
	72, 485,
	74, 485,
	100, 485,
	130, 485,
	269, 485,
	280, 485,
	316, 485,
	470, 485,
	484, 485,
	509, 485,
	515, 485,
	529, 485,
	532, 485,
	533, 485,
	540, 485,
	-2, 167,
	-1, 3234,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1137,
	-1, 3235,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1138,
	-1, 3236,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1139,
	-1, 3237,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1140,
	-1, 3238,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1141,
	-1, 3239,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1142,
	-1, 3243,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1149,
	-1, 3249,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1153,
	-1, 3294,
	363, 1413,
	-2, 1416,
	-1, 3373,
	68, 1548,
	69, 1548,
	130, 1548,
	269, 1548,
	280, 1548,
	316, 1548,
	470, 1548,
	509, 1548,
	-2, 1220,
	-1, 3494,
	209, 124,
	-2, 2673,
	-1, 3567,
	536, 159,
	-2, 2521,
	-1, 3680,
	507, 2608,
	-2, 2601,
	-1, 4002,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1151,
	-1, 4003,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1155,
	-1, 4009,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1157,
	-1, 4044,
	363, 1412,
	-2, 1415,
	-1, 4182,
	75, 1652,
	76, 1652,
	77, 1652,
	78, 1652,
	79, 1652,
	81, 1652,
	82, 1652,
	-2, 1548,
	-1, 4196,
	531, 1386,
	-2, 159,
	-1, 4202,
	150, 1892,
	-2, 1827,
	-1, 4389,
	6, 2056,
	12, 2056,
	534, 2056,
	535, 2056,
	-2, 2030,
	-1, 4623,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1150,
	-1, 4626,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1159,
	-1, 4629,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1154,
	-1, 4634,
	52, 0,
	53, 0,
	54, 0,
	-2, 1172,
	-1, 4641,
	21, 1422,
	432, 1422,
	510, 1422,
	-2, 1514,
	-1, 4645,
	363, 1414,
	-2, 1417,
	-1, 4676,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1202,
	-1, 4677,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1203,
	-1, 4678,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1204,
	-1, 4679,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1205,
	-1, 4680,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1206,
	-1, 4681,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1207,
	-1, 5114,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1152,
	-1, 5115,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 5119,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1158,
	-1, 5120,
	52, 0,
	53, 0,
	54, 0,
	-2, 1173,
	-1, 5123,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1174,
	-1, 5124,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1176,
	-1, 5246,
	540, 123,
	-2, 1630,
	-1, 5414,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1160,
	-1, 5415,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1175,
	-1, 5416,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1177,
	-1, 5424,
	52, 0,
	-2, 1210,
	-1, 5682,
	52, 0,
	-2, 1211,
	-1, 5868,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 508,
	-1, 6199,
	7, 1777,
	-2, 345,
	-1, 6225,
	7, 1505,
	-2, 526,
}

const yyPrivate = 57344

const yyLast = 115741

var yyAct = [...]int16{
	727, 6196, 5697, 6247, 5878, 5698, 5443, 6059, 5687, 5228,
	6248, 6263, 1292, 4866, 3989, 3396, 3331, 4065, 3449, 5716,
	2536, 6197, 5945, 4784, 848, 5181, 5768, 5867, 4209, 5320,
	962, 5788, 5236, 3445, 3399, 2630, 3135, 5933, 1796, 5928,
	4123, 5665, 6047, 5817, 1532, 3435, 1160, 5575, 3893, 4373,
	949, 4988, 6092, 5180, 3987, 6015, 4775, 4053, 5717, 5998,
	3080, 5795, 5666, 3422, 745, 6, 5647, 5663, 3208, 2652,
	4225, 5789, 4298, 3882, 5172, 5790, 1006, 5505, 5048, 1448,
	3503, 5482, 3639, 4552, 5441, 5866, 1819, 5598, 1845, 4359,
	5319, 4771, 2086, 5840, 125, 3634, 1034, 4206, 3412, 3456,
	3598, 4191, 4301, 1485, 5553, 5202, 2751, 5243, 5571, 1217,
	3495, 3356, 3932, 4994, 4841, 1005, 4226, 5607, 5011, 3098,
	4, 4989, 5188, 4919, 3441, 5195, 4870, 4779, 4275, 2839,
	1935, 5488, 1618, 75, 1822, 4834, 315, 315, 5511, 1172,
	148, 3414, 719, 724, 4705, 736, 740, 1267, 1443, 5410,
	315, 3782, 5212, 3365, 749, 10, 728, 751, 22, 3439,
	3556, 801, 802, 804, 1925, 5208, 858, 172, 4476, 4174,
	820, 748, 9, 4261, 750, 21, 747, 8, 866, 2046,
	3479, 5090, 5107, 4149, 1044, 3911, 3894, 3876, 4278, 866,
	746, 7, 3877, 866, 3737, 4388, 1319, 3633, 1445, 912,
	4367, 916, 921, 916, 4903, 916, 2678, 20, 3583, 3557,
	2677, 19, 2676, 13, 2716, 916, 2675, 12, 4344, 1733,
	3693, 2701, 1515, 2707, 1707, 3504, 2711, 3470, 3466, 866,
	866, 866, 866, 3483, 2651, 4745, 820, 916, 916, 776,
	916, 999, 3437, 2743, 921, 3482, 999, 6, 999, 2632,
	3413, 4185, 4166, 3400, 3484, 890, 891, 4064, 916, 3175,
	916, 2545, 3306, 1278, 4177, 916, 1253, 3357, 856, 1821,
	4612, 3259, 4132, 3088, 880, 1223, 1923, 1590, 917, 808,
	4386, 3521, 1801, 1743, 3638, 3594, 742, 2874, 2762, 2728,
	1403, 1320, 1431, 2687, 920, 1471, 4021, 3469, 3458, 4198,
	1426, 996, 737, 3417, 315, 315, 1009, 2631, 1011, 3410,
	2538, 3421, 3420, 172, 3303, 75, 3419, 1252, 4057, 863,
	3299, 3260, 148, 3269, 2047, 3266, 3198, 3188, 865, 3346,
	887, 2015, 2035, 990, 1843, 1724, 920, 10, 1863, 879,
	22, 1795, 1178, 1697, 3736, 3533, 895, 1731, 1522, 172,
	306, 2837, 1497, 3520, 9, 947, 1494, 21, 172, 8,
	3432, 3519, 911, 894, 1133, 1812, 817, 3329, 893, 1928,
	975, 2018, 196, 7, 2560, 3213, 1279, 1288, 2016, 194,
	784, 784, 892, 2036, 1452, 264, 1228, 1180, 5483, 20,
	1321, 1037, 741, 19, 773, 13, 1168, 795, 1493, 12,
	3107, 3079, 1041, 1721, 1578, 1575, 1581, 2953, 2658, 3463,
	218, 2880, 2715, 1260, 871, 1261, 756, 2051, 731, 1262,
	1793, 2019, 1622, 2017, 1748, 2708, 1597, 308, 1563, 292,
	1671, 847, 701, 869, 307, 886, 814, 266, 2727, 884,
	3990, 1167, 876, 170, 5442, 810, 878, 5651, 2084, 5648,
	171, 2054, 5648, 1711, 4246, 2066, 2067, 2068, 1534, 6315,
	4081, 3100, 4134, 1896, 1712, 5595, 6313, 2609, 6232, 2084,
	2610, 6311, 2054, 6193, 2615, 6272, 2607, 4245, 852, 6271,
	6232, 2612, 2616, 2611, 1711, 2613, 4247, 2052, 6272, 2614,
	2077, 2078, 2608, 1711, 4058, 1712, 1711, 2607, 3099, 2617,
	5116, 1711, 3182, 1807, 1712, 1704, 807, 1712, 6259, 4554,
	3967, 793, 1712, 2608, 6256, 2084, 3405, 5900, 2054, 1487,
	2617, 2084, 6240, 2605, 2054, 1536, 6231, 6208, 2066, 2067,
	2068, 2605, 6201, 6183, 3100, 6232, 6209, 3100, 4335, 1810,
	4040, 4154, 5860, 2607, 6165, 729, 739, 2615, 1200, 2607,
	3349, 4041, 6192, 5463, 2612, 2616, 2611, 1811, 2613, 2608,
	242, 6036, 6123, 1487, 705, 2608, 2617, 765, 5838, 5362,
	4279, 2605, 2617, 6122, 6109, 969, 970, 759, 1307, 6071,
	6068, 6044, 2605, 3102, 6005, 3919, 6004, 3214, 6072, 6069,
	4287, 2084, 6003, 3071, 2054, 3071, 1132, 1000, 2066, 2067,
	2068, 3071, 5629, 5983, 5982, 5627, 1303, 4135, 1894, 4081,
	1018, 1021, 2605, 2605, 873, 3060, 854, 2615, 5979, 2607,
	5977, 1163, 5899, 853, 2612, 2616, 2611, 5980, 2613, 5978,
	1897, 5900, 2614, 2077, 2078, 2608, 6170, 5897, 5896, 4059,
	5876, 5875, 2617, 5762, 5747, 1120, 2605, 1714, 1535, 4120,
	2605, 6169, 5463, 3074, 5737, 5720, 3102, 4097, 5712, 5711,
	883, 5580, 2084, 5738, 5719, 2054, 5569, 4287, 1714, 5559,
	5581, 1082, 5543, 5476, 5475, 3102, 5474, 5472, 4247, 1714,
	5462, 5542, 5477, 4287, 1071, 4287, 1714, 4039, 2084, 5463,
	2607, 2054, 5431, 4630, 5429, 2066, 2067, 2068, 2605, 1151,
	5395, 2605, 1709, 5430, 4164, 5904, 2608, 2609, 1035, 4543,
	2610, 4553, 852, 2617, 2615, 2605, 2607, 5860, 5316, 5315,
	5858, 2612, 2616, 2611, 1146, 2613, 881, 5317, 3102, 2614,
	2077, 2078, 2608, 5314, 790, 790, 5308, 5254, 5223, 2617,
	1537, 5690, 3102, 5126, 3174, 3102, 4247, 5224, 4084, 4085,
	4086, 4087, 2605, 3100, 5104, 2054, 5068, 866, 4794, 4707,
	3207, 1775, 3206, 2605, 5366, 1892, 1189, 3102, 4708, 1892,
	1538, 3209, 3210, 1539, 4696, 5206, 4639, 1540, 2053, 1155,
	1157, 1158, 5164, 4697, 1775, 2605, 2741, 4567, 4844, 2653,
	4803, 2054, 4542, 4534, 4512, 1171, 4802, 882, 4470, 1541,
	4644, 4543, 2605, 4469, 4405, 1171, 4607, 4469, 1171, 866,
	4558, 866, 4355, 4406, 4249, 1171, 2607, 4235, 1171, 2054,
	4159, 4356, 4153, 4250, 4146, 4127, 4236, 4119, 4287, 4160,
	4204, 4154, 2608, 2605, 3967, 4143, 4120, 1544, 4117, 856,
	4116, 4115, 4114, 4044, 2607, 4142, 4042, 2605, 4141, 2605,
	2605, 2605, 2605, 3914, 1542, 2605, 2059, 2060, 2061, 2062,
	1306, 1306, 3102, 3859, 3740, 3685, 3967, 1133, 866, 3074,
	3497, 1543, 2605, 3741, 3686, 1306, 3389, 1152, 1274, 3498,
	3903, 3900, 3385, 3133, 2084, 1714, 866, 2054, 1418, 866,
	866, 2605, 2605, 3104, 3564, 3742, 3103, 3072, 866, 866,
	3286, 866, 3102, 820, 820, 3102, 3071, 820, 1545, 915,
	172, 936, 2607, 938, 3186, 4625, 3405, 2606, 1869, 916,
	916, 3102, 3066, 964, 1862, 2985, 2605, 1852, 2608, 1860,
	1857, 5649, 1851, 1852, 5649, 2617, 1401, 1858, 1852, 1852,
	1222, 1852, 4336, 1423, 866, 992, 993, 868, 995, 1409,
	1224, 5766, 1224, 2073, 1714, 2053, 4133, 1714, 1735, 182,
	2684, 4087, 2063, 2064, 2065, 4978, 1026, 6098, 1029, 916,
	4553, 2057, 2058, 2059, 2060, 2061, 2062, 2062, 1396, 4061,
	4082, 4083, 4084, 4085, 4086, 4087, 866, 866, 4129, 315,
	315, 2693, 2057, 2058, 2059, 2060, 2061, 2062, 1270, 1271,
	3102, 1709, 5321, 1775, 916, 916, 793, 1205, 1206, 3102,
	1718, 1210, 1213, 1714, 4553, 4336, 1775, 1199, 1775, 793,
	1735, 1315, 2684, 1123, 1714, 2684, 2073, 4448, 1214, 2084,
	887, 887, 2054, 1705, 1706, 2063, 2064, 2065, 2057, 2058,
	2059, 2060, 2061, 2062, 2057, 2058, 2059, 2060, 2061, 2062,
	1775, 1530, 789, 1775, 6304, 1255, 793, 2607, 1303, 1254,
	4624, 4081, 1152, 4357, 3405, 4091, 4092, 4093, 3564, 4358,
	4789, 788, 1704, 2608, 2746, 1255, 6062, 1156, 793, 1254,
	2617, 1735, 3904, 1451, 3784, 916, 1225, 1255, 916, 916,
	1276, 1254, 1451, 1456, 179, 1775, 2073, 1125, 1152, 1250,
	2749, 1735, 2644, 2684, 1892, 2063, 2064, 2065, 6278, 4097,
	1744, 1745, 2694, 1273, 2057, 2058, 2059, 2060, 2061, 2062,
	807, 176, 6063, 1742, 1394, 177, 1804, 1580, 1554, 4082,
	4083, 4084, 4085, 4086, 4087, 4789, 1166, 1450, 6060, 1466,
	793, 6130, 6113, 6104, 181, 1817, 1476, 5890, 5865, 1211,
	5808, 866, 5864, 736, 1410, 1844, 1139, 1844, 1141, 1165,
	1143, 1140, 866, 5841, 1123, 1744, 1745, 1122, 1491, 1492,
	1133, 5699, 176, 789, 1133, 1133, 177, 5692, 1746, 1152,
	5655, 1758, 2644, 3595, 1397, 2057, 2058, 2059, 2060, 2061,
	2062, 818, 788, 2073, 3791, 181, 1177, 1226, 5584, 1182,
	2746, 5577, 2063, 2064, 2065, 5560, 1186, 5532, 1854, 1197,
	5438, 2057, 2058, 2059, 2060, 2061, 2062, 5435, 1670, 1306,
	1133, 5421, 1676, 5420, 5409, 5407, 2749, 916, 916, 5178,
	1723, 5171, 820, 999, 921, 5168, 1653, 999, 999, 5154,
	5149, 2747, 5141, 1842, 5140, 5130, 5089, 5059, 5009, 1235,
	1249, 5008, 1306, 1483, 5007, 2692, 1306, 991, 2547, 4730,
	4843, 4757, 997, 4852, 1306, 4720, 1306, 997, 1919, 997,
	1256, 4719, 1257, 1306, 1734, 2057, 2058, 2059, 2060, 2061,
	2062, 1739, 1740, 1741, 1306, 1306, 1306, 1306, 1306, 4703,
	1440, 1769, 4693, 1904, 4692, 1306, 4691, 1910, 1911, 1133,
	4647, 4641, 854, 4600, 1402, 4599, 4598, 4551, 4531, 853,
	4348, 2057, 2058, 2059, 2060, 2061, 2062, 1620, 4790, 1306,
	4974, 1457, 4306, 1463, 1420, 1421, 920, 4286, 1202, 1203,
	1204, 4293, 172, 1207, 1208, 1209, 1212, 1930, 1439, 2057,
	2058, 2059, 2060, 2061, 2062, 1600, 4244, 4203, 4137, 1905,
	2645, 4130, 4110, 2084, 1747, 2750, 2054, 4102, 1638, 4101,
	1648, 790, 790, 4080, 4078, 790, 790, 2747, 2746, 4077,
	1215, 1216, 4073, 4071, 4070, 4069, 4068, 1519, 4046, 2748,
	1528, 2607, 1547, 4790, 4008, 4043, 3962, 3866, 3864, 856,
	3861, 3860, 3850, 3384, 2749, 1410, 3377, 2608, 3172, 2705,
	866, 1306, 1789, 1422, 2617, 1784, 1601, 2057, 2058, 2059,
	2060, 2061, 2062, 807, 1276, 1464, 1558, 705, 2634, 1601,
	2635, 1601, 1559, 1557, 4851, 1405, 1619, 1275, 3279, 866,
	2645, 1846, 2657, 2984, 5578, 1458, 1635, 2753, 1645, 1652,
	1876, 807, 1877, 1878, 1879, 2906, 4968, 1882, 1883, 1884,
	2938, 1673, 1887, 1700, 1677, 1678, 6312, 921, 807, 6300,
	916, 916, 916, 916, 1153, 916, 3792, 2546, 755, 173,
	193, 2646, 1859, 1164, 2649, 758, 758, 6296, 866, 5959,
	2625, 2750, 866, 1866, 1867, 1868, 1156, 2731, 2084, 1124,
	6211, 2054, 1255, 179, 5058, 1125, 1254, 2628, 1156, 3790,
	6177, 2760, 1751, 1752, 6152, 2748, 1755, 1397, 866, 6147,
	916, 5262, 6140, 6081, 2615, 6014, 2607, 4055, 866, 1927,
	176, 2612, 2616, 2611, 177, 2613, 5796, 866, 791, 792,
	2604, 1916, 2608, 2691, 1930, 2747, 2688, 5976, 4601, 2617,
	5950, 791, 792, 181, 4788, 1802, 5947, 866, 3280, 920,
	2983, 866, 2057, 2058, 2059, 2060, 2061, 2062, 1850, 2626,
	2704, 5863, 2907, 2753, 1631, 1903, 5862, 6061, 2753, 5826,
	5822, 1840, 4088, 4089, 4090, 2800, 180, 315, 791, 792,
	4207, 4082, 4083, 4084, 4085, 4086, 4087, 1218, 5749, 173,
	5715, 2643, 1856, 5643, 1453, 179, 5642, 1740, 1739, 315,
	1705, 1706, 5641, 1703, 1741, 5621, 5605, 2084, 5604, 5603,
	2054, 790, 1154, 2746, 4427, 2542, 916, 5593, 2899, 2788,
	5590, 5214, 176, 5470, 2550, 2759, 177, 1454, 1455, 5467,
	1124, 4375, 1453, 866, 4529, 2607, 1125, 315, 4001, 2749,
	173, 2731, 2731, 2731, 6258, 181, 5432, 315, 5239, 2750,
	5218, 2608, 5205, 5197, 5194, 5013, 4889, 4847, 2617, 2792,
	2756, 4733, 791, 792, 1927, 4609, 4831, 866, 866, 4821,
	4818, 1747, 4799, 2748, 4762, 2028, 2027, 1490, 2020, 4760,
	4752, 2548, 4544, 4378, 2619, 4377, 4372, 916, 916, 916,
	916, 916, 1404, 2590, 1797, 1797, 2049, 1809, 2050, 922,
	4195, 4194, 790, 790, 4147, 790, 933, 934, 935, 916,
	916, 854, 1626, 1627, 854, 854, 4729, 916, 2043, 2805,
	3980, 2044, 2045, 4052, 4034, 4032, 3271, 3886, 3823, 2838,
	793, 2753, 3717, 3592, 1453, 3506, 1306, 3451, 3277, 3311,
	1855, 3305, 2813, 2814, 173, 2768, 2770, 3049, 790, 3035,
	3986, 3027, 2791, 2668, 1880, 1881, 2659, 2599, 1735, 1885,
	1886, 1737, 1888, 1889, 2597, 2596, 2595, 2594, 2593, 1890,
	2592, 2591, 2589, 2588, 2587, 2586, 2585, 2584, 2583, 2582,
	2747, 2581, 2580, 2579, 2578, 866, 2577, 2964, 2965, 752,
	2576, 2575, 2817, 2574, 2655, 2573, 1762, 1764, 1453, 179,
	1752, 1751, 2572, 2571, 1580, 3010, 1580, 2570, 1755, 2569,
	1580, 1580, 2598, 2568, 2567, 2732, 2602, 3069, 2566, 2836,
	2565, 2685, 2563, 2562, 866, 866, 176, 999, 999, 999,
	177, 916, 2549, 2547, 3089, 1914, 874, 916, 1841, 3012,
	1760, 1750, 1844, 2660, 1631, 2540, 1564, 1400, 736, 181,
	736, 2681, 1251, 1149, 967, 767, 4528, 2546, 866, 866,
	3849, 866, 1098, 866, 3018, 2689, 866, 866, 3019, 2657,
	2746, 5299, 2735, 4237, 752, 2932, 2057, 2058, 2059, 2060,
	2061, 2062, 1453, 891, 179, 4192, 191, 1927, 764, 757,
	4251, 4736, 4471, 866, 2750, 3499, 2749, 3406, 2862, 5648,
	2823, 3988, 2959, 1171, 2739, 2740, 4412, 916, 916, 1744,
	1745, 176, 4370, 4066, 2771, 177, 2742, 2769, 2748, 1446,
	754, 1306, 1306, 1306, 1433, 1434, 2766, 3084, 1437, 2876,
	3101, 1446, 5760, 3092, 181, 1898, 1899, 3068, 3177, 3178,
	1672, 2876, 5759, 1453, 3173, 5371, 852, 5266, 4063, 2884,
	2820, 2601, 4972, 2826, 3028, 3083, 4269, 3085, 3075, 3076,
	3090, 3091, 4414, 4265, 4966, 2555, 743, 174, 3108, 2732,
	2732, 2732, 2744, 895, 4425, 180, 2753, 3304, 5538, 3674,
	2856, 4299, 2552, 3668, 6000, 172, 2860, 2884, 2627, 6265,
	894, 2746, 3275, 2073, 5526, 893, 4571, 2884, 2816, 1516,
	3053, 5943, 4570, 1654, 3106, 851, 5942, 2881, 2023, 892,
	5758, 2057, 2058, 2059, 2060, 2061, 2062, 2749, 172, 5398,
	4522, 1162, 2746, 2765, 3578, 2919, 1135, 2873, 4787, 5555,
	4830, 3597, 3596, 1306, 3134, 3184, 1651, 2747, 6185, 1412,
	1306, 1306, 2937, 866, 5411, 2881, 5295, 2914, 2749, 2943,
	175, 5686, 850, 866, 1306, 2881, 916, 2925, 1306, 1306,
	1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
	1306, 1306, 1306, 1306, 3070, 1306, 2954, 180, 2957, 2920,
	2921, 2922, 2961, 2962, 2960, 2559, 2990, 2989, 6266, 2746,
	173, 5156, 5155, 3489, 2672, 4256, 1477, 1428, 718, 3517,
	3522, 1112, 716, 1105, 985, 1728, 2806, 1655, 185, 4710,
	2809, 2810, 899, 2764, 790, 2749, 4423, 1655, 790, 790,
	3127, 3128, 4381, 3017, 4303, 3129, 3130, 3020, 3131, 3132,
	2057, 2058, 2059, 2060, 2061, 2062, 5537, 184, 5566, 3516,
	1303, 1101, 1103, 4081, 1591, 1516, 3704, 4091, 4092, 4093,
	2850, 2750, 5721, 2023, 1729, 2763, 2746, 132, 2747, 3523,
	3039, 2746, 5781, 4323, 1174, 3276, 4636, 4635, 2695, 2696,
	2697, 2698, 5549, 2699, 5355, 2748, 185, 3205, 3037, 3038,
	185, 4095, 2749, 5556, 2896, 2897, 5043, 2749, 4382, 2747,
	4977, 4097, 790, 790, 1728, 2746, 5685, 3176, 1730, 4940,
	3114, 1727, 5309, 3116, 4271, 184, 849, 4804, 223, 184,
	1592, 3392, 1472, 930, 931, 932, 4285, 2723, 2785, 897,
	5103, 2749, 924, 925, 926, 927, 928, 929, 1436, 3081,
	3082, 3122, 3615, 2753, 3613, 1110, 899, 4415, 1017, 2781,
	2780, 958, 132, 1729, 3110, 852, 3115, 3065, 3846, 3111,
	3109, 714, 5229, 991, 997, 905, 2747, 4604, 997, 997,
	5296, 3997, 5565, 3996, 3995, 2024, 3994, 3319, 3676, 6126,
	807, 4750, 2750, 5997, 1732, 3522, 3471, 3473, 3472, 5960,
	3614, 180, 3612, 3524, 1215, 1216, 3029, 1730, 2779, 5835,
	1727, 4384, 5834, 974, 173, 973, 2748, 4267, 5349, 4956,
	2022, 3162, 3164, 2750, 3022, 4952, 3577, 4304, 4270, 3673,
	972, 2745, 971, 1593, 2745, 2798, 3030, 768, 6125, 2793,
	1783, 3031, 3562, 2747, 2898, 3034, 6099, 2748, 2747, 3036,
	1121, 4368, 4990, 6255, 3523, 3670, 5436, 2969, 2025, 5952,
	4942, 6254, 4491, 4945, 5050, 3681, 1781, 5562, 5561, 2084,
	5792, 3929, 2054, 3203, 2753, 1726, 2066, 2067, 2068, 2745,
	4238, 2968, 2747, 1732, 3195, 5953, 180, 3201, 2609, 2745,
	2750, 2610, 3185, 6102, 5973, 2615, 3927, 2607, 3678, 744,
	5583, 5649, 2612, 2616, 2611, 2753, 2613, 4266, 1725, 3077,
	2614, 2077, 2078, 2608, 2748, 2971, 2972, 2973, 2974, 2975,
	2617, 1447, 2818, 3274, 4997, 2745, 6001, 2801, 5284, 5278,
	2024, 2875, 2084, 1447, 2026, 2054, 3187, 2745, 3011, 2066,
	2067, 2068, 3212, 2875, 3204, 3014, 5310, 2745, 3211, 4268,
	3223, 2609, 2745, 5536, 2610, 5065, 2745, 2750, 2615, 224,
	2607, 2752, 2750, 3542, 1726, 2612, 2616, 2611, 2775, 2613,
	3391, 2745, 2753, 2614, 2077, 2078, 2608, 1780, 3524, 4569,
	1413, 2748, 1690, 2617, 4549, 3880, 2748, 5051, 3778, 3530,
	4404, 4264, 5054, 4401, 3126, 4066, 2750, 5052, 4400, 4263,
	4269, 3273, 1595, 2025, 3160, 197, 3855, 4265, 1688, 3514,
	2671, 2892, 790, 1732, 4985, 2084, 4383, 4389, 2054, 1583,
	2748, 4565, 2066, 2067, 2068, 5049, 3928, 4564, 898, 2870,
	223, 3322, 4563, 4562, 2609, 1589, 4561, 2610, 2869, 2753,
	4500, 2615, 5053, 2607, 2753, 1462, 4498, 3095, 2612, 2616,
	2611, 3926, 2613, 4495, 4493, 2621, 2614, 2077, 2078, 2608,
	4342, 1782, 3545, 3930, 3837, 2622, 2617, 1306, 1306, 921,
	1306, 1460, 6128, 1306, 3515, 905, 4991, 4260, 2753, 2026,
	3323, 3000, 1732, 1306, 1306, 3078, 884, 2623, 2852, 3295,
	1306, 900, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
	1306, 1306, 1306, 3138, 1306, 2848, 1306, 2832, 1306, 1306,
	1306, 1306, 1306, 1306, 1594, 1306, 1306, 1306, 904, 1687,
	1306, 222, 1516, 221, 3324, 3363, 1306, 3321, 916, 1114,
	1306, 1306, 1306, 1306, 5774, 3153, 3154, 6184, 3199, 3199,
	3197, 6168, 6020, 1441, 3624, 3292, 3096, 2790, 3401, 4317,
	3403, 3839, 898, 3005, 2634, 4227, 6043, 906, 3426, 3426,
	5793, 920, 3474, 1585, 3438, 916, 3852, 2776, 4939, 5014,
	3097, 1602, 2955, 6127, 4088, 4089, 4090, 988, 2778, 2777,
	3094, 3141, 1459, 4082, 4083, 4084, 4085, 4086, 4087, 3773,
	771, 3543, 866, 3795, 3767, 3745, 1674, 1680, 2903, 2951,
	3325, 3494, 4462, 1689, 3370, 2950, 1669, 1621, 3093, 1684,
	3853, 5251, 4272, 3505, 3542, 3768, 1650, 2800, 1570, 5610,
	5794, 916, 3789, 5999, 3539, 2760, 3393, 2774, 3570, 4992,
	2942, 2902, 1303, 2941, 2940, 4081, 772, 263, 3006, 4091,
	4092, 4093, 856, 1031, 902, 3558, 916, 1584, 4271, 1649,
	866, 5118, 4321, 4320, 6019, 3537, 5529, 4777, 5132, 2796,
	1194, 224, 4867, 3371, 2755, 2754, 1461, 769, 3541, 770,
	3525, 4273, 5678, 4095, 300, 866, 866, 3007, 1561, 2760,
	3468, 3320, 4969, 4097, 3225, 3548, 1732, 1930, 1480, 3600,
	2535, 3604, 4466, 3692, 1628, 3136, 4632, 1195, 3568, 3569,
	4547, 4701, 4420, 4020, 866, 3593, 2949, 883, 3559, 5455,
	1566, 5787, 3925, 3545, 3361, 1407, 4910, 866, 3800, 4416,
	3139, 3355, 3549, 3801, 2812, 3284, 3851, 5530, 3290, 1927,
	3538, 2033, 916, 916, 3579, 1109, 3140, 1927, 5576, 2947,
	961, 4267, 3490, 903, 2838, 866, 4228, 1586, 6018, 2720,
	866, 3563, 4270, 2838, 3427, 3427, 3584, 5456, 4467, 884,
	4504, 4868, 4503, 4702, 4502, 3982, 4402, 6095, 997, 997,
	997, 3366, 3631, 881, 2073, 2895, 3622, 3931, 6094, 2542,
	2682, 5122, 5047, 2063, 2064, 2065, 3617, 1861, 3772, 3797,
	1306, 3565, 2057, 2058, 2059, 2060, 2061, 2062, 3003, 4126,
	1815, 1411, 3949, 3408, 315, 3660, 3874, 3535, 4548, 3431,
	3296, 807, 2871, 4910, 3486, 5955, 907, 2670, 904, 1111,
	3706, 909, 1002, 222, 3196, 221, 812, 1710, 3540, 1642,
	5121, 4266, 1133, 3278, 3467, 3544, 6096, 2073, 3588, 5679,
	1196, 3427, 3543, 226, 882, 1441, 2063, 2064, 2065, 3429,
	3429, 1408, 850, 3301, 3838, 2057, 2058, 2059, 2060, 2061,
	2062, 4465, 3340, 5259, 1587, 3409, 5521, 1588, 1184, 1682,
	3359, 1137, 3727, 4268, 4463, 3539, 315, 4389, 5775, 1772,
	136, 1685, 3333, 3381, 4316, 989, 1121, 3688, 3690, 2802,
	1571, 3677, 3799, 2663, 3382, 1640, 1785, 4983, 3794, 1698,
	1193, 3505, 1679, 3810, 1693, 1681, 2662, 4461, 3817, 4457,
	3738, 916, 820, 3004, 1683, 999, 921, 999, 999, 3541,
	2073, 3434, 3687, 1569, 736, 736, 3404, 3788, 3309, 2063,
	2064, 2065, 3743, 5677, 1839, 3728, 3429, 4911, 2057, 2058,
	2059, 2060, 2061, 2062, 4772, 4113, 1848, 2802, 3428, 3428,
	1562, 1723, 2784, 4970, 3372, 3374, 1306, 3376, 2893, 3378,
	3379, 3380, 916, 3493, 3763, 916, 1629, 916, 5961, 3567,
	1694, 3477, 3492, 4421, 3496, 3825, 2784, 3829, 3830, 3491,
	883, 3538, 1567, 1560, 3762, 3669, 3738, 3764, 3765, 2034,
	4417, 3675, 5313, 5785, 4403, 866, 4912, 3555, 1641, 3507,
	3508, 3509, 3510, 3511, 4374, 901, 3705, 1191, 920, 5531,
	2664, 1568, 5700, 5946, 3573, 1565, 3536, 3287, 3291, 5608,
	3293, 2894, 5220, 1844, 1661, 3261, 3262, 3263, 3264, 5831,
	4468, 3826, 1871, 866, 4911, 3428, 5312, 1133, 1870, 4913,
	3144, 2857, 3143, 5815, 4924, 2789, 881, 3100, 3924, 3351,
	3352, 3353, 3354, 2866, 3297, 5219, 3534, 3923, 3868, 4837,
	4334, 3798, 4253, 4464, 3312, 3313, 3314, 3315, 5072, 3641,
	3383, 4995, 5512, 1692, 3916, 5513, 916, 916, 5514, 3540,
	3834, 3835, 5311, 916, 916, 4937, 3544, 6290, 820, 999,
	1657, 999, 999, 4912, 3796, 1306, 5515, 6093, 6289, 5957,
	1306, 1306, 3912, 1306, 3680, 4838, 5956, 1306, 2783, 5283,
	3689, 3640, 3679, 3783, 5297, 1306, 3648, 882, 3528, 301,
	1873, 3965, 3966, 3968, 3899, 816, 3807, 1306, 1432, 2561,
	5799, 1263, 2783, 5517, 3658, 3426, 4913, 2803, 3665, 5814,
	5374, 2804, 866, 5516, 1263, 1265, 4088, 4089, 4090, 3958,
	1087, 3960, 3961, 5518, 2884, 4082, 4083, 4084, 4085, 4086,
	4087, 4965, 4481, 4480, 4456, 1306, 1306, 1643, 4418, 3879,
	4329, 1306, 1282, 6253, 1263, 1265, 3729, 302, 5949, 3935,
	3936, 3937, 3938, 3939, 3940, 3941, 5289, 1306, 1306, 5234,
	3947, 3948, 1306, 1660, 3448, 2803, 1085, 4578, 921, 2804,
	1639, 1306, 6016, 4577, 4649, 3063, 1259, 1306, 1088, 856,
	3300, 6087, 5771, 4684, 4487, 3769, 3671, 5144, 1814, 3775,
	3985, 1306, 2928, 4683, 2917, 4054, 3775, 2889, 3774, 1658,
	2795, 1872, 1306, 3991, 3777, 1414, 3225, 3554, 4828, 2956,
	4045, 5587, 1696, 968, 1813, 3822, 1107, 5066, 3811, 3813,
	4927, 986, 4309, 943, 1488, 1663, 1306, 1306, 1306, 4904,
	5230, 1662, 2859, 2618, 1306, 1306, 1306, 3601, 5040, 1306,
	4257, 1875, 2982, 3443, 4033, 1691, 1119, 1119, 3793, 2980,
	1306, 5039, 1442, 5519, 5520, 2981, 856, 1787, 4925, 1185,
	920, 2979, 3854, 3856, 3857, 4996, 1138, 2987, 3653, 2976,
	4800, 1624, 1306, 3476, 3656, 3657, 790, 6172, 1749, 4134,
	1698, 4926, 790, 790, 4836, 3815, 3984, 4145, 4058, 1738,
	3, 1753, 1754, 3890, 4663, 3888, 2634, 1306, 3889, 3512,
	5689, 3427, 1306, 1874, 1583, 4176, 4176, 820, 2982, 3426,
	4188, 4176, 4176, 1264, 2980, 1115, 1117, 4210, 4891, 6285,
	4022, 3124, 6200, 775, 3561, 5160, 1264, 3915, 4118, 5877,
	790, 5465, 1665, 866, 4125, 866, 1574, 1201, 866, 5437,
	4152, 3964, 1844, 866, 866, 3920, 3921, 4025, 5161, 4060,
	3878, 5216, 4026, 1624, 3252, 4363, 1264, 5139, 6221, 4027,
	6027, 1659, 4328, 2978, 3256, 1656, 3254, 6220, 4024, 5734,
	3251, 6188, 3253, 3255, 6187, 4014, 3064, 4012, 5880, 5879,
	866, 4010, 6026, 4011, 4013, 5735, 3992, 3993, 6032, 6134,
	3998, 3957, 4049, 1576, 6033, 1106, 3429, 1664, 183, 5288,
	987, 1133, 942, 856, 3971, 3975, 5145, 6133, 3201, 3974,
	3654, 3655, 4685, 4827, 4017, 4835, 2977, 866, 866, 1701,
	4140, 3983, 3959, 1699, 4135, 4254, 6029, 6028, 5884, 4239,
	4218, 5805, 5688, 4059, 5883, 5885, 5886, 790, 6030, 1089,
	1623, 5695, 4853, 3898, 6031, 1779, 5696, 4217, 1585, 4211,
	4892, 1306, 4023, 3125, 3814, 2731, 1133, 1133, 1556, 4330,
	1468, 5882, 4007, 4005, 4018, 6222, 6035, 5881, 6034, 5889,
	4353, 2688, 4327, 875, 3086, 4224, 3865, 3021, 1913, 4186,
	794, 1032, 3985, 1306, 4161, 4220, 4037, 3847, 3848, 3265,
	5733, 1722, 4361, 777, 777, 3428, 3858, 1242, 1487, 5036,
	3265, 4325, 4341, 3427, 4343, 3427, 4051, 1774, 1475, 4048,
	5034, 5841, 5653, 5551, 5248, 5056, 5032, 4305, 4136, 4276,
	4277, 4332, 1623, 186, 4312, 4234, 3922, 1797, 3881, 3056,
	3057, 3058, 1584, 4258, 3831, 790, 713, 3891, 715, 717,
	3500, 1259, 4391, 2738, 6048, 4028, 4029, 3902, 2564, 818,
	818, 2021, 1912, 1849, 1847, 790, 4339, 1766, 1675, 4184,
	1438, 4138, 1248, 4107, 4108, 4109, 3284, 4124, 5173, 4173,
	6266, 6050, 6236, 4128, 5753, 4189, 4190, 5752, 6262, 6284,
	6049, 2542, 4360, 3257, 6053, 4761, 4347, 6051, 6308, 3821,
	6195, 6055, 1486, 5480, 4015, 2800, 5281, 5233, 3429, 4738,
	3429, 5035, 4155, 4157, 4156, 4242, 5033, 4297, 1306, 1773,
	1474, 3526, 4183, 3475, 4098, 4099, 4100, 1100, 4181, 4180,
	3444, 4407, 4408, 4179, 4202, 2786, 2042, 1792, 3113, 265,
	758, 2867, 1586, 4232, 4196, 3981, 818, 866, 4214, 2864,
	2866, 5445, 5182, 3871, 5450, 3873, 4229, 2877, 5448, 2772,
	5449, 5451, 1176, 3433, 5911, 5912, 5460, 807, 4455, 3978,
	3978, 3629, 6058, 6056, 4243, 1573, 5910, 5179, 6052, 5461,
	5915, 6064, 6065, 3261, 3262, 3263, 3264, 5727, 4346, 6283,
	3258, 5725, 4274, 5914, 3261, 3262, 3263, 3264, 4295, 4296,
	5728, 4016, 4300, 5492, 1577, 2865, 1159, 3428, 1572, 3428,
	3628, 136, 3397, 3398, 3630, 2901, 6063, 4446, 5211, 4447,
	4151, 5501, 4030, 4387, 3367, 4310, 5497, 2868, 916, 916,
	5967, 4035, 6239, 4150, 1927, 187, 188, 189, 190, 5966,
	5967, 3627, 5966, 3973, 6057, 916, 5705, 5447, 4875, 5452,
	4514, 2838, 4338, 5894, 4340, 3209, 3210, 4610, 4611, 1587,
	5893, 4390, 1588, 3787, 3944, 3946, 4482, 4150, 4483, 4484,
	1133, 3952, 3953, 4200, 4201, 1417, 5702, 5491, 4380, 4362,
	4369, 5459, 4376, 5704, 5703, 1108, 4413, 866, 1028, 937,
	4876, 6063, 6151, 2732, 5494, 5495, 4899, 4292, 3402, 4112,
	4148, 999, 4443, 957, 3089, 4560, 3388, 299, 6291, 3446,
	4426, 5572, 6190, 3028, 2537, 4449, 5833, 3599, 866, 4477,
	5273, 5046, 4409, 4877, 4878, 4879, 5045, 5503, 5496, 4770,
	5499, 5500, 5502, 5498, 6191, 4540, 948, 4538, 3943, 3942,
	1864, 4445, 3045, 3043, 2905, 1715, 916, 948, 948, 1719,
	5190, 4167, 4172, 4170, 4171, 4169, 2904, 4165, 4168, 5189,
	3387, 4557, 4300, 4523, 1306, 3595, 2690, 2638, 1306, 1001,
	4197, 4167, 4172, 4170, 4171, 4169, 2637, 4165, 4168, 4746,
	5191, 1306, 1019, 1023, 4241, 4741, 4740, 4576, 4241, 4785,
	1756, 1306, 6189, 866, 866, 5791, 6132, 6131, 1767, 866,
	5965, 1306, 1306, 5963, 4453, 1306, 1306, 1306, 5891, 1306,
	5693, 5658, 5240, 991, 5019, 4884, 997, 4717, 997, 997,
	1306, 4716, 4658, 4657, 4556, 4811, 4521, 4520, 1224, 4240,
	4566, 4431, 3917, 1306, 3844, 1306, 4573, 3756, 3750, 4608,
	4167, 4172, 4170, 4171, 4169, 3746, 4165, 4168, 3726, 3724,
	1306, 4744, 4172, 4170, 4171, 4169, 4654, 1306, 3646, 3453,
	3395, 1306, 1306, 4585, 3156, 3155, 2890, 2773, 2724, 2719,
	1915, 4432, 1865, 1716, 1667, 1306, 4439, 1666, 790, 1632,
	1306, 1481, 1395, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
	1306, 1306, 1306, 1306, 1306, 1306, 1161, 1306, 4513, 1150,
	811, 5397, 4515, 2052, 1306, 1306, 1306, 889, 4546, 885,
	5108, 4613, 1306, 4313, 1306, 3302, 6118, 6038, 6037, 5916,
	5158, 1306, 5419, 5350, 5222, 1306, 5109, 856, 4957, 4953,
	1306, 4812, 4662, 4248, 1306, 3913, 2811, 2808, 1272, 1113,
	1096, 1265, 1306, 1306, 1306, 4532, 4322, 2863, 4533, 809,
	5300, 1306, 3183, 3990, 4603, 3401, 3977, 5257, 4345, 5301,
	5256, 2634, 4550, 1410, 3411, 3426, 4056, 2642, 3426, 6214,
	2641, 6008, 789, 5558, 5425, 5390, 4751, 4559, 5302, 4176,
	4188, 4176, 4176, 4176, 4602, 5298, 3976, 4574, 4758, 991,
	997, 788, 997, 997, 5143, 1306, 1306, 5081, 1306, 4631,
	4193, 4074, 4019, 3885, 4699, 2760, 3214, 3105, 4782, 888,
	6213, 877, 891, 6107, 5634, 5631, 5389, 4731, 4732, 5373,
	5343, 5338, 5337, 4998, 4987, 4986, 4984, 4971, 4964, 1306,
	4873, 4506, 4505, 4501, 4499, 4497, 818, 4496, 1306, 1306,
	4597, 866, 1144, 1844, 3964, 4494, 4492, 4486, 4485, 4475,
	4450, 4444, 4442, 4424, 4422, 4419, 4351, 866, 4350, 4349,
	2646, 4006, 3268, 5769, 916, 4004, 3887, 3840, 3819, 3771,
	1306, 866, 3770, 4820, 4617, 4618, 4619, 4620, 3732, 3731,
	3250, 4793, 3267, 3268, 4000, 3073, 4714, 4829, 3505, 3026,
	4718, 3025, 3024, 3023, 916, 2986, 2970, 2967, 2966, 2963,
	2958, 2952, 895, 4646, 3284, 2944, 4783, 2936, 2933, 2931,
	2930, 2929, 4652, 2927, 172, 4633, 2924, 4786, 2923, 894,
	2918, 4796, 4798, 2916, 893, 4792, 2913, 866, 2908, 2900,
	4871, 4810, 4781, 2888, 2879, 4661, 3426, 3558, 892, 2878,
	4735, 2855, 2854, 4886, 3985, 2853, 4865, 2851, 4667, 4186,
	2849, 2847, 2833, 2831, 4656, 2799, 4819, 2794, 2787, 2639,
	3226, 3427, 3227, 3863, 3427, 2760, 3862, 1183, 1136, 4905,
	1126, 3033, 3032, 1844, 5405, 5099, 1844, 5088, 1844, 4921,
	4817, 4276, 4277, 5086, 4855, 5084, 5083, 4596, 4698, 4713,
	4595, 4593, 4712, 4943, 4627, 4628, 4592, 4767, 4849, 4863,
	3559, 2838, 4591, 4726, 4920, 4850, 4747, 4748, 4734, 4590,
	4737, 4589, 2838, 2838, 4727, 4739, 4725, 4588, 4742, 4587,
	4583, 4743, 3284, 4581, 3950, 4711, 4916, 4928, 4530, 4814,
	3158, 4754, 3157, 3152, 4881, 3151, 3150, 4880, 818, 3584,
	818, 4898, 4922, 4753, 3149, 4755, 4756, 4773, 3148, 3147,
	3985, 4890, 3146, 3145, 4795, 3300, 3429, 807, 807, 3429,
	6174, 4908, 6144, 1927, 4915, 4805, 4917, 6173, 807, 4809,
	807, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678,
	4679, 4680, 4681, 4682, 4815, 4686, 4897, 4276, 4277, 4933,
	4936, 3467, 3247, 4813, 5923, 4828, 5328, 3934, 5092, 3245,
	3248, 3244, 6275, 3246, 5324, 4659, 4660, 5170, 4319, 5169,
	2935, 5042, 5136, 4840, 5135, 4458, 3725, 3718, 2038, 4846,
	3714, 3710, 2891, 4848, 4900, 5290, 3909, 3908, 3907, 3906,
	4594, 4605, 3427, 3427, 4854, 3905, 4517, 4518, 790, 4856,
	3566, 4864, 2825, 1672, 1527, 1518, 4882, 4861, 1268, 3283,
	861, 4036, 3738, 4527, 6257, 3428, 807, 5272, 3428, 3282,
	4885, 227, 4888, 5321, 3985, 4896, 6274, 4842, 1269, 3450,
	862, 5237, 3883, 1487, 5779, 3427, 5778, 5012, 4715, 1711,
	5318, 4938, 5226, 4934, 910, 4642, 2537, 4935, 4941, 1131,
	1712, 5263, 4508, 4365, 3587, 3547, 3454, 2714, 2706, 2654,
	5055, 5002, 5003, 2647, 4947, 1484, 1473, 1467, 1306, 1465,
	921, 1444, 6129, 5489, 877, 5620, 5619, 5570, 866, 866,
	866, 866, 5102, 5379, 5041, 1306, 1306, 3429, 3429, 4901,
	1534, 1306, 1306, 4510, 4452, 4394, 2679, 4392, 1306, 1306,
	4765, 4364, 4326, 5021, 4221, 1306, 3531, 3527, 3452, 2845,
	3912, 3447, 1306, 3054, 4582, 3046, 3044, 3041, 4832, 2829,
	5004, 2824, 4694, 1306, 4999, 2725, 3040, 2710, 2702, 3028,
	3429, 2700, 5070, 2680, 1778, 1777, 1776, 4967, 1771, 1770,
	3052, 1768, 1761, 1757, 4973, 1720, 5106, 5074, 5075, 5076,
	5077, 5078, 1717, 1713, 5085, 5082, 5087, 1536, 1306, 1708,
	1686, 1633, 920, 1550, 1546, 1526, 1306, 1517, 5326, 1306,
	5325, 1306, 3806, 5020, 1086, 1432, 3783, 1084, 6041, 5970,
	5958, 1449, 5859, 5599, 1501, 1534, 3428, 3428, 5691, 1502,
	4921, 5622, 5064, 1510, 5539, 5479, 5063, 1306, 5329, 5285,
	5071, 3426, 3426, 5271, 5260, 3426, 5044, 4791, 4216, 5183,
	3951, 820, 3869, 5079, 3552, 3546, 1788, 2737, 4176, 2648,
	3505, 5200, 2629, 820, 3730, 2603, 1818, 3179, 3180, 3428,
	5093, 5094, 5095, 5096, 5097, 5098, 3009, 5100, 5101, 3008,
	3979, 793, 793, 807, 6282, 793, 793, 6267, 6105, 3438,
	916, 5811, 1536, 4922, 3550, 3661, 4816, 5174, 5175, 4333,
	2861, 5770, 2807, 3142, 5204, 4769, 1324, 1323, 1316, 5221,
	5134, 2620, 866, 5238, 1129, 5137, 1805, 1612, 5246, 5557,
	1535, 6085, 1844, 5552, 1509, 5250, 5203, 5773, 5217, 5554,
	790, 5951, 1306, 5550, 5231, 2661, 5546, 4230, 5001, 4233,
	5198, 5199, 5138, 916, 3457, 4222, 3464, 1616, 700, 5157,
	2872, 3481, 2760, 2667, 2666, 1514, 5564, 5563, 5258, 5798,
	5255, 4993, 1215, 1216, 3553, 5167, 5235, 820, 3744, 5241,
	4872, 4874, 4331, 5227, 908, 5286, 3551, 1479, 2948, 1646,
	5270, 5810, 4869, 1582, 1579, 3558, 3818, 3513, 2988, 4290,
	1306, 4289, 122, 5225, 121, 4929, 120, 5280, 1500, 119,
	118, 790, 2760, 117, 116, 5305, 115, 114, 5177, 5176,
	5261, 53, 1537, 1614, 52, 1535, 51, 1043, 1043, 50,
	49, 48, 997, 47, 1306, 1504, 3427, 5196, 46, 45,
	73, 72, 71, 5267, 5268, 70, 790, 3427, 3427, 69,
	5279, 3427, 1538, 5277, 68, 1539, 67, 66, 3559, 1540,
	65, 64, 63, 62, 61, 60, 59, 5307, 58, 3427,
	1506, 2653, 57, 56, 5244, 55, 1505, 5215, 54, 44,
	43, 1541, 4826, 5264, 42, 5304, 41, 2838, 5185, 40,
	39, 38, 37, 36, 4928, 35, 34, 32, 31, 30,
	29, 5186, 5187, 5253, 28, 5192, 33, 27, 26, 5265,
	25, 1603, 4845, 24, 23, 3062, 3061, 1537, 813, 1544,
	1247, 1507, 3001, 5322, 1306, 4568, 3910, 1702, 766, 1192,
	1190, 3429, 1853, 1613, 1169, 1179, 1542, 3002, 3532, 113,
	112, 5357, 3429, 3429, 111, 916, 3429, 1538, 110, 88,
	1539, 5291, 5005, 1543, 1540, 5293, 87, 86, 85, 84,
	790, 83, 82, 81, 3429, 80, 1533, 736, 79, 78,
	77, 5303, 5, 1609, 76, 5327, 1541, 1511, 91, 93,
	790, 92, 90, 5331, 89, 74, 18, 17, 1695, 2674,
	1545, 3427, 209, 1415, 5330, 2686, 1606, 3215, 4385, 5276,
	4366, 4902, 317, 1520, 5334, 6163, 3582, 5932, 4776, 195,
	3659, 5786, 1513, 1512, 1544, 4262, 4259, 4909, 4774, 1306,
	1611, 5816, 4918, 4780, 3440, 4778, 3436, 1306, 1306, 1306,
	3428, 1542, 6235, 5446, 4062, 3364, 3369, 5440, 5723, 5073,
	5399, 3428, 3428, 5481, 6046, 3428, 5242, 790, 1543, 5478,
	1602, 5201, 3502, 1306, 1306, 178, 5701, 1306, 1306, 1306,
	5458, 1647, 1617, 3428, 3386, 2636, 5418, 3783, 5375, 5376,
	127, 5378, 860, 859, 6040, 1277, 5739, 3783, 5927, 5504,
	2673, 5213, 5493, 4768, 1306, 1545, 3429, 192, 1148, 1503,
	5444, 3123, 1198, 753, 1644, 3112, 818, 136, 1175, 818,
	1604, 1306, 3426, 2640, 5210, 5209, 5401, 5402, 5200, 5403,
	5913, 5404, 2712, 5909, 1610, 5908, 1306, 1306, 2721, 1516,
	4728, 3394, 5207, 5391, 3407, 2624, 109, 108, 107, 866,
	1607, 106, 105, 5524, 104, 4782, 103, 1605, 102, 101,
	100, 1615, 99, 98, 866, 97, 96, 95, 94, 16,
	4921, 866, 15, 14, 11, 5671, 5669, 5670, 5152, 5668,
	5523, 5509, 3272, 923, 2081, 3202, 1266, 5413, 2041, 1258,
	5676, 4653, 822, 2760, 5131, 5662, 2558, 6042, 1608, 4749,
	1048, 1049, 1736, 1046, 1076, 3428, 1630, 5163, 5473, 4709,
	5454, 5406, 866, 4700, 5527, 3189, 3332, 3328, 3317, 3339,
	4871, 5151, 3288, 5540, 1301, 1300, 999, 5506, 3298, 916,
	4047, 954, 5591, 4922, 5433, 2556, 1295, 1296, 1291, 2032,
	5466, 6, 954, 954, 2029, 3901, 3087, 2834, 4921, 921,
	5471, 916, 916, 5471, 3626, 5568, 5439, 5457, 822, 5453,
	5533, 4352, 4410, 822, 954, 3632, 5832, 3805, 822, 2088,
	822, 1895, 5490, 4920, 3137, 1893, 805, 954, 954, 4781,
	5589, 5615, 5525, 5510, 1221, 5586, 5597, 818, 818, 5522,
	1074, 1074, 5567, 5548, 921, 999, 3318, 5547, 5507, 2083,
	954, 954, 954, 5487, 5544, 2, 5626, 5573, 5628, 75,
	1, 4922, 5541, 0, 0, 5600, 148, 0, 3427, 0,
	0, 5486, 3985, 0, 0, 5613, 0, 0, 4314, 4315,
	818, 10, 0, 2712, 22, 0, 954, 0, 4324, 0,
	5594, 920, 5664, 172, 1306, 5606, 5592, 0, 9, 0,
	1306, 21, 0, 8, 0, 5638, 1306, 0, 5602, 4276,
	4277, 1306, 5609, 1306, 5611, 0, 3427, 7, 5656, 5657,
	5636, 5612, 5469, 5650, 5652, 0, 1306, 5623, 0, 0,
	0, 0, 0, 20, 0, 0, 920, 19, 0, 13,
	0, 0, 0, 12, 4921, 0, 0, 0, 0, 0,
	0, 1306, 0, 0, 0, 0, 0, 5706, 820, 5637,
	5640, 5718, 0, 3429, 5635, 1306, 0, 0, 0, 5707,
	1306, 0, 0, 0, 0, 0, 0, 0, 5232, 5654,
	0, 2712, 0, 3055, 0, 0, 0, 0, 0, 0,
	0, 790, 5333, 0, 3427, 0, 0, 0, 5661, 5660,
	790, 790, 5745, 0, 0, 0, 0, 4922, 0, 0,
	5708, 3429, 5424, 0, 0, 0, 0, 0, 5746, 0,
	0, 5203, 0, 0, 5684, 5740, 0, 5748, 0, 0,
	0, 5274, 0, 0, 0, 0, 0, 1133, 0, 866,
	0, 5751, 0, 0, 0, 0, 0, 0, 0, 5363,
	5364, 866, 0, 0, 5367, 5368, 5729, 5730, 5713, 1306,
	5731, 5732, 3428, 5714, 0, 0, 0, 0, 5783, 0,
	5755, 0, 820, 5709, 0, 0, 3426, 0, 0, 0,
	0, 5782, 0, 0, 5761, 1306, 1306, 5776, 4478, 3429,
	0, 866, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 1306, 0, 5754, 0, 0, 0, 0, 0,
	3428, 0, 5756, 0, 0, 0, 0, 5750, 0, 0,
	0, 0, 5763, 5765, 1306, 5757, 0, 0, 916, 0,
	5764, 916, 916, 916, 5818, 5801, 0, 5772, 0, 0,
	3427, 5806, 0, 5807, 0, 0, 0, 0, 5780, 5837,
	0, 0, 0, 1306, 3427, 0, 5803, 5800, 1306, 1306,
	1306, 0, 1306, 5804, 5827, 5813, 0, 0, 0, 0,
	0, 1306, 0, 0, 5812, 0, 0, 0, 0, 0,
	0, 4524, 4525, 1844, 0, 0, 2634, 5244, 3428, 5829,
	0, 5821, 0, 5823, 0, 5825, 3505, 0, 0, 0,
	1306, 0, 0, 5828, 0, 5907, 5843, 0, 5844, 5845,
	0, 5842, 5856, 0, 1844, 0, 1844, 5855, 0, 0,
	5853, 5895, 0, 5377, 5847, 0, 0, 5848, 0, 0,
	5934, 818, 0, 0, 0, 3429, 0, 0, 5931, 0,
	0, 0, 818, 818, 5872, 5873, 818, 856, 0, 3429,
	5930, 0, 5193, 0, 5888, 5887, 0, 0, 0, 5851,
	5937, 0, 4575, 5929, 818, 0, 0, 0, 0, 5939,
	0, 5892, 3427, 0, 5944, 1133, 5898, 0, 5906, 1820,
	916, 5903, 0, 0, 5905, 0, 0, 0, 0, 0,
	0, 5938, 0, 5935, 5682, 3307, 5926, 0, 0, 0,
	0, 5506, 5921, 1844, 5924, 0, 3334, 921, 0, 0,
	0, 5941, 0, 0, 1306, 0, 5948, 954, 3360, 0,
	0, 3307, 0, 0, 0, 0, 5940, 954, 0, 0,
	954, 0, 0, 5954, 3428, 0, 0, 954, 0, 5664,
	954, 1306, 5964, 1306, 1306, 5962, 5968, 0, 3428, 1306,
	0, 5987, 0, 5722, 0, 5972, 0, 0, 790, 1901,
	1902, 6025, 5990, 0, 0, 0, 0, 3429, 5287, 0,
	0, 0, 0, 5993, 5974, 0, 6017, 5991, 0, 0,
	0, 5718, 6002, 5989, 0, 1306, 818, 0, 0, 954,
	6039, 5985, 0, 0, 0, 0, 6007, 6010, 3841, 920,
	3842, 0, 3843, 6011, 1844, 3845, 6009, 0, 6023, 6024,
	5984, 0, 5986, 0, 5988, 0, 0, 1306, 0, 0,
	6070, 0, 0, 0, 0, 0, 3427, 3867, 4921, 0,
	0, 1306, 822, 822, 0, 6086, 3875, 999, 999, 6045,
	2760, 6076, 0, 6083, 6073, 6074, 6080, 822, 6078, 0,
	5680, 0, 6077, 0, 0, 0, 0, 0, 0, 0,
	0, 5683, 0, 0, 0, 0, 3428, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 822, 6079, 0, 822,
	0, 6082, 0, 6112, 999, 5231, 0, 5601, 916, 0,
	0, 4922, 6066, 2800, 0, 1306, 3918, 6088, 6089, 0,
	6097, 5710, 6100, 6090, 6106, 0, 0, 0, 0, 5616,
	5617, 5818, 6115, 6116, 6108, 6111, 6110, 6136, 1844, 1844,
	6135, 3429, 6139, 0, 0, 0, 6114, 0, 6103, 1306,
	1306, 0, 0, 1306, 0, 0, 6124, 6121, 2634, 0,
	1074, 0, 3401, 0, 6119, 0, 0, 0, 0, 0,
	0, 0, 0, 5934, 916, 916, 6149, 5741, 0, 0,
	0, 0, 4921, 0, 820, 790, 6158, 0, 2669, 6141,
	0, 0, 0, 6148, 0, 6146, 6150, 0, 2683, 6162,
	0, 0, 6160, 0, 6155, 6156, 6159, 6164, 5929, 6153,
	6154, 0, 0, 6161, 0, 0, 0, 0, 0, 916,
	1133, 0, 0, 6171, 0, 0, 6137, 6138, 0, 0,
	1306, 0, 0, 0, 0, 0, 5935, 0, 1074, 0,
	3428, 1306, 0, 6178, 3427, 4922, 0, 0, 6198, 0,
	0, 0, 0, 1306, 6180, 5819, 5820, 6186, 0, 0,
	0, 0, 6179, 0, 0, 0, 0, 0, 0, 0,
	6205, 0, 6207, 0, 6175, 0, 0, 0, 1306, 4857,
	4858, 0, 0, 6204, 0, 0, 0, 6203, 6210, 954,
	6206, 820, 6226, 6227, 6228, 6212, 5718, 0, 0, 0,
	0, 0, 0, 6223, 916, 0, 954, 0, 6237, 6238,
	4921, 0, 954, 818, 6242, 6230, 954, 954, 0, 0,
	6215, 6216, 6244, 2540, 0, 0, 0, 0, 6219, 0,
	6243, 6246, 0, 6198, 6241, 6245, 0, 5444, 6260, 3429,
	0, 0, 1074, 0, 954, 0, 0, 0, 0, 6217,
	0, 0, 6264, 6269, 6261, 6268, 954, 0, 820, 1306,
	0, 818, 954, 0, 0, 6270, 0, 6273, 0, 3427,
	6276, 0, 6279, 4922, 820, 6277, 6280, 6281, 3427, 0,
	6286, 2909, 0, 6287, 6293, 0, 0, 5444, 6295, 6294,
	999, 999, 6303, 6298, 6252, 0, 6305, 6198, 6307, 6306,
	0, 6299, 6292, 0, 6309, 0, 0, 0, 0, 6310,
	0, 822, 0, 6198, 6314, 0, 0, 997, 0, 0,
	0, 0, 1074, 1074, 822, 822, 0, 0, 0, 822,
	822, 0, 0, 0, 0, 0, 0, 0, 3428, 818,
	0, 954, 0, 0, 822, 0, 0, 1932, 822, 0,
	6301, 6302, 0, 0, 0, 6252, 822, 0, 822, 0,
	5849, 5850, 0, 0, 3429, 822, 0, 0, 3016, 0,
	1043, 0, 0, 3429, 0, 0, 822, 822, 822, 822,
	822, 0, 0, 6252, 0, 0, 997, 822, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 5981, 0, 0,
	0, 0, 0, 0, 0, 0, 3427, 1043, 283, 0,
	3042, 822, 0, 6012, 6013, 0, 3047, 0, 0, 0,
	0, 0, 0, 2084, 0, 0, 2054, 0, 0, 0,
	2066, 2067, 2068, 0, 0, 0, 0, 6142, 6143, 0,
	0, 6145, 2609, 0, 0, 2610, 0, 0, 0, 2615,
	0, 2607, 0, 0, 0, 0, 2612, 2616, 2611, 0,
	2613, 0, 0, 3428, 2614, 2077, 2078, 2608, 0, 0,
	1303, 0, 3428, 4081, 2617, 0, 0, 4091, 4092, 4093,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 5117,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 818,
	0, 3429, 0, 0, 0, 0, 0, 0, 5971, 0,
	0, 4095, 4393, 0, 4395, 3625, 0, 289, 0, 3334,
	3334, 4097, 3167, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 954, 0, 0, 0, 0,
	0, 1074, 0, 0, 1932, 0, 1932, 0, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 3684, 3159, 0, 3161, 0, 0, 954, 0, 0,
	1243, 0, 0, 954, 0, 0, 0, 3697, 0, 0,
	0, 3700, 0, 3702, 3166, 0, 0, 0, 3334, 3334,
	3334, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	3428, 0, 0, 0, 0, 0, 3720, 284, 0, 3168,
	0, 0, 0, 5809, 0, 1303, 3723, 818, 4081, 4451,
	0, 0, 4091, 4092, 4093, 0, 0, 1074, 948, 0,
	1241, 0, 0, 0, 4638, 0, 3739, 0, 0, 0,
	0, 0, 0, 0, 3749, 3169, 0, 0, 0, 0,
	0, 3752, 0, 0, 0, 3755, 4095, 1074, 3758, 0,
	0, 3760, 0, 0, 0, 0, 4097, 0, 1303, 0,
	0, 4081, 3766, 0, 0, 4091, 4092, 4093, 0, 0,
	948, 0, 0, 0, 0, 0, 948, 4637, 0, 0,
	0, 0, 0, 0, 3780, 0, 0, 0, 3786, 0,
	0, 0, 0, 6202, 3224, 0, 0, 263, 3170, 4095,
	293, 0, 0, 0, 3816, 4509, 6120, 0, 4511, 4097,
	0, 0, 0, 0, 1074, 0, 0, 0, 6218, 1244,
	0, 0, 3171, 0, 0, 0, 5292, 294, 0, 0,
	1303, 0, 281, 4081, 0, 295, 0, 4091, 4092, 4093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 1245, 0, 954, 0,
	0, 818, 1246, 0, 4096, 0, 4535, 288, 4537, 0,
	4539, 4095, 964, 964, 0, 0, 0, 3165, 3884, 0,
	6249, 4097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3895, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 1074, 0, 0, 5340, 0, 0, 0,
	5342, 0, 0, 0, 0, 0, 0, 6181, 822, 0,
	0, 0, 0, 3895, 0, 0, 1303, 3163, 0, 4081,
	0, 0, 0, 4091, 4092, 4093, 0, 0, 0, 0,
	1074, 6249, 0, 1074, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 954, 0, 954, 954,
	954, 954, 0, 0, 0, 0, 0, 4095, 0, 6249,
	0, 2084, 0, 0, 2054, 0, 0, 4097, 2066, 2067,
	2068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2609, 0, 0, 2610, 0, 0, 0, 2615, 0, 2607,
	0, 0, 964, 0, 2612, 2616, 2611, 0, 4103, 822,
	822, 822, 2614, 2077, 2078, 2608, 0, 0, 2073, 0,
	0, 0, 2617, 0, 4104, 0, 0, 2063, 2064, 2065,
	0, 0, 0, 0, 4075, 954, 2057, 2058, 2059, 2060,
	2061, 2062, 0, 4076, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 997,
	0, 0, 0, 0, 4088, 4089, 4090, 0, 0, 0,
	0, 0, 0, 4082, 4083, 4084, 4085, 4086, 4087, 0,
	4105, 0, 0, 0, 0, 1074, 0, 1074, 0, 0,
	0, 0, 0, 822, 822, 822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 2084, 1501, 0, 2054, 0, 0,
	1502, 2066, 2067, 2068, 1510, 0, 0, 130, 0, 0,
	0, 129, 131, 2609, 0, 0, 2610, 0, 0, 0,
	2615, 179, 2607, 0, 0, 0, 0, 2612, 2616, 2611,
	0, 2613, 0, 0, 0, 2614, 2077, 2078, 2608, 0,
	0, 0, 0, 0, 0, 2617, 0, 0, 176, 0,
	0, 0, 177, 0, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 6166, 3643, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 1612, 0, 822, 0, 2882, 0, 4088,
	4089, 4090, 822, 822, 168, 1509, 128, 0, 4082, 4083,
	4084, 4085, 4086, 4087, 174, 0, 822, 1074, 0, 0,
	822, 822, 822, 822, 822, 822, 822, 822, 822, 822,
	822, 822, 822, 822, 822, 822, 1514, 822, 0, 0,
	0, 0, 0, 0, 0, 1932, 0, 0, 0, 0,
	0, 0, 4088, 4089, 4090, 2883, 0, 0, 0, 0,
	0, 4082, 4083, 4084, 4085, 4086, 4087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 6224, 5633, 0, 0, 137, 0, 0, 1614,
	1498, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 818, 0, 0, 0, 0, 1504, 0, 0, 169,
	0, 0, 0, 0, 0, 152, 0, 157, 150, 0,
	0, 166, 0, 139, 4088, 4089, 4090, 0, 3334, 3334,
	0, 0, 0, 4082, 4083, 4084, 4085, 4086, 4087, 1499,
	0, 1506, 0, 0, 159, 154, 0, 1505, 0, 6224,
	0, 0, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 5545, 0, 0, 0, 6288, 0, 0, 158, 146,
	0, 0, 0, 0, 0, 155, 6022, 1603, 0, 0,
	0, 997, 997, 0, 0, 144, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 134, 0, 1613,
	0, 0, 0, 0, 0, 3334, 3334, 3334, 3334, 3334,
	3334, 3334, 3334, 3334, 3334, 3334, 3334, 3334, 0, 3334,
	4088, 4089, 4090, 160, 163, 0, 0, 0, 164, 4082,
	4083, 4084, 4085, 4086, 4087, 0, 0, 1508, 0, 1609,
	156, 1297, 126, 0, 0, 0, 0, 4704, 1511, 0,
	0, 0, 3307, 162, 0, 0, 2073, 3571, 0, 0,
	0, 0, 1606, 0, 0, 2063, 2064, 2065, 0, 0,
	6021, 0, 0, 143, 2057, 2058, 2059, 2060, 2061, 2062,
	3590, 3642, 0, 1513, 1512, 133, 1611, 0, 0, 132,
	151, 0, 142, 0, 0, 0, 136, 0, 4228, 0,
	145, 0, 140, 0, 0, 5057, 0, 0, 141, 0,
	0, 0, 0, 167, 0, 0, 0, 4763, 0, 5062,
	0, 0, 0, 149, 0, 0, 0, 0, 1617, 0,
	4460, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5080, 0, 0, 0, 0, 0, 165, 0, 0,
	1503, 0, 0, 136, 0, 0, 1604, 161, 0, 4489,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1610, 0, 0, 0, 0, 0, 1534, 0, 126, 0,
	1516, 0, 3334, 0, 0, 0, 1607, 0, 0, 0,
	0, 0, 0, 1605, 0, 0, 0, 1615, 0, 2073,
	0, 0, 0, 180, 855, 857, 0, 0, 2063, 2064,
	2065, 0, 0, 0, 126, 0, 173, 2057, 2058, 2059,
	2060, 2061, 2062, 126, 0, 0, 0, 0, 4526, 0,
	0, 0, 0, 0, 1608, 0, 0, 0, 0, 0,
	0, 0, 0, 1536, 0, 0, 2084, 0, 0, 2054,
	0, 0, 0, 2066, 2067, 2068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2609, 0, 0, 2610, 2712,
	0, 0, 2615, 0, 2607, 0, 0, 0, 0, 2612,
	2616, 2611, 0, 2613, 4555, 0, 0, 2614, 2077, 2078,
	2608, 0, 0, 0, 0, 0, 0, 2617, 0, 822,
	822, 4572, 822, 3824, 0, 822, 0, 0, 0, 3832,
	0, 0, 0, 0, 0, 822, 822, 0, 0, 0,
	0, 0, 822, 0, 822, 822, 822, 822, 822, 822,
	822, 822, 822, 822, 822, 0, 822, 0, 822, 0,
	822, 822, 822, 822, 822, 822, 3459, 822, 822, 822,
	0, 0, 822, 0, 1612, 0, 0, 0, 822, 0,
	0, 0, 822, 822, 822, 822, 1535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3892, 0, 0, 0, 0, 0, 0, 0, 2084,
	822, 822, 2054, 0, 0, 0, 2066, 2067, 2068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2609, 0,
	0, 2610, 1074, 0, 0, 2615, 2883, 2607, 0, 0,
	0, 1074, 2612, 2616, 2611, 0, 2613, 0, 0, 0,
	2614, 2077, 2078, 2608, 0, 0, 0, 1932, 0, 0,
	2617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1614, 0, 0, 0, 0, 0, 0, 0, 1537, 2084,
	0, 0, 2054, 0, 0, 0, 2066, 2067, 2068, 0,
	0, 0, 1932, 0, 0, 3955, 3956, 822, 2609, 0,
	0, 2610, 0, 0, 0, 2615, 0, 2607, 1538, 0,
	1074, 1539, 2612, 2616, 2611, 1540, 2613, 0, 0, 0,
	2614, 2077, 2078, 2608, 0, 0, 1932, 2653, 0, 0,
	2617, 5335, 5336, 1074, 0, 0, 0, 1541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1603, 0,
	954, 0, 0, 0, 1932, 0, 0, 0, 5356, 0,
	0, 0, 0, 0, 0, 1544, 0, 0, 0, 0,
	1613, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 1543,
	1074, 1074, 0, 0, 0, 0, 0, 0, 0, 1074,
	1609, 0, 954, 0, 0, 5380, 954, 0, 954, 0,
	5383, 0, 0, 0, 954, 0, 0, 0, 5159, 0,
	0, 0, 822, 1606, 0, 0, 1545, 5392, 5393, 5394,
	2084, 954, 0, 2054, 0, 0, 0, 2066, 2067, 2068,
	0, 954, 0, 0, 3460, 4824, 0, 1611, 0, 2609,
	5400, 0, 2610, 954, 954, 0, 2615, 0, 2607, 0,
	1932, 954, 0, 2612, 2616, 2611, 0, 2613, 0, 954,
	0, 2614, 2077, 2078, 2608, 0, 954, 4131, 0, 0,
	954, 2617, 0, 954, 0, 0, 954, 0, 0, 1617,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	2712, 0, 0, 0, 0, 954, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 954, 136, 0, 0, 1604, 0, 0,
	0, 0, 0, 0, 0, 0, 1932, 0, 0, 954,
	0, 1610, 0, 0, 822, 0, 1074, 822, 3590, 822,
	822, 2073, 1074, 0, 0, 0, 0, 1607, 0, 0,
	2063, 2064, 2065, 0, 1605, 0, 0, 6229, 1615, 2057,
	2058, 2059, 2060, 2061, 2062, 126, 857, 0, 0, 0,
	0, 3461, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	1502, 0, 0, 0, 1510, 1608, 0, 3462, 0, 0,
	0, 0, 0, 954, 0, 4288, 0, 0, 0, 954,
	0, 0, 0, 0, 1074, 0, 954, 2084, 0, 0,
	2054, 0, 4976, 0, 2066, 2067, 2068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2609, 0, 0, 2610,
	0, 0, 1932, 2615, 0, 2607, 0, 0, 954, 0,
	2612, 2616, 2611, 0, 2613, 0, 1525, 0, 2614, 2077,
	2078, 2608, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 0, 0, 0, 5026, 0, 0, 0, 0, 5031,
	855, 0, 0, 0, 2073, 1509, 0, 0, 0, 0,
	0, 0, 0, 2063, 2064, 2065, 0, 0, 0, 0,
	6167, 0, 2057, 2058, 2059, 2060, 2061, 2062, 1074, 1074,
	822, 822, 0, 822, 822, 0, 1514, 822, 0, 0,
	0, 0, 822, 822, 0, 822, 0, 0, 0, 822,
	0, 3895, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 2073, 0, 0, 822, 0, 1500,
	0, 0, 0, 2063, 2064, 2065, 0, 0, 0, 0,
	6157, 0, 2057, 2058, 2059, 2060, 2061, 2062, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 822, 822, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	822, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 1506, 0, 822, 0, 2084, 0, 1505, 2054, 822,
	0, 0, 2066, 2067, 2068, 0, 0, 0, 0, 0,
	0, 4472, 4474, 822, 2609, 0, 3334, 2610, 0, 0,
	0, 2615, 0, 2607, 822, 0, 0, 0, 2612, 2616,
	2611, 0, 2613, 0, 0, 0, 2614, 2077, 2078, 2608,
	0, 0, 1507, 0, 0, 0, 2617, 0, 822, 822,
	822, 0, 0, 0, 0, 0, 822, 822, 822, 0,
	0, 822, 0, 0, 0, 0, 0, 0, 1932, 0,
	0, 0, 822, 0, 1932, 0, 0, 0, 3334, 0,
	1074, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 4516, 822, 2073, 0, 0, 1511, 0,
	0, 4519, 0, 0, 2063, 2064, 2065, 0, 0, 0,
	0, 6006, 0, 2057, 2058, 2059, 2060, 2061, 2062, 822,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 822,
	0, 822, 0, 1513, 1512, 0, 0, 0, 0, 4536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 126, 2084, 0,
	0, 2054, 0, 0, 0, 2066, 2067, 2068, 1074, 0,
	5724, 0, 0, 954, 0, 0, 0, 2609, 0, 0,
	2610, 0, 5852, 0, 2615, 5854, 2607, 0, 5857, 0,
	0, 2612, 2616, 2611, 0, 2613, 0, 0, 0, 2614,
	2077, 2078, 2608, 0, 0, 0, 0, 0, 0, 2617,
	1503, 1932, 1074, 0, 0, 0, 0, 0, 1074, 0,
	0, 4586, 0, 0, 0, 0, 0, 0, 954, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 0, 0, 954, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 954, 855,
	0, 0, 855, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 822, 0, 0, 0, 1502, 0, 0,
	0, 1510, 0, 0, 0, 0, 2541, 0, 0, 0,
	2543, 2544, 2073, 0, 0, 0, 0, 0, 3334, 0,
	0, 2063, 2064, 2065, 0, 822, 0, 0, 5992, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 0, 0, 0, 0,
	0, 1612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5360, 0, 0, 0, 0, 0,
	0, 0, 4665, 1496, 0, 0, 5370, 0, 1932, 1932,
	1932, 4669, 0, 0, 0, 0, 0, 3334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 4690, 0, 0, 0,
	0, 0, 0, 1636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1074,
	1074, 0, 1074, 1514, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3895,
	822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 954, 1500, 0, 0, 0,
	0, 0, 0, 2084, 1074, 1074, 2054, 1498, 954, 0,
	2066, 2067, 2068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2609, 1504, 0, 2610, 0, 0, 0, 2615,
	0, 2607, 0, 0, 954, 0, 2612, 2616, 2611, 0,
	2613, 0, 0, 0, 2614, 2077, 2078, 2608, 0, 0,
	2073, 0, 0, 0, 2617, 1603, 1499, 0, 1506, 2063,
	2064, 2065, 0, 0, 1505, 0, 5969, 0, 2057, 2058,
	2059, 2060, 2061, 2062, 0, 0, 0, 1613, 0, 0,
	0, 0, 954, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 954, 954, 954, 0, 4839, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 1609, 0, 0,
	0, 0, 5681, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	1606, 0, 3334, 0, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 954,
	0, 0, 0, 822, 1611, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1602, 0, 0, 0, 1495, 6182,
	1513, 1512, 0, 0, 0, 1637, 1617, 0, 0, 0,
	0, 0, 0, 2073, 1074, 0, 0, 0, 0, 0,
	0, 0, 2063, 2064, 2065, 0, 822, 0, 0, 0,
	822, 2057, 2058, 2059, 2060, 2061, 2062, 0, 1634, 0,
	0, 136, 0, 822, 1604, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 1610, 0,
	0, 0, 0, 822, 822, 0, 0, 822, 822, 822,
	0, 822, 0, 0, 1607, 0, 0, 1503, 0, 0,
	0, 1605, 822, 0, 0, 1615, 0, 3895, 3895, 0,
	0, 0, 0, 0, 0, 822, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 1608, 822, 822, 0, 0, 6054, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 822, 0, 0,
	0, 0, 822, 0, 1074, 822, 822, 822, 822, 822,
	822, 822, 822, 822, 822, 822, 822, 822, 0, 822,
	126, 0, 0, 0, 0, 0, 822, 822, 822, 1074,
	0, 0, 0, 0, 822, 0, 822, 0, 0, 0,
	0, 0, 0, 822, 1932, 0, 0, 822, 0, 0,
	0, 0, 822, 126, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 822, 822, 822, 0, 0, 0,
	0, 0, 2084, 822, 0, 2054, 0, 0, 0, 2066,
	2067, 2068, 0, 0, 0, 0, 0, 822, 0, 0,
	822, 2609, 0, 0, 2610, 0, 0, 0, 2615, 0,
	2607, 0, 0, 0, 0, 2612, 2616, 2611, 0, 2613,
	0, 0, 0, 2614, 2077, 2078, 2608, 822, 822, 0,
	822, 0, 0, 2617, 0, 0, 0, 0, 0, 0,
	0, 3334, 3334, 0, 0, 3334, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 1038, 0, 0, 1074,
	822, 822, 0, 0, 0, 0, 0, 0, 2073, 0,
	1074, 1074, 0, 0, 1074, 0, 0, 2063, 2064, 2065,
	954, 0, 0, 0, 0, 0, 2057, 2058, 2059, 2060,
	2061, 2062, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 954, 0, 0, 0, 954,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 822,
	0, 1534, 0, 0, 0, 0, 0, 0, 0, 4930,
	0, 0, 0, 0, 0, 0, 0, 0, 2869, 1932,
	1074, 1932, 3270, 0, 5249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	726, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 774, 774, 774, 774, 797, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 1536, 1932,
	0, 1502, 0, 0, 0, 1510, 872, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 914, 0, 0, 0,
	0, 0, 940, 0, 944, 0, 0, 954, 959, 960,
	0, 0, 965, 966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1932, 0, 1074, 994, 0, 1525, 0, 0,
	0, 1007, 0, 1010, 0, 1012, 1013, 1014, 1015, 1016,
	0, 0, 0, 1025, 0, 0, 0, 1030, 0, 954,
	5332, 0, 0, 1039, 954, 0, 1509, 0, 0, 0,
	1090, 1092, 1094, 0, 0, 0, 2084, 0, 0, 2054,
	0, 0, 0, 2066, 2067, 2068, 0, 0, 0, 0,
	0, 1535, 0, 0, 0, 2609, 0, 1514, 2610, 0,
	0, 0, 2615, 0, 2607, 0, 0, 0, 4904, 2612,
	2616, 2611, 5365, 2613, 0, 0, 954, 2614, 2077, 2078,
	2608, 0, 0, 0, 4927, 0, 0, 2617, 0, 0,
	1932, 0, 130, 0, 0, 0, 129, 131, 0, 0,
	1500, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 1523, 0, 4931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5384, 5385, 0, 4929, 1504, 0, 0,
	822, 0, 0, 176, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 1537, 0, 0, 0, 822, 822, 0,
	1501, 0, 0, 822, 822, 1502, 181, 0, 0, 1510,
	822, 822, 1506, 135, 0, 0, 3895, 822, 1505, 0,
	0, 0, 0, 1538, 822, 2084, 1539, 2073, 2054, 168,
	1540, 128, 2066, 2067, 2068, 822, 2063, 2064, 2065, 174,
	0, 0, 2653, 5644, 2609, 2057, 2058, 2059, 2060, 2061,
	2062, 2615, 1541, 2607, 0, 0, 0, 0, 2612, 2616,
	2611, 0, 2613, 1507, 0, 0, 2614, 2077, 2078, 2608,
	822, 4441, 0, 0, 0, 0, 2617, 0, 822, 0,
	0, 822, 0, 822, 0, 0, 0, 0, 0, 0,
	1544, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	1509, 0, 822, 0, 0, 0, 0, 1542, 1524, 822,
	0, 137, 0, 822, 822, 0, 0, 822, 0, 1511,
	0, 0, 175, 822, 1543, 0, 4932, 4368, 0, 0,
	4288, 1514, 124, 0, 169, 822, 0, 0, 0, 0,
	152, 0, 157, 150, 0, 0, 166, 0, 139, 0,
	0, 0, 1521, 0, 1513, 1512, 0, 0, 0, 0,
	0, 1545, 0, 0, 0, 0, 0, 0, 0, 159,
	154, 0, 1074, 0, 1500, 0, 0, 1074, 0, 153,
	0, 0, 0, 0, 0, 1074, 123, 0, 3281, 0,
	0, 0, 0, 158, 146, 0, 0, 0, 0, 0,
	155, 1504, 0, 0, 822, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 2753,
	1932, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 0, 0, 1506, 0, 0, 822,
	0, 3373, 1505, 0, 0, 0, 954, 0, 160, 163,
	0, 0, 0, 164, 0, 0, 0, 822, 0, 0,
	0, 1516, 822, 0, 0, 156, 0, 0, 3270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 857,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 3415,
	3415, 0, 0, 0, 0, 0, 822, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 1074, 132, 151, 0, 142, 0, 0,
	0, 136, 0, 0, 0, 145, 954, 140, 0, 0,
	954, 0, 1508, 141, 0, 0, 0, 0, 167, 0,
	0, 0, 0, 1511, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 954,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 954, 1188, 0, 0, 0, 4440, 0, 1513, 1512,
	0, 0, 165, 0, 774, 0, 822, 0, 0, 0,
	0, 2073, 161, 0, 0, 147, 0, 0, 0, 0,
	2063, 2064, 2065, 0, 0, 0, 1219, 5618, 0, 2057,
	2058, 2059, 2060, 2061, 2062, 2084, 1074, 1074, 2054, 0,
	0, 0, 2066, 2067, 2068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2609, 0, 0, 2610, 180, 0,
	0, 2615, 0, 2607, 0, 0, 0, 0, 2612, 2616,
	2611, 173, 2613, 0, 954, 1503, 2614, 2077, 2078, 2608,
	0, 0, 0, 0, 0, 0, 2617, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 5767,
	0, 822, 0, 0, 0, 1516, 0, 0, 0, 822,
	822, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 822, 822, 0, 0, 822,
	822, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	2073, 0, 0, 0, 0, 0, 0, 0, 0, 2063,
	2064, 2065, 0, 0, 0, 0, 822, 0, 2057, 2058,
	2059, 2060, 2061, 2062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 822, 1478, 0, 0, 1482, 1820,
	0, 1820, 1820, 1074, 0, 0, 0, 0, 822, 822,
	0, 0, 0, 0, 0, 0, 0, 1932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1625,
	0, 0, 822, 0, 0, 0, 0, 1074, 2084, 0,
	0, 2054, 0, 0, 1668, 2066, 2067, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2609, 0, 0,
	2610, 0, 0, 0, 2615, 0, 2607, 0, 5901, 0,
	0, 2612, 2616, 2611, 0, 2613, 0, 0, 0, 2614,
	2077, 2078, 2608, 0, 0, 0, 0, 2084, 822, 2617,
	2054, 0, 1074, 0, 2066, 2067, 2068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2609, 0, 0, 2610,
	822, 0, 0, 2615, 0, 2607, 0, 0, 0, 0,
	2612, 2616, 2611, 0, 2613, 0, 0, 0, 2614, 2077,
	2078, 2608, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 1786, 0, 954, 1501, 0, 0, 0, 0, 1502,
	0, 0, 2084, 1510, 0, 2054, 0, 822, 0, 2066,
	2067, 2068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2609, 0, 0, 2610, 0, 0, 0, 2615, 0,
	2607, 0, 954, 954, 0, 2612, 2616, 2611, 0, 2613,
	0, 0, 0, 2614, 2077, 2078, 2608, 0, 0, 0,
	0, 823, 0, 2617, 0, 0, 822, 0, 0, 0,
	0, 0, 822, 0, 0, 4434, 0, 0, 822, 0,
	0, 0, 0, 822, 0, 822, 0, 774, 0, 774,
	774, 774, 0, 0, 774, 774, 774, 0, 822, 774,
	0, 0, 0, 0, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1900, 822, 0, 0, 0,
	0, 1908, 1909, 822, 0, 0, 2541, 0, 0, 0,
	822, 0, 0, 0, 0, 1514, 0, 822, 0, 0,
	0, 0, 822, 0, 0, 0, 3415, 0, 2084, 0,
	0, 2054, 0, 0, 0, 2066, 2067, 2068, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 2609, 0, 0,
	2610, 0, 0, 0, 2615, 0, 2607, 0, 1500, 0,
	3270, 2612, 2616, 2611, 0, 2613, 0, 0, 0, 2614,
	2077, 2078, 2608, 0, 0, 1074, 0, 0, 0, 2617,
	2073, 0, 1074, 2541, 4031, 1504, 0, 0, 0, 2063,
	2064, 2065, 0, 0, 0, 0, 5596, 0, 2057, 2058,
	2059, 2060, 2061, 2062, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 1932, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 822, 0, 1505, 0, 822, 0,
	0, 0, 0, 0, 0, 0, 954, 822, 822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 956, 956, 0, 0, 0, 0, 0, 872, 0,
	0, 1507, 1074, 0, 1074, 1074, 822, 0, 0, 0,
	0, 0, 998, 956, 0, 0, 0, 998, 0, 998,
	0, 0, 0, 0, 0, 0, 956, 956, 0, 0,
	0, 0, 0, 2665, 0, 822, 0, 0, 0, 0,
	822, 822, 822, 0, 822, 0, 1508, 0, 0, 956,
	956, 956, 0, 822, 1932, 1612, 0, 1511, 4178, 0,
	4182, 0, 0, 0, 0, 2703, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 822, 0, 1932, 956, 0, 0, 0, 0,
	4433, 0, 1513, 1512, 0, 0, 0, 0, 0, 0,
	0, 1932, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 822, 2073, 0, 0, 0, 1598, 6234, 0,
	0, 0, 2063, 2064, 2065, 0, 0, 0, 0, 5574,
	0, 2057, 2058, 2059, 2060, 2061, 2062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1614, 0, 2830, 0, 0, 0, 0, 0, 0,
	0, 0, 2073, 0, 0, 0, 0, 2084, 0, 1503,
	2054, 2063, 2064, 2065, 2066, 2067, 2068, 0, 5434, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 2609, 0, 126, 2610,
	0, 0, 0, 2615, 0, 2607, 822, 0, 0, 1516,
	2612, 2616, 2611, 0, 2613, 0, 0, 5211, 2614, 2077,
	2078, 2608, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 0, 0, 822, 0, 822, 822, 2073, 0, 0,
	2912, 822, 0, 0, 0, 0, 2063, 2064, 2065, 1603,
	0, 0, 0, 5417, 0, 2057, 2058, 2059, 2060, 2061,
	2062, 2084, 0, 0, 2054, 0, 0, 0, 2066, 2067,
	2068, 1613, 0, 0, 0, 0, 0, 822, 0, 0,
	2609, 0, 0, 2610, 0, 0, 0, 2615, 0, 2607,
	0, 0, 0, 0, 2612, 2616, 2611, 0, 2613, 0,
	0, 0, 2614, 2077, 2078, 2608, 0, 0, 0, 822,
	0, 1609, 2617, 0, 0, 0, 0, 0, 0, 0,
	822, 3013, 0, 822, 3015, 0, 0, 0, 0, 822,
	822, 0, 0, 0, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 1611, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2073, 0, 3048, 822, 3050, 3051, 5173,
	0, 954, 2063, 2064, 2065, 0, 0, 822, 1602, 5408,
	0, 2057, 2058, 2059, 2060, 2061, 2062, 0, 0, 1599,
	1617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 822, 822, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 1596, 0, 0, 136, 0, 0, 1604, 0,
	0, 0, 954, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 1610, 0, 822, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1607, 0,
	0, 3118, 0, 0, 3121, 1605, 0, 0, 0, 1615,
	0, 0, 0, 0, 0, 0, 0, 774, 774, 0,
	0, 0, 774, 774, 0, 774, 774, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 822, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 1501, 956,
	0, 0, 0, 1502, 0, 0, 956, 1510, 0, 956,
	822, 0, 0, 2084, 0, 0, 2054, 0, 0, 0,
	2066, 2067, 2068, 822, 0, 0, 0, 0, 0, 0,
	0, 1074, 2609, 0, 126, 2610, 0, 0, 0, 2615,
	0, 2607, 822, 0, 1932, 0, 2612, 2616, 2611, 0,
	2613, 0, 0, 0, 2614, 2077, 2078, 2608, 956, 2084,
	0, 0, 2054, 0, 2617, 0, 2066, 2067, 2068, 3667,
	0, 0, 0, 0, 0, 0, 0, 0, 2609, 0,
	0, 2610, 0, 0, 0, 2615, 0, 2607, 0, 0,
	822, 822, 2612, 2616, 2611, 0, 2613, 0, 1509, 0,
	2614, 2077, 2078, 2608, 0, 1932, 822, 0, 0, 0,
	2617, 0, 5148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 822, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 1932, 0, 0, 0, 0, 0, 0,
	0, 0, 2073, 0, 2541, 0, 0, 2084, 0, 0,
	2054, 2063, 2064, 2065, 2066, 2067, 2068, 0, 0, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 2609, 0, 0, 2610,
	0, 0, 1500, 2615, 0, 2607, 0, 0, 0, 0,
	2612, 2616, 2611, 0, 2613, 0, 0, 0, 2614, 2077,
	2078, 2608, 0, 0, 0, 0, 0, 0, 2617, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2073, 0, 0, 0,
	0, 0, 0, 0, 1506, 2063, 2064, 2065, 0, 0,
	1505, 0, 0, 0, 2057, 2058, 2059, 2060, 2061, 2062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 126, 126, 5147, 0, 0, 0,
	0, 0, 0, 0, 2084, 0, 3415, 2054, 0, 3415,
	0, 2066, 2067, 2068, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 2609, 0, 0, 2610, 0, 0, 0,
	2615, 0, 2607, 0, 0, 5146, 0, 2612, 2616, 2611,
	0, 2613, 0, 0, 0, 2614, 2077, 2078, 2608, 0,
	0, 0, 0, 0, 0, 2617, 0, 0, 126, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 956, 956, 0, 0, 0,
	0, 0, 0, 0, 3666, 0, 1513, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 955,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3415, 0, 0,
	0, 955, 0, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 0, 998, 998,
	0, 0, 0, 1516, 0, 0, 0, 955, 955, 955,
	956, 0, 0, 0, 0, 0, 1934, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2073, 0,
	0, 0, 0, 955, 0, 0, 0, 2063, 2064, 2065,
	0, 0, 0, 0, 5150, 0, 2057, 2058, 2059, 2060,
	2061, 2062, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 1502, 0, 0, 0, 1510,
	0, 0, 0, 0, 2073, 0, 0, 0, 0, 0,
	0, 0, 0, 2063, 2064, 2065, 0, 0, 0, 0,
	0, 0, 2057, 2058, 2059, 2060, 2061, 2062, 0, 0,
	2084, 0, 0, 2054, 0, 0, 0, 2066, 2067, 2068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2609,
	0, 0, 2610, 0, 0, 0, 2615, 0, 2607, 0,
	0, 1525, 0, 2612, 2616, 2611, 0, 2613, 0, 0,
	0, 2614, 2077, 2078, 2608, 0, 0, 0, 0, 0,
	0, 2617, 0, 5142, 0, 0, 0, 0, 0, 0,
	1509, 0, 2073, 0, 0, 0, 0, 2084, 0, 0,
	2054, 2063, 2064, 2065, 2066, 2067, 2068, 0, 0, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 2609, 0, 0, 2610,
	0, 1514, 0, 2615, 956, 2607, 0, 0, 0, 0,
	2612, 2616, 2611, 1934, 2613, 1934, 0, 0, 2614, 2077,
	2078, 2608, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 0, 2084, 0, 0, 2054, 956, 0, 0, 2066,
	2067, 2068, 956, 0, 1500, 0, 0, 0, 0, 0,
	0, 2609, 0, 0, 2610, 0, 0, 3487, 2615, 0,
	2607, 0, 0, 0, 0, 2612, 2616, 2611, 0, 2613,
	0, 1504, 0, 2614, 2077, 2078, 2608, 3501, 0, 0,
	0, 0, 0, 2617, 0, 0, 0, 0, 0, 3518,
	0, 0, 0, 0, 0, 0, 0, 3529, 0, 2073,
	0, 0, 0, 0, 0, 0, 1506, 0, 2063, 2064,
	2065, 0, 1505, 0, 0, 0, 0, 2057, 2058, 2059,
	2060, 2061, 2062, 0, 0, 0, 0, 0, 0, 3574,
	3575, 3576, 0, 0, 0, 0, 0, 3580, 0, 3581,
	0, 0, 0, 0, 0, 0, 0, 0, 3591, 0,
	0, 0, 0, 0, 0, 0, 3602, 1507, 3606, 3607,
	3608, 3609, 0, 0, 3616, 0, 3618, 3621, 0, 0,
	0, 0, 3415, 3415, 0, 0, 3415, 0, 0, 0,
	3644, 3645, 0, 0, 0, 3650, 3651, 0, 3652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 3662, 3663, 3664, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 0, 0, 3682, 3683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3695, 3696, 0, 956, 3698, 3699,
	0, 3701, 0, 0, 0, 3703, 3649, 0, 1513, 1512,
	0, 3708, 3709, 0, 0, 3711, 0, 0, 3715, 0,
	3716, 0, 0, 0, 3719, 0, 3721, 0, 0, 0,
	0, 0, 3722, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 0, 0, 955, 0, 0,
	0, 3733, 3734, 3735, 955, 0, 0, 955, 0, 0,
	3747, 0, 3748, 0, 0, 3751, 0, 0, 0, 0,
	0, 3753, 0, 3754, 0, 0, 3757, 0, 3759, 0,
	0, 0, 0, 3761, 0, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 956, 956, 956,
	956, 0, 0, 3776, 0, 0, 955, 0, 0, 0,
	3779, 0, 0, 0, 3781, 1516, 3785, 0, 0, 0,
	0, 0, 0, 3802, 3803, 0, 0, 0, 0, 0,
	0, 3812, 0, 0, 0, 0, 3820, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3833, 998, 998,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 2073, 0, 0, 0, 0,
	2084, 0, 0, 2054, 2063, 2064, 2065, 2066, 2067, 2068,
	3870, 0, 3872, 2057, 2058, 2059, 2060, 2061, 2062, 2609,
	0, 0, 2610, 0, 0, 0, 2615, 0, 2607, 0,
	0, 0, 0, 2612, 2616, 2611, 0, 2613, 0, 0,
	0, 2614, 2077, 2078, 2608, 0, 0, 0, 0, 0,
	0, 2617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2073, 0, 0, 0, 0, 0, 0, 0,
	0, 2063, 2064, 2065, 0, 0, 0, 0, 5133, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 1502, 0, 0, 0, 1510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2073, 0, 0,
	0, 0, 0, 0, 0, 0, 2063, 2064, 2065, 0,
	0, 3954, 0, 5125, 0, 2057, 2058, 2059, 2060, 2061,
	2062, 2084, 0, 0, 2054, 0, 0, 0, 2066, 2067,
	2068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2609, 2828, 0, 2610, 0, 0, 0, 2615, 0, 2607,
	0, 0, 0, 0, 2612, 2616, 2611, 0, 2613, 0,
	0, 0, 2614, 2077, 2078, 2608, 0, 0, 0, 0,
	1509, 0, 2617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3415, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 955, 1934, 0, 0, 0, 0, 955,
	0, 0, 0, 955, 955, 0, 0, 0, 0, 0,
	0, 2084, 0, 0, 2054, 0, 0, 0, 2066, 2067,
	2068, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	2609, 955, 0, 2610, 1500, 0, 0, 2615, 0, 2607,
	0, 0, 126, 955, 2612, 2616, 2611, 0, 2613, 955,
	0, 0, 2614, 2077, 2078, 2608, 2084, 0, 0, 2054,
	0, 1504, 2617, 2066, 2067, 2068, 0, 126, 4724, 0,
	0, 0, 0, 0, 0, 2609, 0, 0, 2610, 0,
	0, 0, 2615, 1406, 2607, 0, 0, 0, 0, 2612,
	2616, 2611, 0, 2613, 0, 0, 1506, 2614, 2077, 2078,
	2608, 0, 1505, 0, 0, 0, 0, 2617, 0, 0,
	0, 2084, 0, 0, 2054, 0, 0, 0, 2066, 2067,
	2068, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	2609, 0, 0, 2610, 1933, 0, 0, 2615, 0, 2607,
	0, 0, 0, 0, 2612, 2616, 2611, 1507, 2613, 0,
	0, 0, 2614, 2077, 2078, 2608, 0, 0, 0, 0,
	0, 0, 2617, 0, 0, 0, 0, 2084, 0, 0,
	2054, 0, 0, 0, 2066, 2067, 2068, 0, 0, 0,
	0, 0, 0, 4212, 0, 4215, 2609, 0, 0, 2610,
	0, 0, 1508, 2615, 0, 2607, 0, 0, 0, 0,
	2612, 2616, 2611, 1511, 2613, 0, 0, 0, 2614, 2077,
	2078, 2608, 0, 0, 0, 0, 0, 0, 2617, 0,
	0, 0, 0, 4252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2827, 0, 1513, 1512,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 4294, 0, 0, 0, 0, 0, 0, 0, 4302,
	0, 4302, 4651, 0, 0, 0, 0, 4311, 0, 0,
	0, 0, 0, 0, 0, 2073, 0, 0, 0, 0,
	0, 0, 0, 0, 2063, 2064, 2065, 0, 0, 0,
	0, 4981, 0, 2057, 2058, 2059, 2060, 2061, 2062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 0, 0,
	0, 126, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 1933, 0, 1933, 0, 0, 4379, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 0, 0, 4396,
	4397, 4398, 4399, 0, 955, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4428, 4429, 4430, 0, 0,
	4435, 4436, 4437, 4438, 0, 0, 2073, 0, 0, 0,
	0, 0, 0, 0, 0, 2063, 2064, 2065, 0, 0,
	0, 0, 4907, 0, 2057, 2058, 2059, 2060, 2061, 2062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4459, 0,
	0, 0, 0, 0, 0, 0, 0, 2084, 0, 0,
	2054, 0, 0, 0, 2066, 2067, 2068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2609, 0, 0, 2610,
	0, 0, 0, 2615, 0, 2607, 0, 4488, 0, 0,
	2612, 2616, 2611, 0, 2613, 4490, 2073, 0, 2614, 2077,
	2078, 2608, 0, 0, 0, 2063, 2064, 2065, 2617, 0,
	0, 0, 4883, 0, 2057, 2058, 2059, 2060, 2061, 2062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 2073, 0, 0, 0, 0, 0, 0, 0, 0,
	2063, 2064, 2065, 0, 0, 0, 0, 0, 0, 2057,
	2058, 2059, 2060, 2061, 2062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1934, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4541, 0, 0, 0, 0, 2073, 4545, 0, 0,
	0, 0, 0, 0, 0, 2063, 2064, 2065, 0, 0,
	0, 1934, 4664, 0, 2057, 2058, 2059, 2060, 2061, 2062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 955, 955, 955, 955, 0,
	0, 0, 0, 0, 0, 1934, 0, 0, 0, 0,
	0, 0, 2073, 0, 0, 0, 0, 0, 0, 4579,
	4580, 2063, 2064, 2065, 0, 0, 4584, 0, 0, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 0, 0, 0, 956,
	0, 0, 0, 1934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 956, 0, 956, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1309, 0, 0, 2084,
	956, 0, 2054, 0, 0, 0, 2066, 2067, 2068, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 2609, 0,
	0, 2610, 956, 956, 0, 2615, 0, 2607, 0, 1934,
	956, 0, 2612, 2616, 2611, 0, 2613, 0, 956, 0,
	2614, 2077, 2078, 2608, 0, 956, 0, 0, 0, 956,
	2617, 0, 956, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	956, 3459, 0, 0, 0, 0, 0, 0, 956, 1612,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1934, 0, 0, 956, 0,
	0, 0, 0, 0, 0, 0, 998, 0, 998, 998,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2084, 0, 0, 2054,
	0, 0, 0, 2066, 2067, 2068, 0, 0, 4121, 0,
	0, 2883, 0, 1280, 1280, 2609, 0, 0, 2610, 0,
	806, 0, 2615, 0, 2607, 815, 0, 0, 4797, 2612,
	2616, 2611, 1933, 2613, 0, 0, 0, 2614, 2077, 2078,
	2608, 0, 956, 0, 0, 1614, 0, 2617, 956, 0,
	0, 0, 2073, 0, 0, 956, 0, 0, 0, 0,
	4302, 2063, 2064, 2065, 0, 0, 0, 4825, 4645, 0,
	2057, 2058, 2059, 2060, 2061, 2062, 2084, 0, 0, 2054,
	0, 1934, 0, 2066, 2067, 2068, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 2609, 0, 0, 2610, 0,
	0, 0, 2615, 0, 2607, 0, 0, 0, 0, 2612,
	2616, 2611, 0, 2613, 0, 0, 0, 2614, 2077, 2078,
	2608, 0, 0, 0, 0, 0, 0, 2617, 0, 4111,
	0, 0, 0, 1603, 0, 0, 0, 0, 0, 0,
	0, 4302, 0, 0, 0, 0, 0, 0, 0, 0,
	998, 0, 998, 998, 0, 1613, 0, 4894, 4895, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 1128, 1130,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1609, 0, 0, 0, 0,
	0, 4944, 0, 0, 0, 0, 0, 0, 0, 0,
	4946, 0, 0, 0, 0, 0, 0, 0, 1606, 4948,
	4949, 4950, 4951, 0, 0, 4954, 4955, 0, 0, 4958,
	4959, 4960, 4961, 4962, 4963, 0, 0, 0, 0, 3460,
	0, 0, 1611, 0, 0, 0, 0, 0, 0, 4975,
	0, 0, 0, 0, 0, 0, 0, 4979, 0, 4980,
	0, 0, 0, 4982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5010, 0, 1617, 0, 0, 5015, 5016, 0,
	0, 0, 5017, 5018, 0, 0, 0, 0, 0, 5022,
	5023, 5024, 5025, 0, 5027, 5028, 5029, 5030, 0, 0,
	0, 0, 5037, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 3455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1610, 1934, 0, 0,
	0, 0, 0, 1934, 0, 5060, 0, 5061, 0, 0,
	0, 0, 1607, 0, 0, 0, 5067, 0, 0, 1605,
	0, 0, 0, 1615, 2073, 0, 0, 0, 0, 0,
	0, 0, 0, 2063, 2064, 2065, 3461, 0, 0, 0,
	4139, 0, 2057, 2058, 2059, 2060, 2061, 2062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1608, 0, 3462, 0, 0, 1924, 0, 0, 0, 2014,
	0, 0, 0, 0, 0, 0, 0, 2030, 0, 2037,
	0, 0, 0, 0, 2084, 0, 2048, 2054, 0, 0,
	0, 2066, 2067, 2068, 0, 0, 4106, 2530, 2531, 2532,
	2533, 2534, 956, 2609, 0, 0, 2610, 0, 2539, 0,
	2615, 0, 2607, 0, 0, 0, 0, 2612, 2616, 2611,
	0, 2613, 0, 0, 0, 2614, 2077, 2078, 2608, 0,
	0, 0, 2557, 0, 0, 2617, 0, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 956, 956, 0,
	0, 2073, 0, 0, 0, 0, 2084, 0, 0, 2054,
	2063, 2064, 2065, 2066, 2067, 2068, 0, 956, 956, 2057,
	2058, 2059, 2060, 2061, 2062, 2609, 0, 956, 2610, 0,
	0, 0, 2615, 0, 2607, 0, 0, 0, 0, 2612,
	2616, 2611, 0, 2613, 0, 774, 0, 2614, 2077, 2078,
	2608, 0, 0, 0, 0, 0, 0, 2617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 1145, 0, 0, 0, 0,
	0, 2073, 1147, 0, 0, 0, 0, 0, 0, 0,
	2063, 2064, 2065, 0, 0, 0, 0, 0, 0, 2057,
	2058, 2059, 2060, 2061, 2062, 0, 0, 0, 0, 0,
	0, 0, 0, 2084, 0, 0, 2054, 1934, 1934, 1934,
	2066, 2067, 2068, 0, 0, 4072, 0, 0, 0, 0,
	0, 0, 2609, 0, 1933, 2610, 0, 0, 0, 2615,
	0, 2607, 0, 0, 0, 0, 2612, 2616, 2611, 0,
	2613, 0, 0, 0, 2614, 2077, 2078, 2608, 0, 0,
	5282, 0, 0, 0, 2617, 0, 0, 0, 0, 1933,
	815, 0, 0, 1134, 2084, 0, 0, 2054, 0, 0,
	0, 2066, 2067, 2068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2609, 0, 0, 2610, 0, 0, 0,
	2615, 0, 2607, 1933, 0, 0, 0, 2612, 2616, 2611,
	0, 2613, 0, 0, 956, 2614, 2077, 2078, 2608, 0,
	0, 0, 0, 0, 0, 2617, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 0, 0,
	0, 1933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 5339,
	0, 0, 0, 5341, 0, 0, 0, 0, 0, 0,
	0, 5344, 5345, 5346, 5347, 5348, 0, 0, 5351, 5352,
	5353, 5354, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 5358, 5359, 0, 5361, 0, 0, 0, 0, 955,
	0, 956, 0, 955, 5369, 955, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	956, 956, 956, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 955, 5386, 5387, 5388, 0, 0, 1933, 955, 0,
	0, 0, 0, 956, 0, 0, 955, 4079, 0, 0,
	0, 0, 5396, 955, 0, 0, 0, 955, 956, 0,
	955, 0, 998, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 956, 0, 0, 0, 0,
	0, 956, 955, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 2073,
	0, 0, 0, 1933, 0, 0, 955, 0, 2063, 2064,
	2065, 0, 0, 0, 0, 0, 5422, 2057, 2058, 2059,
	2060, 2061, 2062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 0, 1791, 0,
	1134, 1134, 0, 1806, 0, 0, 0, 819, 0, 5464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 2073, 0, 0, 0, 0, 955, 0, 0, 0,
	2063, 2064, 2065, 955, 0, 0, 1134, 0, 0, 2057,
	2058, 2059, 2060, 2061, 2062, 0, 5528, 0, 0, 0,
	0, 5535, 0, 0, 0, 0, 0, 0, 1285, 1933,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4302, 0, 0, 0,
	0, 0, 0, 0, 1924, 1924, 1924, 0, 0, 1891,
	5579, 0, 0, 0, 0, 5582, 0, 0, 0, 0,
	0, 5588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1934, 0, 1134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2073, 0,
	0, 0, 0, 0, 0, 0, 0, 2063, 2064, 2065,
	0, 0, 0, 0, 0, 0, 2057, 2058, 2059, 2060,
	2061, 2062, 0, 0, 5624, 5625, 0, 0, 0, 0,
	5630, 0, 0, 0, 0, 0, 5632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2551, 2553, 2554, 0, 0, 0, 4066, 2073,
	5645, 5646, 0, 0, 0, 0, 0, 0, 2063, 2064,
	2065, 0, 0, 2530, 2531, 0, 0, 2057, 2058, 2059,
	2060, 2061, 2062, 0, 5659, 0, 0, 1280, 0, 0,
	0, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236,
	3237, 3238, 3239, 3240, 3241, 3242, 3243, 0, 3249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 1053, 1233, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 2084, 0, 0, 2054, 0, 0, 0, 2066,
	2067, 2068, 0, 0, 956, 0, 0, 0, 956, 956,
	0, 2609, 0, 0, 2610, 1933, 0, 0, 2615, 0,
	2607, 1933, 1234, 0, 0, 2612, 2616, 2611, 0, 2613,
	0, 0, 0, 2614, 2077, 2078, 2608, 0, 0, 2709,
	0, 0, 0, 2617, 2084, 0, 0, 2054, 1934, 0,
	1934, 2066, 2067, 2068, 0, 2736, 0, 0, 0, 0,
	0, 0, 0, 2609, 0, 0, 2610, 0, 0, 0,
	2615, 0, 2607, 0, 0, 0, 0, 2612, 2616, 2611,
	0, 2613, 4302, 0, 0, 2614, 2077, 2078, 2608, 0,
	0, 0, 0, 0, 0, 2617, 0, 0, 1934, 289,
	5802, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 5836, 0,
	0, 5839, 1243, 0, 0, 0, 0, 0, 1933, 0,
	0, 1934, 0, 0, 0, 0, 1230, 0, 0, 0,
	0, 0, 0, 290, 0, 955, 955, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 956, 284,
	0, 1232, 0, 956, 0, 955, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 955, 0, 0, 1501, 1534,
	0, 0, 1241, 1502, 0, 0, 0, 1510, 0, 0,
	0, 2084, 2934, 0, 2054, 2939, 0, 1239, 2066, 2067,
	2068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2609, 0, 0, 2610, 0, 956, 0, 2615, 0, 2607,
	0, 0, 0, 0, 2612, 2616, 2611, 0, 2613, 1934,
	0, 0, 2614, 2077, 2078, 2608, 0, 0, 0, 0,
	0, 0, 2617, 0, 0, 0, 1536, 0, 0, 1531,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	1236, 0, 293, 0, 0, 1933, 1933, 1933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1509, 0,
	0, 1244, 0, 0, 1237, 0, 0, 297, 0, 294,
	0, 0, 5975, 0, 281, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 287, 0, 0, 0, 0, 1245, 0,
	0, 5995, 5996, 0, 1246, 0, 0, 0, 0, 288,
	0, 0, 0, 1238, 0, 298, 0, 0, 0, 1229,
	0, 0, 0, 0, 0, 3067, 0, 0, 0, 0,
	0, 0, 1500, 0, 0, 282, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 955, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 1924, 1240, 0, 1227,
	0, 0, 0, 0, 0, 0, 3308, 3310, 0, 0,
	0, 955, 0, 3316, 0, 3327, 3330, 0, 3341, 3342,
	3347, 3350, 0, 0, 1506, 0, 0, 3358, 0, 0,
	1505, 3362, 3368, 3310, 3310, 3375, 3310, 0, 3310, 3310,
	3310, 271, 2995, 0, 0, 0, 280, 280, 0, 3390,
	279, 0, 0, 3241, 3242, 3243, 3249, 6091, 0, 955,
	0, 0, 0, 0, 283, 283, 0, 0, 0, 0,
	6101, 1537, 0, 0, 0, 1507, 0, 2073, 955, 955,
	955, 0, 277, 0, 0, 0, 2063, 2064, 2065, 0,
	0, 0, 0, 3285, 6117, 2057, 2058, 2059, 2060, 2061,
	2062, 1538, 0, 0, 1539, 0, 0, 0, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1934,
	1533, 955, 0, 0, 0, 0, 0, 0, 0, 2073,
	1541, 1511, 0, 0, 0, 0, 955, 0, 2063, 2064,
	2065, 0, 0, 3181, 0, 956, 0, 2057, 2058, 2059,
	2060, 2061, 2062, 955, 0, 0, 0, 0, 0, 955,
	0, 0, 0, 0, 1529, 0, 1513, 1512, 1544, 0,
	0, 0, 0, 289, 289, 0, 0, 0, 0, 2991,
	0, 0, 0, 0, 0, 1542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 6176,
	0, 0, 1543, 0, 285, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 274, 1243, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1545,
	268, 2993, 0, 1503, 0, 1053, 0, 290, 290, 0,
	0, 0, 0, 0, 0, 291, 291, 0, 956, 0,
	197, 0, 0, 284, 284, 0, 2994, 227, 0, 0,
	956, 0, 0, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 269, 1241, 1501, 201,
	0, 0, 0, 1502, 0, 0, 0, 1510, 220, 0,
	0, 0, 0, 1317, 0, 0, 2073, 0, 0, 0,
	0, 0, 0, 3713, 0, 2063, 2064, 2065, 0, 0,
	0, 0, 0, 1053, 2057, 2058, 2059, 2060, 2061, 2062,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 296, 0, 0, 0, 0, 2822,
	0, 1933, 0, 263, 263, 2996, 293, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 6297, 0, 0, 0, 278, 1244, 0, 1509, 2997,
	0, 297, 0, 294, 294, 0, 0, 0, 281, 281,
	0, 295, 295, 0, 0, 0, 1501, 0, 0, 0,
	0, 1502, 0, 0, 0, 1510, 0, 287, 287, 1514,
	0, 213, 273, 1245, 0, 0, 0, 1053, 275, 1246,
	0, 0, 0, 288, 288, 0, 0, 272, 2998, 298,
	0, 0, 0, 267, 2999, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 282,
	282, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 1549, 0, 0,
	0, 0, 0, 0, 0, 0, 1934, 0, 200, 1504,
	0, 270, 2992, 0, 0, 210, 0, 955, 0, 0,
	1326, 0, 0, 205, 0, 0, 1509, 1053, 1053, 0,
	0, 206, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 0, 1926,
	1505, 0, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 0, 0, 955, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 998, 0, 0,
	0, 1051, 1051, 0, 0, 1507, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1933, 0, 1933, 0,
	0, 0, 212, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 1924, 2069,
	1524, 0, 956, 3969, 3970, 0, 3972, 0, 0, 0,
	2037, 1511, 0, 219, 0, 0, 998, 0, 2539, 0,
	0, 198, 1506, 0, 0, 0, 1933, 0, 1505, 207,
	2048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 956, 956, 0, 2821, 214, 1513, 1512, 0, 0,
	216, 0, 0, 0, 0, 0, 211, 0, 222, 0,
	221, 203, 0, 0, 955, 0, 0, 0, 4002, 4003,
	0, 202, 0, 1507, 4009, 0, 0, 0, 226, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 1933,
	0, 0, 0, 0, 0, 0, 1053, 3326, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	4038, 0, 0, 0, 0, 0, 955, 0, 1508, 217,
	0, 955, 0, 1503, 4050, 2069, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 4067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 1052,
	0, 0, 0, 1516, 0, 0, 0, 0, 956, 0,
	0, 0, 1548, 0, 1513, 1512, 0, 3347, 3347, 3347,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4122, 0, 0, 0, 1933, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2844, 0, 0, 0, 0, 0, 0, 0,
	4158, 0, 0, 1934, 0, 4162, 0, 0, 0, 0,
	0, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3572, 0, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 1934, 228, 0, 0, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1934, 0, 0, 1053, 0, 1053, 0,
	255, 234, 0, 0, 4337, 0, 0, 0, 1134, 0,
	1934, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1128, 0, 0, 1053, 4371, 0, 1053, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1933, 0, 0,
	0, 0, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 0, 3804, 0, 0, 3808, 0,
	0, 0, 0, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 239, 0,
	0, 4454, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 240, 0, 0, 0, 0, 0, 0,
	1053, 0, 1053, 955, 0, 0, 0, 955, 1926, 1926,
	1926, 0, 0, 0, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 955, 0, 998, 998,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 0, 0, 0, 0, 0, 0,
	0, 1051, 244, 0, 0, 998, 0, 0, 0, 0,
	956, 263, 245, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
	0, 0, 0, 254, 3933, 3933, 247, 0, 0, 251,
	0, 248, 0, 0, 0, 0, 230, 0, 0, 249,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 257, 0, 0, 0, 0,
	250, 956, 0, 0, 0, 0, 256, 0, 0, 1051,
	0, 258, 0, 2069, 0, 0, 0, 252, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 2069,
	0, 0, 0, 0, 0, 0, 2069, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1924, 0, 0,
	0, 1924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1808, 0, 0, 0, 4614, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4622, 4623, 0, 0, 4626, 0,
	0, 0, 4629, 1051, 1933, 0, 0, 0, 0, 0,
	0, 0, 0, 4634, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 0, 4640, 0, 0, 0,
	0, 0, 0, 1934, 0, 0, 0, 0, 0, 0,
	0, 0, 1391, 4650, 0, 0, 0, 0, 0, 0,
	4655, 0, 0, 0, 3310, 3310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4666, 0,
	0, 0, 0, 4668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 1051, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1934, 0, 1052, 4687, 4688, 4689,
	0, 0, 0, 0, 0, 0, 0, 4695, 0, 0,
	0, 998, 998, 0, 3358, 0, 0, 0, 0, 0,
	0, 0, 1934, 3308, 0, 0, 0, 3310, 0, 4199,
	0, 4199, 0, 0, 0, 4721, 4722, 4723, 0, 0,
	955, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4231, 1134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 955,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 3310,
	0, 4766, 0, 0, 0, 0, 4280, 0, 0, 0,
	1052, 0, 0, 4291, 0, 0, 0, 0, 0, 0,
	0, 0, 1134, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 4801, 0, 0, 0, 0, 0, 0, 0,
	0, 4806, 4807, 0, 0, 4318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 1051, 0, 0, 0, 0, 0, 0, 0,
	1066, 1066, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1933, 0, 0, 0, 0, 0, 0, 0, 0,
	1926, 0, 0, 0, 0, 0, 0, 0, 1051, 0,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	1926, 0, 1926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1926, 0, 1051, 2069,
	2069, 2069, 2069, 2069, 0, 0, 0, 0, 2069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1933, 0, 0, 0, 1051, 0, 2844, 0, 1052,
	0, 0, 0, 0, 0, 0, 2844, 0, 0, 1052,
	0, 0, 4507, 0, 0, 0, 0, 0, 0, 0,
	0, 1933, 0, 0, 0, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1933, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 0, 0, 0,
	0, 0, 1051, 0, 1051, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 0, 0, 1051, 1052, 0, 0, 5114, 5115,
	1051, 0, 0, 0, 5119, 5120, 0, 0, 0, 0,
	0, 5123, 5124, 0, 0, 0, 0, 0, 5127, 0,
	0, 0, 0, 0, 0, 5129, 0, 3933, 0, 0,
	0, 0, 0, 0, 0, 0, 2048, 0, 0, 0,
	0, 0, 0, 0, 0, 2844, 3691, 0, 0, 0,
	0, 0, 0, 0, 3694, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5162, 0, 5165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1051, 0, 1051, 1052,
	955, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 1052, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 1053, 0, 0, 0, 5269, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 0, 0, 1051, 0,
	0, 0, 0, 0, 0, 0, 0, 5323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1390, 0, 0, 0, 0, 0, 0, 0, 4280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 1053, 0, 0, 0, 0, 0,
	0, 1933, 1926, 0, 0, 0, 0, 5372, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 4859, 4860, 0,
	4862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4893, 0, 1325, 0,
	0, 0, 0, 0, 4280, 1393, 0, 0, 0, 0,
	0, 0, 1933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	1933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5412, 0, 0, 1052, 0, 0, 0, 0,
	5414, 5415, 5416, 0, 0, 0, 0, 2069, 2069, 2069,
	2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069, 2069,
	2069, 2069, 2069, 0, 0, 0, 5423, 0, 2069, 0,
	5426, 5427, 5428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3337, 3337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3310, 5006, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5468, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 1053, 0, 2069, 0, 2069,
	5485, 0, 0, 5038, 0, 2069, 0, 0, 1065, 1065,
	0, 0, 0, 0, 0, 0, 2069, 0, 0, 2069,
	0, 0, 4094, 0, 3337, 3337, 3337, 0, 0, 0,
	2069, 2069, 0, 0, 0, 0, 2069, 0, 0, 2069,
	0, 0, 0, 0, 0, 0, 0, 2069, 5069, 0,
	0, 2069, 0, 0, 0, 0, 0, 2069, 0, 0,
	0, 0, 0, 0, 2069, 0, 1053, 0, 0, 0,
	0, 0, 1066, 1066, 0, 0, 0, 0, 3933, 2069,
	3933, 0, 0, 3691, 5091, 5091, 5091, 5091, 5091, 5091,
	5091, 0, 5091, 5091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 1050, 0, 0,
	0, 0, 0, 1068, 1068, 0, 0, 3691, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5694,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 5726, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 0, 0, 5247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 2844, 3691, 0, 3691, 0, 0,
	0, 0, 1051, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	1053, 0, 5797, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2069, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 0, 1051, 5830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 2539, 0, 0, 0,
	0, 5871, 5871, 5871, 1066, 5874, 0, 0, 0, 0,
	0, 0, 0, 0, 3310, 0, 0, 0, 0, 0,
	0, 1051, 1051, 0, 0, 0, 0, 1053, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5381, 5382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	3933, 3933, 0, 3933, 0, 3933, 0, 0, 1052, 0,
	0, 1926, 0, 0, 0, 1926, 5091, 0, 0, 0,
	1066, 0, 0, 1066, 0, 0, 0, 0, 0, 1066,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 0, 0,
	0, 0, 0, 1051, 5667, 0, 0, 0, 2069, 2069,
	0, 2069, 5871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 1052,
	0, 2069, 2069, 0, 3337, 3337, 0, 1052, 2069, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 1065, 1053,
	0, 0, 0, 5508, 0, 0, 0, 4094, 4094, 0,
	0, 0, 0, 0, 0, 1051, 0, 2069, 0, 0,
	6075, 0, 0, 0, 1053, 0, 0, 0, 0, 2069,
	0, 0, 0, 0, 6084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 2069, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3337, 3337, 3337, 3337, 3337, 3337, 3337, 3337, 3337,
	3337, 3337, 3337, 3337, 0, 3337, 1065, 4094, 4094, 4094,
	0, 0, 0, 0, 0, 0, 4280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5667, 0,
	0, 2069, 0, 0, 0, 0, 1050, 0, 0, 1051,
	1051, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 2069, 0, 0,
	1052, 2069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2844, 2844, 0, 0, 3691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 1050, 0, 0, 1066, 0, 0,
	0, 1068, 3933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 5871, 1392, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 6194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 3337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	5736, 0, 0, 1134, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 1052, 0, 0,
	0, 1051, 0, 0, 0, 0, 2069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1924, 0, 0, 0, 0, 0, 0, 0,
	2069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 1050,
	0, 0, 0, 0, 0, 1068, 1068, 0, 0, 0,
	0, 0, 1051, 0, 0, 0, 0, 0, 0, 3691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 1067, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 1047, 1047, 5917, 5918, 5919, 5920,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 1052,
	0, 0, 0, 0, 1068, 0, 0, 1050, 0, 0,
	0, 0, 0, 2069, 1068, 1065, 1052, 0, 0, 0,
	0, 2069, 2069, 0, 0, 2069, 4094, 4094, 2069, 0,
	0, 0, 0, 2069, 0, 0, 0, 0, 0, 2069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2069,
	1051, 1051, 0, 1051, 2069, 0, 0, 0, 0, 0,
	1052, 0, 1053, 0, 0, 2069, 1052, 2069, 0, 4094,
	4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
	4094, 4094, 1065, 0, 0, 4094, 2069, 2069, 2069, 0,
	0, 0, 0, 1050, 2069, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 1051, 1051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2069, 2069, 2069, 1050, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 5245, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	2844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2069, 0, 0, 0, 1065,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 0, 0,
	1050, 0, 0, 0, 0, 1051, 0, 1068, 0, 0,
	2069, 0, 0, 0, 0, 2069, 2069, 0, 1065, 0,
	0, 1065, 1066, 0, 0, 0, 0, 1065, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 4094, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 1052, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1134, 1050, 1053, 1050,
	0, 0, 0, 0, 1068, 0, 1068, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 1051, 1050, 0, 0, 1050,
	0, 0, 0, 1068, 0, 1050, 1068, 0, 0, 0,
	1053, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 1053, 0, 1052, 0, 0, 0, 0, 0,
	1066, 1066, 1052, 0, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 6251, 0,
	0, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 2551, 0, 0, 0, 0, 1051, 0, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 978, 981,
	983, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1051, 1050, 0, 1050, 0, 0, 0, 0, 1068, 6251,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2069, 1065, 0, 6251, 0, 0,
	0, 5128, 1052, 2069, 2069, 0, 0, 0, 2069, 2069,
	0, 0, 2069, 2069, 0, 0, 2069, 0, 2069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 3337, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 2069, 0, 0, 2069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3691, 2069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1051, 0, 1067, 0, 3337, 0, 0, 0, 0, 0,
	0, 1051, 1051, 1050, 0, 1051, 0, 0, 0, 0,
	1068, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 1047, 0, 0, 3691, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 2069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 1066, 1066,
	0, 1051, 2069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 1052,
	0, 2069, 1052, 2069, 2069, 2069, 1047, 0, 0, 0,
	0, 0, 2069, 4094, 3337, 2069, 2069, 2069, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 1067, 0, 2069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5245, 0, 4094, 3337, 2069, 0, 0, 1053, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 0, 1053,
	1053, 0, 0, 0, 0, 1181, 0, 0, 0, 0,
	0, 1066, 0, 0, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 1053, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 2069, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 4094, 0, 1067, 0, 0, 0, 0, 1051, 0,
	0, 0, 0, 2069, 0, 0, 1398, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	1065, 0, 0, 0, 1416, 1047, 0, 0, 3337, 1065,
	0, 4094, 0, 0, 0, 2069, 1424, 1427, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1051, 1067,
	0, 0, 1469, 0, 0, 0, 1051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 2069, 0, 0, 1067,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 1551, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 1068, 0, 1050, 0, 2069,
	0, 1047, 0, 0, 1068, 0, 0, 0, 0, 1066,
	1066, 0, 1066, 0, 0, 2069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	2069, 0, 0, 2069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 1065, 1065,
	0, 0, 0, 0, 1066, 1066, 1050, 1065, 1047, 0,
	0, 0, 0, 1068, 1051, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 1067, 1051, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 1066, 0, 0, 1838,
	0, 0, 0, 0, 1066, 1047, 0, 1047, 0, 0,
	1838, 0, 1067, 2069, 0, 1067, 1050, 1050, 0, 0,
	0, 1067, 0, 1068, 1068, 1050, 0, 1051, 1051, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 1047, 0, 0, 1047, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 3337, 3337, 0,
	1065, 3337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2069, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1052, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 4094, 4094, 0, 4094, 0, 0, 1067, 0, 1067,
	0, 0, 1050, 1052, 0, 0, 0, 0, 1050, 1068,
	0, 0, 0, 0, 1051, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2069, 0, 0, 1926, 0, 0, 0,
	0, 0, 0, 0, 1052, 1052, 0, 0, 1051, 0,
	0, 0, 0, 0, 0, 0, 1065, 1065, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 2600, 0,
	1050, 0, 0, 0, 1066, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2650, 0, 1066,
	0, 0, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2718, 0, 0, 0,
	2722, 0, 0, 0, 0, 2734, 0, 0, 0, 0,
	0, 1047, 0, 0, 1050, 1050, 0, 0, 0, 0,
	0, 1068, 1068, 0, 0, 0, 2782, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2797, 0, 0, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2815, 0, 0, 0, 2819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 1066, 0, 0, 1066, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 2911, 0, 0, 0, 0, 0, 0, 0, 2734,
	2734, 2734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 2945, 2946, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	1066, 0, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 1051, 1068, 1051, 1051, 0, 0, 0,
	0, 0, 0, 3059, 1050, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1838, 1838, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 1050, 1068, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 0, 0, 0, 1181, 1181, 0, 1181,
	0, 3117, 0, 0, 3119, 3120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 1065, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1065, 0, 0, 0, 0, 0, 0,
	1052, 0, 1052, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 1050, 0, 1050, 0,
	0, 0, 1068, 1068, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1838, 0, 0, 1065, 0, 0, 1066, 0, 1052,
	0, 3222, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	1050, 1050, 0, 1067, 0, 0, 0, 1068, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 1068,
	1050, 0, 0, 0, 0, 1067, 0, 1068, 0, 0,
	0, 0, 1065, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 1050, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 1067, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1047, 0, 0, 0, 0,
	1050, 0, 0, 1047, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 1051, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 1050, 0, 0, 1067, 0, 0, 0, 1068, 0,
	1050, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 1050, 1047, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1065,
	0, 0, 1065, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 0, 1066, 0, 0,
	1067, 1067, 1068, 0, 0, 0, 1050, 1050, 1065, 0,
	1050, 0, 0, 1068, 1068, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	0, 1068, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 1065, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3585, 3586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3647, 0, 0, 0, 0,
	1050, 0, 0, 0, 1047, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 1047, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 1066, 1066, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3897, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 1067, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 1047, 0, 1047, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 0, 0, 0,
	1068, 1050, 0, 0, 0, 0, 1067, 1067, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	3999, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 1065, 1065, 0, 0, 1047, 1050,
	0, 0, 0, 0, 1067, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1050, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 1050, 0, 0, 0, 0, 0, 1068,
	1068, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4205, 0, 4208, 0, 0, 4213, 0, 0, 0,
	0, 4219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 4255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 1067, 0, 0, 0, 0, 0, 0, 1047, 0,
	1065, 1066, 0, 0, 0, 4307, 4308, 0, 0, 1050,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 1067, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1047, 0, 0, 1047, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 1065, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 1050, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 1838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	1050, 1050, 0, 0, 0, 1068, 0, 1068, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4615, 4616, 0, 0, 0, 0, 4621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4808,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 0, 4822, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5110, 5111, 5112, 5113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 1067, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 1047, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5777, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5784,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 5824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 1936, 329, 1942, 346,
	827, 1952, 395, 432, 647, 1939, 1984, 492, 1989, 545,
	549, 2013, 638, 1946, 1949, 1959, 1962, 403, 1967, 832,
	1975, 838, 1985, 844, 2004, 614, 2010, 834, 835, 840,
	334, 722, 637, 708, 1998, 1944, 2002, 499, 1995, 1971,
	2011, 1988, 2000, 1981, 1986, 342, 1973, 1974, 1978, 1987,
	836, 833, 837, 843, 831, 841, 828, 839, 2008, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 1943,
	1961, 448, 618, 383, 472, 1994, 362, 505, 2007, 594,
	469, 2001, 577, 597, 1963, 489, 368, 528, 584, 585,
	825, 830, 1951, 846, 1938, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 1969, 480, 537, 694, 1941,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 2009, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 1937, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 1953, 1954, 1955, 829, 1956, 1957,
	1958, 375, 376, 377, 378, 379, 380, 1960, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 1964, 398,
	400, 1965, 401, 404, 1966, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 1968, 414, 415, 417, 1970,
	420, 421, 422, 423, 424, 1972, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 1976, 445, 446, 447,
	449, 1977, 450, 451, 454, 455, 456, 457, 1979, 459,
	667, 1980, 460, 461, 462, 1982, 1983, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 1991, 516, 517,
	518, 677, 519, 520, 521, 522, 1992, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 1993, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 1996,
	571, 681, 572, 573, 574, 575, 576, 1997, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 1999, 595, 596, 845, 598, 599, 600, 601,
	602, 2003, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 2005, 2006, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 2012,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 1990, 1940, 1945, 1947, 1948, 1950,
	0, 0, 0, 0, 0, 0, 0, 0, 2087, 0,
	0, 0, 0, 0, 0, 2084, 0, 0, 2054, 0,
	0, 1929, 2066, 2067, 2068, 2098, 2100, 2082, 2127, 2148,
	0, 2199, 2245, 2215, 2070, 2332, 2338, 2071, 2399, 2403,
	0, 2079, 2129, 2055, 2179, 2194, 2209, 2221, 2074, 2080,
	2072, 2336, 2075, 2480, 2491, 2511, 2076, 2077, 2078, 2056,
	2472, 2529, 2298, 2457, 2109, 0, 2085, 2423, 0, 0,
	2346, 2461, 0, 0, 2123, 0, 0, 0, 0, 2271,
	2260, 2294, 2407, 2232, 2352, 2160, 2319, 2497, 2389, 2308,
	2503, 2421, 2122, 2188, 2172, 2224, 2289, 2430, 2105, 2189,
	2264, 2495, 2184, 2310, 0, 2151, 2354, 2496, 2459, 2307,
	2470, 2440, 2465, 2195, 2333, 2158, 2380, 2447, 2448, 2118,
	2231, 2153, 2506, 2103, 2163, 2171, 2341, 2142, 2349, 2527,
	2281, 2414, 2364, 2362, 0, 2321, 2390, 2522, 0, 0,
	2208, 0, 2202, 2340, 2514, 2149, 2488, 2383, 2345, 2283,
	2417, 2452, 2204, 2185, 2186, 2242, 2382, 2227, 2161, 2502,
	2278, 2282, 2280, 2276, 2273, 2277, 2274, 2275, 2279, 2229,
	2272, 0, 0, 2119, 2339, 2267, 2437, 2117, 2386, 2225,
	2198, 0, 0, 0, 2504, 2318, 2320, 0, 2473, 2268,
	2266, 2177, 2176, 2120, 2505, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2099, 2101, 2102, 2106, 2107, 2108,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2124, 2125, 2126,
	2128, 2131, 2132, 2133, 2135, 2136, 2137, 2138, 2139, 2140,
	2143, 2144, 2145, 2146, 2147, 2150, 2152, 2154, 2155, 2156,
	2157, 2159, 2162, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2173, 2174, 0, 2175, 2178, 2180, 2181, 2182, 2183, 2187,
	2190, 2191, 2192, 2193, 2196, 2197, 2200, 2201, 2203, 2205,
	2206, 2207, 2210, 0, 2211, 2212, 2213, 2214, 2216, 2217,
	2218, 2219, 2220, 2222, 0, 0, 2223, 2226, 2228, 2230,
	2233, 2234, 2235, 2236, 0, 2237, 2238, 2239, 2240, 2241,
	2243, 0, 2244, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
	2253, 2254, 2255, 2256, 2257, 2258, 2259, 2262, 2263, 2265,
	0, 2269, 2270, 2285, 2286, 2287, 2288, 2290, 2292, 2293,
	2291, 2295, 2296, 2297, 2299, 2300, 2301, 2302, 2303, 2304,
	2305, 2306, 2309, 2311, 2312, 0, 2313, 2314, 0, 2315,
	2316, 2317, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329,
	2330, 2331, 2334, 2335, 2337, 2351, 2353, 0, 2355, 2356,
	2357, 2358, 2359, 2360, 2361, 2363, 2365, 2366, 2367, 2368,
	2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378,
	2379, 2381, 2384, 2385, 2387, 2388, 2391, 2392, 2393, 2394,
	2395, 2396, 2397, 2398, 2400, 2401, 2402, 2404, 2405, 2406,
	2408, 2409, 2410, 2411, 2412, 2413, 2415, 2416, 2418, 2419,
	2420, 0, 2422, 2424, 2425, 2426, 2427, 2428, 2429, 2432,
	2431, 2433, 2434, 2435, 2436, 2438, 2439, 2441, 2442, 2443,
	2444, 2445, 2446, 2449, 2450, 2451, 2453, 2454, 2455, 2456,
	2458, 2460, 2462, 2464, 2463, 2466, 2467, 2468, 2469, 2471,
	2474, 2475, 2476, 2477, 2478, 2479, 2481, 2482, 2483, 2484,
	2485, 2486, 2487, 2489, 0, 2490, 2492, 2493, 2494, 2498,
	2499, 2500, 2501, 2507, 2508, 2509, 2510, 2512, 0, 0,
	2513, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2523, 2524,
	2525, 2526, 0, 2528, 2261, 2350, 2344, 2284, 2342, 2343,
	2347, 2348, 0, 0, 2104, 2121, 2130, 2134, 2141, 0,
	2073, 0, 0, 0, 0, 0, 0, 0, 0, 2063,
	2064, 2065, 0, 0, 0, 0, 0, 0, 2057, 2058,
	2059, 2060, 2061, 2062, 1931, 0, 6250, 807, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 1936, 329, 1942, 346, 827, 1952, 395, 432, 647,
	1939, 1984, 492, 1989, 545, 549, 2013, 638, 1946, 1949,
	1959, 1962, 403, 1967, 832, 1975, 838, 1985, 844, 2004,
	614, 2010, 834, 835, 840, 334, 722, 637, 708, 1998,
	1944, 2002, 499, 1995, 1971, 2011, 1988, 2000, 1981, 1986,
	342, 1973, 1974, 1978, 1987, 836, 833, 837, 843, 831,
	841, 828, 839, 2008, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 1943, 1961, 448, 618, 383, 472,
	1994, 362, 505, 2007, 594, 469, 2001, 577, 597, 1963,
	489, 368, 528, 584, 585, 825, 830, 1951, 846, 1938,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	1969, 480, 537, 694, 1941, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	2009, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 1937, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 1953,
	1954, 1955, 829, 1956, 1957, 1958, 375, 376, 377, 378,
	379, 380, 1960, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 1964, 398, 400, 1965, 401, 404, 1966,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	1968, 414, 415, 417, 1970, 420, 421, 422, 423, 424,
	1972, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 1976, 445, 446, 447, 449, 1977, 450, 451, 454,
	455, 456, 457, 1979, 459, 667, 1980, 460, 461, 462,
	1982, 1983, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 1991, 516, 517, 518, 677, 519, 520, 521,
	522, 1992, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 1993, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 1996, 571, 681, 572, 573, 574,
	575, 576, 1997, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 1999, 595, 596,
	845, 598, 599, 600, 601, 602, 2003, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	2005, 2006, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 2012, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 1990,
	1940, 1945, 1947, 1948, 1950, 1931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1936, 329, 1942, 346, 827, 1952, 395, 432,
	647, 1939, 1984, 492, 1989, 545, 549, 2013, 638, 1946,
	1949, 1959, 1962, 403, 1967, 832, 1975, 838, 1985, 844,
	2004, 614, 2010, 834, 835, 840, 334, 722, 637, 708,
	1998, 1944, 2002, 499, 1995, 1971, 2011, 1988, 2000, 1981,
	1986, 342, 1973, 1974, 1978, 1987, 836, 833, 837, 843,
	831, 841, 828, 839, 2008, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 1943, 1961, 448, 618, 383,
	472, 1994, 362, 505, 2007, 594, 469, 2001, 577, 597,
	1963, 489, 368, 528, 584, 585, 825, 830, 1951, 846,
	1938, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 1969, 480, 537, 694, 1941, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 662, 666, 664,
	660, 657, 661, 658, 659, 663, 419, 656, 0, 631,
	640, 674, 654, 682, 639, 679, 649, 394, 678, 643,
	642, 688, 669, 670, 624, 684, 655, 653, 646, 645,
	641, 2009, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 1937, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 644, 826, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	1953, 1954, 1955, 829, 1956, 1957, 1958, 375, 376, 377,
	378, 379, 380, 1960, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 1964, 398, 400, 1965, 401, 404,
	1966, 405, 406, 407, 408, 409, 410, 411, 412, 648,
	413, 1968, 414, 415, 417, 1970, 420, 421, 422, 423,
	424, 1972, 425, 650, 651, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 1976, 445, 446, 447, 449, 1977, 450, 451,
	454, 455, 456, 457, 1979, 459, 667, 1980, 460, 461,
	462, 1982, 1983, 463, 464, 465, 466, 467, 468, 471,
	668, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 672, 488, 490,
	491, 673, 675, 676, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 1991, 516, 517, 518, 677, 519, 520,
	521, 522, 1992, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 1993, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 680, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 1996, 571, 681, 572, 573,
	574, 575, 576, 1997, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 683, 592, 593, 1999, 595,
	596, 845, 598, 599, 600, 601, 602, 2003, 721, 603,
	685, 604, 686, 605, 606, 607, 608, 609, 610, 611,
	613, 2005, 2006, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 2012, 630, 632, 634, 712,
	689, 690, 691, 692, 693, 695, 696, 697, 698, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	1990, 1940, 1945, 1947, 1948, 1950, 1073, 0, 1704, 807,
	0, 0, 0, 922, 793, 0, 0, 0, 0, 0,
	933, 934, 935, 1936, 329, 1942, 346, 827, 1952, 395,
	432, 0, 1939, 1984, 492, 1989, 545, 549, 2013, 0,
	1946, 1949, 1959, 1962, 403, 1967, 832, 1975, 838, 1985,
	844, 2004, 614, 2010, 834, 835, 840, 334, 1070, 637,
	708, 1998, 1944, 2002, 4282, 1995, 1971, 2011, 1988, 2000,
	1981, 1986, 342, 1973, 1974, 1978, 1987, 836, 833, 837,
	843, 831, 841, 828, 839, 2008, 536, 470, 0, 563,
	341, 387, 374, 416, 458, 570, 1943, 1961, 448, 618,
	383, 472, 1994, 362, 505, 2007, 594, 469, 2001, 577,
	597, 1963, 489, 368, 528, 584, 585, 825, 830, 1951,
	846, 1938, 372, 373, 494, 354, 502, 0, 0, 557,
	515, 513, 1969, 480, 537, 0, 1941, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 1072, 0,
	631, 1075, 1063, 1055, 1056, 1057, 1058, 1059, 1060, 0,
	1077, 1078, 1079, 1080, 1081, 624, 1069, 1071, 1054, 1061,
	1062, 1064, 2009, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 1937, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 0, 826, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 1953, 1954, 1955, 829, 1956, 1957, 1958, 375, 376,
	377, 378, 379, 380, 1960, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 1964, 398, 400, 1965, 401,
	404, 1966, 405, 406, 407, 408, 409, 410, 411, 412,
	0, 413, 1968, 414, 415, 417, 1970, 420, 421, 422,
	423, 424, 1972, 425, 0, 0, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 1976, 445, 446, 447, 449, 1977, 450,
	451, 454, 455, 456, 457, 1979, 459, 0, 1980, 460,
	461, 462, 1982, 1983, 463, 464, 465, 466, 467, 468,
	471, 0, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 4281, 0, 488,
	490, 491, 0, 0, 0, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 1991, 516, 517, 518, 0, 519,
	520, 521, 522, 1992, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 1993, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 0, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 1996, 571, 2846, 572,
	573, 574, 575, 576, 1997, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 0, 592, 593, 1999,
	595, 596, 845, 598, 599, 600, 601, 602, 2003, 721,
	603, 0, 604, 0, 605, 606, 607, 608, 609, 610,
	611, 613, 2005, 2006, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 2012, 630, 632, 634,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	635, 636, 0, 503, 497, 453, 495, 496, 500, 501,
	504, 1990, 1940, 1945, 1947, 1948, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 930, 931, 932,
	0, 0, 0, 0, 0, 0, 4283, 4284, 926, 927,
	928, 929, 1073, 0, 1704, 807, 0, 0, 0, 922,
	793, 0, 0, 0, 0, 0, 933, 934, 935, 1936,
	329, 1942, 346, 827, 1952, 395, 432, 0, 1939, 1984,
	492, 1989, 545, 549, 2013, 0, 1946, 1949, 1959, 1962,
	403, 1967, 832, 1975, 838, 1985, 844, 2004, 614, 2010,
	834, 835, 840, 334, 1070, 637, 708, 1998, 1944, 2002,
	4282, 1995, 1971, 2011, 1988, 2000, 1981, 1986, 342, 1973,
	1974, 1978, 1987, 836, 833, 837, 843, 831, 841, 828,
	839, 2008, 536, 470, 0, 563, 341, 387, 374, 416,
	458, 570, 1943, 1961, 448, 618, 383, 472, 1994, 362,
	505, 2007, 594, 469, 2001, 577, 597, 1963, 489, 368,
	528, 584, 585, 825, 830, 1951, 846, 1938, 372, 373,
	494, 354, 502, 0, 0, 557, 515, 513, 1969, 480,
	537, 0, 1941, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 419, 1072, 0, 631, 1075, 1063, 1055,
	1056, 1057, 1058, 1059, 1060, 0, 1077, 1078, 1079, 1080,
	1081, 624, 1069, 1071, 1054, 1061, 1062, 1064, 2009, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	1937, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 0, 826, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1953, 1954, 1955,
	829, 1956, 1957, 1958, 375, 376, 377, 378, 379, 380,
	1960, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 1964, 398, 400, 1965, 401, 404, 1966, 405, 406,
	407, 408, 409, 410, 411, 412, 0, 413, 1968, 414,
	415, 417, 1970, 420, 421, 422, 423, 424, 1972, 425,
	0, 0, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 1976,
	445, 446, 447, 449, 1977, 450, 451, 454, 455, 456,
	457, 1979, 459, 0, 1980, 460, 461, 462, 1982, 1983,
	463, 464, 465, 466, 467, 468, 471, 0, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 5000, 0, 488, 490, 491, 0, 0,
	0, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	1991, 516, 517, 518, 0, 519, 520, 521, 522, 1992,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	1993, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 0,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1996, 571, 2846, 572, 573, 574, 575, 576,
	1997, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 0, 592, 593, 1999, 595, 596, 845, 598,
	599, 600, 601, 602, 2003, 721, 603, 0, 604, 0,
	605, 606, 607, 608, 609, 610, 611, 613, 2005, 2006,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 2012, 630, 632, 634, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 636, 0, 503,
	497, 453, 495, 496, 500, 501, 504, 1990, 1940, 1945,
	1947, 1948, 1950, 0, 0, 0, 0, 0, 0, 0,
	0, 1931, 0, 930, 931, 932, 0, 0, 0, 0,
	0, 0, 4283, 4284, 926, 927, 928, 929, 1936, 329,
	1942, 346, 827, 1952, 3637, 432, 647, 1939, 1984, 492,
	1989, 545, 549, 2013, 638, 1946, 1949, 1959, 1962, 403,
	1967, 832, 1975, 838, 1985, 844, 2004, 614, 2010, 834,
	835, 840, 334, 722, 637, 708, 1998, 1944, 2002, 499,
	1995, 1971, 2011, 1988, 2000, 1981, 1986, 342, 1973, 1974,
	1978, 1987, 836, 833, 837, 843, 831, 841, 828, 839,
	2008, 536, 470, 687, 563, 341, 387, 374, 416, 458,
	3635, 1943, 1961, 448, 618, 383, 472, 1994, 362, 505,
	2007, 594, 469, 2001, 577, 597, 1963, 489, 368, 528,
	584, 585, 825, 830, 1951, 846, 1938, 372, 373, 494,
	354, 502, 699, 665, 557, 515, 513, 1969, 480, 537,
	694, 1941, 0, 402, 0, 397, 493, 633, 360, 612,
	531, 498, 452, 560, 589, 399, 384, 385, 428, 530,
	418, 370, 623, 662, 666, 664, 660, 657, 661, 658,
	659, 663, 419, 656, 0, 631, 640, 674, 654, 682,
	639, 679, 649, 394, 678, 643, 642, 688, 669, 670,
	624, 684, 655, 653, 646, 645, 641, 2009, 319, 320,
	321, 322, 323, 3636, 325, 326, 327, 328, 330, 1937,
	331, 332, 333, 335, 336, 337, 824, 338, 339, 340,
	343, 344, 345, 347, 707, 348, 349, 350, 351, 352,
	353, 644, 826, 355, 356, 357, 358, 359, 361, 363,
	364, 365, 366, 367, 369, 371, 1953, 1954, 1955, 829,
	1956, 1957, 1958, 375, 376, 377, 378, 379, 380, 1960,
	381, 382, 386, 388, 389, 390, 391, 392, 393, 396,
	1964, 398, 400, 1965, 401, 404, 1966, 405, 406, 407,
	408, 409, 410, 411, 412, 648, 413, 1968, 414, 415,
	417, 1970, 420, 421, 422, 423, 424, 1972, 425, 650,
	651, 426, 427, 429, 430, 431, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 1976, 445,
	446, 447, 449, 1977, 450, 451, 454, 455, 456, 457,
	1979, 459, 667, 1980, 460, 461, 462, 1982, 1983, 463,
	464, 465, 466, 467, 468, 471, 668, 473, 474, 475,
	476, 477, 478, 479, 709, 481, 482, 483, 484, 485,
	486, 487, 671, 672, 488, 490, 491, 673, 675, 676,
	842, 506, 507, 508, 509, 510, 511, 512, 514, 1991,
	516, 517, 518, 677, 519, 520, 521, 522, 1992, 523,
	524, 525, 526, 527, 529, 532, 533, 534, 535, 1993,
	538, 539, 540, 541, 542, 543, 544, 546, 547, 548,
	550, 551, 552, 710, 553, 554, 555, 556, 680, 558,
	559, 711, 561, 562, 564, 565, 566, 567, 568, 569,
	720, 1996, 571, 681, 572, 573, 574, 575, 576, 1997,
	578, 579, 580, 581, 582, 583, 586, 587, 588, 590,
	591, 683, 592, 593, 1999, 595, 596, 845, 598, 599,
	600, 601, 602, 2003, 721, 603, 685, 604, 686, 605,
	606, 607, 608, 609, 610, 611, 613, 2005, 2006, 615,
	616, 617, 619, 620, 621, 622, 625, 626, 627, 628,
	629, 2012, 630, 632, 634, 712, 689, 690, 691, 692,
	693, 695, 696, 697, 698, 635, 636, 652, 503, 497,
	453, 495, 496, 500, 501, 504, 1990, 1940, 1945, 1947,
	1948, 1950, 821, 0, 1308, 807, 0, 1313, 1314, 1303,
	793, 1293, 0, 0, 0, 0, 0, 0, 0, 1921,
	329, 0, 346, 827, 0, 395, 432, 1298, 0, 1286,
	492, 0, 545, 549, 0, 638, 1318, 0, 1290, 1922,
	403, 1311, 832, 0, 838, 1312, 844, 1310, 614, 0,
	834, 835, 840, 334, 1387, 637, 708, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 1340, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 1299, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328,
	1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381,
	1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382,
	1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 1920, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 1352, 1330, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1341, 1331, 1336,
	1342, 1332, 1333, 1337, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 1344, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	1353, 1302, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 1354, 0, 460, 461, 462, 1334, 1335,
	463, 464, 465, 466, 467, 468, 471, 1367, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 1345, 488, 490, 491, 1351, 675,
	1346, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 1347, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 1305,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1338, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 1348, 592, 593, 1339, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 1349, 604, 1350,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 1289,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 1355, 1356,
	1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	1343, 0, 0, 0, 1287, 0, 0, 821, 0, 1308,
	807, 0, 1313, 1314, 1303, 793, 1293, 0, 0, 1294,
	1917, 0, 1283, 1284, 1918, 329, 0, 346, 827, 0,
	395, 432, 1298, 0, 1286, 492, 0, 545, 549, 179,
	638, 1318, 0, 1290, 0, 403, 1311, 832, 0, 838,
	1312, 844, 1310, 614, 0, 834, 835, 840, 334, 1387,
	637, 708, 0, 0, 0, 1304, 176, 0, 0, 0,
	177, 0, 0, 342, 0, 0, 0, 0, 836, 833,
	837, 843, 831, 841, 828, 839, 0, 536, 470, 1170,
	563, 341, 387, 374, 416, 458, 570, 0, 0, 448,
	618, 383, 472, 0, 362, 505, 1340, 594, 469, 0,
	577, 597, 0, 489, 368, 528, 584, 585, 825, 830,
	0, 846, 0, 372, 373, 494, 354, 502, 699, 665,
	557, 515, 513, 0, 480, 537, 694, 1299, 0, 402,
	0, 397, 493, 633, 360, 612, 531, 498, 452, 560,
	589, 399, 384, 385, 428, 530, 418, 370, 623, 1368,
	1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364,
	0, 631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060,
	678, 1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380,
	1378, 1377, 1374, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 330, 0, 331, 332, 333, 335,
	336, 337, 824, 338, 339, 340, 343, 344, 345, 347,
	707, 348, 349, 350, 351, 352, 353, 1352, 1330, 355,
	356, 357, 358, 359, 361, 363, 364, 365, 366, 367,
	369, 371, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375,
	376, 377, 378, 379, 380, 0, 381, 382, 386, 388,
	389, 390, 391, 392, 393, 396, 0, 398, 400, 0,
	401, 404, 0, 405, 406, 407, 408, 409, 410, 411,
	412, 1344, 413, 0, 414, 415, 417, 0, 420, 421,
	422, 423, 424, 0, 425, 1353, 1302, 426, 427, 429,
	430, 431, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 0, 445, 446, 447, 449, 0,
	450, 451, 454, 455, 456, 457, 0, 459, 1354, 0,
	460, 461, 462, 1334, 1335, 463, 464, 465, 466, 467,
	468, 471, 1367, 473, 474, 475, 476, 477, 478, 479,
	709, 481, 482, 483, 484, 485, 486, 487, 671, 1345,
	488, 490, 491, 1351, 675, 1346, 842, 506, 507, 508,
	509, 510, 511, 512, 514, 0, 516, 517, 518, 1347,
	519, 520, 521, 522, 0, 523, 524, 525, 526, 527,
	529, 532, 533, 534, 535, 0, 538, 539, 540, 541,
	542, 543, 544, 546, 547, 548, 550, 551, 552, 710,
	553, 554, 555, 556, 1305, 558, 559, 711, 561, 562,
	564, 565, 566, 567, 568, 569, 720, 1338, 571, 681,
	572, 573, 574, 575, 576, 0, 578, 579, 580, 581,
	582, 583, 586, 587, 588, 590, 591, 1348, 592, 593,
	1339, 595, 596, 845, 598, 599, 600, 601, 602, 0,
	721, 603, 1349, 604, 1350, 605, 606, 607, 608, 609,
	610, 611, 613, 0, 1289, 615, 616, 617, 619, 620,
	621, 622, 625, 626, 627, 628, 629, 0, 630, 632,
	634, 712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361,
	1371, 635, 636, 652, 503, 497, 453, 495, 496, 500,
	501, 504, 0, 0, 0, 1343, 0, 0, 0, 1287,
	0, 180, 821, 0, 1308, 807, 0, 1313, 1314, 1303,
	793, 1293, 0, 0, 1294, 5861, 0, 1283, 1284, 0,
	329, 0, 346, 827, 0, 395, 432, 1298, 0, 1286,
	492, 0, 545, 549, 179, 638, 1318, 0, 1290, 0,
	403, 1311, 832, 0, 838, 1312, 844, 1310, 614, 0,
	834, 835, 840, 334, 1387, 637, 708, 0, 0, 0,
	1304, 176, 0, 0, 0, 177, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 1170, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 3367, 362,
	505, 1340, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 1299, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328,
	1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381,
	1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382,
	1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 1352, 1330, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1341, 1331, 1336,
	1342, 1332, 1333, 1337, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 1344, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	1353, 1302, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 1354, 0, 460, 461, 462, 1334, 1335,
	463, 464, 465, 466, 467, 468, 471, 1367, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 1345, 488, 490, 491, 1351, 675,
	1346, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 1347, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 1305,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1338, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 1348, 592, 593, 1339, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 1349, 604, 1350,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 1289,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 1355, 1356,
	1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	1343, 0, 0, 0, 1287, 0, 180, 821, 0, 1308,
	807, 0, 1313, 1314, 1303, 793, 1293, 0, 0, 1294,
	0, 0, 1283, 1284, 0, 329, 0, 346, 827, 0,
	395, 432, 1298, 0, 1286, 492, 0, 545, 549, 179,
	638, 1318, 0, 1290, 0, 403, 1311, 832, 0, 838,
	1312, 844, 1310, 614, 0, 834, 835, 840, 334, 1387,
	637, 708, 0, 0, 0, 1304, 176, 0, 0, 0,
	177, 0, 0, 342, 0, 0, 0, 0, 836, 833,
	837, 843, 831, 841, 828, 839, 0, 536, 470, 1170,
	563, 341, 387, 374, 416, 458, 570, 0, 0, 448,
	618, 383, 472, 0, 362, 505, 1340, 594, 469, 0,
	577, 597, 0, 489, 368, 528, 584, 585, 825, 830,
	0, 846, 0, 372, 373, 494, 354, 502, 699, 665,
	557, 515, 513, 0, 480, 537, 694, 1299, 0, 402,
	0, 397, 493, 633, 360, 612, 531, 498, 452, 560,
	589, 399, 384, 385, 428, 530, 418, 370, 623, 1368,
	1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364,
	0, 631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060,
	678, 1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380,
	1378, 1377, 1374, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 330, 0, 331, 332, 333, 335,
	336, 337, 824, 338, 339, 340, 343, 344, 345, 347,
	707, 348, 349, 350, 351, 352, 353, 1352, 1330, 355,
	356, 357, 358, 359, 361, 363, 364, 365, 366, 367,
	369, 371, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375,
	376, 377, 378, 379, 380, 0, 381, 382, 386, 388,
	389, 390, 391, 392, 393, 396, 0, 398, 400, 0,
	401, 404, 0, 405, 406, 407, 408, 409, 410, 411,
	412, 1344, 413, 0, 414, 415, 417, 0, 420, 421,
	422, 423, 424, 0, 425, 1353, 1302, 426, 427, 429,
	430, 431, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 0, 445, 446, 447, 449, 0,
	450, 451, 454, 455, 456, 457, 0, 459, 1354, 0,
	460, 461, 462, 1334, 1335, 463, 464, 465, 466, 467,
	468, 471, 1367, 473, 474, 475, 476, 477, 478, 479,
	709, 481, 482, 483, 484, 485, 486, 487, 671, 1345,
	488, 490, 491, 1351, 675, 1346, 842, 506, 507, 508,
	509, 510, 511, 512, 514, 0, 516, 517, 518, 1347,
	519, 520, 521, 522, 0, 523, 524, 525, 526, 527,
	529, 532, 533, 534, 535, 0, 538, 539, 540, 541,
	542, 543, 544, 546, 547, 548, 550, 551, 552, 710,
	553, 554, 555, 556, 1305, 558, 559, 711, 561, 562,
	564, 565, 566, 567, 568, 569, 720, 1338, 571, 681,
	572, 573, 574, 575, 576, 0, 578, 579, 580, 581,
	582, 583, 586, 587, 588, 590, 591, 1348, 592, 593,
	1339, 595, 596, 845, 598, 599, 600, 601, 602, 0,
	721, 603, 1349, 604, 1350, 605, 606, 607, 608, 609,
	610, 611, 613, 0, 1289, 615, 616, 617, 619, 620,
	621, 622, 625, 626, 627, 628, 629, 0, 630, 632,
	634, 712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361,
	1371, 635, 636, 652, 503, 497, 453, 495, 496, 500,
	501, 504, 0, 0, 0, 1343, 0, 0, 0, 1287,
	0, 180, 821, 0, 1308, 807, 0, 1313, 1314, 1303,
	793, 1293, 0, 0, 1294, 0, 0, 1283, 1284, 0,
	329, 0, 346, 827, 0, 395, 432, 1298, 0, 1286,
	492, 0, 545, 549, 0, 638, 1318, 0, 1290, 0,
	403, 1311, 832, 0, 838, 1312, 844, 1310, 614, 0,
	834, 835, 840, 334, 1387, 637, 708, 0, 0, 0,
	1304, 0, 3348, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 1340, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 1299, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328,
	1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381,
	1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382,
	1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 1352, 1330, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1341, 1331, 1336,
	1342, 1332, 1333, 1337, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 1344, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	1353, 1302, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 1354, 3344, 460, 461, 462, 1334, 1335,
	463, 464, 465, 466, 467, 468, 471, 1367, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 1345, 488, 490, 491, 1351, 675,
	1346, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 1347, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 1305,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1338, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 1348, 592, 593, 1339, 595, 596, 845, 598,
	599, 600, 601, 602, 3345, 721, 603, 1349, 604, 1350,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 1289,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 1355, 1356,
	1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 3343,
	1343, 0, 0, 0, 1287, 0, 821, 0, 1308, 807,
	0, 1313, 1314, 1303, 793, 1293, 0, 0, 0, 1294,
	0, 0, 1283, 1284, 329, 0, 346, 827, 0, 395,
	432, 1298, 0, 1286, 492, 0, 545, 549, 0, 638,
	1318, 0, 1290, 0, 403, 1311, 832, 0, 838, 1312,
	844, 1310, 614, 0, 834, 835, 840, 334, 1387, 637,
	708, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 687, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 1340, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 372, 373, 494, 354, 502, 699, 665, 557,
	515, 513, 0, 480, 537, 694, 1299, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 1368, 1370,
	1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364, 0,
	631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060, 678,
	1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380, 1378,
	1377, 1374, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 1352, 1330, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	1344, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 1353, 1302, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 1354, 0, 460,
	461, 462, 1334, 1335, 463, 464, 465, 466, 467, 468,
	471, 1367, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 671, 1345, 488,
	490, 491, 1351, 675, 1346, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 1347, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 1305, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 1338, 571, 681, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 1348, 592, 593, 1339,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 1349, 604, 1350, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 1289, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371,
	635, 636, 652, 503, 497, 453, 495, 496, 500, 501,
	504, 0, 0, 0, 1343, 0, 0, 0, 1287, 0,
	0, 821, 0, 1308, 807, 0, 1313, 1314, 1303, 793,
	1293, 0, 0, 1294, 0, 0, 1283, 1284, 1281, 329,
	0, 346, 827, 0, 395, 432, 1298, 0, 1286, 492,
	0, 545, 549, 0, 638, 1318, 0, 1290, 0, 403,
	1311, 832, 0, 838, 1312, 844, 1310, 614, 0, 834,
	835, 840, 334, 1387, 637, 708, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 836, 833, 837, 843, 831, 841, 828, 839,
	0, 536, 470, 687, 563, 341, 387, 374, 416, 458,
	570, 0, 0, 448, 618, 383, 472, 0, 362, 505,
	1340, 594, 469, 0, 577, 597, 0, 489, 368, 528,
	584, 585, 825, 830, 0, 846, 0, 372, 373, 494,
	354, 502, 699, 665, 557, 515, 513, 0, 480, 537,
	694, 1299, 0, 402, 0, 397, 493, 633, 360, 612,
	531, 498, 452, 560, 589, 399, 384, 385, 428, 530,
	418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329,
	1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386,
	1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383,
	624, 1388, 1327, 1380, 1378, 1377, 1374, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 330, 0,
	331, 332, 333, 335, 336, 337, 824, 338, 339, 340,
	343, 344, 345, 347, 707, 348, 349, 350, 351, 352,
	353, 1352, 1330, 355, 356, 357, 358, 359, 361, 363,
	364, 365, 366, 367, 369, 371, 1341, 1331, 1336, 1342,
	1332, 1333, 1337, 375, 376, 377, 378, 379, 380, 0,
	381, 382, 386, 388, 389, 390, 391, 392, 393, 396,
	0, 398, 400, 0, 401, 404, 0, 405, 406, 407,
	408, 409, 410, 411, 412, 1344, 413, 0, 414, 415,
	417, 0, 420, 421, 422, 423, 424, 0, 425, 1353,
	1302, 426, 427, 429, 430, 431, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 0, 445,
	446, 447, 449, 0, 450, 451, 454, 455, 456, 457,
	0, 459, 1354, 0, 460, 461, 462, 1334, 1335, 463,
	464, 465, 466, 467, 468, 471, 1367, 473, 474, 475,
	476, 477, 478, 479, 709, 481, 482, 483, 484, 485,
	486, 487, 671, 1345, 488, 490, 491, 1351, 675, 1346,
	842, 506, 507, 508, 509, 510, 511, 512, 514, 0,
	516, 517, 518, 1347, 519, 520, 521, 522, 0, 523,
	524, 525, 526, 527, 529, 532, 533, 534, 535, 0,
	538, 539, 540, 541, 542, 543, 544, 546, 547, 548,
	550, 551, 552, 710, 553, 554, 555, 556, 1305, 558,
	559, 711, 561, 562, 564, 565, 566, 567, 568, 569,
	720, 1338, 571, 681, 572, 573, 574, 575, 576, 0,
	578, 579, 580, 581, 582, 583, 586, 587, 588, 590,
	591, 1348, 592, 593, 1339, 595, 596, 845, 598, 599,
	600, 601, 602, 0, 721, 603, 1349, 604, 1350, 605,
	606, 607, 608, 609, 610, 611, 613, 0, 1289, 615,
	616, 617, 619, 620, 621, 622, 625, 626, 627, 628,
	629, 0, 630, 632, 634, 712, 689, 1355, 1356, 1359,
	1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503, 497,
	453, 495, 496, 500, 501, 504, 0, 0, 0, 1343,
	0, 0, 0, 1287, 0, 821, 0, 1308, 807, 0,
	1313, 1314, 1303, 793, 1293, 0, 2546, 3289, 1294, 0,
	0, 1283, 1284, 329, 0, 346, 827, 0, 395, 432,
	1298, 0, 1286, 492, 0, 545, 549, 0, 638, 1318,
	0, 1290, 0, 403, 1311, 832, 0, 838, 1312, 844,
	1310, 614, 0, 834, 835, 840, 334, 1387, 637, 708,
	0, 0, 3250, 1304, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 1340, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 0, 480, 537, 694, 1299, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 1368, 1370, 1366,
	1362, 1363, 1328, 1329, 1369, 1365, 419, 1364, 0, 631,
	1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060, 678, 1376,
	1375, 1389, 1382, 1383, 624, 1388, 1327, 1380, 1378, 1377,
	1374, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 1352, 1330, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 1344,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 1353, 1302, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 1354, 0, 460, 461,
	462, 1334, 1335, 463, 464, 465, 466, 467, 468, 471,
	1367, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 1345, 488, 490,
	491, 1351, 675, 1346, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 1347, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 1305, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 1338, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 1348, 592, 593, 1339, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	1349, 604, 1350, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 1289, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	0, 0, 0, 1343, 0, 0, 0, 1287, 0, 821,
	0, 1308, 807, 0, 1313, 1314, 1303, 793, 1293, 0,
	0, 0, 1294, 0, 0, 1283, 1284, 329, 0, 346,
	827, 0, 395, 432, 1298, 0, 1286, 492, 0, 545,
	549, 0, 638, 1318, 0, 1290, 0, 403, 1311, 832,
	0, 838, 1312, 844, 1310, 614, 0, 834, 835, 840,
	334, 1387, 637, 708, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 1340, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 1299,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365,
	419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372, 1385,
	1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624, 1388,
	1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 1352,
	1330, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332, 1333,
	1337, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 1344, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 1353, 1302, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	1354, 0, 460, 461, 462, 1334, 1335, 463, 464, 465,
	466, 467, 468, 471, 1367, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 1345, 488, 490, 491, 1351, 675, 1346, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 1347, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 1305, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 1338,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 1348,
	592, 593, 1339, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 1349, 604, 1350, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 1289, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 1355, 1356, 1359, 1357, 1358,
	1360, 1361, 1371, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 0, 0, 0, 1343, 0, 0,
	0, 1287, 0, 821, 0, 1308, 807, 0, 1313, 1314,
	1303, 793, 1293, 0, 0, 0, 1294, 4643, 0, 1283,
	1284, 329, 0, 346, 827, 0, 395, 432, 1298, 0,
	1286, 492, 0, 545, 549, 0, 638, 1318, 0, 1290,
	0, 403, 1311, 832, 0, 838, 1312, 844, 1310, 614,
	0, 834, 835, 840, 334, 1387, 637, 708, 0, 0,
	0, 1304, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 1340, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 1299, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363,
	1328, 1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384,
	1381, 1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389,
	1382, 1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 1352, 1330, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 1341, 1331,
	1336, 1342, 1332, 1333, 1337, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 1344, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 1353, 1302, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 1354, 0, 460, 461, 462, 1334,
	1335, 463, 464, 465, 466, 467, 468, 471, 1367, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 1345, 488, 490, 491, 1351,
	675, 1346, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 1347, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	1305, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 1338, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 1348, 592, 593, 1339, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 1349, 604,
	1350, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	1289, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 1355,
	1356, 1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 0, 0,
	0, 1343, 0, 0, 0, 1287, 0, 821, 0, 1308,
	807, 0, 1313, 1314, 1303, 793, 1293, 0, 0, 0,
	1294, 4606, 0, 1283, 1284, 329, 0, 346, 827, 0,
	395, 432, 1298, 0, 1286, 492, 0, 545, 549, 0,
	638, 1318, 0, 1290, 0, 403, 1311, 832, 0, 838,
	1312, 844, 1310, 614, 0, 834, 835, 840, 334, 1387,
	637, 708, 0, 0, 0, 1304, 0, 3348, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 836, 833,
	837, 843, 831, 841, 828, 839, 0, 536, 470, 687,
	563, 341, 387, 374, 416, 458, 570, 0, 0, 448,
	618, 383, 472, 0, 362, 505, 1340, 594, 469, 0,
	577, 597, 0, 489, 368, 528, 584, 585, 825, 830,
	0, 846, 0, 372, 373, 494, 354, 502, 699, 665,
	557, 515, 513, 0, 480, 537, 694, 1299, 0, 402,
	0, 397, 493, 633, 360, 612, 531, 498, 452, 560,
	589, 399, 384, 385, 428, 530, 418, 370, 623, 1368,
	1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364,
	0, 631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060,
	678, 1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380,
	1378, 1377, 1374, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 330, 0, 331, 332, 333, 335,
	336, 337, 824, 338, 339, 340, 343, 344, 345, 347,
	707, 348, 349, 350, 351, 352, 353, 1352, 1330, 355,
	356, 357, 358, 359, 361, 363, 364, 365, 366, 367,
	369, 371, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375,
	376, 377, 378, 379, 380, 0, 381, 382, 386, 388,
	389, 390, 391, 392, 393, 396, 0, 398, 400, 0,
	401, 404, 0, 405, 406, 407, 408, 409, 410, 411,
	412, 1344, 413, 0, 414, 415, 417, 0, 420, 421,
	422, 423, 424, 0, 425, 1353, 1302, 426, 427, 429,
	430, 431, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 0, 445, 446, 447, 449, 0,
	450, 451, 454, 455, 456, 457, 0, 459, 1354, 0,
	460, 461, 462, 1334, 1335, 463, 464, 465, 466, 467,
	468, 471, 1367, 473, 474, 475, 476, 477, 478, 479,
	709, 481, 482, 483, 484, 485, 486, 487, 671, 1345,
	488, 490, 491, 1351, 675, 1346, 842, 506, 507, 508,
	509, 510, 511, 512, 514, 0, 516, 517, 518, 1347,
	519, 520, 521, 522, 0, 523, 524, 525, 526, 527,
	529, 532, 533, 534, 535, 0, 538, 539, 540, 541,
	542, 543, 544, 546, 547, 548, 550, 551, 552, 710,
	553, 554, 555, 556, 1305, 558, 559, 711, 561, 562,
	564, 565, 566, 567, 568, 569, 720, 1338, 571, 681,
	572, 573, 574, 575, 576, 0, 578, 579, 580, 581,
	582, 583, 586, 587, 588, 590, 591, 1348, 592, 593,
	1339, 595, 596, 845, 598, 599, 600, 601, 602, 0,
	721, 603, 1349, 604, 1350, 605, 606, 607, 608, 609,
	610, 611, 613, 0, 1289, 615, 616, 617, 619, 620,
	621, 622, 625, 626, 627, 628, 629, 0, 630, 632,
	634, 712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361,
	1371, 635, 636, 652, 503, 497, 453, 495, 496, 500,
	501, 504, 0, 0, 0, 1343, 0, 0, 0, 1287,
	0, 821, 0, 1308, 807, 0, 1313, 1314, 1303, 793,
	1293, 0, 0, 0, 1294, 0, 0, 1283, 1284, 329,
	0, 346, 827, 0, 395, 432, 1298, 0, 1286, 492,
	0, 545, 549, 0, 638, 1318, 0, 1290, 0, 403,
	1311, 832, 0, 838, 1312, 844, 1310, 614, 0, 834,
	835, 840, 334, 1387, 637, 708, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 836, 833, 837, 843, 831, 841, 828, 839,
	0, 536, 470, 687, 563, 341, 387, 374, 416, 458,
	570, 0, 0, 448, 618, 383, 472, 0, 362, 505,
	1340, 594, 469, 0, 577, 597, 0, 489, 368, 528,
	584, 585, 825, 830, 0, 846, 0, 372, 373, 494,
	354, 502, 699, 665, 557, 515, 513, 0, 480, 537,
	694, 1299, 0, 402, 0, 397, 493, 633, 360, 612,
	531, 498, 452, 560, 589, 399, 384, 385, 428, 530,
	418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329,
	1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386,
	1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383,
	624, 1388, 1327, 1380, 1378, 1377, 1374, 3963, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 330, 0,
	331, 332, 333, 335, 336, 337, 824, 338, 339, 340,
	343, 344, 345, 347, 707, 348, 349, 350, 351, 352,
	353, 1352, 1330, 355, 356, 357, 358, 359, 361, 363,
	364, 365, 366, 367, 369, 371, 1341, 1331, 1336, 1342,
	1332, 1333, 1337, 375, 376, 377, 378, 379, 380, 0,
	381, 382, 386, 388, 389, 390, 391, 392, 393, 396,
	0, 398, 400, 0, 401, 404, 0, 405, 406, 407,
	408, 409, 410, 411, 412, 1344, 413, 0, 414, 415,
	417, 0, 420, 421, 422, 423, 424, 0, 425, 1353,
	1302, 426, 427, 429, 430, 431, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 0, 445,
	446, 447, 449, 0, 450, 451, 454, 455, 456, 457,
	0, 459, 1354, 0, 460, 461, 462, 1334, 1335, 463,
	464, 465, 466, 467, 468, 471, 1367, 473, 474, 475,
	476, 477, 478, 479, 709, 481, 482, 483, 484, 485,
	486, 487, 671, 1345, 488, 490, 491, 1351, 675, 1346,
	842, 506, 507, 508, 509, 510, 511, 512, 514, 0,
	516, 517, 518, 1347, 519, 520, 521, 522, 0, 523,
	524, 525, 526, 527, 529, 532, 533, 534, 535, 0,
	538, 539, 540, 541, 542, 543, 544, 546, 547, 548,
	550, 551, 552, 710, 553, 554, 555, 556, 1305, 558,
	559, 711, 561, 562, 564, 565, 566, 567, 568, 569,
	720, 1338, 571, 681, 572, 573, 574, 575, 576, 0,
	578, 579, 580, 581, 582, 583, 586, 587, 588, 590,
	591, 1348, 592, 593, 1339, 595, 596, 845, 598, 599,
	600, 601, 602, 0, 721, 603, 1349, 604, 1350, 605,
	606, 607, 608, 609, 610, 611, 613, 0, 1289, 615,
	616, 617, 619, 620, 621, 622, 625, 626, 627, 628,
	629, 0, 630, 632, 634, 712, 689, 1355, 1356, 1359,
	1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503, 497,
	453, 495, 496, 500, 501, 504, 0, 0, 0, 1343,
	0, 0, 0, 1287, 0, 821, 0, 1308, 807, 0,
	1313, 1314, 1303, 793, 1293, 0, 0, 0, 1294, 0,
	0, 1283, 1284, 329, 0, 346, 827, 0, 395, 432,
	1298, 0, 1286, 492, 0, 545, 549, 0, 638, 1318,
	0, 1290, 0, 403, 1311, 832, 0, 838, 1312, 844,
	1310, 614, 0, 834, 835, 840, 334, 1387, 637, 708,
	0, 0, 0, 1304, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 3367, 362, 505, 1340, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 0, 480, 537, 694, 1299, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 1368, 1370, 1366,
	1362, 1363, 1328, 1329, 1369, 1365, 419, 1364, 0, 631,
	1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060, 678, 1376,
	1375, 1389, 1382, 1383, 624, 1388, 1327, 1380, 1378, 1377,
	1374, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 1352, 1330, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 1344,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 1353, 1302, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 1354, 0, 460, 461,
	462, 1334, 1335, 463, 464, 465, 466, 467, 468, 471,
	1367, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 1345, 488, 490,
	491, 1351, 675, 1346, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 1347, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 1305, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 1338, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 1348, 592, 593, 1339, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	1349, 604, 1350, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 1289, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	0, 0, 0, 1343, 0, 0, 0, 1287, 0, 821,
	0, 1308, 807, 0, 1313, 1314, 1303, 793, 1293, 0,
	0, 0, 1294, 0, 0, 1283, 1284, 329, 0, 346,
	827, 0, 395, 432, 1298, 0, 1286, 492, 0, 545,
	549, 0, 638, 1318, 0, 1290, 0, 403, 1311, 832,
	0, 838, 1312, 844, 1310, 614, 0, 834, 835, 840,
	334, 1387, 637, 708, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 1340, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 1299,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365,
	419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372, 1385,
	1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624, 1388,
	1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 1352,
	1330, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332, 1333,
	1337, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 1344, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 1353, 1302, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	1354, 0, 460, 461, 462, 1334, 1335, 463, 464, 465,
	466, 467, 468, 471, 1367, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 1345, 488, 490, 491, 1351, 675, 1346, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 1347, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 1305, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 1338,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 1348,
	592, 593, 1339, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 1349, 604, 1350, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 1289, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 1355, 1356, 1359, 1357, 1358,
	1360, 1361, 1371, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 0, 0, 0, 1343, 0, 0,
	0, 1287, 0, 0, 821, 0, 1308, 807, 0, 1313,
	1314, 1303, 793, 1293, 0, 0, 1294, 3294, 0, 1283,
	1284, 2031, 329, 0, 346, 827, 0, 395, 432, 1298,
	0, 1286, 492, 0, 545, 549, 0, 638, 1318, 0,
	1290, 0, 403, 1311, 832, 0, 838, 1312, 844, 1310,
	614, 0, 834, 835, 840, 334, 1387, 637, 708, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 1340, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 1299, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 1368, 1370, 1366, 1362,
	1363, 1328, 1329, 1369, 1365, 419, 1364, 0, 631, 1373,
	1384, 1381, 1386, 1372, 1385, 1379, 1060, 678, 1376, 1375,
	1389, 1382, 1383, 624, 1388, 1327, 1380, 1378, 1377, 1374,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 1352, 1330, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 1341,
	1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 1344, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 1353, 1302, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 1354, 0, 460, 461, 462,
	1334, 1335, 463, 464, 465, 466, 467, 468, 471, 1367,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 1345, 488, 490, 491,
	1351, 675, 1346, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 1347, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 1305, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 1338, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 1348, 592, 593, 1339, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 1349,
	604, 1350, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 1289, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 0,
	0, 0, 1343, 0, 0, 0, 1287, 0, 821, 0,
	1308, 807, 0, 1313, 1314, 1303, 793, 1293, 0, 0,
	0, 1294, 0, 0, 1283, 1284, 329, 0, 346, 827,
	0, 395, 432, 1298, 0, 1286, 492, 0, 545, 549,
	0, 638, 1318, 0, 1290, 0, 403, 1311, 832, 0,
	838, 1312, 844, 1310, 614, 0, 834, 835, 840, 334,
	1387, 637, 708, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 1340, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 1299, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365, 419,
	1364, 0, 631, 1373, 1384, 1381, 1386, 1372, 1385, 1379,
	1060, 678, 1376, 1375, 1389, 1382, 1383, 624, 1388, 1327,
	1380, 1378, 1377, 1374, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 1352, 1330,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 1341, 1331, 1336, 1342, 1332, 1333, 1337,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 1344, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 1353, 1302, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 1354,
	0, 460, 461, 462, 1334, 1335, 463, 464, 465, 466,
	467, 468, 471, 1367, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	1345, 488, 490, 491, 1351, 675, 1346, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	1347, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 1305, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 1338, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 1348, 592,
	593, 1339, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 1349, 604, 1350, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 1289, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 1355, 1356, 1359, 1357, 1358, 1360,
	1361, 1371, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 0, 0, 0, 1343, 0, 0, 0,
	1287, 0, 821, 0, 1308, 807, 0, 1313, 1314, 1303,
	793, 1293, 0, 0, 0, 1294, 0, 0, 1283, 1284,
	329, 0, 346, 827, 0, 395, 432, 1298, 0, 1286,
	492, 0, 545, 549, 0, 638, 1318, 0, 1290, 0,
	403, 1311, 832, 0, 838, 1312, 844, 1310, 614, 0,
	834, 835, 840, 334, 1387, 637, 708, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 1340, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 5870, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 1299, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328,
	1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381,
	1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382,
	1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 1352, 1330, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1341, 1331, 1336,
	1342, 1332, 1333, 1337, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 1344, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	1353, 1302, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 1354, 0, 460, 461, 462, 1334, 1335,
	463, 464, 465, 466, 467, 468, 471, 1367, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 1345, 488, 490, 491, 1351, 675,
	1346, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 1347, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 1305,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1338, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 1348, 592, 593, 1339, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 1349, 604, 1350,
	605, 606, 607, 608, 609, 5869, 611, 613, 0, 1289,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 1355, 1356,
	1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	1343, 0, 0, 0, 1287, 0, 821, 0, 1308, 807,
	0, 1313, 1314, 1303, 793, 1293, 0, 0, 0, 1294,
	0, 0, 1283, 1284, 329, 0, 346, 827, 0, 395,
	432, 1298, 0, 1286, 492, 0, 545, 549, 0, 638,
	1318, 0, 1290, 0, 403, 1311, 832, 0, 838, 1312,
	844, 1310, 614, 0, 834, 835, 840, 334, 1387, 637,
	708, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 687, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 1340, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 372, 373, 494, 354, 502, 699, 665, 557,
	515, 513, 0, 480, 537, 694, 1299, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 1368, 1370,
	1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364, 0,
	631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060, 678,
	1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380, 1378,
	1377, 1374, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 1352, 1330, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	5673, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	1344, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 1353, 5675, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 1354, 0, 460,
	461, 462, 1334, 1335, 463, 464, 465, 466, 467, 468,
	471, 1367, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 671, 1345, 488,
	490, 491, 1351, 675, 1346, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 1347, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	5674, 555, 556, 1305, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 1338, 571, 681, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 1348, 592, 593, 1339,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 1349, 604, 1350, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 1289, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371,
	635, 636, 652, 503, 497, 453, 495, 496, 500, 501,
	504, 0, 0, 0, 1343, 0, 0, 0, 1287, 0,
	821, 0, 1308, 807, 0, 1313, 1314, 1303, 793, 1293,
	0, 0, 0, 5672, 0, 0, 1283, 1284, 329, 0,
	346, 827, 0, 395, 432, 1298, 0, 1286, 492, 0,
	545, 549, 0, 5868, 1318, 0, 1290, 0, 403, 1311,
	832, 0, 838, 1312, 844, 1310, 614, 0, 834, 835,
	840, 334, 1387, 637, 708, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 5870, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 694,
	1299, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372,
	1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624,
	1388, 1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 1302,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 1305, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 5869, 611, 613, 0, 1289, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 0, 0, 0, 1343, 0,
	0, 0, 1287, 0, 821, 0, 1308, 807, 0, 1313,
	1314, 1303, 793, 1293, 0, 0, 0, 1294, 0, 0,
	1283, 1284, 329, 0, 346, 827, 0, 395, 432, 1298,
	0, 1286, 492, 0, 545, 549, 0, 638, 1318, 0,
	1290, 0, 403, 1311, 832, 0, 838, 1312, 844, 1310,
	614, 0, 834, 835, 840, 334, 1387, 637, 708, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 1340, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 1299, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 1368, 1370, 1366, 1362,
	1363, 1328, 1329, 1369, 1365, 419, 1364, 0, 631, 1373,
	1384, 1381, 1386, 1372, 1385, 1379, 1060, 678, 1376, 1375,
	1389, 1382, 1383, 624, 1388, 1327, 1380, 1378, 1377, 1374,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 1352, 1330, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 1341,
	1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 1344, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 1353, 1302, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 1354, 0, 460, 461, 462,
	1334, 1335, 463, 464, 465, 466, 467, 468, 471, 1367,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 5166, 671, 1345, 488, 490, 491,
	1351, 675, 1346, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 1347, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 1305, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 1338, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 1348, 592, 593, 1339, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 1349,
	604, 1350, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 1289, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 0,
	0, 0, 1343, 0, 0, 0, 1287, 0, 821, 0,
	1308, 807, 0, 1313, 1314, 1303, 793, 1293, 0, 0,
	0, 1294, 0, 0, 1283, 1284, 329, 0, 346, 827,
	0, 395, 432, 1298, 0, 1286, 492, 0, 545, 549,
	0, 638, 1318, 0, 1290, 0, 403, 1311, 832, 0,
	838, 1312, 844, 1310, 614, 0, 834, 835, 840, 334,
	1387, 637, 708, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 1340, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 1299, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365, 419,
	1364, 0, 631, 1373, 1384, 1381, 1386, 1372, 1385, 1379,
	1060, 678, 1376, 1375, 1389, 1382, 1383, 624, 1388, 1327,
	1380, 1378, 1377, 1374, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 1352, 1330,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 1341, 1331, 1336, 1342, 1332, 1333, 1337,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 1344, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 1353, 1302, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 1354,
	0, 460, 461, 462, 1334, 1335, 463, 464, 465, 466,
	467, 468, 471, 1367, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	1345, 488, 490, 491, 1351, 675, 1346, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	1347, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 1305, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 1338, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 1348, 592,
	593, 1339, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 1349, 604, 1350, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 1289, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 5153, 1355, 1356, 1359, 1357, 1358, 1360,
	1361, 1371, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 0, 0, 0, 1343, 0, 0, 0,
	1287, 0, 821, 0, 1308, 807, 0, 1313, 1314, 1303,
	793, 1293, 0, 0, 0, 1294, 0, 0, 1283, 1284,
	329, 0, 346, 827, 0, 395, 432, 1298, 0, 1286,
	492, 0, 545, 549, 0, 638, 1318, 0, 1290, 0,
	403, 1311, 832, 0, 838, 1312, 844, 1310, 614, 0,
	834, 835, 840, 334, 1387, 637, 708, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 1340, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 4163, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 1299, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328,
	1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381,
	1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382,
	1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 1352, 1330, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1341, 1331, 1336,
	1342, 1332, 1333, 1337, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 1344, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	1353, 1302, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 1354, 0, 460, 461, 462, 1334, 1335,
	463, 464, 465, 466, 467, 468, 471, 1367, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 1345, 488, 490, 491, 1351, 675,
	1346, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 1347, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 1305,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1338, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 1348, 592, 593, 1339, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 1349, 604, 1350,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 1289,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 1355, 1356,
	1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	1343, 0, 0, 0, 1287, 0, 821, 0, 3200, 807,
	0, 1313, 1314, 1303, 793, 1293, 0, 0, 0, 1294,
	0, 0, 1283, 1284, 329, 0, 346, 827, 0, 395,
	432, 1298, 0, 1286, 492, 0, 545, 549, 0, 638,
	1318, 0, 1290, 0, 403, 1311, 832, 0, 838, 1312,
	844, 1310, 614, 0, 834, 835, 840, 334, 1387, 637,
	708, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 687, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 1340, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 372, 373, 494, 354, 502, 699, 665, 557,
	515, 513, 0, 480, 537, 694, 1299, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 1368, 1370,
	1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364, 0,
	631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060, 678,
	1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380, 1378,
	1377, 1374, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 1352, 1330, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	1344, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 1353, 1302, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 1354, 0, 460,
	461, 462, 1334, 1335, 463, 464, 465, 466, 467, 468,
	471, 1367, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 671, 1345, 488,
	490, 491, 1351, 675, 1346, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 1347, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 1305, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 1338, 571, 681, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 1348, 592, 593, 1339,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 1349, 604, 1350, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 1289, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371,
	635, 636, 652, 503, 497, 453, 495, 496, 500, 501,
	504, 0, 0, 0, 1343, 0, 0, 0, 1287, 0,
	821, 0, 1308, 807, 0, 1313, 1314, 1303, 793, 1293,
	0, 0, 0, 1294, 0, 0, 1283, 1284, 329, 0,
	346, 827, 0, 395, 432, 1298, 0, 1286, 492, 0,
	545, 549, 0, 638, 1318, 0, 1290, 0, 403, 1311,
	832, 0, 838, 1312, 844, 1310, 614, 0, 834, 835,
	840, 334, 1387, 637, 708, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 694,
	1299, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372,
	1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624,
	1388, 1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 1302,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 1305, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 1289, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 0, 0, 0, 1343, 0,
	0, 0, 1287, 0, 821, 0, 1308, 807, 0, 1313,
	1314, 1303, 793, 1293, 0, 0, 0, 1294, 0, 0,
	2039, 2040, 329, 0, 346, 827, 0, 395, 432, 1298,
	0, 0, 492, 0, 545, 549, 0, 638, 1318, 0,
	5484, 0, 403, 1311, 832, 0, 838, 1312, 844, 1310,
	614, 0, 834, 835, 840, 334, 1387, 637, 708, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 1340, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 1299, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 1368, 1370, 1366, 1362,
	1363, 1328, 1329, 1369, 1365, 419, 1364, 0, 631, 1373,
	1384, 1381, 1386, 1372, 1385, 1379, 1060, 678, 1376, 1375,
	1389, 1382, 1383, 624, 1388, 1327, 1380, 1378, 1377, 1374,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 1352, 1330, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 1341,
	1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 1344, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 1353, 1302, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 1354, 0, 460, 461, 462,
	1334, 1335, 463, 464, 465, 466, 467, 468, 471, 1367,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 1345, 488, 490, 491,
	1351, 675, 1346, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 1347, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 3338, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 1338, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 1348, 592, 593, 1339, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 1349,
	604, 1350, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 821, 0,
	1308, 807, 0, 1313, 1314, 1303, 793, 1293, 0, 0,
	0, 3194, 0, 0, 3335, 3336, 329, 0, 346, 827,
	0, 395, 432, 1298, 0, 0, 492, 0, 545, 549,
	0, 638, 1318, 0, 0, 0, 403, 1311, 832, 0,
	838, 1312, 844, 1310, 614, 0, 834, 835, 840, 334,
	1387, 637, 708, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 1340, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 1299, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365, 419,
	1364, 0, 631, 1373, 1384, 1381, 1386, 1372, 1385, 1379,
	1060, 678, 1376, 1375, 1389, 1382, 1383, 624, 1388, 1327,
	1380, 1378, 1377, 1374, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 1352, 1330,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 1341, 1331, 1336, 1342, 1332, 1333, 1337,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 1344, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 1353, 1302, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 1354,
	0, 460, 461, 462, 1334, 1335, 463, 464, 465, 466,
	467, 468, 471, 1367, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	1345, 488, 490, 491, 1351, 675, 1346, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	1347, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 3338, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 1338, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 1348, 592,
	593, 1339, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 1349, 604, 1350, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 1355, 1356, 1359, 1357, 1358, 1360,
	1361, 1371, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 821, 0, 1308, 807, 0, 1313, 1314, 0,
	793, 1293, 0, 0, 0, 3194, 0, 0, 3335, 3336,
	329, 0, 346, 827, 0, 395, 432, 1298, 0, 0,
	492, 0, 545, 549, 0, 638, 1318, 0, 0, 0,
	403, 1311, 832, 0, 838, 1312, 844, 1310, 614, 0,
	834, 835, 840, 334, 1387, 637, 708, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 1340, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 372, 373,
	494, 354, 502, 699, 665, 3193, 515, 513, 0, 480,
	537, 694, 1299, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 1368, 1370, 1366, 1362, 1363, 1328,
	1329, 1369, 1365, 419, 1364, 0, 631, 1373, 1384, 1381,
	1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389, 1382,
	1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 1352, 1330, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 1341, 1331, 1336,
	1342, 1332, 1333, 1337, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 1344, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	1353, 1302, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 1354, 0, 460, 461, 462, 1334, 1335,
	463, 464, 465, 466, 467, 468, 471, 1367, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 1345, 488, 490, 491, 1351, 675,
	1346, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 1347, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 3192,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 1338, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 1348, 592, 593, 1339, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 1349, 604, 1350,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 0,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 1355, 1356,
	1359, 1357, 1358, 1360, 1361, 1371, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 821, 0, 1308, 807,
	0, 1313, 1314, 1303, 793, 1293, 0, 0, 0, 3194,
	0, 0, 3190, 3191, 329, 0, 346, 827, 0, 395,
	432, 1298, 0, 1286, 492, 0, 545, 549, 0, 0,
	1318, 0, 1290, 0, 403, 1311, 0, 0, 0, 1312,
	0, 1310, 614, 0, 0, 0, 0, 334, 1387, 637,
	708, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 687, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 1340, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 5870, 373, 494, 354, 502, 699, 665, 557,
	515, 513, 0, 480, 537, 694, 1299, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 1368, 1370,
	1366, 1362, 1363, 1328, 1329, 1369, 1365, 419, 1364, 0,
	631, 1373, 1384, 1381, 1386, 1372, 1385, 1379, 1060, 678,
	1376, 1375, 1389, 1382, 1383, 624, 1388, 1327, 1380, 1378,
	1377, 1374, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 1352, 1330, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	1344, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 1353, 1302, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 1354, 0, 460,
	461, 462, 1334, 1335, 463, 464, 465, 466, 467, 468,
	471, 1367, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 671, 1345, 488,
	490, 491, 1351, 675, 1346, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 1347, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 1305, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 1338, 571, 681, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 1348, 592, 593, 1339,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 1349, 604, 1350, 605, 606, 607, 608, 609, 5869,
	611, 613, 0, 1289, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371,
	635, 636, 652, 503, 497, 453, 495, 496, 500, 501,
	504, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	821, 0, 1308, 807, 0, 1313, 1314, 0, 793, 1293,
	0, 0, 0, 1294, 0, 0, 1283, 1284, 329, 0,
	346, 827, 0, 395, 432, 1298, 0, 0, 492, 0,
	545, 549, 0, 638, 1318, 0, 0, 0, 403, 1311,
	832, 0, 838, 1312, 844, 1310, 614, 0, 834, 835,
	840, 334, 1387, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 694,
	1299, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372,
	1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624,
	1388, 1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 1302,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 3338, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 0, 0, 0, 1343, 0,
	821, 0, 1308, 807, 0, 1313, 1314, 0, 793, 1293,
	0, 0, 0, 0, 0, 0, 0, 3194, 329, 0,
	346, 827, 0, 395, 432, 1298, 0, 0, 492, 0,
	545, 549, 0, 638, 1318, 0, 0, 0, 403, 1311,
	832, 0, 838, 1312, 844, 1310, 614, 0, 834, 835,
	840, 334, 1387, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 4764,
	1299, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372,
	1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624,
	1388, 1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 1302,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 3338, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 0, 0, 0, 1343, 0,
	821, 0, 1308, 807, 0, 1313, 1314, 0, 793, 1293,
	0, 0, 0, 0, 0, 0, 0, 3194, 329, 0,
	346, 827, 0, 395, 432, 1298, 0, 0, 492, 0,
	545, 549, 0, 638, 1318, 0, 0, 0, 403, 1311,
	832, 0, 838, 1312, 844, 1310, 614, 0, 834, 835,
	840, 334, 1387, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 4706, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 694,
	1299, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 1364, 0, 631, 1373, 1384, 1381, 1386, 1372,
	1385, 1379, 1060, 678, 1376, 1375, 1389, 1382, 1383, 624,
	1388, 1327, 1380, 1378, 1377, 1374, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 1302,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 3338, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 821, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 346, 827, 3194, 395, 432,
	647, 0, 0, 492, 0, 545, 549, 179, 638, 0,
	0, 0, 0, 403, 0, 832, 0, 838, 0, 844,
	0, 614, 0, 834, 835, 840, 334, 722, 637, 708,
	0, 0, 0, 499, 176, 0, 0, 867, 177, 0,
	0, 342, 0, 0, 0, 0, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 1170, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 1340, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 3424, 3425, 3423, 515,
	513, 0, 480, 537, 694, 0, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 1368, 1370, 1366,
	1362, 1363, 1328, 1329, 1369, 1365, 419, 3430, 0, 631,
	640, 674, 654, 682, 639, 679, 649, 394, 678, 643,
	642, 688, 669, 670, 624, 684, 655, 653, 646, 645,
	641, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 1352, 1330, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 1344,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 1353, 651, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 3416, 459, 1354, 0, 460, 461,
	462, 1334, 1335, 463, 464, 465, 466, 467, 468, 471,
	1367, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 1345, 488, 490,
	491, 1351, 675, 1346, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 1347, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 680, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 1338, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 1348, 592, 593, 1339, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	1349, 604, 1350, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 0, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	0, 0, 0, 1343, 0, 953, 0, 1704, 807, 180,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 3418, 329, 0, 346, 827, 0, 395, 432,
	647, 0, 0, 492, 0, 545, 549, 0, 638, 0,
	0, 5743, 0, 403, 1799, 832, 0, 838, 0, 844,
	1798, 614, 0, 834, 835, 840, 334, 722, 637, 708,
	0, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 1800, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 0, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 0, 480, 537, 694, 0, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 662, 666, 664,
	660, 657, 661, 658, 659, 663, 419, 656, 0, 631,
	640, 674, 654, 682, 639, 679, 649, 394, 678, 643,
	642, 688, 669, 670, 624, 684, 655, 653, 646, 645,
	641, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 644, 826, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	0, 0, 0, 829, 0, 0, 0, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 648,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 650, 651, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 667, 0, 460, 461,
	462, 0, 0, 463, 464, 465, 466, 467, 468, 471,
	668, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 672, 488, 490,
	491, 673, 675, 676, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 677, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 680, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 0, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 683, 592, 593, 0, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	685, 604, 686, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 0, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 690, 691, 692, 693, 695, 696, 697, 698, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5744, 0, 0, 1705, 1706, 5742, 329, 0,
	346, 827, 0, 395, 432, 647, 0, 0, 492, 0,
	545, 549, 0, 638, 0, 0, 0, 0, 403, 0,
	832, 0, 838, 0, 844, 0, 614, 0, 834, 835,
	840, 334, 722, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 867, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 3424, 3425, 3423, 515, 513, 0, 480, 537, 694,
	0, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 3430, 0, 631, 640, 674, 654, 682, 639,
	679, 649, 394, 678, 643, 642, 688, 669, 670, 624,
	684, 655, 653, 646, 645, 641, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 651,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 3416,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 680, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 821, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 346, 827, 3418, 395, 432,
	647, 0, 0, 492, 0, 545, 549, 0, 638, 0,
	0, 0, 0, 403, 0, 832, 0, 838, 0, 844,
	0, 614, 0, 834, 835, 840, 334, 722, 637, 708,
	0, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 1340, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 0, 480, 537, 694, 0, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 1368, 1370, 1366,
	1362, 1363, 1328, 1329, 1369, 1365, 419, 3430, 0, 631,
	640, 674, 654, 682, 639, 679, 649, 394, 678, 643,
	642, 688, 669, 670, 624, 684, 655, 653, 646, 645,
	641, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 1352, 1330, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 1344,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 1353, 651, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 1354, 0, 460, 461,
	462, 1334, 1335, 463, 464, 465, 466, 467, 468, 471,
	1367, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 1345, 488, 490,
	491, 1351, 675, 1346, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 1347, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 680, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 1338, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 1348, 592, 593, 1339, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	1349, 604, 1350, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 0, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	821, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	346, 827, 4923, 395, 432, 647, 0, 0, 492, 0,
	545, 549, 0, 638, 0, 0, 0, 0, 403, 0,
	832, 0, 838, 0, 844, 0, 614, 0, 834, 835,
	840, 334, 722, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 694,
	0, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 3430, 0, 631, 640, 674, 654, 682, 639,
	679, 649, 394, 678, 643, 642, 688, 669, 670, 624,
	684, 655, 653, 646, 645, 641, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 651,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 680, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 821, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 346, 827, 5936, 395, 432,
	647, 0, 0, 492, 0, 545, 549, 0, 638, 0,
	0, 0, 0, 403, 0, 832, 0, 838, 0, 844,
	0, 614, 0, 834, 835, 840, 334, 722, 637, 708,
	0, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 1340, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 0, 480, 537, 694, 0, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 1368, 1370, 1366,
	1362, 1363, 1328, 1329, 1369, 1365, 419, 3430, 0, 631,
	640, 674, 654, 682, 639, 679, 649, 394, 678, 643,
	642, 688, 669, 670, 624, 684, 655, 653, 646, 645,
	641, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 1352, 1330, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	1341, 1331, 1336, 1342, 1332, 1333, 1337, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 1344,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 1353, 651, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 1354, 0, 460, 461,
	462, 1334, 1335, 463, 464, 465, 466, 467, 468, 471,
	1367, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 1345, 488, 490,
	491, 1351, 675, 1346, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 1347, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 680, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 1338, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 1348, 592, 593, 1339, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	1349, 604, 1350, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 0, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 1355, 1356, 1359, 1357, 1358, 1360, 1361, 1371, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	821, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	346, 827, 3560, 395, 432, 647, 0, 0, 492, 0,
	545, 549, 0, 638, 0, 0, 0, 0, 403, 0,
	832, 0, 838, 0, 844, 0, 614, 0, 834, 835,
	840, 334, 722, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 1340,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 3424, 3425, 3423, 515, 513, 0, 480, 537, 694,
	0, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369,
	1365, 419, 3430, 0, 631, 640, 674, 654, 682, 639,
	679, 649, 394, 678, 643, 642, 688, 669, 670, 624,
	684, 655, 653, 646, 645, 641, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	1352, 1330, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332,
	1333, 1337, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 1344, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 1353, 651,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 1354, 0, 460, 461, 462, 1334, 1335, 463, 464,
	465, 466, 467, 468, 471, 1367, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 1345, 488, 490, 491, 1351, 675, 1346, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 1347, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 680, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	1338, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	1348, 592, 593, 1339, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 1349, 604, 1350, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 1355, 1356, 1359, 1357,
	1358, 1360, 1361, 1371, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 0, 0, 0, 1343, 0,
	953, 0, 1704, 807, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 329, 0,
	346, 827, 0, 395, 432, 647, 0, 0, 492, 0,
	545, 549, 0, 638, 0, 0, 1803, 0, 403, 1799,
	832, 0, 838, 0, 844, 1798, 614, 0, 834, 835,
	840, 334, 722, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	1800, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 687, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 0,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 699, 665, 557, 515, 513, 0, 480, 537, 694,
	0, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 662, 666, 664, 660, 657, 661, 658, 659,
	663, 419, 656, 0, 631, 640, 674, 654, 682, 639,
	679, 649, 394, 678, 643, 642, 688, 669, 670, 624,
	684, 655, 653, 646, 645, 641, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	644, 826, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 0, 0, 0, 829, 0,
	0, 0, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 648, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 650, 651,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 667, 0, 460, 461, 462, 0, 0, 463, 464,
	465, 466, 467, 468, 471, 668, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 671, 672, 488, 490, 491, 673, 675, 676, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 677, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 680, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	0, 571, 681, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	683, 592, 593, 0, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 685, 604, 686, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 689, 690, 691, 692, 693,
	695, 696, 697, 698, 635, 636, 652, 503, 497, 453,
	495, 496, 500, 501, 504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 1704, 807, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	1705, 1706, 329, 0, 346, 827, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	1794, 0, 403, 1799, 832, 0, 838, 0, 844, 1798,
	614, 0, 834, 835, 840, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 1800, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 829, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 0,
	1704, 807, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 1705, 1706, 329, 0, 346, 827,
	0, 395, 432, 647, 0, 0, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 1799, 832, 0,
	838, 0, 844, 1798, 614, 0, 834, 835, 840, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 1800, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 826,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 829, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 807, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 0, 0, 1705, 1706,
	329, 0, 346, 827, 0, 395, 432, 647, 0, 0,
	492, 0, 545, 549, 0, 638, 0, 0, 3707, 0,
	403, 1799, 832, 0, 838, 0, 844, 1798, 614, 0,
	834, 835, 840, 334, 722, 637, 708, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 1800, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 0, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 0, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 662, 666, 664, 660, 657, 661,
	658, 659, 663, 419, 656, 0, 631, 640, 674, 654,
	682, 639, 679, 649, 394, 678, 643, 642, 688, 669,
	670, 624, 684, 655, 653, 646, 645, 641, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 644, 826, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 0, 0, 0,
	829, 0, 0, 0, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 648, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	650, 651, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 667, 0, 460, 461, 462, 0, 0,
	463, 464, 465, 466, 467, 468, 471, 668, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 672, 488, 490, 491, 673, 675,
	676, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 677, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 680,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 0, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 683, 592, 593, 0, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 685, 604, 686,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 0,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 690, 691,
	692, 693, 695, 696, 697, 698, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 791, 792, 329, 0, 346, 827, 0, 395,
	432, 647, 0, 0, 492, 0, 545, 549, 179, 638,
	0, 0, 0, 0, 403, 0, 832, 0, 838, 0,
	844, 0, 614, 0, 834, 835, 840, 334, 722, 637,
	708, 0, 0, 0, 499, 176, 0, 0, 0, 177,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 1170, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 0, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 174, 372, 373, 494, 354, 502, 699, 665, 557,
	515, 513, 0, 480, 537, 694, 0, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 662, 666,
	664, 660, 657, 661, 658, 659, 663, 419, 656, 0,
	631, 640, 674, 654, 682, 639, 679, 649, 394, 678,
	643, 642, 688, 669, 670, 624, 684, 655, 653, 646,
	645, 641, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 175, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 644, 826, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 0, 0, 0, 829, 0, 0, 0, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	648, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 650, 651, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 667, 0, 460,
	461, 462, 0, 0, 463, 464, 465, 466, 467, 468,
	471, 668, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 671, 672, 488,
	490, 491, 673, 675, 676, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 677, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 680, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 0, 571, 681, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 683, 592, 593, 0,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 685, 604, 686, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 0, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 689, 690, 691, 692, 693, 695, 696, 697, 698,
	635, 636, 652, 503, 497, 453, 495, 496, 500, 501,
	504, 821, 0, 0, 0, 0, 0, 1173, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 346, 827, 173, 395, 432, 647, 0, 0, 492,
	0, 545, 549, 0, 638, 0, 0, 0, 0, 403,
	0, 832, 0, 838, 0, 844, 0, 614, 0, 834,
	835, 840, 334, 722, 637, 708, 0, 0, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 836, 833, 837, 843, 831, 841, 828, 839,
	0, 536, 470, 687, 563, 341, 387, 374, 416, 458,
	570, 0, 0, 448, 618, 383, 472, 0, 362, 505,
	0, 594, 469, 0, 577, 597, 0, 489, 368, 528,
	584, 585, 825, 830, 0, 846, 0, 372, 373, 494,
	354, 502, 699, 665, 557, 515, 513, 0, 480, 537,
	694, 0, 0, 402, 0, 397, 493, 633, 360, 612,
	531, 498, 452, 560, 589, 399, 384, 385, 428, 530,
	418, 370, 623, 662, 666, 664, 660, 657, 661, 658,
	659, 663, 419, 656, 0, 631, 640, 674, 654, 682,
	639, 679, 649, 394, 678, 643, 642, 688, 669, 670,
	624, 684, 655, 653, 646, 645, 641, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 330, 0,
	331, 332, 333, 335, 336, 337, 824, 338, 339, 340,
	343, 344, 345, 347, 707, 348, 349, 350, 351, 352,
	353, 644, 826, 355, 356, 357, 358, 359, 361, 363,
	364, 365, 366, 367, 369, 371, 0, 0, 0, 829,
	0, 0, 0, 375, 376, 377, 378, 379, 380, 0,
	381, 382, 386, 388, 389, 390, 391, 392, 393, 396,
	0, 398, 400, 0, 401, 404, 0, 405, 406, 407,
	408, 409, 410, 411, 412, 648, 413, 0, 414, 415,
	417, 0, 420, 421, 422, 423, 424, 0, 425, 650,
	651, 426, 427, 429, 430, 431, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 0, 445,
	446, 447, 449, 0, 450, 451, 454, 455, 456, 457,
	0, 459, 667, 0, 460, 461, 462, 0, 0, 463,
	464, 465, 466, 467, 468, 471, 668, 473, 474, 475,
	476, 477, 478, 479, 709, 481, 482, 483, 484, 485,
	486, 487, 671, 672, 488, 490, 491, 673, 675, 676,
	842, 506, 507, 508, 509, 510, 511, 512, 514, 0,
	516, 517, 518, 677, 519, 520, 521, 522, 0, 523,
	524, 525, 526, 527, 529, 532, 533, 534, 535, 0,
	538, 539, 540, 541, 542, 543, 544, 546, 547, 548,
	550, 551, 552, 710, 553, 554, 555, 556, 680, 558,
	559, 711, 561, 562, 564, 565, 566, 567, 568, 569,
	720, 0, 571, 681, 572, 573, 574, 575, 576, 0,
	578, 579, 580, 581, 582, 583, 586, 587, 588, 590,
	591, 683, 592, 593, 0, 595, 596, 845, 598, 599,
	600, 601, 602, 0, 721, 603, 685, 604, 686, 605,
	606, 607, 608, 609, 610, 611, 613, 0, 0, 615,
	616, 617, 619, 620, 621, 622, 625, 626, 627, 628,
	629, 0, 630, 632, 634, 712, 689, 690, 691, 692,
	693, 695, 696, 697, 698, 635, 636, 652, 503, 497,
	453, 495, 496, 500, 501, 504, 316, 0, 0, 0,
	0, 0, 0, 922, 0, 0, 0, 0, 0, 0,
	933, 934, 935, 0, 329, 0, 346, 0, 5639, 395,
	432, 647, 0, 0, 492, 0, 545, 549, 0, 638,
	0, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 334, 722, 637,
	708, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 470, 687, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 0, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 0, 0, 0,
	0, 0, 372, 373, 494, 354, 502, 699, 665, 557,
	515, 513, 0, 480, 537, 694, 0, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 662, 666,
	664, 660, 657, 661, 658, 659, 663, 419, 656, 0,
	631, 640, 674, 654, 682, 639, 679, 649, 394, 678,
	643, 642, 688, 669, 670, 624, 684, 655, 653, 646,
	645, 641, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 0, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 644, 0, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	648, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 650, 651, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 667, 0, 460,
	461, 462, 0, 0, 463, 464, 465, 466, 467, 468,
	471, 668, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 671, 672, 488,
	490, 491, 673, 675, 676, 0, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 677, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 680, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 0, 571, 681, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 683, 592, 593, 0,
	595, 596, 0, 598, 599, 600, 601, 602, 0, 721,
	603, 685, 604, 686, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 0, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 689, 690, 691, 692, 693, 695, 696, 697, 698,
	635, 636, 652, 503, 497, 453, 495, 496, 500, 501,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 930, 931, 932,
	0, 0, 0, 0, 0, 316, 924, 925, 926, 927,
	928, 929, 922, 0, 0, 0, 0, 0, 0, 933,
	934, 935, 0, 329, 0, 346, 0, 0, 395, 432,
	647, 0, 0, 492, 0, 545, 549, 0, 638, 0,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 0, 0, 334, 722, 637, 708,
	0, 0, 0, 5614, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 470, 687, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 0, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 0, 0, 0, 0,
	0, 372, 373, 494, 354, 502, 699, 665, 557, 515,
	513, 0, 480, 537, 694, 0, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 662, 666, 664,
	660, 657, 661, 658, 659, 663, 419, 656, 0, 631,
	640, 674, 654, 682, 639, 679, 649, 394, 678, 643,
	642, 688, 669, 670, 624, 684, 655, 653, 646, 645,
	641, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	0, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 644, 0, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	0, 0, 0, 0, 0, 0, 0, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 648,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 650, 651, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 667, 0, 460, 461,
	462, 0, 0, 463, 464, 465, 466, 467, 468, 471,
	668, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 671, 672, 488, 490,
	491, 673, 675, 676, 0, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 677, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 680, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 0, 571, 681, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 683, 592, 593, 0, 595,
	596, 0, 598, 599, 600, 601, 602, 0, 721, 603,
	685, 604, 686, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 0, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	689, 690, 691, 692, 693, 695, 696, 697, 698, 635,
	636, 652, 503, 497, 453, 495, 496, 500, 501, 504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 930, 931, 932, 0,
	0, 0, 0, 0, 316, 924, 925, 926, 927, 928,
	929, 922, 0, 0, 0, 0, 0, 0, 933, 934,
	935, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 3827, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 3828,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 931, 932, 0, 0,
	0, 0, 0, 316, 924, 925, 926, 927, 928, 929,
	922, 0, 0, 0, 0, 0, 0, 933, 934, 935,
	0, 329, 0, 346, 0, 0, 395, 432, 647, 0,
	0, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 0, 0, 0, 0, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 0, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	1906, 352, 353, 644, 0, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	0, 0, 0, 0, 0, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 1907, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 0, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 0, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 0,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 931, 932, 0, 0, 0,
	0, 0, 316, 924, 925, 926, 927, 928, 929, 922,
	0, 0, 0, 0, 0, 0, 933, 934, 935, 0,
	329, 0, 346, 0, 0, 395, 432, 647, 0, 0,
	492, 0, 545, 549, 0, 638, 0, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 0, 0, 334, 722, 637, 708, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 0, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 0, 0, 0, 0, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 0, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 662, 666, 664, 660, 657, 661,
	658, 659, 663, 419, 656, 0, 631, 640, 674, 654,
	682, 639, 679, 649, 394, 678, 643, 642, 688, 669,
	670, 624, 684, 655, 653, 646, 645, 641, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 0, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 1003,
	352, 353, 644, 0, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 648, 1004, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	650, 651, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 667, 0, 460, 461, 462, 0, 0,
	463, 464, 465, 466, 467, 468, 471, 668, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 672, 488, 490, 491, 673, 675,
	676, 0, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 677, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 680,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 0, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 683, 592, 593, 0, 595, 596, 0, 598,
	599, 600, 601, 602, 0, 721, 603, 685, 604, 686,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 0,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 690, 691,
	692, 693, 695, 696, 697, 698, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 931, 932, 0, 0, 0, 0,
	0, 316, 924, 925, 926, 927, 928, 929, 922, 0,
	0, 0, 0, 0, 0, 933, 934, 935, 0, 329,
	0, 346, 0, 0, 395, 432, 647, 0, 0, 492,
	0, 545, 549, 0, 638, 0, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	0, 0, 334, 722, 637, 708, 0, 0, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 470, 687, 563, 341, 387, 374, 416, 458,
	570, 0, 0, 448, 618, 383, 472, 0, 362, 505,
	0, 594, 469, 0, 577, 597, 0, 489, 368, 528,
	584, 585, 0, 0, 0, 0, 0, 372, 373, 494,
	354, 502, 699, 665, 557, 515, 513, 0, 480, 537,
	694, 0, 0, 402, 0, 397, 493, 633, 360, 612,
	531, 498, 452, 560, 589, 399, 384, 385, 428, 530,
	418, 370, 623, 662, 666, 664, 660, 657, 661, 658,
	659, 663, 419, 656, 0, 631, 640, 674, 654, 682,
	639, 679, 649, 394, 678, 643, 642, 688, 669, 670,
	624, 684, 655, 653, 646, 645, 641, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 330, 0,
	331, 332, 333, 335, 336, 337, 0, 338, 339, 340,
	343, 344, 345, 347, 707, 348, 349, 350, 918, 352,
	353, 644, 0, 355, 356, 357, 358, 359, 361, 363,
	364, 365, 366, 367, 369, 371, 0, 0, 0, 0,
	0, 0, 0, 375, 376, 377, 378, 379, 380, 0,
	381, 382, 386, 388, 389, 390, 391, 392, 393, 396,
	0, 398, 400, 0, 401, 404, 0, 405, 406, 407,
	408, 409, 410, 411, 412, 648, 919, 0, 414, 415,
	417, 0, 420, 421, 422, 423, 424, 0, 425, 650,
	651, 426, 427, 429, 430, 431, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 0, 445,
	446, 447, 449, 0, 450, 451, 454, 455, 456, 457,
	0, 459, 667, 0, 460, 461, 462, 0, 0, 463,
	464, 465, 466, 467, 468, 471, 668, 473, 474, 475,
	476, 477, 478, 479, 709, 481, 482, 483, 484, 485,
	486, 487, 671, 672, 488, 490, 491, 673, 675, 676,
	0, 506, 507, 508, 509, 510, 511, 512, 514, 0,
	516, 517, 518, 677, 519, 520, 521, 522, 0, 523,
	524, 525, 526, 527, 529, 532, 533, 534, 535, 0,
	538, 539, 540, 541, 542, 543, 544, 546, 547, 548,
	550, 551, 552, 710, 553, 554, 555, 556, 680, 558,
	559, 711, 561, 562, 564, 565, 566, 567, 568, 569,
	720, 0, 571, 681, 572, 573, 574, 575, 576, 0,
	578, 579, 580, 581, 582, 583, 586, 587, 588, 590,
	591, 683, 592, 593, 0, 595, 596, 0, 598, 599,
	600, 601, 602, 0, 721, 603, 685, 604, 686, 605,
	606, 607, 608, 609, 610, 611, 613, 0, 0, 615,
	616, 617, 619, 620, 621, 622, 625, 626, 627, 628,
	629, 0, 630, 632, 634, 712, 689, 690, 691, 692,
	693, 695, 696, 697, 698, 635, 636, 652, 503, 497,
	453, 495, 496, 500, 501, 504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 930, 931, 932, 0, 0, 0, 0, 0,
	0, 924, 925, 926, 927, 928, 929, 329, 0, 346,
	827, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 832,
	0, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 1340, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 1368, 1370, 1366, 1362, 1363, 1328, 1329, 1369, 1365,
	419, 3430, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 1352,
	1330, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 1341, 1331, 1336, 1342, 1332, 1333,
	1337, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 1344, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 1353, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	1354, 0, 460, 461, 462, 1334, 1335, 463, 464, 465,
	466, 467, 468, 471, 1367, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 1345, 488, 490, 491, 1351, 675, 1346, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 1347, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 1338,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 1348,
	592, 593, 1339, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 1349, 604, 1350, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 1355, 1356, 1359, 1357, 1358,
	1360, 1361, 1371, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 953, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 827, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 832, 0, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 174,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 175, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 829, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 1173, 0, 793, 0, 0,
	0, 0, 0, 0, 0, 0, 785, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	789, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 788,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 780, 781, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 782, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 787, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	786, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 778, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 779, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 783, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 1308, 807, 0, 1313, 1314,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 791,
	792, 329, 0, 346, 827, 0, 395, 432, 647, 0,
	0, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 1311, 832, 0, 838, 1312, 844, 1310, 614,
	0, 834, 835, 840, 334, 1387, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 6225, 0, 631, 1373, 1384,
	1381, 1386, 1372, 1385, 1379, 1060, 678, 1376, 1375, 1389,
	1382, 1383, 624, 1388, 1327, 1380, 1378, 1377, 1374, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 826, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	0, 829, 0, 0, 0, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 0, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 346, 0,
	0, 395, 432, 647, 0, 0, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 0,
	0, 0, 0, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 0, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 0,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 0, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 0, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 346, 0, 0, 395, 432, 647, 0,
	6067, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 0, 0, 0, 0, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 0, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 0, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	0, 0, 0, 0, 0, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 0, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 0, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 0,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 346, 0,
	0, 395, 432, 647, 0, 5925, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 0,
	0, 0, 0, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 0, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 0,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 0, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 0, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 346, 0, 0, 395, 432, 647, 0,
	5922, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 0, 0, 0, 0, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 0, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 0, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	0, 0, 0, 0, 0, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 0, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 0, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 0,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 346, 0,
	0, 395, 432, 647, 0, 803, 492, 0, 545, 549,
	179, 638, 0, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 334,
	722, 637, 708, 0, 0, 0, 499, 176, 0, 0,
	0, 177, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 470,
	1170, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 0,
	0, 0, 0, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 0, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 0,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 0, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 0, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 953, 0, 0, 807, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 346, 827, 173, 395, 432, 647, 0,
	0, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 1799, 832, 0, 838, 0, 844, 1798, 614,
	0, 834, 835, 840, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 1800, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 826, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	0, 829, 0, 0, 0, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 0, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 346, 827,
	0, 395, 432, 647, 0, 0, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 0, 832, 0,
	838, 0, 844, 0, 614, 0, 834, 835, 840, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 3896, 0, 0, 0, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 826,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 950, 829, 0, 0, 951,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 952, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 346, 827, 0, 395, 432, 647, 0,
	0, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 0, 832, 0, 838, 0, 844, 0, 614,
	0, 834, 835, 840, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 2713, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 826, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	950, 829, 0, 0, 951, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 952, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 346, 0,
	0, 395, 432, 647, 0, 0, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	867, 2729, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 0,
	0, 0, 0, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 0, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 0,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 2733, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 0, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 2730, 596, 0, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1024, 329, 0, 346, 827, 1453, 395, 432, 647, 0,
	0, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 0, 832, 0, 838, 0, 844, 0, 614,
	0, 834, 835, 840, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 826, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	950, 829, 0, 0, 951, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 1022, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 952, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1020, 329, 0, 346, 827,
	0, 395, 432, 647, 0, 0, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 0, 832, 0,
	838, 0, 844, 0, 614, 0, 834, 835, 840, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 826,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 950, 829, 0, 0, 951,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 952, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 346, 827, 0, 395, 432, 647, 0,
	0, 492, 0, 545, 549, 0, 638, 0, 0, 0,
	0, 403, 0, 832, 0, 838, 0, 844, 0, 614,
	0, 834, 835, 840, 334, 722, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 687, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 699, 665, 557, 515, 513, 0,
	480, 537, 694, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 662, 666, 664, 660, 657,
	661, 658, 659, 663, 419, 656, 0, 631, 640, 674,
	654, 682, 639, 679, 649, 394, 678, 643, 642, 688,
	669, 670, 624, 684, 655, 653, 646, 645, 641, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 644, 826, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	950, 829, 0, 0, 951, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 648, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 650, 651, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 667, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 668, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 671, 672, 488, 490, 491, 673,
	675, 676, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 677, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	680, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 952, 571, 681, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 683, 592, 593, 0, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 685, 604,
	686, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 689, 690,
	691, 692, 693, 695, 696, 697, 698, 635, 636, 652,
	503, 497, 453, 495, 496, 500, 501, 504, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 4175, 346, 0,
	0, 395, 432, 647, 0, 0, 492, 0, 545, 549,
	0, 638, 0, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 334,
	722, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 470,
	687, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 0,
	0, 0, 0, 0, 372, 373, 494, 354, 502, 699,
	665, 557, 515, 513, 0, 480, 537, 694, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	662, 666, 664, 660, 657, 661, 658, 659, 663, 419,
	656, 0, 631, 640, 674, 654, 682, 639, 679, 649,
	394, 678, 643, 642, 688, 669, 670, 624, 684, 655,
	653, 646, 645, 641, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 0, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 644, 0,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 0, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 648, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 650, 651, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 667,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 668, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 671,
	672, 488, 490, 491, 673, 675, 676, 0, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	677, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 680, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	681, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 683, 592,
	593, 0, 595, 596, 0, 598, 599, 600, 601, 602,
	0, 721, 603, 685, 604, 686, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 635, 636, 652, 503, 497, 453, 495, 496,
	500, 501, 504, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 827, 1276, 395, 1104, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 832, 0, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 950, 829, 0, 0, 951, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 952, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	827, 0, 395, 1102, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 832,
	0, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 950, 829, 0, 0,
	951, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 952,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 827, 0, 395, 1099, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 832, 0, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 950, 829, 0, 0, 951, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 1097, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 952, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	827, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 832,
	0, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 950, 829, 0, 0,
	951, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 946, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 952,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 953, 0, 0, 807, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 827, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	1790, 0, 403, 0, 832, 0, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 829, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 2633, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 953,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	827, 4759, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 832,
	0, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 829, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 4055, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 827, 1399, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 832, 0, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 829, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	827, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 832,
	0, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 829, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 3485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 827, 0, 395, 432, 0,
	0, 0, 492, 0, 545, 549, 0, 0, 0, 0,
	0, 0, 403, 0, 832, 2840, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 1070, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 0, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 0, 0, 557, 515, 513,
	0, 480, 537, 0, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 419, 1072, 0, 631, 1075,
	1063, 1055, 1056, 1057, 1058, 1059, 1060, 0, 1077, 1078,
	1079, 1080, 1081, 624, 1069, 1071, 1054, 1061, 1062, 1064,
	2843, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 0, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 829, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 0, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 0, 0, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 0, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 0,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 0, 0, 488, 490, 491,
	0, 2841, 0, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 0, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 0, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 2846, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 0, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 0,
	604, 0, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 635, 636,
	2842, 503, 497, 453, 495, 496, 500, 501, 504, 3480,
	329, 0, 346, 0, 0, 395, 2757, 647, 0, 0,
	492, 0, 545, 549, 0, 638, 0, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 3478, 0, 614, 0,
	0, 0, 0, 334, 722, 637, 708, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 0, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 0, 0, 2761, 0, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 0, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 662, 666, 664, 660, 657, 661,
	658, 659, 663, 419, 656, 0, 631, 640, 674, 654,
	682, 639, 679, 649, 394, 678, 643, 642, 688, 669,
	670, 624, 684, 655, 653, 646, 645, 641, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 0, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 644, 0, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 2767, 406,
	407, 408, 409, 410, 411, 412, 648, 413, 0, 414,
	415, 417, 2766, 420, 421, 422, 423, 424, 0, 425,
	650, 651, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 667, 0, 460, 461, 462, 0, 0,
	463, 464, 465, 466, 467, 468, 471, 668, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 672, 488, 490, 491, 673, 675,
	676, 0, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 677, 519, 520, 521, 522, 2765,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 680,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 0, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 683, 592, 593, 0, 595, 596, 0, 598,
	599, 600, 601, 602, 0, 721, 603, 685, 604, 686,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 2764,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 690, 691,
	692, 693, 695, 696, 697, 698, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 316, 0, 0,
	0, 2763, 2758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 0, 346, 0, 0,
	395, 432, 647, 0, 0, 492, 0, 545, 549, 0,
	638, 0, 0, 0, 0, 403, 0, 0, 0, 3442,
	0, 0, 0, 614, 0, 0, 0, 0, 334, 722,
	637, 708, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 470, 687,
	563, 341, 387, 374, 416, 458, 570, 0, 0, 448,
	618, 383, 472, 0, 362, 505, 0, 594, 469, 0,
	577, 597, 0, 489, 368, 528, 584, 585, 0, 0,
	2761, 0, 0, 372, 373, 494, 354, 502, 699, 665,
	557, 515, 513, 0, 480, 537, 694, 0, 0, 402,
	0, 397, 493, 633, 360, 612, 531, 498, 452, 560,
	589, 399, 384, 385, 428, 530, 418, 370, 623, 662,
	666, 664, 660, 657, 661, 658, 659, 663, 419, 656,
	0, 631, 640, 674, 654, 682, 639, 679, 649, 394,
	678, 643, 642, 688, 669, 670, 624, 684, 655, 653,
	646, 645, 641, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 330, 0, 331, 332, 333, 335,
	336, 337, 0, 338, 339, 340, 343, 344, 345, 347,
	707, 348, 349, 350, 351, 352, 353, 644, 0, 355,
	356, 357, 358, 359, 361, 363, 364, 365, 366, 367,
	369, 371, 0, 0, 0, 0, 0, 0, 0, 375,
	376, 377, 378, 379, 380, 0, 381, 382, 386, 388,
	389, 390, 391, 392, 393, 396, 0, 398, 400, 0,
	401, 404, 0, 2767, 406, 407, 408, 409, 410, 411,
	412, 648, 413, 0, 414, 415, 417, 2766, 420, 421,
	422, 423, 424, 0, 425, 650, 651, 426, 427, 429,
	430, 431, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 0, 445, 446, 447, 449, 0,
	450, 451, 454, 455, 456, 457, 0, 459, 667, 0,
	460, 461, 462, 0, 0, 463, 464, 465, 466, 467,
	468, 471, 668, 473, 474, 475, 476, 477, 478, 479,
	709, 481, 482, 483, 484, 485, 486, 487, 671, 672,
	488, 490, 491, 673, 675, 676, 0, 506, 507, 508,
	509, 510, 511, 512, 514, 0, 516, 517, 518, 677,
	519, 520, 521, 522, 2765, 523, 524, 525, 526, 527,
	529, 532, 533, 534, 535, 0, 538, 539, 540, 541,
	542, 543, 544, 546, 547, 548, 550, 551, 552, 710,
	553, 554, 555, 556, 680, 558, 559, 711, 561, 562,
	564, 565, 566, 567, 568, 569, 720, 0, 571, 681,
	572, 573, 574, 575, 576, 0, 578, 579, 580, 581,
	582, 583, 586, 587, 588, 590, 591, 683, 592, 593,
	0, 595, 596, 0, 598, 599, 600, 601, 602, 0,
	721, 603, 685, 604, 686, 605, 606, 607, 608, 609,
	610, 611, 613, 0, 2764, 615, 616, 617, 619, 620,
	621, 622, 625, 626, 627, 628, 629, 0, 630, 632,
	634, 712, 689, 690, 691, 692, 693, 695, 696, 697,
	698, 635, 636, 652, 503, 497, 453, 495, 496, 500,
	501, 504, 316, 0, 0, 0, 2763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 346, 0, 0, 395, 432, 647, 0, 0,
	492, 0, 545, 549, 0, 638, 0, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 0, 0, 334, 722, 637, 708, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 470, 687, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 0, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 0, 0, 2761, 0, 0, 372, 373,
	494, 354, 502, 699, 665, 557, 515, 513, 0, 480,
	537, 694, 0, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 662, 666, 664, 660, 657, 661,
	658, 659, 663, 419, 656, 0, 631, 640, 674, 654,
	682, 639, 679, 649, 394, 678, 643, 642, 688, 669,
	670, 624, 684, 655, 653, 646, 645, 641, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 0, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 644, 0, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 2767, 406,
	407, 408, 409, 410, 411, 412, 648, 413, 0, 414,
	415, 417, 2766, 420, 421, 422, 423, 424, 0, 425,
	650, 651, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 667, 0, 460, 461, 462, 0, 0,
	463, 464, 465, 466, 467, 468, 471, 668, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 671, 672, 488, 490, 491, 673, 675,
	676, 0, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 677, 519, 520, 521, 522, 2765,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 680,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 0, 571, 681, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 683, 592, 593, 0, 595, 596, 0, 598,
	599, 600, 601, 602, 0, 721, 603, 685, 604, 686,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 2764,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 689, 690, 691,
	692, 693, 695, 696, 697, 698, 635, 636, 652, 503,
	497, 453, 495, 496, 500, 501, 504, 1073, 0, 0,
	0, 2763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 0, 346, 827, 0,
	395, 432, 0, 0, 0, 492, 0, 545, 549, 0,
	0, 0, 0, 0, 0, 403, 0, 832, 2840, 838,
	0, 844, 0, 614, 0, 834, 835, 840, 334, 1070,
	637, 708, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 836, 833,
	837, 843, 831, 841, 828, 839, 0, 536, 470, 0,
	563, 341, 387, 374, 416, 458, 570, 0, 0, 448,
	618, 383, 472, 0, 362, 505, 0, 594, 469, 0,
	577, 597, 0, 489, 368, 528, 584, 585, 825, 830,
	0, 846, 0, 372, 373, 494, 354, 502, 0, 0,
	557, 515, 513, 0, 480, 537, 0, 0, 0, 402,
	0, 397, 493, 633, 360, 612, 531, 498, 452, 560,
	589, 399, 384, 385, 428, 530, 418, 370, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 419, 1072,
	0, 631, 1075, 1063, 1055, 1056, 1057, 1058, 1059, 1060,
	0, 1077, 1078, 1079, 1080, 1081, 624, 1069, 1071, 1054,
	1061, 1062, 1064, 2843, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 330, 0, 331, 332, 333, 335,
	336, 337, 824, 338, 339, 340, 343, 344, 345, 347,
	707, 348, 349, 350, 351, 352, 353, 0, 826, 355,
	356, 357, 358, 359, 361, 363, 364, 365, 366, 367,
	369, 371, 0, 0, 0, 829, 0, 0, 0, 375,
	376, 377, 378, 379, 380, 0, 381, 382, 386, 388,
	389, 390, 391, 392, 393, 396, 0, 398, 400, 0,
	401, 404, 0, 405, 406, 407, 408, 409, 410, 411,
	412, 0, 413, 0, 414, 415, 417, 0, 420, 421,
	422, 423, 424, 0, 425, 0, 0, 426, 427, 429,
	430, 431, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 0, 445, 446, 447, 449, 0,
	450, 451, 454, 455, 456, 457, 0, 459, 0, 0,
	460, 461, 462, 0, 0, 463, 464, 465, 466, 467,
	468, 471, 0, 473, 474, 475, 476, 477, 478, 479,
	709, 481, 482, 483, 484, 485, 486, 487, 0, 0,
	488, 490, 491, 0, 2841, 0, 842, 506, 507, 508,
	509, 510, 511, 512, 514, 0, 516, 517, 518, 0,
	519, 520, 521, 522, 0, 523, 524, 525, 526, 527,
	529, 532, 533, 534, 535, 0, 538, 539, 540, 541,
	542, 543, 544, 546, 547, 548, 550, 551, 552, 710,
	553, 554, 555, 556, 0, 558, 559, 711, 561, 562,
	564, 565, 566, 567, 568, 569, 720, 0, 571, 2846,
	572, 573, 574, 575, 576, 0, 578, 579, 580, 581,
	582, 583, 586, 587, 588, 590, 591, 0, 592, 593,
	0, 595, 596, 845, 598, 599, 600, 601, 602, 0,
	721, 603, 0, 604, 0, 605, 606, 607, 608, 609,
	610, 611, 613, 0, 0, 615, 616, 617, 619, 620,
	621, 622, 625, 626, 627, 628, 629, 0, 630, 632,
	634, 712, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 635, 636, 2842, 503, 497, 453, 495, 496, 500,
	501, 504, 0, 0, 329, 0, 346, 827, 0, 395,
	432, 0, 0, 0, 492, 0, 545, 549, 0, 0,
	0, 0, 0, 0, 403, 3465, 832, 2840, 838, 0,
	844, 0, 614, 0, 834, 835, 840, 334, 1070, 637,
	708, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 0, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 0, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 372, 373, 494, 354, 502, 0, 0, 557,
	515, 513, 0, 480, 537, 0, 0, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 1072, 0,
	631, 1075, 1063, 1055, 1056, 1057, 1058, 1059, 1060, 0,
	1077, 1078, 1079, 1080, 1081, 624, 1069, 1071, 1054, 1061,
	1062, 1064, 2843, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 0, 826, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 0, 0, 0, 829, 0, 0, 0, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	0, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 0, 0, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 0, 0, 460,
	461, 462, 0, 0, 463, 464, 465, 466, 467, 468,
	471, 0, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 0, 0, 488,
	490, 491, 0, 2841, 0, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 0, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 0, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 0, 571, 2846, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 0, 592, 593, 0,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 0, 604, 0, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 0, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	635, 636, 2842, 503, 497, 453, 495, 496, 500, 501,
	504, 730, 735, 0, 346, 0, 734, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 2835, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 732, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	3836, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 733, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 735, 0, 346,
	0, 734, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 732, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 738, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 733, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 735, 0, 346, 0, 734, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 732, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 733, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2726, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 867, 2729, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 2733, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 2730, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1837, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 1823, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 1829, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 1830, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 1825, 420, 1826, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 1831, 1832, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 1833, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 1827, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 1828,
	556, 680, 558, 559, 1834, 561, 562, 564, 565, 1824,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 1835,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 1836, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 867, 2729, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 2733, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 2730, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 346, 0, 734, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 732, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 733, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3619, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 3620, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3610, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 3611, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 329, 0, 346,
	0, 0, 395, 976, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 867, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 867, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 5306, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 4175, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 4906, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 4887, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 4187, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	4354, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 3218, 0, 0, 0, 499, 0, 0,
	0, 0, 3221, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 3219, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 3217, 599, 3216, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 3220, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 706, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1555, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 867, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1553, 329, 0, 346, 0, 0, 395, 1552, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1220, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 309, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 1119,
	338, 339, 340, 343, 344, 345, 347, 310, 348, 1118,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 312, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 313, 553, 554, 555,
	556, 680, 558, 559, 311, 561, 562, 564, 565, 566,
	567, 568, 569, 1116, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 305, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 314, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 329, 0, 346,
	0, 0, 395, 979, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 800, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 799, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 796, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 760, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 762, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 761, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 706, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 702, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 704, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 703, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 6199, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 4823, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 3945, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 3809, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 309, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 310, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 312, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 313, 553, 554, 555, 556, 680, 558, 559, 311,
	561, 562, 564, 565, 566, 567, 568, 569, 1116, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 305, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 314, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 309, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 310, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 312, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 313, 553, 554, 555,
	556, 680, 558, 559, 311, 561, 562, 564, 565, 566,
	567, 568, 569, 2886, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 2887, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 314, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 3712, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 3605, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 3603, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 3589, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 309, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 310, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 312, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 313, 553, 554, 555, 556, 680, 558, 559, 2926,
	561, 562, 564, 565, 566, 567, 568, 569, 2886, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 2887, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 314, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 309, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 310, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 312, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 313, 553, 554, 555,
	556, 680, 558, 559, 2915, 561, 562, 564, 565, 566,
	567, 568, 569, 2886, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 2887, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 314, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 309, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 310, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 312, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 313, 553, 554, 555, 556, 680, 558, 559, 2885,
	561, 562, 564, 565, 566, 567, 568, 569, 2886, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 2887, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 314, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 309, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 310, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 312, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 313, 553, 554, 555,
	556, 680, 558, 559, 311, 561, 562, 564, 565, 566,
	567, 568, 569, 1116, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 2858,
	0, 598, 599, 600, 601, 602, 0, 305, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 314, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 2717, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 2656, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 1816, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1765, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1763, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1759, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1470, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1430, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1425, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 1419, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 0, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1095, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1093, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1091, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1040, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1036, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1033, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 1027, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 1008, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 984, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 982, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 963, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 945, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 941, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 939, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 913, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 721, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 722, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 680, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 725, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 557, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 723, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	0, 0, 395, 432, 647, 0, 0, 492, 0, 545,
	549, 0, 638, 0, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	334, 309, 637, 303, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	470, 687, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	0, 0, 0, 0, 0, 372, 373, 494, 354, 502,
	699, 665, 557, 515, 513, 0, 480, 537, 694, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 662, 666, 664, 660, 657, 661, 658, 659, 663,
	419, 656, 0, 631, 640, 674, 654, 682, 639, 679,
	649, 394, 678, 643, 642, 688, 669, 670, 624, 684,
	655, 653, 646, 645, 641, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 0, 338, 339, 340, 343, 344,
	345, 347, 310, 348, 349, 350, 351, 352, 353, 644,
	0, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 648, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 650, 651, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	667, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 668, 473, 474, 475, 476, 477,
	478, 479, 312, 481, 482, 483, 484, 485, 486, 487,
	671, 672, 488, 490, 491, 673, 675, 676, 0, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 677, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 313, 553, 554, 555, 556, 680, 558, 559, 311,
	561, 562, 564, 565, 566, 567, 568, 569, 304, 0,
	571, 681, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 683,
	592, 593, 0, 595, 596, 0, 598, 599, 600, 601,
	602, 0, 305, 603, 685, 604, 686, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 314, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 635, 636, 652, 503, 497, 453, 495,
	496, 500, 501, 504, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 346, 0, 0, 395, 432, 647,
	0, 0, 492, 0, 545, 549, 0, 638, 0, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 0, 0, 334, 722, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 470, 687, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 0, 0, 0, 0, 0,
	372, 373, 494, 354, 502, 699, 665, 0, 515, 513,
	0, 480, 537, 694, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 662, 666, 664, 660,
	657, 661, 658, 659, 663, 419, 656, 0, 631, 640,
	674, 654, 682, 639, 679, 649, 394, 678, 643, 642,
	688, 669, 670, 624, 684, 655, 653, 646, 645, 641,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 0,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 644, 0, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 0, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 648, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 650, 651, 0, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 667, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 668,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 671, 672, 488, 490, 491,
	673, 675, 676, 0, 506, 507, 508, 509, 510, 511,
	0, 514, 0, 516, 517, 518, 677, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 0, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 680, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 681, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 683, 592, 593, 0, 595, 596,
	0, 598, 599, 600, 601, 602, 0, 721, 603, 685,
	604, 686, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 635, 636,
	652, 503, 497, 453, 495, 496, 500, 501, 504, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 346,
	827, 0, 395, 432, 0, 0, 0, 492, 0, 545,
	549, 0, 0, 0, 0, 0, 0, 403, 0, 832,
	2840, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 1070, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 0, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	0, 0, 557, 515, 513, 0, 480, 537, 0, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 1072, 0, 631, 1075, 1063, 1055, 1056, 1057, 1058,
	1059, 1060, 0, 1077, 1078, 1079, 1080, 1081, 624, 1069,
	1071, 1054, 1061, 1062, 1064, 2843, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 0,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 829, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 0, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 0, 0, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	0, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 0, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	0, 0, 488, 490, 491, 0, 2841, 0, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 0, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 0, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 2846, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 0,
	592, 593, 0, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 0, 604, 0, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 635, 636, 2842, 503, 497, 453, 495,
	496, 500, 501, 504, 329, 0, 346, 827, 0, 395,
	432, 0, 0, 0, 492, 0, 545, 549, 0, 0,
	0, 0, 0, 0, 403, 0, 832, 0, 838, 2891,
	844, 0, 614, 0, 834, 835, 840, 334, 1070, 637,
	708, 0, 0, 0, 499, 0, 0, 0, 0, 4223,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 0, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 0, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 372, 373, 494, 354, 502, 0, 0, 557,
	515, 513, 0, 480, 537, 0, 0, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 1072, 0,
	631, 1075, 1063, 1055, 1056, 1057, 1058, 1059, 1060, 0,
	1077, 1078, 1079, 1080, 1081, 624, 1069, 1071, 1054, 1061,
	1062, 1064, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 0, 826, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 0, 0, 0, 829, 0, 0, 0, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	0, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 0, 0, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 0, 0, 460,
	461, 462, 0, 0, 463, 464, 465, 466, 467, 468,
	471, 0, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 0, 0, 488,
	490, 491, 0, 0, 0, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 0, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 0, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 0, 571, 2846, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 0, 592, 593, 0,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 0, 604, 0, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 0, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	635, 636, 0, 503, 497, 453, 495, 496, 500, 501,
	504, 329, 0, 346, 827, 0, 395, 432, 0, 0,
	0, 492, 0, 545, 549, 0, 0, 0, 0, 0,
	0, 403, 0, 832, 0, 838, 0, 844, 0, 614,
	0, 834, 835, 840, 334, 1070, 637, 708, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 836, 833, 837, 843, 831, 841,
	828, 839, 0, 536, 470, 0, 563, 341, 387, 374,
	416, 458, 570, 0, 0, 448, 618, 383, 472, 0,
	362, 505, 0, 594, 469, 0, 577, 597, 0, 489,
	368, 528, 584, 585, 825, 830, 0, 846, 0, 372,
	373, 494, 354, 502, 0, 0, 557, 515, 513, 6233,
	480, 537, 0, 0, 0, 402, 0, 397, 493, 633,
	360, 612, 531, 498, 452, 560, 589, 399, 384, 385,
	428, 530, 418, 370, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 419, 1072, 0, 631, 1075, 1063,
	1055, 1056, 1057, 1058, 1059, 1060, 0, 1077, 1078, 1079,
	1080, 1081, 624, 1069, 1071, 1054, 1061, 1062, 1064, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	330, 0, 331, 332, 333, 335, 336, 337, 824, 338,
	339, 340, 343, 344, 345, 347, 707, 348, 349, 350,
	351, 352, 353, 0, 826, 355, 356, 357, 358, 359,
	361, 363, 364, 365, 366, 367, 369, 371, 0, 0,
	0, 829, 0, 0, 0, 375, 376, 377, 378, 379,
	380, 0, 381, 382, 386, 388, 389, 390, 391, 392,
	393, 396, 0, 398, 400, 0, 401, 404, 0, 405,
	406, 407, 408, 409, 410, 411, 412, 0, 413, 0,
	414, 415, 417, 0, 420, 421, 422, 423, 424, 0,
	425, 0, 0, 426, 427, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 449, 0, 450, 451, 454, 455,
	456, 457, 0, 459, 0, 0, 460, 461, 462, 0,
	0, 463, 464, 465, 466, 467, 468, 471, 0, 473,
	474, 475, 476, 477, 478, 479, 709, 481, 482, 483,
	484, 485, 486, 487, 0, 0, 488, 490, 491, 0,
	0, 0, 842, 506, 507, 508, 509, 510, 511, 512,
	514, 0, 516, 517, 518, 0, 519, 520, 521, 522,
	0, 523, 524, 525, 526, 527, 529, 532, 533, 534,
	535, 0, 538, 539, 540, 541, 542, 543, 544, 546,
	547, 548, 550, 551, 552, 710, 553, 554, 555, 556,
	0, 558, 559, 711, 561, 562, 564, 565, 566, 567,
	568, 569, 720, 0, 571, 1045, 572, 573, 574, 575,
	576, 0, 578, 579, 580, 581, 582, 583, 586, 587,
	588, 590, 591, 0, 592, 593, 0, 595, 596, 845,
	598, 599, 600, 601, 602, 0, 721, 603, 0, 604,
	0, 605, 606, 607, 608, 609, 610, 611, 613, 0,
	0, 615, 616, 617, 619, 620, 621, 622, 625, 626,
	627, 628, 629, 0, 630, 632, 634, 712, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 635, 636, 0,
	503, 497, 453, 495, 496, 500, 501, 504, 329, 0,
	346, 827, 0, 395, 432, 0, 0, 0, 492, 0,
	545, 549, 0, 0, 0, 0, 0, 0, 403, 0,
	832, 0, 838, 0, 844, 0, 614, 0, 834, 835,
	840, 334, 1070, 637, 708, 0, 0, 0, 499, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 836, 833, 837, 843, 831, 841, 828, 839, 0,
	536, 470, 0, 563, 341, 387, 374, 416, 458, 570,
	0, 0, 448, 618, 383, 472, 0, 362, 505, 0,
	594, 469, 0, 577, 597, 0, 489, 368, 528, 584,
	585, 825, 830, 0, 846, 0, 372, 373, 494, 354,
	502, 0, 0, 557, 515, 513, 5902, 480, 537, 0,
	0, 0, 402, 0, 397, 493, 633, 360, 612, 531,
	498, 452, 560, 589, 399, 384, 385, 428, 530, 418,
	370, 623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 419, 1072, 0, 631, 1075, 1063, 1055, 1056, 1057,
	1058, 1059, 1060, 0, 1077, 1078, 1079, 1080, 1081, 624,
	1069, 1071, 1054, 1061, 1062, 1064, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 330, 0, 331,
	332, 333, 335, 336, 337, 824, 338, 339, 340, 343,
	344, 345, 347, 707, 348, 349, 350, 351, 352, 353,
	0, 826, 355, 356, 357, 358, 359, 361, 363, 364,
	365, 366, 367, 369, 371, 0, 0, 0, 829, 0,
	0, 0, 375, 376, 377, 378, 379, 380, 0, 381,
	382, 386, 388, 389, 390, 391, 392, 393, 396, 0,
	398, 400, 0, 401, 404, 0, 405, 406, 407, 408,
	409, 410, 411, 412, 0, 413, 0, 414, 415, 417,
	0, 420, 421, 422, 423, 424, 0, 425, 0, 0,
	426, 427, 429, 430, 431, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 0, 445, 446,
	447, 449, 0, 450, 451, 454, 455, 456, 457, 0,
	459, 0, 0, 460, 461, 462, 0, 0, 463, 464,
	465, 466, 467, 468, 471, 0, 473, 474, 475, 476,
	477, 478, 479, 709, 481, 482, 483, 484, 485, 486,
	487, 0, 0, 488, 490, 491, 0, 0, 0, 842,
	506, 507, 508, 509, 510, 511, 512, 514, 0, 516,
	517, 518, 0, 519, 520, 521, 522, 0, 523, 524,
	525, 526, 527, 529, 532, 533, 534, 535, 0, 538,
	539, 540, 541, 542, 543, 544, 546, 547, 548, 550,
	551, 552, 710, 553, 554, 555, 556, 0, 558, 559,
	711, 561, 562, 564, 565, 566, 567, 568, 569, 720,
	0, 571, 1045, 572, 573, 574, 575, 576, 0, 578,
	579, 580, 581, 582, 583, 586, 587, 588, 590, 591,
	0, 592, 593, 0, 595, 596, 845, 598, 599, 600,
	601, 602, 0, 721, 603, 0, 604, 0, 605, 606,
	607, 608, 609, 610, 611, 613, 0, 0, 615, 616,
	617, 619, 620, 621, 622, 625, 626, 627, 628, 629,
	0, 630, 632, 634, 712, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 635, 636, 0, 503, 497, 453,
	495, 496, 500, 501, 504, 329, 0, 346, 827, 0,
	395, 432, 0, 0, 0, 492, 0, 545, 549, 0,
	0, 0, 0, 0, 0, 403, 0, 832, 0, 838,
	0, 844, 0, 614, 0, 834, 835, 840, 334, 1070,
	637, 708, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 836, 833,
	837, 843, 831, 841, 828, 839, 0, 536, 470, 0,
	563, 341, 387, 374, 416, 458, 570, 0, 0, 448,
	618, 383, 472, 0, 362, 505, 0, 594, 469, 0,
	577, 597, 0, 489, 368, 528, 584, 585, 825, 830,
	0, 846, 0, 372, 373, 494, 354, 502, 0, 0,
	557, 515, 513, 0, 480, 537, 0, 0, 0, 402,
	0, 397, 493, 633, 360, 612, 531, 498, 452, 560,
	589, 399, 384, 385, 428, 530, 418, 370, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 419, 1072,
	0, 631, 1075, 1063, 1055, 1056, 1057, 1058, 1059, 1060,
	0, 1077, 1078, 1079, 1080, 1081, 624, 1069, 1071, 1054,
	1061, 1062, 1064, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 330, 0, 331, 332, 333, 335,
	336, 337, 824, 338, 339, 340, 343, 344, 345, 347,
	707, 348, 349, 350, 351, 352, 353, 0, 826, 355,
	356, 357, 358, 359, 361, 363, 364, 365, 366, 367,
	369, 371, 0, 0, 0, 829, 0, 0, 0, 375,
	376, 377, 378, 379, 380, 0, 381, 382, 386, 388,
	389, 390, 391, 392, 393, 396, 0, 398, 400, 0,
	401, 404, 0, 405, 406, 407, 408, 409, 410, 411,
	412, 0, 413, 0, 414, 415, 417, 0, 420, 421,
	422, 423, 424, 0, 425, 0, 0, 426, 427, 429,
	430, 431, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 0, 445, 446, 447, 449, 0,
	450, 451, 454, 455, 456, 457, 0, 459, 0, 0,
	460, 461, 462, 0, 0, 463, 464, 465, 466, 467,
	468, 471, 0, 473, 474, 475, 476, 477, 478, 479,
	709, 481, 482, 483, 484, 485, 486, 487, 4473, 0,
	488, 490, 491, 0, 0, 0, 842, 506, 507, 508,
	509, 510, 511, 512, 514, 0, 516, 517, 518, 0,
	519, 520, 521, 522, 0, 523, 524, 525, 526, 527,
	529, 532, 533, 534, 535, 0, 538, 539, 540, 541,
	542, 543, 544, 546, 547, 548, 550, 551, 552, 710,
	553, 554, 555, 556, 0, 558, 559, 711, 561, 562,
	564, 565, 566, 567, 568, 569, 720, 0, 571, 1045,
	572, 573, 574, 575, 576, 0, 578, 579, 580, 581,
	582, 583, 586, 587, 588, 590, 591, 0, 592, 593,
	0, 595, 596, 845, 598, 599, 600, 601, 602, 0,
	721, 603, 0, 604, 0, 605, 606, 607, 608, 609,
	610, 611, 613, 0, 0, 615, 616, 617, 619, 620,
	621, 622, 625, 626, 627, 628, 629, 0, 630, 632,
	634, 712, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 635, 636, 0, 503, 497, 453, 495, 496, 500,
	501, 504, 329, 0, 346, 827, 0, 395, 432, 0,
	0, 0, 492, 0, 545, 549, 0, 0, 0, 0,
	0, 0, 403, 0, 832, 0, 838, 0, 844, 0,
	614, 0, 834, 835, 840, 334, 1070, 637, 708, 0,
	0, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 836, 833, 837, 843, 831,
	841, 828, 839, 0, 536, 470, 0, 563, 341, 387,
	374, 416, 458, 570, 0, 0, 448, 618, 383, 472,
	0, 362, 505, 0, 594, 469, 0, 577, 597, 0,
	489, 368, 528, 584, 585, 825, 830, 0, 846, 0,
	372, 373, 494, 354, 502, 0, 0, 557, 515, 513,
	0, 480, 537, 0, 0, 0, 402, 0, 397, 493,
	633, 360, 612, 531, 498, 452, 560, 589, 399, 384,
	385, 428, 530, 418, 370, 623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 419, 1072, 0, 631, 1075,
	1063, 1055, 1056, 1057, 1058, 1059, 1060, 0, 1077, 1078,
	1079, 1080, 1081, 624, 1069, 1071, 1054, 1061, 1062, 1064,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 330, 0, 331, 332, 333, 335, 336, 337, 824,
	338, 339, 340, 343, 344, 345, 347, 707, 348, 349,
	350, 351, 352, 353, 0, 826, 355, 356, 357, 358,
	359, 361, 363, 364, 365, 366, 367, 369, 371, 0,
	0, 0, 829, 0, 0, 0, 375, 376, 377, 378,
	379, 380, 0, 381, 382, 386, 388, 389, 390, 391,
	392, 393, 396, 0, 398, 400, 0, 401, 404, 0,
	405, 406, 407, 408, 409, 410, 411, 412, 0, 413,
	0, 414, 415, 417, 0, 420, 421, 422, 423, 424,
	0, 425, 0, 0, 426, 427, 429, 430, 431, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 445, 446, 447, 449, 0, 450, 451, 454,
	455, 456, 457, 0, 459, 0, 0, 460, 461, 462,
	0, 0, 463, 464, 465, 466, 467, 468, 471, 0,
	473, 474, 475, 476, 477, 478, 479, 709, 481, 482,
	483, 484, 485, 486, 487, 2910, 0, 488, 490, 491,
	0, 0, 0, 842, 506, 507, 508, 509, 510, 511,
	512, 514, 0, 516, 517, 518, 0, 519, 520, 521,
	522, 0, 523, 524, 525, 526, 527, 529, 532, 533,
	534, 535, 0, 538, 539, 540, 541, 542, 543, 544,
	546, 547, 548, 550, 551, 552, 710, 553, 554, 555,
	556, 0, 558, 559, 711, 561, 562, 564, 565, 566,
	567, 568, 569, 720, 0, 571, 1045, 572, 573, 574,
	575, 576, 0, 578, 579, 580, 581, 582, 583, 586,
	587, 588, 590, 591, 0, 592, 593, 0, 595, 596,
	845, 598, 599, 600, 601, 602, 0, 721, 603, 0,
	604, 0, 605, 606, 607, 608, 609, 610, 611, 613,
	0, 0, 615, 616, 617, 619, 620, 621, 622, 625,
	626, 627, 628, 629, 0, 630, 632, 634, 712, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 635, 636,
	0, 503, 497, 453, 495, 496, 500, 501, 504, 329,
	0, 346, 827, 0, 395, 432, 0, 0, 0, 492,
	0, 545, 549, 0, 0, 0, 0, 0, 0, 403,
	0, 832, 0, 838, 0, 844, 0, 614, 0, 834,
	835, 840, 334, 1070, 637, 708, 0, 0, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 836, 833, 837, 843, 831, 841, 828, 839,
	0, 536, 470, 0, 563, 341, 387, 374, 416, 458,
	570, 0, 0, 448, 618, 383, 472, 0, 362, 505,
	0, 594, 469, 0, 577, 597, 0, 489, 368, 528,
	584, 585, 825, 830, 0, 846, 0, 372, 373, 494,
	354, 502, 0, 0, 557, 515, 513, 0, 480, 537,
	0, 0, 0, 402, 0, 397, 493, 633, 360, 612,
	531, 498, 452, 560, 589, 399, 384, 385, 428, 530,
	418, 370, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 419, 1072, 0, 631, 1075, 1063, 1055, 1056,
	1057, 1058, 1059, 1060, 0, 1077, 1078, 1079, 1080, 1081,
	624, 1069, 1071, 1054, 1061, 1062, 1064, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 330, 0,
	331, 332, 333, 335, 336, 337, 824, 338, 339, 340,
	343, 344, 345, 347, 707, 348, 349, 350, 351, 352,
	353, 0, 826, 355, 356, 357, 358, 359, 361, 363,
	364, 365, 366, 367, 369, 371, 0, 0, 0, 829,
	0, 0, 0, 375, 376, 377, 378, 379, 380, 0,
	381, 382, 386, 388, 389, 390, 391, 392, 393, 396,
	0, 398, 400, 0, 401, 404, 0, 405, 406, 407,
	408, 409, 410, 411, 412, 0, 413, 0, 414, 415,
	417, 0, 420, 421, 422, 423, 424, 0, 425, 0,
	0, 426, 427, 429, 430, 431, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 0, 445,
	446, 447, 449, 0, 450, 451, 454, 455, 456, 457,
	0, 459, 0, 0, 460, 461, 462, 0, 0, 463,
	464, 465, 466, 467, 468, 471, 0, 473, 474, 475,
	476, 477, 478, 479, 709, 481, 482, 483, 484, 485,
	486, 487, 0, 0, 488, 490, 491, 0, 0, 0,
	842, 506, 507, 508, 509, 510, 511, 512, 514, 0,
	516, 517, 518, 0, 519, 520, 521, 522, 0, 523,
	524, 525, 526, 527, 529, 532, 533, 534, 535, 0,
	538, 539, 540, 541, 542, 543, 544, 546, 547, 548,
	550, 551, 552, 710, 553, 554, 555, 556, 0, 558,
	559, 711, 561, 562, 564, 565, 566, 567, 568, 569,
	720, 0, 571, 1045, 572, 573, 574, 575, 576, 0,
	578, 579, 580, 581, 582, 583, 586, 587, 588, 590,
	591, 0, 592, 593, 0, 595, 596, 845, 598, 599,
	600, 601, 602, 0, 721, 603, 0, 604, 0, 605,
	606, 607, 608, 609, 610, 611, 613, 0, 0, 615,
	616, 617, 619, 620, 621, 622, 625, 626, 627, 628,
	629, 0, 630, 632, 634, 712, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 635, 636, 0, 503, 497,
	453, 495, 496, 500, 501, 504, 329, 0, 346, 827,
	0, 395, 432, 0, 0, 0, 492, 0, 545, 549,
	0, 0, 0, 0, 0, 0, 403, 0, 832, 0,
	838, 0, 844, 0, 614, 0, 834, 835, 840, 334,
	1070, 637, 708, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 836,
	833, 837, 843, 831, 841, 828, 839, 0, 536, 470,
	0, 563, 341, 387, 374, 416, 458, 570, 0, 0,
	448, 618, 383, 472, 0, 362, 505, 0, 594, 469,
	0, 577, 597, 0, 489, 368, 528, 584, 585, 825,
	830, 0, 846, 0, 372, 373, 494, 354, 502, 0,
	0, 557, 515, 513, 0, 480, 537, 0, 0, 0,
	402, 0, 397, 493, 633, 360, 612, 531, 498, 452,
	560, 589, 399, 384, 385, 428, 530, 418, 370, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 419,
	1072, 0, 631, 1075, 1063, 1055, 1056, 1057, 1058, 1059,
	1060, 0, 1077, 1078, 1079, 1080, 1081, 624, 1069, 1071,
	1054, 1061, 1062, 1064, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 327, 328, 330, 0, 331, 332, 333,
	335, 336, 337, 824, 338, 339, 340, 343, 344, 345,
	347, 707, 348, 349, 350, 351, 352, 353, 0, 826,
	355, 356, 357, 358, 359, 361, 363, 364, 365, 366,
	367, 369, 371, 0, 0, 0, 829, 0, 0, 0,
	375, 376, 377, 378, 379, 380, 0, 381, 382, 386,
	388, 389, 390, 391, 392, 393, 396, 0, 398, 400,
	0, 401, 404, 0, 405, 406, 407, 408, 409, 410,
	411, 412, 0, 413, 0, 414, 415, 417, 0, 420,
	421, 422, 423, 424, 0, 425, 0, 0, 426, 427,
	429, 430, 431, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 0, 445, 446, 447, 449,
	0, 450, 451, 454, 455, 456, 457, 0, 459, 0,
	0, 460, 461, 462, 0, 0, 463, 464, 465, 466,
	467, 468, 471, 0, 473, 474, 475, 476, 477, 478,
	479, 709, 481, 482, 483, 484, 485, 486, 487, 0,
	0, 488, 490, 491, 0, 0, 0, 842, 506, 507,
	508, 509, 510, 511, 512, 514, 0, 516, 517, 518,
	0, 519, 520, 521, 522, 0, 523, 524, 525, 526,
	527, 529, 532, 533, 534, 535, 0, 538, 539, 540,
	541, 542, 543, 544, 546, 547, 548, 550, 551, 552,
	710, 553, 554, 555, 556, 0, 558, 559, 711, 561,
	562, 564, 565, 566, 567, 568, 569, 720, 0, 571,
	2846, 572, 573, 574, 575, 576, 0, 578, 579, 580,
	581, 582, 583, 586, 587, 588, 590, 591, 0, 592,
	593, 0, 595, 596, 845, 598, 599, 600, 601, 602,
	0, 721, 603, 0, 604, 0, 605, 606, 607, 608,
	609, 610, 611, 613, 0, 0, 615, 616, 617, 619,
	620, 621, 622, 625, 626, 627, 628, 629, 0, 630,
	632, 634, 712, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 635, 636, 0, 503, 497, 453, 495, 496,
	500, 501, 504, 329, 0, 346, 827, 0, 395, 1083,
	0, 0, 0, 492, 0, 545, 549, 0, 0, 0,
	0, 0, 0, 403, 0, 832, 0, 838, 0, 844,
	0, 614, 0, 834, 835, 840, 334, 1070, 637, 708,
	0, 0, 0, 499, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 836, 833, 837, 843,
	831, 841, 828, 839, 0, 536, 470, 0, 563, 341,
	387, 374, 416, 458, 570, 0, 0, 448, 618, 383,
	472, 0, 362, 505, 0, 594, 469, 0, 577, 597,
	0, 489, 368, 528, 584, 585, 825, 830, 0, 846,
	0, 372, 373, 494, 354, 502, 0, 0, 557, 515,
	513, 0, 480, 537, 0, 0, 0, 402, 0, 397,
	493, 633, 360, 612, 531, 498, 452, 560, 589, 399,
	384, 385, 428, 530, 418, 370, 623, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 419, 1072, 0, 631,
	1075, 1063, 1055, 1056, 1057, 1058, 1059, 1060, 0, 1077,
	1078, 1079, 1080, 1081, 624, 1069, 1071, 1054, 1061, 1062,
	1064, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	327, 328, 330, 0, 331, 332, 333, 335, 336, 337,
	824, 338, 339, 340, 343, 344, 345, 347, 707, 348,
	349, 350, 351, 352, 353, 0, 826, 355, 356, 357,
	358, 359, 361, 363, 364, 365, 366, 367, 369, 371,
	0, 0, 0, 829, 0, 0, 0, 375, 376, 377,
	378, 379, 380, 0, 381, 382, 386, 388, 389, 390,
	391, 392, 393, 396, 0, 398, 400, 0, 401, 404,
	0, 405, 406, 407, 408, 409, 410, 411, 412, 0,
	413, 0, 414, 415, 417, 0, 420, 421, 422, 423,
	424, 0, 425, 0, 0, 426, 427, 429, 430, 431,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 445, 446, 447, 449, 0, 450, 451,
	454, 455, 456, 457, 0, 459, 0, 0, 460, 461,
	462, 0, 0, 463, 464, 465, 466, 467, 468, 471,
	0, 473, 474, 475, 476, 477, 478, 479, 709, 481,
	482, 483, 484, 485, 486, 487, 0, 0, 488, 490,
	491, 0, 0, 0, 842, 506, 507, 508, 509, 510,
	511, 512, 514, 0, 516, 517, 518, 0, 519, 520,
	521, 522, 0, 523, 524, 525, 526, 527, 529, 532,
	533, 534, 535, 0, 538, 539, 540, 541, 542, 543,
	544, 546, 547, 548, 550, 551, 552, 710, 553, 554,
	555, 556, 0, 558, 559, 711, 561, 562, 564, 565,
	566, 567, 568, 569, 720, 0, 571, 1045, 572, 573,
	574, 575, 576, 0, 578, 579, 580, 581, 582, 583,
	586, 587, 588, 590, 591, 0, 592, 593, 0, 595,
	596, 845, 598, 599, 600, 601, 602, 0, 721, 603,
	0, 604, 0, 605, 606, 607, 608, 609, 610, 611,
	613, 0, 0, 615, 616, 617, 619, 620, 621, 622,
	625, 626, 627, 628, 629, 0, 630, 632, 634, 712,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 635,
	636, 0, 503, 497, 453, 495, 496, 500, 501, 504,
	329, 0, 346, 827, 0, 395, 1042, 0, 0, 0,
	492, 0, 545, 549, 0, 0, 0, 0, 0, 0,
	403, 0, 832, 0, 838, 0, 844, 0, 614, 0,
	834, 835, 840, 334, 1070, 637, 708, 0, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 836, 833, 837, 843, 831, 841, 828,
	839, 0, 536, 470, 0, 563, 341, 387, 374, 416,
	458, 570, 0, 0, 448, 618, 383, 472, 0, 362,
	505, 0, 594, 469, 0, 577, 597, 0, 489, 368,
	528, 584, 585, 825, 830, 0, 846, 0, 372, 373,
	494, 354, 502, 0, 0, 557, 515, 513, 0, 480,
	537, 0, 0, 0, 402, 0, 397, 493, 633, 360,
	612, 531, 498, 452, 560, 589, 399, 384, 385, 428,
	530, 418, 370, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 419, 1072, 0, 631, 1075, 1063, 1055,
	1056, 1057, 1058, 1059, 1060, 0, 1077, 1078, 1079, 1080,
	1081, 624, 1069, 1071, 1054, 1061, 1062, 1064, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	0, 331, 332, 333, 335, 336, 337, 824, 338, 339,
	340, 343, 344, 345, 347, 707, 348, 349, 350, 351,
	352, 353, 0, 826, 355, 356, 357, 358, 359, 361,
	363, 364, 365, 366, 367, 369, 371, 0, 0, 0,
	829, 0, 0, 0, 375, 376, 377, 378, 379, 380,
	0, 381, 382, 386, 388, 389, 390, 391, 392, 393,
	396, 0, 398, 400, 0, 401, 404, 0, 405, 406,
	407, 408, 409, 410, 411, 412, 0, 413, 0, 414,
	415, 417, 0, 420, 421, 422, 423, 424, 0, 425,
	0, 0, 426, 427, 429, 430, 431, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 444, 0,
	445, 446, 447, 449, 0, 450, 451, 454, 455, 456,
	457, 0, 459, 0, 0, 460, 461, 462, 0, 0,
	463, 464, 465, 466, 467, 468, 471, 0, 473, 474,
	475, 476, 477, 478, 479, 709, 481, 482, 483, 484,
	485, 486, 487, 0, 0, 488, 490, 491, 0, 0,
	0, 842, 506, 507, 508, 509, 510, 511, 512, 514,
	0, 516, 517, 518, 0, 519, 520, 521, 522, 0,
	523, 524, 525, 526, 527, 529, 532, 533, 534, 535,
	0, 538, 539, 540, 541, 542, 543, 544, 546, 547,
	548, 550, 551, 552, 710, 553, 554, 555, 556, 0,
	558, 559, 711, 561, 562, 564, 565, 566, 567, 568,
	569, 720, 0, 571, 1045, 572, 573, 574, 575, 576,
	0, 578, 579, 580, 581, 582, 583, 586, 587, 588,
	590, 591, 0, 592, 593, 0, 595, 596, 845, 598,
	599, 600, 601, 602, 0, 721, 603, 0, 604, 0,
	605, 606, 607, 608, 609, 610, 611, 613, 0, 0,
	615, 616, 617, 619, 620, 621, 622, 625, 626, 627,
	628, 629, 0, 630, 632, 634, 712, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 635, 636, 0, 503,
	497, 453, 495, 496, 500, 501, 504, 329, 0, 346,
	827, 0, 395, 432, 0, 0, 0, 492, 0, 545,
	549, 0, 0, 0, 0, 0, 0, 403, 0, 832,
	0, 838, 0, 844, 0, 614, 0, 834, 835, 840,
	334, 1070, 637, 708, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	836, 833, 837, 843, 831, 841, 828, 839, 0, 536,
	470, 0, 563, 341, 387, 374, 416, 458, 570, 0,
	0, 448, 618, 383, 472, 0, 362, 505, 0, 594,
	469, 0, 577, 597, 0, 489, 368, 528, 584, 585,
	825, 830, 0, 846, 0, 372, 373, 494, 354, 502,
	0, 0, 557, 515, 513, 0, 480, 537, 0, 0,
	0, 402, 0, 397, 493, 633, 360, 612, 531, 498,
	452, 560, 589, 399, 384, 385, 428, 530, 418, 370,
	623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 1072, 0, 631, 1075, 1063, 1055, 1056, 1057, 1058,
	1059, 1060, 0, 1077, 1078, 1079, 1080, 1081, 624, 1069,
	1071, 1054, 1061, 1062, 1064, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 330, 0, 331, 332,
	333, 335, 336, 337, 824, 338, 339, 340, 343, 344,
	345, 347, 707, 348, 349, 350, 351, 352, 353, 0,
	826, 355, 356, 357, 358, 359, 361, 363, 364, 365,
	366, 367, 369, 371, 0, 0, 0, 829, 0, 0,
	0, 375, 376, 377, 378, 379, 380, 0, 381, 382,
	386, 388, 389, 390, 391, 392, 393, 396, 0, 398,
	400, 0, 401, 404, 0, 405, 406, 407, 408, 409,
	410, 411, 412, 0, 413, 0, 414, 415, 417, 0,
	420, 421, 422, 423, 424, 0, 425, 0, 0, 426,
	427, 429, 430, 431, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 0, 445, 446, 447,
	449, 0, 450, 451, 454, 455, 456, 457, 0, 459,
	0, 0, 460, 461, 462, 0, 0, 463, 464, 465,
	466, 467, 468, 471, 0, 473, 474, 475, 476, 477,
	478, 479, 709, 481, 482, 483, 484, 485, 486, 487,
	0, 0, 488, 490, 491, 0, 0, 0, 842, 506,
	507, 508, 509, 510, 511, 512, 514, 0, 516, 517,
	518, 0, 519, 520, 521, 522, 0, 523, 524, 525,
	526, 527, 529, 532, 533, 534, 535, 0, 538, 539,
	540, 541, 542, 543, 544, 546, 547, 548, 550, 551,
	552, 710, 553, 554, 555, 556, 0, 558, 559, 711,
	561, 562, 564, 565, 566, 567, 568, 569, 720, 0,
	571, 0, 572, 573, 574, 575, 576, 0, 578, 579,
	580, 581, 582, 583, 586, 587, 588, 590, 591, 0,
	592, 593, 0, 595, 596, 845, 598, 599, 600, 601,
	602, 0, 721, 603, 0, 604, 0, 605, 606, 607,
	608, 609, 610, 611, 613, 0, 0, 615, 616, 617,
	619, 620, 621, 622, 625, 626, 627, 628, 629, 0,
	630, 632, 634, 712, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 635, 636, 0, 503, 497, 453, 495,
	496, 500, 501, 504, 329, 0, 346, 827, 0, 395,
	432, 0, 0, 0, 492, 0, 545, 549, 0, 0,
	0, 0, 0, 0, 403, 0, 832, 0, 838, 0,
	844, 0, 614, 0, 834, 835, 840, 334, 0, 637,
	708, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 0, 0, 0, 836, 833, 837,
	843, 831, 841, 828, 839, 0, 536, 470, 0, 563,
	341, 387, 374, 416, 458, 570, 0, 0, 448, 618,
	383, 472, 0, 362, 505, 0, 594, 469, 0, 577,
	597, 0, 489, 368, 528, 584, 585, 825, 830, 0,
	846, 0, 372, 373, 494, 354, 502, 0, 0, 557,
	515, 513, 0, 480, 537, 0, 0, 0, 402, 0,
	397, 493, 633, 360, 612, 531, 498, 452, 560, 589,
	399, 384, 385, 428, 530, 418, 370, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	631, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	0, 0, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 328, 330, 0, 331, 332, 333, 335, 336,
	337, 824, 338, 339, 340, 343, 344, 345, 347, 707,
	348, 349, 350, 351, 352, 353, 0, 826, 355, 356,
	357, 358, 359, 361, 363, 364, 365, 366, 367, 369,
	371, 0, 0, 0, 829, 0, 0, 0, 375, 376,
	377, 378, 379, 380, 0, 381, 382, 386, 388, 389,
	390, 391, 392, 393, 396, 0, 398, 400, 0, 401,
	404, 0, 405, 406, 407, 408, 409, 410, 411, 412,
	0, 413, 0, 414, 415, 417, 0, 420, 421, 422,
	423, 424, 0, 425, 0, 0, 426, 427, 429, 430,
	431, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 449, 0, 450,
	451, 454, 455, 456, 457, 0, 459, 0, 0, 460,
	461, 462, 0, 0, 463, 464, 465, 466, 467, 468,
	471, 0, 473, 474, 475, 476, 477, 478, 479, 709,
	481, 482, 483, 484, 485, 486, 487, 0, 0, 488,
	490, 491, 0, 0, 0, 842, 506, 507, 508, 509,
	510, 511, 512, 514, 0, 516, 517, 518, 0, 519,
	520, 521, 522, 0, 523, 524, 525, 526, 527, 529,
	532, 533, 534, 535, 0, 538, 539, 540, 541, 542,
	543, 544, 546, 547, 548, 550, 551, 552, 710, 553,
	554, 555, 556, 0, 558, 559, 711, 561, 562, 564,
	565, 566, 567, 568, 569, 720, 0, 571, 0, 572,
	573, 574, 575, 576, 0, 578, 579, 580, 581, 582,
	583, 586, 587, 588, 590, 591, 0, 592, 593, 0,
	595, 596, 845, 598, 599, 600, 601, 602, 0, 721,
	603, 0, 604, 0, 605, 606, 607, 608, 609, 610,
	611, 613, 0, 0, 615, 616, 617, 619, 620, 621,
	622, 625, 626, 627, 628, 629, 0, 630, 632, 634,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	635, 636, 0, 503, 497, 453, 495, 496, 500, 501,
	504,
}

var yyPact = [...]int32{
	9640, -1000, 419, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1651, 1651, -1000, -1000, 3739, 1355, 15457,
	16127, 15209, 3822, 2390, 2915, 108865, 86645, 1651, 1794, 1723,
	1719, 87655, 108360, 107855, 73010, 72505, 1848, 1389, 1358, 86140,
	1357, 1324, -1000, 2296, 87655, 55375, 55375, 85635, 87655, 85130,
	87655, 57909, 87655, 4776, 4082, 4082, 4026, 2586, 2884, 68010,
	-1000, 1736, 1109, 1058, -1000, -1000, 4529, 77050, 406, 107350,
	87655, 1305, 9640, 4584, -1000, -1000, 2808, 4036, 77050, 4145,
	4034, 1058, 87655, -1000, 2152, 2778, 2438, 4550, 106845, 87655,
	87655, 53847, 87655, 3802, 106340, 105835, 3266, 105330, 64475, 3818,
	1781, 87655, 87655, 2480, 104825, 87655, 87655, 1323, 3087, 61949,
	61949, -1000, -1000, 1859, 1842, -1000, -1000, -1000, 76545, 84625,
	104320, 103815, 1624, 3264, 2564, 68010, 87655, 87655, 87655, 87655,
	68010, 61949, 2581, 53318, 103310, 68010, 87655, 68010, 87655, 87655,
	87655, 87655, 87655, 1778, 61444, 60939, 87655, 102805, 3801, 87655,
	87655, 2340, 3452, -1000, 102300, 101795, 101290, 114258, 113771, 4692,
	4686, 3009, 4686, 100785, 100280, 99775, 4070, 63970, 63465, 62960,
	-1000, -1000, -1000, 1623, 3259, -1000, -1000, -1000, 3798, 2475,
	1775, -1000, 2578, -1000, -1000, -1000, -1000, -1000, -1000, 1621,
	4069, 2195, -1000, 89675, 84120, 2535, -1000, -1000, 1103, 4313,
	4776, 4776, 4549, 66495, 1520, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4311, 2633, 3167, 564, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4584, 2808, 4584, 4776, 4181, 4776, -1000,
	-1000, -1000, -1000, 87655, -1000, 4776, 1322, -1000, 4025, 638,
	1081, -1000, 955, 955, 955, 3702, 955, 4022, 1515, 557,
	967, -1000, 3622, 1763, 50192, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1691, 3646, 54870, -1000, 87655, 54870, -1000, 564,
	4310, 2630, 3160, -1000, 54870, 87655, 2673, 54870, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 87655, 4127, 4127,
	4127, 4127, 994, 994, 4127, 4127, 1128, 1007, -1000, -1000,
	-1000, 4769, 4769, -1000, -1000, -1000, -1000, 1056, -1000, 83615,
	-1000, -1000, -1000, -1000, 399, -1000, -1000, -1000, 77050, -1000,
	77050, 14715, 3542, 2884, -1000, -1000, 66495, -1000, 1321, -1000,
	526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3156, 4527,
	4527, 4527, 4068, 1736, -1000, -1000, 895, 882, 1109, 31232,
	31232, -1000, 4008, -1000, 442, -1000, 526, 67505, 1316, 395,
	87655, -1000, 1161, 395, 36374, -1000, -1000, 2577, -1000, 408,
	-1000, 2554, 1973, -1000, 3063, 87655, 3782, 99270, 77050, 77050,
	871, -1000, -1000, -1000, -1000, -1000, 955, 98765, 87655, 1617,
	98260, 4690, 68010, 68010, 87655, 1768, 68010, 3540, 2333, -1000,
	2150, 3153, -1000, 4580, 1883, 4698, 559, 1203, 87655, 87655,
	-1000, 560, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1412, 2294, 1351, 4578,
	1883, 4576, 3430, 97755, 1748, 4575, 3590, 1883, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1616, 87655, 2403,
	4007, 87655, 1161, 4574, -1000, 3572, 3102, 112797, 87655, 1883,
	1883, -1000, -1000, -1000, -1000, 8630, 4678, 4500, 9474, 4676,
	4499, 14996, 4675, 15614, 4674, 83110, 82605, 3428, 87655, 82100,
	2665, 1315, 2697, 2605, 3410, 2117, 10754, 1315, -1000, 526,
	2289, 3354, 87655, 87655, 87655, 2681, 1313, 4005, 4672, 8670,
	2882, 4786, 2331, 1638, 3077, 4003, 4000, 87655, 2288, 1895,
	4498, 2278, 3538, 1895, 4498, 2584, 2596, 4671, 2231, 2957,
	3436, -1000, 1066, 4670, 460, -1000, 4664, 472, -1000, 3999,
	4663, 469, 4656, -1000, 3467, 114745, -1000, -1000, -1000, -1000,
	-1000, 1857, -1000, 550, -1000, -1000, -1000, -1000, -1000, 1230,
	3222, 1227, 1227, 1227, -1000, -1000, -1000, -1000, -1000, 592,
	647, -1000, -1000, -1000, -1000, 3205, 1310, 3205, 3205, -1000,
	3223, 3205, 469, 4654, 97250, 1309, 4653, 96745, 96240, 3537,
	4555, 4652, 1883, 4650, -1000, 4649, 61949, 3589, 220, 4647,
	-1000, 220, 4646, 220, 4645, -1000, 3415, -1000, 2089, -1000,
	-1000, -1000, 4690, 61949, 87655, -1000, 3148, -1000, 4733, 64980,
	408, 4776, 3617, 48650, 48136, 87655, 499, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3064, -1000, 2553, -1000, -1000,
	-1000, -1000, -1000, -1000, 95735, -1000, -1000, -1000, 4743, 112797,
	74020, 61949, 75030, 1307, 87655, -1000, 87655, -1000, -1000, -1000,
	-1000, 74020, 3534, 61949, 3533, 1763, -1000, 400, -1000, 49164,
	1305, -1000, -1000, -1000, -1000, 3622, -1000, 398, -1000, 396,
	-1000, 1161, 397, -1000, 2540, -1000, 392, 3857, 3998, 526,
	4690, 4690, 4690, -1000, -1000, -1000, -1000, 386, 2997, -1000,
	87655, -1000, 87655, 87655, 87655, 4127, 4127, 87655, 87655, 87655,
	4127, 4127, 87655, 4127, 4127, -1000, -1000, -1000, 36374, -1000,
	-1000, -1000, 4776, 563, -1000, 228, 87655, 87655, 87655, 112797,
	112797, 68010, 68010, 52789, 87655, 87655, 68010, 68010, 3532, 3449,
	1304, -1000, -1000, -1000, -1000, -1000, -1000, 3996, 66495, -1000,
	-1000, 28658, 526, -1000, 25015, 36374, 3186, 3521, 3531, 1911,
	4072, 3143, -1000, 35860, 2720, 40486, 3614, 1109, -1000, -1000,
	1109, 1109, 36374, -1000, 3156, -1000, -1000, 4030, 237, -1000,
	25534, -1000, -1000, 36374, 36374, 36374, 36374, 36374, 2407, 4554,
	-1000, -1000, -1000, -1000, 30203, -1000, -1000, 526, 1213, 938,
	-1000, -1000, 1302, -1000, 1150, 1301, 526, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1451, 4776, 1434, 36374, 1600,
	2928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1292, 1291,
	3528, -1000, 1289, 1287, 1283, 1282, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1278, 1276, 1272, 1271, 1264, 1262, 1260,
	1259, 1255, 1253, 1252, 1251, 1250, 1248, 1247, 1246, 1245,
	1244, 1243, 1242, 1241, 1162, 1240, 1239, 1237, 1236, 1235,
	1234, 1233, -1000, 3205, -1000, 3205, 3205, 1227, 1227, 1230,
	-1000, -1000, 3223, 3205, 1227, -1000, -1000, 647, 592, -1000,
	-1000, -1000, -1000, -1000, 414, 1226, -1000, 526, -1000, 87655,
	36374, 87655, 395, 4742, 87655, 385, 15020, -1000, 3125, 2808,
	-1000, 2146, -1000, -1000, -1000, 1457, 4739, 65485, -1000, 87655,
	3893, 3884, 4298, 4106, 1060, 4572, 4736, 955, 87655, 7493,
	4568, 95230, -1000, 1225, 1225, 2775, 87655, 1222, 112797, 2576,
	2010, -1000, 61949, 4610, 4644, 2495, -1000, -1000, 112797, -1000,
	492, 26581, -1000, 26581, 4521, 3883, 51202, -1000, 724, 87655,
	87655, 87655, 87655, -1000, 87655, 4642, -1000, 4639, 87655, 1029,
	4567, 1628, 4776, 4638, 59929, 4566, -1000, 94725, 3995, 2497,
	61949, 87655, 1753, 3994, 4636, -1000, 73515, 1203, 4776, 4734,
	3523, -1000, -1000, 245, -1000, 1855, 2027, -1000, 2375, 2374,
	69508, 1800, 1797, 3642, 3993, 2247, 1828, 87655, 2903, 87655,
	3613, 4297, 1037, 2827, 2216, -1000, 1221, 77050, 1870, 245,
	-1000, 4296, 3055, 2369, 2903, 1445, 87655, 1866, 245, 4294,
	7493, 1993, -1000, 2879, 114745, 1066, -1000, 4067, -1000, 1066,
	1066, 4066, 2458, 1883, 1883, -1000, 87655, 245, 1937, 1988,
	87655, 15496, 4632, 4497, 12428, 4630, 87655, -1000, 962, -1000,
	4292, 2173, 4291, -1000, 71512, 4290, 2171, 4289, 1671, 4286,
	2154, 4284, 4281, 4280, 2495, -1000, 94220, 3117, -1000, 2495,
	-1000, -1000, 1371, -1000, 4079, -1000, -1000, -1000, -1000, 3688,
	-1000, 3710, 2478, 1910, 3640, 4278, 4273, 7092, 93715, 4272,
	3052, -1000, -1000, 3992, 4475, -1000, -1000, -1000, -1000, 2073,
	2784, -1000, 2531, 1066, 1066, 87655, -1000, 87655, -1000, -1000,
	526, 4268, 3712, -1000, -1000, 2313, 3873, 3861, 1031, 4267,
	-1000, 112310, 87655, 87655, 4265, 7092, 93210, 4262, 3049, 4259,
	60434, 74525, 74525, 4257, 4255, 7092, 92705, 4252, 3047, 4250,
	4249, 4248, 1492, -1000, 4247, 4463, 4246, 1063, 4776, 2327,
	2326, 2323, -1000, -1000, 1203, 4244, 87655, 87655, 2421, 4240,
	-1000, 2559, 3072, 2559, 4239, 59929, -1000, 2559, 2559, 4238,
	1037, 1037, 4237, 4236, 1923, 4235, 87655, 87655, 87655, 87655,
	87655, 3318, 3216, 3210, 1019, 384, 4234, -1000, 3169, -1000,
	15210, 2147, 2588, 2392, -1000, 4773, 4770, -1000, 87655, 87655,
	-1000, -1000, -1000, 87655, 87655, -1000, 87655, 87655, 112797, -1000,
	112797, 1335, 1339, 3453, -1000, 4769, 4232, -1000, 4231, 4230,
	4228, -1000, 1220, -1000, 570, 36374, -1000, 4769, -1000, -1000,
	-1000, -1000, 4769, -1000, 4316, 4315, 4769, -1000, 1218, -1000,
	4769, -1000, -1000, 3205, 3205, -1000, -1000, 112797, 460, 4628,
	112797, -1000, 3860, 4627, 3859, 4626, 112797, -1000, 87655, 1216,
	87655, 87655, 477, 59929, 4624, 61949, 61949, 61949, 61949, -1000,
	-1000, -1000, -1000, -1000, 87655, 554, 3217, 4733, 1790, -1000,
	-1000, -1000, -1000, 381, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 381, -1000, -1000, -1000, -1000, -1000, 1406, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 87655, -1000, 1058, 365,
	-1000, 4224, 328, 87655, 87655, 2143, 68010, 68010, 68010, 87655,
	87655, 87655, 3445, 87655, 87655, 87655, 87655, 2240, -1000, 462,
	-1000, 87655, 364, -1000, -1000, 361, 4143, 73010, 243, 75030,
	-1000, 1763, 54870, -1000, -1000, -1000, 3619, 87655, 87655, -1000,
	87655, -1000, 87655, -1000, 87655, 87655, 87655, 87655, 87655, -1000,
	3395, -1000, -1000, -1000, -1000, 2058, -1000, -1000, -1000, -1000,
	87655, 87655, -1000, -1000, -1000, 87655, 87655, -1000, 87655, 87655,
	351, -1000, 77050, 2416, 2389, 4555, 2824, 2822, 4401, 4400,
	4397, 4396, 4392, 4384, 4383, 4381, 87655, 87655, 3991, 3990,
	4380, 4378, 112797, 1066, 112797, 6323, -1000, -1000, 866, 203,
	36374, 36374, 36374, -1000, 15020, 4751, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14843, -40, -1000, -1000, -1000, -1000,
	-1000, 2056, 4086, -1000, 1532, -1000, 1945, -1000, -1000, 373,
	15020, -1000, 42028, -1000, -1000, -1000, 2493, 15020, -1000, 39972,
	39972, 1994, 87655, 2616, -1000, 2616, 221, -1000, 677, 3186,
	3521, 4142, 81595, 31232, 112797, 87655, 4304, 36374, 36374, 36374,
	36374, 36374, 36374, 36374, 36374, 36374, 36374, 36374, 36374, 36374,
	36374, 36374, 36374, 4455, 36374, 4219, 3433, -1000, -1000, 4223,
	1195, 1971, 26581, -1000, -1000, 1207, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	741, 741, 777, 580, 580, 1017, 1213, 4518, 526, 14791,
	359, 558, 526, -1000, -1000, -1000, 31747, 36374, 51202, 35345,
	526, -1000, 28658, -1000, 1946, 4769, 4404, 15020, 2928, 4044,
	1469, 1210, 36374, 36374, 1208, 4769, 4769, 4769, 4769, 36374,
	2263, 36374, 36374, 41514, 36374, 36374, 30718, 36374, 36374, 36374,
	36374, 36374, 2455, 36374, 3064, 43056, 2448, 36374, 34831, 29688,
	36374, 36374, 36374, 864, 36374, 36374, 36374, 3064, 4142, 36374,
	861, 350, -1000, 3875, 344, 36374, -1000, 87655, 4304, 36374,
	36374, 36374, 36374, 4219, 3433, 4223, 1195, 1207, -1000, -1000,
	-1000, 1982, 2317, -1000, 3986, -1000, 3709, 58414, 3812, 87655,
	523, -1000, 1370, 87655, -1000, -1000, 4099, 45606, 45606, 3651,
	3651, -1000, -1000, 70013, 87655, 3608, 3826, 4622, 3001, 4533,
	1206, -1000, 7493, 2937, 4619, 3985, 4565, -1000, 13438, 71023,
	7663, 2180, -1000, -1000, 3601, 3185, 1203, -1000, 69020, 2573,
	87655, 87655, 1613, -1000, -1000, -1000, -1000, -1000, -1000, 2452,
	87655, -1000, -1000, -1000, 26581, -1000, 338, -1000, 1368, 3520,
	87655, -1000, 87655, 1204, 1203, 1203, 1203, 1203, 1203, -1000,
	87655, 2075, 87655, 1805, 70013, 3599, 4618, 2914, -1000, -1000,
	87655, 2047, -1000, -1000, 4617, 2690, 4732, 4564, 955, 26581,
	4787, -1000, 4731, 3010, 47121, 87655, 1874, 527, -1000, 77050,
	4495, 546, 955, -1000, 442, -1000, 2321, 112797, 4776, 2690,
	2690, 8113, 87655, 87655, 87655, -1000, 1801, -1000, -1000, 2474,
	87655, -1000, 87655, 26581, 87655, 87655, -1000, 4563, 92200, -1000,
	112797, 87655, -1000, 1202, 3882, 1529, 1528, 3834, 81090, 87655,
	91695, 91190, 87655, 87655, 76040, 1822, 1820, 87655, 2539, 75535,
	87655, 2529, -1000, 87655, 2213, -1000, -1000, 61949, -1000, 3731,
	2525, 28147, 7013, 87655, 87655, 3984, 87655, 11788, 87655, 87655,
	-1000, 87655, -1000, -1000, -1000, -1000, -1000, 1066, -1000, -1000,
	-1000, 87655, 87655, 1066, 1066, 4702, 87655, 87655, 87655, 11236,
	245, 1922, 1921, 3041, 87655, 1860, 245, 1918, 1854, 77050,
	1980, 87655, 87655, 61949, 333, -1000, -1000, 113284, 109875, -1000,
	2412, -1000, -1000, -1000, 550, -1000, 114745, 87655, 87655, 61949,
	-1000, 87655, 87655, 61949, 87655, 61949, -1000, -1000, 87655, 1667,
	-1000, 49678, -1000, -1000, 87655, 87655, -1000, 4474, 90685, 36374,
	4473, 87655, -1000, 87655, -1000, 1201, 4470, 87655, 61949, 87655,
	-1000, -1000, -1000, 90180, -1000, 80585, 3147, 1899, 61949, 3975,
	4469, 3974, 2698, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	61949, 61949, 4218, 4217, 87655, 87655, 87655, 26581, 61949, 332,
	354, 2614, 3971, 87655, -1000, 80585, 61949, 3964, 87655, -1000,
	353, 353, 353, 61949, 87655, -1000, 80585, 61949, 3963, 87655,
	61949, 87655, -1000, 61949, -1000, -1000, 87655, -1000, 87655, -1000,
	4537, 87655, 87655, -1000, 61949, 2276, 2297, 4211, -1000, 4208,
	2468, -1000, 61949, 2439, -1000, 89675, 87655, -1000, 61949, 2046,
	2439, -1000, -1000, 87655, -1000, -1000, 61949, 87655, 1044, 87655,
	61949, 3770, 2609, 1101, 2580, 2776, 87655, 87655, 4776, 4684,
	87655, 4776, 89170, 26581, 87655, 3368, 61949, 87655, 4207, 87655,
	87655, 68010, 1197, 112797, 68010, 52260, 68010, 68010, 3514, 112797,
	87655, -1000, -1000, 73010, 72000, 2130, 2528, 4206, -1000, -1000,
	460, -1000, 472, -1000, 4555, 3960, -1000, 469, 1718, 4769,
	1335, 1331, 860, 2462, 2349, 2145, 2076, 4769, -1000, 331,
	859, 858, 4309, 4306, 856, 36374, 855, -1000, -1000, 469,
	-1000, 87655, 4729, 87655, 87655, 87655, 87655, 2565, 4555, 3307,
	1883, -1000, -1000, 2043, 3508, -1000, 220, 220, 220, 4536,
	61949, 4139, 1196, 4205, -1000, 2808, 49164, 1946, 4769, -1000,
	-1000, 112797, -1000, 59424, 87655, 328, 328, 3413, 87655, 340,
	-1000, 340, 340, 138, 161, 138, 1066, 339, 549, -1000,
	138, 138, 161, 4490, 4484, 4483, 4482, 4481, -1000, 26581,
	4065, 321, 87655, -1000, -1000, 59424, 3958, 336, 4555, 521,
	-1000, -1000, 87655, -1000, -1000, -1000, -1000, 3857, -1000, -1000,
	-1000, -1000, -1000, 3506, 2841, 2832, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2449, 2104, 2079,
	2446, -1000, -1000, -1000, -1000, 4450, 4450, 4450, 4450, 4450,
	4450, 4450, 4450, 3856, 3855, 88665, 87655, 4450, 4450, 2561,
	4372, 4727, 87655, 87655, 87655, 112797, 112797, 68010, 68010, 3393,
	68010, 68010, -1000, 854, 34317, -1000, 1437, -31, -31, 36374,
	36374, -1000, 36374, -1000, 3746, -1000, 36374, 2493, 4120, -1000,
	4774, 4774, 1189, -1000, 30203, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2511, 328, 36374, 1688, 1384, -1000,
	-1000, -1000, -1000, 4088, 45606, -1000, 4082, 4082, 1813, 1810,
	4082, 87655, -1000, -1000, -1000, -1000, 4227, -1000, 320, 320,
	438, 438, 438, -1000, 1477, 1477, 1477, 1477, 1477, 1477,
	777, 580, 9734, 1596, 36374, 36374, 4204, 4202, 1195, 1342,
	36374, -1000, 3444, -1000, -1000, -1000, 4138, -1000, -1000, 2426,
	3394, -1000, -1000, -1000, -1000, 3323, 41514, 41514, -1000, -1000,
	-1000, 30203, 1194, -1000, -1000, -1000, -1000, 51202, -1000, 1193,
	36374, -1000, -1000, 4510, -1000, -1000, 36374, 157, 10, -1000,
	-1000, 314, 853, 311, -1000, 203, -1000, 846, 3239, -1000,
	36374, 1469, 1192, -1000, 67000, 4101, 3351, 3304, 437, 1439,
	14183, 36374, 844, 843, 842, 841, 14122, 840, 4137, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6412, 837, 832,
	14015, 325, 831, 6729, -1000, 41514, 41514, 41514, 1189, 827,
	825, 6870, 13933, 33803, 33803, 33803, 820, 13585, 36374, 174,
	2484, 310, 309, 308, 306, 26581, 295, -1000, 13505, 36374,
	3548, 26581, 2338, 293, 447, 819, -1000, 112797, 437, 415,
	1398, 816, -1000, 526, 3394, 13368, 3724, -1000, 307, 304,
	294, 36374, 4088, 292, -1000, -1000, 1173, -1000, 3815, -1000,
	15020, -1000, -1000, -1000, 3733, 3719, 3295, -1000, -1000, 290,
	-1000, -1000, -1000, -1000, 4099, 65485, 36374, 288, -1000, 526,
	3733, 39458, 163, 3965, 78060, 78060, 47626, -1000, 44581, 79575,
	78060, 78060, 1367, 4136, 1170, 1169, 526, -1000, -1000, -1000,
	1162, 3896, 3760, -1000, 3760, 815, 289, -1000, 112797, -1000,
	-1000, -1000, 87655, 1049, 87655, 3391, 87655, 87655, 87655, 4725,
	1037, 87655, 87655, 77050, 4615, 110362, 2423, 7663, -1000, 4776,
	66495, 3505, -1000, -1000, 285, -1000, -1000, 1833, 2423, 3955,
	-1000, -1000, -1000, 3593, -1000, -1000, 2180, -1000, 814, -55,
	4063, 282, -1000, -1000, -1000, 1363, 87655, 2847, 955, 87655,
	4610, 2028, 2138, 3141, -1000, 2440, -1000, -1000, 26581, 27092,
	1752, -1000, 795, 287, -1000, 112797, 4776, -1000, -1000, -1000,
	-1000, -1000, 1267, -1000, 87655, 66495, 66495, -1000, 1883, 1474,
	1805, -1000, 87655, 1829, 87655, 790, 87655, 87655, 3086, 1748,
	87655, 3504, -1000, -1000, 4769, 61949, 61949, 2558, 4461, 2362,
	2361, -1000, -1000, 4078, 1689, 61949, 1058, 4613, 3826, 3199,
	4533, 3501, 4795, 2845, -1000, -1000, 474, -1000, 526, -1000,
	36374, 1161, 4537, -1000, 74525, 955, 2126, 546, 4093, 4093,
	87655, 778, 4198, -1000, -1000, 4197, 4195, -1000, -1000, 80080,
	-1000, -1000, 280, -1000, 536, 3562, 3183, 4612, -1000, 4562,
	1892, 1642, 36374, 1155, -1000, 2777, 1100, 1154, 1152, 87655,
	2095, 3768, -1000, 4608, 4555, 4606, 4555, -1000, -1000, -1000,
	-1000, -1000, 87655, 87655, 87655, 87655, -1000, 2060, -1000, -1000,
	-1000, -1000, 2055, -1000, 2519, -1000, -1000, -1000, -1000, -1000,
	2767, 2052, 272, -1000, -1000, 26581, 26581, 26581, 4776, -1000,
	245, -1000, 1845, 1823, 2706, -1000, 2972, -1000, 245, 4194,
	2689, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, 4193,
	7493, 1702, -1000, 4192, -1000, 245, 1913, 1200, 87655, 87655,
	87655, 3957, 10422, 87655, 87655, 87655, 87655, 9698, 4191, 1492,
	1805, 4190, -1000, -1000, -1000, -1000, 109875, 113284, -1000, 113284,
	-1000, 550, -1000, 489, 550, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4189,
	-1000, 4555, 4605, 15020, -1000, -1000, 1898, 36374, -1000, -1000,
	-1000, -1000, -1000, -1000, 2968, 2676, 4468, -1000, -1000, -1000,
	220, 87655, 61949, 2589, 2745, -1000, 266, -1000, 1365, -1000,
	-1000, 111823, 112797, 4188, 3836, 61949, 87655, -1000, -1000, -1000,
	2967, -1000, -1000, -1000, -1000, -1000, 2966, -1000, -1000, -1000,
	-1000, -1000, 483, -1000, 483, 483, -1000, 4187, 4186, 3039,
	87655, 61949, -1000, -1000, -1000, -1000, -1000, -1000, 87655, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1904, 4185, 2120,
	4184, 2119, 4176, -1000, 4174, 2112, 4173, 2106, 4172, 2508,
	2506, 2504, -1000, 4171, 4170, 4776, 4561, 4555, -1000, 4604,
	4555, 262, -1000, -1000, 3151, 3144, -1000, 3757, -1000, 66495,
	-1000, -1000, -1000, 112797, -1000, -1000, -1000, 87655, 87655, -1000,
	-1000, 112797, -1000, -1000, 3953, 3952, 1514, 87655, 61949, 61949,
	61949, -1000, -1000, -1000, 87655, -1000, -1000, 1326, 1104, 4769,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 776, -1000,
	-1000, 1391, -1000, -1000, 1391, 261, -1000, -1000, 460, 112797,
	4555, 3854, 4555, 3852, 87655, -1000, 260, -1000, -1000, 1151,
	87655, 59929, -1000, 2534, -1000, 2042, 77050, -1000, 408, -1000,
	-1000, 775, -1000, 473, -1000, -1000, 61949, -1000, 87655, 138,
	68010, 269, -1000, 87655, 87655, 2102, 2099, 2098, 2093, 2087,
	246, -1000, 1953, 61949, -1000, -1000, 170, 74020, -1000, 61949,
	-1000, -1000, 1058, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3011, 3005, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 87655, 87655, 4371, 87655, 4368, -1000, -1000, 87655,
	4450, 112797, 4367, 4365, 4359, 4357, 4350, 4344, 4339, 1066,
	4338, 4335, -1000, 36374, -1000, 774, 773, 36374, 771, 15020,
	15020, 1008, 15020, -1000, -1000, 4118, -1000, 1802, -1000, -1000,
	33289, 265, -1000, -1000, 1384, -1000, 1134, -1000, 3766, 4040,
	36374, 163, 87655, 87655, 4082, 4082, 4082, 4082, 87655, -1000,
	36374, 36374, 1018, 873, 36374, 41514, 41514, -1000, 36374, 651,
	-1000, -1000, -1000, -1000, 4135, -1000, -1000, 2419, 3394, 36374,
	-1000, -1000, 1696, 1695, -1000, -1000, -1000, -1000, 6657, 6604,
	244, -1000, 30203, 769, 32775, 259, -1000, 526, 13056, -1000,
	-1000, 1328, -1000, -1000, -1000, 768, 4776, 3018, -1000, 36374,
	12746, -1000, 1437, -1000, -1000, 109370, 36374, 3394, 3949, 3948,
	36374, 36374, 3342, 4062, -1000, -1000, 3238, 12690, -1000, -1000,
	-1000, -1000, 112797, -1000, 36374, -1000, 2755, -1000, -1000, 36374,
	-1000, 112797, 41514, 41514, 41514, 41514, 41514, 41514, 41514, 41514,
	41514, 41514, 41514, 41514, 41514, 3262, 41514, 1150, 446, 446,
	446, -1000, -1000, 32261, 36374, 36374, 112797, 764, 762, 760,
	-1000, 36374, 174, 36374, -1000, -1000, -1000, -1000, 242, -1000,
	36374, 26581, 2401, 757, 44076, 227, 1630, -1000, 3394, 36374,
	-1000, 1398, 3724, 36374, 3947, 3943, 3724, -1000, 739, -1000,
	733, 36374, 36374, 36374, 12635, 4040, -1000, 1058, -1000, -1000,
	31232, 1185, 1058, 1559, 87655, 526, 3733, -1000, 15020, 1364,
	87655, -1000, 15020, 3587, 45606, 3911, 3910, 45606, 3976, 3899,
	3899, 3899, -1000, 1821, -1000, 87655, 1149, -1000, 78060, 79575,
	78060, 78060, 62454, 729, 3965, -1000, -1000, 65990, 1148, -1000,
	-1000, -1000, 3571, 1143, 43566, 36374, 526, 36374, 1883, -1000,
	-1000, -1000, 3846, 2714, 70013, -1000, 2367, 70518, 1049, 3915,
	1037, 1523, -1000, 1013, 4724, 1056, 1058, -1000, 226, 7493,
	3834, 87655, 7663, 1141, -1000, -1000, -1000, 3174, 36374, -1000,
	-1000, 255, -1000, 249, 1743, -1000, 109875, 36374, 36374, -1000,
	87655, 2180, 87655, 3951, -1000, -1000, 4061, 109875, 109875, -1000,
	4792, 27092, 1139, 87655, 4533, 1138, 88160, 61949, 4610, -1000,
	87655, -1000, -1000, 87655, 3271, -1000, 4554, 1527, 1135, 41514,
	87655, 3324, -1000, 2886, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1134, 4773, 4770, 112797, -1000, 87655, 4528, 728,
	247, -1000, -1000, 87655, -1000, -1000, -1000, -1000, -1000, 1126,
	-1000, -1000, 559, -1000, -1000, -1000, 2714, 1049, 893, 3412,
	1628, 1474, 59929, -1000, 220, 220, 61949, 61949, -1000, -1000,
	4776, 4776, 994, 4776, 220, 4536, 87655, 4533, 2456, 87655,
	-1000, 4169, 3827, -1000, 87655, 45606, 47121, 12590, 3941, -1000,
	-1000, 4093, 79070, 4093, -1000, 1125, -1000, 483, 3392, 4776,
	87655, 87655, -1000, -1000, -1000, -1000, 26581, 27092, 26581, -1000,
	3810, -1000, -1000, -1000, 87655, 4600, 3109, -1000, 78565, -1000,
	3834, 12490, 87655, 2862, 87655, 87655, -1000, 87655, 46111, -1000,
	-1000, 3093, 9408, 1037, 2877, 2555, 1735, -1000, -1000, 1883,
	1902, 2862, 87655, -1000, 87655, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1925, 87655, -1000, -1000, 28147, -1000, -1000, -1000,
	-1000, -1000, 87655, 87655, 87655, 87655, 1856, 4059, 87655, 87655,
	1850, 4058, 87655, 87655, 87655, 87655, 87655, 87655, -1000, 4167,
	-1000, 2965, 245, 1903, 1032, 2669, -1000, 4166, -1000, 245,
	1891, 906, 87655, -1000, 61949, -1000, -1000, -1000, 1726, 427,
	87655, -1000, 87655, -1000, 12349, 2862, 87655, -1000, 2664, -1000,
	-1000, 4165, 2080, 4164, 4163, 2270, 3089, 1990, 4162, 26581,
	-1000, 27628, 722, 719, 716, 87655, 4541, 1124, 220, 2251,
	87655, 87655, -1000, -1000, -1000, 87655, 87655, 3940, -1000, -1000,
	1492, 1044, 87655, 87655, 87655, 87655, 61949, 87655, 87655, 87655,
	87655, 61949, 3496, 3586, 3581, 87655, 4776, 3150, 4595, -1000,
	87655, -1000, -1000, 1722, 3084, -1000, 4723, 3843, 3838, 2541,
	2057, 2057, 3495, 138, 220, 220, -1000, 4555, -1000, -1000,
	964, -1000, -1000, -1000, -1000, -1000, 715, -1000, 87655, -1000,
	87655, 4555, -1000, 3307, 3307, -1000, 2013, -1000, 3081, 87655,
	224, 4776, 2836, 59424, 2858, -1000, 138, -1000, 1066, 549,
	-1000, 87655, 87655, 87655, 87655, 87655, -1000, 26581, -1000, -1000,
	-1000, -1000, -1000, 4555, 4133, 243, -1000, -1000, -1000, 4334,
	4333, 4450, 4331, 4450, 4325, -1000, 714, 4451, 4451, 4451,
	4451, 4451, 4451, 4451, 4323, 4451, 4451, 1437, -1000, -1000,
	-1000, -1000, -1000, 1765, -1000, 222, -1000, 36374, -1000, 51202,
	-1000, -1000, 4038, 4056, 15020, -1000, -1000, 87655, 87655, 87655,
	87655, -1000, 805, 504, 36374, 36374, 458, 6459, 2701, 504,
	36374, 36374, -1000, -1000, 510, 2591, 2542, 36374, 36374, -1000,
	11961, -1000, 211, -1000, 36374, -1000, -1000, 4776, -1000, -1000,
	15020, 36374, 713, 2368, -1000, 11906, 3724, 4467, 4465, -1000,
	-1000, 3724, 36374, 3319, -1000, 712, 15020, 710, 11839, -1000,
	212, 212, 422, 422, 422, -1000, 595, 595, 595, 595,
	595, 595, 446, 4130, 3256, -1000, 6825, 11523, 11396, 11308,
	708, -1000, -1000, -1000, 174, 11262, -1000, 38944, -1000, -1000,
	707, 1609, 1608, -1000, 4050, 43056, 3303, -1000, 36374, 241,
	38430, 3724, -1000, -1000, 703, -1000, 4462, 4460, 699, -1000,
	-1000, 10970, 10970, 10970, 114745, 4038, 697, 237, 3668, 46111,
	3635, -1000, -1000, 3709, -1000, -1000, 36374, -1000, 87655, 3965,
	45606, 45606, 3876, 3905, 45606, -1000, -1000, -1000, -1000, -1000,
	68010, 1123, 87655, -1000, -1000, -1000, -1000, 78060, 1122, 87655,
	87655, -1000, 54365, 3548, 1121, 234, 10886, 1090, 1883, 3311,
	-1000, 2367, 1119, -1000, 2831, 3826, -1000, 4054, 206, -1000,
	-1000, -1000, 4546, 3562, 1803, 3112, -1000, -1000, 70013, 87655,
	3585, 2996, 4536, 4535, 4533, -1000, 1117, 3938, 2423, 115232,
	-1000, 15020, 4776, 3494, 112797, -1000, 15020, 15020, 2298, -1000,
	115, 87655, 109875, -1000, 205, -1000, 1363, -1000, 4096, 2631,
	4721, 87655, 980, 4560, -1000, 1916, -1000, -1000, -1000, 4537,
	4537, 36374, 6825, 955, 4720, -1000, 4517, -1000, -1000, 3837,
	-1000, -1000, 87655, -1000, 4776, -1000, 2075, 26581, 492, 1987,
	3562, 70013, 3584, 87655, 2905, -1000, 1986, 220, 220, -1000,
	-1000, -1000, -1000, -1000, 4716, 1803, 68010, -1000, -1000, 3236,
	-1000, 4480, 3836, 61949, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 163, -1000, -1000, 47121, -1000, -1000, -1000, -1000, 36374,
	-1000, 1760, 2908, 4121, -1000, -1000, -1000, -1000, 1344, 4114,
	-1000, 87655, 1474, -1000, 77555, -1000, -1000, -1000, 204, -1000,
	1950, -1000, 2863, 2763, -1000, 201, 2862, 187, 186, -1000,
	4544, 963, 4524, 36374, 4457, 4682, 4680, -1000, -1000, 3324,
	4449, 4715, 1044, -1000, -1000, -1000, -1000, 3324, -1000, 4607,
	112797, 1066, 1044, 4555, 4555, -1000, -1000, -1000, -1000, 4161,
	4160, -1000, 87655, 61949, -1000, -1000, 87655, 61949, -1000, -1000,
	-1000, -1000, 4159, -1000, 87655, 87655, 87655, 87655, 87655, 1849,
	4053, 87655, 87655, 87655, 87655, -1000, -1000, -1000, 1710, -1000,
	4555, -1000, -1000, -1000, 87655, 87655, 61949, 87655, 28, -1000,
	4769, 4769, 112797, 223, -1000, 4769, 4769, 87655, 61949, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1432, 36374, 4158, -1000, -1000, -1000, -1000, 2944,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 87655, 87655, 87655, 87655, 4594, 4555, -1000, 4776,
	4776, -1000, 4555, 112797, 112797, 87655, 87655, 87655, 4155, -1000,
	-1000, -1000, -1000, -1000, -1000, 4111, 73010, -1000, -1000, 4555,
	4555, 4555, -1000, -1000, 168, 87655, -1000, 4028, -1000, -1000,
	-1000, -1000, 1513, -1000, 138, 138, 138, 138, 138, -1000,
	-1000, 59424, 4555, 4450, 4450, -1000, 4450, -1000, 4450, 4322,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4451,
	-1000, -1000, 693, -1000, -1000, 10577, 692, 1560, 36374, 4527,
	-1000, -1000, -1000, -1000, 504, 504, 36374, 36374, 36374, 504,
	510, -1000, -1000, 504, 504, -1000, -1000, 10441, -1000, 15020,
	-1000, 1437, 4052, -1000, 691, -1000, -1000, 689, 221, 87655,
	-1000, -1000, 36374, 41514, 4110, -1000, 36374, 36374, 36374, -1000,
	-1000, 162, 160, 1115, -1000, -1000, -1000, -1000, 3303, 4050,
	-1000, -1000, 10376, 685, 1901, 15020, 3294, 678, -1000, -1000,
	-1000, -1000, 3724, 36374, 3711, 3724, 2483, 1560, 3794, 3669,
	148, -1000, 87655, 3286, 15020, -1000, -1000, 3876, -1000, 1098,
	36374, 45606, -1000, 1092, 87655, 145, -1000, 87655, 144, 142,
	112797, 141, -1000, 4712, 3580, 41000, 36374, 3767, -1000, 4583,
	4583, 3772, -1000, 3779, 26581, 1090, 4776, 3826, 87655, 2925,
	2925, 3391, 87655, -1000, 70518, 2440, 1487, 2367, -1000, 87655,
	2709, 675, 1049, 87655, 87655, -1000, -1000, 1920, 4711, 46111,
	77050, -1000, 140, -1000, 113284, -1000, 7025, -1000, 1708, -1000,
	3493, 1681, 4109, 137, -1000, 673, 1915, 1914, 1784, 87655,
	1058, 134, 70013, 4588, 4610, -1000, 4448, 3828, 3828, 10327,
	2481, 903, -1000, 87655, -1000, -1000, 129, -1000, 87655, 1958,
	666, 87655, 1474, 3075, 87655, 1058, -1000, 1089, 2456, 87655,
	1086, 4541, 220, 401, 10124, 68010, 4700, 4700, 87655, 27092,
	1078, 1077, 1075, -1000, -1000, -1000, -1000, 2862, 2796, -1000,
	-1000, -1000, -1000, -1000, 2796, 2307, 2796, 46111, 51731, -1000,
	87655, 87655, -1000, 9595, -1000, 4587, 4586, -1000, -1000, 1074,
	-1000, 4708, 4528, -1000, -1000, -1000, -1000, 87655, 87655, 2416,
	512, 2416, 509, 87655, -1000, -1000, -1000, 4154, -1000, 87655,
	61949, -1000, -1000, 4153, -1000, -1000, -1000, 2862, -1000, -1000,
	-1000, -1000, 2270, 51202, 50697, -1000, 3089, 1071, 1065, -1000,
	-1000, 1062, 9231, 87655, 87655, 416, 413, 1863, 138, 3492,
	-1000, -1000, -1000, -1000, 4528, 648, -1000, -1000, -1000, 59424,
	59424, 3937, -1000, -1000, -1000, -1000, -1000, 87655, -1000, 170,
	-1000, -1000, -1000, -1000, -1000, 4450, -1000, -1000, -1000, -1000,
	-1000, 87655, 15020, 37402, 504, 504, 504, -1000, 2625, 36374,
	-1000, -1000, -1000, 8822, 1047, 41514, 15020, 15020, 15020, -1000,
	36374, -1000, 36374, -1000, -1000, -1000, 1697, -1000, -1000, 3374,
	200, -1000, 4705, 645, 3936, 36374, -1000, -1000, -1000, -1000,
	-1000, -1000, 3417, 3711, 639, -1000, 2786, -1000, 3786, 3795,
	3753, -1000, 4088, 46111, -1000, 1058, -1000, 87655, 15020, -1000,
	36374, 127, -1000, 126, -1000, -1000, 1367, 54365, -1000, 1059,
	87655, 123, -1000, 2129, 41514, 8527, -1000, -1000, 3685, 36374,
	3681, -1000, 3695, -1000, -1000, -1000, 4698, 4698, -1000, -1000,
	4698, 4698, 3448, 4776, 122, -1000, 45091, 4088, -1000, 3391,
	112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3915, 1057, -1000, -1000, 3826, -1000, -1000,
	3560, 3557, 2714, 2367, 1049, 1056, 1504, 1429, 1419, 1058,
	111, 3834, 115232, 7663, -1000, -1000, 411, -1000, -1000, 112797,
	4212, 3030, 1681, -1000, 2547, -1000, -1000, -1000, 87655, -1000,
	-1000, 4540, 4538, -1000, -1000, 87655, 1684, -1000, 4535, 4533,
	87655, -1000, 2766, -1000, 2437, 3921, 2271, 995, 36374, 2931,
	-1000, 26581, 1474, 87655, 2714, 1049, -1000, 3401, 1474, 4536,
	618, 68010, -1000, 4784, -1000, 45606, -1000, 4700, -1000, 2918,
	-1000, -1000, -1000, 68515, 36374, 36374, 2440, 4537, 1039, 4537,
	87655, 4537, -1000, -1000, 1038, 3761, 1037, -1000, 4524, -1000,
	-1000, 36374, 2811, 3833, -1000, -1000, -1000, 1843, -1000, 1840,
	-1000, 87655, 2416, 475, 87655, -1000, 1033, 3491, -1000, 112797,
	-1000, 112797, 112797, 36374, -1000, -1000, -1000, 87655, -1000, -1000,
	87655, 87655, 87655, 87655, 4555, -1000, 473, 429, 2057, 1474,
	4555, -1000, 179, -1000, 4699, 176, -1000, 15020, -1000, -1000,
	-1000, -1000, 29173, 1035, 1030, 727, 616, 37916, 37916, 37916,
	174, 36374, 1047, 109, 108, -1000, 3284, 3344, 3437, 3404,
	36374, 26581, -1000, 3443, 15020, -1000, -1000, 615, 3934, -1000,
	-1000, -1000, 87655, 3769, 3762, 65485, -1000, -1000, -1000, 106,
	105, -1000, -1000, -1000, -1000, 87655, 90, -1000, 111336, 41000,
	164, 26581, 6825, 3549, 87655, 3667, 15020, 3684, 4049, 4776,
	4776, 4776, 4776, 57404, 4447, 56899, -1000, -1000, 26581, -1000,
	-1000, -1000, -1000, -1000, 58919, -1000, 3915, -1000, 1803, 46616,
	2440, 3391, -1000, -1000, 2367, 3826, 3562, 4536, -1000, 1500,
	1495, 4535, 2790, 1015, -1000, 2423, -1000, -1000, 2985, 1009,
	1928, -1000, -1000, 4698, -1000, -1000, 2765, -1000, 2900, 2893,
	-1000, -1000, -1000, 4697, 948, 1830, -1000, 2739, -1000, 3929,
	3926, 3742, -1000, -1000, -1000, -1000, 7493, 8364, 4696, 87655,
	-1000, -1000, 1474, 1952, 3562, 87655, -1000, -1000, -1000, 1006,
	88, -1000, 163, -1000, -1000, -1000, 86, -1000, 4769, 72,
	71, 3828, 87655, 3828, 955, 3828, 51202, 1384, 3761, -1000,
	8156, 995, -1000, 36374, 87655, 87655, -1000, -1000, 1824, -1000,
	2312, 1897, 2312, 60, 54, 52, 7959, 161, 161, 1863,
	-1000, 138, -1000, -1000, -1000, 4107, -1000, -1000, 87655, 986,
	37402, -1000, 36374, 36374, 984, -1000, 3012, -1000, 42542, 2451,
	2211, 7023, 3012, 3012, 15020, -1000, -1000, -1000, 3711, 3349,
	3327, -1000, 3397, -1000, 3396, 3414, 3364, -1000, -1000, -1000,
	-1000, 3440, 468, 4048, 4047, 375, 4695, 2237, 49, -1000,
	87655, 3650, 3570, -1000, 43056, -1000, 3578, -1000, -1000, -1000,
	3663, 3751, -1000, -1000, 3662, 1036, 3674, -1000, -1000, -1000,
	-1000, 115, -1000, 56394, 115, -1000, -1000, 48, -1000, -1000,
	1803, -1000, 47, -1000, 963, 4524, 36374, 3915, 3826, 3391,
	2367, -1000, -1000, -1000, -1000, 4554, 982, 46111, -1000, 2456,
	36374, -1000, -1000, -1000, 87655, 3029, 68010, 68010, 1058, 70013,
	87655, -1000, -1000, 3732, -1000, 3745, 2823, 2823, 435, 1886,
	2270, -1000, -1000, 87655, 1951, 1474, 611, -1000, 4781, -1000,
	68515, -1000, -1000, 4152, -1000, 42, -1000, 2481, 4088, 610,
	-1000, 1384, -1000, -1000, 15020, 2416, 2416, 87655, -1000, -1000,
	-1000, 4046, -1000, 68010, -1000, -1000, -1000, 87655, 59424, -1000,
	-1000, -1000, 41, 30, 37402, -1000, 2198, 4582, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 609, 3923, 3922, -1000, -1000,
	3377, -1000, 3359, -1000, 3711, -1000, 87655, 87655, 87655, -1000,
	-1000, 87655, -1000, 981, -1000, -1000, 3650, -1000, 41514, 41514,
	4415, -1000, 41514, -1000, 3548, 978, -1000, 65485, -1000, -1000,
	3709, 87655, 3806, 973, -1000, -1000, 115, -1000, -1000, 58919,
	-1000, -1000, 46616, 87655, 87655, 7788, 1803, 3391, 3915, 3826,
	4533, 46111, 12, 68010, 7718, -1000, -1000, 2210, 110, 95,
	4535, -1000, -1000, 3192, -1000, -1000, 4420, -1000, -1000, -1000,
	28, 1474, 87655, -1000, -1000, -1000, -1000, 969, 2862, -1000,
	2862, 3921, -1000, -1000, -1000, -1000, -1000, 2416, 87655, -1000,
	-1000, 429, -1000, -1000, 1, 2206, -1000, -1000, 1537, 36888,
	-1000, 3338, 3335, -1000, -1000, 3918, 3851, 459, 380, -1000,
	36374, -1000, 6825, 6825, -1000, 6825, 3577, 87150, -25, 3277,
	0, -1000, 36374, -1000, -1000, -1000, -1000, 4524, -1000, 3915,
	1803, 3391, 1803, -5, -1000, 2790, 959, -1000, 4212, 4149,
	4105, -1000, -1000, 955, 955, -1000, 1474, 36374, -1000, 2862,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3330, 3321, 3439,
	55889, 87655, 87655, 87655, 7575, 87655, -6, -1000, 110849, 3554,
	3805, 3730, -10, 87655, 1803, -1000, 3915, 4088, -1000, 46111,
	4554, 26070, 2980, 1908, 1900, -1000, -1000, -1000, -18, 2862,
	-1000, -1000, -1000, 4514, 1113, -1000, -1000, -1000, -1000, -1000,
	-24, 3711, 87150, 3564, 1960, 4780, -1000, -1000, -1000, 3709,
	-1000, -1000, -1000, 1803, -1000, -1000, 4533, -53, -1000, -1000,
	-1000, -1000, -1000, 2456, 4530, 4466, -1000, 55889, 36374, -1000,
	576, -1000, -1000, 3374, 3552, 3552, 4777, 3666, 3274, -1000,
	1803, -1000, 26070, 68010, 2892, 2881, 3825, -31, -1000, 3344,
	3374, 3711, -1000, 946, 87655, 3805, 4088, -1000, 928, 68010,
	68010, 87655, 522, 3711, 3344, -1000, 87150, 3575, -1000, -1000,
	26070, -1000, -1000, -1000, 4776, -1000, 3711, -61, 925, -66,
	-1000, -1000, 87150, -1000, -73, -1000,
}

var yyPgo = [...]int16{
	0, 5380, 5375, 3400, 120, 0, 82, 9326, 5369, 50,
	284, 355, 5366, 125, 88, 708, 134, 96, 275, 362,
	5354, 5346, 5345, 5344, 36, 5341, 348, 5092, 11469, 10501,
	130, 5339, 290, 3276, 5337, 372, 292, 198, 5336, 222,
	5335, 5332, 151, 197, 5331, 273, 5324, 428, 5317, 28,
	5316, 5315, 270, 147, 378, 423, 413, 415, 5314, 332,
	383, 326, 334, 327, 5309, 12673, 388, 3252, 12, 5308,
	5307, 390, 5306, 5305, 5300, 320, 5298, 261, 5295, 5294,
	5292, 5291, 16, 367, 5291, 5289, 329, 5288, 5287, 5286,
	111, 5283, 5280, 5279, 5277, 276, 317, 310, 5276, 266,
	331, 578, 224, 13376, 14507, 5274, 369, 164, 4649, 184,
	15533, 5273, 18836, 5272, 5271, 18804, 17735, 17728, 5270, 17620,
	16722, 129, 220, 219, 335, 347, 403, 283, 424, 550,
	377, 24, 196, 374, 5269, 5267, 5266, 149, 5265, 5264,
	67, 57, 314, 5261, 5260, 85, 27, 55, 421, 371,
	5259, 5258, 419, 5256, 5255, 14568, 76, 188, 5254, 92,
	5253, 323, 325, 68, 54, 5252, 321, 271, 296, 41,
	259, 179, 62, 182, 324, 5249, 5247, 5246, 5245, 64,
	255, 94, 7371, 450, 443, 190, 176, 171, 154, 5244,
	216, 212, 5243, 5242, 5239, 5238, 5237, 5236, 5235, 5233,
	5232, 5230, 5229, 5228, 5226, 5224, 5222, 5221, 5218, 5217,
	5216, 5215, 34, 35, 5214, 5212, 253, 249, 267, 307,
	5211, 309, 183, 7, 29, 165, 131, 5210, 5205, 5203,
	5200, 25, 90, 15, 5195, 5194, 5193, 360, 5188, 416,
	5185, 5183, 239, 299, 5182, 5181, 3447, 548, 3433, 5178,
	109, 300, 5177, 5173, 5172, 152, 5171, 5169, 5168, 46,
	5168, 53, 77, 5166, 39, 570, 341, 280, 402, 38,
	282, 427, 263, 5165, 420, 376, 375, 98, 250, 14,
	218, 169, 264, 5164, 251, 5163, 5162, 5162, 417, 303,
	252, 235, 122, 166, 5160, 433, 5155, 414, 5154, 5150,
	5146, 5145, 316, 63, 80, 5142, 225, 5141, 105, 5139,
	5136, 101, 312, 19, 58, 5134, 42, 114, 40, 144,
	5133, 81, 311, 1, 21, 11, 5128, 444, 5127, 84,
	5126, 291, 262, 5125, 318, 272, 5124, 153, 74, 6,
	5, 5123, 2, 8, 4, 17, 257, 5122, 45, 5116,
	97, 5115, 242, 159, 124, 5114, 127, 5113, 89, 43,
	123, 5112, 5111, 5108, 138, 49, 5107, 110, 5106, 173,
	288, 5105, 5101, 5099, 20, 47, 117, 71, 75, 52,
	31, 91, 56, 5098, 5097, 37, 106, 5096, 208, 23,
	9, 108, 285, 100, 5095, 22, 30, 18, 398, 1862,
	352, 356, 5093, 277, 385, 386, 437, 3607, 128, 379,
	33, 204, 5091, 200, 5090, 72, 5089, 95, 59, 135,
	69, 61, 5088, 44, 195, 5087, 103, 384, 5085, 293,
	2907, 19398, 5083, 141, 328, 435, 73, 5082, 214, 148,
	5079, 60, 333, 115, 426, 401, 5078, 343, 5078, 5077,
	5076, 210, 206, 116, 5075, 132, 5074, 5072, 5071, 5069,
	392, 5068, 5064, 5062, 5060, 5059, 5058, 5055, 5053, 5052,
	5051, 5049, 5048, 5047, 5046, 5039, 5038, 5034, 5030, 5029,
	430, 442, 5028, 345, 5027, 441, 342, 5025, 396, 5024,
	139, 5022, 387, 338, 5020, 5019, 5018, 339, 446, 412,
	407, 5017, 156, 400, 48, 5016, 78, 418, 3727, 186,
	119, 83, 5015, 5012, 185, 112, 5010, 181, 5008, 436,
	269, 5006, 5005, 422, 174, 157, 5004, 5003, 5000, 4998,
	4997, 4996, 4994, 4990, 4989, 4988, 4987, 4986, 4985, 4983,
	4982, 4981, 4980, 4979, 4976, 4974, 4970, 4969, 4968, 4965,
	4963, 4962, 4958, 4956, 4955, 4954, 4953, 4952, 4951, 4950,
	4947, 4946, 4944, 4939, 4935, 4932, 4931, 4930, 4929, 4928,
	4923, 4921, 4920, 4919, 4916, 4914, 4911, 4907, 4906, 4904,
	4903, 4900, 4899, 4896, 4894, 4892, 4891, 4889, 234, 221,
	4888, 4887, 4886, 361, 353, 405, 4884, 187, 281, 406,
	192, 4883, 295, 425, 223, 226, 102, 4882, 4881, 126,
	4878, 4877, 4876, 410, 4874, 429, 4872, 4871, 4870, 4868,
	168, 118, 4864, 87, 160, 438, 51, 4861, 4860, 209,
	289, 121, 113, 4859, 4858, 4857, 4856, 4854, 180, 4853,
	4851, 233, 79, 4850, 287, 245, 434, 3121, 350, 432,
	4848, 404, 4847, 1021, 408, 4846, 228, 254, 107, 351,
	4845, 99, 4844, 4839, 298, 409, 194, 344, 4838, 4837,
	70, 4836, 4835, 227, 297, 4833, 4831, 4829, 4827, 4825,
	4823, 3, 104, 26, 10, 4821, 4819, 32, 4818, 4816,
	274, 4814, 4811, 365, 93, 86, 4808, 4807, 4806, 15730,
	279, 4805, 4802, 243, 13, 4801, 4801, 3508, 411, 4800,
	66,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 19, 19, 396, 396, 430, 430,
	430, 33, 33, 34, 34, 35, 35, 36, 36, 49,
	49, 49, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 13, 13, 14, 14, 62, 431, 431,
	32, 32, 16, 16, 18, 18, 700, 700, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 15, 15, 17,
	17, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 696, 696,
	696, 696, 696, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 101, 103, 102, 102,
	102, 110, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 69, 69,
	96, 96, 100, 100, 99, 99, 99, 99, 97, 97,
	70, 70, 70, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 83, 83, 85, 85, 85, 85, 85,
	86, 86, 86, 87, 12, 12, 12, 12, 12, 12,
	12, 12, 88, 88, 89, 81, 90, 90, 218, 218,
	91, 91, 91, 92, 92, 92, 93, 93, 94, 94,
	94, 94, 303, 303, 303, 653, 653, 132, 132, 132,
	132, 132, 132, 132, 82, 82, 95, 95, 95, 72,
	73, 73, 76, 76, 75, 74, 74, 77, 77, 77,
	80, 80, 130, 130, 130, 78, 78, 79, 165, 165,
	165, 158, 158, 158, 158, 158, 158, 167, 167, 167,
	167, 166, 166, 166, 166, 166, 168, 168, 168, 168,
	168, 129, 129, 108, 108, 108, 108, 108, 108, 126,
	126, 126, 109, 109, 109, 109, 109, 109, 109, 109,
	104, 104, 104, 106, 107, 21, 122, 122, 123, 123,
	111, 111, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 118, 118, 114, 114, 697, 697, 698,
	698, 105, 105, 105, 105, 105, 105, 115, 116, 119,
	120, 117, 117, 117, 117, 699, 127, 127, 127, 128,
	128, 113, 113, 155, 155, 157, 157, 159, 159, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 156, 156, 131, 131, 136, 136, 133, 133, 162,
	162, 161, 161, 179, 179, 182, 182, 183, 183, 181,
	181, 181, 181, 181, 181, 181, 181, 148, 148, 149,
	149, 150, 150, 152, 153, 153, 153, 153, 151, 151,
	154, 154, 154, 184, 184, 184, 184, 184, 184, 184,
	273, 273, 272, 272, 275, 275, 275, 275, 276, 276,
	277, 277, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 433, 433, 434, 434, 434, 435,
	435, 435, 289, 289, 289, 289, 289, 289, 290, 290,
	290, 290, 291, 291, 292, 292, 293, 293, 293, 294,
	294, 295, 295, 297, 298, 298, 298, 299, 299, 299,
	300, 300, 300, 301, 301, 279, 279, 221, 221, 221,
	242, 282, 282, 281, 281, 281, 281, 284, 284, 284,
	284, 284, 283, 283, 285, 285, 286, 286, 287, 287,
	288, 288, 302, 302, 311, 311, 307, 307, 308, 309,
	309, 310, 310, 658, 305, 305, 304, 304, 306, 317,
	317, 319, 319, 318, 318, 318, 318, 320, 320, 321,
	321, 312, 312, 313, 313, 314, 314, 314, 315, 315,
	316, 316, 316, 316, 316, 322, 327, 326, 326, 338,
	338, 328, 328, 329, 330, 330, 333, 333, 332, 332,
	334, 334, 334, 335, 335, 335, 336, 336, 331, 331,
	337, 337, 340, 340, 341, 341, 341, 341, 341, 341,
	341, 341, 342, 342, 342, 342, 339, 339, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 344, 344, 344,
	344, 344, 345, 345, 346, 346, 347, 347, 323, 323,
	324, 324, 324, 324, 324, 324, 325, 325, 185, 432,
	432, 211, 211, 211, 211, 211, 233, 233, 212, 212,
	216, 186, 213, 213, 219, 219, 217, 214, 214, 187,
	296, 296, 188, 215, 215, 189, 189, 236, 236, 237,
	237, 243, 243, 243, 252, 252, 253, 253, 255, 255,
	256, 256, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 257, 257, 262,
	263, 263, 263, 263, 263, 263, 258, 258, 264, 269,
	269, 269, 269, 265, 265, 265, 265, 42, 42, 407,
	407, 407, 407, 407, 407, 407, 407, 406, 406, 406,
	405, 405, 405, 405, 405, 268, 268, 615, 615, 267,
	267, 701, 701, 642, 642, 238, 238, 239, 239, 240,
	240, 241, 241, 225, 225, 225, 225, 225, 234, 234,
	235, 235, 226, 226, 228, 229, 230, 230, 230, 230,
	230, 223, 220, 220, 220, 227, 227, 227, 260, 260,
	261, 261, 231, 231, 231, 232, 232, 224, 224, 163,
	163, 163, 164, 164, 164, 222, 222, 190, 190, 190,
	190, 190, 190, 409, 409, 409, 409, 409, 409, 409,
	409, 348, 348, 349, 349, 352, 352, 352, 355, 363,
	363, 363, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 411, 411, 412, 412, 413, 413, 414, 414,
	350, 350, 351, 351, 356, 356, 357, 357, 358, 358,
	358, 358, 359, 362, 362, 415, 415, 416, 416, 417,
	10, 41, 353, 367, 367, 368, 368, 368, 368, 371,
	371, 371, 371, 374, 374, 374, 419, 419, 422, 422,
	424, 424, 424, 424, 420, 420, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 702, 702, 37, 37, 37, 418, 418, 421,
	421, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	354, 354, 370, 370, 370, 370, 370, 370, 370, 372,
	372, 361, 361, 360, 360, 376, 376, 375, 375, 375,
	375, 380, 380, 380, 380, 380, 377, 378, 379, 379,
	379, 379, 379, 381, 381, 382, 382, 383, 384, 384,
	385, 385, 385, 410, 410, 389, 389, 389, 389, 390,
	390, 391, 391, 392, 191, 191, 373, 373, 393, 393,
	395, 395, 394, 394, 397, 397, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 398, 398, 24,
	24, 399, 399, 11, 508, 508, 508, 508, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 401,
	401, 401, 402, 403, 403, 703, 703, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 532,
	533, 533, 534, 534, 535, 536, 536, 454, 454, 454,
	647, 647, 647, 650, 650, 650, 650, 649, 649, 651,
	651, 455, 456, 456, 456, 456, 485, 485, 488, 489,
	489, 489, 491, 491, 491, 460, 460, 460, 460, 460,
	460, 460, 457, 457, 461, 461, 486, 486, 487, 487,
	492, 490, 490, 458, 458, 458, 458, 458, 459, 459,
	195, 195, 195, 195, 195, 493, 493, 196, 196, 196,
	494, 494, 495, 495, 496, 496, 197, 198, 198, 198,
	198, 198, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 47, 47, 48, 48, 443,
	98, 98, 98, 98, 442, 84, 84, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 365, 365, 366, 366, 366, 366, 366, 366,
	386, 387, 387, 388, 388, 388, 388, 449, 449, 449,
	449, 654, 654, 655, 655, 656, 656, 656, 657, 657,
	657, 657, 657, 659, 659, 659, 659, 659, 660, 121,
	121, 121, 661, 661, 662, 662, 664, 664, 664, 664,
	664, 669, 669, 663, 663, 670, 670, 670, 453, 688,
	688, 671, 671, 652, 652, 451, 451, 672, 672, 672,
	674, 674, 673, 673, 673, 673, 673, 679, 679, 680,
	680, 682, 677, 677, 678, 678, 685, 675, 675, 705,
	705, 676, 676, 683, 683, 704, 704, 681, 681, 681,
	684, 684, 684, 684, 686, 686, 452, 452, 452, 452,
	259, 259, 687, 687, 687, 687, 526, 526, 526, 526,
	527, 528, 528, 528, 528, 597, 597, 600, 529, 529,
	530, 531, 537, 538, 538, 538, 538, 538, 538, 538,
	539, 539, 539, 539, 539, 539, 539, 539, 539, 539,
	539, 539, 539, 539, 539, 539, 543, 543, 588, 588,
	706, 706, 544, 544, 545, 545, 589, 589, 591, 591,
	591, 591, 546, 590, 590, 592, 547, 547, 547, 547,
	547, 547, 547, 547, 547, 547, 547, 547, 547, 568,
	569, 569, 598, 598, 598, 598, 594, 594, 593, 593,
	606, 606, 570, 570, 571, 571, 571, 602, 602, 603,
	603, 604, 604, 572, 572, 572, 572, 573, 521, 521,
	522, 522, 574, 574, 575, 576, 576, 605, 605, 637,
	637, 637, 637, 638, 638, 645, 639, 640, 640, 641,
	542, 542, 542, 542, 542, 586, 586, 587, 587, 643,
	643, 644, 644, 524, 524, 525, 437, 437, 438, 436,
	436, 436, 439, 439, 440, 440, 440, 440, 648, 648,
	648, 648, 648, 648, 648, 648, 648, 648, 648, 646,
	646, 646, 646, 271, 271, 274, 274, 266, 266, 689,
	689, 689, 689, 689, 689, 689, 691, 691, 691, 270,
	270, 9, 9, 9, 9, 693, 693, 497, 497, 497,
	690, 690, 690, 690, 690, 692, 692, 692, 692, 498,
	498, 408, 408, 408, 408, 408, 408, 426, 426, 38,
	38, 39, 40, 40, 43, 43, 43, 43, 44, 44,
	46, 46, 46, 46, 427, 428, 428, 429, 429, 548,
	548, 549, 610, 610, 610, 610, 607, 607, 609, 608,
	608, 550, 611, 611, 551, 551, 552, 553, 612, 612,
	616, 616, 617, 617, 617, 617, 617, 618, 618, 619,
	619, 620, 620, 621, 621, 554, 622, 622, 555, 555,
	556, 556, 624, 624, 629, 629, 629, 557, 557, 557,
	558, 558, 558, 558, 625, 625, 630, 630, 630, 630,
	630, 630, 630, 280, 280, 559, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 561, 561, 561, 623, 623,
	623, 562, 633, 633, 626, 626, 631, 631, 631, 631,
	631, 613, 613, 694, 694, 694, 695, 695, 563, 564,
	564, 627, 627, 632, 632, 565, 566, 628, 628, 628,
	628, 567, 567, 614, 614, 634, 634, 635, 635, 636,
	636, 53, 53, 53, 52, 52, 169, 169, 172, 172,
	172, 172, 172, 175, 176, 177, 178, 173, 173, 170,
	171, 171, 174, 174, 137, 137, 138, 138, 140, 142,
	142, 142, 141, 143, 143, 139, 139, 144, 144, 144,
	144, 145, 145, 146, 146, 146, 146, 146, 147, 147,
	147, 147, 147, 55, 55, 55, 55, 54, 54, 56,
	56, 56, 56, 56, 56, 57, 57, 58, 58, 59,
	60, 60, 60, 61, 61, 63, 63, 64, 64, 462,
	462, 462, 462, 462, 462, 462, 462, 462, 462, 462,
	462, 463, 463, 707, 707, 707, 481, 481, 481, 464,
	470, 468, 465, 465, 466, 466, 466, 466, 480, 480,
	469, 467, 467, 467, 467, 467, 467, 499, 499, 500,
	500, 482, 482, 482, 482, 482, 482, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 523, 523, 471, 472,
	472, 473, 473, 474, 474, 475, 501, 501, 484, 484,
	484, 513, 513, 513, 506, 506, 506, 506, 506, 506,
	502, 502, 502, 502, 502, 503, 503, 507, 507, 507,
	507, 507, 520, 520, 520, 520, 520, 520, 520, 520,
	520, 520, 520, 520, 520, 520, 520, 520, 520, 520,
	520, 520, 520, 504, 504, 509, 509, 511, 511, 505,
	505, 514, 512, 512, 512, 510, 510, 50, 50, 45,
	45, 51, 51, 134, 135, 135, 450, 450, 450, 444,
	444, 665, 665, 665, 665, 665, 665, 665, 665, 665,
	665, 665, 665, 665, 665, 665, 665, 665, 667, 667,
	666, 666, 666, 668, 668, 668, 668, 668, 708, 708,
	441, 441, 441, 441, 445, 445, 540, 541, 446, 446,
	447, 447, 447, 447, 448, 448, 448, 448, 199, 244,
	244, 244, 244, 244, 244, 245, 245, 245, 200, 200,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 246, 246, 247, 247,
	201, 201, 202, 249, 249, 180, 180, 180, 180, 180,
	203, 203, 203, 250, 250, 251, 204, 204, 204, 204,
	205, 206, 206, 207, 20, 20, 208, 209, 22, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 210, 476,
	476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 515, 515, 477,
	477, 477, 477, 477, 477, 477, 477, 477, 477, 516,
	516, 517, 517, 478, 518, 518, 519, 519, 479, 577,
	577, 577, 577, 577, 577, 577, 577, 577, 577, 577,
	577, 577, 577, 577, 577, 577, 577, 577, 577, 577,
	577, 577, 577, 577, 577, 577, 578, 578, 578, 578,
	578, 578, 578, 578, 578, 578, 578, 578, 578, 578,
	578, 578, 578, 578, 578, 578, 578, 578, 578, 578,
	579, 580, 580, 580, 580, 580, 580, 26, 26, 581,
	582, 582, 582, 582, 595, 595, 596, 596, 599, 599,
	599, 601, 601, 601, 601, 601, 601, 601, 709, 709,
	583, 584, 584, 584, 584, 584, 584, 710, 710, 585,
	25, 25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 2,
	3, 0, 1, 3, 1, 3, 1, 0, 3, 3,
	4, 4, 4, 4, 3, 2, 1, 1, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 5, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 2, 2, 3,
	5, 4, 6, 3, 5, 4, 6, 4, 6, 5,
	7, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 3, 4,
	4, 6, 3, 3, 4, 3, 4, 4, 5, 4,
	5, 1, 1, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	5, 6, 3, 4, 1, 1, 2, 4, 1, 1,
	1, 2, 2, 2, 2, 1, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 6, 2, 3, 5, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 3, 1, 5, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	6, 4, 4, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 6, 4, 4, 4, 4, 5,
	7, 7, 9, 4, 6, 5, 5, 7, 7, 4,
	7, 4, 6, 6, 4, 5, 4, 5, 3, 11,
	8, 9, 8, 1, 0, 5, 5, 3, 3, 5,
	3, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 5, 3, 4, 1, 3, 3, 1,
	2, 2, 0, 1, 2, 0, 2, 3, 3, 3,
	4, 0, 1, 1, 1, 1, 2, 3, 4, 5,
	6, 8, 6, 6, 1, 3, 1, 3, 3, 5,
	1, 0, 1, 2, 4, 2, 0, 3, 3, 2,
	1, 3, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 4, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 3, 2, 3, 2,
	0, 1, 3, 2, 3, 5, 6, 2, 3, 3,
	4, 0, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 3, 0,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 3, 3, 2, 4, 1, 5,
	2, 5, 2, 5, 2, 1, 3, 3, 0, 1,
	0, 3, 0, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 0, 5, 0, 5, 0, 0,
	1, 1, 3, 1, 1, 3, 3, 1, 1, 1,
	2, 4, 4, 2, 3, 5, 5, 1, 3, 1,
	0, 1, 2, 3, 2, 4, 2, 3, 2, 0,
	1, 2, 0, 9, 9, 2, 1, 4, 4, 4,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 3, 2, 3, 1, 4, 2, 3,
	2, 3, 2, 3, 1, 1, 2, 2, 4, 1,
	2, 3, 3, 4, 5, 4, 5, 4, 2, 2,
	2, 1, 1, 0, 5, 2, 2, 2, 3, 1,
	0, 1, 3, 9, 1, 2, 0, 7, 7, 0,
	10, 6, 0, 4, 5, 2, 0, 2, 4, 0,
	1, 1, 0, 5, 2, 4, 1, 1, 4, 5,
	4, 0, 2, 0, 1, 0, 1, 5, 1, 0,
	2, 0, 2, 6, 2, 0, 1, 3, 2, 4,
	0, 1, 3, 2, 1, 0, 1, 3, 3, 2,
	0, 2, 2, 2, 3, 3, 4, 1, 3, 3,
	2, 7, 12, 1, 3, 2, 3, 3, 1, 2,
	2, 2, 2, 1, 2, 13, 2, 2, 0, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 3, 3,
	3, 3, 0, 3, 3, 0, 3, 0, 7, 7,
	3, 0, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 9,
	7, 9, 7, 9, 8, 4, 6, 2, 3, 3,
	2, 5, 1, 1, 2, 3, 2, 1, 1, 2,
	1, 2, 2, 4, 3, 5, 1, 3, 2, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 6, 5, 3, 5, 1, 0, 1, 3,
	2, 1, 1, 2, 3, 4, 3, 2, 4, 4,
	6, 4, 4, 2, 5, 2, 0, 5, 5, 5,
	1, 1, 1, 1, 3, 0, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 1,
	1, 3, 3, 3, 3, 3, 2, 1, 3, 2,
	3, 5, 5, 5, 2, 1, 3, 6, 6, 6,
	6, 6, 8, 8, 6, 6, 7, 9, 9, 8,
	10, 6, 6, 6, 6, 6, 6, 6, 8, 6,
	8, 6, 8, 7, 9, 6, 8, 7, 9, 8,
	10, 8, 10, 9, 11, 8, 10, 9, 11, 8,
	8, 7, 6, 6, 6, 6, 8, 8, 8, 8,
	6, 9, 0, 2, 2, 1, 2, 2, 2, 2,
	3, 1, 3, 3, 1, 5, 3, 9, 12, 7,
	7, 3, 2, 1, 3, 1, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	4, 5, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 5, 1, 4, 0, 2, 3,
	0, 1, 1, 2, 1, 17, 21, 1, 1, 2,
	1, 3, 1, 1, 1, 3, 1, 2, 0, 1,
	2, 4, 1, 1, 1, 1, 1, 3, 0, 1,
	0, 1, 1, 4, 0, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 2, 0, 9, 11, 12, 14,
	3, 0, 3, 4, 4, 0, 6, 4, 9, 7,
	5, 3, 5, 7, 9, 1, 3, 1, 3, 5,
	5, 6, 6, 4, 6, 6, 5, 7, 9, 6,
	6, 5, 4, 4, 3, 6, 6, 6, 6, 4,
	7, 5, 8, 7, 8, 6, 5, 8, 1, 0,
	1, 0, 4, 6, 5, 8, 2, 0, 2, 2,
	2, 1, 5, 2, 0, 2, 6, 6, 6, 10,
	6, 6, 6, 9, 9, 6, 6, 9, 6, 7,
	7, 6, 2, 2, 2, 2, 1, 2, 1, 0,
	1, 2, 10, 13, 5, 4, 4, 2, 0, 2,
	2, 1, 0, 11, 14, 12, 15, 11, 4, 0,
	2, 1, 8, 11, 8, 7, 9, 1, 1, 3,
	3, 5, 6, 1, 3, 1, 3, 1, 3, 3,
	7, 9, 9, 8, 6, 1, 0, 1, 3, 3,
	1, 5, 3, 8, 11, 6, 1, 0, 5, 2,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 1, 3, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 3, 3, 1, 3, 1, 3, 11,
	13, 5, 1, 2, 2, 1, 1, 3, 5, 1,
	3, 7, 2, 0, 5, 5, 10, 8, 2, 0,
	2, 0, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 0, 5, 0, 8, 1, 1, 8, 11,
	6, 8, 1, 3, 1, 1, 3, 4, 7, 6,
	5, 5, 5, 5, 1, 3, 4, 4, 4, 3,
	4, 3, 1, 4, 0, 8, 5, 5, 6, 7,
	7, 7, 4, 4, 5, 11, 10, 10, 2, 2,
	0, 13, 2, 0, 1, 3, 5, 5, 3, 6,
	2, 1, 0, 2, 4, 0, 1, 3, 6, 8,
	8, 1, 3, 5, 5, 10, 10, 11, 11, 5,
	5, 6, 10, 1, 0, 2, 0, 1, 0, 2,
	2, 1, 1, 0, 4, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 4, 4, 5, 2, 0, 3,
	1, 3, 4, 3, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 3, 3, 3,
	0, 1, 4, 2, 2, 2, 2, 2, 3, 2,
	2, 3, 0, 2, 2, 1, 1, 1, 0, 2,
	4, 5, 6, 4, 5, 2, 3, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 3, 2, 5, 4, 3, 3,
	3, 3, 3, 1, 1, 0, 2, 3, 0, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 0, 3,
	6, 3, 5, 3, 5, 3, 5, 2, 0, 2,
	0, 1, 2, 2, 2, 3, 3, 2, 2, 3,
	3, 1, 1, 3, 3, 2, 1, 1, 8, 8,
	11, 5, 7, 6, 9, 5, 2, 0, 3, 3,
	3, 7, 7, 10, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 5, 1, 3, 2, 2, 2,
	2, 2, 1, 2, 2, 4, 3, 2, 2, 2,
	2, 2, 2, 3, 2, 2, 2, 2, 5, 5,
	5, 5, 5, 1, 3, 1, 2, 3, 0, 3,
	1, 2, 1, 1, 1, 3, 0, 1, 3, 1,
	3, 1, 3, 6, 4, 0, 5, 5, 5, 1,
	2, 4, 5, 1, 1, 1, 1, 3, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 2, 1, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 2, 1, 3, 7, 4, 1, 3,
	4, 6, 4, 8, 1, 1, 1, 1, 7, 2,
	2, 2, 2, 3, 0, 2, 2, 0, 2, 2,
	1, 2, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 4, 4, 3, 4, 4, 1, 1, 1, 0,
	2, 2, 5, 3, 0, 1, 1, 1, 1, 1,
	3, 9, 12, 3, 0, 6, 2, 3, 2, 3,
	2, 2, 2, 3, 2, 0, 2, 5, 3, 0,
	2, 2, 2, 3, 1, 3, 1, 2, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 8, 9, 8,
	6, 6, 9, 9, 9, 7, 10, 1, 1, 8,
	8, 8, 8, 8, 8, 8, 9, 8, 8, 2,
	0, 1, 1, 2, 1, 2, 1, 2, 2, 6,
	6, 6, 6, 6, 6, 6, 9, 9, 6, 6,
	6, 8, 6, 8, 8, 8, 8, 6, 8, 6,
	8, 7, 9, 7, 9, 6, 6, 6, 6, 6,
	6, 6, 7, 7, 6, 9, 9, 6, 6, 6,
	6, 6, 6, 8, 8, 8, 6, 7, 6, 6,
	7, 8, 8, 8, 10, 9, 8, 1, 0, 5,
	5, 4, 6, 6, 1, 0, 1, 2, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	4, 11, 11, 11, 13, 9, 11, 1, 1, 6,
	2, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -463, -179, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, -449, -450, -451,
	-452, -524, -525, -526, -527, -528, -529, -530, -532, -533,
	-534, -535, -536, -531, -537, -538, -539, -540, -541, -542,
	-543, -544, -545, -546, -547, -568, -569, -570, -571, -572,
	-573, -574, -575, -576, -548, -549, -550, -551, -552, -553,
	-554, -555, -556, -557, -558, -559, -560, -561, -562, -563,
	-564, -565, -566, -567, -454, -455, -462, -464, -465, -466,
	-467, -468, -469, -470, -471, -472, -473, -474, -475, -456,
	-457, -461, -458, -459, -195, -196, -197, -198, -199, -200,
	-201, -202, -203, -204, -205, -206, -207, -208, -209, -210,
	-476, -477, -478, -479, -577, -578, -579, -580, -581, -582,
	-583, -584, -585, 266, 212, -181, -182, -294, 111, 26,
	22, 27, 394, 390, 302, 93, 401, 191, 436, 228,
	407, 413, 397, 378, 290, 405, 274, 475, -490, 428,
	223, 395, 220, 259, 250, 280, 345, 222, 273, 249,
	328, 472, 358, 329, 333, 462, 226, 418, 109, 214,
	-184, -183, -293, 531, 119, 202, 63, 67, -301, 36,
	518, 86, 540, -707, 486, 457, -707, 96, 97, 98,
	99, 531, -252, 115, -409, -373, -35, 33, 414, 247,
	261, 62, 464, 454, 225, 276, 284, 422, 103, -437,
	268, 449, 375, 194, 438, 387, 443, 512, -613, 406,
	71, 453, 451, 58, 289, 473, 471, 40, 67, 307,
	419, 480, 85, 284, 104, 199, 225, 236, 247, 261,
	286, 71, -615, 62, 375, 385, 387, 409, 414, 422,
	443, 412, 460, 268, 406, 103, 449, 438, 454, 464,
	276, 40, 322, 384, -404, -407, -406, 464, 261, 307,
	512, 62, 458, 443, 247, 449, 364, 103, 406, 71,
	67, 419, 480, 85, 284, 225, 236, 438, 454, 194,
	268, 276, -615, 387, 414, 422, 375, 412, 460, 85,
	364, 284, -647, 58, 423, 457, -648, -646, -271, 56,
	217, 414, 347, 406, 488, -5, 4, -27, -28, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 22,
	201, 203, 204, 205, 55, 206, 207, 208, 210, 211,
	212, 88, 70, 213, 214, 215, 24, 216, 218, 219,
	220, 221, 222, 223, 123, 226, 227, 228, 229, 230,
	141, 231, 101, 232, 233, 234, 235, 236, 111, 237,
	154, 238, 120, 121, 90, 246, 247, 248, 249, 250,
	251, 253, 254, 98, 149, 150, 255, 89, 256, 257,
	258, 259, 260, 261, 176, 27, 262, 138, 264, 148,
	265, 267, 136, 42, 268, 270, 271, 272, 273, 274,
	275, 276, 277, 279, 281, 282, 91, 283, 153, 165,
	285, 286, 287, 288, 289, 291, 294, 295, 151, 296,
	297, 298, 28, 299, 300, 301, 302, 303, 304, 305,
	306, 307, 308, 309, 310, 312, 313, 314, 96, 315,
	317, 318, 145, 503, 319, 320, 321, 322, 92, 324,
	327, 328, 329, 332, 333, 334, 335, 336, 337, 105,
	85, 338, 99, 340, 341, 342, 343, 344, 345, 346,
	131, 348, 349, 350, 351, 352, 353, 354, 357, 110,
	358, 359, 32, 139, 122, 504, 505, 502, 144, 62,
	506, 507, 124, 501, 508, 102, 364, 365, 366, 367,
	368, 369, 370, 129, 371, 128, 373, 374, 375, 377,
	378, 379, 380, 382, 383, 384, 385, 386, 112, 387,
	152, 143, 388, 389, 390, 391, 84, 132, 393, 394,
	395, 396, 397, 398, 399, 34, 400, 401, 402, 35,
	403, 404, 405, 407, 408, 409, 410, 127, 412, 413,
	146, 415, 416, 87, 417, 418, 419, 420, 421, 422,
	93, 425, 427, 428, 429, 430, 431, 107, 433, 434,
	435, 436, 437, 438, 113, 114, 439, 440, 441, 147,
	442, 443, 445, 446, 104, 448, 449, 108, 451, 452,
	453, 454, 455, 458, 460, 462, 463, 464, 465, 466,
	467, 468, 142, 469, 50, 472, 473, 474, 97, 475,
	476, 477, 478, 155, 183, 479, 480, 481, 482, 483,
	485, 168, 486, 140, 487, 498, 499, 57, 37, 173,
	169, 189, 179, 178, 224, 188, 187, 29, 278, 175,
	292, 293, 500, 186, 171, 185, 166, 160, 162, 163,
	159, 161, 156, 164, 158, 126, 157, 325, 339, 181,
	182, 355, 356, 360, 170, 361, 362, 376, 177, 174,
	411, 426, 172, 444, 184, 459, 461, 86, 180, 489,
	490, 491, 492, 493, 133, 494, 495, 496, 497, 125,
	-650, -649, 56, 457, 423, -271, 21, 217, 58, 347,
	406, 414, 488, -707, 457, -707, 379, -707, 379, -5,
	423, 457, 56, 413, -5, 457, -7, -5, -502, -503,
	21, -507, 63, 392, 26, 22, -5, -502, 290, -503,
	-5, -460, -490, 118, 531, -179, -185, -186, -187, -188,
	-524, -525, 26, -241, 531, 79, -239, 531, 118, -271,
	56, 457, 423, 21, 531, -239, -496, 531, 21, 451,
	453, 374, 420, -242, -7, -248, -242, -246, 349, 382,
	91, 92, 193, 396, -102, 21, 285, 210, 64, 45,
	-101, 534, 535, 12, -248, -242, 21, -7, -7, 378,
	21, -5, -5, 536, -5, -21, -103, 7, -700, 67,
	-700, 74, 320, -518, -519, -103, 321, -132, -653, -104,
	-5, 4, -27, -29, 209, 115, 225, 25, 81, 242,
	116, 79, 44, 76, 52, 53, 75, 77, 46, 82,
	54, 80, 363, 78, 48, 450, 118, -170, -131, 470,
	316, 269, 509, -183, -184, -182, -181, -182, -293, -285,
	-286, 21, 41, -433, -431, -434, -5, 66, 541, -295,
	84, -297, -7, -295, 531, -3, -481, 30, -498, -497,
	-690, 318, 389, 252, 31, 73, -435, -433, 64, 73,
	-180, -179, -185, -186, -187, -188, -431, 67, 480, 84,
	419, 307, 286, 385, 460, 117, 199, 458, -614, 463,
	34, -19, -5, 28, -7, -15, -5, -156, 221, 279,
	-159, -5, 11, -160, 534, 535, 536, 537, 538, 539,
	525, 526, 527, 18, 19, 20, -15, 87, -15, 28,
	-7, 28, 246, 67, -7, 28, 336, -11, -508, -9,
	241, 245, 424, 4, -27, -28, -29, 85, 460, -7,
	-7, 340, -396, 28, -15, -7, -7, 531, 236, -11,
	-11, 453, 451, 453, 451, -433, 28, 21, -431, 28,
	21, -431, 28, -431, 28, 480, 67, 246, 93, 401,
	-442, -653, -15, -15, -7, -15, -441, -653, -29, -5,
	-11, -508, 321, 221, 279, -443, -156, -7, 28, -441,
	-7, -441, -7, -7, -7, -7, -7, 460, -11, -508,
	21, -11, 336, -508, 21, -7, -15, 28, 87, -15,
	-7, 383, 139, 28, -17, -15, 28, -13, -7, -7,
	28, -268, 28, -108, -109, 426, -111, -112, -118, -114,
	-117, -110, -699, -104, 186, 171, 172, 173, 174, 175,
	176, 187, 188, 170, 189, -119, -120, -115, -116, 184,
	56, 185, 166, 4, -27, 169, -105, 178, 179, 180,
	181, 182, -268, 28, 25, -33, 28, 221, 279, -33,
	-7, 28, -7, 28, -7, 28, 70, 336, -399, 28,
	-508, -399, 28, -399, 28, 480, 246, 67, 87, 340,
	460, 321, 480, 70, 414, -647, 423, -647, 219, 209,
	-497, 431, 64, 61, 527, 533, 57, -103, -103, -691,
	-103, 40, -270, -9, -103, 506, 57, 318, 209, -481,
	-498, -481, -103, -481, 61, -103, -5, -103, -249, 531,
	74, 61, 541, 383, 531, -259, 531, -259, -259, 104,
	-259, 74, 506, 64, 506, -239, -460, -485, -488, -489,
	86, -9, -490, 515, 473, -238, 116, -485, -486, -487,
	-492, -431, -485, 57, 318, 209, -485, -431, -7, -5,
	-494, 414, -495, 307, 67, 104, 247, -485, -244, -242,
	-247, -246, -247, -247, -247, -102, -102, -247, -247, -247,
	-102, 21, -247, -102, 21, -101, -101, -250, 531, -7,
	21, -20, 541, -18, -433, -18, -404, 514, -405, 464,
	261, 199, 286, 62, 117, -406, 385, 409, 458, 322,
	512, 307, -407, 247, 406, 443, 449, -516, 130, -519,
	-270, 531, -96, -99, 533, 529, -148, -55, -150, 130,
	-56, -57, -152, 68, 280, 69, -153, -53, 21, 41,
	-53, -53, 70, -170, -131, 532, 532, -273, -272, -275,
	-65, 536, -67, 534, 535, -155, 31, 516, -130, 471,
	40, -69, -68, 13, 531, -72, -70, -182, 29, 134,
	-78, -79, 293, 11, 62, 411, -5, -101, 6, -103,
	49, 43, 47, 9, 10, -653, -696, -110, 38, -132,
	-331, -71, -112, -697, -698, -117, -699, 185, 161, 162,
	225, 240, 243, 244, 330, 331, 241, 245, 424, 447,
	103, 239, 242, 512, 278, 356, 362, 376, 444, 459,
	461, 360, 224, 292, 325, 490, 491, 493, 494, 492,
	495, 496, 159, 160, 166, 164, 158, 339, 156, 163,
	157, 497, 173, 169, 189, 179, 178, 188, 187, 175,
	186, 171, 181, 182, 170, 174, 172, 56, 184, 180,
	-119, -120, -115, -116, -272, 74, 536, -96, -431, 531,
	531, 541, -295, -32, 531, -129, -65, 218, 354, 541,
	-690, 327, 66, 487, 252, -432, -431, 93, -5, 23,
	-435, -435, 532, -259, -431, 28, -251, -431, 480, -431,
	28, -36, 25, -653, -653, -7, 460, -653, 130, -615,
	-409, 473, 209, -439, 31, -37, 36, 518, -642, 23,
	-122, 533, -427, 531, -15, -15, 533, -427, 23, 368,
	257, 452, 231, -427, 64, 31, -37, 31, 140, -431,
	28, -602, 464, 31, 130, 28, -37, 480, -7, -611,
	365, 74, -7, -32, 31, -426, 130, 36, 232, -108,
	-15, -37, -37, -398, -401, 398, 93, -400, 207, 256,
	196, 22, 27, 477, 223, 264, 258, 309, 354, 122,
	31, 365, 401, 400, 153, -39, 507, 29, 45, -398,
	-402, 398, -26, 207, 354, 93, 29, 45, -398, 398,
	-420, 93, -423, 354, 23, 213, 90, 305, 335, 338,
	342, 364, 419, 436, 402, 473, 29, -398, 398, 93,
	29, -431, 28, 21, -433, 28, 140, -646, -271, -649,
	398, 93, 365, -47, 531, 398, 93, 365, 394, 398,
	93, 365, 398, 365, 36, -595, 93, 394, -651, -596,
	-455, -599, -601, 4, 232, 148, 332, 449, 452, 398,
	-403, 27, 93, 196, 477, 365, 398, -444, 93, 365,
	-26, -665, 354, 215, 404, 441, 300, 434, 482, 277,
	418, 324, 31, 237, 127, 445, -652, 366, -455, -47,
	-96, 398, -523, 196, 27, -7, -15, -15, 93, 365,
	-98, 531, 74, 29, 398, -444, 93, 365, -26, 398,
	93, 196, 27, 365, 398, -444, 93, 365, -26, 398,
	365, 398, -603, -39, 365, 479, 398, 93, 232, 394,
	196, 27, 264, 258, 430, 365, 74, 74, -7, 398,
	-37, -480, 45, -480, 398, 130, -37, -480, -480, 398,
	93, 401, 365, 398, 93, 365, 29, 368, 257, 452,
	231, 398, 196, 27, 93, -446, 365, -447, 22, 97,
	-523, 93, -501, -265, 6, 534, 535, -102, 29, 541,
	-430, 24, 35, 29, 541, -430, 74, 29, 541, -430,
	29, -126, 134, -109, -124, 531, 498, 344, 248, 297,
	341, -125, 417, -123, -122, 531, -113, 531, 177, -123,
	-123, -123, 531, -127, 518, 519, 531, -127, -128, 183,
	531, -128, -128, 178, 179, -128, -430, 29, -17, 28,
	531, 29, -15, 28, -15, 28, 130, -430, 29, -37,
	29, 29, -399, 130, 28, 541, 29, 29, 29, 140,
	368, 257, 452, 231, -36, -399, -7, 219, 23, -270,
	40, -103, 120, -274, 40, -266, -269, -265, 49, 43,
	74, -270, -274, 40, -5, -689, -103, 4, -110, -265,
	40, 58, -693, 260, 234, 327, 413, -5, 23, -695,
	-108, -520, -16, 67, 419, 284, 286, 385, 409, 247,
	261, 321, 322, 367, 414, 449, 464, 21, -431, -399,
	-507, 531, -14, -62, -5, -14, -520, 130, -399, 130,
	-460, 532, 541, -491, -269, -265, -239, 532, 541, -32,
	532, 327, 532, -493, 83, 74, -36, -36, -36, 532,
	121, 115, 314, 203, 416, 354, -242, -242, -242, -242,
	-247, -247, -242, -242, -242, -247, -247, -242, -247, -247,
	-129, -103, 541, -22, 45, -25, 235, 402, -15, -15,
	-7, -108, -108, -442, -441, -443, 221, 279, -7, -7,
	-441, -441, 130, 139, 531, 74, -270, 532, 536, -82,
	190, 21, 41, -95, -65, -107, -104, -99, -106, 536,
	-6, 4, -27, -28, -29, -30, 21, 202, 119, 30,
	510, 134, 23, 94, 60, 511, 38, 512, 513, 39,
	514, 117, 26, 239, 240, 241, 243, 244, 245, 40,
	252, 95, 41, 109, 263, 266, 269, 43, 280, 130,
	284, 64, 290, 71, 72, 45, 311, 316, 73, 323,
	326, 68, 330, 331, 31, 47, 69, 74, 66, 33,
	509, 372, 381, 392, 100, 63, 424, 432, 59, 447,
	67, 106, 61, 456, 49, 470, 471, 103, 83, 190,
	51, 65, 484, 36, -65, -100, -54, -55, -149, -148,
	-152, 130, 389, 97, 354, 427, 503, -57, -56, -58,
	-65, 21, -64, 91, 349, -59, -60, -65, -67, 534,
	535, -151, 122, -183, -183, -183, -171, -174, -65, -148,
	-55, -288, 73, 541, 14, 39, 55, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, -155,
	30, 33, 46, 516, 44, 48, 52, 53, 54, 37,
	45, -158, 23, -8, 11, 62, -159, 4, -31, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 21, 200,
	22, 201, 202, 119, 510, 94, 203, 204, 205, 60,
	206, 207, 208, 209, 210, 211, 212, 173, 115, 169,
	189, 511, 88, 70, 213, 214, 215, 24, 216, 38,
	512, 217, 218, 219, 513, 220, 221, 222, 223, 224,
	225, 514, 123, 226, 227, 228, 229, 230, 25, 141,
	231, 101, 232, 117, 233, 234, 235, 236, 111, 237,
	81, 154, 238, 120, 239, 240, 241, 242, 243, 244,
	245, 121, 90, 246, 247, 249, 188, 187, 250, 40,
	251, 252, 253, 254, 98, 149, 150, 255, 89, 95,
	256, 257, 258, 259, 41, 109, 260, 261, 176, 27,
	262, 263, 138, 264, 148, 265, 266, 267, 136, 42,
	268, 270, 271, 272, 273, 29, 274, 275, 276, 277,
	278, 43, 279, 282, 91, 175, 283, 153, 284, 165,
	285, 116, 79, 286, 287, 288, 289, 291, 292, 293,
	294, 295, 151, 296, 298, 28, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	76, 500, 313, 314, 96, 315, 186, 171, 185, 317,
	318, 75, 166, 160, 162, 163, 159, 161, 156, 164,
	158, 126, 157, 145, 503, 319, 320, 321, 322, 92,
	323, 326, 324, 325, 77, 327, 328, 329, 58, 330,
	331, 332, 333, 334, 335, 336, 337, 105, 85, 338,
	99, 339, 340, 342, 343, 345, 346, 347, 181, 82,
	182, 131, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 31, 110, 358, 359, 47, 360, 32, 170,
	139, 122, 504, 505, 502, 144, 66, 506, 507, 124,
	501, 361, 80, 362, 102, 364, 365, 366, 367, 368,
	369, 370, 129, 371, 128, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	112, 387, 152, 143, 388, 389, 174, 390, 391, 84,
	132, 392, 393, 394, 395, 396, 397, 398, 399, 34,
	400, 401, 402, 35, 403, 404, 405, 78, 406, 407,
	408, 409, 410, 411, 127, 412, 413, 146, 414, 415,
	416, 87, 418, 63, 419, 420, 421, 422, 423, 424,
	93, 426, 425, 427, 428, 429, 430, 172, 431, 432,
	107, 433, 434, 435, 436, 437, 438, 113, 114, 439,
	440, 441, 147, 442, 443, 444, 445, 59, 446, 104,
	447, 67, 448, 450, 449, 108, 451, 452, 453, 454,
	106, 455, 56, 184, 456, 457, 458, 459, 460, 461,
	49, 462, 463, 464, 465, 466, 467, 468, 142, 469,
	471, 50, 472, 473, 474, 97, 103, 83, 475, 476,
	477, 478, 155, 86, 180, 190, 118, 479, 480, 481,
	482, 51, 483, 486, 140, 487, 488, 489, 490, 491,
	492, 493, 133, 494, 495, 496, 497, 125, 499, 57,
	-65, -65, -65, -65, -65, 363, -374, 32, -97, -65,
	-129, -182, -96, -182, -182, -77, 529, 531, 531, 531,
	-96, -103, 531, -103, -103, 531, -73, -65, -136, 485,
	-133, 281, 531, 531, 130, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, -288, 531,
	-431, -129, -297, 23, -13, 541, 532, 39, 55, 30,
	33, 46, 44, 48, 52, 37, 45, 62, 218, -690,
	-692, 389, 399, 421, -211, -179, 102, 531, 40, 23,
	-213, -219, -217, 531, -5, -5, -296, 83, 83, 61,
	-236, 64, 61, 531, 122, 370, -259, 31, 23, -259,
	-431, -588, -420, 354, 31, -19, 28, -5, -654, 531,
	-654, -672, 211, 198, 315, -7, -637, -639, 531, -108,
	321, 480, 84, -508, -440, -190, -191, -451, -452, 26,
	29, -595, 365, -108, 533, -106, -428, -429, -6, -613,
	83, -156, 531, 267, 388, -15, -15, -15, -15, -15,
	29, -589, 29, -7, 531, 370, 31, -604, -603, -103,
	29, -605, -508, 103, 31, -499, -438, 28, -431, 74,
	332, -508, -431, 464, 74, 29, 21, -625, -630, 67,
	448, -5, -434, 242, -431, -427, -103, 23, 130, -499,
	-499, 541, 61, -703, 117, 514, 168, 335, 473, 194,
	449, -386, 414, 531, 370, 370, -353, 28, 514, -354,
	-5, 117, -370, 513, 471, 381, 284, 270, -703, 117,
	-703, 117, 117, 74, 460, 201, 400, 412, 411, 460,
	412, 411, -431, 309, 153, -15, 122, 61, -386, 298,
	411, 531, -433, 449, 61, 255, 370, -431, 449, 61,
	-423, 414, 90, 338, 342, -109, -265, -702, 70, -265,
	-265, 70, 346, -37, -37, -431, 61, -703, 414, -431,
	-398, 398, 93, -26, 29, 45, -398, 398, 93, 29,
	-7, 61, 414, 61, -48, 532, -657, -659, -107, -121,
	45, 361, 500, 190, -104, -108, 426, 61, 414, 61,
	479, 61, 414, 61, 61, 61, -595, -647, 449, 225,
	-599, -709, 527, 68, 61, 117, 40, 31, 117, 40,
	31, 414, -643, 117, -644, 513, 31, 117, 61, 61,
	-708, -665, 35, 93, -648, 414, 423, 457, 61, 255,
	74, 47, 418, 254, 317, 324, -265, -265, -15, -5,
	61, 103, 398, 365, 83, 83, 414, 531, 61, -108,
	355, -431, -7, 61, -708, 414, 61, 255, 61, -427,
	-625, -625, -625, 61, 61, -708, 414, 61, 255, 61,
	61, 61, -39, 61, -103, 47, 61, -427, 387, -103,
	387, 387, 387, -427, 61, -431, -431, 398, -610, 365,
	264, 258, 61, -500, -651, 93, 247, -651, 61, -605,
	-500, -651, -651, 61, -386, -386, 61, 61, 438, 414,
	61, -15, -15, -15, -15, -15, 61, 208, 155, 155,
	208, 155, 208, 531, 414, 541, 61, 208, -590, -405,
	-404, 199, 512, 261, 286, 62, 385, 409, 458, 464,
	414, -513, -484, 290, 405, 45, 130, 365, 6, 6,
	-17, -15, -13, -7, -15, -7, -108, -268, 529, 529,
	-126, 134, -101, 61, 61, 61, 61, 531, -123, -129,
	-101, -101, 56, 56, -101, 531, -101, -128, -128, -268,
	-430, 29, -108, 83, 29, 83, 29, -108, -7, 531,
	-7, -7, -430, -605, 29, -508, -399, -399, -399, -431,
	61, -521, -522, 68, 269, 457, 541, -103, 531, -5,
	-180, 541, 532, 61, 541, -16, -16, 246, 422, -445,
	-441, -445, -445, -13, -17, -13, 139, -50, -45, -5,
	-13, -13, -17, 448, 420, 287, 386, 410, -510, 36,
	291, -14, 541, 532, 532, 64, -502, -503, -510, -503,
	-460, -488, -240, 119, -486, -492, -486, -431, -7, -431,
	-431, -7, -19, -245, 36, 168, 416, -242, -242, -242,
	-242, -242, -242, 532, -433, -24, 359, -23, 194, 411,
	427, 272, -430, 298, 298, 52, 52, 52, 52, 52,
	52, 52, 52, -15, -15, 74, 74, 52, 52, -108,
	-265, -108, -404, 514, -405, 464, 261, 199, 286, 322,
	385, 409, 532, -131, 541, -170, -95, -82, -82, 16,
	17, 530, 542, 66, 503, 427, 541, -60, -63, -67,
	534, 535, 411, 127, 531, -63, 411, 127, -61, -101,
	6, -61, -154, 359, 430, -16, 541, 83, -163, 94,
	95, -54, -149, -276, 64, -425, 453, 451, 58, 289,
	473, 67, -431, -275, -108, -15, 56, 58, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, 46, 44, 48, 37, 45, -65,
	61, 47, 31, 49, 43, 50, 41, 260, 357, -167,
	-166, 350, 351, 352, 353, 166, -162, 59, 60, -161,
	-182, 531, -165, 510, 432, 21, -6, 531, -130, 411,
	531, -182, 41, 31, -99, 532, 541, -129, -80, 530,
	-77, -129, -156, -129, 532, -82, -124, -101, -76, -75,
	51, -133, 71, -142, 508, 531, -332, -67, -65, -327,
	-65, 531, -101, -101, -101, -101, -65, -87, -12, 4,
	498, 344, 248, 297, 341, 417, -103, -65, -88, -83,
	-65, -82, -89, -66, -67, 534, 535, -155, 411, -85,
	-83, -65, -65, 511, 326, 456, -86, -65, 64, -129,
	-65, -129, -129, -129, -129, 346, -90, -218, -65, -693,
	-67, 346, -65, -82, -333, -337, -332, 100, -65, -330,
	-181, -337, -327, -182, -327, -65, -327, 532, -327, -327,
	-327, -693, -276, -129, 532, 532, -298, 85, 31, 532,
	-65, 468, 229, 389, -220, 74, -233, 103, 104, -212,
	-216, -5, 86, -5, -276, 541, 527, -214, -217, -97,
	-221, 65, -277, -278, -433, -182, 323, -289, 531, -302,
	-312, -322, -303, 127, 125, 126, -5, -132, -71, -331,
	166, -278, -237, 112, -237, -348, -349, -352, -5, -353,
	-355, -354, 46, -15, 122, -410, 83, 29, 273, -397,
	36, 531, 29, 74, 31, 404, -661, -662, -664, 23,
	321, 458, 484, -665, -655, 532, -656, -657, -661, -674,
	-673, 96, 98, 97, 462, 122, 198, -427, 536, -638,
	509, -640, -645, -641, -657, 4, 321, -7, -431, 480,
	-439, -409, -35, -19, -5, -367, -106, 532, 541, 527,
	130, -7, -305, -304, -306, -5, 531, -427, -427, -427,
	-427, -427, -15, -591, 414, 479, 64, 24, -7, -593,
	-594, -598, 295, 354, 478, -348, 122, 29, 284, -7,
	422, 29, -482, -483, 446, 197, 406, 45, 371, 265,
	469, 309, 4, 232, 476, 103, 23, 31, -259, -6,
	7, -612, 23, -622, 307, 67, -624, -629, -5, -303,
	531, -15, 448, -426, 541, -433, 45, -96, -259, -259,
	387, -108, -103, -400, -7, -7, -7, 505, 223, 340,
	-7, -7, -387, -388, -6, -431, -431, 31, -353, 28,
	-108, -7, 531, -374, -392, 83, 503, 503, -393, 83,
	-5, -101, -7, 28, -5, 28, -7, -7, -7, -7,
	21, 103, 460, 412, 460, 412, -7, 327, -7, 21,
	103, -7, 327, -431, 411, -508, -46, 110, 79, 40,
	83, 327, -40, -43, -417, 93, 196, 27, -10, -6,
	-398, -401, 398, 93, -7, -7, 74, -431, -398, 398,
	-7, -7, -7, -265, -15, -15, -265, -265, -398, 398,
	-420, 93, -7, -7, -7, -398, 398, 93, 61, -703,
	414, 255, -431, 449, 61, -703, 414, -433, 398, -593,
	-594, 365, -7, -7, -508, 532, 541, -107, -121, -659,
	-121, -104, 361, -122, -104, -7, -7, -508, -7, -7,
	-508, -7, -508, -7, 479, -102, -269, 40, -7, -7,
	47, -7, 28, -65, 47, -7, -7, 531, 47, -7,
	-508, -7, -7, -508, 74, 47, 74, 254, 317, -11,
	-399, 61, 61, -7, -7, -7, -667, -666, -6, -508,
	532, 541, 541, 398, -619, 61, 74, -7, -7, -508,
	74, -7, -508, -7, -7, -508, 74, -7, -508, -7,
	-508, -7, -13, -426, -13, -13, -508, 398, 398, -26,
	61, 61, 400, 201, -11, -483, -7, -11, 422, -7,
	-508, -7, -42, -102, 40, -7, -508, 93, 398, 93,
	398, 93, 365, -427, 398, 93, 398, 93, 365, 196,
	22, 27, -7, -7, -103, -34, 28, -306, -103, 28,
	-5, -667, -7, -447, 196, 27, -508, -5, -592, 61,
	-7, -15, -442, 531, -108, -441, -443, 221, 279, -441,
	-441, 130, -108, -7, -502, -502, 290, 414, 406, 103,
	61, -430, -430, -430, 74, -430, 530, -101, -101, 529,
	532, 344, 297, 341, -125, 341, -125, -125, -101, 532,
	532, 532, 57, 57, 532, -129, 532, -430, -17, 23,
	-7, -15, -7, -15, 321, -430, -597, -600, 153, -37,
	422, 130, -436, 36, -508, 64, 531, 61, -497, -266,
	-124, -101, -108, -504, -509, -508, 71, -431, 140, -13,
	541, -51, -265, 541, 533, 45, 45, 45, 45, 45,
	-505, -514, -6, 70, 532, -62, -504, 74, -430, 64,
	-486, -493, 130, 296, 296, 343, 427, 272, 427, 272,
	97, 411, -515, -103, 47, -515, -515, -515, -515, -515,
	-515, -515, 83, 83, -15, 261, -15, -515, -515, 321,
	52, 23, -15, -15, -7, -108, -108, -442, -441, 139,
	-441, -441, 532, 190, -95, -131, -131, 541, -131, -65,
	-65, -100, -65, 97, -59, -63, 66, 36, -101, 6,
	531, -129, 334, -174, -157, -159, 62, -164, 517, -279,
	65, -277, -700, -700, 453, 451, 453, 451, -700, -431,
	57, 42, -65, -65, 61, -162, 59, -161, 42, -65,
	47, 49, 43, 50, 41, 260, 357, -167, -166, 64,
	357, -168, 36, 168, 155, 134, 139, 146, -66, -66,
	-129, -182, 531, -156, 531, -129, 41, -97, -65, 530,
	530, 541, 532, 532, 532, -131, 532, -74, -75, 263,
	-65, -142, 531, -141, -5, 531, 65, -334, 47, 192,
	155, 542, -336, 509, -346, -345, 515, -65, 532, 532,
	532, 532, 23, 532, 64, 532, 541, 532, 532, 372,
	532, 14, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -155, 52, 45, 62, -66, -66,
	-66, 532, 532, 48, 64, 130, 23, -86, -86, -86,
	532, 64, -129, 541, 532, 532, 532, 532, -6, 532,
	541, 23, -65, -318, 129, -6, 541, 532, -334, 541,
	532, -108, -335, 541, 47, 192, -346, 532, -168, 532,
	-337, 541, 541, 541, -65, -279, 532, 531, 85, -222,
	100, 101, 155, 532, 541, -97, -221, -219, -65, 532,
	541, -222, -65, 120, 541, 81, -290, 75, 82, 79,
	77, 78, 76, -282, -281, 23, -5, -282, -182, -302,
	-312, -322, -182, -289, -278, -284, -281, 23, -5, -282,
	-282, -311, 518, 64, 531, 531, -96, 74, -243, -103,
	113, 114, -243, 532, 541, -431, -350, 531, -431, -49,
	36, 168, -7, -431, -251, -7, 23, -386, -14, -431,
	-433, 29, -660, 67, -121, -670, -453, 212, 403, -664,
	-669, -103, -270, -663, 130, 532, 541, 40, 527, -670,
	74, 33, 122, -674, 532, 532, 509, 541, 70, 532,
	541, 527, -7, 295, -259, -431, 67, 209, -439, -368,
	117, -369, -371, 39, 31, 47, 471, 381, 513, 40,
	392, 288, 252, 311, -429, -408, -121, -30, -157, -265,
	-103, 355, 62, 534, 535, 464, 532, 541, -108, -586,
	-587, -103, -427, 64, -7, -270, -270, -37, -415, 507,
	-598, -606, -7, 295, 478, -606, 532, -431, -431, 246,
	-602, -7, 130, -101, -399, -399, 406, 71, -103, 47,
	371, 371, 68, 474, -399, -179, 29, -410, 273, 51,
	-397, -616, 130, 4, 295, 64, 541, -65, -32, -426,
	-630, -259, 414, -259, -280, 65, -280, -13, 532, 61,
	61, 61, -44, -5, 40, 532, 541, 527, 533, -358,
	130, 40, -36, 282, 29, 31, -414, -413, 439, -370,
	270, -65, 531, -365, 307, 531, -392, 531, 531, -7,
	-403, 27, 93, 401, 196, -422, -267, -39, -424, 402,
	93, -365, 29, -430, 29, -430, -7, -7, -7, -7,
	418, 418, 327, 307, 418, 532, 541, -417, -417, -10,
	-41, -103, 61, -703, 117, 414, 93, 364, 276, 61,
	93, 364, 61, 414, 61, 61, -703, 414, -7, -7,
	-7, 74, -398, 398, 93, -7, -7, -7, -7, -398,
	398, 93, 61, -39, 61, -657, -121, -121, 538, -122,
	61, -430, 29, -644, -65, -365, 276, 313, 47, -7,
	-508, 398, 93, 365, 398, 196, 27, 93, 365, 541,
	532, 527, -108, 355, -108, 61, -620, 83, -399, -431,
	276, 276, -426, -426, -426, 61, 61, 255, -7, -508,
	-7, 438, 61, 414, 61, 414, 61, 61, 414, 61,
	414, 61, 336, 336, 336, 61, 61, -103, 31, -430,
	29, -430, 532, -267, 93, -270, -108, -15, -15, -108,
	74, 74, 506, -13, -399, -399, -508, -15, 530, 530,
	-101, 532, -127, -127, 532, -430, -108, -430, 83, -430,
	83, -7, 532, 541, 531, -7, -605, 246, 354, 422,
	-18, 532, -511, 541, 36, -508, -13, -441, 541, -45,
	-5, 414, 414, 414, 414, 414, -510, 541, -512, 506,
	49, 43, -508, -510, -520, -399, -179, 272, 272, -7,
	-7, 52, -15, 52, -7, -515, -108, 52, 52, 52,
	52, 52, 52, 52, -265, 52, 52, -95, 532, 532,
	532, 530, 66, 36, 455, -129, 532, 541, -164, 531,
	91, 92, -52, 71, -65, -431, -431, -700, -700, -700,
	-700, -431, -65, -65, 42, 42, -65, -66, -66, -65,
	42, 64, 357, -168, -65, 471, 471, 30, 30, 532,
	-65, 532, -129, 532, 541, 532, -77, 532, -103, 266,
	-65, 106, -170, -143, -5, -65, -168, 74, 74, -327,
	-327, -335, 70, 166, 532, -108, -65, -167, -65, -108,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, 41, 31, 260, -66, -65, -65, -65,
	-108, 532, 532, 532, -129, -65, 532, 541, -218, -6,
	-91, 380, 442, 532, -67, -319, 70, 532, 541, -93,
	479, -168, -332, -346, -337, -327, 74, 74, -337, 532,
	532, -65, -65, -65, 23, -52, -180, -272, -227, 531,
	74, -179, -179, 102, -216, -222, 527, -217, 122, -278,
	75, 75, -278, -290, 75, -291, 80, -291, -291, -134,
	450, -5, 531, -282, -284, -282, -282, 532, -5, 531,
	531, 124, 531, -67, 133, -327, -65, -37, -253, -701,
	83, -381, 310, -352, -363, -382, -383, 370, -351, -356,
	-357, -354, -5, -350, -389, 74, -386, 505, 531, 122,
	370, 23, -250, -179, 532, -588, -393, -7, -661, 531,
	206, -65, 541, 541, 464, -656, -65, -65, -431, -673,
	-14, 74, 70, -645, -638, -641, 4, -408, 531, -606,
	-397, 531, -431, 28, -508, -7, -15, 252, 47, -374,
	503, 531, -66, -431, -419, 201, 70, 253, 299, -108,
	-306, -317, 39, 532, 541, -15, -589, 531, -122, -381,
	-350, 531, 370, 140, -604, -415, -605, -399, -399, -103,
	-103, -102, -103, -436, -438, -397, -704, 286, 385, -607,
	-609, -5, -618, 61, -617, 21, 63, 96, 97, 98,
	-606, -277, -629, 532, 74, -280, -5, 242, -280, 531,
	-426, 36, 168, -103, -7, -7, -388, -408, -6, 86,
	-353, 29, -412, -411, 230, -5, 40, 532, -14, -366,
	31, 252, 311, 354, -7, -14, -365, -14, -361, -360,
	-231, -5, -303, 531, 31, 275, 298, 246, -423, 288,
	31, 275, 438, -386, -413, -411, -386, 288, -424, 93,
	464, -37, 438, -5, -7, 418, -7, -43, -7, -7,
	-7, -7, 449, 70, -7, -7, 449, 70, -7, -7,
	-7, -7, -7, -7, 61, 276, 61, -703, 414, 93,
	364, 61, 61, -703, 414, -7, -508, 464, 538, -7,
	-7, 532, -7, 313, 61, 414, 61, 61, -626, -631,
	62, 286, 439, -627, -632, 62, 286, 414, 61, -666,
	355, -668, -121, -30, -157, -265, -103, 532, 532, 532,
	-7, -621, 36, 531, 398, -7, -7, -7, -7, 74,
	-39, -42, -7, -7, -7, -7, -508, -7, -7, -7,
	-7, -508, 130, 130, 34, 130, 28, -7, -103, 211,
	198, 29, -5, 464, 23, 83, 83, 321, -506, 448,
	287, 410, 420, 465, 415, -506, 130, -430, 530, 532,
	-7, -7, -430, -600, -597, 422, 246, -7, 532, -103,
	-510, -509, 290, -265, -13, -13, -13, -13, -13, -514,
	-430, 64, -510, 52, 52, -515, 52, -515, 52, 532,
	-517, -103, 47, -517, -517, -517, -517, -517, -517, 52,
	-517, -517, -131, 455, 532, -65, -156, -173, 72, 70,
	-431, -431, -431, -431, -65, -65, 42, 30, 30, -65,
	-65, 319, 319, -65, -65, 532, 532, -65, -103, -65,
	532, -139, 370, 532, -337, 47, 47, -337, -171, 148,
	532, 532, 64, 64, 41, 260, 42, 130, 64, 532,
	532, -81, -129, 489, 532, 483, 483, -319, 70, -67,
	132, 155, -65, -94, 541, -65, 354, -337, 532, 47,
	47, 532, -338, 129, -338, -338, -109, -173, 532, 109,
	-261, -231, 117, -233, -65, -242, -278, -278, -292, 83,
	74, 75, -278, -653, 531, -13, -281, 531, -304, -304,
	-5, -307, -308, -303, -318, 531, 541, -215, -225, -234,
	-235, 51, -255, -256, 531, -37, 150, -382, 531, 304,
	271, -410, 70, 532, 541, -367, 36, -358, -390, 449,
	228, -348, -15, 122, 273, -436, -687, 36, -397, 531,
	74, -670, -310, -658, -107, -104, -688, -103, 130, -108,
	-679, 393, -431, -638, 532, -628, 64, 61, -634, 312,
	23, -14, 531, 31, -439, -369, 31, -426, -426, -65,
	-259, 23, 40, 83, -15, -103, -416, -417, 422, -358,
	-348, 122, -7, 284, 422, 23, -390, -653, 273, 30,
	45, -620, -399, -624, -65, 286, 500, 286, 64, 527,
	36, 45, 64, -353, -415, -5, 40, -365, 532, 252,
	476, 299, 253, 309, 532, 532, 532, 541, 36, -232,
	-224, 39, -232, -65, 47, 28, 28, -419, 47, 23,
	-42, -419, -108, -265, -42, -430, -430, 61, 61, -7,
	-399, -7, -399, 61, -7, -7, -7, -7, -7, 449,
	70, -7, -7, -7, -7, 464, -430, -365, -7, -7,
	-508, -7, 541, -101, -101, -108, 541, -101, -101, -7,
	-508, 513, -65, 61, 276, -13, -13, -15, -13, 29,
	-430, -103, -103, -430, -108, -108, -7, -7, -7, 61,
	64, -502, -430, -430, -430, 532, -7, 73, 506, -504,
	-430, -515, -515, -515, -515, 52, -517, 532, 532, 532,
	-137, 484, -65, -53, -65, -65, -65, 532, -131, 70,
	532, 532, -7, -65, -66, 64, -65, -65, -65, 532,
	541, 532, 531, -319, 532, 532, 435, 155, 532, -337,
	-328, -329, -327, -339, -340, 40, -341, 136, 47, 49,
	43, 50, 138, -337, -92, 306, 354, -137, -299, 87,
	97, 110, 532, 541, -7, 155, -292, 531, -65, -278,
	531, -13, 532, -304, 532, 532, 532, 541, -309, 23,
	123, -320, -321, -66, 40, -65, -222, -225, -226, 30,
	-226, 105, 31, -254, 115, 116, 149, 47, 154, 151,
	152, 42, 153, 148, -257, -262, -6, -255, -103, -410,
	-16, -364, 227, 230, 233, 251, 298, 288, 308, 438,
	439, 21, -364, -49, -5, -356, 507, -382, -7, 27,
	98, 380, 532, -350, -431, -7, 513, 216, 58, 23,
	-261, -433, 541, 532, -121, 266, -671, -4, -453, 464,
	-675, 130, -680, -682, -677, 348, 502, -686, 64, 532,
	532, 433, 433, -635, -636, 478, 354, -606, -179, 532,
	29, -391, 83, -391, 532, -375, 337, 298, 531, -7,
	532, 541, -7, 422, 532, -431, -415, 246, -7, -179,
	531, -704, -609, 531, -621, 64, 532, -441, -623, 23,
	-623, -15, -408, 531, 531, 531, -367, -376, 303, -376,
	392, -376, -360, -156, 62, -396, -15, -15, 532, 29,
	29, 531, 23, -317, -7, -7, -24, 93, -24, 93,
	-7, 61, -7, -399, 61, -631, -156, -443, -441, 531,
	-632, 531, 531, 531, 532, -7, -7, -710, 36, 518,
	-710, 34, -710, 130, -317, 532, -504, -504, 74, -7,
	-510, -515, -138, -140, -5, -169, -172, -65, -175, -177,
	-176, -178, 531, 238, 408, 293, -144, 388, 127, 294,
	-129, 130, -66, -129, -90, 499, 354, -343, 168, 36,
	541, 23, 532, 74, -65, 134, 139, -342, -340, 532,
	306, -300, 90, 89, 88, 93, -279, -231, -179, -13,
	-129, 532, 532, -311, -308, 531, -313, -314, -5, 541,
	532, 23, -66, -326, 23, 106, -65, 106, 105, -642,
	-642, -642, -642, 152, 31, 47, -103, 532, 541, -263,
	-269, -265, 536, 40, 531, -279, -49, 532, -389, 531,
	-367, -410, 127, 127, -381, -382, -350, -250, 506, 513,
	513, -179, 532, -393, -658, -661, 540, -108, -683, 51,
	-705, 262, -682, -678, 67, 411, -365, -431, 36, 36,
	-606, 478, -687, -397, -431, 307, -372, 354, -380, -377,
	-378, 74, 79, 369, 429, -421, 531, -65, -633, 279,
	-417, -415, -7, -381, -350, 140, -415, -436, 532, -653,
	-608, 7, -277, -623, 301, 205, -362, -359, -9, -129,
	-129, -426, 531, -426, -431, -426, 531, -163, -386, -232,
	-65, 298, -38, 83, 449, 449, -7, -24, 93, -7,
	-694, 130, -694, -695, -695, -695, -65, -17, -17, -15,
	-15, -13, -430, -511, -430, -506, -415, -430, 541, 23,
	541, 532, 531, 531, 425, 532, -145, -146, 37, 467,
	120, -65, -145, -145, -65, 532, 532, 155, -344, 145,
	144, 140, 134, 140, 134, 141, 142, -329, -6, 136,
	532, 74, -14, 91, 91, -213, 532, 532, -304, 532,
	541, -108, 130, -321, 541, -6, -338, -5, -228, -229,
	109, 97, 98, -230, 109, 96, 70, -103, -103, -103,
	-103, -14, 536, 47, -14, 536, -262, -258, -264, -269,
	-389, -390, -384, -385, -5, -303, 531, -49, -382, -410,
	-358, -436, 506, 506, -687, -395, 303, 531, -670, 273,
	531, -676, 411, 437, -642, 130, 286, 286, 23, 531,
	449, 309, -378, 74, -377, 74, 97, 98, -420, 532,
	23, -15, -415, 422, -358, -7, 531, 532, 541, 532,
	541, -101, 532, 532, -391, -14, -391, -259, -391, -156,
	-164, -163, 532, -421, -65, -7, -7, 449, -418, 391,
	87, 509, -418, 532, 532, 532, 532, -710, 64, -140,
	-141, -172, -129, -129, 531, -147, 270, -146, 377, 283,
	411, 377, 283, -147, -147, -342, 143, 143, 140, 140,
	134, 140, 134, 140, 138, 136, 93, 70, 70, -279,
	-283, 23, -135, 399, 532, -314, -315, -316, 4, 40,
	31, 47, 128, 124, -67, 123, 110, 93, 110, -223,
	102, 531, 40, 86, 107, 108, -14, 536, 532, 541,
	-390, 532, 541, -224, -224, -65, -389, -410, -49, -382,
	-374, 531, -261, -704, -65, -685, -5, 262, -441, -441,
	-179, -7, -379, 354, 35, 24, 93, -379, 532, 440,
	-626, -7, 422, -415, 532, 7, -359, 61, -365, 532,
	-365, -375, -279, 532, -164, -24, -24, -7, 70, -441,
	-15, -504, 532, 532, -169, 120, 71, 455, 354, 30,
	532, 74, 74, 140, 140, -340, -5, -14, -14, -5,
	531, -316, -66, -66, 47, -66, -318, 531, -213, -233,
	-212, 86, 531, -264, -385, -396, -396, 532, -390, -49,
	-389, -410, -397, -394, -231, 532, -653, 532, 411, 541,
	541, -687, 195, 47, 40, -415, -7, 531, -380, -365,
	-24, -15, -430, 532, 411, 501, -146, 146, 146, 74,
	61, 83, 93, 93, -65, 123, -323, -324, -5, 131,
	155, 532, -129, -224, -389, -390, -49, -390, 532, 541,
	-395, 531, -683, 61, 64, -259, -259, -415, -129, -365,
	147, 147, 136, -68, -653, 166, -5, -5, -5, 532,
	-313, 532, 541, 130, -108, -347, 128, -223, -223, 102,
	532, -396, -390, -389, -279, -231, -374, -681, -684, -101,
	6, -103, -6, 273, 433, 433, 532, 40, 531, 532,
	-339, -324, 124, -325, -345, 29, 128, 7, -233, -390,
	-397, 532, 541, -704, 36, 36, -68, -82, 532, -343,
	-325, -325, 7, 123, 23, 155, -390, -684, -653, 286,
	286, 83, -131, -344, -343, -339, 531, -7, -223, -279,
	531, -441, -441, -5, 532, -342, -344, -323, 123, -681,
	-342, 532, 531, 532, -323, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 2975, 2975, 1543, -2, 0, 1825, -2,
	1888, 1888, 0, 0, 0, 0, 0, 2975, 0, 2975,
	2975, 0, 0, 0, 0, 0, 1630, 1902, 1898, 0,
	1898, 2325, 2326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 167, 0, 0, 0, 0,
	-2, 1534, 1629, 0, 2301, 2302, 1665, 0, 1576, 0,
	0, 0, -2, 2978, 2973, 2974, 2730, 0, 0, 0,
	0, 1630, 0, 1824, 0, 0, 2874, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 1953, 1954, 0, 0, -2, 2126, 2851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1887, 0, 0, 0, 0, 0, 2336,
	132, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	2332, 2333, 2334, 0, 0, 2338, 2339, 2340, 0, 0,
	0, 1871, 0, 1874, 1875, 1876, 1877, 1878, 1879, 0,
	0, 0, 2257, 326, 437, 471, 2262, 2678, 0, 554,
	210, 427, -2, 418, 504, 2693, 142, 143, 144, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 342, 343,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 419, 420, 421, 422, 423, 424, 425,
	426, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 470, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 482, 483, 484, 485, 486, 487, 488,
	489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	2271, 2263, 554, 471, 437, 2267, 2268, 210, 326, 344,
	418, 427, 504, 2978, 2730, 2978, 0, 2978, 0, 2963,
	437, 471, 554, 425, 2965, 471, 3184, 152, 0, 3040,
	3041, 3045, 2521, 2521, 2521, 191, 2521, 0, 0, 3040,
	2521, 2272, 1898, 1630, 0, 2285, 2286, 2287, 2288, 2289,
	2290, 2291, 2667, 1896, 0, 1901, 2297, 0, 1897, 2303,
	554, 471, 437, 2307, 0, 2313, 0, 0, 2327, 2328,
	2329, 2330, 2331, 3154, 1650, 3158, 3160, 0, -2, -2,
	-2, -2, 183, 406, 3179, 3179, -2, -2, 3176, 3177,
	1248, 0, 0, 1246, 3159, 3180, 3181, 3194, 3196, 385,
	3198, 3200, 3201, 3202, 3205, 3206, 1465, 1247, 0, 166,
	0, 1888, 3250, 3253, 3254, 3256, 0, 3258, 0, 1385,
	0, -2, -2, 1462, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, -2, 0, 2883,
	2883, 2883, 0, -2, 1547, 1548, 0, 1548, 0, 1581,
	0, 1664, 1666, 1575, 1604, 1605, 158, 0, 0, 1626,
	401, 1631, 161, 1627, 0, 2, 2971, 0, 2972, 2729,
	2717, 0, 0, 2723, 0, 0, 0, 1609, 0, 0,
	0, 3185, 3186, 3187, 3188, 3189, 2521, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 1888, 2873,
	-2, 0, -2, 295, 2056, 1894, 177, 0, 214, 276,
	1531, 0, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 2554, 0, 0, 295,
	2056, 295, 0, 0, 2618, 295, 331, 2056, 2163, 2164,
	2165, 2166, 2167, 2711, 2712, 2713, 2714, 0, 0, 2773,
	0, 0, 161, 295, 126, 2738, 0, 0, 0, 2056,
	2056, 1955, 1956, 1957, 1958, 0, 295, 0, 3318, 295,
	0, 0, 295, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3325, 0, 3318, 0, -2, 3132,
	0, 2163, 0, 214, 276, 0, 0, 0, 295, 3318,
	0, 3318, 0, 0, 0, 0, 0, 0, 0, -2,
	2988, 0, 331, -2, 2988, 0, 0, 295, 0, 0,
	0, 3027, 0, 295, 130, 179, 295, 130, 153, 0,
	295, 130, 295, 1885, 1451, 0, 1452, 1453, 1454, 1455,
	1456, 1265, 1459, 1469, 1472, 1473, 1474, 1475, 1476, 1512,
	257, 1469, 1469, 1469, 1482, 1483, 1484, 1485, 1486, 1508,
	1508, 1251, 1505, 1460, 1461, 1510, 1498, 1510, 1510, 1493,
	0, 1510, 130, 295, 0, 0, 0, 0, 0, 0,
	130, 295, -2, 295, 2538, 295, 0, 331, 2993, 295,
	2161, 2991, 295, 2995, 295, 2335, 0, 2337, 0, 1869,
	1870, 1873, 138, 0, 0, 2258, 437, 2259, 212, 0,
	2260, 0, 0, 0, 0, 0, 0, 2681, 2682, 2683,
	2706, 2707, 2684, 2709, 2710, 0, 2264, 0, 2266, 2959,
	2960, 2961, 2969, 2962, 0, 2970, 2964, 2968, 0, 0,
	0, 0, 0, 3042, 0, 3047, 0, 3048, 3049, 3050,
	3051, 0, 0, 0, 0, 1630, 2274, 0, 2276, 2284,
	558, 2279, 2280, 2281, 2666, 1898, 1895, 0, 2294, 2296,
	2298, 161, 0, 2304, 0, 2306, 0, 2316, 0, -2,
	138, 138, 138, 2320, 2321, 2322, 2323, 0, 0, 3161,
	0, 3178, 0, 0, 0, 3179, 3179, 0, 0, 0,
	3179, 3179, 0, 3179, 3179, 1249, 1250, 3190, 0, 3197,
	3199, 3203, 0, 3209, 164, 3352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2336, 1880, 1881, 1882, 1883, 1884, 0, 0, 3255,
	3257, 0, 1386, 1270, 0, 1273, 2938, 1560, 1557, 0,
	2935, 2936, 1561, 0, 0, 0, 1569, 0, 2881, 2882,
	0, 0, 0, -2, 0, 1545, 1546, 1671, 1580, 1582,
	1586, 1587, 1124, 0, 0, 0, 0, 0, 0, 2025,
	1191, 1214, 1215, 1278, 0, 1218, 1219, 1220, 517, 0,
	1225, 1226, 521, 1513, 364, 550, 1268, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 0, 0, 0, 1401, 1536,
	1538, 1282, 1228, 1229, 1230, 1231, 1232, -2, 531, 528,
	573, 1284, 1285, 1287, 1289, 1291, 1293, 1294, 1295, 1296,
	1297, 1298, -2, 0, 518, 542, 546, 547, 553, 556,
	557, 543, 514, 520, 537, 561, 562, 564, 566, 563,
	567, 568, 530, 527, -2, 533, 534, 538, 532, 529,
	536, 569, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 539, -2, -2, -2, -2, -2, -2, -2,
	1487, 1488, 1489, 1490, 1671, 0, 1606, 159, 1607, 0,
	0, 0, 1628, 0, 0, 0, 1441, 2976, 0, 0,
	2719, 0, 2721, 2722, 2724, 0, 1789, 0, 1610, 0,
	1811, 0, 0, 0, 2521, 295, 0, 2521, 0, 2569,
	295, 125, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 1959, 0, 2527, 0, 3325, 2054, 2055, 0, 1893,
	178, 0, 2552, 0, 2852, 0, 0, 2553, 0, 0,
	0, 0, 0, 2559, 0, 0, 2577, 0, 0, 0,
	295, 2622, 0, 0, 0, 0, 2998, 0, 0, 0,
	0, 0, 0, 0, 0, 2807, 0, 0, 0, 0,
	0, 2998, 2998, 2136, 2149, 2236, 0, 2157, 0, 0,
	0, 2236, 2236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2228, 0, 0, 0, 2138,
	2140, 0, 0, 0, 3317, 0, 0, 0, 2141, 0,
	2572, 0, 2034, 0, 0, 0, 2038, 2053, 2041, 0,
	0, 0, 0, 2056, -2, 2051, 0, 2143, 2236, 0,
	0, 3318, 295, 0, 0, 295, 0, 2308, 0, 2309,
	0, 0, 0, 2354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3335, 3325, 3321, 0, 0, 3340, 3324,
	2270, 3326, 3339, 3331, 0, 3333, 3334, 3336, 3337, 0,
	2543, 0, 0, 0, 0, 0, 0, 3129, 0, 0,
	0, 3099, 3317, 0, 0, 3103, 3104, 3105, 3106, 0,
	0, 3111, 0, 0, 0, 0, 3116, 0, 2474, 3130,
	-2, 0, 0, 3016, 3017, 0, 0, 0, 0, 0,
	2349, 0, 0, 0, 0, 3129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3129, 0, 0, 0, 0,
	0, 0, 2615, 2616, 0, 0, 0, 0, 0, 0,
	0, 0, 2832, 2833, 0, 0, 0, 0, 0, 0,
	3000, 0, 0, 0, 0, 0, 3000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3137, 0, 3138, 0, 2584,
	1888, 0, 0, 0, 1863, 0, 0, 1866, 0, 0,
	2238, 128, 129, 0, 0, 2240, 0, 0, 0, 2243,
	0, 1443, 1447, 1451, 1457, 0, 1252, 1253, 1254, 1255,
	1256, 1257, 1266, 1470, 1469, 0, 1477, 0, 1478, 1479,
	1480, 1481, 0, 1502, 0, 0, 0, 1504, 1500, 1509,
	0, 1491, 1492, 1510, 1510, 1496, 2245, 0, 130, 295,
	0, 131, 0, 295, 0, 295, 0, 2255, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 1872,
	2341, 2342, 2343, 2344, 0, 0, 2629, 0, 0, 2685,
	2686, 2688, 2679, 2689, 2691, 2695, 2697, 2698, 1859, 1860,
	1861, 1862, 2690, 2692, 2694, 2680, 2699, 2700, 0, 2703,
	2704, 2705, 2687, 2715, 2716, 2265, 425, 2967, 1630, 0,
	2856, 0, 3052, 0, 433, 0, 284, 391, 421, 239,
	256, 319, 320, 374, 427, 464, 476, 0, 162, 3086,
	3046, 0, 0, 155, 157, 0, 0, 0, 3086, 0,
	2273, 1630, 0, 2278, 2282, 2283, 1900, 2297, 0, 2300,
	2297, 2305, 2311, 2312, 0, 0, 0, 0, 125, 2324,
	3157, 3149, 3150, 3151, 3152, 0, 3162, 3163, 3164, 3165,
	0, 0, 3168, 3169, 3170, 0, 0, 3173, 0, 0,
	0, 3204, 0, 2160, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 276, 0, 0,
	0, 0, 0, 0, 0, 1888, 3249, 1387, 0, 1534,
	0, 0, 0, 1394, 1396, 0, -2, 1271, 1274, 1275,
	1463, 145, 146, 147, 148, 149, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 1272, 0, 1551, 2937, 1552, 1559,
	1562, 0, 0, 1564, 0, 1566, 0, 2933, 2934, 2939,
	2947, 2948, 0, 2957, 2958, 2945, 0, 2949, -2, 0,
	0, 1572, 0, 1577, 1578, 1579, 2899, 2900, 1941, 2938,
	1560, 1589, 0, 0, 0, 726, 694, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 0,
	687, 941, -2, 0, -2, 1028, 859, 1162, 1164, -2,
	838, 0, 0, 1585, -2, 938, 1421, 150, 151, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 688, 689, 690, 691, 692, 693,
	695, 696, 697, 698, 699, 700, 701, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 834, 835, 836, 837,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 939, 940, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1129, 1130, 1144, 1147, 1148, 0, 0, 0, 1216, 1441,
	0, -2, 1221, 1222, 1223, 1224, 0, 0, 0, 0,
	-2, 1241, 0, 1243, 1265, 0, 0, 1400, 1538, 0,
	2911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 1344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1741, 1741,
	0, 0, 0, 0, 0, 0, 0, 0, 1589, 0,
	0, 0, 1632, 1636, 0, 0, 1643, 0, 0, 0,
	0, 1423, 1425, 0, 0, 1539, 0, 0, 2977, 2718,
	2720, 0, 0, 2728, 1924, 1791, 0, 0, 0, 0,
	1589, 1802, 0, 0, 1278, 1611, 1649, 0, 0, 1820,
	1820, 1817, 1818, 1962, 0, 0, 2114, 0, 0, 2135,
	0, 2566, 2568, 0, 0, 0, 295, 124, 2453, 0,
	2453, 0, 2477, 2478, 0, 0, 0, 2551, 0, 0,
	0, 0, 0, 2673, 2672, 2674, 2675, 2676, 2677, -2,
	125, 2530, 3335, 2014, 0, 1466, 0, 2755, 2757, 0,
	0, 1532, 1685, 0, 0, 0, 0, 0, 0, 2561,
	0, 2574, 0, 2609, 1962, 0, 0, 0, 2621, 2617,
	0, 0, 2637, 2638, 0, 2980, 0, 295, 2521, 0,
	0, 2772, 2779, 0, 0, 0, 0, 2738, 2814, 0,
	463, -2, 2521, 2822, 0, 2737, 0, 0, 0, 2979,
	2981, 0, 0, 0, 0, 2235, 0, 2200, 2201, 0,
	0, 2221, 0, 0, 0, 0, 2168, 295, 0, 2192,
	0, 0, 2071, 0, 2025, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2214, 0, 0, 2216, 2217, 0, 2222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2035, 0, 2039, 2044, 2045, 2036, 2037, 0, 2052, 2042,
	2043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2145, 2236, 0, 0, 0, 0, 2147, 2236, 0, 0,
	2609, 0, 0, 0, 0, 2346, 2347, 0, 0, 2442,
	2443, 2444, 2445, 2447, -2, 2449, 0, 0, 0, 0,
	3319, 0, 0, 0, 0, 0, 3320, 2269, 464, 0,
	3327, 0, 3338, 3332, 0, 0, 2234, 0, 0, 0,
	0, 0, 2546, 0, 2660, 0, 0, 0, 0, 0,
	3096, 3100, 3128, 0, 2473, 427, 437, 471, 0, 0,
	0, 0, 0, 3109, 3110, 3112, 3113, 3114, 3115, 3117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2790, 0, 0, 3097, 427, 0, 0, 0, 2810,
	2812, 2811, 2813, 0, 0, 3098, 427, 0, 0, 0,
	0, 0, 2614, 0, 2619, 2620, 0, 2826, 0, 2827,
	2738, 0, 0, 2834, 0, 0, 3318, 0, 2761, 0,
	2762, 2765, 0, 2982, 2984, 0, 0, 2985, 0, 0,
	2983, 2986, 2987, 0, 2774, 2775, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 2582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3025, 3026, 0, 0, 0, 0, 0, 1864, 1865,
	130, 180, 130, 154, 130, 0, 1886, 130, 0, 0,
	1444, 1448, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1495, 130,
	2247, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	-2, 2539, 2540, 0, 0, 2162, 2994, 2992, 2996, 2671,
	0, 0, 0, 0, 2631, 0, 0, 1265, 0, 2966,
	3182, 0, 3183, 0, 0, 3053, 3054, 0, 0, 3057,
	3134, 3058, 3059, 3060, 3061, 3062, 0, 3064, 3087, 3089,
	3065, 3066, 3067, 0, 0, 0, 0, 0, 3021, 0,
	0, 0, 0, 3043, 2520, 0, 0, 3040, 130, 0,
	2275, 2277, 2297, 1899, 2293, 2299, 2295, 2316, 2315, 2314,
	2317, 2318, 2319, 0, 0, 0, 3153, 3166, 3167, 3171,
	3172, 3174, 3175, 3193, 165, 3207, 2159, 0, 0, 0,
	3214, 3216, 3218, 3350, 3351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1388, 0, 0, 1533, 1534, 1534, 1534, 0,
	0, 1276, 1273, 1558, 0, 1567, 0, 0, 0, 2950,
	0, 0, -2, -2, 0, 2946, 2955, 2956, 2951, -2,
	-2, 2952, 1563, 1570, 0, 1568, 0, 0, 1944, 1939,
	1940, 1555, 1556, 1646, 0, 1670, -2, -2, 326, 287,
	-2, 0, 176, 1583, 1125, 1126, 0, 1128, 1131, 1132,
	1133, 1134, 1135, 1136, -2, -2, -2, -2, -2, -2,
	1143, 1145, 1146, -2, 1424, 1426, 0, 1539, 0, -2,
	0, 1161, 0, 1166, 1168, 1170, 0, 1183, 1185, 0,
	1440, 1427, 1428, 1429, 1430, 1431, 0, 0, 1540, 1178,
	1541, 0, 0, 1418, 1419, 1420, 1584, 0, 1165, 0,
	0, 1182, 2023, 0, 1279, 1278, 0, 0, 0, 1409,
	1410, 0, 0, 0, -2, 1534, 1244, 0, 1406, 1402,
	0, 2911, 0, 1281, 0, 0, 1732, 1124, 0, 1737,
	1775, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 0, 0, 0,
	1396, 1343, 0, 0, 1192, 0, 0, 0, 550, 0,
	0, 1396, 0, 0, 0, 0, 0, 1441, 0, 1352,
	0, 0, 0, 0, 0, 0, 0, 1366, 1369, 0,
	0, 0, 0, 0, 1732, 0, 1726, 0, 1396, 1735,
	1775, 0, 1724, -2, 1440, 0, 1741, 1338, 0, 0,
	0, 0, 1646, 0, 1608, 1644, 0, 1634, 0, 160,
	1442, 2725, 2726, 2727, 1946, 0, 0, 1796, 1797, 0,
	1798, 1278, 1795, 1790, 1649, 0, 0, 0, 1807, 1806,
	1946, 0, 1810, 1590, 1652, 1652, 0, 1596, 0, 1661,
	1652, 1652, 1675, 423, 570, 535, 158, 1382, 1383, 1384,
	526, 0, 0, 1819, 0, 0, 1961, 1963, 157, 1965,
	1966, 1967, 0, 1991, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2467, 2452, 2454, 0,
	0, 0, 2459, 2460, 0, 2432, 2433, 2435, 2467, 0,
	2480, 2482, 2483, 2484, 2486, 2479, 0, 2550, 0, 0,
	0, 0, 2643, 2647, 2645, 1460, 0, 2871, 2521, 0,
	2526, 0, 0, 0, -2, 2542, 1467, 2754, 0, 0,
	0, 2858, 0, 1684, 1686, 0, 2656, 2565, 2555, 2556,
	2557, 2558, 0, 2576, 0, 0, 0, 2581, 2056, 2006,
	2608, 2606, 0, 0, 0, 0, 0, 0, 0, 2618,
	0, 0, 2997, 3001, 0, 0, 0, 0, 0, 0,
	0, 3011, 3012, 0, 0, 0, 0, 0, 2114, 0,
	2135, 2781, 0, 0, 2796, 2797, 0, 2802, 2804, 2805,
	0, 161, 2738, 2809, 0, 2521, 0, -2, 2824, 2824,
	0, 0, 0, 2158, 2377, 0, 0, 2197, 2199, 0,
	2220, 3270, 0, 2421, 2424, 0, 138, 0, 2170, 295,
	1989, 0, 0, 0, 2412, 0, 0, 0, 0, 0,
	1890, 0, 2412, 295, 130, 295, 130, 2194, 2198, 2202,
	2205, 2206, 0, 0, 0, 0, 2210, 0, 2207, 2208,
	2209, 2213, 0, 2215, 0, 2218, 2223, 2750, 2751, 2752,
	0, 0, 0, 2742, 2744, 438, 186, 258, 0, 2010,
	2137, 2150, 2236, 0, 0, 2385, 0, 2232, 2139, 0,
	0, 2379, 3277, 2040, 2046, 2047, 2048, 2050, 2142, 0,
	2573, 0, 2381, 0, 3279, 2144, 2236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 2357, 3259, 3286, 2345, 0, 0, 2441, 0,
	2440, 1469, 2446, 1469, 1469, 2358, 3260, 3287, 2359, 3261,
	3288, 2360, 3289, 3322, 3323, 3328, 3329, 3330, 2361, 0,
	2544, 130, 295, 2233, 2545, 3262, 0, 0, 2412, 2549,
	3290, 2364, 3264, 3291, 0, 0, 0, 3107, 3108, 2365,
	2990, 0, 0, 0, 0, 3265, 0, 3118, 3122, 3294,
	2350, 0, 0, 0, 2792, 0, 0, 2371, 3268, 3297,
	0, 2372, 3308, 2373, 3269, 3298, 0, 2374, 3299, 2375,
	3306, 2376, 2738, 2828, 2738, 2738, 3309, 0, 0, 0,
	0, 0, 2763, 2764, 2402, 2999, 2989, 2403, 0, 2404,
	3301, 2405, 2800, 1867, 1868, 3272, 3302, 0, 0, 0,
	0, 0, 0, 3349, 0, 0, 0, 0, 0, 0,
	0, 0, 2410, 0, 0, 0, 0, 130, 2654, 295,
	130, 0, 3285, 3139, 0, 0, 3300, 1890, 2583, 0,
	2586, 2587, 2588, 0, 2590, 2591, 2592, 214, 276, 2595,
	2596, 0, 2598, 3263, 0, 0, 0, 0, 0, 0,
	0, 2237, 2239, 2241, 0, 2244, 1449, 0, 0, 0,
	1458, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 0, 1468,
	1511, 1508, 1506, 1507, 1508, 0, 1497, 2246, 130, 0,
	130, 0, 130, 0, 0, 2256, 0, 2535, 2537, 0,
	0, 0, 2665, 0, 2541, 0, 0, 2630, 2261, 2696,
	2701, 0, 2857, 3078, 3073, 3075, 0, 163, 0, 3056,
	0, 3063, 3091, 0, 0, 0, 0, 0, 0, 0,
	3086, 3080, 0, 0, 3044, 156, 3086, 0, 3023, 0,
	2292, 2310, 0, 3155, 3156, 3208, 3210, 3217, 3211, 3212,
	0, 0, 3219, 3237, 3238, 3220, 3221, 3222, 3223, 3224,
	3225, 3226, 0, 0, 0, 256, 0, 3230, 3231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1389, 0, 1395, 0, 0, 0, 0, 1397,
	1398, 0, 1272, 1565, 2940, 0, 2943, 0, 2953, 2954,
	0, 0, 1571, 2901, 1944, 1515, 0, 2903, 0, 2885,
	0, 1588, 0, 0, 167, 167, 167, 167, 0, 175,
	0, 0, -2, -2, 0, 0, 0, 1179, 0, -2,
	1163, 1167, 1169, 1171, 0, 1184, 1187, 0, 1440, 0,
	1186, 1189, 0, 0, 1432, 1433, 1434, 1435, 0, 0,
	0, 1180, 0, 0, 0, 0, 2024, 1217, 1442, 1407,
	1408, 0, 1227, 1514, -2, 0, 0, 0, 1403, 0,
	0, 1280, 0, 2909, 2910, 2914, 0, 1440, 0, 0,
	0, 0, 1735, 0, 1716, 1774, 0, 0, 1286, 1288,
	1290, 1292, 0, 1301, 0, 1302, 0, 1304, 1305, 0,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1194, 1195,
	1209, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 1351, 0, 1315, 1316, 1317, 1318, 0, 1323,
	0, 0, 1372, 0, 0, 0, 0, 1329, 1440, 0,
	1331, 1775, 1741, 0, 0, 0, 1741, 1334, 0, 1336,
	0, 0, 0, 0, 0, 2885, 1667, 1630, 1635, 1788,
	0, 1927, 0, 0, 0, 1800, 1946, 1803, 1804, 0,
	0, 1809, 1647, 235, 0, 0, 0, 0, 0, 1623,
	1623, 1623, 1621, 1592, 1651, 0, 1656, 1594, 1652, 1661,
	1652, 1652, -2, 1596, 0, 1598, 1657, 0, 1656, 1600,
	1602, 1672, 0, 0, 0, 0, -2, 0, 2056, 1821,
	1822, 1823, -2, 2104, 0, 1971, 2106, 0, 1991, 2118,
	0, 0, 2113, 2521, 0, 3194, 0, 2134, 0, 2569,
	2129, 0, 2453, 0, 2448, 2429, 2465, 0, 0, 2455,
	2456, 2461, 2457, 2458, 0, 2431, 0, 0, 0, 2430,
	0, 0, 0, 0, 2639, 2640, 0, 0, 0, 2646,
	0, 0, 0, 0, 2135, 0, 0, 0, 2529, 2013,
	0, 2016, 2017, 0, 0, 2062, 2025, 0, 0, 0,
	0, 0, 2019, 0, 2756, 2758, 2731, 2732, 2733, 2734,
	2735, 2736, 364, 1519, 1520, 0, 2563, 0, 1690, 0,
	2655, 2657, 2560, 0, 2578, 2579, 2580, 2577, 2599, 0,
	2607, 2602, 2610, 2603, 2605, 2604, 2104, 1991, 0, 0,
	2622, 2006, 0, 3002, 3003, 3004, 0, 0, 3007, 3008,
	0, 0, 0, 0, 3015, 2671, 0, 2135, 0, 0,
	2771, 2788, 0, 2778, 0, 0, 0, 0, 0, 2808,
	2815, 2824, 0, 2824, 2819, 0, 2821, 2738, 0, 0,
	0, 0, 2219, 2748, 2749, 2420, 0, 0, 0, 2229,
	0, 2001, 2230, 2231, 0, 0, 1985, 1988, 0, 2070,
	2129, 0, 0, 2074, 0, 0, 2412, 0, 0, 2128,
	2172, 0, 0, 0, 0, 2185, 0, 2191, 2028, -2,
	0, 2193, 0, 2189, 0, 2196, 2203, 2211, 2204, 2212,
	2224, 2225, 0, 0, 2226, 2741, 0, 2745, 2746, 2747,
	2009, 2011, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2383, 0,
	3281, 0, 2146, 2236, 0, 0, 2387, 0, 3283, 2148,
	2236, 0, 0, 2600, 0, 2348, 2438, 2439, 0, 1469,
	0, 2547, 0, 2659, 0, 2662, 0, 3101, 0, 2366,
	3292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3310, 0, 0, 0, 0, 0, 2794, 0, 2789, 0,
	0, 0, 2831, 2829, 2830, 0, 0, 0, 2401, 3307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2650, 0, 3140,
	0, 3142, 3136, 0, 0, 2585, 0, 0, 0, 0,
	0, 0, 0, 3028, 3029, 3030, 3293, 130, 1450, 1445,
	0, 1267, 1501, 1503, 1499, 2248, 0, 2250, 0, 2252,
	0, 130, 2533, 0, 0, 2635, 0, 2669, 0, 0,
	0, 0, 3086, 0, 0, 3076, 3055, 3135, 0, 3088,
	3090, 0, 0, 0, 0, 0, 3022, 0, 3081, 3082,
	3083, 3084, 3085, 130, 0, 3086, 3148, 3213, 3215, 0,
	0, 0, 0, 0, 0, 3235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1534, 1390, 1392,
	1393, 1277, 2941, 0, 2944, 0, 1416, 0, 2902, 0,
	1942, 1943, 2898, 0, 1645, 168, 169, 0, 0, 0,
	0, 174, 1127, -2, 0, 0, -2, 0, 0, -2,
	0, 0, 1188, 1190, -2, 1437, 1439, 0, 0, 1542,
	0, -2, 0, 1413, 0, -2, 1411, 1389, 1245, 1399,
	1405, 0, 0, 2916, 2913, 0, 1741, 0, 0, 1728,
	1729, 1741, 0, 1773, 1283, 0, 1353, 0, 0, 1193,
	1196, 1197, 1198, 1199, 1200, 1201, -2, -2, -2, -2,
	-2, -2, 1208, 0, 0, 1212, 1364, 0, 1347, 1348,
	0, 1310, 1311, 1312, 1350, 0, 1319, 0, 1367, 1368,
	0, 0, 0, 1325, 1693, 0, 204, 1326, 0, 1381,
	0, 1741, 1727, 1740, 0, 1725, 0, 0, 0, 1335,
	1337, 1720, 1720, 1720, 0, 2898, 0, 1945, 0, 0,
	0, 1792, 1793, 0, 1799, 1801, 0, 1808, 0, 1591,
	0, 0, 0, 0, 0, 1618, 1622, 1619, 1620, 1593,
	0, 1654, 0, 1595, 1599, 1601, 1603, 1612, 1654, 0,
	0, 1674, 0, 0, 565, 0, 0, 1831, 2056, 0,
	1891, 2106, 0, 1964, 1968, 2114, 2105, 0, 0, 1992,
	1994, 1995, 2014, 0, 2120, 0, 139, 140, 1962, 0,
	0, 0, 2671, 2525, 2135, 2567, 0, 0, 2467, 0,
	2470, 2468, 0, 0, 0, 2434, 2436, 2437, 2488, 2481,
	2485, 0, 0, 2644, 0, 2648, 0, 2649, 0, 2876,
	0, 0, 0, 295, 2673, 0, 2018, 2020, 2061, 2738,
	2738, 0, 2066, 2521, 0, 2026, 0, 2021, 2022, 0,
	1687, 1688, 0, 2564, 0, 2562, 2575, 0, 2611, 0,
	0, 1962, 0, 0, 0, 2632, 0, 3005, 3006, 3009,
	3010, 3013, 3014, 2663, 0, 2120, 0, 2505, 2506, 0,
	2766, 0, 2792, 0, 2780, 2782, 2783, 2784, 2785, 2786,
	2795, 2798, 2803, 2806, 0, 2816, 2817, 2818, 2820, 0,
	2825, 0, 0, 0, 2389, 2395, 2422, 2423, 2426, 0,
	2169, 0, 2006, 1984, 0, 1986, 1987, 2412, 0, 2413,
	0, 2415, 0, 0, 2123, 0, 2076, 0, 0, 2081,
	0, 1938, 1938, 0, 0, 2176, 2186, 1889, 2032, 0,
	0, 0, 0, 2180, 2182, 2183, 2181, 0, 2029, 0,
	0, 0, 0, 130, 130, 2227, 2753, 2743, 2378, 0,
	0, 3271, 0, 0, 3316, 2386, 0, 0, 2380, 3278,
	2391, 2382, 0, 3280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2363, 3305, 2450, 0, 2362,
	130, 2412, 3311, 3102, 0, 0, 0, 0, 2859, 2844,
	0, 0, 0, 2860, 2861, 0, 0, 0, 0, 3119,
	3120, 3121, 3123, 3124, 3125, 3126, 3127, 2351, 2353, 2352,
	2369, 2777, 0, 0, 0, 3312, 3313, 2399, 2400, 0,
	2634, 2801, 2406, 3273, 2407, 3274, 3303, 2408, 3275, 2409,
	3276, 3304, 0, 0, 0, 0, 0, 130, 2653, 0,
	0, 133, 130, 0, 0, 0, 0, 0, 0, 3034,
	3035, 3036, 3037, 3038, 3039, 0, 0, 2242, 1446, 130,
	130, 130, 2254, 2536, 0, 0, 2670, 0, 2628, 2702,
	3018, 3074, 0, 3092, 3068, 3069, 3070, 3071, 3072, 3079,
	3019, 0, 130, 0, 0, 3227, 0, 3229, 0, 0,
	3239, 3251, 3252, 3240, 3241, 3242, 3243, 3244, 3245, 0,
	3247, 3248, 0, 2942, 1415, 1442, 0, 2905, 0, 2883,
	170, 171, 172, 173, -2, -2, 0, 0, 0, -2,
	-2, 1436, 1438, -2, -2, 1181, 1412, 1442, 1242, 1404,
	1535, 1534, 0, 1537, 0, 1730, 1731, 0, 1736, 0,
	1300, 1303, 0, 0, 0, 1213, 0, 0, 0, 1309,
	1314, 0, 0, 560, 1324, 1370, 1371, 1694, 0, 1695,
	1691, 1692, 0, 0, 0, 1376, 352, 0, 1332, 1733,
	1734, 1333, 1741, 0, 1757, 1741, 1375, 2905, 1639, 0,
	0, 1930, 0, 0, 1805, 1648, 1613, 0, 1615, 0,
	0, 0, 1617, 0, 0, 0, 1597, 0, 0, 0,
	152, 0, 1676, 1680, 0, 0, 0, 1946, 1813, 1913,
	1913, 0, 1815, 1828, 0, 1831, 0, 2114, 0, 0,
	0, 141, 0, 1990, 0, 1996, 0, 2106, 3195, 0,
	0, 0, 1991, 0, 0, 3191, 2516, 0, 0, 0,
	0, 2427, 0, 1681, 0, 1464, -2, 2462, 0, 2463,
	2498, 0, 2515, 0, 2641, 0, 0, 0, 2878, 0,
	0, 0, 1962, 0, 2528, 2015, 0, 2122, 2122, 0,
	2090, 0, 2027, 0, 1689, 2658, 0, 2007, 0, 0,
	0, 0, 2006, 0, 0, 0, 2668, 0, 0, 0,
	0, 2794, 2787, 0, 0, 0, 2840, 2840, 0, 0,
	0, 0, 0, 2171, 2014, 1982, 1983, 2072, 2086, 2414,
	2418, 2416, 2417, 2419, 2086, 0, 2086, 0, 0, 1932,
	127, 0, 1933, 0, 2173, 0, 0, 2033, 2174, 0,
	2178, 0, 1690, 2031, 2179, 2188, 2195, 0, 0, 2160,
	0, 2160, 0, 0, 2393, 3315, 2384, 0, 3282, 0,
	0, 2397, 2388, 0, 3284, 2451, 2548, 2661, 2367, 3266,
	3295, 2368, 0, 0, 0, 2850, 0, 0, 0, 3267,
	3296, 0, 0, 0, 0, 0, 0, 0, 3345, 0,
	2411, 2651, 2652, 3141, 1690, 0, 2593, 2594, 2597, 0,
	0, 0, 2249, 2251, 2253, 2534, 2636, 0, 3077, 3086,
	3024, 3233, 3234, 3228, 3232, 0, 3246, 1391, 1417, 1516,
	1573, 0, 2897, 0, -2, -2, -2, 1414, 2920, 0,
	1738, 1739, 1772, 1363, -2, 0, 1349, 1345, 1346, 1320,
	0, 1321, 0, 1696, 1327, 1328, 0, 1377, 1330, 1766,
	1719, 1721, 0, 0, 0, 0, 1743, 1744, 1745, 1746,
	1747, 1748, 1751, 1755, 0, 1373, 0, 1574, 1642, 0,
	0, 1923, 1646, 0, 1926, 0, 1614, 0, 1625, 1616,
	0, 0, 1655, 0, 1658, 1660, 1675, 0, 1678, 0,
	0, 0, 1697, 0, 0, 1718, 1812, 1814, 0, 0,
	0, 1908, 0, 1830, 1832, 1833, 1894, 1894, 1836, 1837,
	1894, 1894, 0, 0, 0, 1847, 1855, 1646, 1826, 141,
	0, 1969, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1970, 2118, 0, 1993, 2014, 2114, 2119, 2115,
	0, 0, 2104, 2106, 1991, 3194, 0, 0, 0, 0,
	0, 2129, 0, 2453, 1683, 2466, 0, 2471, 2472, 0,
	2504, 2500, 2487, 2489, 0, 2492, 2493, 2412, 0, 2642,
	2866, 0, 0, 2872, 2877, 0, 0, 2875, 2525, 2135,
	0, 2063, 0, 2064, 2080, 2095, 0, 2060, 0, 2843,
	2005, 0, 2006, 0, 2104, 1991, 2612, 0, 2006, 2671,
	0, 0, 2767, 0, 2776, 0, 2823, 2840, 2837, 0,
	2836, 2865, 2425, 0, 0, 0, 2012, 2738, 0, 2738,
	0, 2738, 2082, 2083, 364, 1941, 126, 1937, 1938, 2177,
	2187, 0, 0, 2740, 2390, 2396, 2151, 0, 2153, 0,
	2392, 0, 2160, 0, 0, 2845, 2855, 2855, 2848, 0,
	2862, 0, 0, 0, 2791, 2370, 3314, 0, 3347, 3348,
	0, 0, 0, 0, 130, 2589, 3078, 130, 0, 2006,
	130, 3236, 2904, 2906, 0, 2884, 2886, 2888, 2889, 2890,
	2891, 2892, 0, 234, 420, 521, 0, 0, 0, 0,
	2915, 0, -2, 0, 0, 1378, 1379, 1771, 0, 0,
	0, 0, 1340, 0, 1742, 1749, 1750, 0, 0, 1342,
	1374, 1633, 0, 0, 0, 0, 1925, 1931, 1794, 0,
	0, 1653, 1659, 1673, 1677, 0, 0, 1703, 0, 0,
	0, 0, 1700, 1720, 0, 0, 1912, 0, 1910, 0,
	0, 0, 0, 0, 0, 0, 1846, 1829, 0, 1849,
	1850, 1851, 1852, 1853, 0, 1816, 2118, 2103, 2120, 0,
	1997, 141, 2116, 2117, 2106, 2114, 0, 2671, 2522, 0,
	0, 2525, 2131, 0, 1682, 2467, 2469, 2464, 0, 0,
	0, 2499, 2490, 1894, 2494, 2495, 0, 2514, 0, 0,
	2879, 2880, 2517, 0, 0, 0, 2065, 0, 2067, 2091,
	2092, 0, 2087, 2088, 2089, 2068, 0, 0, 0, 0,
	2008, 2623, 2006, 0, 0, 0, 2633, 2664, 2759, 0,
	0, 2769, 2799, 2835, 2838, 2839, 0, 2003, 0, 0,
	0, 2122, 0, 2122, 2521, 2122, 0, 1944, 1941, 1934,
	0, 2060, 2190, 0, 0, 0, 2394, 2155, 0, 2398,
	2058, 0, 2058, 0, 0, 0, 0, 3341, 3342, 0,
	3343, 3346, 3143, 3031, 3032, 0, 2627, 3020, 0, 0,
	0, 2893, 0, 0, 0, 2912, 2932, 2921, -2, 479,
	235, 0, 2932, 2932, 1362, 1322, 1365, 1380, 1755, 0,
	0, 1758, 0, 1760, 0, 0, 0, 1722, 1723, 1756,
	1341, 0, 0, 0, 0, 1646, 1663, 3095, 0, 1701,
	0, 1705, 0, 1698, 0, 1699, 0, 1717, 1903, 1904,
	0, 0, 1915, 1905, 0, 0, 0, 1834, 1835, 1838,
	1839, 1840, 1841, 0, 1844, 1845, 1848, 0, 1856, 1858,
	2120, 1949, 0, 2108, 1938, 1938, 0, 2118, 2114, 141,
	2106, 3192, 2523, 2524, 2518, 2025, 0, 0, 2428, 0,
	0, 2497, 2501, 2502, 0, 0, 0, 0, 0, 1962,
	0, 2079, 2093, 0, 2094, 0, 0, 0, 0, 0,
	0, 2842, 2625, 0, 0, 2006, 0, 2768, 0, 1998,
	0, 2002, 1999, 0, 2412, 0, 2412, 2090, 1646, 0,
	1935, 1944, 2175, 2184, 2739, 2160, 2160, 0, 2846, 2057,
	2853, 0, 2847, 0, 2863, 2864, 2793, 0, 0, 2907,
	2908, 2887, 0, 0, 0, 2917, 0, 0, 2923, 2924,
	2925, 2926, 2927, 2918, 2919, 0, 1768, 1770, 1759, 1761,
	0, 1764, 0, 1765, 1752, 1753, 0, 0, 0, 1922,
	1624, 0, 3093, 0, 1679, 1704, 1707, 1708, 0, 0,
	0, 1713, 0, 1706, 0, 0, 1906, 0, 1907, 1916,
	0, 0, 0, 0, 1909, 1911, 1842, 1843, 1854, 0,
	1947, 2107, 0, 127, 127, 0, 2120, 141, 2118, 2114,
	2135, 0, 0, 0, 0, 2491, 2496, 0, 2869, 2870,
	2525, 2121, 2096, 0, 2099, 2100, 0, 2097, 2059, 2069,
	2841, 2006, 0, 2613, 2760, 2770, 2004, 0, 2073, 2085,
	2075, 2095, 2412, 2084, 1936, 2152, 2154, 2160, 0, 2849,
	3344, 130, 2895, 2894, 0, 0, 2929, 2930, 0, 0,
	1339, 0, 0, 1762, 1763, 0, 0, 0, 0, 1662,
	0, 1709, 1710, 1711, 1712, 1714, 0, 0, 1914, 0,
	0, 1920, 0, 1857, 2109, 2110, 2111, 1938, 1951, 2118,
	2120, 141, 2120, 0, 2132, 2131, 0, 2503, 2504, 0,
	0, 2519, 2098, 2521, 2521, 2624, 2006, 0, 2412, 2078,
	2156, 2854, 3033, 2896, 2928, 2931, 2922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1778, 0, -2,
	0, 0, 0, 127, 2120, 1950, 2118, 1646, 2130, 0,
	2025, 2509, 0, 0, 0, 2101, 2102, 2626, 0, 2077,
	1767, 1769, 1754, 0, 0, -2, 1641, 1637, 1638, 3094,
	0, 1757, 0, 0, 1787, 0, 1776, 1917, 1918, 0,
	1921, 2112, 1948, 2120, 2124, 2133, 2135, 0, 2507, 2510,
	2511, 2512, 2513, 0, 0, 0, 2000, 0, 0, 1702,
	0, 1779, 1780, 1766, 1787, 1787, 0, 0, 0, 1952,
	2120, 2475, 0, 0, 0, 0, 0, 1534, 1715, 1771,
	1766, 1757, 1786, 0, 0, 0, 1646, 2508, 0, 0,
	0, 0, 0, 1755, 1771, 1783, 0, 0, 1919, 2125,
	2509, 2867, 2868, 1640, 0, 1781, 1755, 0, 0, 0,
	1782, 1784, 0, 2476, 0, 1785,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:621
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:774
		{
			yyVAL.stmt = nil
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:786
		{
			yyVAL.str = ""
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.list = yyDollar[1].list
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:791
		{
			yyVAL.list = nil
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:797
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:801
		{
			yyVAL.ival = 1
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:802
		{
			yyVAL.ival = 0
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:806
		{
			yyVAL.ival = 1
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:807
		{
			yyVAL.ival = 0
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:811
		{
			yyVAL.bval = true
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:812
		{
			yyVAL.bval = false
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.bval = true
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:817
		{
			yyVAL.bval = false
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:821
		{
			yyVAL.list = yyDollar[2].list
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:822
		{
			yyVAL.list = nil
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:823
		{
			yyVAL.list = nil
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = yyDollar[1].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = yyDollar[1].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = yyDollar[1].str
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = yyDollar[1].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = yyDollar[1].str
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = yyDollar[1].str
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = yyDollar[1].str
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = yyDollar[1].str
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:858
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:871
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:892
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:921
		{
			yyVAL.list = yyDollar[2].list
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:922
		{
			yyVAL.list = nil
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:931
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:944
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:957
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:963
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:969
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:975
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:981
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:988
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:995
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1001
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1020
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1036
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "abort"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "absent"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "absolute"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "access"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "action"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "add"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "admin"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "after"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "aggregate"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "also"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "alter"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "always"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "asensitive"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "assertion"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "assignment"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "at"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "atomic"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "attach"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "attribute"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "backward"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "before"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "begin"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "breadth"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "by"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "cache"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "call"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "called"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "cascade"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "cascaded"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "catalog"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "chain"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "characteristics"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "checkpoint"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "class"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "close"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "cluster"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "columns"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "comment"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "comments"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "commit"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "committed"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "compression"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "conditional"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "configuration"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "conflict"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "connection"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "constraints"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "content"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "continue"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "conversion"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "copy"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "cost"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "csv"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "cube"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "current"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "cursor"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "cycle"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "data"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "database"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "day"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "deallocate"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "declare"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "defaults"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "deferred"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "definer"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "delete"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "delimiter"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "delimiters"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "depends"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "depth"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "detach"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "dictionary"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "disable"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "discard"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "document"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "domain"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "double"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "drop"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "each"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "empty"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "enable"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "encoding"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "encrypted"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "enum"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "error"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "escape"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "event"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "exclude"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "excluding"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "exclusive"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "execute"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "explain"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "expression"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "extension"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "external"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "family"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "filter"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "finalize"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "first"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "following"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "force"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "format"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "forward"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "function"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "functions"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "generated"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "global"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "granted"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "groups"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "handler"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "header"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "hold"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "hour"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "identity"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "if"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "immediate"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "immutable"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "implicit"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "import"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "include"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "including"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "increment"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "indent"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "index"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "indexes"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "inherit"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "inherits"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "inline"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "input"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "insensitive"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "insert"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "instead"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "invoker"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "isolation"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "keep"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "key"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "keys"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "label"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "language"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "large"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "last"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "leakproof"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "level"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "listen"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "load"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "local"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "location"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "lock"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "locked"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "logged"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "mapping"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "match"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "matched"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "materialized"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "maxvalue"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "merge"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "method"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "minute"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "minvalue"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "mode"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "month"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "move"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "name"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "names"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "nested"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "new"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "next"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "nfc"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "nfd"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "nfkc"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "nfkd"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "no"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "normalized"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "nothing"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "notify"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "nowait"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "nulls"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "object"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "of"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "off"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "oids"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "old"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "omit"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "operator"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "option"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "options"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "ordinality"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "others"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "over"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "overriding"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "owned"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "owner"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "parallel"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "parameter"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "parser"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "partial"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "partition"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "passing"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "password"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "path"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "plan"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "plans"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "policy"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "preceding"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "prepare"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "prepared"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "preserve"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "prior"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "privileges"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "procedural"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "procedure"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "procedures"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "program"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "publication"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "quote"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "quotes"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "range"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "read"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "reassign"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "recheck"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "recursive"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "ref"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "referencing"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "refresh"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "reindex"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "relative"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "release"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "rename"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "repeatable"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "replace"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "replica"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "reset"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "restart"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "restrict"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "return"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "returns"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "revoke"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "role"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "rollback"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "rollup"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "routine"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "routines"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "rows"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "rule"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "savepoint"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "scalar"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "schema"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "schemas"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "scroll"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "search"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "second"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "security"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "sequence"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "sequences"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "serializable"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "server"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "session"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "set"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "sets"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "share"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "show"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "simple"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "skip"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "snapshot"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "source"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "sql"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "stable"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "standalone"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "start"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "statement"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "statistics"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "stdin"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "stdout"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "storage"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "stored"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "strict"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "string"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "strip"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "subscription"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "support"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "sysid"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "system"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "tables"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "tablespace"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "target"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "temp"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "template"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "temporary"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "text"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "ties"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "transaction"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "transform"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "trigger"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "truncate"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "trusted"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "type"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "types"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "uescape"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "unbounded"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "uncommitted"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "unconditional"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "unencrypted"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "unknown"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "unlisten"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "unlogged"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "until"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "update"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "vacuum"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "valid"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "validate"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "validator"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "value"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "varying"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "version"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "view"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "views"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "volatile"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "whitespace"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "within"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "without"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "work"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "wrapper"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "write"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "xml"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "year"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "yes"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "zone"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "between"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "bigint"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "bit"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "boolean"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "char"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "character"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "coalesce"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "dec"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "decimal"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "exists"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "extract"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "float"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "greatest"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "grouping"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "inout"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "int"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "integer"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "interval"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "json"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "json_array"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "json_arrayagg"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "json_exists"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "json_object"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "json_objectagg"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "json_query"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "json_scalar"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "json_serialize"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "json_table"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "json_value"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "least"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "merge_action"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "national"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "nchar"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "none"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "normalize"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "nullif"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "numeric"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "out"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "overlay"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "position"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "precision"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "real"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "row"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "setof"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "smallint"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "substring"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "time"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "timestamp"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "treat"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "trim"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "values"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "varchar"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "xmlattributes"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "xmlconcat"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "xmlelement"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "xmlexists"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "xmlforest"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "xmlparse"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "xmlpi"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "xmlroot"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "xmlserialize"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "xmltable"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "authorization"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "binary"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "collation"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "concurrently"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "cross"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "current_schema"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "freeze"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "full"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "ilike"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "inner"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "is"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "isnull"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "join"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "left"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "like"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "natural"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "notnull"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "outer"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "overlaps"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "right"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "similar"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "tablesample"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "verbose"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "all"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "analyse"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "analyze"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "and"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "any"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "array"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "as"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "asc"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "asymmetric"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "both"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "case"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "cast"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "check"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "collate"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "column"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "constraint"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "create"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "current_catalog"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "current_date"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "current_role"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "current_time"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "current_timestamp"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "current_user"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "default"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "deferrable"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "desc"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "distinct"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "do"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "else"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "end"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "except"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "false"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "fetch"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "for"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "foreign"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "from"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "grant"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "group"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "having"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "in"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "initially"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "intersect"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "into"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "lateral"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "leading"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "limit"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "localtime"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "localtimestamp"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "not"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "null"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "offset"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "on"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "only"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "or"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "order"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "placing"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "primary"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "references"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "returning"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "select"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "session_user"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "some"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "symmetric"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "system_user"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "table"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "then"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "to"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "trailing"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "true"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "union"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "unique"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "user"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "using"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "variadic"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "when"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "where"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "window"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "with"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "abort"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "absent"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "absolute"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "access"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "action"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "add"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "admin"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "after"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "aggregate"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "all"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "also"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "alter"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "always"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "analyse"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "analyze"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "and"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "any"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "asc"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "asensitive"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "assertion"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "assignment"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "asymmetric"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "at"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "atomic"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "attach"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "attribute"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "authorization"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "backward"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "before"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "begin"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "between"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "bigint"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "binary"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "bit"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "boolean"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "both"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "breadth"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "by"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "cache"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "call"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "called"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "cascade"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "cascaded"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "case"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "cast"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "catalog"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "chain"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "characteristics"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "check"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "checkpoint"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "class"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "close"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "cluster"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "coalesce"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "collate"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "collation"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "column"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "columns"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "comment"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "comments"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "commit"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "committed"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "compression"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "concurrently"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "conditional"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "configuration"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "conflict"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "connection"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "constraint"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "constraints"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "content"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "continue"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "conversion"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "copy"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "cost"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "cross"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "csv"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "cube"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "current"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "current_catalog"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "current_date"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "current_role"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "current_schema"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "current_time"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "current_timestamp"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "current_user"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "cursor"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "cycle"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "data"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "database"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "deallocate"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "dec"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "decimal"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "declare"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "default"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "defaults"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "deferrable"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "deferred"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "definer"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "delete"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "delimiter"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "delimiters"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "depends"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "depth"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "desc"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "detach"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "dictionary"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "disable"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "discard"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "distinct"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "do"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "document"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "domain"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "double"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "drop"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "each"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "else"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "empty"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "enable"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "encoding"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "encrypted"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "end"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "enum"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "error"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "escape"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "event"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "exclude"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "excluding"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "exclusive"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "execute"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "exists"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "explain"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "expression"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "extension"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "external"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "extract"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "false"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "family"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "finalize"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "first"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "float"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "following"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "force"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "foreign"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "format"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "forward"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "freeze"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "full"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "function"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "functions"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "generated"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "global"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "granted"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "greatest"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "grouping"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "groups"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "handler"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "header"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "hold"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "identity"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "if"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "ilike"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "immediate"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "immutable"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "implicit"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "import"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "in"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "include"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "including"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "increment"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "indent"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "index"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "indexes"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "inherit"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "inherits"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "initially"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "inline"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "inner"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "inout"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "input"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "insensitive"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "insert"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "instead"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "int"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "integer"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "interval"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "invoker"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "is"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "isolation"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "join"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "json"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "json_array"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "json_arrayagg"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "json_exists"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "json_object"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "json_objectagg"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "json_query"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "json_scalar"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "json_serialize"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "json_table"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "json_value"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "keep"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "key"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "keys"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "label"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "language"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "large"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "last"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "lateral"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "leading"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "leakproof"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "least"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "left"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "level"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "like"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "listen"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "load"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "local"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "localtime"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "localtimestamp"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "location"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "lock"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "locked"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "logged"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "mapping"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "match"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "matched"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "materialized"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "maxvalue"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "merge"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "merge_action"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "method"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "minvalue"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "mode"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "move"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "name"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "names"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "national"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "natural"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "nchar"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "nested"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "new"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "next"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "nfc"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "nfd"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "nfkc"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "nfkd"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "no"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "none"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "normalize"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "normalized"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "not"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "nothing"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "notify"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "nowait"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "null"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "nullif"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "nulls"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "numeric"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "object"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "of"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "off"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "oids"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "old"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "omit"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "only"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "operator"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "option"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "options"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "or"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "ordinality"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "others"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "out"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "outer"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "overlay"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "overriding"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "owned"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "owner"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "parallel"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "parameter"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "parser"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "partial"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "partition"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "passing"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "password"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "path"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "placing"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "plan"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "plans"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "policy"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "position"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "preceding"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "prepare"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "prepared"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "preserve"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "primary"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "prior"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "privileges"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "procedural"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "procedure"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "procedures"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "program"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "publication"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "quote"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "quotes"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "range"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "read"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "real"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "reassign"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "recheck"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "recursive"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "ref"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "references"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "referencing"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "refresh"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "reindex"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "relative"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "release"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "rename"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "repeatable"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "replace"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "replica"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "reset"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "restart"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "restrict"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "return"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "returns"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "revoke"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "right"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "role"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "rollback"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "rollup"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "routine"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "routines"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "row"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "rows"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "rule"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "savepoint"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "scalar"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "schema"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "schemas"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "scroll"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "search"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "security"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "select"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "sequence"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "sequences"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "serializable"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "server"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "session"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "session_user"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "set"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "setof"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "sets"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "share"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "show"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "similar"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "simple"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "skip"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "smallint"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "snapshot"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "some"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "source"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "sql"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "stable"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "standalone"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "start"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "statement"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "statistics"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "stdin"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "stdout"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "storage"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "stored"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "strict"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "string"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "strip"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "subscription"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "substring"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "support"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "symmetric"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "sysid"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "system"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "system_user"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "table"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "tables"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "tablesample"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "tablespace"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "target"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "temp"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "template"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "temporary"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "text"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "then"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "ties"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "time"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "timestamp"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "trailing"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "transaction"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "transform"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "treat"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "trigger"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "trim"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "true"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "truncate"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "trusted"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "type"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "types"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "uescape"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "unbounded"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "uncommitted"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "unconditional"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "unencrypted"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "unique"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "unknown"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "unlisten"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "unlogged"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "until"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "update"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "user"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "using"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "vacuum"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "valid"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.str = "validate"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.str = "validator"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.str = "value"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2009
		{
			yyVAL.str = "values"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.str = "varchar"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.str = "variadic"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.str = "verbose"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2013
		{
			yyVAL.str = "version"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.str = "view"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.str = "views"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.str = "volatile"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2017
		{
			yyVAL.str = "when"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.str = "whitespace"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.str = "work"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.str = "wrapper"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.str = "write"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.str = "xml"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.str = "xmlattributes"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.str = "xmlconcat"
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2025
		{
			yyVAL.str = "xmlelement"
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2026
		{
			yyVAL.str = "xmlexists"
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.str = "xmlforest"
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2029
		{
			yyVAL.str = "xmlparse"
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2030
		{
			yyVAL.str = "xmlpi"
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.str = "xmlroot"
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2032
		{
			yyVAL.str = "xmlserialize"
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.str = "xmltable"
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2034
		{
			yyVAL.str = "yes"
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2035
		{
			yyVAL.str = "zone"
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2050
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2052
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2056
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2062
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2067
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2072
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2077
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2082
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2087
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2092
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2097
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2102
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2107
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2112
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2117
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2122
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2127
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2132
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2137
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2142
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2146
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2150
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2154
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2158
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2162
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2166
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2171
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2178
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2183
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2190
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2195
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2202
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2207
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2214
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2221
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2228
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2235
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2242
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2246
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2250
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2254
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2258
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2275
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2279
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2283
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2287
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2291
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2296
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2301
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2306
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2311
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1177:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2316
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2321
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2326
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2331
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2340
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2350
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2354
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2359
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2365
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2371
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2378
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2385
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2393
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2410
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2429
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2434
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2436
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2440
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2445
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2449
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2454
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2459
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2464
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2469
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2474
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2479
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2484
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2489
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2494
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2499
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2504
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2517
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2522
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2527
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2532
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2539
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2540
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2542
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2551
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2558
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2559
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2561
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2565
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2570
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2574
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2578
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2582
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2588
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2594
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2612
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2613
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2614
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2631
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2635
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2639
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2643
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2647
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2652
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2659
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2669
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2674
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2681
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2699
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2700
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2704
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2713
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2715
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2717
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2719
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2721
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2723
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2727
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2735
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2750
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2761
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.list = nil
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2791
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2795
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2805
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2809
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2815
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2816
		{
			yyVAL.node = nil
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2820
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2824
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2828
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2837
		{
			yyVAL.list = nil
		}
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2839
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2851
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2875
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2908
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2914
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2922
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2927
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2932
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2937
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2942
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2947
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2952
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2957
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2962
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2967
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2972
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2977
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2982
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2990
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2995
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3000
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3005
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3009
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3017
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3025
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3035
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3043
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3051
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3059
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3067
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3075
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3084
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3092
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3100
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3108
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3116
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3122
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3127
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3132
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3137
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3142
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3147
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3152
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3157
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3162
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1324:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3167
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3176
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3185
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3190
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3196
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3202
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3213
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3221
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3233
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3245
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3258
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3266
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3272
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3278
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3286
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1339:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3297
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1340:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3322
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1341:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3338
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1342:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3358
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3368
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3372
		{
			yyVAL.list = nil
		}
	case 1345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3379
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3383
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3391
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3400
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3407
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3412
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3416
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3423
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3433
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3434
		{
			yyVAL.str = "year"
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3435
		{
			yyVAL.str = "month"
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3436
		{
			yyVAL.str = "day"
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3437
		{
			yyVAL.str = "hour"
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3438
		{
			yyVAL.str = "minute"
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3439
		{
			yyVAL.str = "second"
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1362:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3445
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3450
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3458
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3461
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3466
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3470
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3482
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3487
		{
			yyVAL.bval = true
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3488
		{
			yyVAL.bval = false
		}
	case 1372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3489
		{
			yyVAL.bval = false
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3492
		{
			yyVAL.bval = true
		}
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3493
		{
			yyVAL.bval = false
		}
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3494
		{
			yyVAL.bval = false
		}
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3503
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3510
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3514
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3518
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3529
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3530
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3531
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3535
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3539
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3550
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3554
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3561
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3567
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3573
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3581
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3587
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3595
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3599
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3606
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3614
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3621
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.node = nil
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3633
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3648
		{
			yyVAL.node = nil
		}
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3657
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3661
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3666
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3668
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3676
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3678
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3690
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3696
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3698
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3703
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3707
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3711
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3715
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3719
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3723
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3729
		{
			yyVAL.str = "NFC"
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3730
		{
			yyVAL.str = "NFD"
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3731
		{
			yyVAL.str = "NFKC"
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3732
		{
			yyVAL.str = "NFKD"
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3737
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3738
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3739
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3740
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.bval = true
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3745
		{
			yyVAL.bval = true
		}
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3746
		{
			yyVAL.bval = false
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3747
		{
			yyVAL.bval = false
		}
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3748
		{
			yyVAL.bval = false
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3753
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3757
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3766
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3771
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3777
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3782
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3788
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3793
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3802
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3811
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3820
		{
			yyVAL.list = nil
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3825
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3826
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3827
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3828
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3829
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3831
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3840
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3848
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3851
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3854
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3858
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3862
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3869
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3873
		{
			yyVAL.list = nil
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3879
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3885
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3896
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3900
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3908
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3912
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3916
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3920
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3924
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3929
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3934
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3939
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3945
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3949
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3955
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3959
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3965
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3969
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3977
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3981
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3989
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3997
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4005
		{
			yyVAL.str = "varchar"
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4009
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4017
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4025
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4035
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4046
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4060
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4074
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4086
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4098
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4108
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4120
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4132
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4137
		{
			yyVAL.ival = 1
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4138
		{
			yyVAL.ival = 0
		}
	case 1508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4139
		{
			yyVAL.ival = 0
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4142
		{
			yyVAL.ival = 1
		}
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4143
		{
			yyVAL.ival = 0
		}
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4147
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4157
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4164
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4168
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4175
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4179
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4184
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4185
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4188
		{
			yyVAL.str = "+"
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4189
		{
			yyVAL.str = "-"
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4190
		{
			yyVAL.str = "*"
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.str = "/"
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4192
		{
			yyVAL.str = "%"
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4193
		{
			yyVAL.str = "^"
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4194
		{
			yyVAL.str = "<"
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4195
		{
			yyVAL.str = ">"
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.str = "="
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4197
		{
			yyVAL.str = "<="
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.str = ">="
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4199
		{
			yyVAL.str = "<>"
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4203
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4207
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4217
		{
			yyVAL.list = nil
		}
	case 1535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4222
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4226
		{
			yyVAL.list = nil
		}
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4231
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4235
		{
			yyVAL.node = nil
		}
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4239
		{
			yyVAL.ival = 0
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4240
		{
			yyVAL.ival = 0
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4244
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4249
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4264
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4265
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4269
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4270
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4279
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4280
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4289
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4291
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4298
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4310
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4322
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4328
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4335
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4348
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4367
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4368
		{
			yyVAL.list = nil
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4372
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.list = nil
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4378
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4382
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4390
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4402
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4403
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4404
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4405
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4409
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4410
		{
			yyVAL.list = nil
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4415
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4417
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1573:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4428
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1574:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4447
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4465
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4475
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4480
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4485
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4490
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4501
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4502
		{
			yyVAL.list = nil
		}
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4507
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4516
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4521
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4526
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4537
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4538
		{
			yyVAL.list = nil
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4542
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4543
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4552
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4560
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4570
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4581
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4592
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4596
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4602
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4620
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4639
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4647
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4656
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4664
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4676
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4682
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4689
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4695
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4701
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4711
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4715
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4721
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4738
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4742
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4751
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4777
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4803
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4811
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4822
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4823
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4824
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4829
		{
			yyVAL.ival = 1
		}
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.ival = 0
		}
	case 1624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4840
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4851
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4862
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4876
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4877
		{
			yyVAL.with = nil
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4886
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1633:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4894
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4922
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4923
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4924
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1637:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4929
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1638:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4935
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4941
		{
			yyVAL.node = nil
		}
	case 1640:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4948
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4957
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4965
		{
			yyVAL.node = nil
		}
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4976
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4984
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4998
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4999
		{
			yyVAL.node = nil
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5007
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5009
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5013
		{
			yyVAL.node = nil
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5017
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5025
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5026
		{
			yyVAL.alias = nil
		}
	case 1653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5031
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5036
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5040
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5045
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5064
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5069
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5082
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5086
		{
			yyVAL.alias = nil
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5094
		{
			yyVAL.ival = 1
		}
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5095
		{
			yyVAL.ival = 0
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5099
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5100
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5105
		{
			yyVAL.list = nil
		}
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5118
		{
			yyVAL.into = nil
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5129
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5138
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5148
		{
			yyVAL.ival = 1
		}
	case 1675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5149
		{
			yyVAL.ival = 0
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5155
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5159
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5166
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5175
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5176
		{
			yyVAL.list = nil
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5186
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5190
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5202
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5215
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5216
		{
			yyVAL.list = nil
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5222
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5226
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5235
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5246
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5251
		{
			yyVAL.node = nil
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5256
		{
			yyVAL.str = "BY REF"
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5257
		{
			yyVAL.str = "BY VALUE"
		}
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5267
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5271
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5275
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5283
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5287
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5295
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5300
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1701:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5309
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1702:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5317
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5328
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5332
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5341
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5346
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5351
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5361
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5365
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5378
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5382
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5390
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1715:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5403
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5427
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5438
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.node = nil
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5444
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5445
		{
			yyVAL.node = nil
		}
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5449
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5450
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5455
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5462
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5472
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5484
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5488
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5495
		{
			yyVAL.bval = false
		}
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.bval = true
		}
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5497
		{
			yyVAL.bval = false
		}
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5501
		{
			yyVAL.bval = false
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5502
		{
			yyVAL.bval = true
		}
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.bval = true
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5508
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5509
		{
			yyVAL.list = nil
		}
	case 1738:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5520
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1739:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5535
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5548
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5555
		{
			yyVAL.node = nil
		}
	case 1742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5561
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5569
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5580
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5581
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5582
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5583
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5584
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5585
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5586
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5592
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5596
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5600
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5604
		{
			yyVAL.node = nil
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5609
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5610
		{
			yyVAL.node = nil
		}
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5615
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5619
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5620
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5621
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5622
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5623
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1767:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5629
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5630
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5631
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5632
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5638
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5658
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5668
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5669
		{
			yyVAL.node = nil
		}
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.node = nil
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5681
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5685
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5694
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1781:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5703
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1782:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5717
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1783:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5731
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1784:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5742
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1785:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5751
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5762
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5763
		{
			yyVAL.node = nil
		}
	case 1788:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5779
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5791
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5795
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5804
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5810
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5817
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1794:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5824
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5832
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5841
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5842
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5847
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5851
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5859
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1801:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5871
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5884
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5888
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5899
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1805:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5905
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5925
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5932
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1809:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5942
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5954
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5958
		{
			yyVAL.list = nil
		}
	case 1812:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5973
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5990
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5994
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1815:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6005
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1816:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6029
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6065
		{
			yyVAL.ival = 1
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6066
		{
			yyVAL.ival = 0
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6070
		{
			yyVAL.ival = 1
		}
	case 1820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6071
		{
			yyVAL.ival = 0
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6075
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.str = ""
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.str = ""
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6085
		{
			yyVAL.node = nil
		}
	case 1826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6090
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6093
		{
			yyVAL.node = nil
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6098
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6103
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.list = nil
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6122
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6126
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6130
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6138
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6142
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6146
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6150
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6154
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6162
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6166
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6182
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6186
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6193
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6199
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6200
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6201
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6202
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6203
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6204
		{
			yyVAL.node = nil
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6209
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6213
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6219
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6223
		{
			yyVAL.str = "true"
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6224
		{
			yyVAL.str = "false"
		}
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6225
		{
			yyVAL.str = "on"
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6226
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6233
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6238
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6242
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6243
		{
			yyVAL.node = nil
		}
	case 1869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6247
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6248
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6249
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6250
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6251
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6252
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6253
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6258
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6259
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6264
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6265
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6267
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6268
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6273
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6278
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6285
		{
			yyVAL.bval = true
		}
	case 1888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6286
		{
			yyVAL.bval = false
		}
	case 1889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6290
		{
			yyVAL.ival = 1
		}
	case 1890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6291
		{
			yyVAL.ival = 0
		}
	case 1893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6307
		{
			yyVAL.node = nil
		}
	case 1894:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6309
		{
			yyVAL.node = nil
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6317
		{
			yyVAL.ival = 1
		}
	case 1896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6318
		{
			yyVAL.ival = 0
		}
	case 1897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6322
		{
			yyVAL.ival = 1
		}
	case 1898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6323
		{
			yyVAL.ival = 0
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6327
		{
			yyVAL.ival = 1
		}
	case 1900:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.ival = 0
		}
	case 1901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6332
		{
			yyVAL.ival = 1
		}
	case 1902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6333
		{
			yyVAL.ival = 0
		}
	case 1903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6342
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1904:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6348
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1905:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6354
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1906:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6360
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1907:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6366
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6374
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1909:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6375
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6379
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6380
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6384
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6385
		{
			yyVAL.node = nil
		}
	case 1914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6390
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6405
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6414
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1917:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6421
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6428
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1919:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6441
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6454
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1921:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6463
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1922:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6478
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1923:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6488
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6496
		{
			yyVAL.onconflict = nil
		}
	case 1925:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6507
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6516
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6523
		{
			yyVAL.node = nil
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6534
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6538
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6545
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6549
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6556
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6561
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6566
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1935:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6574
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1936:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6585
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6600
		{
			yyVAL.list = nil
		}
	case 1939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6604
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6605
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6610
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6621
		{
			yyVAL.list = nil
		}
	case 1947:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6642
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1948:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6658
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1949:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6675
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1950:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6691
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1951:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6708
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1952:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6725
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6743
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6744
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6745
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6746
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6747
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6748
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6749
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6750
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6754
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.list = nil
		}
	case 1963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6765
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6772
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6773
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6774
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6790
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1971:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6794
		{
			yyVAL.ival = 0
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6801
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6802
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6803
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6804
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6805
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6807
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6808
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6809
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6814
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.str = "default"
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6819
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6820
		{
			yyVAL.str = ""
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6825
		{
			yyVAL.str = "default"
		}
	case 1988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6829
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6830
		{
			yyVAL.str = ""
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6835
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1991:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6836
		{
			yyVAL.list = nil
		}
	case 1992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6841
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6847
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6854
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6855
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6860
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6866
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1998:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6877
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1999:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6906
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 2000:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6915
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6925
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6934
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6941
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6945
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 2005:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6953
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6954
		{
			yyVAL.list = nil
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6959
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6963
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6971
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6977
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6982
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2012:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6987
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 2013:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6999
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2014:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7004
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7011
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7016
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7017
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7019
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7032
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7037
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7042
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7047
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7055
		{
			yyVAL.bval = true
		}
	case 2024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7056
		{
			yyVAL.bval = false
		}
	case 2025:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7057
		{
			yyVAL.bval = true
		}
	case 2026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7061
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7062
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7067
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7069
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7074
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7078
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7082
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7092
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7098
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7099
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7108
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7112
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7116
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7120
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7124
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7128
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7132
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7136
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7140
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7144
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7148
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7152
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7156
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7160
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7164
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7170
		{
		}
	case 2053:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7171
		{
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7175
		{
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7176
		{
		}
	case 2056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7177
		{
		}
	case 2057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7182
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7189
		{
			yyVAL.bval = false
		}
	case 2059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7193
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7194
		{
			yyVAL.list = nil
		}
	case 2061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7199
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7203
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2063:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7207
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2064:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7216
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2065:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7222
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7228
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2067:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7234
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2068:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7251
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2069:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7258
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7268
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7273
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2072:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7278
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2073:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7286
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7297
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2075:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7308
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7318
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2077:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7329
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2078:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7350
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7364
		{
			yyVAL.bval = true
		}
	case 2080:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7365
		{
			yyVAL.bval = false
		}
	case 2081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7371
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7377
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7385
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2084:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7390
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2085:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7398
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7402
		{
			yyVAL.list = nil
		}
	case 2087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7409
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7413
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7417
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7421
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7428
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7438
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7448
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7455
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7462
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7477
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7490
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7497
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7504
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7511
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7518
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7525
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7534
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7535
		{
			yyVAL.list = nil
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7539
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7540
		{
			yyVAL.partspec = nil
		}
	case 2107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7545
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7553
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7558
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7566
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7573
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7580
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7589
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7590
		{
			yyVAL.str = ""
		}
	case 2115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7594
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7595
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7596
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7597
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7601
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7602
		{
			yyVAL.str = ""
		}
	case 2121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7606
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7607
		{
			yyVAL.str = ""
		}
	case 2123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7611
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2124:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7624
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2125:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7639
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7655
		{
			yyVAL.bval = true
		}
	case 2127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7656
		{
			yyVAL.bval = false
		}
	case 2128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7660
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7661
		{
			yyVAL.str = "btree"
		}
	case 2130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7665
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7666
		{
			yyVAL.list = nil
		}
	case 2132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7671
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7676
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7684
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7685
		{
			yyVAL.list = nil
		}
	case 2136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7697
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7703
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7710
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7716
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7723
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7732
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7738
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7745
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7751
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7758
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2146:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7764
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7771
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2148:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7777
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7784
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7793
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2151:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7803
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2152:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7810
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2153:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7818
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2154:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7825
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2155:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7833
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2156:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7840
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7851
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7856
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7864
		{
			yyVAL.bval = true
		}
	case 2160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7865
		{
			yyVAL.bval = false
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7870
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7875
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7883
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7914
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7937
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7944
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7951
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7962
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7969
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7976
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7983
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7990
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7995
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8000
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8010
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2177:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8015
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8022
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8027
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8034
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8039
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8044
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8049
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8054
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8064
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8069
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2187:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8076
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8083
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8091
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2190:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8102
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8112
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8117
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8122
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8133
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8138
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8146
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8154
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8159
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8164
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8169
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8174
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8179
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8184
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8189
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8194
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8199
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8204
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8209
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8214
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8219
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8224
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8229
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8234
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8239
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8244
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8249
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8255
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8260
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8272
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8277
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8282
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8287
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8292
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8297
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8302
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8307
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8311
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8319
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8327
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8334
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8345
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8354
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8355
		{
			yyVAL.node = nil
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8359
		{
		}
	case 2236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8360
		{
		}
	case 2237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8371
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8384
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8397
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8410
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8423
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8438
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8453
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8466
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8479
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8492
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8505
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8518
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8532
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_CAST
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, yyDollar[7].typnam))
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8546
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8564
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8583
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8601
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8620
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TRANSFORM
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, ast.NewString(yyDollar[7].str)))
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8634
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[3].str)))
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8647
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[5].str)))
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8663
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8669
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8675
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8684
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8688
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8691
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8695
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8697
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8701
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8705
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8712
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8716
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8722
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8723
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8727
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8736
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8740
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8748
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8753
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8760
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8764
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8772
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8779
		{
			yyVAL.str = "analyze"
		}
	case 2281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8780
		{
			yyVAL.str = "format"
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8784
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8786
		{
			yyVAL.node = nil
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8790
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8791
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8792
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8793
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8794
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8795
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8796
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8805
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8826
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8833
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8842
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8848
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8849
		{
			yyVAL.list = nil
		}
	case 2298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8854
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8858
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8866
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8872
		{
			yyVAL.str = "analyze"
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8873
		{
			yyVAL.str = "analyse"
		}
	case 2303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8882
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8886
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8890
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8894
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8898
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8909
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8913
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8924
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8928
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8932
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8941
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8950
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8961
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8962
		{
			yyVAL.str = ""
		}
	case 2317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8971
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8984
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8997
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9012
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9013
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9017
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9018
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9022
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9023
		{
			yyVAL.list = nil
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9032
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9043
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9047
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9051
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9055
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9059
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9066
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9067
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9068
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9069
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9070
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9071
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9072
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9073
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9074
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9075
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9076
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9077
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9078
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9091
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9092
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9097
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9101
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9109
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9121
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9126
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9128
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9130
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9134
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9147
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9149
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9153
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9164
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9175
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9186
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9197
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9208
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2363:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9220
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9231
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9242
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2366:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9253
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9264
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2368:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9281
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2369:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9298
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2370:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9310
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9322
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9333
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9344
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9355
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2375:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9366
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2376:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9377
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2377:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9388
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9399
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2379:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9410
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9421
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9432
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9443
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9454
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2384:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9465
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2385:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9476
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2386:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9487
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9498
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9509
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9520
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9533
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9546
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9559
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2393:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9572
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2394:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9585
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2395:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9598
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2396:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9610
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2397:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9622
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2398:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9635
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2399:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9648
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2400:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9660
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9672
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9683
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9694
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9705
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9716
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2406:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9727
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9738
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9749
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9760
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9771
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2411:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9782
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9808
		{
			yyVAL.ival = 0
		}
	case 2413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9810
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9824
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9825
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9826
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9827
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9828
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9829
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9833
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9838
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9843
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9855
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9859
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9863
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2427:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9877
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2428:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9891
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2429:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9907
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2430:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9922
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9937
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9938
		{
			yyVAL.list = nil
		}
	case 2433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9943
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9947
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9955
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9959
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9964
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9972
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9981
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9990
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9999
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10008
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10019
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10020
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10021
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10022
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10023
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10027
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10031
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10033
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10043
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10055
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10056
		{
			yyVAL.list = nil
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10061
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10067
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10075
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10079
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10083
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10087
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10091
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10098
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10104
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10114
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10120
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10128
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10132
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10144
		{
			yyVAL.node = nil
		}
	case 2468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10151
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10160
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10170
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10176
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10177
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10182
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10186
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2475:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10202
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2476:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10234
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10265
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10266
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10267
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10272
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10274
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10314
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10321
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10328
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10335
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10342
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10351
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10352
		{
			yyVAL.list = nil
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10356
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10361
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10369
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10380
		{
			yyVAL.bval = true
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10381
		{
			yyVAL.bval = false
		}
	case 2494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10385
		{
			yyVAL.bval = true
		}
	case 2495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10386
		{
			yyVAL.bval = false
		}
	case 2496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10390
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10395
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10399
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10411
		{
			yyVAL.bval = true
		}
	case 2502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10412
		{
			yyVAL.bval = false
		}
	case 2503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10416
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10417
		{
			yyVAL.node = nil
		}
	case 2507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10426
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10431
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10435
		{
			yyVAL.list = nil
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10440
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10443
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10444
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10445
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10449
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10450
		{
			yyVAL.rangevar = nil
		}
	case 2516:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10463
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2517:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10479
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2518:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10495
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2519:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10511
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10528
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10529
		{
			yyVAL.list = nil
		}
	case 2522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10533
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10534
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10535
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10536
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10547
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10554
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2528:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10561
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2529:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10568
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10584
		{
			n := ast.NewCreatedbStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10597
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, nil)
			yyVAL.stmt = n
		}
	case 2532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10602
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, nil)
			yyVAL.stmt = n
		}
	case 2533:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10607
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2534:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10612
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10619
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10620
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[3].defelt)
		}
	case 2537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10624
		{
			yyVAL.defelt = ast.NewDefElem("force", nil)
		}
	case 2538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10634
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[3].str, false)
			yyVAL.stmt = n
		}
	case 2539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10639
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[5].str, true)
			yyVAL.stmt = n
		}
	case 2540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10653
		{
			n := ast.NewDropOwnedStmt(yyDollar[4].list, yyDollar[5].dropBehav)
			yyVAL.stmt = n
		}
	case 2541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10661
		{
			n := ast.NewReassignOwnedStmt(yyDollar[4].list, yyDollar[6].rolespec)
			yyVAL.stmt = n
		}
	case 2542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10675
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10693
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10699
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10704
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10709
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2547:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10715
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2548:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10723
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2549:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10731
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10746
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10762
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10768
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10773
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10778
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10784
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10789
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10794
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10799
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10804
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2560:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10809
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10814
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10819
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2563:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10824
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10835
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2565:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10840
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10854
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2567:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10859
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10866
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.list = nil
		}
	case 2570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10870
		{
		}
	case 2571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10871
		{
		}
	case 2572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10882
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10886
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10899
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10904
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10912
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10921
		{
			yyVAL.list = nil
		}
	case 2578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10928
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10932
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10936
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10941
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10954
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10962
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10971
		{
			yyVAL.list = nil
		}
	case 2585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10978
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10991
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10995
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10999
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2589:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11003
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11010
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11014
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2592:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11018
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2593:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11022
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2594:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11031
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11040
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11044
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2597:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11048
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11053
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2599:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11065
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2600:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2601:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11075
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11081
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11082
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11083
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11084
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11088
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11089
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11093
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11094
		{
			yyVAL.list = nil
		}
	case 2610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11098
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11099
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2612:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11116
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2613:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11121
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11127
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11131
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11135
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11141
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11142
		{
			yyVAL.str = ""
		}
	case 2619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11146
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11147
		{
			yyVAL.str = ""
		}
	case 2621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11151
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11152
		{
			yyVAL.str = ""
		}
	case 2623:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11165
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2624:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:11171
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2625:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:11177
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2626:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:11183
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2627:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11197
		{
			stmt := ast.NewImportForeignSchemaStmt(
				ast.NewString(yyDollar[8].str),    // server name
				ast.NewString(yyDollar[4].str),    // remote schema
				ast.NewString(yyDollar[10].str),   // local schema
				yyDollar[5].importqual.typ,        // list type
				yyDollar[5].importqual.tableNames, // table list
				yyDollar[11].list,                 // options
			)
			yyVAL.stmt = stmt
		}
	case 2628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11212
		{
			qual := &ImportQual{
				typ:        yyDollar[1].importqualtype,
				tableNames: yyDollar[3].list,
			}
			yyVAL.importqual = qual
		}
	case 2629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11220
		{
			qual := &ImportQual{
				typ:        ast.FDW_IMPORT_SCHEMA_ALL,
				tableNames: nil,
			}
			yyVAL.importqual = qual
		}
	case 2630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11230
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_LIMIT_TO
		}
	case 2631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_EXCEPT
		}
	case 2632:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11241
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2633:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11245
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2634:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11251
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2635:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11257
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2636:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11261
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11267
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11268
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11273
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11279
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11285
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11291
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11305
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11309
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11317
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11324
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11335
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11343
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2650:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11350
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2651:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11358
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2652:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11367
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11376
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11384
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11400
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11402
		{
			yyVAL.list = nil
		}
	case 2657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11407
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11409
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11414
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11423
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11428
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11439
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11459
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2664:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11467
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11478
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11484
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11485
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11490
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11502
		{
			yyVAL.bval = true
		}
	case 2670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11503
		{
			yyVAL.bval = false
		}
	case 2671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11504
		{
			yyVAL.bval = true
		}
	case 2672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11509
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11518
		{
			yyVAL.list = nil
		}
	case 2678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11529
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11531
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11535
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11540
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11545
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11550
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11558
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11563
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11568
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11572
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11583
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11591
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11595
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11599
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11603
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11614
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11621
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11627
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11634
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11635
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11639
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11640
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11642
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2702:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11649
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11656
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11657
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11658
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11662
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11663
		{
			yyVAL.str = "default"
		}
	case 2708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11664
		{
			yyVAL.str = ""
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11668
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11669
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11673
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11674
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11675
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11676
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11680
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11681
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11686
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11692
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11697
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11705
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11709
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11713
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11717
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11721
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11727
		{
			yyVAL.str = "read uncommitted"
		}
	case 2726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11728
		{
			yyVAL.str = "read committed"
		}
	case 2727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11729
		{
			yyVAL.str = "repeatable read"
		}
	case 2728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11730
		{
			yyVAL.str = "serializable"
		}
	case 2729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11734
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11735
		{
			yyVAL.list = nil
		}
	case 2731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11739
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11740
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11741
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11744
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11745
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11746
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11750
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11751
		{
			yyVAL.list = nil
		}
	case 2739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11755
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11756
		{
			yyVAL.node = nil
		}
	case 2741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11760
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11765
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11770
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11778
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11782
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11788
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11794
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11800
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11801
		{
			yyVAL.str = ""
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11805
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11806
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11807
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11808
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11812
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11817
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11822
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11829
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11830
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2759:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11841
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2760:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11845
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11851
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11857
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11858
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11859
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11860
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11865
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11870
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11878
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11885
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11890
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2771:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11904
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11910
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11911
		{
			yyVAL.rolespec = nil
		}
	case 2774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11916
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2775:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11920
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2776:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11935
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2777:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11943
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11950
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11962
		{
			yyVAL.bval = true
		}
	case 2780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11966
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11967
		{
			yyVAL.str = "all"
		}
	case 2782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11971
		{
			yyVAL.str = "all"
		}
	case 2783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11972
		{
			yyVAL.str = "select"
		}
	case 2784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11973
		{
			yyVAL.str = "insert"
		}
	case 2785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11974
		{
			yyVAL.str = "update"
		}
	case 2786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11975
		{
			yyVAL.str = "delete"
		}
	case 2787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11979
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11980
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11988
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11989
		{
			yyVAL.list = nil
		}
	case 2791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11993
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11994
		{
			yyVAL.node = nil
		}
	case 2793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11998
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11999
		{
			yyVAL.node = nil
		}
	case 2795:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12010
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12016
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12017
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2798:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12028
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2799:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12032
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2800:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12039
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2801:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12049
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12050
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12054
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12055
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12056
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12067
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2808:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12071
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2809:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12075
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2810:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12082
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2811:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12086
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12090
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2813:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12094
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12100
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12101
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2816:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12106
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12111
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2818:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12115
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12119
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2820:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12131
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12137
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12142
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12148
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12149
		{
			yyVAL.node = nil
		}
	case 2825:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12160
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12167
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2827:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12171
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2828:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12175
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2829:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12179
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2830:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12183
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2831:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12187
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2832:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12191
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2833:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12197
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2834:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12203
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2835:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12216
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2836:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12220
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2837:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12224
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12230
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12231
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12232
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2841:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12244
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12250
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12251
		{
			yyVAL.list = nil
		}
	case 2844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12255
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12256
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12261
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12267
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12271
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2849:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12275
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12279
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12285
		{
			yyVAL.bval = true
		}
	case 2852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12286
		{
			yyVAL.bval = false
		}
	case 2853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12290
		{
			yyVAL.list = nil
		}
	case 2854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12291
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12292
		{
			yyVAL.list = nil
		}
	case 2856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12296
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12297
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2858:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12308
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2859:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12321
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2860:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12325
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12332
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2863:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12337
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12343
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2865:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12358
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2866:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12371
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2867:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12378
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2868:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12384
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12390
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2870:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12396
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2871:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12411
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2872:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12417
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12423
		{
			yyVAL.bval = true
		}
	case 2874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12424
		{
			yyVAL.bval = false
		}
	case 2875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12429
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12430
		{
			yyVAL.list = nil
		}
	case 2877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12434
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12435
		{
			yyVAL.list = nil
		}
	case 2879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12439
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12440
		{
			yyVAL.list = nil
		}
	case 2881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12443
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12444
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12445
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12450
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12457
		{
			yyVAL.groupClause = nil
		}
	case 2886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12463
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12464
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12468
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12469
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12470
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12471
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12472
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12477
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2894:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12484
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2895:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12491
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2896:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12498
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12507
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12508
		{
			yyVAL.node = nil
		}
	case 2899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12515
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12519
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12520
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2902:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12525
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12532
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12543
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12545
		{
			yyVAL.list = nil
		}
	case 2906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12550
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12555
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12563
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12572
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12574
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12581
		{
			yyVAL.windef = nil
		}
	case 2912:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12586
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12600
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12601
		{
			yyVAL.str = ""
		}
	case 2915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12605
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12606
		{
			yyVAL.list = nil
		}
	case 2917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12611
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12618
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12625
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12632
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12643
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2922:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12657
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12692
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12700
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12708
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12716
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12724
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12734
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12735
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12736
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12737
		{
			yyVAL.ival = 0
		}
	case 2932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12738
		{
			yyVAL.ival = 0
		}
	case 2933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12747
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12752
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12757
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12761
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12771
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12772
		{
			yyVAL.selectLimit = nil
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12777
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2940:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12785
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2941:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12792
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2942:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12800
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12808
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2944:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12816
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12827
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12830
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12834
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12836
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12843
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12856
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12858
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12862
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12869
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12870
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12875
		{
			yyVAL.ival = 0
		}
	case 2956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12876
		{
			yyVAL.ival = 0
		}
	case 2957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12880
		{
			yyVAL.ival = 0
		}
	case 2958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12881
		{
			yyVAL.ival = 0
		}
	case 2959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12894
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12900
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12906
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12912
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12918
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12923
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12928
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2966:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12933
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2967:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12938
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12943
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12949
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12955
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12964
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12970
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12977
		{
		}
	case 2974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12978
		{
		}
	case 2975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12979
		{
		}
	case 2976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12983
		{
			yyVAL.bval = true
		}
	case 2977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12984
		{
			yyVAL.bval = false
		}
	case 2978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12985
		{
			yyVAL.bval = false
		}
	case 2979:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12998
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2980:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13005
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2981:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13012
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2982:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13019
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2983:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13025
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2984:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13034
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2985:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13038
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2986:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13042
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2987:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13046
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13052
		{
			yyVAL.str = ""
		}
	case 2989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13053
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2990:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13058
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13068
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2992:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13072
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13076
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2994:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13080
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13084
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2996:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13088
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13096
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2998:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13107
		{
			yyVAL.list = nil
		}
	case 2999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13112
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13123
		{
			yyVAL.list = nil
		}
	case 3001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13127
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 3002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13129
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 3003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13133
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 3004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13137
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13141
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13145
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13152
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 3008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13156
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 3009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13160
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 3010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13164
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 3011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13169
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 3012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13173
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 3013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13208
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 3014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13212
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 3015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13216
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13222
		{
			yyVAL.ival = 1
		}
	case 3017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13223
		{
			yyVAL.ival = -1
		}
	case 3018:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13235
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 3019:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13247
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 3020:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:13256
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 3021:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13268
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 3022:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13274
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 3023:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13283
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 3024:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13290
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 3025:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13309
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 3026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13315
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13316
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 3028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13321
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 3029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13325
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13329
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3031:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13341
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 3032:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13349
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 3033:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13357
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 3034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13367
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 3035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13368
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13369
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13370
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13371
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13372
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13377
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13379
		{
			yyVAL.list = nil
		}
	case 3042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13381
		{
			yyVAL.list = nil
		}
	case 3043:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13383
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3044:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13388
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13394
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13395
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13399
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13403
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13407
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13411
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13415
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13425
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13433
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13441
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3055:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13449
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13457
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3057:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13465
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13473
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13481
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13489
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13497
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13505
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13513
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13521
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13529
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13537
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13545
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3068:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13553
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3069:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13561
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3070:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13569
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13577
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3072:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13585
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13596
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13597
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13601
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13602
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13607
		{
			yyVAL.bval = true
		}
	case 3078:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13608
		{
			yyVAL.bval = false
		}
	case 3079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13612
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13613
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13618
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13624
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13625
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13626
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13629
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13630
		{
			yyVAL.rolespec = nil
		}
	case 3087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13635
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13639
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13647
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13651
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13656
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13657
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3093:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13661
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3094:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13669
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13673
		{
			yyVAL.node = nil
		}
	case 3096:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13687
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3097:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13692
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3098:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13697
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13705
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13706
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13712
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13716
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13720
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13724
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13728
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13732
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13736
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13740
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13744
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13748
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13752
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13756
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13760
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13764
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13768
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13772
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13777
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13783
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13784
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13789
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13793
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13797
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13803
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13804
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13805
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13806
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13807
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13818
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13831
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13838
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13845
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13859
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13861
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13873
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13881
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13895
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13901
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13908
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13916
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3143:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13924
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13945
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13946
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13947
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13948
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3148:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13958
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13965
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13969
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13973
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13977
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13981
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13984
		{
			yyVAL.ival = 0
		}
	case 3155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13987
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13988
		{
			yyVAL.ival = 0
		}
	case 3157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13989
		{
			yyVAL.ival = 0
		}
	case 3158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13993
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13999
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14007
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14011
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14015
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14019
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14023
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14027
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14031
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14035
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14039
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14043
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14047
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14051
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14055
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14059
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14063
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14067
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14072
		{
			yyVAL.ival = 0
		}
	case 3177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14073
		{
			yyVAL.ival = 0
		}
	case 3178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14077
		{
			yyVAL.ival = 0
		}
	case 3179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14078
		{
			yyVAL.ival = 0
		}
	case 3180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14083
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14088
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14100
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14107
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14110
		{
			yyVAL.list = nil
		}
	case 3185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14114
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14115
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14116
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14117
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14118
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14122
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14126
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3192:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:14136
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14149
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14152
		{
			yyVAL.list = nil
		}
	case 3195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14158
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14166
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14170
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14174
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14178
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14189
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14200
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14204
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14215
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14225
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14226
		{
			yyVAL.str = ""
		}
	case 3206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14235
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3207:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14246
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14258
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14259
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14263
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14264
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14265
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14266
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14267
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14268
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14269
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14270
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14279
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14293
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14297
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14301
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14305
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14309
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14313
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14317
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14321
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3227:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14325
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3228:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14332
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3229:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14343
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14350
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14354
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3232:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14358
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3233:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14366
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3234:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14376
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14386
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3236:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14390
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14404
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14405
		{
			yyVAL.str = ""
		}
	case 3239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14414
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3240:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14418
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14422
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14426
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14430
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14434
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14438
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3246:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14442
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14446
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14450
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14460
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14461
		{
			yyVAL.str = ""
		}
	case 3251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14465
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14466
		{
			yyVAL.str = ""
		}
	case 3253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14475
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14485
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14486
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14491
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14495
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14506
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14519
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14526
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14533
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14540
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14547
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14554
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14561
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14568
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3267:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14580
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14592
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14599
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14606
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14613
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14620
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14627
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14634
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3275:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14641
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14648
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14655
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14662
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14669
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14676
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14683
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14690
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14697
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3284:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14704
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14711
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14727
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14736
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14745
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14754
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14763
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14772
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14781
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14790
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14799
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14808
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3296:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14821
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14834
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14843
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14852
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14861
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14870
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14879
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3303:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14888
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3304:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14897
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14906
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14915
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14924
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14933
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14942
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14960
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3311:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14973
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3312:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14979
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3313:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14985
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3314:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14991
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14998
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3316:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15004
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15011
		{
			yyVAL.bval = true
		}
	case 3318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15012
		{
			yyVAL.bval = false
		}
	case 3319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15023
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15036
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15040
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15044
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15050
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15056
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15057
		{
			yyVAL.list = nil
		}
	case 3326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15061
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15062
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15067
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15071
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15075
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15081
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15082
		{
			yyVAL.str = "connection_limit"
		}
	case 3333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15083
		{
			yyVAL.str = "encoding"
		}
	case 3334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15084
		{
			yyVAL.str = "location"
		}
	case 3335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15085
		{
			yyVAL.str = "owner"
		}
	case 3336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15086
		{
			yyVAL.str = "tablespace"
		}
	case 3337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15087
		{
			yyVAL.str = "template"
		}
	case 3338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15090
		{
		}
	case 3339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15091
		{
		}
	case 3340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15096
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3341:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15109
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3342:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15118
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3343:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15127
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3344:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:15139
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3345:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15151
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3346:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15158
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15179
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15189
		{
			yyVAL.bval = false
		}
	case 3351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15190
		{
			yyVAL.bval = true
		}
	case 3352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15191
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
