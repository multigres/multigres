// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// ImportQual - Private struct for the result of import_qualification production
// Matches PostgreSQL's ImportQual from gram.y
type ImportQual struct {
	typ        ast.ImportForeignSchemaType
	tableNames *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:58
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into                *ast.IntoClause
	onconflict          *ast.OnConflictClause
	windef              *ast.WindowDef
	createStmt          *ast.CreateStmt
	createAsStmt        *ast.CreateTableAsStmt
	createAssertionStmt *ast.CreateAssertionStmt
	ruleStmt            *ast.RuleStmt
	indexStmt           *ast.IndexStmt
	alterStmt           *ast.AlterTableStmt
	dropStmt            *ast.DropStmt
	columnDef           *ast.ColumnDef
	constraint          *ast.Constraint
	indexElem           *ast.IndexElem
	alterCmd            *ast.AlterTableCmd
	with                *ast.WithClause
	rangevar            *ast.RangeVar
	objType             ast.ObjectType
	dropBehav           ast.DropBehavior
	setquant            ast.SetQuantifier
	typnam              *ast.TypeName
	partspec            *ast.PartitionSpec
	partboundspec       *ast.PartitionBoundSpec
	oncommit            ast.OnCommitAction
	defelt              *ast.DefElem
	target              *ast.ResTarget            // For select targets, insert columns
	alias               *ast.Alias                // For table and column aliases
	jtype               ast.JoinType              // For join type specifications
	jexpr               *ast.JoinExpr             // For joined table expressions
	keyaction           *ast.KeyAction            // For foreign key actions
	keyactions          *ast.KeyActions           // For foreign key action sets
	funparam            *ast.FunctionParameter    // For function parameters
	funparammode        ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt            *ast.VariableSetStmt      // For SET/RESET statements
	rolespec            *ast.RoleSpec
	objwithargs         *ast.ObjectWithArgs
	statelem            *ast.StatsElem
	accesspriv          *ast.AccessPriv             // For privilege specifications
	privtarget          *PrivTarget                 // For privilege target specifications
	vacrel              *ast.VacuumRelation         // For vacuum relation specifications
	importqual          *ImportQual                 // For import qualification specifications
	importqualtype      ast.ImportForeignSchemaType // For import qualification type

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ASSERTION = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ASSERTION",
	"ANALYSE",
	"ASENSITIVE",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:15534

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 130,
	540, 130,
	-2, 1637,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	1, 1551,
	26, 1551,
	36, 1551,
	74, 1551,
	100, 1551,
	532, 1551,
	540, 1551,
	-2, 1555,
	-1, 136,
	67, 1967,
	84, 1967,
	85, 2714,
	236, 2899,
	307, 2134,
	419, 1967,
	480, 1967,
	-2, 143,
	-1, 177,
	68, 1554,
	69, 1554,
	130, 1554,
	269, 1554,
	280, 1554,
	316, 1554,
	470, 1554,
	509, 1554,
	-2, 1556,
	-1, 189,
	1, 130,
	540, 130,
	-2, 1637,
	-1, 233,
	85, 2713,
	-2, 1966,
	-1, 325,
	61, 351,
	64, 351,
	527, 351,
	533, 351,
	-2, 2755,
	-1, 791,
	1, 354,
	540, 354,
	-2, 3228,
	-1, 792,
	1, 395,
	540, 395,
	-2, 3228,
	-1, 793,
	1, 286,
	540, 286,
	-2, 3228,
	-1, 794,
	1, 328,
	540, 328,
	-2, 3228,
	-1, 799,
	1, 290,
	540, 290,
	-2, 3228,
	-1, 800,
	1, 207,
	540, 207,
	-2, 3228,
	-1, 834,
	7, 1467,
	16, 1467,
	17, 1467,
	531, 1467,
	-2, 149,
	-1, 835,
	7, 1468,
	16, 1468,
	17, 1468,
	531, 1468,
	-2, 150,
	-1, 860,
	68, 1540,
	69, 1540,
	130, 1540,
	280, 1540,
	-2, 1557,
	-1, 866,
	68, 1541,
	69, 1541,
	130, 1541,
	280, 1541,
	-2, 1560,
	-1, 924,
	84, 1967,
	480, 1967,
	-2, 142,
	-1, 926,
	209, 131,
	-2, 2720,
	-1, 1013,
	531, 1469,
	-2, 3178,
	-1, 1034,
	93, 3035,
	398, 2170,
	401, 3035,
	-2, 2063,
	-1, 1038,
	93, 3035,
	398, 2170,
	401, 3035,
	-2, 2063,
	-1, 1120,
	531, 2063,
	-2, 2559,
	-1, 1221,
	74, 159,
	-2, 165,
	-1, 1305,
	68, 1540,
	69, 1540,
	130, 1540,
	280, 1540,
	-2, 1561,
	-1, 1359,
	7, 1258,
	531, 1258,
	-2, 532,
	-1, 1374,
	7, 583,
	16, 583,
	17, 583,
	531, 583,
	-2, 1306,
	-1, 1396,
	7, 1512,
	-2, 533,
	-1, 1404,
	7, 1482,
	-2, 516,
	-1, 1405,
	7, 1517,
	531, 1517,
	-2, 517,
	-1, 1406,
	7, 1489,
	-2, 518,
	-1, 1407,
	7, 1517,
	531, 1517,
	-2, 519,
	-1, 1408,
	7, 1517,
	531, 1517,
	-2, 520,
	-1, 1409,
	7, 1476,
	-2, 522,
	-1, 1410,
	7, 1476,
	-2, 523,
	-1, 1411,
	7, 1519,
	-2, 526,
	-1, 1412,
	7, 1479,
	-2, 530,
	-1, 1413,
	7, 1480,
	-2, 531,
	-1, 1415,
	7, 1517,
	531, 1517,
	-2, 547,
	-1, 1416,
	7, 1476,
	-2, 551,
	-1, 1417,
	7, 1483,
	-2, 556,
	-1, 1418,
	7, 1481,
	-2, 559,
	-1, 1419,
	7, 1515,
	-2, 561,
	-1, 1420,
	7, 1515,
	-2, 562,
	-1, 1421,
	7, 1500,
	531, 1500,
	-2, 566,
	-1, 1578,
	6, 2063,
	12, 2063,
	534, 2063,
	535, 2063,
	-2, 2056,
	-1, 1654,
	531, 1393,
	-2, 3180,
	-1, 1976,
	16, 1471,
	17, 1471,
	-2, 1392,
	-1, 2088,
	127, 2997,
	411, 2997,
	-2, 1131,
	-1, 2122,
	21, 1430,
	432, 1430,
	510, 1430,
	-2, 893,
	-1, 2124,
	21, 1432,
	432, 1432,
	510, 1432,
	-2, 840,
	-1, 2129,
	1, 709,
	26, 709,
	36, 709,
	64, 709,
	65, 709,
	68, 709,
	69, 709,
	71, 709,
	72, 709,
	73, 709,
	74, 709,
	100, 709,
	130, 709,
	269, 709,
	280, 709,
	316, 709,
	470, 709,
	484, 709,
	509, 709,
	515, 709,
	532, 709,
	540, 709,
	541, 709,
	-2, 1546,
	-1, 2134,
	21, 1524,
	432, 1524,
	510, 1524,
	-2, 1520,
	-1, 2591,
	68, 1555,
	69, 1555,
	130, 1555,
	269, 1555,
	280, 1555,
	316, 1555,
	470, 1555,
	509, 1555,
	-2, 1227,
	-1, 2600,
	7, 1393,
	531, 1393,
	-2, 1276,
	-1, 2730,
	117, 143,
	307, 2134,
	460, 143,
	-2, 1967,
	-1, 2783,
	536, 165,
	-2, 2549,
	-1, 2819,
	531, 2136,
	-2, 275,
	-1, 2896,
	40, 1476,
	134, 1476,
	509, 1476,
	527, 1476,
	529, 1476,
	532, 1476,
	541, 1476,
	-2, 1471,
	-1, 3110,
	531, 2063,
	-2, 2560,
	-1, 3251,
	36, 3002,
	66, 3002,
	-2, 557,
	-1, 3252,
	36, 3003,
	66, 3003,
	-2, 430,
	-1, 3258,
	127, 3000,
	411, 3000,
	-2, 1240,
	-1, 3259,
	127, 3001,
	411, 3001,
	-2, 1241,
	-1, 3275,
	1, 475,
	26, 475,
	36, 475,
	64, 475,
	65, 475,
	68, 475,
	69, 475,
	71, 475,
	72, 475,
	74, 475,
	100, 475,
	130, 475,
	269, 475,
	280, 475,
	316, 475,
	470, 475,
	484, 475,
	509, 475,
	515, 475,
	529, 475,
	532, 475,
	533, 475,
	540, 475,
	-2, 174,
	-1, 3276,
	1, 473,
	26, 473,
	36, 473,
	64, 473,
	65, 473,
	68, 473,
	69, 473,
	71, 473,
	72, 473,
	74, 473,
	100, 473,
	130, 473,
	269, 473,
	280, 473,
	316, 473,
	470, 473,
	484, 473,
	509, 473,
	515, 473,
	529, 473,
	532, 473,
	533, 473,
	540, 473,
	-2, 174,
	-1, 3279,
	1, 492,
	26, 492,
	36, 492,
	64, 492,
	65, 492,
	68, 492,
	69, 492,
	71, 492,
	72, 492,
	74, 492,
	100, 492,
	130, 492,
	269, 492,
	280, 492,
	316, 492,
	470, 492,
	484, 492,
	509, 492,
	515, 492,
	529, 492,
	532, 492,
	533, 492,
	540, 492,
	-2, 174,
	-1, 3293,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1144,
	-1, 3294,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1145,
	-1, 3295,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1146,
	-1, 3296,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1147,
	-1, 3297,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1148,
	-1, 3298,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1149,
	-1, 3302,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 3308,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1160,
	-1, 3353,
	363, 1420,
	-2, 1423,
	-1, 3432,
	68, 1555,
	69, 1555,
	130, 1555,
	269, 1555,
	280, 1555,
	316, 1555,
	470, 1555,
	509, 1555,
	-2, 1227,
	-1, 3555,
	209, 131,
	-2, 2720,
	-1, 3629,
	536, 166,
	-2, 2549,
	-1, 3742,
	507, 2636,
	-2, 2629,
	-1, 4067,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1158,
	-1, 4068,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1162,
	-1, 4074,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1164,
	-1, 4109,
	363, 1419,
	-2, 1422,
	-1, 4247,
	75, 1659,
	76, 1659,
	77, 1659,
	78, 1659,
	79, 1659,
	81, 1659,
	82, 1659,
	-2, 1555,
	-1, 4261,
	531, 1393,
	-2, 166,
	-1, 4267,
	150, 1899,
	-2, 1834,
	-1, 4461,
	6, 2063,
	12, 2063,
	534, 2063,
	535, 2063,
	-2, 2037,
	-1, 4694,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1157,
	-1, 4697,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1166,
	-1, 4700,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1161,
	-1, 4705,
	52, 0,
	53, 0,
	54, 0,
	-2, 1179,
	-1, 4712,
	21, 1429,
	432, 1429,
	510, 1429,
	-2, 1521,
	-1, 4716,
	363, 1421,
	-2, 1424,
	-1, 4747,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1209,
	-1, 4748,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1210,
	-1, 4749,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1211,
	-1, 4750,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1212,
	-1, 4751,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1213,
	-1, 4752,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1214,
	-1, 5187,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1159,
	-1, 5188,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1163,
	-1, 5192,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1165,
	-1, 5193,
	52, 0,
	53, 0,
	54, 0,
	-2, 1180,
	-1, 5196,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1181,
	-1, 5197,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1183,
	-1, 5320,
	540, 130,
	-2, 1637,
	-1, 5489,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1167,
	-1, 5490,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1182,
	-1, 5491,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1184,
	-1, 5499,
	52, 0,
	-2, 1217,
	-1, 5759,
	52, 0,
	-2, 1218,
	-1, 5946,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 515,
	-1, 6172,
	532, 2709,
	540, 2709,
	-2, 1637,
	-1, 6261,
	540, 1551,
	-2, 1555,
	-1, 6295,
	7, 1784,
	-2, 352,
	-1, 6310,
	532, 2709,
	540, 2709,
	-2, 1637,
	-1, 6323,
	7, 1512,
	-2, 533,
}

const yyPrivate = 57344

const yyLast = 119113

var yyAct = [...]int16{
	740, 6292, 5774, 5764, 6345, 5956, 5775, 4054, 5301, 6346,
	6362, 5518, 1324, 1112, 6293, 6140, 4130, 6263, 3390, 4939,
	3509, 134, 3455, 5793, 861, 5845, 2586, 761, 9, 977,
	4369, 113, 5395, 5866, 6023, 5310, 1847, 5945, 6011, 6006,
	3458, 2680, 5254, 4445, 6128, 3481, 132, 3701, 3504, 5742,
	3194, 871, 179, 4855, 5061, 4274, 4052, 4188, 1566, 5895,
	6264, 6183, 3494, 5652, 5253, 4846, 4118, 6096, 3960, 5794,
	5743, 5740, 6079, 5648, 2702, 5724, 5873, 5867, 5580, 4291,
	1021, 3267, 5868, 5557, 4431, 1481, 5516, 1870, 5918, 3564,
	5394, 3949, 4624, 5944, 5245, 1249, 5675, 4372, 758, 6,
	1049, 4271, 3471, 3696, 5121, 760, 8, 5629, 3660, 759,
	7, 5275, 5317, 4256, 3516, 5067, 3415, 3556, 4346, 4842,
	1106, 5684, 1895, 4913, 4992, 5084, 4943, 3473, 5062, 3157,
	4292, 762, 10, 4, 1985, 4850, 1204, 155, 5285, 1652,
	78, 2803, 5281, 328, 328, 764, 22, 763, 21, 732,
	737, 3500, 749, 753, 2729, 20, 1873, 328, 5485, 5563,
	1192, 5586, 1299, 2891, 1741, 4214, 1519, 5261, 814, 815,
	817, 1351, 4776, 2728, 19, 2727, 13, 833, 2726, 12,
	3618, 741, 4906, 3498, 4332, 879, 1975, 4548, 1476, 4239,
	3539, 5180, 3844, 2096, 1059, 3961, 879, 3943, 3976, 3472,
	879, 3944, 5163, 1549, 3695, 179, 926, 4439, 930, 935,
	930, 4460, 930, 4976, 3645, 4349, 3799, 9, 930, 3997,
	3619, 4416, 2758, 930, 2762, 2767, 907, 869, 1126, 3543,
	789, 2752, 3565, 3542, 3526, 3755, 3530, 879, 879, 879,
	879, 179, 2701, 4231, 833, 930, 930, 3496, 930, 1014,
	179, 3459, 935, 4250, 1014, 4683, 1014, 2795, 4816, 2682,
	3544, 3424, 1011, 4129, 4197, 3234, 930, 1024, 930, 1026,
	1310, 1478, 4242, 930, 903, 3365, 3416, 2595, 3318, 1872,
	935, 1973, 3147, 1014, 1014, 1014, 833, 1767, 6, 931,
	755, 1777, 4458, 1852, 2926, 8, 1255, 904, 893, 7,
	3700, 3582, 1624, 2814, 906, 4086, 1504, 3656, 905, 1352,
	878, 2780, 876, 2738, 3518, 1435, 328, 328, 879, 4263,
	3529, 10, 1458, 900, 3480, 3476, 155, 797, 797, 78,
	908, 3479, 1329, 133, 750, 22, 3478, 21, 2136, 2681,
	4122, 3469, 5517, 3362, 20, 3358, 3328, 3319, 830, 3325,
	2097, 3257, 2085, 1527, 2588, 3405, 963, 3247, 2065, 1463,
	1913, 1210, 1846, 19, 990, 13, 1758, 1119, 12, 1893,
	892, 1731, 1020, 1284, 1765, 1556, 3798, 319, 2889, 3594,
	1285, 3581, 1531, 201, 3580, 1978, 203, 1528, 961, 3491,
	925, 3388, 786, 3272, 2610, 808, 1311, 1863, 1320, 2086,
	2068, 1260, 2066, 1212, 754, 1200, 1110, 3166, 1104, 1117,
	272, 2779, 821, 1615, 1755, 2932, 1056, 3005, 1612, 3523,
	1609, 1782, 2766, 2069, 226, 1292, 2708, 1353, 884, 177,
	2067, 2101, 1844, 1293, 769, 178, 1294, 744, 1656, 2759,
	1705, 1597, 899, 321, 860, 320, 304, 827, 882, 1199,
	274, 713, 897, 889, 1568, 6414, 1631, 1745, 1745, 5728,
	891, 5725, 4199, 2134, 6330, 5725, 2104, 6289, 1746, 1746,
	2116, 2117, 2118, 3159, 1150, 4146, 4312, 4123, 1946, 6412,
	3158, 6288, 2659, 6410, 1335, 2660, 133, 4146, 6371, 2665,
	4350, 2657, 6330, 2104, 865, 3241, 2662, 2666, 2661, 4311,
	2663, 6370, 1485, 3120, 2664, 2127, 2128, 2658, 4313, 6117,
	6371, 5916, 868, 870, 2667, 2104, 1745, 3464, 2657, 1129,
	1131, 1570, 133, 4626, 6358, 5706, 4032, 1746, 5704, 2134,
	1232, 133, 2104, 5978, 2658, 4162, 2116, 2117, 2118, 5437,
	2657, 2104, 1521, 1745, 3159, 1944, 4055, 934, 2659, 6355,
	2134, 2660, 6338, 2104, 1746, 2665, 6329, 2657, 2655, 742,
	752, 2655, 2662, 2666, 2661, 6330, 2663, 3159, 936, 5672,
	2664, 2127, 2128, 2658, 6304, 947, 948, 949, 2657, 6266,
	2667, 5189, 1521, 6305, 250, 823, 6265, 717, 1745, 6297,
	934, 1745, 778, 5558, 2658, 1745, 6279, 865, 4219, 1746,
	772, 2667, 1746, 6256, 4407, 5938, 1746, 4200, 3984, 867,
	3161, 1005, 5538, 1745, 6214, 866, 984, 985, 934, 4051,
	1164, 6213, 4124, 2655, 1746, 3273, 1183, 1748, 2134, 3233,
	2655, 2104, 1858, 6200, 1738, 820, 886, 6152, 1015, 6149,
	806, 6125, 3161, 2102, 1569, 1947, 6153, 1743, 6150, 6086,
	4358, 1033, 1036, 4229, 2665, 6085, 2657, 6084, 3132, 4105,
	6064, 2662, 2666, 2661, 3132, 2663, 3132, 6063, 1861, 2655,
	4106, 6060, 2658, 896, 5982, 6058, 2655, 2655, 5977, 2667,
	6061, 5938, 2134, 1165, 6059, 2104, 1862, 5978, 5975, 1152,
	1113, 1115, 5974, 1097, 5954, 1195, 5953, 2655, 5839, 5824,
	5814, 1748, 5797, 4185, 2897, 2655, 5789, 5538, 1841, 5815,
	2657, 5796, 5788, 4701, 5936, 4358, 2134, 4104, 5657, 2104,
	5646, 1748, 5635, 4625, 5767, 5619, 2658, 5658, 2655, 3161,
	6309, 4313, 5551, 2667, 5618, 3159, 1571, 1178, 6310, 894,
	5550, 5552, 5549, 5547, 2657, 5537, 5506, 4696, 5504, 4358,
	5470, 4358, 1748, 5391, 5538, 2655, 5390, 5505, 1822, 4615,
	2658, 3265, 5392, 5441, 5279, 3161, 1572, 2667, 5389, 1573,
	879, 5383, 1339, 1574, 5328, 2103, 5237, 3161, 5296, 1221,
	3161, 2793, 4916, 4313, 1942, 2703, 4874, 5297, 4149, 4150,
	4151, 4152, 5199, 5177, 1822, 1575, 5141, 4865, 4778, 4873,
	4767, 2655, 2655, 4715, 869, 1942, 3161, 4779, 179, 4768,
	895, 4710, 2134, 1086, 4614, 2104, 4606, 4638, 4584, 4542,
	2655, 4477, 879, 4615, 879, 2655, 4427, 4541, 4541, 4315,
	4478, 2134, 4301, 1578, 2104, 4428, 4224, 4218, 4316, 4211,
	2657, 4302, 4192, 4695, 4184, 4225, 4219, 4678, 2655, 4182,
	1576, 4032, 4181, 4185, 4629, 4180, 2658, 4179, 2655, 2657,
	4109, 2655, 4073, 2667, 2655, 4358, 2655, 1577, 4107, 2655,
	3979, 3921, 4269, 1338, 1338, 2658, 4208, 2655, 3802, 3161,
	2655, 879, 2667, 2109, 2110, 2111, 2112, 3803, 1338, 3747,
	4207, 1306, 4206, 2134, 4032, 1841, 2104, 1184, 3748, 879,
	3558, 1450, 879, 879, 1579, 3968, 1187, 1189, 1190, 3559,
	3448, 879, 879, 3444, 879, 3161, 833, 833, 3192, 1748,
	833, 2657, 2655, 3163, 4066, 1807, 3626, 2655, 3804, 3161,
	3162, 3133, 3161, 930, 930, 803, 803, 2658, 3345, 3161,
	3132, 2656, 3245, 5726, 2667, 1919, 3408, 5726, 3127, 1256,
	2655, 1256, 3037, 1433, 1902, 1908, 4198, 3161, 879, 1822,
	1237, 1238, 1441, 6189, 1242, 1245, 1748, 1254, 2123, 881,
	1748, 4194, 1428, 1822, 4625, 1743, 1822, 2113, 2114, 2115,
	1058, 1058, 4152, 1822, 930, 1822, 2107, 2108, 2109, 2110,
	2111, 2112, 5396, 5843, 4126, 4147, 4148, 4149, 4150, 4151,
	4152, 879, 879, 189, 328, 328, 2112, 4147, 4148, 4149,
	4150, 4151, 4152, 2107, 2108, 2109, 2110, 2111, 2112, 930,
	930, 1231, 3464, 1912, 820, 1738, 1302, 1303, 4625, 900,
	900, 806, 1902, 1814, 2123, 2107, 2108, 2109, 2110, 2111,
	2112, 1942, 1910, 2113, 2114, 2115, 4408, 1748, 2735, 1907,
	4140, 1902, 2107, 2108, 2109, 2110, 2111, 2112, 1902, 4141,
	1807, 2107, 2108, 2109, 2110, 2111, 2112, 3969, 1484, 806,
	1455, 1564, 4364, 2107, 2108, 2109, 2110, 2111, 2112, 1901,
	6143, 4408, 944, 945, 946, 1184, 806, 3626, 1902, 133,
	870, 938, 939, 940, 941, 942, 943, 3846, 4860, 1762,
	930, 1489, 3464, 930, 930, 1801, 1184, 806, 1752, 765,
	2744, 2103, 1748, 2694, 1203, 1769, 1246, 2735, 3853, 186,
	1257, 1155, 5051, 1282, 1203, 1157, 6144, 1203, 1155, 1588,
	1822, 1154, 1305, 2123, 1203, 1287, 1769, 1203, 2735, 1286,
	802, 6403, 6141, 4520, 1426, 1769, 183, 1484, 1763, 1614,
	184, 2107, 2108, 2109, 2110, 2111, 2112, 4860, 1855, 801,
	5654, 1198, 1739, 1740, 1287, 6377, 1483, 1308, 1286, 188,
	4429, 1287, 1184, 1188, 5942, 1286, 4430, 1868, 1308, 1769,
	1171, 2735, 1173, 879, 1175, 749, 1165, 1894, 1172, 1894,
	1197, 1442, 1764, 183, 879, 1761, 1307, 184, 186, 6221,
	1792, 756, 181, 4801, 868, 2107, 2108, 2109, 2110, 2111,
	2112, 6204, 2694, 6195, 5968, 5943, 188, 1209, 5919, 806,
	1214, 1778, 1779, 5886, 5776, 183, 1499, 1218, 1243, 184,
	1229, 2745, 1687, 1509, 1776, 1258, 5769, 4924, 1904, 2107,
	2108, 2109, 2110, 2111, 2112, 1778, 1779, 5732, 188, 179,
	5661, 1338, 802, 1429, 5637, 1757, 1525, 1526, 1780, 930,
	930, 5607, 5513, 186, 833, 1014, 935, 5510, 1766, 1014,
	1014, 801, 6170, 5496, 1281, 1267, 5495, 5484, 1954, 5482,
	2597, 820, 1960, 1961, 1338, 1288, 182, 5251, 1338, 5244,
	183, 5241, 1289, 1517, 184, 5227, 1338, 5222, 1338, 5214,
	5213, 867, 1969, 5203, 1768, 1338, 1704, 866, 1473, 1892,
	1710, 5162, 5132, 188, 5082, 5081, 1338, 1338, 1338, 1338,
	1338, 5080, 2798, 1234, 1235, 1236, 4915, 1338, 1239, 1240,
	1241, 1244, 1434, 3657, 1980, 2107, 2108, 2109, 2110, 2111,
	2112, 4828, 4791, 4790, 1452, 1453, 4861, 1553, 2801, 1760,
	1562, 1338, 1581, 1819, 2107, 2108, 2109, 2110, 2111, 2112,
	4774, 2695, 4764, 4763, 1773, 1774, 1775, 4762, 4718, 1472,
	1832, 4712, 4671, 869, 2743, 3036, 4670, 1781, 2134, 4669,
	4623, 2104, 1759, 3338, 4603, 4420, 1955, 1634, 1654, 4377,
	3854, 4357, 1816, 5655, 2756, 4310, 4268, 4202, 4923, 2990,
	1672, 4195, 1682, 4175, 4167, 4861, 2657, 4166, 2798, 2798,
	4145, 4143, 1889, 4142, 2958, 4138, 2107, 2108, 2109, 2110,
	2111, 2112, 2658, 3852, 1898, 4136, 4135, 4134, 4133, 2667,
	4111, 1635, 879, 1338, 2801, 2801, 4108, 4027, 3928, 3926,
	3923, 1836, 3922, 3912, 1635, 3443, 1635, 1592, 717, 1591,
	2684, 1442, 2685, 1490, 1653, 1496, 1593, 3436, 3231, 820,
	2695, 879, 1491, 1926, 2707, 1927, 1928, 1929, 1686, 820,
	1932, 1933, 1934, 1896, 186, 1937, 1707, 139, 2678, 1711,
	1712, 1669, 1287, 1679, 1734, 2596, 1286, 180, 1497, 2799,
	935, 1454, 3035, 930, 930, 930, 930, 1185, 930, 768,
	1831, 183, 2798, 3339, 1165, 184, 6411, 6040, 200, 6399,
	186, 879, 1165, 1165, 1785, 1786, 879, 771, 1789, 771,
	169, 2783, 5337, 6395, 188, 1188, 1196, 6307, 2801, 1909,
	133, 2959, 1980, 2798, 2739, 2812, 6273, 183, 1737, 1486,
	2676, 184, 879, 1486, 930, 6243, 2675, 6238, 6357, 6231,
	806, 1188, 879, 1739, 1740, 2755, 1486, 6162, 1165, 2801,
	188, 879, 6095, 4120, 5874, 6057, 4859, 6028, 803, 803,
	2742, 6142, 803, 803, 1966, 2799, 2799, 1247, 1248, 6025,
	5941, 879, 1916, 1917, 1918, 879, 5940, 1156, 5131, 1853,
	2805, 804, 805, 1157, 1156, 1429, 5904, 5900, 2596, 4272,
	1157, 187, 1900, 2802, 934, 4303, 1250, 5826, 804, 805,
	5792, 328, 5720, 5719, 757, 5718, 5698, 2696, 5682, 1665,
	2699, 2693, 1890, 2852, 5681, 5680, 4672, 2800, 5670, 804,
	805, 1953, 868, 328, 5667, 868, 868, 1165, 5287, 5545,
	5542, 5507, 1906, 5313, 5291, 1186, 1848, 1848, 5278, 1860,
	930, 5270, 2951, 5267, 5047, 5041, 5086, 4962, 4919, 2591,
	4800, 180, 4680, 2593, 2594, 1977, 4903, 879, 4893, 2799,
	4890, 328, 4870, 4833, 4831, 2783, 2783, 2783, 186, 2844,
	187, 328, 4823, 2598, 4616, 2805, 2811, 1523, 2840, 2802,
	2802, 4450, 1905, 6172, 4449, 4444, 1436, 1774, 1773, 2640,
	2799, 879, 879, 2592, 1775, 183, 4260, 4259, 4212, 184,
	4045, 1781, 2600, 2800, 2800, 4117, 4099, 4097, 2808, 2078,
	3330, 930, 930, 930, 930, 930, 2077, 2070, 188, 867,
	2099, 3953, 867, 867, 186, 2093, 3885, 2100, 2094, 2095,
	2669, 804, 805, 930, 930, 187, 3779, 5308, 4499, 3654,
	1486, 930, 3567, 3511, 3336, 3370, 3364, 180, 180, 3109,
	3087, 183, 3079, 2857, 2843, 184, 2770, 2718, 1930, 1931,
	1338, 2805, 2805, 1935, 1936, 2709, 1938, 1939, 2649, 4495,
	133, 4447, 1769, 2802, 188, 2890, 1771, 2647, 2646, 2645,
	2644, 2643, 2798, 2820, 2822, 2642, 2798, 2641, 2639, 2638,
	4804, 2637, 935, 935, 2636, 3129, 2635, 2800, 1014, 1014,
	1977, 1014, 2634, 1014, 2802, 833, 833, 2633, 2801, 2632,
	803, 3103, 2801, 765, 2631, 2630, 2629, 2628, 934, 1786,
	1785, 2784, 879, 186, 1437, 2627, 2626, 1789, 2800, 2625,
	2869, 2624, 879, 3062, 2623, 1614, 2622, 1614, 2621, 2865,
	2866, 1614, 1614, 2620, 2705, 2619, 3016, 3017, 2648, 2888,
	183, 2618, 2652, 2617, 184, 2805, 2616, 2615, 3130, 2613,
	2736, 2612, 2599, 2597, 1964, 879, 879, 887, 1014, 1014,
	1014, 1891, 930, 188, 1794, 3148, 1871, 1784, 930, 1665,
	2984, 1598, 1894, 2710, 1432, 1283, 2805, 907, 749, 2732,
	749, 2107, 2108, 2109, 2110, 2111, 2112, 2798, 879, 879,
	186, 879, 2740, 879, 1181, 982, 879, 879, 780, 2707,
	4601, 179, 3099, 3911, 198, 4600, 3070, 3071, 803, 803,
	777, 803, 770, 2801, 3011, 5374, 4317, 183, 4807, 2872,
	4543, 184, 2878, 879, 3560, 3465, 2914, 4257, 2791, 2792,
	5725, 767, 4053, 179, 5045, 1486, 187, 930, 930, 2799,
	188, 2875, 6364, 2799, 1778, 1779, 1951, 1952, 904, 2677,
	1486, 1338, 1338, 1338, 803, 906, 5614, 4484, 1479, 905,
	1479, 4131, 3143, 2605, 2794, 2784, 2784, 2784, 3151, 1706,
	3236, 3237, 187, 2602, 3232, 1335, 5039, 2798, 4146, 2823,
	169, 908, 4156, 4157, 4158, 180, 2821, 5798, 2798, 2928,
	2936, 2798, 1335, 4497, 3160, 4146, 3736, 3730, 2868, 4156,
	4157, 4158, 5837, 2801, 2787, 5836, 5446, 2912, 3167, 2908,
	1511, 3135, 3136, 4486, 2801, 1977, 4160, 2801, 4487, 865,
	2796, 4128, 3738, 1688, 3334, 3113, 4162, 1347, 2936, 2928,
	6081, 2933, 3116, 3117, 3118, 864, 3080, 4442, 2936, 3363,
	2858, 6365, 4370, 4162, 2861, 2862, 4453, 5601, 3908, 1550,
	3193, 2818, 2073, 2802, 2799, 6021, 1685, 2802, 4642, 3165,
	6020, 5835, 5473, 1338, 4641, 2966, 2972, 2973, 2974, 2933,
	1338, 1338, 4304, 879, 4594, 2977, 3640, 2800, 1194, 2933,
	1167, 2800, 863, 879, 1338, 4858, 930, 5631, 1338, 1338,
	1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
	1338, 1338, 1338, 1338, 3006, 1338, 3009, 1444, 3012, 4902,
	3013, 3014, 4454, 5341, 5613, 2925, 3041, 2073, 2948, 2949,
	934, 934, 4340, 3659, 3131, 3042, 1568, 3508, 3658, 4336,
	3243, 6281, 5370, 3732, 5003, 2805, 2609, 1689, 731, 2805,
	187, 3186, 3187, 2921, 2799, 5763, 3188, 3189, 2817, 3190,
	3191, 3069, 3072, 180, 192, 2799, 2720, 2971, 2799, 5486,
	3335, 2723, 3107, 5229, 5228, 1550, 2734, 3550, 2802, 4327,
	1510, 139, 1460, 3578, 2989, 1140, 1133, 1940, 729, 1000,
	5643, 2995, 133, 191, 910, 1689, 912, 4781, 3091, 3089,
	3090, 3100, 2800, 1570, 1625, 3104, 187, 3105, 5859, 3106,
	3766, 912, 2902, 1335, 831, 3108, 4146, 4394, 1206, 180,
	4156, 4157, 4158, 3577, 133, 4456, 192, 4707, 4706, 5625,
	3583, 4374, 5191, 2870, 5430, 1762, 3451, 5116, 5050, 3264,
	5384, 3125, 3235, 5013, 2853, 4875, 862, 2804, 2816, 1203,
	1505, 5632, 4356, 2775, 4160, 191, 918, 1468, 1138, 3173,
	2805, 727, 3175, 2590, 4162, 231, 192, 1032, 2802, 3677,
	1626, 3583, 973, 5176, 3139, 3140, 3141, 3675, 4675, 2802,
	5302, 1006, 2802, 6078, 1763, 865, 1012, 4821, 781, 3584,
	2815, 1012, 2800, 1012, 2827, 191, 3169, 3168, 3170, 3181,
	5762, 6041, 3174, 2800, 1335, 187, 2800, 4146, 5913, 2833,
	2832, 4156, 4157, 4158, 5642, 204, 5912, 3676, 180, 2074,
	1012, 1012, 1012, 1006, 5424, 3674, 1569, 4062, 1764, 4061,
	3584, 1761, 803, 4060, 1617, 4059, 803, 803, 4161, 5029,
	231, 3743, 989, 4977, 988, 4160, 5123, 987, 5025, 986,
	2805, 3531, 3533, 3532, 2072, 4162, 5371, 3223, 2831, 5000,
	2961, 2805, 3378, 3735, 2805, 820, 3221, 2850, 3639, 2651,
	2845, 5063, 3624, 1627, 3740, 5511, 4440, 1830, 6190, 5015,
	4342, 3021, 187, 6030, 2074, 6354, 2797, 4563, 5004, 6353,
	5639, 2134, 2075, 2797, 2104, 180, 5638, 2797, 2116, 2117,
	2118, 5002, 897, 1828, 1766, 3020, 5870, 3244, 1153, 6031,
	803, 803, 3262, 3585, 4375, 3994, 6193, 2665, 1571, 2657,
	2797, 5612, 5726, 3992, 2662, 2666, 2661, 2797, 2663, 5018,
	4455, 4461, 3260, 6217, 3254, 2658, 3154, 6054, 4131, 2797,
	1724, 5660, 2667, 5359, 3219, 3333, 5353, 3068, 1572, 1058,
	1480, 1573, 1480, 3329, 3585, 1574, 2797, 2075, 3603, 2797,
	2797, 2797, 6082, 3137, 5385, 5138, 1722, 2703, 2076, 5124,
	4621, 1495, 3246, 4338, 5127, 3450, 3947, 1575, 1619, 5125,
	3840, 2927, 6216, 3263, 4341, 1760, 1058, 3591, 3197, 3094,
	3282, 3271, 3270, 2828, 918, 4476, 232, 1493, 3101, 4153,
	4154, 4155, 1247, 1248, 2830, 2829, 4473, 5122, 4147, 4148,
	4149, 4150, 4151, 4152, 1827, 1578, 4153, 4154, 4155, 4472,
	3917, 2927, 3074, 3332, 5126, 4147, 4148, 4149, 4150, 4151,
	4152, 4640, 1576, 2076, 3082, 3155, 1550, 2944, 1445, 3083,
	1766, 3185, 1629, 3086, 5070, 2922, 913, 3088, 5058, 1577,
	2671, 5005, 4440, 2826, 2921, 4636, 4635, 3606, 4634, 3156,
	2672, 4633, 1618, 4337, 4632, 3995, 3200, 2722, 4572, 3153,
	3993, 232, 4570, 3575, 5596, 1623, 919, 1721, 3991, 4567,
	4565, 3914, 2673, 4414, 1314, 3899, 1579, 1338, 1338, 935,
	1338, 3256, 911, 1338, 3052, 5064, 1766, 3152, 1829, 917,
	2904, 2900, 2884, 1338, 1338, 4339, 3381, 911, 1492, 1142,
	1338, 3354, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
	1338, 1338, 1338, 896, 1338, 3915, 1338, 6280, 1338, 1338,
	1338, 1338, 1338, 1338, 6259, 1338, 1338, 1338, 3576, 3138,
	1338, 784, 5851, 6101, 2805, 3686, 1338, 3422, 930, 2842,
	1338, 1338, 1338, 1338, 1628, 3382, 4293, 3218, 230, 3220,
	229, 1723, 1620, 915, 3901, 4538, 4388, 5012, 3460, 3351,
	3462, 3835, 3007, 1003, 2684, 6124, 3429, 1714, 3485, 3485,
	1474, 3807, 1921, 5087, 3497, 930, 3604, 785, 1920, 894,
	3829, 3857, 1494, 1708, 1703, 2733, 5871, 4534, 3003, 3383,
	3057, 1766, 3380, 3851, 3002, 3198, 3081, 1226, 1636, 1655,
	5325, 1676, 2955, 879, 869, 5687, 6219, 3534, 782, 3600,
	783, 3199, 3555, 1600, 1684, 6080, 803, 4153, 4154, 4155,
	897, 4539, 3452, 230, 3566, 229, 4147, 4148, 4149, 4150,
	4151, 4152, 930, 1718, 1227, 2954, 2812, 3632, 5065, 4940,
	2994, 2852, 3830, 234, 1604, 1474, 5872, 1683, 5755, 2993,
	895, 1338, 916, 3602, 1046, 3862, 2992, 3620, 930, 1595,
	3863, 1923, 879, 1980, 271, 3384, 4392, 1674, 4391, 1621,
	5587, 4848, 1622, 5588, 5205, 3058, 5589, 3507, 2848, 920,
	6100, 1732, 2807, 2806, 5042, 5604, 1727, 879, 879, 3283,
	1662, 2812, 1153, 3059, 5590, 3001, 4492, 1514, 3586, 3611,
	4488, 3662, 3621, 3666, 312, 3528, 2585, 6218, 4153, 4154,
	4155, 3754, 2083, 4703, 3195, 3599, 879, 4147, 4148, 4149,
	4150, 4151, 4152, 3655, 4537, 921, 3859, 917, 2999, 879,
	923, 5592, 4983, 3646, 4085, 5530, 5865, 4294, 4941, 3486,
	3486, 5591, 3258, 3258, 930, 930, 3379, 3420, 4983, 3414,
	6186, 5593, 1728, 2864, 3349, 3913, 5605, 879, 2854, 3990,
	3834, 6185, 879, 3641, 1137, 3255, 1439, 976, 3490, 3996,
	1675, 1922, 5268, 5653, 6099, 4576, 2890, 1228, 4575, 4047,
	4574, 3430, 2772, 5531, 2947, 2890, 2123, 4619, 4474, 3627,
	3693, 5195, 820, 3551, 3425, 2113, 2114, 2115, 3684, 3340,
	3679, 5120, 1338, 1911, 2107, 2108, 2109, 2110, 2111, 2112,
	3609, 1925, 4014, 3601, 1866, 5756, 328, 934, 2923, 6187,
	3605, 2854, 3722, 3467, 3630, 3631, 3625, 3937, 3486, 3861,
	3768, 6033, 1443, 3547, 2721, 3055, 3368, 1225, 1139, 1716,
	1017, 896, 825, 1465, 1466, 2592, 5194, 1469, 2909, 3343,
	3527, 3355, 3432, 1977, 3789, 1726, 1216, 3900, 2945, 4535,
	1169, 1977, 3431, 3433, 3337, 3435, 4461, 3437, 3438, 3439,
	143, 1004, 1713, 1924, 3650, 1715, 5852, 3488, 3488, 3329,
	863, 5594, 5595, 3360, 2836, 1601, 3856, 3800, 328, 3739,
	870, 4387, 4533, 4540, 6036, 4620, 3399, 2713, 3850, 5056,
	3474, 3474, 1440, 4529, 5334, 1719, 4843, 894, 3805, 5754,
	2712, 133, 3418, 3566, 1602, 3872, 1605, 3790, 1599, 3468,
	3879, 2946, 3441, 930, 833, 3440, 4536, 1014, 935, 1014,
	1014, 1596, 2836, 3750, 3752, 6042, 749, 749, 1717, 1677,
	3887, 5388, 3891, 3892, 1223, 3320, 3321, 3322, 3323, 1603,
	3056, 5863, 4475, 4984, 3463, 5043, 3749, 4446, 3767, 3617,
	3493, 914, 1663, 3800, 1594, 6024, 3488, 4493, 1338, 4984,
	2084, 4489, 1673, 1757, 930, 5777, 5685, 930, 895, 930,
	5293, 5387, 5909, 5893, 4079, 3203, 4077, 3202, 2841, 3989,
	4075, 314, 4076, 4078, 3552, 3487, 3487, 3553, 3860, 3988,
	4406, 3557, 3554, 4909, 1839, 4324, 2855, 4335, 5145, 6035,
	2856, 3731, 4985, 5292, 2714, 4334, 4340, 3737, 3159, 5068,
	5010, 6389, 1568, 4336, 1730, 6388, 1335, 5386, 4985, 4146,
	6038, 3858, 6037, 4156, 4157, 4158, 5358, 3629, 5606, 3825,
	2835, 5372, 1894, 3589, 313, 5190, 1052, 2611, 3888, 4910,
	1840, 1295, 879, 5877, 1100, 4986, 3635, 1725, 1464, 5449,
	5038, 4649, 3792, 4553, 4552, 3845, 4528, 4160, 4490, 2855,
	5364, 4986, 6351, 2856, 3930, 6027, 4997, 4162, 3702, 5892,
	6184, 4401, 4648, 3710, 3487, 2918, 3977, 6097, 2835, 1570,
	1295, 1297, 4720, 4331, 6168, 930, 930, 3392, 5848, 3537,
	3123, 3720, 930, 930, 5217, 3727, 829, 833, 1014, 3324,
	1014, 1014, 3703, 3981, 1338, 1295, 1297, 3896, 3897, 1338,
	1338, 4023, 1338, 4025, 4026, 1865, 1338, 3359, 3568, 3569,
	3570, 3571, 3572, 4559, 1338, 3733, 2980, 2969, 4755, 2941,
	4030, 4031, 4033, 2847, 3742, 3869, 1338, 3741, 4754, 3751,
	1165, 1864, 1291, 1446, 3485, 3008, 5664, 1135, 5139, 1001,
	4900, 879, 5000, 4380, 1143, 1145, 983, 1522, 957, 4977,
	5303, 2911, 1147, 2668, 4328, 5113, 1147, 1475, 3033, 3031,
	869, 1217, 1834, 1170, 1338, 1338, 3034, 3032, 5112, 3039,
	1338, 1006, 1012, 2936, 4871, 1732, 1012, 1012, 3536, 3616,
	3877, 6268, 1783, 4080, 1658, 4199, 1338, 1338, 1658, 4908,
	3, 1338, 1569, 1787, 1788, 1772, 4734, 935, 5233, 788,
	1338, 3791, 1233, 6384, 3028, 6296, 1338, 4123, 4343, 5955,
	3715, 3034, 3032, 5540, 5766, 5512, 3718, 3719, 4217, 4125,
	1338, 5234, 3945, 5069, 4119, 5289, 4275, 4964, 4087, 3183,
	5212, 1338, 6319, 6318, 3831, 6284, 4056, 869, 3356, 4110,
	1695, 6283, 3946, 1296, 4342, 3837, 934, 6108, 3371, 3372,
	3373, 3374, 3837, 3836, 1735, 1338, 1338, 1338, 1733, 3839,
	5958, 5957, 6225, 1338, 1338, 1338, 6107, 4344, 1338, 3875,
	6224, 3884, 3873, 3320, 3321, 3322, 3323, 4098, 5811, 1338,
	4081, 3124, 1296, 4400, 1571, 4000, 4001, 4002, 4003, 4004,
	4005, 4006, 6110, 5363, 5812, 4435, 4012, 4013, 3030, 6109,
	4998, 1338, 6113, 5218, 6111, 3486, 1691, 1296, 6114, 4210,
	6112, 3916, 3918, 3919, 1572, 1107, 1134, 1573, 1002, 4114,
	4907, 1574, 4183, 4999, 5883, 2684, 1338, 956, 4190, 4925,
	4200, 1338, 6320, 2703, 4241, 4241, 833, 4338, 3485, 4253,
	4241, 4241, 4049, 1575, 1165, 4899, 5765, 4756, 4341, 3876,
	3956, 3029, 4124, 1657, 3633, 3957, 3955, 1657, 4276, 4965,
	4088, 3184, 879, 807, 879, 790, 790, 879, 3964, 1826,
	1590, 4090, 1894, 879, 879, 4029, 4091, 3652, 1501, 5962,
	888, 1578, 4024, 4092, 869, 5961, 5963, 5964, 3855, 5960,
	3145, 3980, 4089, 3985, 5967, 5959, 5772, 3986, 1576, 5810,
	6116, 5773, 6115, 3346, 3350, 1963, 3352, 5520, 1047, 1694,
	5525, 879, 1274, 3073, 5523, 1577, 5524, 5526, 1756, 1521,
	4433, 5107, 5919, 5109, 190, 1821, 5730, 4337, 5627, 5322,
	5129, 5105, 4404, 4383, 1508, 3410, 3411, 3412, 3413, 4300,
	3987, 3948, 3893, 3488, 3561, 1692, 2591, 1291, 879, 879,
	4082, 2790, 1579, 3663, 4022, 2614, 3442, 2071, 4039, 4280,
	4036, 1962, 3260, 1899, 4040, 4050, 3474, 2739, 4305, 4339,
	1897, 1697, 1803, 1709, 1471, 1280, 4048, 1696, 1848, 4189,
	5246, 6365, 6334, 1338, 5830, 5829, 6383, 2783, 6361, 6134,
	4832, 6407, 803, 4402, 4284, 4226, 3967, 3603, 803, 803,
	3329, 4286, 4425, 5522, 6291, 5527, 5356, 3486, 6136, 3486,
	4432, 5555, 4283, 1520, 4072, 1338, 4070, 5106, 4398, 4083,
	4153, 4154, 4155, 2591, 4096, 5108, 5306, 1820, 4251, 4147,
	4148, 4149, 4150, 4151, 4152, 934, 1507, 4249, 3598, 4290,
	4809, 4308, 3587, 4376, 3535, 3503, 803, 6129, 4057, 4058,
	2838, 273, 4063, 4201, 2092, 4348, 193, 4205, 1843, 4102,
	3172, 3487, 771, 4113, 4116, 2916, 4396, 5255, 4463, 726,
	4325, 728, 730, 2919, 6131, 2929, 2824, 1208, 1699, 3492,
	5989, 5990, 2918, 6130, 4347, 5535, 6382, 820, 3691, 6139,
	6132, 6137, 5988, 6145, 6146, 5993, 3606, 2953, 5536, 4203,
	5855, 5252, 5804, 5802, 4329, 5567, 4238, 1693, 5992, 1191,
	3886, 1690, 4254, 4255, 3456, 3457, 3894, 5805, 4172, 4173,
	4174, 2917, 6144, 4216, 4193, 3426, 4215, 3690, 5284, 6047,
	6048, 3692, 6048, 194, 195, 196, 197, 6047, 6337, 6138,
	1338, 2852, 4038, 1698, 5782, 3488, 4586, 3488, 4413, 4462,
	4415, 4411, 3849, 803, 194, 195, 196, 1449, 3689, 2920,
	4246, 4479, 4480, 4248, 4222, 4221, 2592, 4245, 4243, 879,
	4247, 6133, 4244, 4267, 4298, 4220, 5972, 4215, 5971, 5566,
	3268, 3269, 4681, 4682, 4527, 4385, 4386, 1744, 5779, 4279,
	3596, 5534, 4295, 4265, 4266, 4395, 1136, 3959, 5781, 5780,
	1043, 4319, 951, 3909, 3910, 6144, 4948, 6242, 4972, 3343,
	3461, 4368, 3920, 4418, 3447, 1012, 1012, 4309, 1012, 4261,
	1012, 4213, 1006, 1006, 971, 3604, 4459, 311, 6390, 3505,
	4366, 4367, 6286, 4345, 4322, 4320, 4321, 1165, 5649, 5911,
	2587, 3661, 1617, 4371, 4549, 5348, 5119, 5118, 4949, 4841,
	930, 930, 2088, 4612, 6287, 4610, 4008, 4381, 3600, 4050,
	803, 4007, 3958, 3487, 1914, 3487, 5576, 930, 3446, 3097,
	3095, 5572, 2957, 4518, 1608, 4519, 2956, 2741, 803, 4093,
	4094, 4950, 4951, 4952, 2688, 1012, 1012, 1012, 2687, 4020,
	4021, 3657, 4817, 1165, 1165, 2890, 5264, 2784, 4412, 4410,
	133, 4307, 3602, 4812, 4811, 4515, 4307, 4856, 4262, 4232,
	4237, 4235, 4236, 4234, 879, 4230, 4233, 4441, 6285, 5869,
	6223, 6222, 4485, 6046, 6044, 4452, 4448, 5969, 5770, 3148,
	4631, 1610, 4815, 4237, 4235, 4236, 4234, 5735, 5314, 5569,
	5570, 5092, 4882, 879, 4957, 4788, 4498, 4306, 4163, 4164,
	4165, 4554, 4521, 4555, 4556, 4232, 4237, 4235, 4236, 4234,
	4481, 4230, 4233, 4787, 3599, 4729, 4728, 4593, 4434, 4517,
	1977, 930, 5578, 5571, 4592, 5574, 5575, 5577, 5573, 4503,
	3982, 3906, 4043, 4043, 3818, 3812, 1619, 3808, 3788, 1338,
	3786, 3708, 3546, 1338, 3927, 3513, 4550, 3454, 3215, 3597,
	3214, 2942, 2825, 3080, 4371, 2776, 1338, 2771, 1965, 1915,
	1750, 1701, 1700, 1666, 1515, 1427, 1338, 1193, 879, 879,
	1182, 824, 5472, 2102, 879, 902, 1338, 1338, 898, 5181,
	1338, 1338, 1338, 4525, 1338, 4684, 4363, 3361, 6209, 3595,
	6119, 1256, 6118, 5994, 5231, 1338, 4647, 5494, 4504, 5425,
	5295, 5182, 5030, 4511, 5026, 4883, 4733, 4314, 1338, 3978,
	1338, 2863, 3601, 2860, 1304, 4637, 4679, 1141, 1124, 3605,
	1618, 4644, 1297, 4393, 2915, 1338, 822, 4674, 3242, 4055,
	5332, 4725, 1338, 5331, 3085, 6312, 1338, 1338, 4417, 4596,
	4597, 4196, 3470, 4042, 5263, 4232, 4237, 4235, 4236, 4234,
	1338, 4230, 4233, 5262, 869, 1338, 6089, 4673, 1338, 1338,
	1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
	1338, 4121, 1338, 4041, 2692, 5375, 802, 2691, 5634, 1338,
	1338, 1338, 4585, 4618, 5376, 4587, 5500, 1338, 5465, 1338,
	5373, 5216, 5154, 4702, 4258, 801, 1338, 4139, 4084, 3952,
	1338, 3273, 3164, 5377, 901, 1338, 890, 6311, 6198, 1338,
	4046, 5711, 3652, 5708, 5464, 5448, 5418, 1338, 1338, 1338,
	1620, 5413, 5412, 4646, 5071, 4604, 1338, 5060, 4605, 5059,
	3460, 5057, 5044, 5037, 4946, 4889, 2684, 1176, 4578, 4577,
	3485, 4573, 4571, 3485, 4770, 4656, 4569, 4568, 1165, 4566,
	907, 4822, 4564, 1607, 4241, 4253, 4241, 4241, 4241, 4558,
	4622, 4630, 4557, 4829, 1442, 4547, 4522, 4516, 4514, 4496,
	1338, 1338, 4645, 1338, 179, 4494, 4491, 4423, 4422, 4421,
	2812, 4359, 1611, 4853, 4071, 3327, 1606, 4095, 4069, 143,
	3954, 3902, 3881, 3833, 3832, 3794, 4100, 3793, 3326, 3327,
	3084, 3309, 3134, 3078, 3077, 1338, 3076, 3075, 3038, 3022,
	3019, 3018, 3015, 3010, 1338, 1338, 3004, 879, 2996, 1894,
	4668, 904, 2988, 2985, 4029, 2983, 4802, 4803, 906, 2982,
	133, 2981, 905, 2979, 2976, 2975, 2970, 1621, 879, 2654,
	1622, 2968, 2965, 803, 2960, 930, 2952, 2940, 2931, 2930,
	2907, 1338, 879, 2906, 908, 2905, 4892, 2903, 2901, 2899,
	2885, 2883, 2851, 2846, 4177, 2839, 2689, 4065, 3285, 3566,
	3286, 3925, 3924, 1215, 4901, 930, 1168, 1158, 4384, 5480,
	5172, 5161, 5159, 5157, 5156, 4854, 4667, 4863, 4666, 4664,
	4663, 4864, 4662, 4723, 4717, 4661, 4660, 4806, 4659, 4704,
	4658, 4654, 4732, 4652, 4015, 4867, 3217, 3216, 879, 3211,
	3210, 3486, 4944, 4869, 3486, 3209, 3208, 3207, 3485, 3620,
	3206, 3205, 3204, 4927, 5846, 4959, 3359, 4857, 6270, 4937,
	4738, 820, 4891, 6235, 4852, 6269, 6001, 820, 4727, 4810,
	2591, 4881, 4813, 4900, 4251, 5403, 4888, 2812, 5399, 2696,
	5243, 4978, 820, 4938, 820, 1894, 5242, 5209, 1894, 5208,
	1894, 4994, 4348, 4530, 3621, 3787, 3780, 3776, 3772, 4785,
	4784, 3999, 4769, 4789, 2943, 5016, 4796, 5165, 4730, 4731,
	4783, 4805, 4688, 4689, 4690, 4691, 3646, 4814, 4971, 5365,
	4922, 4347, 4390, 3343, 2987, 4808, 4798, 4797, 4935, 2890,
	3974, 3973, 4989, 4993, 4818, 4819, 4995, 4921, 4825, 4782,
	2890, 2890, 3972, 3971, 4953, 4885, 3970, 3628, 4544, 4546,
	4954, 2877, 1706, 5001, 3306, 4665, 4824, 4844, 4826, 4827,
	1561, 3304, 3307, 3303, 1552, 3305, 3342, 4101, 4866, 1300,
	6356, 5347, 874, 820, 235, 4838, 3341, 4876, 5396, 3488,
	4914, 4786, 3488, 6374, 4880, 133, 4886, 4884, 4970, 1301,
	133, 133, 875, 6373, 3510, 5311, 3950, 1745, 4933, 1521,
	5857, 5856, 3474, 3527, 4348, 3474, 1163, 4981, 1746, 6220,
	4988, 5085, 4990, 5393, 5299, 924, 2587, 5338, 4580, 3486,
	3486, 4437, 3649, 5115, 3608, 3514, 4963, 2765, 2757, 3800,
	4588, 4912, 2704, 4347, 2697, 1518, 5006, 5009, 4591, 1506,
	4918, 3343, 1500, 4836, 4926, 1498, 1477, 5564, 4928, 4920,
	890, 5697, 5696, 5647, 5454, 133, 4929, 4930, 5114, 4974,
	4973, 4582, 3486, 4936, 4524, 4466, 4464, 4436, 4397, 4955,
	4287, 3592, 3588, 3512, 3506, 4958, 4608, 4961, 3114, 3098,
	3064, 3096, 1977, 4969, 3093, 2881, 2876, 2777, 2761, 2753,
	2751, 2731, 1825, 1824, 1823, 1818, 4050, 3487, 1817, 1815,
	3487, 1812, 5007, 1810, 4698, 4699, 1808, 1805, 5008, 5011,
	1802, 1795, 1791, 1754, 1751, 1747, 1742, 3248, 5076, 1338,
	1720, 935, 1667, 5020, 4602, 1584, 3977, 1580, 1560, 879,
	879, 879, 879, 5175, 1551, 5401, 1338, 1338, 5128, 5400,
	3868, 1101, 1338, 1338, 2730, 1464, 1099, 5075, 6122, 1338,
	1338, 6051, 6039, 1482, 5937, 5676, 1338, 3488, 3488, 5768,
	5699, 4657, 5615, 1338, 5554, 5404, 5360, 5346, 3845, 5335,
	5117, 4862, 4282, 5014, 1338, 831, 831, 4016, 3931, 3614,
	3474, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749,
	4750, 4751, 4752, 4753, 5143, 4757, 5094, 3607, 5072, 5077,
	3488, 5179, 1835, 5040, 2789, 2719, 5093, 2698, 4050, 1338,
	5046, 2679, 2653, 3142, 1869, 3144, 5155, 1338, 3149, 3150,
	1338, 3061, 1338, 3238, 3239, 3060, 4044, 806, 806, 820,
	6381, 806, 806, 6366, 6196, 5889, 3612, 803, 4887, 4405,
	2913, 4994, 5847, 2859, 4840, 1356, 1355, 1348, 1338, 3080,
	2670, 1161, 3485, 3485, 5137, 1856, 3485, 5136, 5320, 5633,
	6166, 5144, 833, 5628, 831, 5324, 5850, 5256, 5630, 4241,
	6029, 3566, 5273, 5626, 833, 3487, 3487, 5152, 2711, 5622,
	4296, 5074, 4736, 4299, 3517, 4288, 4995, 3524, 1650, 712,
	2924, 4740, 3541, 2717, 2716, 5641, 5640, 5333, 5876, 5330,
	3497, 930, 5166, 5167, 5168, 5169, 5170, 5171, 5066, 5173,
	5174, 3615, 5158, 3806, 5160, 4945, 4761, 4947, 3487, 5276,
	1749, 4403, 4050, 879, 1753, 922, 5312, 3613, 5247, 5248,
	879, 1513, 5277, 3000, 1894, 5294, 5888, 4942, 1838, 1148,
	1616, 1613, 3880, 3574, 1338, 3040, 4361, 4360, 5290, 129,
	128, 127, 126, 125, 124, 930, 123, 122, 121, 56,
	5271, 5272, 5304, 55, 2812, 1790, 54, 5211, 53, 52,
	51, 50, 1800, 49, 4904, 48, 1804, 76, 1806, 5300,
	833, 1809, 75, 1811, 74, 1813, 5361, 73, 5230, 5315,
	72, 71, 70, 69, 68, 5309, 67, 66, 3620, 65,
	64, 5307, 63, 1338, 62, 61, 60, 59, 58, 57,
	47, 5298, 3486, 46, 45, 2812, 44, 43, 5380, 42,
	41, 40, 39, 3486, 3486, 38, 5355, 3486, 5250, 5207,
	5249, 1568, 4676, 37, 5210, 35, 34, 1338, 33, 32,
	31, 36, 30, 3621, 29, 3486, 5379, 5354, 28, 27,
	26, 5259, 5260, 3122, 3121, 5265, 5336, 826, 5269, 934,
	1279, 3053, 4639, 5352, 5382, 3975, 1736, 779, 1224, 1222,
	1903, 1201, 1211, 3054, 5078, 3593, 120, 119, 118, 117,
	5258, 95, 94, 93, 5240, 92, 4713, 91, 90, 89,
	88, 87, 86, 85, 84, 5, 83, 5318, 1570, 98,
	100, 4911, 99, 97, 96, 82, 5345, 81, 5342, 5343,
	2890, 5001, 80, 79, 5327, 77, 18, 17, 4318, 1729,
	2725, 6262, 5340, 6169, 216, 5339, 5397, 1338, 6034, 1447,
	803, 1006, 2737, 3274, 1012, 4457, 1012, 1012, 5432, 5351,
	4438, 4975, 1554, 6254, 3644, 6010, 4847, 202, 930, 5864,
	3488, 5288, 4333, 4330, 4982, 4845, 5894, 4991, 4851, 3499,
	5146, 3488, 3488, 4765, 4849, 3488, 3495, 1247, 1248, 3486,
	749, 6333, 5521, 5366, 4127, 3423, 3428, 5515, 5368, 5800,
	5556, 6127, 5316, 3488, 3474, 3474, 5553, 5274, 3474, 3563,
	185, 5778, 5533, 3445, 2686, 873, 872, 6121, 5378, 1309,
	5816, 6005, 5579, 5286, 5568, 4839, 803, 199, 1180, 3182,
	3845, 1230, 766, 3171, 1207, 5367, 2690, 5283, 5282, 5991,
	3845, 1569, 1338, 5987, 5986, 5402, 4799, 3453, 5280, 3466,
	1338, 1338, 1338, 5406, 2674, 133, 116, 115, 5405, 114,
	112, 111, 803, 110, 109, 108, 107, 3366, 5409, 106,
	105, 104, 103, 102, 101, 25, 1338, 1338, 3393, 24,
	1338, 1338, 1338, 5474, 23, 16, 15, 14, 3487, 5493,
	3419, 11, 5748, 3366, 5746, 5747, 5745, 3331, 937, 3487,
	3487, 2131, 3261, 3487, 1298, 2091, 1290, 1338, 5753, 4724,
	5204, 5739, 2608, 6123, 5519, 5415, 5002, 4820, 1063, 5417,
	1064, 3487, 1770, 1061, 1338, 3485, 1091, 3488, 1664, 5236,
	4780, 5273, 5529, 1571, 1006, 1012, 4771, 1012, 1012, 1338,
	1338, 3391, 3387, 3376, 3398, 5224, 330, 3347, 1333, 1332,
	3357, 4112, 879, 2606, 1327, 1328, 5599, 1323, 4853, 2082,
	2079, 3966, 3146, 1572, 2886, 3688, 1573, 879, 4424, 4482,
	1574, 5466, 3694, 5910, 4994, 879, 803, 3867, 2138, 1945,
	3196, 831, 2703, 1943, 818, 1253, 3377, 2133, 2, 1,
	0, 0, 1575, 0, 0, 5581, 803, 5636, 2812, 5584,
	0, 0, 0, 0, 0, 5488, 0, 0, 9, 0,
	5598, 0, 0, 0, 0, 0, 0, 879, 0, 4995,
	5548, 0, 0, 0, 0, 4944, 5602, 0, 0, 0,
	1578, 1014, 179, 0, 930, 5481, 5476, 5477, 5616, 5478,
	0, 5479, 0, 5668, 5674, 3487, 0, 1576, 5663, 0,
	0, 0, 0, 4994, 935, 0, 930, 930, 0, 5610,
	0, 0, 803, 0, 1577, 5508, 0, 5608, 0, 5532,
	0, 0, 0, 0, 0, 0, 0, 5650, 0, 6,
	0, 0, 0, 5562, 0, 5692, 8, 5582, 5541, 0,
	7, 0, 5644, 5600, 5645, 4993, 3486, 0, 4995, 935,
	1014, 1579, 5617, 5565, 0, 0, 5561, 0, 5585, 4852,
	0, 5624, 10, 5715, 5623, 5597, 0, 155, 0, 5666,
	78, 0, 0, 835, 5544, 5703, 22, 5705, 21, 5677,
	0, 0, 0, 0, 5690, 20, 0, 0, 0, 0,
	0, 0, 5620, 0, 0, 3486, 0, 5741, 0, 1338,
	0, 5669, 5671, 5679, 19, 1338, 13, 5683, 0, 12,
	0, 1338, 968, 0, 0, 5408, 1338, 5514, 1338, 4348,
	5528, 5686, 0, 5688, 968, 968, 0, 5689, 0, 5713,
	0, 1338, 0, 831, 0, 831, 0, 5727, 5729, 0,
	835, 5700, 0, 5733, 5734, 835, 968, 0, 4347, 4994,
	835, 0, 835, 0, 0, 5783, 1338, 0, 0, 968,
	968, 0, 0, 833, 0, 0, 5795, 5717, 0, 5714,
	1338, 0, 1089, 1089, 3486, 1338, 5712, 0, 0, 835,
	835, 835, 835, 0, 3488, 0, 968, 968, 968, 0,
	5323, 5784, 0, 5731, 4995, 0, 0, 0, 0, 0,
	5822, 0, 0, 0, 0, 0, 0, 3474, 5276, 0,
	0, 0, 0, 0, 5737, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 5817, 0,
	3092, 0, 0, 3488, 5761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 0, 0, 5785,
	5823, 0, 0, 0, 0, 0, 0, 3112, 879, 0,
	0, 5828, 5825, 133, 5710, 0, 1338, 5806, 5807, 0,
	0, 5808, 5809, 0, 5791, 5790, 0, 5861, 133, 833,
	0, 0, 0, 3485, 5832, 0, 0, 5853, 0, 0,
	0, 5860, 1338, 1338, 0, 0, 0, 0, 879, 0,
	5879, 0, 3487, 133, 0, 0, 5884, 0, 0, 1338,
	5738, 0, 3488, 0, 0, 0, 0, 5834, 0, 0,
	3486, 5833, 0, 4050, 5838, 5225, 0, 0, 5407, 5827,
	0, 1338, 0, 0, 3486, 930, 5840, 5831, 930, 930,
	930, 5841, 934, 0, 5842, 0, 5849, 0, 0, 0,
	5858, 3487, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 1338, 1338, 1338, 5885, 1338,
	5915, 0, 5878, 0, 5882, 0, 0, 5934, 1338, 0,
	5440, 5891, 0, 3201, 5905, 5890, 0, 934, 803, 0,
	1894, 5881, 0, 2684, 0, 0, 5907, 803, 803, 0,
	0, 0, 0, 3566, 0, 0, 869, 1338, 0, 0,
	0, 0, 5985, 5920, 5921, 5318, 5922, 5923, 0, 0,
	5499, 1894, 0, 1894, 0, 0, 5966, 0, 0, 0,
	3487, 5459, 5460, 0, 5973, 5925, 5931, 6012, 5926, 0,
	0, 0, 0, 0, 6009, 5906, 5438, 5439, 0, 0,
	5933, 5442, 5443, 0, 3486, 0, 5983, 0, 3488, 5950,
	5951, 5899, 0, 5901, 5965, 5903, 0, 0, 6007, 0,
	0, 0, 3488, 5581, 0, 0, 0, 0, 0, 0,
	0, 0, 6013, 133, 6022, 0, 0, 6008, 930, 0,
	5981, 6017, 5976, 3824, 6015, 0, 3826, 3827, 0, 0,
	0, 0, 0, 0, 6004, 5984, 0, 6016, 0, 0,
	0, 1894, 5970, 0, 0, 935, 0, 0, 0, 0,
	0, 6053, 1338, 0, 0, 0, 0, 0, 6018, 0,
	3393, 3393, 6026, 0, 0, 0, 6019, 0, 0, 0,
	0, 0, 0, 5999, 0, 6002, 6032, 5741, 1165, 1338,
	0, 1338, 1338, 0, 0, 0, 6045, 1338, 133, 6049,
	6043, 0, 0, 0, 0, 0, 0, 0, 0, 6106,
	0, 0, 6071, 0, 0, 0, 3487, 6055, 0, 0,
	0, 0, 0, 6065, 0, 6067, 0, 6069, 4359, 5795,
	3487, 6120, 3488, 1338, 6098, 6070, 6074, 0, 6072, 3393,
	3393, 3393, 0, 6083, 0, 0, 0, 0, 3486, 0,
	0, 0, 1894, 6088, 6091, 3474, 0, 0, 6090, 6092,
	0, 0, 0, 0, 0, 1338, 0, 6151, 6104, 6105,
	0, 0, 0, 6066, 0, 0, 4994, 0, 0, 1338,
	0, 3965, 0, 6167, 0, 0, 0, 5896, 1014, 1014,
	0, 2812, 0, 0, 968, 6154, 6155, 6164, 6126, 0,
	6161, 6179, 6180, 0, 968, 0, 6178, 968, 0, 0,
	0, 0, 6176, 6068, 968, 6158, 6177, 968, 0, 6157,
	0, 4995, 5818, 6159, 0, 0, 0, 6203, 0, 0,
	0, 0, 2591, 0, 6160, 1014, 179, 6194, 0, 930,
	6163, 0, 0, 0, 5759, 6171, 1338, 0, 6210, 0,
	3487, 0, 0, 5304, 0, 0, 6191, 0, 2852, 6199,
	6188, 6201, 0, 0, 0, 0, 968, 0, 6227, 1894,
	1894, 6197, 6226, 6230, 6147, 0, 0, 6206, 6207, 6205,
	1338, 1338, 6202, 6173, 1338, 0, 3488, 0, 6181, 2684,
	6175, 0, 0, 3460, 6174, 6215, 0, 803, 0, 0,
	0, 0, 0, 5799, 6012, 930, 930, 0, 6212, 835,
	835, 0, 0, 4994, 6240, 833, 6249, 0, 0, 0,
	0, 0, 6232, 0, 835, 0, 0, 0, 1165, 0,
	6239, 0, 6253, 6241, 6246, 6247, 0, 6007, 0, 0,
	6244, 0, 6245, 6237, 6178, 0, 0, 3486, 0, 6013,
	6176, 0, 835, 835, 6177, 6255, 835, 0, 4995, 6252,
	930, 0, 0, 6251, 6250, 0, 0, 6267, 0, 6260,
	0, 1338, 0, 6271, 179, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 6274, 0, 0, 6294,
	0, 6228, 6229, 934, 1338, 0, 0, 6275, 1646, 0,
	0, 0, 2934, 0, 3487, 0, 0, 0, 6282, 6276,
	6301, 0, 6303, 0, 0, 0, 0, 0, 0, 1089,
	0, 6173, 0, 0, 1338, 0, 0, 831, 6175, 0,
	831, 6299, 6174, 0, 0, 6308, 0, 833, 6324, 6325,
	6326, 6306, 5795, 0, 0, 0, 0, 0, 0, 6321,
	930, 0, 0, 6315, 6300, 0, 4994, 0, 6302, 6340,
	2935, 6342, 6335, 6336, 0, 6328, 0, 0, 6317, 0,
	1050, 0, 0, 0, 0, 3486, 0, 0, 6352, 6339,
	5844, 6294, 6178, 6344, 3486, 3488, 5519, 0, 6176, 0,
	0, 6359, 6177, 0, 1648, 6360, 0, 1089, 6343, 6363,
	6368, 4995, 0, 0, 803, 6350, 6341, 833, 1338, 0,
	6367, 0, 179, 0, 0, 6369, 6378, 133, 0, 6375,
	0, 6372, 133, 833, 6379, 6380, 6376, 0, 6385, 0,
	0, 6386, 0, 6393, 6392, 0, 0, 5519, 0, 1014,
	1014, 6402, 6394, 6398, 0, 6404, 6294, 6406, 0, 6405,
	6397, 6391, 6400, 6401, 6408, 0, 0, 0, 6409, 6173,
	0, 968, 6294, 6413, 0, 0, 6175, 0, 5896, 6350,
	6174, 1871, 0, 1871, 1871, 0, 0, 0, 968, 0,
	6313, 6314, 1637, 0, 968, 0, 0, 0, 0, 0,
	3519, 5757, 968, 968, 0, 0, 0, 6350, 1646, 0,
	0, 0, 5760, 3487, 1647, 831, 831, 0, 0, 0,
	0, 0, 0, 3488, 0, 0, 0, 0, 1089, 0,
	968, 0, 3488, 0, 0, 0, 0, 3486, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 5787, 0, 1643, 0, 0, 0, 831, 0,
	5979, 0, 0, 0, 0, 6261, 0, 1165, 0, 0,
	2935, 0, 0, 0, 0, 0, 0, 1640, 0, 0,
	0, 0, 0, 0, 0, 4419, 0, 0, 929, 0,
	950, 0, 952, 0, 0, 0, 0, 835, 972, 0,
	0, 1645, 0, 979, 1648, 0, 0, 0, 1089, 1089,
	835, 835, 0, 0, 0, 835, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 1007, 1008, 968, 1010, 0,
	835, 0, 0, 1982, 835, 0, 0, 0, 0, 0,
	0, 3487, 835, 1651, 835, 0, 1041, 0, 1044, 0,
	3487, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 835, 835, 835, 835, 0, 0, 0,
	0, 0, 0, 835, 0, 3488, 0, 0, 143, 0,
	0, 1638, 0, 0, 0, 0, 0, 0, 5897, 5898,
	0, 0, 1637, 0, 0, 1644, 0, 835, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 1641, 0, 0, 1647, 0, 0, 0, 1639, 0,
	0, 0, 1649, 0, 3311, 3393, 3393, 0, 0, 6062,
	0, 0, 0, 0, 3315, 0, 3313, 0, 0, 0,
	3310, 0, 3312, 3314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1643, 0, 2590, 0, 0, 1642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1640, 0, 835,
	0, 0, 0, 6233, 6234, 0, 0, 6236, 0, 0,
	0, 0, 0, 3487, 0, 0, 0, 0, 3520, 0,
	0, 1645, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
	3393, 3393, 3393, 3393, 3393, 0, 3393, 0, 1089, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 1089, 2134,
	0, 1982, 2104, 1982, 0, 0, 2116, 2117, 2118, 0,
	0, 0, 0, 1651, 4775, 0, 0, 0, 2659, 3366,
	0, 2660, 4595, 0, 968, 2665, 0, 2657, 0, 3324,
	0, 968, 2662, 2666, 2661, 0, 2663, 0, 0, 0,
	2664, 2127, 2128, 2658, 0, 0, 0, 0, 143, 0,
	2667, 1638, 0, 0, 0, 137, 0, 0, 0, 136,
	138, 0, 0, 0, 0, 1644, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 1641, 0, 0, 4834, 1089, 0, 4628, 1639, 831,
	831, 0, 1649, 831, 0, 0, 183, 0, 0, 5266,
	184, 0, 0, 0, 0, 3521, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 1089, 0, 6093, 6094, 188,
	3903, 0, 3904, 3316, 3905, 0, 142, 3907, 0, 1642,
	0, 3522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 135, 0, 0, 0, 0, 3929,
	0, 0, 181, 0, 0, 0, 0, 0, 3936, 0,
	3938, 0, 3939, 3940, 3941, 3393, 3942, 2134, 0, 0,
	2104, 0, 0, 0, 2116, 2117, 2118, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 2659, 0, 0, 2660,
	0, 0, 0, 2665, 0, 2657, 0, 0, 0, 0,
	2662, 2666, 2661, 0, 2663, 0, 0, 0, 2664, 2127,
	2128, 2658, 0, 3320, 3321, 3322, 3323, 5362, 2667, 0,
	3317, 0, 0, 0, 144, 3983, 968, 0, 0, 6332,
	0, 0, 0, 0, 0, 831, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 159, 0, 164, 157, 0, 0, 173,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 161, 0, 0, 835, 0, 0, 0,
	0, 0, 160, 0, 0, 0, 0, 0, 0, 5621,
	0, 0, 0, 0, 0, 0, 165, 153, 1089, 0,
	6347, 1089, 0, 162, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 151, 835, 835, 0, 835, 0, 835,
	0, 835, 835, 0, 0, 141, 0, 968, 0, 968,
	968, 968, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 170, 0, 2134, 0, 171, 2104, 0, 0,
	0, 2116, 2117, 2118, 6347, 0, 0, 0, 163, 0,
	0, 0, 0, 2659, 0, 0, 2660, 0, 0, 0,
	2665, 169, 2657, 0, 835, 835, 835, 2662, 2666, 2661,
	0, 2663, 6347, 0, 0, 2664, 2127, 2128, 2658, 0,
	0, 150, 0, 0, 0, 2667, 0, 0, 0, 968,
	6298, 0, 0, 140, 0, 0, 0, 139, 158, 0,
	149, 0, 0, 0, 143, 0, 4294, 0, 152, 0,
	147, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	6316, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 1089, 0, 1487, 1488, 0, 0, 835, 835, 835,
	1335, 0, 0, 4146, 0, 172, 0, 4156, 4157, 4158,
	0, 0, 0, 0, 2123, 168, 0, 0, 154, 4709,
	0, 0, 0, 2113, 2114, 2115, 0, 0, 0, 0,
	0, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0, 4191,
	0, 4160, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 4162, 831, 0, 0, 0, 2134, 0, 0, 2104,
	0, 187, 0, 2116, 2117, 2118, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 2659, 0, 0, 2660, 1660,
	1661, 0, 2665, 0, 2657, 0, 0, 0, 0, 2662,
	2666, 2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128,
	2658, 831, 0, 0, 0, 0, 0, 2667, 0, 835,
	0, 5232, 0, 0, 0, 0, 835, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 1089, 0, 0, 835, 835, 835, 835, 835, 835,
	835, 835, 835, 835, 835, 835, 835, 835, 835, 835,
	0, 835, 0, 0, 0, 0, 0, 0, 1012, 1982,
	0, 0, 0, 1796, 1798, 0, 0, 0, 0, 1335,
	0, 0, 4146, 0, 0, 0, 4156, 4157, 4158, 0,
	831, 0, 2123, 0, 0, 0, 0, 0, 4708, 0,
	0, 2113, 2114, 2115, 0, 0, 0, 0, 0, 0,
	2107, 2108, 2109, 2110, 2111, 2112, 0, 4178, 0, 0,
	4160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4162, 0, 0, 0, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 0, 4465, 0, 4467, 0, 0, 0,
	0, 0, 0, 4772, 0, 0, 0, 0, 0, 0,
	0, 2134, 0, 0, 2104, 0, 0, 0, 2116, 2117,
	2118, 0, 0, 0, 0, 5147, 5148, 5149, 5150, 5151,
	2659, 0, 0, 2660, 0, 0, 0, 2665, 0, 2657,
	0, 0, 0, 0, 2662, 2666, 2661, 0, 2663, 0,
	0, 0, 2664, 2127, 2128, 2658, 0, 0, 0, 0,
	0, 0, 2667, 0, 0, 4773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1948,
	1949, 0, 0, 3266, 0, 0, 831, 0, 6103, 2134,
	0, 0, 2104, 0, 3268, 3269, 2116, 2117, 2118, 0,
	831, 4523, 0, 0, 0, 0, 0, 0, 2659, 0,
	0, 2660, 0, 0, 0, 2665, 0, 2657, 0, 0,
	0, 0, 2662, 2666, 2661, 0, 4168, 0, 0, 0,
	2664, 2127, 2128, 2658, 0, 0, 0, 0, 0, 2123,
	2667, 0, 4169, 0, 0, 0, 0, 0, 2113, 2114,
	2115, 0, 0, 0, 0, 0, 0, 2107, 2108, 2109,
	2110, 2111, 2112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 6102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4581, 0, 0,
	4583, 0, 0, 0, 0, 0, 0, 0, 4170, 0,
	2134, 0, 0, 2104, 0, 0, 5887, 2116, 2117, 2118,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 2659,
	0, 0, 2660, 0, 0, 0, 2665, 0, 2657, 0,
	0, 0, 0, 2662, 2666, 2661, 0, 2663, 0, 0,
	0, 2664, 2127, 2128, 2658, 0, 0, 0, 4607, 0,
	4609, 2667, 4611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4153, 4154, 4155, 0, 0, 0,
	0, 0, 0, 4147, 4148, 4149, 4150, 4151, 4152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1646, 0,
	0, 3393, 0, 2746, 2747, 2748, 2749, 0, 2750, 0,
	0, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	2113, 2114, 2115, 0, 0, 0, 0, 0, 0, 2107,
	2108, 2109, 2110, 2111, 2112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2837, 0, 0, 0, 0, 0,
	1680, 0, 0, 3393, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 835, 0, 835, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	835, 0, 0, 0, 1648, 0, 835, 0, 835, 835,
	835, 835, 835, 835, 835, 835, 835, 835, 835, 0,
	835, 0, 835, 0, 835, 835, 835, 835, 835, 835,
	0, 835, 835, 835, 0, 0, 835, 0, 0, 0,
	0, 0, 835, 4153, 4154, 4155, 835, 835, 835, 835,
	0, 0, 4147, 4148, 4149, 4150, 4151, 4152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2134,
	2950, 0, 2104, 0, 835, 835, 2116, 2117, 2118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2659, 0,
	0, 2660, 1637, 0, 0, 2665, 1089, 2657, 5450, 5451,
	0, 5453, 2662, 2666, 2661, 1089, 2663, 0, 0, 0,
	2664, 2127, 2128, 2658, 1647, 0, 2123, 0, 0, 0,
	2667, 1335, 1982, 0, 4146, 2113, 2114, 2115, 4156, 4157,
	4158, 0, 0, 0, 2107, 2108, 2109, 2110, 2111, 2112,
	0, 3023, 3024, 3025, 3026, 3027, 0, 0, 0, 0,
	0, 0, 0, 0, 1643, 0, 0, 835, 1982, 0,
	0, 0, 4160, 835, 3063, 0, 0, 0, 0, 0,
	0, 3066, 4162, 831, 0, 0, 1089, 1640, 0, 0,
	0, 0, 0, 0, 0, 1012, 1012, 0, 0, 0,
	0, 0, 1982, 0, 2123, 3393, 0, 0, 0, 1089,
	0, 1645, 0, 2113, 2114, 2115, 0, 0, 0, 0,
	0, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	1982, 1636, 1012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1681, 1651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3393, 0, 0, 0, 0, 0,
	5546, 0, 0, 5546, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 1678, 1089, 1089, 143, 0,
	0, 1638, 0, 0, 0, 1089, 0, 0, 968, 0,
	0, 0, 968, 0, 968, 1644, 0, 0, 0, 0,
	968, 831, 0, 0, 0, 0, 0, 0, 835, 0,
	831, 1641, 6257, 0, 0, 2123, 0, 968, 1639, 0,
	0, 0, 1649, 0, 2113, 2114, 2115, 968, 0, 0,
	0, 6327, 0, 2107, 2108, 2109, 2110, 2111, 2112, 968,
	968, 0, 0, 0, 0, 0, 1982, 968, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 1642,
	0, 0, 968, 0, 0, 0, 968, 0, 0, 968,
	0, 0, 968, 2134, 0, 0, 2104, 3212, 3213, 0,
	2116, 2117, 2118, 968, 0, 0, 0, 0, 0, 0,
	0, 968, 2659, 0, 0, 2660, 0, 968, 0, 2665,
	0, 2657, 0, 0, 0, 968, 2662, 2666, 2661, 968,
	2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0, 0,
	0, 0, 1982, 0, 2667, 968, 0, 0, 0, 0,
	835, 0, 1089, 835, 6322, 835, 835, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2134, 0, 831, 2104, 0, 0, 0, 2116, 2117,
	2118, 0, 0, 0, 0, 0, 0, 1535, 0, 0,
	2659, 0, 1536, 2660, 835, 0, 1544, 2665, 0, 2657,
	0, 0, 0, 0, 2662, 2666, 2661, 0, 2663, 0,
	0, 3393, 2664, 2127, 2128, 2658, 0, 0, 0, 0,
	0, 0, 2667, 0, 6322, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 1089,
	6387, 968, 0, 0, 0, 0, 3284, 5130, 0, 0,
	0, 0, 0, 0, 0, 5786, 1012, 1012, 4513, 0,
	0, 5135, 0, 0, 0, 1982, 0, 0, 0, 0,
	1535, 968, 0, 0, 0, 1536, 0, 0, 0, 1544,
	0, 0, 0, 0, 0, 0, 0, 1543, 0, 0,
	0, 0, 5153, 0, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 2113, 2114, 2115, 0, 0, 0, 0,
	6258, 0, 2107, 2108, 2109, 2110, 2111, 2112, 1548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1089, 1089, 835, 835, 0, 835, 835, 0, 0,
	835, 1559, 0, 0, 0, 835, 835, 0, 835, 0,
	0, 0, 835, 0, 0, 4153, 4154, 4155, 0, 0,
	835, 1534, 0, 0, 4147, 4148, 4149, 4150, 4151, 4152,
	1543, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 0, 0, 0, 1538, 0,
	0, 0, 0, 0, 0, 0, 0, 6135, 0, 0,
	0, 1548, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 835, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 0, 0, 1540, 0, 0, 0, 0, 0, 1539,
	0, 0, 835, 835, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 5929, 1534, 0, 835, 0, 0, 0,
	0, 0, 835, 2134, 0, 1557, 2104, 0, 0, 0,
	2116, 2117, 2118, 0, 0, 0, 835, 0, 0, 0,
	0, 1538, 2659, 0, 1541, 2660, 0, 835, 0, 2665,
	0, 2657, 0, 0, 0, 0, 2662, 2666, 2661, 0,
	2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0, 0,
	0, 835, 835, 835, 2667, 0, 1540, 0, 0, 835,
	835, 835, 1539, 0, 835, 0, 0, 0, 0, 1542,
	0, 1982, 0, 0, 0, 835, 0, 1982, 0, 0,
	1545, 0, 0, 1089, 0, 3519, 0, 0, 0, 0,
	0, 0, 0, 1646, 3393, 3393, 0, 835, 3393, 0,
	0, 0, 0, 0, 0, 0, 0, 1541, 0, 0,
	0, 0, 0, 4512, 0, 1547, 1546, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 835, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2123, 0,
	0, 0, 1558, 0, 1089, 2935, 0, 2113, 2114, 2115,
	0, 0, 0, 1545, 6248, 0, 2107, 2108, 2109, 2110,
	2111, 2112, 1089, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1648,
	0, 0, 1537, 0, 0, 0, 1555, 0, 1547, 1546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5410, 5411, 1982, 1089, 0, 0,
	0, 0, 1550, 1089, 0, 0, 2123, 0, 0, 0,
	0, 0, 0, 968, 968, 2113, 2114, 2115, 0, 0,
	0, 0, 6087, 0, 2107, 2108, 2109, 2110, 2111, 2112,
	0, 5431, 0, 968, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 1637, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1647,
	0, 0, 0, 0, 0, 1550, 0, 0, 5455, 0,
	0, 835, 0, 5458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5467, 5468, 5469, 2134, 0, 0, 2104, 0, 0, 1643,
	2116, 2117, 2118, 0, 0, 0, 0, 0, 3284, 1053,
	0, 0, 2659, 5475, 1982, 1982, 1982, 0, 0, 2665,
	0, 2657, 1640, 0, 0, 0, 2662, 2666, 2661, 0,
	2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0, 0,
	0, 0, 0, 3520, 2667, 3502, 1645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 1089, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1651, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 0, 3573, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 1089, 0, 143, 968, 0, 3515, 0, 3623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 1641, 0, 0, 0,
	739, 0, 0, 1639, 0, 0, 0, 1649, 2123, 0,
	0, 787, 787, 787, 787, 810, 811, 2113, 2114, 2115,
	3521, 0, 0, 0, 6073, 0, 2107, 2108, 2109, 2110,
	2111, 2112, 0, 0, 0, 0, 885, 885, 968, 0,
	0, 0, 1089, 0, 1642, 0, 3522, 0, 0, 0,
	1089, 0, 0, 0, 3716, 3717, 928, 968, 968, 968,
	0, 0, 954, 0, 958, 0, 0, 0, 0, 974,
	975, 0, 0, 980, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 0,
	0, 0, 1022, 0, 1025, 968, 1027, 1028, 1029, 1030,
	1031, 0, 0, 0, 1040, 0, 0, 0, 1045, 0,
	968, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	0, 1108, 0, 0, 0, 968, 1120, 1122, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2134, 0, 0, 2104, 0, 0, 0,
	2116, 2117, 2118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2659, 1089, 0, 2660, 0, 0, 0, 2665,
	0, 2657, 0, 0, 0, 835, 2662, 2666, 2661, 835,
	2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0, 0,
	0, 0, 835, 0, 2667, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 835, 0, 0, 835, 835, 835, 0,
	835, 0, 0, 3883, 0, 0, 1128, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 835, 835, 0, 0, 0, 3933, 0, 3935,
	0, 0, 0, 0, 1089, 0, 835, 0, 0, 0,
	0, 835, 0, 1089, 835, 835, 835, 835, 835, 835,
	835, 835, 835, 835, 835, 835, 835, 0, 835, 0,
	0, 0, 0, 0, 0, 835, 835, 835, 1089, 0,
	0, 0, 0, 835, 0, 835, 0, 0, 2123, 0,
	0, 0, 835, 1982, 0, 0, 835, 2113, 2114, 2115,
	0, 835, 0, 0, 0, 835, 2107, 2108, 2109, 2110,
	2111, 2112, 0, 835, 835, 835, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 1535, 0,
	0, 0, 0, 1536, 0, 0, 835, 1544, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1535, 0, 0, 4009, 4011, 1536, 0, 0,
	0, 1544, 4017, 4018, 0, 0, 835, 835, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5930,
	0, 0, 5932, 0, 0, 5935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3705,
	0, 835, 962, 0, 0, 0, 0, 0, 0, 1089,
	835, 835, 0, 0, 962, 962, 0, 0, 0, 0,
	1089, 1089, 0, 4506, 1089, 0, 0, 0, 1543, 0,
	0, 0, 0, 0, 2134, 968, 1016, 2104, 0, 0,
	0, 2116, 2117, 2118, 0, 0, 5801, 835, 0, 1034,
	1038, 0, 1543, 2659, 0, 0, 2660, 0, 0, 1548,
	2665, 0, 2657, 1089, 0, 0, 0, 2662, 2666, 2661,
	0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0,
	0, 0, 0, 1548, 0, 2667, 0, 0, 0, 0,
	968, 0, 0, 0, 968, 968, 0, 2134, 0, 0,
	2104, 0, 1534, 0, 2116, 2117, 2118, 0, 0, 0,
	0, 0, 0, 1532, 835, 835, 2659, 0, 0, 2660,
	0, 0, 0, 2665, 0, 2657, 1534, 0, 0, 1538,
	2662, 2666, 2661, 0, 2663, 1982, 1089, 1982, 2664, 2127,
	2128, 2658, 0, 0, 0, 0, 0, 0, 2667, 0,
	0, 0, 0, 1538, 0, 0, 0, 835, 2134, 0,
	0, 2104, 1533, 0, 1540, 2116, 2117, 2118, 0, 0,
	1539, 0, 0, 0, 0, 0, 0, 2659, 1220, 0,
	2660, 0, 0, 0, 2665, 1982, 2657, 0, 1540, 0,
	787, 2662, 2666, 2661, 1539, 2663, 0, 0, 0, 2664,
	2127, 2128, 2658, 0, 0, 0, 0, 0, 2123, 2667,
	0, 0, 1251, 0, 0, 1541, 5758, 2113, 2114, 2115,
	0, 0, 0, 968, 6050, 0, 2107, 2108, 2109, 2110,
	2111, 2112, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 0, 0, 0, 0, 0, 0, 1982, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 2134,
	1542, 0, 2104, 0, 0, 0, 2116, 2117, 2118, 0,
	0, 1545, 0, 0, 0, 968, 0, 0, 2659, 0,
	968, 2660, 0, 885, 1542, 2665, 0, 2657, 0, 0,
	0, 0, 2662, 2666, 2661, 1545, 2663, 0, 0, 0,
	2664, 2127, 2128, 2658, 3704, 0, 1547, 1546, 0, 0,
	2667, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 4505, 0,
	1547, 1546, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 1516, 0, 0, 0,
	0, 0, 0, 1537, 0, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 835, 0, 0, 0, 1537, 835, 835,
	0, 0, 0, 1550, 0, 835, 835, 1659, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 1702, 0, 0, 0, 2134, 1550, 0, 2104,
	835, 0, 0, 2116, 2117, 2118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2659, 0, 0, 2660, 0,
	6278, 0, 2665, 0, 2657, 0, 0, 0, 0, 2662,
	2666, 2661, 0, 2663, 0, 835, 0, 2664, 2127, 2128,
	2658, 0, 0, 835, 0, 0, 835, 2667, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 835, 835,
	0, 0, 835, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2123,
	835, 0, 1833, 0, 0, 0, 0, 0, 2113, 2114,
	2115, 0, 0, 0, 0, 0, 0, 2107, 2108, 2109,
	2110, 2111, 2112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 1089, 0, 0, 0, 836, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2123, 0, 0, 0, 0, 0, 0, 0,
	835, 2113, 2114, 2115, 0, 0, 0, 0, 0, 0,
	2107, 2108, 2109, 2110, 2111, 2112, 1982, 0, 0, 0,
	4589, 4590, 787, 0, 787, 787, 787, 0, 0, 787,
	787, 787, 0, 0, 787, 0, 835, 4599, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	1950, 0, 0, 2123, 835, 0, 1958, 1959, 0, 835,
	0, 0, 2113, 2114, 2115, 0, 0, 0, 0, 5721,
	0, 2107, 2108, 2109, 2110, 2111, 2112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 2134, 0, 0, 2104,
	0, 0, 0, 2116, 2117, 2118, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 2659, 0, 0, 2660, 0,
	0, 0, 2665, 968, 2657, 0, 0, 968, 0, 2662,
	2666, 2661, 0, 2663, 0, 0, 5284, 2664, 2127, 2128,
	2658, 4653, 0, 0, 0, 0, 0, 2667, 0, 0,
	0, 0, 0, 0, 2123, 0, 968, 0, 0, 0,
	0, 0, 1089, 2113, 2114, 2115, 0, 0, 968, 0,
	5695, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 970, 0, 0, 0, 0,
	0, 0, 0, 1089, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 885, 0, 1013, 970, 0, 0, 0,
	1013, 0, 1013, 0, 0, 0, 0, 0, 0, 970,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 2715, 1013,
	1013, 1013, 0, 0, 0, 0, 970, 970, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 835, 835, 835, 0,
	0, 2754, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 835, 0, 0, 835, 835, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	2113, 2114, 2115, 835, 0, 0, 0, 5673, 0, 2107,
	2108, 2109, 2110, 2111, 2112, 2134, 0, 0, 2104, 0,
	835, 835, 2116, 2117, 2118, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 2659, 835, 835, 2660, 0, 0,
	2882, 2665, 0, 2657, 1982, 0, 0, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658,
	0, 0, 0, 0, 0, 2134, 2667, 0, 2104, 0,
	835, 0, 2116, 2117, 2118, 1089, 0, 0, 0, 0,
	0, 0, 0, 0, 2659, 0, 0, 2660, 0, 0,
	0, 2665, 0, 2657, 0, 0, 0, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658,
	0, 0, 0, 1535, 0, 0, 2667, 2964, 1536, 0,
	0, 0, 1544, 0, 0, 4898, 0, 835, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 4917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 2134, 3065, 0,
	2104, 3067, 0, 0, 2116, 2117, 2118, 0, 0, 0,
	0, 0, 0, 1543, 0, 0, 2659, 0, 0, 2660,
	0, 968, 968, 2665, 0, 2657, 0, 0, 0, 0,
	2662, 2666, 2661, 0, 2663, 0, 0, 0, 2664, 2127,
	2128, 2658, 0, 0, 1548, 835, 0, 0, 2667, 0,
	0, 835, 0, 0, 0, 3102, 0, 835, 0, 0,
	0, 2123, 835, 0, 835, 0, 0, 3110, 3111, 0,
	2113, 2114, 2115, 0, 0, 0, 0, 835, 0, 2107,
	2108, 2109, 2110, 2111, 2112, 0, 0, 1534, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 1532, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 2724, 0, 1538, 0, 835, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 2763, 0, 0, 1533, 0, 1540,
	0, 2773, 0, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 3177, 1646, 0, 3180, 0, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	787, 787, 1089, 0, 0, 787, 787, 0, 787, 787,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	1541, 0, 0, 0, 970, 0, 0, 970, 0, 0,
	0, 0, 835, 0, 970, 1982, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 1670, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 968, 835, 835,
	0, 0, 0, 0, 0, 1542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 1545, 0, 0, 0,
	0, 1648, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 1089, 0, 1089, 1089, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1529,
	0, 1547, 1546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 835, 835, 835, 0, 835, 0, 0, 0, 0,
	2123, 0, 0, 0, 835, 1982, 0, 0, 0, 2113,
	2114, 2115, 0, 0, 0, 0, 5651, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 0, 2763, 0, 0, 1637,
	0, 0, 1089, 835, 0, 1982, 0, 0, 0, 137,
	0, 0, 0, 136, 138, 0, 0, 0, 1537, 0,
	2123, 1647, 1982, 186, 0, 0, 0, 0, 968, 2113,
	2114, 2115, 0, 835, 0, 0, 5509, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 0, 0, 0, 1550, 0,
	183, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 1643, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 1640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 0, 135, 0,
	0, 5305, 0, 0, 0, 0, 181, 2763, 1645, 3115,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1636, 0,
	0, 0, 0, 0, 0, 835, 0, 835, 835, 1671,
	1651, 0, 2123, 835, 0, 5349, 0, 0, 0, 0,
	0, 2113, 2114, 2115, 0, 0, 0, 0, 5492, 0,
	2107, 2108, 2109, 2110, 2111, 2112, 0, 0, 144, 0,
	0, 0, 1668, 0, 0, 143, 0, 0, 1638, 835,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 176, 1644, 0, 0, 0, 0, 159, 0, 164,
	157, 970, 0, 173, 0, 146, 0, 0, 1641, 0,
	0, 835, 0, 0, 0, 1639, 0, 0, 970, 1649,
	0, 0, 835, 0, 970, 835, 166, 161, 0, 0,
	0, 0, 970, 970, 835, 835, 160, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	165, 153, 0, 0, 0, 0, 1642, 162, 968, 0,
	970, 0, 0, 0, 0, 331, 0, 151, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 970, 141,
	0, 835, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1535, 0, 0, 167, 170, 1536, 0, 0,
	171, 1544, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 835, 835, 0, 0,
	835, 0, 0, 0, 0, 169, 0, 0, 5452, 0,
	0, 1013, 0, 0, 0, 1013, 1013, 968, 0, 0,
	835, 0, 0, 0, 0, 150, 0, 970, 0, 835,
	0, 835, 0, 1984, 0, 0, 0, 140, 0, 0,
	0, 139, 158, 3729, 149, 0, 0, 0, 143, 0,
	0, 0, 152, 0, 147, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 1543, 0, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 145, 0, 0, 0, 835, 0, 0,
	0, 0, 2134, 0, 0, 2104, 0, 0, 835, 2116,
	2117, 2118, 0, 1548, 0, 0, 0, 0, 0, 172,
	835, 2659, 0, 0, 2660, 0, 0, 0, 2665, 168,
	2657, 0, 154, 0, 0, 2662, 2666, 2661, 0, 2663,
	0, 0, 0, 2664, 2127, 2128, 2658, 0, 0, 0,
	835, 0, 0, 2667, 0, 0, 1534, 0, 0, 2134,
	0, 969, 2104, 835, 0, 0, 2116, 2117, 2118, 0,
	0, 1089, 0, 969, 969, 187, 0, 0, 2659, 0,
	0, 2660, 835, 1538, 1982, 2665, 0, 2657, 180, 0,
	0, 0, 2662, 2666, 2661, 969, 2663, 0, 0, 0,
	2664, 2127, 2128, 2658, 0, 0, 0, 0, 969, 969,
	2667, 0, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 0, 0, 1539, 0, 0, 0, 0, 0,
	0, 0, 970, 835, 835, 969, 969, 969, 0, 0,
	0, 1984, 0, 1984, 0, 0, 0, 0, 1982, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 835, 835, 0, 0, 1541,
	0, 970, 969, 0, 0, 0, 1982, 5246, 0, 0,
	0, 0, 0, 0, 5678, 0, 0, 0, 0, 0,
	0, 3548, 0, 2134, 0, 0, 2104, 0, 0, 0,
	2116, 2117, 2118, 0, 0, 0, 5693, 5694, 0, 0,
	0, 3562, 2659, 0, 1542, 2660, 0, 0, 0, 2665,
	0, 2657, 0, 3579, 0, 1545, 2662, 2666, 2661, 0,
	2663, 3590, 0, 0, 2664, 2127, 2128, 2658, 0, 0,
	0, 0, 0, 0, 2667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3728, 0,
	1547, 1546, 0, 0, 3636, 3637, 3638, 0, 0, 0,
	0, 0, 3642, 0, 3643, 0, 0, 0, 0, 0,
	0, 0, 0, 3653, 0, 0, 0, 0, 0, 0,
	0, 3664, 0, 3668, 3669, 3670, 3671, 0, 0, 3678,
	0, 3680, 3683, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3706, 3707, 0, 0, 0,
	3712, 3713, 0, 3714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 3724, 3725,
	3726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3744, 3745, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 1536, 0, 970, 1550, 1544, 3757,
	3758, 0, 0, 3760, 3761, 0, 3763, 0, 0, 0,
	3765, 0, 0, 0, 0, 0, 3770, 3771, 0, 0,
	3773, 0, 0, 3777, 0, 3778, 0, 0, 0, 3781,
	0, 3783, 0, 0, 0, 0, 0, 3784, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3795, 3796, 3797, 0,
	1559, 0, 0, 0, 0, 3809, 0, 3810, 0, 0,
	3813, 0, 0, 0, 0, 0, 3815, 0, 3816, 0,
	0, 3819, 0, 3821, 0, 0, 0, 0, 3823, 1543,
	0, 0, 0, 0, 1013, 1013, 0, 1013, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 970, 3838, 970,
	970, 970, 970, 0, 0, 3841, 0, 0, 0, 3843,
	1548, 3847, 0, 0, 0, 0, 0, 0, 3864, 3865,
	0, 0, 0, 0, 0, 0, 3874, 2123, 0, 0,
	0, 3882, 0, 0, 0, 0, 2113, 2114, 2115, 0,
	0, 0, 3895, 5483, 0, 2107, 2108, 2109, 2110, 2111,
	2112, 0, 0, 1534, 1013, 1013, 1013, 0, 0, 5927,
	5928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	1538, 0, 0, 2134, 2123, 3932, 2104, 3934, 0, 0,
	2116, 2117, 2118, 2113, 2114, 2115, 0, 0, 0, 0,
	1066, 1066, 2107, 2108, 2109, 2110, 2111, 2112, 0, 2665,
	0, 2657, 0, 0, 0, 1540, 2662, 2666, 2661, 0,
	2663, 1539, 0, 969, 2664, 2127, 2128, 2658, 0, 0,
	0, 0, 0, 969, 2667, 0, 969, 0, 0, 0,
	0, 0, 0, 969, 0, 2134, 969, 0, 2104, 0,
	0, 0, 2116, 2117, 2118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2659, 0, 1541, 2660, 0, 0,
	0, 2665, 0, 2657, 0, 0, 0, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658,
	0, 0, 0, 0, 0, 969, 2667, 0, 5221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 6052, 0,
	0, 1542, 0, 4019, 0, 0, 3687, 0, 2123, 0,
	0, 0, 1545, 0, 0, 0, 0, 2113, 2114, 2115,
	0, 0, 0, 0, 5223, 0, 2107, 2108, 2109, 2110,
	2111, 2112, 0, 0, 0, 0, 2134, 1535, 0, 2104,
	0, 0, 1536, 2116, 2117, 2118, 1544, 1547, 1546, 0,
	0, 0, 3746, 0, 0, 2659, 0, 0, 2660, 0,
	0, 0, 2665, 0, 2657, 0, 0, 0, 3759, 2662,
	2666, 2661, 3762, 2663, 3764, 0, 0, 2664, 2127, 2128,
	2658, 0, 0, 0, 0, 0, 0, 2667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3782, 0, 1984,
	0, 0, 0, 0, 0, 0, 0, 3785, 1559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 1537, 0, 0, 3801, 0, 0,
	0, 0, 0, 0, 0, 3811, 0, 1543, 0, 0,
	0, 0, 3814, 0, 0, 0, 3817, 0, 0, 3820,
	0, 0, 3822, 2134, 1550, 5220, 2104, 0, 0, 0,
	2116, 2117, 2118, 3828, 1341, 0, 0, 0, 1548, 0,
	0, 962, 2659, 0, 0, 2660, 0, 962, 0, 2665,
	0, 2657, 0, 0, 5219, 3842, 2662, 2666, 2661, 3848,
	2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0, 0,
	0, 0, 0, 0, 2667, 3878, 0, 0, 0, 6211,
	0, 1534, 0, 0, 0, 0, 0, 2134, 0, 0,
	2104, 0, 0, 0, 2116, 2117, 2118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2659, 0, 1538, 2660,
	0, 0, 0, 2665, 0, 2657, 0, 0, 0, 1438,
	2662, 2666, 2661, 0, 2663, 0, 0, 0, 2664, 2127,
	2128, 2658, 0, 0, 0, 0, 0, 0, 2667, 0,
	5215, 0, 0, 1540, 0, 979, 979, 0, 0, 1539,
	969, 0, 0, 0, 0, 4277, 0, 3951, 4281, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 3962, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 969, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1541, 0, 0, 4323, 0, 0,
	6277, 3962, 0, 0, 0, 819, 0, 0, 0, 969,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 4365, 0, 969, 0, 0,
	0, 0, 0, 4373, 0, 4373, 0, 0, 0, 1542,
	0, 4382, 0, 0, 0, 0, 0, 0, 2123, 0,
	1545, 0, 0, 0, 0, 0, 0, 2113, 2114, 2115,
	0, 0, 0, 0, 0, 0, 2107, 2108, 2109, 2110,
	2111, 2112, 0, 279, 0, 0, 0, 0, 292, 0,
	0, 0, 291, 3711, 0, 1547, 1546, 0, 0, 0,
	979, 0, 0, 0, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	2123, 4451, 1983, 0, 289, 0, 0, 0, 0, 2113,
	2114, 2115, 0, 0, 4468, 4469, 4470, 4471, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1159, 1160,
	1162, 1166, 1537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4500, 4501, 4502, 0, 0, 4507, 4508, 4509, 4510, 0,
	0, 0, 1550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	285, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	2113, 2114, 2115, 0, 0, 0, 0, 0, 0, 2107,
	2108, 2109, 2110, 2111, 2112, 0, 297, 0, 0, 0,
	0, 0, 0, 4531, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 1066, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 4560, 0, 0, 0, 0, 303, 0, 0,
	4562, 0, 0, 0, 0, 296, 0, 282, 204, 0,
	0, 969, 0, 0, 0, 235, 0, 0, 0, 0,
	1983, 0, 1983, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 231, 0, 0, 0, 208, 2123, 0,
	0, 0, 0, 969, 0, 0, 228, 2113, 2114, 2115,
	969, 0, 0, 0, 0, 1066, 2107, 2108, 2109, 2110,
	2111, 2112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 1984, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 4613, 0, 0,
	0, 0, 2123, 0, 0, 271, 283, 4617, 305, 0,
	0, 2113, 2114, 2115, 0, 0, 0, 0, 1984, 0,
	2107, 2108, 2109, 2110, 2111, 2112, 0, 290, 0, 0,
	284, 0, 0, 309, 0, 306, 0, 0, 0, 0,
	293, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 1984, 1859, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 281, 0, 0, 4650, 4651, 221,
	287, 0, 0, 0, 4655, 300, 1066, 217, 0, 280,
	0, 310, 0, 0, 0, 275, 970, 0, 0, 0,
	1984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 278, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 218, 0, 969, 0, 0, 970, 0,
	0, 212, 970, 0, 970, 0, 1066, 1066, 0, 213,
	970, 0, 0, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1174, 0, 1177, 970, 0, 0,
	0, 0, 0, 1179, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	970, 0, 0, 0, 0, 0, 1984, 970, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 970, 0, 0, 970,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 4532, 0, 970, 0, 0, 0, 0, 0, 0,
	220, 970, 0, 0, 0, 0, 969, 970, 969, 969,
	969, 969, 223, 0, 0, 970, 0, 0, 0, 970,
	0, 828, 0, 0, 1166, 0, 0, 0, 0, 0,
	4561, 227, 1984, 0, 0, 970, 0, 0, 0, 205,
	0, 0, 0, 1013, 0, 1013, 1013, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 219, 0, 230, 0, 229, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 209,
	0, 0, 0, 0, 0, 0, 234, 4868, 233, 4598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1066, 970, 0, 0,
	0, 0, 0, 0, 970, 0, 1066, 0, 0, 0,
	0, 970, 0, 0, 4373, 0, 0, 225, 0, 0,
	0, 4897, 0, 0, 0, 2763, 0, 0, 0, 0,
	0, 0, 1312, 1312, 0, 1984, 0, 0, 0, 2134,
	4627, 970, 2104, 0, 0, 0, 2116, 2117, 2118, 0,
	0, 0, 0, 0, 0, 4643, 0, 0, 2659, 0,
	0, 2660, 0, 0, 0, 2665, 0, 2657, 0, 0,
	0, 0, 2662, 2666, 2661, 0, 2663, 0, 0, 0,
	2664, 2127, 2128, 2658, 0, 0, 0, 0, 0, 0,
	2667, 0, 0, 1066, 0, 0, 4373, 0, 0, 0,
	0, 0, 0, 0, 1013, 0, 1013, 1013, 0, 0,
	0, 2134, 4967, 4968, 2104, 0, 0, 0, 2116, 2117,
	2118, 0, 0, 1066, 0, 0, 0, 0, 0, 0,
	2659, 0, 0, 2660, 0, 0, 4987, 2665, 0, 2657,
	0, 0, 0, 0, 2662, 2666, 2661, 0, 2663, 0,
	0, 0, 2664, 2127, 2128, 2658, 5017, 0, 0, 0,
	0, 0, 2667, 0, 0, 5019, 0, 0, 0, 0,
	0, 0, 0, 0, 5021, 5022, 5023, 5024, 0, 0,
	5027, 5028, 0, 0, 5031, 5032, 5033, 5034, 5035, 5036,
	1066, 0, 0, 0, 0, 0, 0, 0, 1983, 0,
	0, 0, 0, 0, 5048, 0, 0, 0, 0, 0,
	0, 0, 5052, 0, 5053, 0, 0, 0, 5055, 0,
	0, 0, 1166, 0, 0, 0, 0, 1535, 1842, 0,
	1166, 1166, 1536, 1857, 0, 0, 1544, 5083, 0, 0,
	0, 0, 5088, 5089, 0, 0, 0, 5090, 5091, 0,
	0, 0, 0, 0, 5095, 5096, 5097, 5098, 0, 5100,
	5101, 5102, 5103, 0, 0, 0, 0, 5110, 0, 0,
	0, 0, 0, 0, 0, 0, 1166, 1066, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1984, 0, 0, 0, 0, 0, 1984, 2880, 0,
	5133, 0, 5134, 0, 0, 0, 0, 0, 0, 0,
	0, 5140, 0, 0, 0, 0, 1066, 0, 0, 1066,
	0, 0, 0, 0, 0, 0, 0, 1543, 1066, 1941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2134, 0, 0, 2104, 0, 0, 0, 2116,
	2117, 2118, 0, 0, 0, 1166, 0, 0, 1548, 0,
	0, 2659, 0, 0, 2660, 0, 0, 0, 2665, 0,
	2657, 0, 0, 0, 0, 2662, 2666, 2661, 0, 2663,
	0, 0, 0, 2664, 2127, 2128, 2658, 0, 0, 0,
	0, 0, 0, 2667, 0, 0, 0, 970, 0, 0,
	0, 1534, 0, 0, 0, 4896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2601, 2603, 2604, 0, 0, 0, 1538, 0,
	0, 0, 0, 0, 0, 0, 1984, 0, 0, 0,
	0, 0, 0, 1974, 0, 0, 0, 2064, 0, 0,
	0, 0, 0, 970, 970, 2080, 0, 2087, 0, 0,
	2763, 0, 0, 1540, 2098, 0, 0, 0, 0, 1539,
	0, 0, 0, 970, 970, 2580, 2581, 2582, 2583, 2584,
	0, 0, 0, 970, 0, 2134, 2589, 1066, 2104, 1066,
	0, 0, 2116, 2117, 2118, 0, 0, 4795, 0, 787,
	0, 0, 0, 0, 2659, 0, 0, 2660, 0, 0,
	2607, 2665, 0, 2657, 1541, 0, 0, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658,
	0, 0, 0, 0, 0, 0, 2667, 0, 0, 0,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 2113, 2114, 2115, 0, 0, 0, 1542,
	5206, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0, 0,
	1545, 0, 0, 0, 1984, 1984, 1984, 0, 0, 0,
	2760, 0, 0, 0, 0, 0, 0, 0, 0, 3047,
	0, 0, 0, 5049, 292, 0, 0, 2788, 0, 0,
	0, 0, 0, 2879, 0, 1547, 1546, 0, 0, 0,
	0, 0, 295, 0, 0, 5357, 2123, 0, 0, 0,
	0, 0, 0, 0, 0, 2113, 2114, 2115, 0, 1066,
	0, 0, 5198, 0, 2107, 2108, 2109, 2110, 2111, 2112,
	0, 0, 0, 0, 2134, 5099, 0, 2104, 0, 0,
	5104, 2116, 2117, 2118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2659, 0, 0, 2660, 0, 0, 0,
	2665, 970, 2657, 0, 0, 0, 0, 2662, 2666, 2661,
	0, 2663, 1537, 0, 970, 2664, 2127, 2128, 2658, 0,
	0, 0, 0, 0, 0, 2667, 0, 0, 0, 0,
	0, 0, 3962, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 1550, 0, 0, 5414, 0, 0, 0, 5416,
	0, 301, 0, 0, 0, 0, 3043, 5419, 5420, 5421,
	5422, 5423, 0, 0, 5426, 5427, 5428, 5429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5433, 5434, 0,
	5436, 0, 297, 0, 0, 0, 0, 0, 970, 0,
	5444, 0, 0, 298, 2986, 0, 0, 2991, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 970, 970, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 3045, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 1983, 0, 303, 0, 0, 0, 0, 5461, 5462,
	5463, 296, 0, 3046, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 5471, 0,
	0, 0, 0, 0, 1273, 0, 0, 1983, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 2123, 0, 0,
	0, 0, 0, 0, 0, 970, 2113, 2114, 2115, 0,
	0, 970, 0, 5054, 0, 2107, 2108, 2109, 2110, 2111,
	2112, 1983, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5497, 0, 0, 969, 0, 0, 0, 1983,
	0, 271, 3048, 0, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 3128, 0, 3049, 0, 0, 0,
	0, 306, 0, 0, 0, 5539, 293, 0, 0, 307,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 969, 0, 0,
	1277, 969, 0, 969, 0, 0, 1278, 0, 0, 969,
	0, 300, 0, 0, 0, 3050, 0, 0, 0, 0,
	2123, 3051, 5603, 0, 0, 0, 969, 0, 5611, 2113,
	2114, 2115, 0, 0, 0, 0, 969, 294, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 0, 0, 0, 969, 969,
	0, 0, 0, 0, 4373, 1983, 969, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 5656, 3044,
	0, 969, 0, 5659, 0, 969, 0, 0, 969, 5665,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 1984, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1983, 5701, 5702, 969, 0, 0, 0, 5707, 0,
	0, 0, 0, 0, 5709, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1974, 1974, 1974, 0, 0, 0, 5435, 0, 5722, 5723,
	0, 0, 0, 0, 0, 0, 0, 0, 5445, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 2113, 2114,
	2115, 0, 5736, 0, 0, 4980, 0, 2107, 2108, 2109,
	2110, 2111, 2112, 0, 0, 2134, 0, 0, 2104, 0,
	0, 0, 2116, 2117, 2118, 0, 969, 0, 0, 0,
	0, 0, 0, 969, 2659, 0, 0, 2660, 0, 1317,
	969, 2665, 0, 2657, 0, 970, 0, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658,
	0, 0, 0, 0, 1983, 0, 2667, 0, 0, 0,
	969, 3962, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 2580,
	2581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 1312, 970, 970, 0, 3287, 3288, 3289,
	3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299,
	3300, 3301, 3302, 0, 3308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1984, 0, 1984, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 2134,
	0, 0, 2104, 0, 0, 0, 2116, 2117, 2118, 0,
	0, 0, 4373, 0, 0, 0, 0, 1066, 2659, 0,
	0, 2660, 0, 0, 0, 2665, 0, 2657, 0, 0,
	5880, 0, 2662, 2666, 2661, 1984, 2663, 0, 0, 0,
	2664, 2127, 2128, 2658, 0, 0, 0, 0, 0, 0,
	2667, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 5914, 0,
	2134, 5917, 0, 2104, 0, 0, 0, 2116, 2117, 2118,
	0, 0, 0, 0, 1066, 1066, 0, 0, 1984, 2659,
	0, 0, 2660, 1066, 0, 0, 2665, 0, 2657, 0,
	0, 0, 0, 2662, 2666, 2661, 0, 2663, 0, 0,
	0, 2664, 2127, 2128, 2658, 970, 0, 0, 0, 0,
	970, 2667, 0, 0, 0, 2134, 0, 0, 2104, 0,
	0, 0, 2116, 2117, 2118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2659, 0, 0, 2660, 0, 0,
	1983, 2665, 0, 2657, 0, 0, 1983, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 4722, 2664, 2127, 2128, 2658,
	0, 0, 970, 0, 0, 0, 2667, 0, 0, 0,
	0, 2134, 0, 0, 2104, 1984, 0, 0, 2116, 2117,
	2118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2659, 0, 0, 2660, 0, 0, 0, 2665, 0, 2657,
	0, 3962, 3962, 0, 2662, 2666, 2661, 0, 2663, 0,
	0, 0, 2664, 2127, 2128, 2658, 0, 0, 0, 0,
	0, 0, 2667, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 2134, 6056, 0, 2104, 1066, 0, 0, 2116,
	2117, 2118, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 2659, 0, 0, 2660, 0, 0, 0, 2665, 0,
	2657, 0, 6076, 6077, 0, 2662, 2666, 2661, 0, 2663,
	0, 0, 0, 2664, 2127, 2128, 2658, 0, 0, 0,
	0, 0, 0, 2667, 0, 1983, 0, 0, 0, 0,
	0, 0, 2134, 0, 0, 2104, 0, 0, 0, 2116,
	2117, 2118, 969, 969, 4186, 0, 0, 0, 0, 0,
	0, 2659, 0, 0, 2660, 0, 0, 1066, 2665, 0,
	2657, 0, 969, 969, 0, 2662, 2666, 2661, 0, 2663,
	0, 0, 969, 2664, 2127, 2128, 2658, 0, 0, 0,
	2123, 0, 0, 2667, 0, 2134, 0, 0, 2104, 2113,
	2114, 2115, 2116, 2117, 2118, 3385, 4956, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 2659, 0, 0, 2660, 0, 0,
	0, 2665, 0, 2657, 0, 0, 0, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658,
	0, 6182, 0, 0, 0, 0, 2667, 0, 4176, 0,
	0, 0, 0, 0, 6192, 0, 0, 0, 0, 1066,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1974, 1983, 1983, 1983, 0, 0, 6208, 0,
	0, 0, 3367, 3369, 0, 0, 0, 0, 0, 3375,
	0, 3386, 3389, 0, 3400, 3401, 3406, 3409, 0, 0,
	0, 0, 0, 3417, 0, 0, 1984, 3421, 3427, 3369,
	3369, 3434, 3369, 0, 3369, 3369, 3369, 0, 0, 0,
	0, 0, 0, 0, 0, 3449, 0, 0, 0, 3300,
	3301, 3302, 3308, 970, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 2113, 2114, 2115, 0, 0, 0, 0,
	4735, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 3634, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 6272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 970, 0, 2123, 0, 970, 0, 0,
	0, 0, 0, 0, 2113, 2114, 2115, 0, 0, 0,
	0, 0, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0,
	3610, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 970, 0,
	0, 1066, 0, 0, 0, 0, 0, 0, 0, 0,
	2123, 0, 0, 0, 0, 0, 969, 969, 969, 2113,
	2114, 2115, 0, 0, 0, 0, 4716, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 0, 0, 0, 1166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 0, 969, 0, 2123, 0, 0, 0,
	0, 0, 1066, 0, 0, 2113, 2114, 2115, 0, 969,
	0, 970, 4399, 0, 2107, 2108, 2109, 2110, 2111, 2112,
	1066, 0, 1160, 0, 969, 0, 0, 0, 0, 0,
	969, 0, 0, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1535, 0, 0, 0, 0, 1536, 0,
	0, 0, 1544, 6396, 0, 0, 0, 2123, 0, 0,
	0, 3775, 0, 0, 0, 1066, 2113, 2114, 2115, 0,
	0, 1066, 0, 4204, 0, 2107, 2108, 2109, 2110, 2111,
	2112, 0, 0, 0, 0, 3866, 0, 0, 3870, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2874, 0, 0, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 2113, 2114, 2115, 0,
	0, 0, 0, 0, 0, 2107, 2108, 2109, 2110, 2111,
	2112, 0, 0, 1543, 1984, 0, 3962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2123, 0, 0, 0, 1548, 0, 0, 0, 0, 2113,
	2114, 2115, 1166, 0, 0, 0, 0, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 0, 2134, 0, 0, 2104,
	0, 0, 0, 2116, 2117, 2118, 0, 0, 4171, 0,
	0, 0, 0, 0, 0, 2659, 0, 1534, 2660, 0,
	0, 0, 2665, 0, 2657, 0, 0, 1013, 0, 2662,
	2666, 2661, 1983, 2663, 0, 0, 0, 2664, 2127, 2128,
	2658, 0, 0, 0, 1538, 0, 0, 2667, 0, 0,
	0, 0, 0, 1066, 1066, 0, 1066, 0, 0, 3998,
	3998, 3998, 3998, 3998, 3998, 3998, 3998, 0, 0, 0,
	0, 3998, 3998, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 970, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 1066,
	0, 0, 0, 0, 0, 0, 2134, 0, 0, 2104,
	0, 970, 970, 2116, 2117, 2118, 0, 0, 0, 0,
	1541, 0, 0, 0, 0, 2659, 0, 0, 2660, 0,
	0, 0, 2665, 0, 2657, 0, 0, 0, 0, 2662,
	2666, 2661, 0, 2663, 0, 0, 0, 2664, 2127, 2128,
	2658, 0, 0, 0, 0, 0, 0, 2667, 0, 0,
	0, 0, 0, 1974, 969, 1558, 0, 0, 4034, 4035,
	0, 4037, 0, 0, 0, 2087, 1545, 0, 0, 0,
	1066, 0, 0, 2589, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 2098, 1646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 2873,
	0, 1547, 1546, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 969, 969, 0, 1066, 0, 970, 0,
	0, 0, 0, 4067, 4068, 2134, 0, 0, 2104, 4074,
	0, 0, 2116, 2117, 2118, 0, 0, 4137, 0, 0,
	0, 0, 1358, 0, 2659, 0, 0, 2660, 1632, 0,
	0, 2665, 0, 2657, 1983, 0, 1983, 0, 2662, 2666,
	2661, 0, 2663, 0, 0, 4103, 2664, 2127, 2128, 2658,
	0, 0, 2119, 0, 0, 0, 2667, 0, 1537, 4115,
	0, 0, 1648, 0, 0, 0, 0, 0, 0, 0,
	4132, 0, 0, 0, 0, 1984, 0, 0, 0, 0,
	0, 1066, 0, 0, 1983, 0, 0, 0, 1550, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 3406, 3406, 3406, 0, 4264, 0, 4264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4187, 1535,
	0, 0, 969, 0, 1536, 0, 0, 0, 1544, 0,
	0, 0, 0, 0, 4297, 1166, 0, 0, 0, 0,
	4209, 0, 0, 0, 0, 0, 0, 1983, 0, 0,
	1637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4223, 0, 0, 0, 0,
	4227, 0, 1647, 0, 969, 4351, 0, 0, 2119, 969,
	0, 0, 4362, 0, 0, 1984, 0, 0, 0, 0,
	1583, 1166, 1166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1643, 0, 4389, 1984, 0, 0, 0, 1543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 1984, 0, 0, 1640, 1066, 4144, 970, 0,
	0, 0, 0, 0, 1983, 0, 0, 0, 0, 0,
	1548, 0, 0, 0, 1068, 1068, 0, 0, 0, 1645,
	0, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	2113, 2114, 2115, 0, 0, 0, 0, 0, 0, 2107,
	2108, 2109, 2110, 2111, 2112, 0, 0, 0, 0, 1636,
	0, 0, 0, 1534, 0, 0, 0, 0, 1067, 1067,
	1633, 1651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4483, 0, 0, 0, 0,
	1538, 0, 4409, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 0, 143, 0, 0, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1644, 4443, 1540, 0, 0, 0, 0,
	0, 1539, 0, 0, 0, 0, 0, 1066, 0, 1641,
	0, 0, 0, 0, 0, 0, 1639, 0, 1066, 1066,
	1649, 2123, 1066, 0, 0, 0, 0, 0, 0, 0,
	2113, 2114, 2115, 0, 0, 0, 0, 0, 0, 2107,
	2108, 2109, 2110, 2111, 2112, 0, 1541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1642, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 0, 0, 0,
	2134, 0, 0, 2104, 0, 0, 0, 2116, 2117, 2118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2659,
	0, 1542, 2660, 0, 1013, 1013, 2665, 0, 2657, 0,
	0, 0, 1545, 2662, 2666, 2661, 0, 2663, 0, 0,
	0, 2664, 2127, 2128, 2658, 0, 0, 0, 970, 4526,
	0, 2667, 4579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 1582, 1166, 1547, 1546, 0,
	0, 1013, 0, 0, 0, 0, 970, 0, 0, 0,
	2123, 0, 0, 0, 0, 0, 0, 0, 0, 2113,
	2114, 2115, 0, 0, 0, 1983, 0, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 0, 2134, 0, 0, 2104, 0,
	0, 0, 2116, 2117, 2118, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 2659, 0, 0, 2660, 0, 0,
	0, 2665, 0, 2657, 0, 0, 0, 970, 2662, 2666,
	2661, 0, 2663, 0, 1537, 0, 2664, 2127, 2128, 2658,
	0, 0, 0, 0, 2134, 0, 2667, 2104, 0, 0,
	0, 2116, 2117, 2118, 0, 0, 0, 0, 0, 0,
	1081, 1081, 0, 2659, 1550, 0, 2660, 0, 1066, 0,
	2665, 0, 2657, 0, 0, 0, 0, 2662, 2666, 2661,
	0, 2663, 0, 0, 0, 2664, 2127, 2128, 2658, 0,
	3998, 0, 969, 0, 0, 2667, 969, 0, 2134, 0,
	0, 2104, 0, 0, 0, 2116, 2117, 2118, 0, 0,
	1535, 1568, 0, 0, 0, 1536, 0, 2659, 0, 1544,
	2660, 0, 0, 0, 2665, 969, 2657, 0, 0, 0,
	0, 2662, 2666, 2661, 0, 2663, 0, 969, 0, 2664,
	2127, 2128, 2658, 0, 0, 0, 0, 0, 0, 2667,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2119, 0, 0, 0, 1570, 0,
	0, 3723, 0, 0, 1984, 0, 4719, 0, 1974, 0,
	0, 0, 1974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1543, 0, 0, 0, 0, 4685, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 4693, 4694, 0, 0, 4697,
	0, 0, 0, 4700, 0, 0, 0, 0, 0, 0,
	0, 1548, 0, 0, 4705, 0, 0, 0, 1984, 0,
	0, 0, 0, 0, 0, 0, 0, 4711, 0, 0,
	0, 0, 0, 0, 2119, 1013, 1013, 0, 0, 0,
	0, 0, 0, 0, 4721, 0, 1984, 0, 0, 0,
	2119, 4726, 0, 0, 1534, 3369, 3369, 2119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2119, 4737,
	0, 1569, 0, 0, 4739, 0, 0, 0, 0, 0,
	0, 1538, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 4758, 4759,
	4760, 0, 0, 0, 0, 0, 0, 0, 4766, 0,
	0, 0, 0, 0, 0, 3417, 1540, 0, 0, 0,
	0, 0, 1539, 1983, 3367, 0, 0, 0, 3369, 0,
	0, 0, 0, 0, 0, 0, 4792, 4793, 4794, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4351, 1571, 4131, 2123, 0, 1541, 0, 0,
	1066, 0, 0, 0, 2113, 2114, 2115, 0, 1066, 0,
	0, 0, 0, 2107, 2108, 2109, 2110, 2111, 2112, 0,
	3369, 1068, 4837, 1572, 0, 0, 1573, 0, 0, 0,
	1574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1567, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1575, 1545, 4872, 0, 0, 0, 0, 0,
	0, 0, 0, 4877, 4878, 1067, 4931, 4932, 0, 4934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3721, 0, 1547, 1546,
	1578, 969, 0, 0, 0, 0, 4966, 0, 0, 1068,
	2123, 0, 0, 0, 4351, 0, 0, 1576, 0, 2113,
	2114, 2115, 0, 0, 0, 0, 3344, 0, 2107, 2108,
	2109, 2110, 2111, 2112, 1577, 0, 0, 0, 0, 0,
	969, 969, 0, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 2113, 2114,
	2115, 1579, 0, 3240, 0, 1537, 0, 2107, 2108, 2109,
	2110, 2111, 2112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 1550, 0, 0, 0, 0,
	0, 0, 0, 2123, 0, 0, 0, 0, 0, 0,
	0, 0, 2113, 2114, 2115, 0, 0, 0, 5079, 0,
	1068, 2107, 2108, 2109, 2110, 2111, 2112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1066, 1066, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 5111, 0, 0, 1080, 1080, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5142, 0,
	1068, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1976, 0, 1983, 0, 0, 3998, 0, 3998,
	0, 0, 0, 5164, 5164, 5164, 5164, 5164, 5164, 5164,
	0, 5164, 5164, 0, 1067, 1067, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 1265, 0, 0, 0, 0, 292, 0, 0, 0,
	2119, 2119, 2119, 2119, 2119, 0, 0, 0, 0, 2119,
	0, 0, 0, 5201, 295, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 2119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3396, 0, 0, 1266, 0, 0, 1357,
	0, 0, 0, 0, 1983, 0, 0, 0, 5178, 0,
	0, 0, 0, 1066, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5187, 5188, 0, 0, 0,
	0, 5192, 5193, 0, 1983, 0, 0, 0, 5196, 5197,
	0, 0, 0, 0, 0, 5200, 0, 0, 0, 0,
	0, 1983, 5202, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 2098, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 301, 0, 0, 0, 0, 1263, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 0, 0, 5235,
	0, 5238, 0, 0, 0, 298, 0, 0, 5321, 0,
	0, 0, 0, 0, 1067, 0, 1275, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 1081, 5257, 0, 0,
	1262, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 5350, 0, 296, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1271, 0, 0, 0, 0, 0, 2896, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1081, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 1268, 0, 305, 0, 0, 0,
	0, 0, 0, 0, 1068, 1065, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 1269, 0,
	0, 309, 5369, 306, 0, 0, 0, 969, 293, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 1067, 0,
	1066, 0, 1277, 0, 0, 969, 5398, 0, 1278, 0,
	0, 0, 0, 300, 0, 0, 0, 1270, 0, 310,
	0, 0, 0, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5456, 5457, 294,
	0, 1068, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 1272, 0, 1259, 0, 0, 0, 0, 0, 0,
	1068, 3998, 3998, 1068, 3998, 1067, 3998, 1067, 0, 0,
	0, 1066, 1068, 1066, 1066, 0, 5447, 5164, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5487, 0, 0, 0, 0, 0, 0, 0, 5489,
	5490, 5491, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 5583, 0, 0, 0, 0, 0,
	0, 0, 0, 1983, 0, 5498, 0, 0, 0, 5501,
	5502, 5503, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 1068, 0, 0, 3369, 0, 0, 1976,
	1976, 1976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5543, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1983, 0, 5560,
	0, 1080, 0, 0, 0, 1067, 292, 1067, 0, 4351,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 1983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2119, 2119, 2119,
	2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
	2119, 2119, 2119, 0, 0, 0, 0, 0, 2119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3396, 3396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 1081,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3998, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 2119, 0, 2119,
	0, 0, 0, 301, 0, 2119, 1081, 0, 3226, 1081,
	0, 0, 0, 0, 0, 0, 2119, 1067, 1081, 2119,
	0, 0, 4159, 0, 3396, 3396, 3396, 0, 0, 0,
	2119, 2119, 0, 0, 297, 0, 2119, 0, 0, 2119,
	0, 0, 0, 0, 0, 298, 0, 2119, 0, 0,
	0, 2119, 0, 0, 0, 0, 1275, 2119, 0, 0,
	0, 0, 0, 0, 2119, 0, 0, 0, 0, 0,
	3225, 0, 1080, 1080, 0, 0, 0, 302, 5744, 2119,
	0, 0, 0, 5813, 0, 303, 1166, 0, 0, 0,
	0, 0, 0, 296, 0, 3227, 0, 3417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5771, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 5803, 0, 0, 0, 0, 0,
	0, 0, 1535, 1568, 0, 0, 0, 1536, 0, 0,
	0, 1544, 0, 0, 0, 0, 0, 1081, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 3229, 0, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 3230, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 293, 0,
	1570, 307, 0, 1565, 0, 0, 0, 0, 0, 0,
	2119, 0, 1065, 0, 0, 5875, 0, 299, 0, 1066,
	0, 0, 1277, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 1543, 300, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3224, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 5908, 294,
	0, 0, 1080, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5924, 5995, 5996, 5997, 5998, 0, 0, 0, 0, 1081,
	1065, 0, 0, 3222, 0, 0, 1166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1534, 0, 0, 2589,
	0, 0, 0, 0, 5949, 5949, 5949, 0, 5952, 0,
	0, 0, 0, 1569, 0, 0, 0, 3369, 0, 0,
	0, 0, 0, 1538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 0, 0, 1539, 2119, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 1571, 0, 0, 0, 1541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1976, 0, 0, 0, 1572, 1080, 0, 1573, 0,
	0, 0, 1574, 0, 0, 0, 0, 0, 0, 0,
	0, 1976, 0, 1976, 1567, 1424, 0, 0, 0, 0,
	0, 6075, 0, 0, 1575, 1545, 0, 1976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1065, 0, 0, 0, 0, 0, 5744, 0,
	0, 0, 0, 0, 0, 0, 5949, 0, 1563, 0,
	1547, 1546, 1578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1576,
	0, 0, 0, 1080, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1577, 0, 2896, 0,
	0, 0, 0, 0, 0, 0, 0, 2896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 6156, 1080, 0, 0, 0, 0,
	0, 0, 0, 1579, 1080, 0, 0, 1537, 6165, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1550, 0, 0,
	0, 0, 0, 0, 0, 1166, 0, 0, 1068, 0,
	0, 0, 0, 0, 2119, 2119, 0, 2119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 5744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2119, 2119, 0,
	3396, 3396, 1067, 0, 2119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4159, 4159, 1067, 0, 0, 0, 0,
	0, 1065, 0, 2119, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 2119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2896, 3753,
	0, 0, 2119, 0, 0, 0, 0, 3756, 0, 0,
	0, 1082, 1082, 1080, 0, 1080, 0, 3396, 3396, 3396,
	3396, 3396, 3396, 3396, 3396, 3396, 3396, 3396, 3396, 3396,
	0, 3396, 0, 4159, 4159, 4159, 0, 0, 0, 0,
	0, 0, 1067, 1067, 0, 0, 0, 0, 0, 0,
	5949, 1067, 6349, 0, 269, 0, 0, 2119, 0, 0,
	0, 6290, 0, 0, 0, 0, 0, 2601, 1065, 0,
	0, 0, 0, 0, 0, 0, 251, 0, 0, 2119,
	0, 236, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 0, 0, 2119, 0, 0, 0, 2119, 1065, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6349, 263, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 6349, 0, 0, 0, 5201, 0,
	0, 0, 0, 0, 1068, 1080, 0, 0, 0, 0,
	1068, 0, 0, 0, 1081, 1065, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	3396, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 244,
	0, 1068, 0, 0, 1081, 0, 0, 0, 0, 0,
	245, 0, 1065, 0, 1065, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 1354, 1081, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 0, 2119,
	0, 0, 261, 0, 0, 1067, 0, 0, 0, 0,
	268, 1065, 0, 0, 1065, 0, 0, 0, 241, 0,
	248, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2119, 0, 0, 0, 0, 0, 0,
	0, 237, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 1068, 0, 270, 0, 0, 0,
	0, 0, 1976, 0, 1081, 1081, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 1067, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 0, 0, 0, 0, 0, 2119, 0, 271, 253,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 255, 0, 0, 259, 0, 256, 0,
	0, 0, 0, 238, 0, 0, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 265, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 1065, 264, 1065, 0, 0, 0, 266, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 1062, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2119, 0, 0, 0, 0,
	0, 0, 0, 2119, 2119, 0, 0, 2119, 4159, 4159,
	2119, 1083, 0, 0, 0, 2119, 0, 0, 0, 1067,
	0, 2119, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 2119, 0, 0, 0, 0, 2119, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 1068, 2119, 0, 2119,
	0, 4159, 4159, 4159, 4159, 4159, 4159, 4159, 4159, 4159,
	4159, 4159, 4159, 4159, 3753, 0, 0, 4159, 2119, 2119,
	2119, 0, 0, 0, 0, 0, 2119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1067, 1083, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2119, 2119, 2119, 0, 0, 0, 1067, 3753,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 1081,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2119, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 1082, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2119, 0, 0, 0, 0, 2119, 2119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 4159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2896, 3753, 0,
	3753, 1083, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 1067, 0, 1067, 0, 0, 0, 0, 0,
	0, 0, 1068, 1068, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 1080, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1081, 0, 0, 0, 1067, 1067, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1068, 0, 0, 1082, 1082, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	1068, 0, 0, 0, 0, 0, 1067, 0, 2119, 0,
	0, 0, 0, 0, 0, 1083, 0, 2119, 2119, 0,
	0, 0, 2119, 2119, 0, 0, 2119, 2119, 0, 0,
	2119, 0, 2119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 3396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 1080, 0, 0, 2119, 0, 0, 2119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 2119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1976, 0, 0,
	0, 1976, 1083, 0, 1083, 0, 0, 0, 3396, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 1080, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 1081, 0, 1081, 1082, 0, 1065,
	0, 0, 0, 0, 2119, 0, 0, 1082, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2119,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 1062,
	0, 0, 0, 0, 0, 1068, 0, 0, 1081, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 2119, 0,
	0, 0, 0, 0, 0, 1080, 1080, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 2119, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 1083, 0, 1083, 0, 0, 2119, 0, 2119,
	2119, 2119, 0, 0, 0, 0, 0, 0, 2119, 4159,
	3396, 2119, 2119, 2119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1065,
	1065, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2896, 0, 2119, 0, 0, 0, 0, 0, 0,
	0, 0, 2896, 2896, 0, 0, 3753, 0, 4159, 3396,
	2119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1067, 1067, 0, 0,
	1067, 1081, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	1082, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 1062, 1062,
	1082, 0, 0, 0, 0, 0, 0, 0, 3753, 1082,
	0, 0, 0, 0, 0, 1065, 0, 0, 1080, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 2119, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 4159,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 2119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3753, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3396, 0, 0, 4159,
	0, 0, 0, 2119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 1082, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 2119, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 1081, 1081,
	0, 0, 1081, 0, 0, 0, 0, 0, 2119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2119, 0, 0, 0, 0, 1080,
	1080, 0, 1080, 993, 996, 998, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 2119,
	0, 0, 2119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1151, 1081, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 1080, 2119, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5319,
	0, 0, 1080, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 2896, 0, 0, 0, 0, 1065, 1081, 3396,
	3396, 0, 0, 3396, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 1062,
	0, 1062, 0, 0, 0, 0, 2119, 0, 1067, 0,
	0, 0, 0, 0, 0, 2119, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	1065, 1062, 0, 0, 0, 0, 1065, 1080, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 4159, 4159, 0, 4159, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2119, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 1080, 0, 0, 1068, 1068, 0, 0, 1062,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1065,
	1081, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	1083, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 1213, 0, 0, 1081, 0,
	0, 0, 0, 0, 1219, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 1080, 0, 0, 1080, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 3753, 0, 0,
	0, 1065, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1082, 1430, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 1081, 0,
	0, 1067, 0, 0, 0, 0, 1456, 1459, 0, 1461,
	1080, 0, 0, 3753, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	1081, 0, 1083, 1502, 0, 1082, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1585, 0, 0, 0,
	0, 1081, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1082, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5319, 1081, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 1067, 0,
	0, 1082, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1065, 0, 1083, 1065, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 1068, 1068, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1067,
	0, 1067, 1067, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1065,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1067, 0,
	1083, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	1082, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2769, 0, 0, 1062,
	1081, 2774, 0, 0, 0, 0, 2786, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2834, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 1083,
	0, 1083, 0, 0, 0, 0, 2867, 0, 0, 0,
	2871, 0, 0, 0, 0, 0, 1062, 1062, 0, 0,
	0, 0, 1082, 0, 0, 1062, 0, 1080, 1080, 0,
	0, 1081, 0, 1081, 1081, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2963, 1082, 0, 0, 0, 0, 0, 0,
	2786, 2786, 2786, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2997, 2998, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1082, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 1062, 0,
	0, 1083, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3119, 0, 1062,
	0, 0, 0, 1068, 0, 0, 1083, 3126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1151, 1151, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1976, 0, 0, 0,
	0, 0, 0, 1213, 1213, 0, 1213, 0, 3176, 0,
	0, 3178, 3179, 0, 1082, 1082, 0, 1082, 0, 0,
	0, 1062, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1082,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 1065, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 3281, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1083, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1081,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 1080, 0, 1080,
	1080, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1083,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1065, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 1062, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1082, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 1065, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 1062, 0, 0, 0, 0, 3549, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3647, 3648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3685, 0, 1083, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 3709, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 3734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 1062, 0, 0, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4064, 0, 0, 0,
	0, 0, 1082, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 4270, 0, 4273,
	0, 0, 4278, 0, 0, 0, 0, 0, 4285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 1083, 1083,
	1082, 0, 0, 0, 0, 0, 4326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 4378, 4379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 2786, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4551, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 1082, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4686, 4687, 0, 0, 0, 0, 4692,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 4894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2769, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 0, 1062, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5183, 5184, 5185, 5186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 1738, 820, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 359, 840, 0, 407, 444, 659, 0, 0,
	504, 0, 557, 561, 0, 650, 0, 0, 5820, 0,
	415, 1850, 845, 0, 851, 0, 857, 1849, 626, 0,
	847, 848, 853, 347, 735, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 1851, 849, 846, 850, 856, 844, 854, 841,
	852, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 838, 843, 0, 859, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 5326, 492,
	549, 706, 0, 0, 414, 5329, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 656, 839, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	842, 1062, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 679, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 689, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 0, 607, 608, 858, 610,
	611, 612, 613, 614, 0, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5821,
	0, 0, 1739, 1740, 5819, 0, 0, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5902, 1986, 342, 1992, 359, 840, 2002,
	407, 444, 659, 1989, 2034, 504, 2039, 557, 561, 2063,
	650, 1996, 1999, 2009, 2012, 415, 2017, 845, 2025, 851,
	2035, 857, 2054, 626, 2060, 847, 848, 853, 347, 735,
	649, 721, 2048, 1994, 2052, 511, 2045, 2021, 2061, 2038,
	2050, 2031, 2036, 355, 2023, 2024, 2028, 2037, 849, 846,
	850, 856, 844, 854, 841, 852, 2058, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 1993, 2011, 460,
	630, 395, 484, 2044, 375, 517, 2057, 606, 481, 2051,
	589, 609, 2013, 501, 380, 540, 596, 597, 838, 843,
	2001, 859, 1988, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 2019, 492, 549, 706, 1991, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 674,
	678, 676, 672, 669, 673, 670, 671, 675, 431, 668,
	0, 643, 652, 686, 666, 694, 651, 691, 661, 406,
	690, 655, 654, 700, 681, 682, 636, 696, 667, 665,
	658, 657, 653, 2059, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 1987, 344, 346, 348,
	349, 350, 837, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 656, 839, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 2003, 2004, 2005, 842, 2006, 2007, 2008, 387,
	388, 389, 390, 391, 392, 2010, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 2014, 410, 412, 2015,
	413, 416, 2016, 417, 418, 419, 420, 421, 422, 423,
	424, 660, 425, 2018, 426, 427, 429, 2020, 432, 433,
	434, 435, 436, 2022, 437, 662, 663, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 2026, 457, 458, 459, 461, 2027,
	462, 463, 466, 467, 468, 469, 2029, 471, 679, 2030,
	472, 473, 474, 2032, 2033, 475, 476, 477, 478, 479,
	480, 483, 680, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 684,
	500, 502, 503, 685, 687, 688, 855, 518, 519, 520,
	521, 522, 523, 524, 526, 2041, 528, 529, 530, 689,
	531, 532, 533, 534, 2042, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 2043, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 692, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 2046, 583, 693,
	584, 585, 586, 587, 588, 2047, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 695, 604, 605,
	2049, 607, 608, 858, 610, 611, 612, 613, 614, 2053,
	734, 615, 697, 616, 698, 617, 618, 619, 620, 621,
	622, 623, 625, 2055, 2056, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 2062, 642, 644,
	646, 725, 701, 702, 703, 704, 705, 707, 708, 709,
	710, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 2040, 1990, 1995, 1997, 1998, 2000, 0, 0,
	0, 0, 0, 0, 0, 0, 2137, 0, 0, 0,
	0, 0, 0, 2134, 0, 0, 2104, 0, 0, 1979,
	2116, 2117, 2118, 2148, 2150, 2132, 2177, 2198, 0, 2249,
	2295, 2265, 2120, 2382, 2388, 2121, 2449, 2453, 0, 2129,
	2179, 2105, 2229, 2244, 2259, 2271, 2124, 2130, 2122, 2386,
	2125, 2530, 2541, 2561, 2126, 2127, 2128, 2106, 2522, 2579,
	2348, 2507, 2159, 0, 2135, 2473, 0, 0, 2396, 2511,
	0, 0, 2173, 0, 0, 0, 0, 2321, 2310, 2344,
	2457, 2282, 2402, 2210, 2369, 2547, 2439, 2358, 2553, 2471,
	2172, 2238, 2222, 2274, 2339, 2480, 2155, 2239, 2314, 2545,
	2234, 2360, 0, 2201, 2404, 2546, 2509, 2357, 2520, 2490,
	2515, 2245, 2383, 2208, 2430, 2497, 2498, 2168, 2281, 2203,
	2556, 2153, 2213, 2221, 2391, 2192, 2399, 2577, 2331, 2464,
	2414, 2412, 0, 2371, 2440, 2572, 0, 0, 2258, 0,
	2252, 2390, 2564, 2199, 2538, 2433, 2395, 2333, 2467, 2502,
	2254, 2235, 2236, 2292, 2432, 2277, 2211, 2552, 2328, 2332,
	2330, 2326, 2323, 2327, 2324, 2325, 2329, 2279, 2322, 0,
	0, 2169, 2389, 2317, 2487, 2167, 2436, 2275, 2248, 0,
	0, 0, 2554, 2368, 2370, 0, 2523, 2318, 2316, 2227,
	2226, 2170, 2555, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2149, 2151, 2157, 2152, 2156, 2158, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2174, 2175, 2176, 2178, 2181,
	2182, 2183, 2185, 2186, 2187, 2188, 2189, 2190, 2193, 2194,
	2195, 2196, 2197, 2200, 2202, 2204, 2205, 2206, 2207, 2209,
	2212, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2223, 2224,
	0, 2225, 2228, 2230, 2231, 2232, 2233, 2237, 2240, 2241,
	2242, 2243, 2246, 2247, 2250, 2251, 2253, 2255, 2256, 2257,
	2260, 0, 2261, 2262, 2263, 2264, 2266, 2267, 2268, 2269,
	2270, 2272, 0, 0, 2273, 2276, 2278, 2280, 2283, 2284,
	2285, 2286, 0, 2287, 2288, 2289, 2290, 2291, 2293, 0,
	2294, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304,
	2305, 2306, 2307, 2308, 2309, 2312, 2313, 2315, 0, 2319,
	2320, 2335, 2336, 2337, 2338, 2340, 2342, 2343, 2341, 2345,
	2346, 2347, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
	2359, 2361, 2362, 0, 2363, 2364, 0, 2365, 2366, 2367,
	2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381,
	2384, 2385, 2387, 2401, 2403, 0, 2405, 2406, 2407, 2408,
	2409, 2410, 2411, 2413, 2415, 2416, 2417, 2418, 2419, 2420,
	2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2431,
	2434, 2435, 2437, 2438, 2441, 2442, 2443, 2444, 2445, 2446,
	2447, 2448, 2450, 2451, 2452, 2454, 2455, 2456, 2458, 2459,
	2460, 2461, 2462, 2463, 2465, 2466, 2468, 2469, 2470, 0,
	2472, 2474, 2475, 2476, 2477, 2478, 2479, 2482, 2481, 2483,
	2484, 2485, 2486, 2488, 2489, 2491, 2492, 2493, 2494, 2495,
	2496, 2499, 2500, 2501, 2503, 2504, 2505, 2506, 2508, 2510,
	2512, 2514, 2513, 2516, 2517, 2518, 2519, 2521, 2524, 2525,
	2526, 2527, 2528, 2529, 2531, 2532, 2533, 2534, 2535, 2536,
	2537, 2539, 0, 2540, 2542, 2543, 2544, 2548, 2549, 2550,
	2551, 2557, 2558, 2559, 2560, 2562, 0, 0, 2563, 2565,
	2566, 2567, 2568, 2569, 2570, 2571, 2573, 2574, 2575, 2576,
	0, 2578, 2311, 2400, 2394, 2334, 2392, 2393, 2397, 2398,
	0, 0, 2154, 2171, 2180, 2184, 2191, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 0, 2113, 2114, 2115,
	0, 0, 0, 0, 0, 0, 2107, 2108, 2109, 2110,
	2111, 2112, 1981, 0, 6348, 820, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 1986,
	342, 1992, 359, 840, 2002, 407, 444, 659, 1989, 2034,
	504, 2039, 557, 561, 2063, 650, 1996, 1999, 2009, 2012,
	415, 2017, 845, 2025, 851, 2035, 857, 2054, 626, 2060,
	847, 848, 853, 347, 735, 649, 721, 2048, 1994, 2052,
	511, 2045, 2021, 2061, 2038, 2050, 2031, 2036, 355, 2023,
	2024, 2028, 2037, 849, 846, 850, 856, 844, 854, 841,
	852, 2058, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 1993, 2011, 460, 630, 395, 484, 2044, 375,
	517, 2057, 606, 481, 2051, 589, 609, 2013, 501, 380,
	540, 596, 597, 838, 843, 2001, 859, 1988, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 2019, 492,
	549, 706, 1991, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 2059, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 1987, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 656, 839, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 2003, 2004, 2005,
	842, 2006, 2007, 2008, 387, 388, 389, 390, 391, 392,
	2010, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 2014, 410, 412, 2015, 413, 416, 2016, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 425, 2018, 426,
	427, 429, 2020, 432, 433, 434, 435, 436, 2022, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 2026,
	457, 458, 459, 461, 2027, 462, 463, 466, 467, 468,
	469, 2029, 471, 679, 2030, 472, 473, 474, 2032, 2033,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	2041, 528, 529, 530, 689, 531, 532, 533, 534, 2042,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	2043, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 2046, 583, 693, 584, 585, 586, 587, 588,
	2047, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 2049, 607, 608, 858, 610,
	611, 612, 613, 614, 2053, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 2055, 2056,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 2062, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 2040, 1990, 1995,
	1997, 1998, 2000, 1981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1986, 342, 1992, 359, 840, 2002, 407, 444, 659, 1989,
	2034, 504, 2039, 557, 561, 2063, 650, 1996, 1999, 2009,
	2012, 415, 2017, 845, 2025, 851, 2035, 857, 2054, 626,
	2060, 847, 848, 853, 347, 735, 649, 721, 2048, 1994,
	2052, 511, 2045, 2021, 2061, 2038, 2050, 2031, 2036, 355,
	2023, 2024, 2028, 2037, 849, 846, 850, 856, 844, 854,
	841, 852, 2058, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 1993, 2011, 460, 630, 395, 484, 2044,
	375, 517, 2057, 606, 481, 2051, 589, 609, 2013, 501,
	380, 540, 596, 597, 838, 843, 2001, 859, 1988, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 2019,
	492, 549, 706, 1991, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 2059,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 1987, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 839, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 2003, 2004,
	2005, 842, 2006, 2007, 2008, 387, 388, 389, 390, 391,
	392, 2010, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 2014, 410, 412, 2015, 413, 416, 2016, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 2018,
	426, 427, 429, 2020, 432, 433, 434, 435, 436, 2022,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	2026, 457, 458, 459, 461, 2027, 462, 463, 466, 467,
	468, 469, 2029, 471, 679, 2030, 472, 473, 474, 2032,
	2033, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 2041, 528, 529, 530, 689, 531, 532, 533, 534,
	2042, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 2043, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 2046, 583, 693, 584, 585, 586, 587,
	588, 2047, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 2049, 607, 608, 858,
	610, 611, 612, 613, 614, 2053, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 2055,
	2056, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 2062, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 2040, 1990,
	1995, 1997, 1998, 2000, 1088, 0, 1738, 820, 0, 0,
	0, 936, 806, 0, 0, 0, 0, 0, 947, 948,
	949, 1986, 342, 1992, 359, 840, 2002, 407, 444, 0,
	1989, 2034, 504, 2039, 557, 561, 2063, 0, 1996, 1999,
	2009, 2012, 415, 2017, 845, 2025, 851, 2035, 857, 2054,
	626, 2060, 847, 848, 853, 347, 1085, 649, 721, 2048,
	1994, 2052, 4353, 2045, 2021, 2061, 2038, 2050, 2031, 2036,
	355, 2023, 2024, 2028, 2037, 849, 846, 850, 856, 844,
	854, 841, 852, 2058, 548, 482, 0, 575, 354, 399,
	386, 428, 470, 582, 1993, 2011, 460, 630, 395, 484,
	2044, 375, 517, 2057, 606, 481, 2051, 589, 609, 2013,
	501, 380, 540, 596, 597, 838, 843, 2001, 859, 1988,
	384, 385, 506, 367, 514, 0, 0, 569, 527, 525,
	2019, 492, 549, 0, 1991, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 1087, 0, 643, 1090,
	1078, 1070, 1071, 1072, 1073, 1074, 1075, 0, 1092, 1093,
	1094, 1095, 1096, 636, 1084, 1086, 1069, 1076, 1077, 1079,
	2059, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 1987, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 0, 839, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 2003,
	2004, 2005, 842, 2006, 2007, 2008, 387, 388, 389, 390,
	391, 392, 2010, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 2014, 410, 412, 2015, 413, 416, 2016,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 425,
	2018, 426, 427, 429, 2020, 432, 433, 434, 435, 436,
	2022, 437, 0, 0, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 2026, 457, 458, 459, 461, 2027, 462, 463, 466,
	467, 468, 469, 2029, 471, 0, 2030, 472, 473, 474,
	2032, 2033, 475, 476, 477, 478, 479, 480, 483, 0,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 4352, 0, 500, 502, 503,
	0, 0, 0, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 2041, 528, 529, 530, 0, 531, 532, 533,
	534, 2042, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 2043, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 0, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 2046, 583, 2898, 584, 585, 586,
	587, 588, 2047, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 0, 604, 605, 2049, 607, 608,
	858, 610, 611, 612, 613, 614, 2053, 734, 615, 0,
	616, 0, 617, 618, 619, 620, 621, 622, 623, 625,
	2055, 2056, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 2062, 642, 644, 646, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 648,
	0, 515, 509, 465, 507, 508, 512, 513, 516, 2040,
	1990, 1995, 1997, 1998, 2000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 945, 946, 0, 0,
	0, 0, 0, 0, 4354, 4355, 940, 941, 942, 943,
	1088, 0, 1738, 820, 0, 0, 0, 936, 806, 0,
	0, 0, 0, 0, 947, 948, 949, 1986, 342, 1992,
	359, 840, 2002, 407, 444, 0, 1989, 2034, 504, 2039,
	557, 561, 2063, 0, 1996, 1999, 2009, 2012, 415, 2017,
	845, 2025, 851, 2035, 857, 2054, 626, 2060, 847, 848,
	853, 347, 1085, 649, 721, 2048, 1994, 2052, 4353, 2045,
	2021, 2061, 2038, 2050, 2031, 2036, 355, 2023, 2024, 2028,
	2037, 849, 846, 850, 856, 844, 854, 841, 852, 2058,
	548, 482, 0, 575, 354, 399, 386, 428, 470, 582,
	1993, 2011, 460, 630, 395, 484, 2044, 375, 517, 2057,
	606, 481, 2051, 589, 609, 2013, 501, 380, 540, 596,
	597, 838, 843, 2001, 859, 1988, 384, 385, 506, 367,
	514, 0, 0, 569, 527, 525, 2019, 492, 549, 0,
	1991, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 1087, 0, 643, 1090, 1078, 1070, 1071, 1072,
	1073, 1074, 1075, 0, 1092, 1093, 1094, 1095, 1096, 636,
	1084, 1086, 1069, 1076, 1077, 1079, 2059, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 1987,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	0, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 2003, 2004, 2005, 842, 2006,
	2007, 2008, 387, 388, 389, 390, 391, 392, 2010, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 2014,
	410, 412, 2015, 413, 416, 2016, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 425, 2018, 426, 427, 429,
	2020, 432, 433, 434, 435, 436, 2022, 437, 0, 0,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 2026, 457, 458,
	459, 461, 2027, 462, 463, 466, 467, 468, 469, 2029,
	471, 0, 2030, 472, 473, 474, 2032, 2033, 475, 476,
	477, 478, 479, 480, 483, 0, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 5073, 0, 500, 502, 503, 0, 0, 0, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 2041, 528,
	529, 530, 0, 531, 532, 533, 534, 2042, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 2043, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 0, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	2046, 583, 2898, 584, 585, 586, 587, 588, 2047, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	0, 604, 605, 2049, 607, 608, 858, 610, 611, 612,
	613, 614, 2053, 734, 615, 0, 616, 0, 617, 618,
	619, 620, 621, 622, 623, 625, 2055, 2056, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	2062, 642, 644, 646, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 648, 0, 515, 509, 465,
	507, 508, 512, 513, 516, 2040, 1990, 1995, 1997, 1998,
	2000, 0, 0, 0, 0, 0, 0, 0, 0, 1981,
	0, 944, 945, 946, 0, 0, 0, 0, 0, 0,
	4354, 4355, 940, 941, 942, 943, 1986, 342, 1992, 359,
	840, 2002, 3699, 444, 659, 1989, 2034, 504, 2039, 557,
	561, 2063, 650, 1996, 1999, 2009, 2012, 415, 2017, 845,
	2025, 851, 2035, 857, 2054, 626, 2060, 847, 848, 853,
	347, 735, 649, 721, 2048, 1994, 2052, 511, 2045, 2021,
	2061, 2038, 2050, 2031, 2036, 355, 2023, 2024, 2028, 2037,
	849, 846, 850, 856, 844, 854, 841, 852, 2058, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 3697, 1993,
	2011, 460, 630, 395, 484, 2044, 375, 517, 2057, 606,
	481, 2051, 589, 609, 2013, 501, 380, 540, 596, 597,
	838, 843, 2001, 859, 1988, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 2019, 492, 549, 706, 1991,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 2059, 332, 333, 334, 335,
	336, 3698, 338, 339, 340, 341, 343, 345, 1987, 344,
	346, 348, 349, 350, 837, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	839, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 2003, 2004, 2005, 842, 2006, 2007,
	2008, 387, 388, 389, 390, 391, 392, 2010, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 2014, 410,
	412, 2015, 413, 416, 2016, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 2018, 426, 427, 429, 2020,
	432, 433, 434, 435, 436, 2022, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 2026, 457, 458, 459,
	461, 2027, 462, 463, 466, 467, 468, 469, 2029, 471,
	679, 2030, 472, 473, 474, 2032, 2033, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 855, 518,
	519, 520, 521, 522, 523, 524, 526, 2041, 528, 529,
	530, 689, 531, 532, 533, 534, 2042, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 2043, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 2046,
	583, 693, 584, 585, 586, 587, 588, 2047, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 2049, 607, 608, 858, 610, 611, 612, 613,
	614, 2053, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 2055, 2056, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 2062,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 2040, 1990, 1995, 1997, 1998, 2000,
	834, 0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325,
	0, 0, 0, 0, 0, 0, 0, 1971, 342, 0,
	359, 840, 0, 407, 444, 1330, 0, 1318, 504, 0,
	557, 561, 0, 650, 1350, 0, 1322, 1972, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1372,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1331, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401,
	1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 1970, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1384, 1362, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364,
	1365, 1369, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1376, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1385, 1334,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1386, 0, 472, 473, 474, 1366, 1367, 475, 476,
	477, 478, 479, 480, 483, 1399, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1377, 500, 502, 503, 1383, 687, 1378, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1379, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1337, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1370, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1380, 604, 605, 1371, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 1381, 616, 1382, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1321, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1387, 1388, 1391, 1389,
	1390, 1392, 1393, 1403, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1375, 0,
	0, 0, 1319, 0, 0, 834, 0, 1340, 820, 0,
	1345, 1346, 1335, 806, 1325, 0, 0, 1326, 1967, 0,
	1315, 1316, 1968, 342, 0, 359, 840, 0, 407, 444,
	1330, 0, 1318, 504, 0, 557, 561, 186, 650, 1350,
	0, 1322, 0, 415, 1343, 845, 0, 851, 1344, 857,
	1342, 626, 0, 847, 848, 853, 347, 1419, 649, 721,
	0, 0, 0, 1336, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 849, 846, 850, 856,
	844, 854, 841, 852, 0, 548, 482, 1202, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1372, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 838, 843, 0, 859,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1331, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1400, 1402, 1398,
	1394, 1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643,
	1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408,
	1407, 1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409,
	1406, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	837, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1384, 1362, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1376,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1385, 1334, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1386, 0, 472, 473,
	474, 1366, 1367, 475, 476, 477, 478, 479, 480, 483,
	1399, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1377, 500, 502,
	503, 1383, 687, 1378, 855, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1379, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1337, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1370, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1380, 604, 605, 1371, 607,
	608, 858, 610, 611, 612, 613, 614, 0, 734, 615,
	1381, 616, 1382, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1321, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1375, 0, 0, 0, 1319, 0, 187,
	834, 0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325,
	0, 0, 1326, 5939, 0, 1315, 1316, 0, 342, 0,
	359, 840, 0, 407, 444, 1330, 0, 1318, 504, 0,
	557, 561, 186, 650, 1350, 0, 1322, 0, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 1336, 183,
	0, 0, 0, 184, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 1202, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 3426, 375, 517, 1372,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1331, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401,
	1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1384, 1362, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364,
	1365, 1369, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1376, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1385, 1334,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1386, 0, 472, 473, 474, 1366, 1367, 475, 476,
	477, 478, 479, 480, 483, 1399, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1377, 500, 502, 503, 1383, 687, 1378, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1379, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1337, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1370, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1380, 604, 605, 1371, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 1381, 616, 1382, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1321, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1387, 1388, 1391, 1389,
	1390, 1392, 1393, 1403, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1375, 0,
	0, 0, 1319, 0, 187, 834, 0, 1340, 820, 0,
	1345, 1346, 1335, 806, 1325, 0, 0, 1326, 0, 0,
	1315, 1316, 0, 342, 0, 359, 840, 0, 407, 444,
	1330, 0, 1318, 504, 0, 557, 561, 186, 650, 1350,
	0, 1322, 0, 415, 1343, 845, 0, 851, 1344, 857,
	1342, 626, 0, 847, 848, 853, 347, 1419, 649, 721,
	0, 0, 0, 1336, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 849, 846, 850, 856,
	844, 854, 841, 852, 0, 548, 482, 1202, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1372, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 838, 843, 0, 859,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1331, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1400, 1402, 1398,
	1394, 1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643,
	1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408,
	1407, 1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409,
	1406, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	837, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1384, 1362, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1376,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1385, 1334, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1386, 0, 472, 473,
	474, 1366, 1367, 475, 476, 477, 478, 479, 480, 483,
	1399, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1377, 500, 502,
	503, 1383, 687, 1378, 855, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1379, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1337, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1370, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1380, 604, 605, 1371, 607,
	608, 858, 610, 611, 612, 613, 614, 0, 734, 615,
	1381, 616, 1382, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1321, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1375, 0, 0, 0, 1319, 0, 187,
	834, 0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325,
	0, 0, 1326, 0, 0, 1315, 1316, 0, 342, 0,
	359, 840, 0, 407, 444, 1330, 0, 1318, 504, 0,
	557, 561, 0, 650, 1350, 0, 1322, 0, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 1336, 0,
	3407, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1372,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1331, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401,
	1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1384, 1362, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364,
	1365, 1369, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1376, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1385, 1334,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1386, 3403, 472, 473, 474, 1366, 1367, 475, 476,
	477, 478, 479, 480, 483, 1399, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1377, 500, 502, 503, 1383, 687, 1378, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1379, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1337, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1370, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1380, 604, 605, 1371, 607, 608, 858, 610, 611, 612,
	613, 614, 3404, 734, 615, 1381, 616, 1382, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1321, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1387, 1388, 1391, 1389,
	1390, 1392, 1393, 1403, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 3402, 1375, 0,
	0, 0, 1319, 0, 834, 0, 1340, 820, 0, 1345,
	1346, 1335, 806, 1325, 0, 0, 0, 1326, 0, 0,
	1315, 1316, 342, 0, 359, 840, 0, 407, 444, 1330,
	0, 1318, 504, 0, 557, 561, 0, 650, 1350, 0,
	1322, 0, 415, 1343, 845, 0, 851, 1344, 857, 1342,
	626, 0, 847, 848, 853, 347, 1419, 649, 721, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1372, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1331, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1400, 1402, 1398, 1394,
	1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643, 1405,
	1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408, 1407,
	1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409, 1406,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1384, 1362, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1373,
	1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1376, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1385, 1334, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1386, 0, 472, 473, 474,
	1366, 1367, 475, 476, 477, 478, 479, 480, 483, 1399,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1377, 500, 502, 503,
	1383, 687, 1378, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1379, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1337, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1370, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1380, 604, 605, 1371, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 1381,
	616, 1382, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1321, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1375, 0, 0, 0, 1319, 0, 0, 834,
	0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325, 0,
	0, 1326, 0, 0, 1315, 1316, 1313, 342, 0, 359,
	840, 0, 407, 444, 1330, 0, 1318, 504, 0, 557,
	561, 0, 650, 1350, 0, 1322, 0, 415, 1343, 845,
	0, 851, 1344, 857, 1342, 626, 0, 847, 848, 853,
	347, 1419, 649, 721, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	849, 846, 850, 856, 844, 854, 841, 852, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1372, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	838, 843, 0, 859, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1331,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397,
	431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417,
	1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420,
	1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 837, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1384,
	1362, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365,
	1369, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1376, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1385, 1334, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1386, 0, 472, 473, 474, 1366, 1367, 475, 476, 477,
	478, 479, 480, 483, 1399, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1377, 500, 502, 503, 1383, 687, 1378, 855, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1379, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1337, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1370,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1380,
	604, 605, 1371, 607, 608, 858, 610, 611, 612, 613,
	614, 0, 734, 615, 1381, 616, 1382, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1321, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390,
	1392, 1393, 1403, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1375, 0, 0,
	0, 1319, 0, 834, 0, 1340, 820, 0, 1345, 1346,
	1335, 806, 1325, 0, 2596, 3348, 1326, 0, 0, 1315,
	1316, 342, 0, 359, 840, 0, 407, 444, 1330, 0,
	1318, 504, 0, 557, 561, 0, 650, 1350, 0, 1322,
	0, 415, 1343, 845, 0, 851, 1344, 857, 1342, 626,
	0, 847, 848, 853, 347, 1419, 649, 721, 0, 0,
	3309, 1336, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1372, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1331, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395,
	1360, 1361, 1401, 1397, 431, 1396, 0, 643, 1405, 1416,
	1413, 1418, 1404, 1417, 1411, 1075, 690, 1408, 1407, 1421,
	1414, 1415, 636, 1420, 1359, 1412, 1410, 1409, 1406, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1384, 1362, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1373, 1363,
	1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1376, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1385, 1334, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1386, 0, 472, 473, 474, 1366,
	1367, 475, 476, 477, 478, 479, 480, 483, 1399, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1377, 500, 502, 503, 1383,
	687, 1378, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1379, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	1337, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1370, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1380, 604, 605, 1371, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 1381, 616,
	1382, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	1321, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1387,
	1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1375, 0, 0, 0, 1319, 0, 834, 0, 1340,
	820, 0, 1345, 1346, 1335, 806, 1325, 0, 0, 0,
	1326, 0, 0, 1315, 1316, 342, 0, 359, 840, 0,
	407, 444, 1330, 0, 1318, 504, 0, 557, 561, 0,
	650, 1350, 0, 1322, 0, 415, 1343, 845, 0, 851,
	1344, 857, 1342, 626, 0, 847, 848, 853, 347, 1419,
	649, 721, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 849, 846,
	850, 856, 844, 854, 841, 852, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1372, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 838, 843,
	0, 859, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1331, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1400,
	1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431, 1396,
	0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075,
	690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359, 1412,
	1410, 1409, 1406, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 837, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1384, 1362, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1376, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1385, 1334, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1386, 0,
	472, 473, 474, 1366, 1367, 475, 476, 477, 478, 479,
	480, 483, 1399, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 1377,
	500, 502, 503, 1383, 687, 1378, 855, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1379,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 1337, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1370, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1380, 604, 605,
	1371, 607, 608, 858, 610, 611, 612, 613, 614, 0,
	734, 615, 1381, 616, 1382, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 1321, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392, 1393,
	1403, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1375, 0, 0, 0, 1319,
	0, 834, 0, 1340, 820, 0, 1345, 1346, 1335, 806,
	1325, 0, 0, 0, 1326, 4714, 0, 1315, 1316, 342,
	0, 359, 840, 0, 407, 444, 1330, 0, 1318, 504,
	0, 557, 561, 0, 650, 1350, 0, 1322, 0, 415,
	1343, 845, 0, 851, 1344, 857, 1342, 626, 0, 847,
	848, 853, 347, 1419, 649, 721, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	1372, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 1331, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361,
	1401, 1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418,
	1404, 1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415,
	636, 1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 1384, 1362, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 1373, 1363, 1368, 1374,
	1364, 1365, 1369, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 1376, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 1385,
	1334, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 1386, 0, 472, 473, 474, 1366, 1367, 475,
	476, 477, 478, 479, 480, 483, 1399, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 1377, 500, 502, 503, 1383, 687, 1378,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 1379, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 1337, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 1370, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 1380, 604, 605, 1371, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 1381, 616, 1382, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 1321, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 1387, 1388, 1391,
	1389, 1390, 1392, 1393, 1403, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 1375,
	0, 0, 0, 1319, 0, 834, 0, 1340, 820, 0,
	1345, 1346, 1335, 806, 1325, 0, 0, 0, 1326, 4677,
	0, 1315, 1316, 342, 0, 359, 840, 0, 407, 444,
	1330, 0, 1318, 504, 0, 557, 561, 0, 650, 1350,
	0, 1322, 0, 415, 1343, 845, 0, 851, 1344, 857,
	1342, 626, 0, 847, 848, 853, 347, 1419, 649, 721,
	0, 0, 0, 1336, 0, 3407, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 849, 846, 850, 856,
	844, 854, 841, 852, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1372, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 838, 843, 0, 859,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1331, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1400, 1402, 1398,
	1394, 1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643,
	1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408,
	1407, 1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409,
	1406, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	837, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1384, 1362, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1376,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1385, 1334, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1386, 0, 472, 473,
	474, 1366, 1367, 475, 476, 477, 478, 479, 480, 483,
	1399, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1377, 500, 502,
	503, 1383, 687, 1378, 855, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1379, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1337, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1370, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1380, 604, 605, 1371, 607,
	608, 858, 610, 611, 612, 613, 614, 0, 734, 615,
	1381, 616, 1382, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1321, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1375, 0, 0, 0, 1319, 0, 834,
	0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325, 0,
	0, 0, 1326, 0, 0, 1315, 1316, 342, 0, 359,
	840, 0, 407, 444, 1330, 0, 1318, 504, 0, 557,
	561, 0, 650, 1350, 0, 1322, 0, 415, 1343, 845,
	0, 851, 1344, 857, 1342, 626, 0, 847, 848, 853,
	347, 1419, 649, 721, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	849, 846, 850, 856, 844, 854, 841, 852, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1372, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	838, 843, 0, 859, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1331,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397,
	431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417,
	1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420,
	1359, 1412, 1410, 1409, 1406, 4028, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 837, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1384,
	1362, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365,
	1369, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1376, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1385, 1334, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1386, 0, 472, 473, 474, 1366, 1367, 475, 476, 477,
	478, 479, 480, 483, 1399, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1377, 500, 502, 503, 1383, 687, 1378, 855, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1379, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1337, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1370,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1380,
	604, 605, 1371, 607, 608, 858, 610, 611, 612, 613,
	614, 0, 734, 615, 1381, 616, 1382, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1321, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390,
	1392, 1393, 1403, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1375, 0, 0,
	0, 1319, 0, 834, 0, 1340, 820, 0, 1345, 1346,
	1335, 806, 1325, 0, 0, 0, 1326, 0, 0, 1315,
	1316, 342, 0, 359, 840, 0, 407, 444, 1330, 0,
	1318, 504, 0, 557, 561, 0, 650, 1350, 0, 1322,
	0, 415, 1343, 845, 0, 851, 1344, 857, 1342, 626,
	0, 847, 848, 853, 347, 1419, 649, 721, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 3426,
	375, 517, 1372, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1331, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395,
	1360, 1361, 1401, 1397, 431, 1396, 0, 643, 1405, 1416,
	1413, 1418, 1404, 1417, 1411, 1075, 690, 1408, 1407, 1421,
	1414, 1415, 636, 1420, 1359, 1412, 1410, 1409, 1406, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1384, 1362, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1373, 1363,
	1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1376, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1385, 1334, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1386, 0, 472, 473, 474, 1366,
	1367, 475, 476, 477, 478, 479, 480, 483, 1399, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1377, 500, 502, 503, 1383,
	687, 1378, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1379, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	1337, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1370, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1380, 604, 605, 1371, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 1381, 616,
	1382, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	1321, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1387,
	1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1375, 0, 0, 0, 1319, 0, 834, 0, 1340,
	820, 0, 1345, 1346, 1335, 806, 1325, 0, 0, 0,
	1326, 0, 0, 1315, 1316, 342, 0, 359, 840, 0,
	407, 444, 1330, 0, 1318, 504, 0, 557, 561, 0,
	650, 1350, 0, 1322, 0, 415, 1343, 845, 0, 851,
	1344, 857, 1342, 626, 0, 847, 848, 853, 347, 1419,
	649, 721, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 849, 846,
	850, 856, 844, 854, 841, 852, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1372, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 838, 843,
	0, 859, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1331, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1400,
	1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431, 1396,
	0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075,
	690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359, 1412,
	1410, 1409, 1406, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 837, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1384, 1362, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1376, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1385, 1334, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1386, 0,
	472, 473, 474, 1366, 1367, 475, 476, 477, 478, 479,
	480, 483, 1399, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 1377,
	500, 502, 503, 1383, 687, 1378, 855, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1379,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 1337, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1370, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1380, 604, 605,
	1371, 607, 608, 858, 610, 611, 612, 613, 614, 0,
	734, 615, 1381, 616, 1382, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 1321, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392, 1393,
	1403, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1375, 0, 0, 0, 1319,
	0, 0, 834, 0, 1340, 820, 0, 1345, 1346, 1335,
	806, 1325, 0, 0, 1326, 3353, 0, 1315, 1316, 2081,
	342, 0, 359, 840, 0, 407, 444, 1330, 0, 1318,
	504, 0, 557, 561, 0, 650, 1350, 0, 1322, 0,
	415, 1343, 845, 0, 851, 1344, 857, 1342, 626, 0,
	847, 848, 853, 347, 1419, 649, 721, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 849, 846, 850, 856, 844, 854, 841,
	852, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1372, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 838, 843, 0, 859, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1331, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395, 1360,
	1361, 1401, 1397, 431, 1396, 0, 643, 1405, 1416, 1413,
	1418, 1404, 1417, 1411, 1075, 690, 1408, 1407, 1421, 1414,
	1415, 636, 1420, 1359, 1412, 1410, 1409, 1406, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1384, 1362, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1373, 1363, 1368,
	1374, 1364, 1365, 1369, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1376, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1385, 1334, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1386, 0, 472, 473, 474, 1366, 1367,
	475, 476, 477, 478, 479, 480, 483, 1399, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 1377, 500, 502, 503, 1383, 687,
	1378, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1379, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 1337,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1370, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1380, 604, 605, 1371, 607, 608, 858, 610,
	611, 612, 613, 614, 0, 734, 615, 1381, 616, 1382,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 1321,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1387, 1388,
	1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1375, 0, 0, 0, 1319, 0, 834, 0, 1340, 820,
	0, 1345, 1346, 1335, 806, 1325, 0, 0, 0, 1326,
	0, 0, 1315, 1316, 342, 0, 359, 840, 0, 407,
	444, 1330, 0, 1318, 504, 0, 557, 561, 0, 650,
	1350, 0, 1322, 0, 415, 1343, 845, 0, 851, 1344,
	857, 1342, 626, 0, 847, 848, 853, 347, 1419, 649,
	721, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1372, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1331, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1400, 1402,
	1398, 1394, 1395, 1360, 1361, 1401, 1397, 431, 1396, 0,
	643, 1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075, 690,
	1408, 1407, 1421, 1414, 1415, 636, 1420, 1359, 1412, 1410,
	1409, 1406, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1384, 1362, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1376, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1385, 1334, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1386, 0, 472,
	473, 474, 1366, 1367, 475, 476, 477, 478, 479, 480,
	483, 1399, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1377, 500,
	502, 503, 1383, 687, 1378, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1379, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 1337, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1370, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1380, 604, 605, 1371,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 1381, 616, 1382, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 1321, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1375, 0, 0, 0, 1319, 0,
	834, 0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325,
	0, 0, 0, 1326, 0, 0, 1315, 1316, 342, 0,
	359, 840, 0, 407, 444, 1330, 0, 1318, 504, 0,
	557, 561, 0, 650, 1350, 0, 1322, 0, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1372,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 5948, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1331, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401,
	1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1384, 1362, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364,
	1365, 1369, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1376, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1385, 1334,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1386, 0, 472, 473, 474, 1366, 1367, 475, 476,
	477, 478, 479, 480, 483, 1399, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1377, 500, 502, 503, 1383, 687, 1378, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1379, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1337, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1370, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1380, 604, 605, 1371, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 1381, 616, 1382, 617, 618,
	619, 620, 621, 5947, 623, 625, 0, 1321, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1387, 1388, 1391, 1389,
	1390, 1392, 1393, 1403, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1375, 0,
	0, 0, 1319, 0, 834, 0, 1340, 820, 0, 1345,
	1346, 1335, 806, 1325, 0, 0, 0, 1326, 0, 0,
	1315, 1316, 342, 0, 359, 840, 0, 407, 444, 1330,
	0, 1318, 504, 0, 557, 561, 0, 650, 1350, 0,
	1322, 0, 415, 1343, 845, 0, 851, 1344, 857, 1342,
	626, 0, 847, 848, 853, 347, 1419, 649, 721, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1372, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1331, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1400, 1402, 1398, 1394,
	1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643, 1405,
	1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408, 1407,
	1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409, 1406,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1384, 1362, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 5750, 1373,
	1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1376, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1385, 5752, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1386, 0, 472, 473, 474,
	1366, 1367, 475, 476, 477, 478, 479, 480, 483, 1399,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1377, 500, 502, 503,
	1383, 687, 1378, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1379, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 5751, 567,
	568, 1337, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1370, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1380, 604, 605, 1371, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 1381,
	616, 1382, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1321, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1375, 0, 0, 0, 1319, 0, 834, 0,
	1340, 820, 0, 1345, 1346, 1335, 806, 1325, 0, 0,
	0, 5749, 0, 0, 1315, 1316, 342, 0, 359, 840,
	0, 407, 444, 1330, 0, 1318, 504, 0, 557, 561,
	0, 5946, 1350, 0, 1322, 0, 415, 1343, 845, 0,
	851, 1344, 857, 1342, 626, 0, 847, 848, 853, 347,
	1419, 649, 721, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 5948, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1331, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411,
	1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359,
	1412, 1410, 1409, 1406, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 1334, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 1337, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 5947, 623, 625, 0, 1321, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1375, 0, 0, 0,
	1319, 0, 834, 0, 1340, 820, 0, 1345, 1346, 1335,
	806, 1325, 0, 0, 0, 1326, 0, 0, 1315, 1316,
	342, 0, 359, 840, 0, 407, 444, 1330, 0, 1318,
	504, 0, 557, 561, 0, 650, 1350, 0, 1322, 0,
	415, 1343, 845, 0, 851, 1344, 857, 1342, 626, 0,
	847, 848, 853, 347, 1419, 649, 721, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 849, 846, 850, 856, 844, 854, 841,
	852, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1372, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 838, 843, 0, 859, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1331, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395, 1360,
	1361, 1401, 1397, 431, 1396, 0, 643, 1405, 1416, 1413,
	1418, 1404, 1417, 1411, 1075, 690, 1408, 1407, 1421, 1414,
	1415, 636, 1420, 1359, 1412, 1410, 1409, 1406, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1384, 1362, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1373, 1363, 1368,
	1374, 1364, 1365, 1369, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1376, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1385, 1334, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1386, 0, 472, 473, 474, 1366, 1367,
	475, 476, 477, 478, 479, 480, 483, 1399, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 5239, 683, 1377, 500, 502, 503, 1383, 687,
	1378, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1379, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 1337,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1370, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1380, 604, 605, 1371, 607, 608, 858, 610,
	611, 612, 613, 614, 0, 734, 615, 1381, 616, 1382,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 1321,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1387, 1388,
	1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1375, 0, 0, 0, 1319, 0, 834, 0, 1340, 820,
	0, 1345, 1346, 1335, 806, 1325, 0, 0, 0, 1326,
	0, 0, 1315, 1316, 342, 0, 359, 840, 0, 407,
	444, 1330, 0, 1318, 504, 0, 557, 561, 0, 650,
	1350, 0, 1322, 0, 415, 1343, 845, 0, 851, 1344,
	857, 1342, 626, 0, 847, 848, 853, 347, 1419, 649,
	721, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1372, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1331, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1400, 1402,
	1398, 1394, 1395, 1360, 1361, 1401, 1397, 431, 1396, 0,
	643, 1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075, 690,
	1408, 1407, 1421, 1414, 1415, 636, 1420, 1359, 1412, 1410,
	1409, 1406, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1384, 1362, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1376, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1385, 1334, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1386, 0, 472,
	473, 474, 1366, 1367, 475, 476, 477, 478, 479, 480,
	483, 1399, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1377, 500,
	502, 503, 1383, 687, 1378, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1379, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 1337, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1370, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1380, 604, 605, 1371,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 1381, 616, 1382, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 1321, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 5226, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1375, 0, 0, 0, 1319, 0,
	834, 0, 1340, 820, 0, 1345, 1346, 1335, 806, 1325,
	0, 0, 0, 1326, 0, 0, 1315, 1316, 342, 0,
	359, 840, 0, 407, 444, 1330, 0, 1318, 504, 0,
	557, 561, 0, 650, 1350, 0, 1322, 0, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1372,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 4228, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1331, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401,
	1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1384, 1362, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364,
	1365, 1369, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1376, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1385, 1334,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1386, 0, 472, 473, 474, 1366, 1367, 475, 476,
	477, 478, 479, 480, 483, 1399, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1377, 500, 502, 503, 1383, 687, 1378, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1379, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1337, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1370, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1380, 604, 605, 1371, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 1381, 616, 1382, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1321, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1387, 1388, 1391, 1389,
	1390, 1392, 1393, 1403, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1375, 0,
	0, 0, 1319, 0, 834, 0, 3259, 820, 0, 1345,
	1346, 1335, 806, 1325, 0, 0, 0, 1326, 0, 0,
	1315, 1316, 342, 0, 359, 840, 0, 407, 444, 1330,
	0, 1318, 504, 0, 557, 561, 0, 650, 1350, 0,
	1322, 0, 415, 1343, 845, 0, 851, 1344, 857, 1342,
	626, 0, 847, 848, 853, 347, 1419, 649, 721, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1372, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1331, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1400, 1402, 1398, 1394,
	1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643, 1405,
	1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408, 1407,
	1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409, 1406,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1384, 1362, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1373,
	1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1376, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1385, 1334, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1386, 0, 472, 473, 474,
	1366, 1367, 475, 476, 477, 478, 479, 480, 483, 1399,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1377, 500, 502, 503,
	1383, 687, 1378, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1379, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1337, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1370, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1380, 604, 605, 1371, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 1381,
	616, 1382, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1321, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1375, 0, 0, 0, 1319, 0, 834, 0,
	1340, 820, 0, 1345, 1346, 1335, 806, 1325, 0, 0,
	0, 1326, 0, 0, 1315, 1316, 342, 0, 359, 840,
	0, 407, 444, 1330, 0, 1318, 504, 0, 557, 561,
	0, 650, 1350, 0, 1322, 0, 415, 1343, 845, 0,
	851, 1344, 857, 1342, 626, 0, 847, 848, 853, 347,
	1419, 649, 721, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1331, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411,
	1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359,
	1412, 1410, 1409, 1406, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 1334, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 1337, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 1321, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1375, 0, 0, 0,
	1319, 0, 834, 0, 1340, 820, 0, 1345, 1346, 1335,
	806, 1325, 0, 0, 0, 1326, 0, 0, 2089, 2090,
	342, 0, 359, 840, 0, 407, 444, 1330, 0, 0,
	504, 0, 557, 561, 0, 650, 1350, 0, 5559, 0,
	415, 1343, 845, 0, 851, 1344, 857, 1342, 626, 0,
	847, 848, 853, 347, 1419, 649, 721, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 849, 846, 850, 856, 844, 854, 841,
	852, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1372, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 838, 843, 0, 859, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1331, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395, 1360,
	1361, 1401, 1397, 431, 1396, 0, 643, 1405, 1416, 1413,
	1418, 1404, 1417, 1411, 1075, 690, 1408, 1407, 1421, 1414,
	1415, 636, 1420, 1359, 1412, 1410, 1409, 1406, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1384, 1362, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1373, 1363, 1368,
	1374, 1364, 1365, 1369, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1376, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1385, 1334, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1386, 0, 472, 473, 474, 1366, 1367,
	475, 476, 477, 478, 479, 480, 483, 1399, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 1377, 500, 502, 503, 1383, 687,
	1378, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1379, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 3397,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1370, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1380, 604, 605, 1371, 607, 608, 858, 610,
	611, 612, 613, 614, 0, 734, 615, 1381, 616, 1382,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1387, 1388,
	1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1375, 0, 0, 0, 0, 0, 834, 0, 1340, 820,
	0, 1345, 1346, 1335, 806, 1325, 0, 0, 0, 3253,
	0, 0, 3394, 3395, 342, 0, 359, 840, 0, 407,
	444, 1330, 0, 0, 504, 0, 557, 561, 0, 650,
	1350, 0, 0, 0, 415, 1343, 845, 0, 851, 1344,
	857, 1342, 626, 0, 847, 848, 853, 347, 1419, 649,
	721, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1372, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1331, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1400, 1402,
	1398, 1394, 1395, 1360, 1361, 1401, 1397, 431, 1396, 0,
	643, 1405, 1416, 1413, 1418, 1404, 1417, 1411, 1075, 690,
	1408, 1407, 1421, 1414, 1415, 636, 1420, 1359, 1412, 1410,
	1409, 1406, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1384, 1362, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1376, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1385, 1334, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1386, 0, 472,
	473, 474, 1366, 1367, 475, 476, 477, 478, 479, 480,
	483, 1399, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1377, 500,
	502, 503, 1383, 687, 1378, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1379, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 3397, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1370, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1380, 604, 605, 1371,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 1381, 616, 1382, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1375, 0, 0, 0, 0, 0,
	834, 0, 1340, 820, 0, 1345, 1346, 0, 806, 1325,
	0, 0, 0, 3253, 0, 0, 3394, 3395, 342, 0,
	359, 840, 0, 407, 444, 1330, 0, 0, 504, 0,
	557, 561, 0, 650, 1350, 0, 0, 0, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1372,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 3252, 527, 525, 0, 492, 549, 706,
	1331, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401,
	1397, 431, 1396, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1384, 1362, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1373, 1363, 1368, 1374, 1364,
	1365, 1369, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1376, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1385, 1334,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1386, 0, 472, 473, 474, 1366, 1367, 475, 476,
	477, 478, 479, 480, 483, 1399, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1377, 500, 502, 503, 1383, 687, 1378, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1379, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 3251, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1370, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1380, 604, 605, 1371, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 1381, 616, 1382, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1387, 1388, 1391, 1389,
	1390, 1392, 1393, 1403, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1375, 0,
	0, 0, 0, 0, 834, 0, 1340, 820, 0, 1345,
	1346, 1335, 806, 1325, 0, 0, 0, 3253, 0, 0,
	3249, 3250, 342, 0, 359, 840, 0, 407, 444, 1330,
	0, 1318, 504, 0, 557, 561, 0, 0, 1350, 0,
	1322, 0, 415, 1343, 0, 0, 0, 1344, 0, 1342,
	626, 0, 0, 0, 0, 347, 1419, 649, 721, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1372, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 0,
	5948, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1331, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1400, 1402, 1398, 1394,
	1395, 1360, 1361, 1401, 1397, 431, 1396, 0, 643, 1405,
	1416, 1413, 1418, 1404, 1417, 1411, 1075, 690, 1408, 1407,
	1421, 1414, 1415, 636, 1420, 1359, 1412, 1410, 1409, 1406,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1384, 1362, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1373,
	1363, 1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1376, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1385, 1334, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1386, 0, 472, 473, 474,
	1366, 1367, 475, 476, 477, 478, 479, 480, 483, 1399,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1377, 500, 502, 503,
	1383, 687, 1378, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1379, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1337, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1370, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1380, 604, 605, 1371, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 1381,
	616, 1382, 617, 618, 619, 620, 621, 5947, 623, 625,
	0, 1321, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1375, 0, 0, 0, 0, 0, 834, 0,
	1340, 820, 0, 1345, 1346, 0, 806, 1325, 0, 0,
	0, 1326, 0, 0, 1315, 1316, 342, 0, 359, 840,
	0, 407, 444, 1330, 0, 0, 504, 0, 557, 561,
	0, 650, 1350, 0, 0, 0, 415, 1343, 845, 0,
	851, 1344, 857, 1342, 626, 0, 847, 848, 853, 347,
	1419, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1331, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411,
	1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359,
	1412, 1410, 1409, 1406, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 1334, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 3397, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1375, 0, 834, 0,
	1340, 820, 0, 1345, 1346, 0, 806, 1325, 0, 0,
	0, 0, 0, 0, 0, 3253, 342, 0, 359, 840,
	0, 407, 444, 1330, 0, 0, 504, 0, 557, 561,
	0, 650, 1350, 0, 0, 0, 415, 1343, 845, 0,
	851, 1344, 857, 1342, 626, 0, 847, 848, 853, 347,
	1419, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 4835, 1331, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411,
	1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359,
	1412, 1410, 1409, 1406, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 1334, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 3397, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1375, 0, 834, 0,
	1340, 820, 0, 1345, 1346, 0, 806, 1325, 0, 0,
	0, 0, 0, 0, 0, 3253, 342, 0, 359, 840,
	0, 407, 444, 1330, 0, 0, 504, 0, 557, 561,
	0, 650, 1350, 0, 0, 0, 415, 1343, 845, 0,
	851, 1344, 857, 1342, 626, 0, 847, 848, 853, 347,
	1419, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 4777, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1331, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	1396, 0, 643, 1405, 1416, 1413, 1418, 1404, 1417, 1411,
	1075, 690, 1408, 1407, 1421, 1414, 1415, 636, 1420, 1359,
	1412, 1410, 1409, 1406, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 1334, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 3397, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 834, 0, 0, 1375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 840, 3253, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 186, 650, 0, 0, 0,
	0, 415, 0, 845, 0, 851, 0, 857, 0, 626,
	0, 847, 848, 853, 347, 735, 649, 721, 0, 0,
	0, 511, 183, 0, 0, 880, 184, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 1202, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1372, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 3483, 3484, 3482, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395,
	1360, 1361, 1401, 1397, 431, 3489, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1384, 1362, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1373, 1363,
	1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1376, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1385, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 3475, 471, 1386, 0, 472, 473, 474, 1366,
	1367, 475, 476, 477, 478, 479, 480, 483, 1399, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1377, 500, 502, 503, 1383,
	687, 1378, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1379, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1370, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1380, 604, 605, 1371, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 1381, 616,
	1382, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1387,
	1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 834, 0,
	0, 1375, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 840,
	3477, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 845, 0,
	851, 0, 857, 0, 626, 0, 847, 848, 853, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	880, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 3483,
	3484, 3482, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	3489, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 3475, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 834, 0, 0, 1375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 840, 3477, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 845, 0, 851, 0, 857, 0, 626,
	0, 847, 848, 853, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1372, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395,
	1360, 1361, 1401, 1397, 431, 3489, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1384, 1362, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1373, 1363,
	1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1376, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1385, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1386, 0, 472, 473, 474, 1366,
	1367, 475, 476, 477, 478, 479, 480, 483, 1399, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1377, 500, 502, 503, 1383,
	687, 1378, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1379, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1370, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1380, 604, 605, 1371, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 1381, 616,
	1382, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1387,
	1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 834, 0,
	0, 1375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 840,
	4996, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 845, 0,
	851, 0, 857, 0, 626, 0, 847, 848, 853, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	3489, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 834, 0, 0, 1375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 840, 6014, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 845, 0, 851, 0, 857, 0, 626,
	0, 847, 848, 853, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1372, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1400, 1402, 1398, 1394, 1395,
	1360, 1361, 1401, 1397, 431, 3489, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1384, 1362, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1373, 1363,
	1368, 1374, 1364, 1365, 1369, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1376, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1385, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1386, 0, 472, 473, 474, 1366,
	1367, 475, 476, 477, 478, 479, 480, 483, 1399, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1377, 500, 502, 503, 1383,
	687, 1378, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1379, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1370, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1380, 604, 605, 1371, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 1381, 616,
	1382, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1387,
	1388, 1391, 1389, 1390, 1392, 1393, 1403, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 834, 0,
	0, 1375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 840,
	3622, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 845, 0,
	851, 0, 857, 0, 626, 0, 847, 848, 853, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1372, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 3483,
	3484, 3482, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1400, 1402, 1398, 1394, 1395, 1360, 1361, 1401, 1397, 431,
	3489, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1384, 1362,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1373, 1363, 1368, 1374, 1364, 1365, 1369,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1376, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1385, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1386,
	0, 472, 473, 474, 1366, 1367, 475, 476, 477, 478,
	479, 480, 483, 1399, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1377, 500, 502, 503, 1383, 687, 1378, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1379, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1370, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1380, 604,
	605, 1371, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 1381, 616, 1382, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1387, 1388, 1391, 1389, 1390, 1392,
	1393, 1403, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1375, 0, 967, 0,
	1738, 820, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 342, 0, 359, 840,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 1854, 0, 415, 1850, 845, 0,
	851, 0, 857, 1849, 626, 0, 847, 848, 853, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 1851, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 839,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 842, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 1738, 820, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 1739, 1740,
	342, 0, 359, 840, 0, 407, 444, 659, 0, 0,
	504, 0, 557, 561, 0, 650, 0, 0, 1845, 0,
	415, 1850, 845, 0, 851, 0, 857, 1849, 626, 0,
	847, 848, 853, 347, 735, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 1851, 849, 846, 850, 856, 844, 854, 841,
	852, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 838, 843, 0, 859, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 656, 839, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	842, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 679, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 689, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 0, 607, 608, 858, 610,
	611, 612, 613, 614, 0, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 1738, 820,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 0,
	0, 0, 1739, 1740, 342, 0, 359, 840, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 1850, 845, 0, 851, 0,
	857, 1849, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 1851, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 842, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 820, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 0, 0, 0, 1739, 1740, 342, 0,
	359, 840, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 3769, 0, 415, 1850,
	845, 0, 851, 0, 857, 1849, 626, 0, 847, 848,
	853, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	1851, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 842, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 805, 342, 0, 359, 840, 0, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 186, 650, 0, 0,
	0, 0, 415, 0, 845, 0, 851, 0, 857, 0,
	626, 0, 847, 848, 853, 347, 735, 649, 721, 0,
	0, 0, 511, 183, 0, 0, 0, 184, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 1202, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 181,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 182, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 839, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 842, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 834,
	0, 0, 0, 0, 0, 1205, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 359,
	840, 180, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 845,
	0, 851, 0, 857, 0, 626, 0, 847, 848, 853,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	849, 846, 850, 856, 844, 854, 841, 852, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	838, 843, 0, 859, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 837, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	839, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 842, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 855, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 858, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 329, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 0, 947, 948,
	949, 0, 342, 0, 359, 0, 5716, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 0, 0, 0, 0, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 0,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 0, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	0, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 944, 945, 946, 0, 0,
	0, 0, 0, 329, 938, 939, 940, 941, 942, 943,
	936, 0, 0, 0, 0, 0, 0, 947, 948, 949,
	0, 342, 0, 359, 0, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 347, 735, 649, 721, 0, 0,
	0, 5691, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 0, 0, 0, 0, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 0, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 0, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 679, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 0, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 689, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 0, 607, 608, 0,
	610, 611, 612, 613, 614, 0, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 945, 946, 0, 0, 0,
	0, 0, 329, 938, 939, 940, 941, 942, 943, 936,
	0, 0, 0, 0, 0, 0, 947, 948, 949, 0,
	342, 0, 359, 0, 0, 407, 444, 659, 0, 0,
	504, 0, 557, 561, 0, 650, 0, 0, 0, 0,
	415, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 347, 735, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 0, 0, 0, 0, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 0, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 3889,
	365, 366, 656, 0, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	0, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 3890, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 679, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 0, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 689, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 0, 607, 608, 0, 610,
	611, 612, 613, 614, 0, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 945, 946, 0, 0, 0, 0,
	0, 329, 938, 939, 940, 941, 942, 943, 936, 0,
	0, 0, 0, 0, 0, 947, 948, 949, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 1956, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 1957, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 945, 946, 0, 0, 0, 0, 0,
	329, 938, 939, 940, 941, 942, 943, 936, 0, 0,
	0, 0, 0, 0, 947, 948, 949, 0, 342, 0,
	359, 0, 0, 407, 1105, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 1102, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 1103, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 945, 946, 0, 0, 0, 0, 0, 329,
	938, 939, 940, 941, 942, 943, 936, 0, 0, 0,
	0, 0, 0, 947, 948, 949, 0, 342, 0, 359,
	0, 0, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	0, 0, 0, 0, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 0, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 1018, 365, 366, 656,
	0, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 1019, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 0, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 945, 946, 0, 0, 0, 0, 0, 329, 938,
	939, 940, 941, 942, 943, 936, 0, 0, 0, 0,
	0, 0, 947, 948, 949, 0, 342, 0, 359, 0,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 0,
	0, 0, 0, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 0, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 932, 365, 366, 656, 0,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 933, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 0, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 944,
	945, 946, 0, 0, 0, 0, 0, 0, 938, 939,
	940, 941, 942, 943, 342, 0, 359, 840, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1372, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1400, 1402,
	1398, 1394, 1395, 1360, 1361, 1401, 1397, 431, 3489, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1384, 1362, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1373, 1363, 1368, 1374, 1364, 1365, 1369, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1376, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1385, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1386, 0, 472,
	473, 474, 1366, 1367, 475, 476, 477, 478, 479, 480,
	483, 1399, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1377, 500,
	502, 503, 1383, 687, 1378, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1379, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1370, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1380, 604, 605, 1371,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 1381, 616, 1382, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1387, 1388, 1391, 1389, 1390, 1392, 1393, 1403,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 967, 0, 0, 1375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 181, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	182, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 1205, 0, 806, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 802, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 801, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 793, 794, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 795, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 800, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 799, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 791, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 792, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 796, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 1340, 820, 0, 1345, 1346, 0, 806, 0,
	0, 0, 0, 0, 0, 0, 804, 805, 342, 0,
	359, 840, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 1343,
	845, 0, 851, 1344, 857, 1342, 626, 0, 847, 848,
	853, 347, 1419, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 6323, 0, 643, 1405, 1416, 1413, 1418, 1404,
	1417, 1411, 1075, 690, 1408, 1407, 1421, 1414, 1415, 636,
	1420, 1359, 1412, 1410, 1409, 1406, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 842, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 6148, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 6003, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 6000, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 816, 504, 0, 557, 561, 186, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 1202, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	967, 0, 0, 820, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 840, 180, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 1850,
	845, 0, 851, 0, 857, 1849, 626, 0, 847, 848,
	853, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	1851, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 842, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 840, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 845, 0, 851, 0, 857,
	0, 626, 0, 847, 848, 853, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 3963, 0, 0, 0, 849, 846, 850, 856,
	844, 854, 841, 852, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 838, 843, 0, 859,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	837, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 839, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 964, 842, 0, 0, 965, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 855, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 966, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 858, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 840, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	845, 0, 851, 0, 857, 0, 626, 0, 847, 848,
	853, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 2764,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 964, 842, 0,
	0, 965, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	966, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 880, 2781, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 2785, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 2782,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1039, 342, 0,
	359, 840, 1486, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	845, 0, 851, 0, 857, 0, 626, 0, 847, 848,
	853, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 964, 842, 0,
	0, 965, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 1037, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	966, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1035, 342, 0, 359, 840, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 845, 0, 851, 0, 857,
	0, 626, 0, 847, 848, 853, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 849, 846, 850, 856,
	844, 854, 841, 852, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 838, 843, 0, 859,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	837, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 839, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 964, 842, 0, 0, 965, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 855, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 966, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 858, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 840, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	845, 0, 851, 0, 857, 0, 626, 0, 847, 848,
	853, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 964, 842, 0,
	0, 965, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	966, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 4240, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 1308, 407, 1132, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 964, 842,
	0, 0, 965, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 966, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 840, 0, 407,
	1130, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 964, 842, 0, 0, 965, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 966, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 1127, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 964, 842,
	0, 0, 965, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 1125, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 966, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 840, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 964, 842, 0, 0, 965, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 960, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 966, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 967, 0, 0, 820, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 1837, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 2683, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 967, 0, 0, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 840, 4830, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 842, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 4120, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 1431, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 840, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 842, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 1118, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 840, 0, 407,
	1116, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 842, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 1114, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 840, 0, 407,
	1111, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 842, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 3545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 444, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 845, 2892, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 1085, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1087, 0, 643, 1090, 1078, 1070, 1071,
	1072, 1073, 1074, 1075, 0, 1092, 1093, 1094, 1095, 1096,
	636, 1084, 1086, 1069, 1076, 1077, 1079, 2895, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 2893, 0,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 2898, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 0, 329,
	0, 0, 0, 0, 0, 647, 648, 2894, 515, 509,
	465, 507, 508, 512, 513, 516, 3540, 342, 0, 359,
	0, 0, 407, 2809, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 0,
	0, 0, 0, 3538, 0, 626, 0, 0, 0, 0,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	0, 0, 2813, 0, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 0, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	0, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 2819, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 2818,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 2817, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 0, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 2816, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 329, 0, 0, 0, 2815, 2810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 359, 0, 0, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 0, 0, 3501, 0, 0, 0,
	626, 0, 0, 0, 0, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 0, 0, 2813, 0, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 0,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 0, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	2819, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 2818, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 2817, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	0, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 2816, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 329,
	0, 0, 0, 2815, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 359,
	0, 0, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	0, 0, 2813, 0, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 0, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	0, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 2819, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 2818,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 2817, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 0, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 2816, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 1088, 0, 0, 0, 2815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 359, 840, 0, 407, 444, 0,
	0, 0, 504, 0, 557, 561, 0, 0, 0, 0,
	0, 0, 415, 0, 845, 2892, 851, 0, 857, 0,
	626, 0, 847, 848, 853, 347, 1085, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 0, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 0,
	384, 385, 506, 367, 514, 0, 0, 569, 527, 525,
	0, 492, 549, 0, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 1087, 0, 643, 1090,
	1078, 1070, 1071, 1072, 1073, 1074, 1075, 0, 1092, 1093,
	1094, 1095, 1096, 636, 1084, 1086, 1069, 1076, 1077, 1079,
	2895, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 0, 839, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 842, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 0, 0, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 0, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 0,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 0, 0, 500, 502, 503,
	0, 2893, 0, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 0, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 0, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 2898, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 0, 604, 605, 0, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 0,
	616, 0, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 647, 648,
	2894, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 342, 0, 359, 840, 0, 407, 444, 0, 0,
	0, 504, 0, 557, 561, 0, 0, 0, 0, 0,
	0, 415, 3525, 845, 2892, 851, 0, 857, 0, 626,
	0, 847, 848, 853, 347, 1085, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 0, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 0, 0, 569, 527, 525, 0,
	492, 549, 0, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 1087, 0, 643, 1090, 1078,
	1070, 1071, 1072, 1073, 1074, 1075, 0, 1092, 1093, 1094,
	1095, 1096, 636, 1084, 1086, 1069, 1076, 1077, 1079, 2895,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 0, 839, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 842, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 0, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 0, 0, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 0, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 0, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 0, 0, 500, 502, 503, 0,
	2893, 0, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 0, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	0, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 2898, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 0, 604, 605, 0, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 0, 616,
	0, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 647, 648, 2894,
	515, 509, 465, 507, 508, 512, 513, 516, 743, 748,
	0, 359, 0, 747, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 2887, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	745, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 3898, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 746,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 748, 0, 359, 0, 747, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 745, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 751, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 746, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 748,
	0, 359, 0, 747, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	745, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 746,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2778, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 880, 2781,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 2785, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	2782, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1888, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 1874, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 1880, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 1881, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 1876, 432, 1877, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 1882, 1883,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 1884, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 1878, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 1879, 568, 692, 570,
	571, 1885, 573, 574, 576, 577, 1875, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 1886, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 1887, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 880, 2781,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 2785, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	2782, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 359, 0, 747, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	745, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 746,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3681, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 3682, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3672, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	3673, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 992, 342, 0, 359, 0, 0, 407,
	991, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 880, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 880, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 5381, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	4240, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 4979, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 4960,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 4252, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 4426, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	3277, 0, 0, 0, 511, 0, 0, 0, 0, 3280,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 3278, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 3276, 611, 3275, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 3279, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1589, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 880, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1587, 342,
	0, 359, 0, 0, 407, 1586, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1252, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1149, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 1147, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 1146, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 324, 573, 574, 576,
	577, 578, 579, 580, 581, 1144, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 318,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 995, 342,
	0, 359, 0, 0, 407, 994, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 813, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	812, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 776, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 773, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 775, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 774,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 714, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	716, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 715, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 6295, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	4895, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 4010, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	3871, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 324, 573, 574, 576, 577, 578, 579, 580, 581,
	1144, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 318, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 324, 573, 574, 576,
	577, 578, 579, 580, 581, 2938, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 2939,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 3774, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	3667, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 3665, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	3651, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 2978, 573, 574, 576, 577, 578, 579, 580, 581,
	2938, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 2939, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 2967, 573, 574, 576,
	577, 578, 579, 580, 581, 2938, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 2939,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 2937, 573, 574, 576, 577, 578, 579, 580, 581,
	2938, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 2939, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 324, 573, 574, 576,
	577, 578, 579, 580, 581, 1144, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 2910, 0, 610, 611, 612, 613, 614, 0, 318,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 2768, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	2706, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	1867, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1799, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1797, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1793, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1503, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1462, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1457, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 1451, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 0, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1123, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1121, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1109, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1055, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1051, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1048, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1042, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1023, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 999, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	997, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 978, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	959, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 955, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	953, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 927, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 738, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 736, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 315, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	317, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 324, 573, 574, 576, 577, 578, 579, 580, 581,
	316, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 318, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 0,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 0, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 0, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	0, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 840, 0, 407, 444, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 845, 2892, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 1085, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1087, 0, 643, 1090, 1078, 1070, 1071,
	1072, 1073, 1074, 1075, 0, 1092, 1093, 1094, 1095, 1096,
	636, 1084, 1086, 1069, 1076, 1077, 1079, 2895, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 2893, 0,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 2898, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 647, 648, 2894, 515, 509,
	465, 507, 508, 512, 513, 516, 342, 0, 359, 840,
	0, 407, 444, 0, 0, 0, 504, 0, 557, 561,
	0, 0, 0, 0, 0, 0, 415, 0, 845, 0,
	851, 2943, 857, 0, 626, 0, 847, 848, 853, 347,
	1085, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 4289, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	0, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 0,
	0, 569, 527, 525, 0, 492, 549, 0, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	1087, 0, 643, 1090, 1078, 1070, 1071, 1072, 1073, 1074,
	1075, 0, 1092, 1093, 1094, 1095, 1096, 636, 1084, 1086,
	1069, 1076, 1077, 1079, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 0, 839,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 842, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 0, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 0, 0, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 0,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 0, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 0,
	0, 500, 502, 503, 0, 0, 0, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	0, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 0, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	2898, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 0, 604,
	605, 0, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 0, 616, 0, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 515, 509, 465, 507, 508,
	512, 513, 516, 342, 0, 359, 840, 0, 407, 444,
	0, 0, 0, 504, 0, 557, 561, 0, 0, 0,
	0, 0, 0, 415, 0, 845, 0, 851, 0, 857,
	0, 626, 0, 847, 848, 853, 347, 1085, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 849, 846, 850, 856,
	844, 854, 841, 852, 0, 548, 482, 0, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 838, 843, 0, 859,
	0, 384, 385, 506, 367, 514, 0, 0, 569, 527,
	525, 6331, 492, 549, 0, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 1087, 0, 643,
	1090, 1078, 1070, 1071, 1072, 1073, 1074, 1075, 0, 1092,
	1093, 1094, 1095, 1096, 636, 1084, 1086, 1069, 1076, 1077,
	1079, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	837, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 0, 839, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 842, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 0,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 0, 0, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 0, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	0, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 0, 0, 500, 502,
	503, 0, 0, 0, 855, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 0, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 0, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 1060, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 0, 604, 605, 0, 607,
	608, 858, 610, 611, 612, 613, 614, 0, 734, 615,
	0, 616, 0, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 647,
	648, 0, 515, 509, 465, 507, 508, 512, 513, 516,
	342, 0, 359, 840, 0, 407, 444, 0, 0, 0,
	504, 0, 557, 561, 0, 0, 0, 0, 0, 0,
	415, 0, 845, 0, 851, 0, 857, 0, 626, 0,
	847, 848, 853, 347, 1085, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 849, 846, 850, 856, 844, 854, 841,
	852, 0, 548, 482, 0, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 838, 843, 0, 859, 0, 384, 385,
	506, 367, 514, 0, 0, 569, 527, 525, 5980, 492,
	549, 0, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 1087, 0, 643, 1090, 1078, 1070,
	1071, 1072, 1073, 1074, 1075, 0, 1092, 1093, 1094, 1095,
	1096, 636, 1084, 1086, 1069, 1076, 1077, 1079, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 837, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 0, 839, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	842, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 0, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	0, 0, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 0, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 0, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 0, 0, 500, 502, 503, 0, 0,
	0, 855, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 0, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 0,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 1060, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 0, 604, 605, 0, 607, 608, 858, 610,
	611, 612, 613, 614, 0, 734, 615, 0, 616, 0,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 515,
	509, 465, 507, 508, 512, 513, 516, 342, 0, 359,
	840, 0, 407, 444, 0, 0, 0, 504, 0, 557,
	561, 0, 0, 0, 0, 0, 0, 415, 0, 845,
	0, 851, 0, 857, 0, 626, 0, 847, 848, 853,
	347, 1085, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	849, 846, 850, 856, 844, 854, 841, 852, 0, 548,
	482, 0, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	838, 843, 0, 859, 0, 384, 385, 506, 367, 514,
	0, 0, 569, 527, 525, 0, 492, 549, 0, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 1087, 0, 643, 1090, 1078, 1070, 1071, 1072, 1073,
	1074, 1075, 0, 1092, 1093, 1094, 1095, 1096, 636, 1084,
	1086, 1069, 1076, 1077, 1079, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 837, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 0,
	839, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 842, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 0, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 0, 0, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	0, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 0, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	4545, 0, 500, 502, 503, 0, 0, 0, 855, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 0, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 0, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 1060, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 0,
	604, 605, 0, 607, 608, 858, 610, 611, 612, 613,
	614, 0, 734, 615, 0, 616, 0, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 0, 0, 1088, 0, 0, 0,
	0, 0, 0, 647, 648, 0, 515, 509, 465, 507,
	508, 512, 513, 516, 342, 0, 359, 840, 0, 407,
	444, 0, 0, 0, 504, 0, 557, 561, 0, 0,
	0, 0, 0, 0, 415, 0, 845, 0, 851, 0,
	857, 0, 626, 0, 847, 848, 853, 347, 1085, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 849, 846, 850,
	856, 844, 854, 841, 852, 0, 548, 482, 0, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 838, 843, 0,
	859, 0, 384, 385, 506, 367, 514, 0, 0, 569,
	527, 525, 0, 492, 549, 0, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 1087, 0,
	643, 1090, 1078, 1070, 1071, 1072, 1073, 1074, 1075, 0,
	1092, 1093, 1094, 1095, 1096, 636, 1084, 1086, 1069, 1076,
	1077, 1079, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 837, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 0, 839, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 842, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	0, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 0, 0, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 0, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 0, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 2962, 0, 500,
	502, 503, 0, 0, 0, 855, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 0, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 0, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 1060, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 0, 604, 605, 0,
	607, 608, 858, 610, 611, 612, 613, 614, 0, 734,
	615, 0, 616, 0, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 515, 509, 465, 507, 508, 512, 513,
	516, 342, 0, 359, 840, 0, 407, 444, 0, 0,
	0, 504, 0, 557, 561, 0, 0, 0, 0, 0,
	0, 415, 0, 845, 0, 851, 0, 857, 0, 626,
	0, 847, 848, 853, 347, 1085, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 849, 846, 850, 856, 844, 854,
	841, 852, 0, 548, 482, 0, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 838, 843, 0, 859, 0, 384,
	385, 506, 367, 514, 0, 0, 569, 527, 525, 0,
	492, 549, 0, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 1087, 0, 643, 1090, 1078,
	1070, 1071, 1072, 1073, 1074, 1075, 0, 1092, 1093, 1094,
	1095, 1096, 636, 1084, 1086, 1069, 1076, 1077, 1079, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 837, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 0, 839, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 842, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 0, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 0, 0, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 0, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 0, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 0, 0, 500, 502, 503, 0,
	0, 0, 855, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 0, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	0, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 1060, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 0, 604, 605, 0, 607, 608, 858,
	610, 611, 612, 613, 614, 0, 734, 615, 0, 616,
	0, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 647, 648, 0,
	515, 509, 465, 507, 508, 512, 513, 516, 342, 0,
	359, 840, 0, 407, 444, 0, 0, 0, 504, 0,
	557, 561, 0, 0, 0, 0, 0, 0, 415, 0,
	845, 0, 851, 0, 857, 0, 626, 0, 847, 848,
	853, 347, 1085, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 849, 846, 850, 856, 844, 854, 841, 852, 0,
	548, 482, 0, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 838, 843, 0, 859, 0, 384, 385, 506, 367,
	514, 0, 0, 569, 527, 525, 0, 492, 549, 0,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 1087, 0, 643, 1090, 1078, 1070, 1071, 1072,
	1073, 1074, 1075, 0, 1092, 1093, 1094, 1095, 1096, 636,
	1084, 1086, 1069, 1076, 1077, 1079, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 837, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	0, 839, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 842, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 0, 0,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 0, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 0, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 0, 0, 500, 502, 503, 0, 0, 0, 855,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 0, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 0, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 2898, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	0, 604, 605, 0, 607, 608, 858, 610, 611, 612,
	613, 614, 0, 734, 615, 0, 616, 0, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 647, 648, 0, 515, 509, 465,
	507, 508, 512, 513, 516, 342, 0, 359, 840, 0,
	407, 1098, 0, 0, 0, 504, 0, 557, 561, 0,
	0, 0, 0, 0, 0, 415, 0, 845, 0, 851,
	0, 857, 0, 626, 0, 847, 848, 853, 347, 1085,
	649, 721, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 849, 846,
	850, 856, 844, 854, 841, 852, 0, 548, 482, 0,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 0, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 838, 843,
	0, 859, 0, 384, 385, 506, 367, 514, 0, 0,
	569, 527, 525, 0, 492, 549, 0, 0, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 1087,
	0, 643, 1090, 1078, 1070, 1071, 1072, 1073, 1074, 1075,
	0, 1092, 1093, 1094, 1095, 1096, 636, 1084, 1086, 1069,
	1076, 1077, 1079, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 837, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 0, 839, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 0, 0, 0, 842, 0, 0, 0, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 0, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 0, 0, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 0, 0,
	472, 473, 474, 0, 0, 475, 476, 477, 478, 479,
	480, 483, 0, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 0, 0,
	500, 502, 503, 0, 0, 0, 855, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 0,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 0, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 0, 583, 1060,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 0, 604, 605,
	0, 607, 608, 858, 610, 611, 612, 613, 614, 0,
	734, 615, 0, 616, 0, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 0, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 647, 648, 0, 515, 509, 465, 507, 508, 512,
	513, 516, 342, 0, 359, 840, 0, 407, 1057, 0,
	0, 0, 504, 0, 557, 561, 0, 0, 0, 0,
	0, 0, 415, 0, 845, 0, 851, 0, 857, 0,
	626, 0, 847, 848, 853, 347, 1085, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 849, 846, 850, 856, 844,
	854, 841, 852, 0, 548, 482, 0, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 838, 843, 0, 859, 0,
	384, 385, 506, 367, 514, 0, 0, 569, 527, 525,
	0, 492, 549, 0, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 1087, 0, 643, 1090,
	1078, 1070, 1071, 1072, 1073, 1074, 1075, 0, 1092, 1093,
	1094, 1095, 1096, 636, 1084, 1086, 1069, 1076, 1077, 1079,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 837,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 0, 839, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 842, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 0, 0, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 0, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 0,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 0, 0, 500, 502, 503,
	0, 0, 0, 855, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 0, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 0, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 1060, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 0, 604, 605, 0, 607, 608,
	858, 610, 611, 612, 613, 614, 0, 734, 615, 0,
	616, 0, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 647, 648,
	0, 515, 509, 465, 507, 508, 512, 513, 516, 342,
	0, 359, 840, 0, 407, 444, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 845, 0, 851, 0, 857, 0, 626, 0, 847,
	848, 853, 347, 1085, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 849, 846, 850, 856, 844, 854, 841, 852,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 838, 843, 0, 859, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1087, 0, 643, 1090, 1078, 1070, 1071,
	1072, 1073, 1074, 1075, 0, 1092, 1093, 1094, 1095, 1096,
	636, 1084, 1086, 1069, 1076, 1077, 1079, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 837, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 839, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 842,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 0, 0,
	855, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 0, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 858, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 647, 648, 0, 515, 509,
	465, 507, 508, 512, 513, 516, 342, 0, 359, 840,
	0, 407, 444, 0, 0, 0, 504, 0, 557, 561,
	0, 0, 0, 0, 0, 0, 415, 0, 845, 0,
	851, 0, 857, 0, 626, 0, 847, 848, 853, 347,
	0, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 849,
	846, 850, 856, 844, 854, 841, 852, 0, 548, 482,
	0, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 838,
	843, 0, 859, 0, 384, 385, 506, 367, 514, 0,
	0, 569, 527, 525, 0, 492, 549, 0, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	0, 0, 643, 0, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 0, 0, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 837, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 0, 839,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 842, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 0, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 0, 0, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 0,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 0, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 0,
	0, 500, 502, 503, 0, 0, 0, 855, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	0, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 0, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	0, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 0, 604,
	605, 0, 607, 608, 858, 610, 611, 612, 613, 614,
	0, 734, 615, 0, 616, 0, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 515, 509, 465, 507, 508,
	512, 513, 516,
}

var yyPact = [...]int32{
	11067, -1000, 463, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1717, 1717, -1000, -1000, 3677, 1393, 12795, 18634, 12541, 3782,
	2460, 2880, 112237, 90017, 1717, 1814, 1819, 1779, 91027, 111732,
	111227, 75877, 75372, 1083, 1420, 1401, 89512, 1399, 1387, -1000,
	2277, 91027, 56222, 56222, 89007, 91027, 88502, 91027, 58756, 91027,
	4782, 4049, 4049, 3987, 2642, 2905, 68857, -1000, 1786, 1130,
	1227, -1000, -1000, 4511, 79917, 428, 110722, 91027, 1346, 11067,
	4580, -1000, -1000, 2709, 3995, 79917, 4130, 3992, 1227, 91027,
	-1000, 2137, 2774, 2387, 4541, 110217, 91027, 91027, 54694, 91027,
	3755, 109712, 109207, 3221, 108702, 65322, 3779, 91027, 1822, 91027,
	91027, 2547, 108197, 91027, 91027, 1384, 3050, 62796, 62796, -1000,
	-1000, 1906, 1901, -1000, -1000, -1000, 79412, 87997, 107692, 107187,
	1719, 3212, 2590, 68857, 91027, 91027, 91027, 91027, 68857, 62796,
	2639, 54165, 106682, 68857, 91027, 68857, 91027, 91027, 91027, 91027,
	91027, 1817, 62291, 61786, 91027, 106177, 3753, 91027, 91027, 2391,
	3409, -1000, 105672, 105167, 104662, 117630, 117143, 4681, 4673, 53636,
	4673, 104157, 71382, 70877, 70372, 69867, 103652, 103147, 4038, 64817,
	64312, 63807, -1000, -1000, -1000, 1716, 3210, -1000, -1000, -1000,
	3749, 2544, 1808, -1000, 2637, -1000, -1000, -1000, -1000, -1000,
	-1000, 1715, 4037, 2205, -1000, 93047, 87492, 86987, 2381, -1000,
	-1000, 1067, 4310, 4782, 4782, 4526, 67342, 1594, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4309, 2662, 3094, 592, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4580, 2709, 4580, 4782,
	4166, 4782, -1000, -1000, -1000, -1000, 91027, -1000, 4782, 1383,
	-1000, 3986, 565, 1114, -1000, 994, 994, 994, 3645, 994,
	3983, 1592, 631, 1020, -1000, 3584, 1797, 50510, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1755, 3601, 55717, -1000, 91027,
	55717, -1000, 592, 4306, 2658, 3092, -1000, 55717, 91027, 2650,
	55717, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	91027, 4121, 4121, 4121, 4121, 1074, 1074, 4121, 4121, 1207,
	1095, -1000, -1000, -1000, 4776, 4776, -1000, -1000, -1000, -1000,
	1075, -1000, 86482, -1000, -1000, -1000, -1000, 426, -1000, -1000,
	-1000, 79917, -1000, 79917, 16999, 3485, 2905, -1000, -1000, 67342,
	-1000, 1364, -1000, 606, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3142, 4508, 4508, 4508, 4034, 1786, -1000, -1000, 664,
	646, 1130, 32070, 32070, -1000, 3981, -1000, 436, -1000, 606,
	68352, 1363, 412, 91027, -1000, 1165, 412, 37212, -1000, -1000,
	2668, -1000, 421, -1000, 2625, 2061, -1000, 3021, 91027, 3704,
	102642, 79917, 79917, 959, -1000, -1000, -1000, -1000, -1000, 994,
	102137, 91027, 1712, 101632, 4680, 68857, 68857, 91027, 1807, 68857,
	91027, 3484, 2400, -1000, 2217, 3088, -1000, 4575, 1942, 4690,
	535, 1219, 91027, 91027, -1000, 568, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1439, 2250, 1424, 4574, 1942, 4571, 3378, 101127, 1796, 4568,
	3546, 1942, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1710, 1517, 91027, 2452, 3980, 91027, 1165, 4564, -1000,
	3523, 3055, 116169, 91027, 1942, 1942, -1000, -1000, -1000, -1000,
	10621, 4665, 4479, 8428, 4659, 4475, 18000, 4658, 15847, 4656,
	85977, 85472, 3370, 91027, 84967, 2686, 1360, 2640, 2671, 3878,
	2187, 15685, 1360, -1000, 606, 2321, 3297, 91027, 91027, 91027,
	2717, 1358, 3979, 4653, 10864, 2694, 7777, 2369, 1678, 3353,
	3978, 3977, 91027, 2306, 1944, 4467, 2305, 3483, 1944, 4467,
	2594, 2660, 4651, 2219, 2779, 3301, -1000, 1019, 4647, 434,
	-1000, 4646, 571, -1000, 3976, 4645, 567, 4644, -1000, 3424,
	118117, -1000, -1000, -1000, -1000, -1000, 851, -1000, 614, -1000,
	-1000, -1000, -1000, -1000, 1255, 3158, 1251, 1251, 1251, -1000,
	-1000, -1000, -1000, -1000, 703, 727, -1000, -1000, -1000, -1000,
	3139, 1356, 3139, 3139, -1000, 3155, 3139, 567, 4643, 100622,
	1353, 4642, 100117, 99612, 564, 4641, -1000, 3482, 4533, 4638,
	519, 4637, -1000, 519, 4634, 519, 4632, 492, 4630, -1000,
	1942, 4629, -1000, 4626, 62796, 3537, 217, 4625, -1000, 217,
	4624, 217, 4623, -1000, 3369, -1000, 2156, -1000, -1000, -1000,
	4680, 62796, 91027, -1000, 3083, -1000, 4739, 65827, 2871, -1000,
	354, -1000, 421, 4782, 3578, 48968, 48454, 91027, 628, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3011, -1000, 2607,
	-1000, -1000, -1000, -1000, -1000, -1000, 99107, -1000, -1000, -1000,
	4751, 116169, 76887, 62796, 77897, 1350, 91027, -1000, 91027, -1000,
	-1000, -1000, -1000, 76887, 3480, 62796, 3473, 1797, -1000, 547,
	-1000, 49482, 1346, -1000, -1000, -1000, -1000, 3584, -1000, 517,
	-1000, 414, -1000, 1165, 510, -1000, 2596, -1000, 491, 3821,
	3975, 606, 4680, 4680, 4680, -1000, -1000, -1000, -1000, 413,
	2577, -1000, 91027, -1000, 91027, 91027, 91027, 4121, 4121, 91027,
	91027, 91027, 4121, 4121, 91027, 4121, 4121, -1000, -1000, -1000,
	37212, -1000, -1000, -1000, 4782, 500, -1000, 243, 91027, 91027,
	91027, 116169, 116169, 68857, 68857, 53107, 91027, 91027, 68857, 68857,
	3471, 3406, 1343, -1000, -1000, -1000, -1000, -1000, -1000, 3974,
	67342, -1000, -1000, 29496, 606, -1000, 25853, 37212, 3167, 3457,
	3467, 1975, 4043, 3103, -1000, 36698, 2741, 41324, 3572, 1130,
	-1000, -1000, 1130, 1130, 37212, -1000, 3142, -1000, -1000, 3990,
	234, -1000, 26372, -1000, -1000, 37212, 37212, 37212, 37212, 37212,
	2463, 4544, -1000, -1000, -1000, -1000, 31041, -1000, -1000, 606,
	1226, 956, -1000, -1000, 1342, -1000, 1152, 1341, 606, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1462, 4782, 1452,
	37212, 1671, 2886, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1340, 1338, 3465, -1000, 1336, 1335, 1332, 1330, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1324, 1322, 1317, 1315, 1313,
	1310, 1308, 1305, 1304, 1296, 1295, 1294, 1293, 1288, 1286,
	1281, 1275, 1273, 1270, 1268, 1267, 1168, 1266, 1264, 1260,
	1259, 1258, 1257, 1256, -1000, 3139, -1000, 3139, 3139, 1251,
	1251, 1255, -1000, -1000, 3155, 3139, 1251, -1000, -1000, 727,
	703, -1000, -1000, -1000, -1000, -1000, 570, 1247, -1000, 606,
	-1000, 91027, 37212, 91027, 412, 4749, 91027, 409, 16377, -1000,
	3075, 2709, -1000, 2171, -1000, -1000, -1000, 1438, 4748, 66332,
	-1000, 91027, 3845, 3841, 4295, 4103, 1090, 4563, 4744, 994,
	91027, 3119, 4561, 98602, -1000, 1244, 1244, 2819, 91027, 1236,
	4742, 116169, 2633, 2097, -1000, 62796, 4678, 4622, 2340, -1000,
	-1000, 116169, -1000, 515, 27419, -1000, 27419, 4494, 3834, 51520,
	-1000, 843, 91027, 91027, 91027, 91027, -1000, 91027, 4621, -1000,
	4620, 91027, 1024, 4557, 1726, 4782, 4619, 60776, 4556, -1000,
	98097, 1235, 3973, 2570, 62796, 91027, 1799, 3971, 4618, -1000,
	76382, 1219, 4782, 4741, 3461, -1000, -1000, 240, -1000, 1923,
	1843, -1000, 2433, 2432, 72375, 1889, 1882, 3599, 3968, 2103,
	1908, 91027, 2899, 91027, 3568, 4294, 1059, 2810, 2248, -1000,
	1233, 79917, 1931, 240, -1000, 4292, 3008, 2428, 2899, 1154,
	91027, 1928, 240, 4291, 3119, 1840, -1000, 2851, 118117, 1019,
	-1000, 4033, -1000, 1019, 1019, 4031, 2527, 1942, 1942, -1000,
	91027, 240, 1957, 1829, 91027, 15331, 4617, 4466, 13495, 4616,
	91027, -1000, 1060, -1000, 4290, 2198, 4289, -1000, 74379, 4288,
	2197, 4287, 1743, 4286, 2196, 4284, 4282, 4279, 2340, -1000,
	97592, 3066, -1000, 2340, -1000, -1000, 1419, -1000, 4046, -1000,
	-1000, -1000, -1000, 3644, -1000, 3682, 2524, 2018, 3598, 4278,
	4277, 6217, 97087, 4276, 3004, -1000, -1000, 3967, 4417, -1000,
	-1000, -1000, -1000, 2129, 2724, -1000, 2580, 1019, 1019, 91027,
	-1000, 91027, -1000, -1000, 606, 4275, 3634, -1000, -1000, 2357,
	3833, 3829, 1000, 4273, -1000, 115682, 91027, 91027, 4271, 6217,
	96582, 4270, 3002, 4265, 61281, 77392, 77392, 4264, 4263, 6217,
	96077, 4262, 3001, 4260, 4258, 4254, 1562, -1000, 4252, 4437,
	4251, 1012, 4782, 2389, 2382, 2373, -1000, -1000, 1219, 4247,
	91027, 91027, 2450, 4245, -1000, 2589, 3028, 2589, 4242, 60776,
	-1000, 2589, 2589, 4241, 1059, 1059, 4240, 4239, 1977, 4238,
	91027, 91027, 91027, 91027, 91027, 3283, 3144, 3143, 961, 411,
	4237, -1000, 3101, -1000, 13817, 2190, 2665, 2448, -1000, 4779,
	4775, -1000, 91027, 91027, -1000, -1000, -1000, 91027, 91027, -1000,
	91027, 91027, 116169, -1000, 116169, 1397, 1398, 3419, -1000, 4776,
	4236, -1000, 4235, 4233, 4232, -1000, 1231, -1000, 648, 37212,
	-1000, 4776, -1000, -1000, -1000, -1000, 4776, -1000, 4234, 4068,
	4776, -1000, 1229, -1000, 4776, -1000, -1000, 3139, 3139, -1000,
	-1000, 116169, 434, 4615, 116169, -1000, 3827, 4612, 3826, 4610,
	-1000, 51520, 51520, 116169, -1000, 91027, -1000, 68857, 68857, -1000,
	68857, -1000, 68857, -1000, 68857, 68857, 1228, 91027, 91027, 589,
	60776, 4609, 62796, 62796, 62796, 62796, -1000, -1000, -1000, -1000,
	-1000, 91027, 442, 3152, 4739, 1794, -1000, -1000, -1000, -1000,
	-1000, 91027, -1000, -1000, 407, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 407, -1000, -1000, -1000, -1000, -1000, 1274,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 91027, -1000, 1227,
	399, -1000, 4231, 354, 91027, 91027, 2227, 68857, 68857, 68857,
	91027, 91027, 91027, 3391, 91027, 91027, 91027, 91027, 2159, 444,
	-1000, 91027, 398, -1000, -1000, 391, 4128, 75877, 253, 77897,
	-1000, 1797, 55717, -1000, -1000, -1000, 3581, 91027, 91027, -1000,
	91027, -1000, 91027, -1000, 91027, 91027, 91027, 91027, 91027, -1000,
	3333, -1000, -1000, -1000, -1000, 2135, -1000, -1000, -1000, -1000,
	91027, 91027, -1000, -1000, -1000, 91027, 91027, -1000, 91027, 91027,
	386, -1000, 79917, 2475, 2304, 4533, 2809, 2807, 4360, 4359,
	4358, 4355, 4354, 4353, 4348, 4347, 91027, 91027, 3966, 3964,
	4345, 4344, 116169, 1019, 116169, 17669, -1000, -1000, 926, 88,
	37212, 37212, 37212, -1000, 16377, 4767, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16323, -47, -1000, -1000, -1000, -1000,
	-1000, 2040, 4052, -1000, 1647, -1000, 1990, -1000, -1000, 401,
	16377, -1000, 42866, -1000, -1000, -1000, 2474, 16377, -1000, 40810,
	40810, 2063, 91027, 2684, -1000, 2684, 220, -1000, 7500, 3167,
	3457, 4127, 84462, 32070, 116169, 91027, 4302, 37212, 37212, 37212,
	37212, 37212, 37212, 37212, 37212, 37212, 37212, 37212, 37212, 37212,
	37212, 37212, 37212, 4477, 37212, 4230, 6633, -1000, -1000, 4229,
	1189, 2023, 27419, -1000, -1000, 1223, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	527, 527, 479, 12062, 12062, 972, 1226, 4495, 606, 16274,
	397, 635, 606, -1000, -1000, -1000, 32585, 37212, 51520, 36183,
	606, -1000, 29496, -1000, 1997, 4776, 4365, 16377, 2886, 4006,
	1551, 1225, 37212, 37212, 1224, 4776, 4776, 4776, 4776, 37212,
	2368, 37212, 37212, 42352, 37212, 37212, 31556, 37212, 37212, 37212,
	37212, 37212, 2523, 37212, 3011, 43894, 2521, 37212, 35669, 30526,
	37212, 37212, 37212, 925, 37212, 37212, 37212, 3011, 4127, 37212,
	913, 381, -1000, 3823, 378, 37212, -1000, 91027, 4302, 37212,
	37212, 37212, 37212, 4230, 6633, 4229, 1189, 1223, -1000, -1000,
	-1000, 2017, 2353, -1000, 3963, -1000, 3651, 59261, 3764, 91027,
	561, -1000, 1418, 91027, -1000, -1000, 4067, 45924, 45924, 3607,
	3607, -1000, -1000, 72880, 91027, 3563, 3786, 4605, 1874, 4518,
	1222, -1000, 3119, 2788, 4604, 3961, 4554, -1000, 8692, 73890,
	6417, 2265, -1000, -1000, 3562, 3120, 1219, -1000, 71887, 3958,
	2632, 91027, 91027, 1707, -1000, -1000, -1000, -1000, -1000, -1000,
	2292, 91027, -1000, -1000, -1000, 27419, -1000, 368, -1000, 1417,
	3454, 91027, -1000, 91027, 1221, 1219, 1219, 1219, 1219, 1219,
	-1000, 91027, 2169, 91027, 1945, 72880, 3560, 4603, 2879, -1000,
	-1000, 91027, 2075, -1000, -1000, 4602, 3633, 4734, 4553, 994,
	37212, 27419, 4789, -1000, 4716, 3012, 47439, 91027, 1934, 546,
	-1000, 79917, 4462, 642, 994, -1000, 436, -1000, 2370, 116169,
	4782, 3633, 3633, 11847, 91027, 91027, 91027, -1000, 1873, -1000,
	-1000, 2543, 91027, -1000, 91027, 27419, 91027, 91027, -1000, 4551,
	95572, -1000, 116169, 91027, -1000, 1218, 3848, 1645, 1640, 3798,
	83957, 91027, 95067, 94562, 91027, 91027, 78907, 1875, 1867, 91027,
	2593, 78402, 91027, 2591, -1000, 91027, 2244, -1000, -1000, 62796,
	-1000, 3688, 2583, 28985, 9486, 91027, 91027, 3957, 91027, 12215,
	91027, 91027, -1000, 91027, -1000, -1000, -1000, -1000, -1000, 1019,
	-1000, -1000, -1000, 91027, 91027, 1019, 1019, 16378, 91027, 91027,
	91027, 11370, 240, 1956, 1739, 3000, 91027, 1924, 240, 1955,
	1628, 79917, 1986, 91027, 91027, 62796, 357, -1000, -1000, 116656,
	113247, -1000, 2470, -1000, -1000, -1000, 614, -1000, 118117, 91027,
	91027, 62796, -1000, 91027, 91027, 62796, 91027, 62796, -1000, -1000,
	91027, 1741, -1000, 49996, -1000, -1000, 91027, 91027, -1000, 4411,
	94057, 37212, 4410, 91027, -1000, 91027, -1000, 1215, 4409, 91027,
	62796, 91027, -1000, -1000, -1000, 93552, -1000, 83452, 3087, 1987,
	62796, 3956, 4408, 3954, 2720, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 62796, 62796, 4226, 4224, 91027, 91027, 91027, 27419,
	62796, 346, 387, 2630, 3953, 91027, -1000, 83452, 62796, 3951,
	91027, -1000, 385, 385, 385, 62796, 91027, -1000, 83452, 62796,
	3950, 91027, 62796, 91027, -1000, 62796, -1000, -1000, 91027, -1000,
	91027, -1000, 4523, 91027, 91027, -1000, 62796, 2302, 2364, 4223,
	-1000, 4222, 2480, -1000, 62796, 2464, -1000, 93047, 91027, -1000,
	62796, 2068, 2464, -1000, -1000, 91027, -1000, -1000, 62796, 91027,
	1057, 91027, 62796, 3699, 2620, 1025, 2608, 2753, 91027, 91027,
	4782, 4672, 91027, 4782, 92542, 27419, 91027, 3293, 62796, 91027,
	4221, 91027, 91027, 68857, 1205, 116169, 68857, 52578, 68857, 68857,
	3452, 116169, 91027, -1000, -1000, 75877, 74867, 2181, 2571, 4220,
	-1000, -1000, 434, -1000, 571, -1000, 4533, 3947, -1000, 567,
	1538, 4776, 1397, 1394, 911, 2531, 2294, 2189, 2133, 4776,
	-1000, 339, 910, 908, 4305, 4304, 907, 37212, 906, -1000,
	-1000, 567, -1000, 91027, 4715, 91027, 91027, 91027, 91027, -1000,
	564, 2626, 4533, -1000, 519, 519, 519, -1000, 492, 3209,
	1942, -1000, -1000, 2064, 3451, -1000, 217, 217, 217, 4520,
	62796, 4125, 1200, 4219, -1000, 2709, -1000, 49482, 1997, 4776,
	-1000, -1000, 116169, -1000, 60271, 354, 354, 3368, 91027, 384,
	384, 384, 86, 106, 86, 1019, 364, 534, -1000, 86,
	86, 106, 4461, 4458, 4457, 4446, 4445, -1000, 27419, 4029,
	338, 91027, -1000, -1000, 60271, 3946, 356, 4533, 544, -1000,
	-1000, 91027, -1000, -1000, -1000, -1000, 3821, -1000, -1000, -1000,
	-1000, -1000, 3450, 2823, 2813, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2536, 2161, 2153, 2478,
	-1000, -1000, -1000, -1000, 4414, 4414, 4414, 4414, 4414, 4414,
	4414, 4414, 3818, 3813, 92037, 91027, 4414, 4414, 2611, 4342,
	4714, 91027, 91027, 91027, 116169, 116169, 68857, 68857, 3383, 68857,
	68857, -1000, 905, 35155, -1000, 1530, -15, -15, 37212, 37212,
	-1000, 37212, -1000, 3685, -1000, 37212, 2474, 4097, -1000, 4780,
	4780, 1179, -1000, 31041, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2565, 354, 37212, 557, 1435, -1000, -1000,
	-1000, -1000, 4054, 45924, -1000, 4049, 4049, 1892, 1886, 4049,
	91027, -1000, -1000, -1000, -1000, 4300, -1000, 347, 347, 467,
	467, 467, -1000, 617, 617, 617, 617, 617, 617, 479,
	12062, 8952, 882, 37212, 37212, 4217, 4215, 1189, 820, 37212,
	-1000, 3063, -1000, -1000, -1000, 4124, -1000, -1000, 2497, 3332,
	-1000, -1000, -1000, -1000, 3377, 42352, 42352, -1000, -1000, -1000,
	31041, 1186, -1000, -1000, -1000, -1000, 51520, -1000, 1185, 37212,
	-1000, -1000, 4486, -1000, -1000, 37212, 187, 129, -1000, -1000,
	336, 904, 328, -1000, 88, -1000, 898, 3196, -1000, 37212,
	1551, 1184, -1000, 67847, 4096, 3300, 3204, 452, 1532, 16169,
	37212, 896, 895, 894, 893, 15744, 883, 4123, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 518, 881, 879, 15615,
	353, 878, 2303, -1000, 42352, 42352, 42352, 1179, 875, 872,
	7578, 15495, 34641, 34641, 34641, 871, 14964, 37212, 136, 6926,
	325, 323, 320, 317, 27419, 312, -1000, 14911, 37212, 3490,
	27419, 6758, 310, 430, 869, -1000, 116169, 452, 415, 1466,
	865, -1000, 606, 3332, 14851, 3665, -1000, 351, 349, 335,
	37212, 4054, 307, -1000, -1000, 1177, -1000, 3776, -1000, 16377,
	-1000, -1000, -1000, 3666, 3662, 3203, -1000, -1000, 305, -1000,
	-1000, -1000, -1000, 4067, 66332, 37212, 304, -1000, 606, 3666,
	40296, 112, 3920, 80927, 80927, 47944, -1000, 45419, 82442, 80927,
	80927, 1429, 4120, 1176, 1175, 606, -1000, -1000, -1000, 1168,
	3874, 3720, -1000, 3720, 864, 331, -1000, 116169, -1000, -1000,
	-1000, 91027, 1068, 91027, 3330, 91027, 91027, 4520, 91027, 4709,
	1059, 91027, 91027, 79917, 4601, 113734, 2454, 6417, -1000, 4782,
	67342, 3449, -1000, -1000, 300, -1000, -1000, 1565, 2454, 3913,
	-1000, -1000, -1000, 3559, -1000, -1000, 2265, -1000, 863, -33,
	4027, 297, -1000, -1000, -1000, 1409, 3778, 91027, 2830, 994,
	91027, 4678, 2122, 2149, 3085, -1000, 3096, -1000, -1000, 27419,
	27930, 1798, -1000, 859, 324, -1000, 116169, 4782, -1000, -1000,
	-1000, -1000, -1000, 1008, -1000, 91027, 67342, 67342, -1000, 1942,
	1555, 1945, -1000, 91027, 1946, 91027, 857, 91027, 91027, 3037,
	1796, 91027, 3443, -1000, -1000, 4776, 62796, 62796, 2605, 4435,
	2417, 2415, -1000, -1000, 4045, 1753, 62796, 1227, 4599, 3786,
	14790, 3150, 4518, 3442, 4795, 2825, -1000, -1000, 540, -1000,
	606, -1000, 37212, 1165, 4523, -1000, 77392, 994, 2179, 642,
	4063, 4063, 91027, 853, 4208, -1000, -1000, 4207, 4206, -1000,
	-1000, 82947, -1000, -1000, 294, -1000, 643, 3520, 3153, 4598,
	-1000, 4550, 1947, 1787, 37212, 1164, -1000, 2770, 1250, 1163,
	1160, 91027, 2039, 3696, -1000, 4597, 4533, 4596, 4533, -1000,
	-1000, -1000, -1000, -1000, 91027, 91027, 91027, 91027, -1000, 2111,
	-1000, -1000, -1000, -1000, 2098, -1000, 2581, -1000, -1000, -1000,
	-1000, -1000, 2765, 2087, 289, -1000, -1000, 27419, 27419, 27419,
	4782, -1000, 240, -1000, 1916, 1624, 2727, -1000, 2912, -1000,
	240, 4205, 2723, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	240, 4204, 3119, 1365, -1000, 4198, -1000, 240, 1952, 1334,
	91027, 91027, 91027, 3945, 9510, 91027, 91027, 91027, 91027, 8345,
	4197, 1562, 1945, 4196, -1000, -1000, -1000, -1000, 113247, 116656,
	-1000, 116656, -1000, 614, -1000, 605, 614, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4195, -1000, 4533, 4595, 16377, -1000, -1000, 1978, 37212,
	-1000, -1000, -1000, -1000, -1000, -1000, 2910, 2710, 4406, -1000,
	-1000, -1000, 217, 91027, 62796, 2614, 2648, -1000, 287, -1000,
	1413, -1000, -1000, 115195, 116169, 4194, 3801, 62796, 91027, -1000,
	-1000, -1000, 2908, -1000, -1000, -1000, -1000, -1000, 2907, -1000,
	-1000, -1000, -1000, -1000, 506, -1000, 506, 506, -1000, 4191,
	4188, 2998, 91027, 62796, -1000, -1000, -1000, -1000, -1000, -1000,
	91027, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1959,
	4181, 2176, 4178, 2175, 4176, -1000, 4175, 2168, 4171, 2164,
	4170, 2564, 2562, 2559, -1000, 4168, 4167, 4782, 4547, 4533,
	-1000, 4592, 4533, 286, -1000, -1000, 3099, 3098, -1000, 3693,
	-1000, 67342, -1000, -1000, -1000, 116169, -1000, -1000, -1000, 91027,
	91027, -1000, -1000, 116169, -1000, -1000, 3940, 3933, 1588, 91027,
	62796, 62796, 62796, -1000, -1000, -1000, 91027, -1000, -1000, 1395,
	1390, 4776, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	852, -1000, -1000, 1446, -1000, -1000, 1446, 284, -1000, -1000,
	434, 116169, 4533, 3812, 4533, 3810, -1000, 91027, -1000, -1000,
	-1000, -1000, -1000, 282, -1000, -1000, 1153, 91027, 60776, -1000,
	2661, -1000, 2058, 79917, -1000, 421, -1000, -1000, 848, -1000,
	487, -1000, -1000, 62796, 91027, 86, 313, -1000, 91027, 91027,
	2160, 2157, 2154, 2152, 2151, 276, -1000, 2035, 62796, -1000,
	-1000, 182, 76887, -1000, 62796, -1000, -1000, 1227, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2930, 2909, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 91027, 91027, 4341,
	91027, 4339, -1000, -1000, 91027, 4414, 116169, 4338, 4336, 4334,
	4333, 4330, 4328, 4327, 1019, 4326, 4324, -1000, 37212, -1000,
	847, 844, 37212, 840, 16377, 16377, 1096, 16377, -1000, -1000,
	4081, -1000, 1833, -1000, -1000, 34127, 306, -1000, -1000, 1435,
	-1000, 1131, -1000, 3731, 4004, 37212, 112, 91027, 91027, 4049,
	4049, 4049, 4049, 91027, -1000, 37212, 37212, 801, 705, 37212,
	42352, 42352, -1000, 37212, 671, -1000, -1000, -1000, -1000, 4119,
	-1000, -1000, 2476, 3332, 37212, -1000, -1000, 1767, 1766, -1000,
	-1000, -1000, -1000, 7418, 7249, 279, -1000, 31041, 839, 33613,
	262, -1000, 606, 14734, -1000, -1000, 1069, -1000, -1000, -1000,
	836, 4782, 2946, -1000, 37212, 14679, -1000, 1530, -1000, -1000,
	112742, 37212, 3332, 3932, 3931, 37212, 37212, 3278, 4026, -1000,
	-1000, 3170, 14598, -1000, -1000, -1000, -1000, 116169, -1000, 37212,
	-1000, 2715, -1000, -1000, 37212, -1000, 116169, 42352, 42352, 42352,
	42352, 42352, 42352, 42352, 42352, 42352, 42352, 42352, 42352, 42352,
	3227, 42352, 1152, 461, 461, 461, -1000, -1000, 33099, 37212,
	37212, 116169, 835, 831, 830, -1000, 37212, 136, 37212, -1000,
	-1000, -1000, -1000, 268, -1000, 37212, 27419, 7123, 828, 44914,
	266, 1728, -1000, 3332, 37212, -1000, 1466, 3665, 37212, 3929,
	3911, 3665, -1000, 811, -1000, 810, 37212, 37212, 37212, 13764,
	4004, -1000, 1227, -1000, -1000, 32070, 1129, 1227, 1698, 91027,
	606, 3666, -1000, 16377, 1411, 91027, -1000, 16377, 3558, 45924,
	3869, 3868, 45924, 3897, 3852, 3852, 3852, -1000, 1847, -1000,
	91027, 1151, -1000, 80927, 82442, 80927, 80927, 63301, 809, 3920,
	-1000, -1000, 66837, 1143, -1000, -1000, -1000, 3506, 1142, 44404,
	37212, 606, 37212, 1942, -1000, -1000, -1000, 3806, 2716, 72880,
	-1000, 2421, 73385, 1068, 3873, 1059, 1600, -1000, 1035, 4708,
	-1000, 1075, 1227, -1000, 265, 3119, 3798, 91027, 6417, 1141,
	-1000, -1000, -1000, 3108, 37212, -1000, -1000, 258, -1000, 245,
	1791, -1000, 113247, 37212, 37212, -1000, 91027, 2265, 91027, 3908,
	-1000, -1000, 4025, 113247, 113247, -1000, 4794, 27930, 4164, -1000,
	-1000, -1000, -1000, 1139, 91027, 4518, 1137, 91532, 62796, 4678,
	-1000, 91027, -1000, -1000, 91027, 3233, -1000, 4544, 1626, 1135,
	42352, 91027, 3259, -1000, 2870, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1131, 4779, 4775, 116169, -1000, 91027, 4501,
	794, 241, -1000, -1000, 91027, -1000, -1000, -1000, -1000, -1000,
	1127, -1000, -1000, 535, -1000, -1000, -1000, 2716, 1068, 867,
	3329, 1726, 1555, 60776, -1000, 217, 217, 62796, 62796, -1000,
	-1000, 4782, 4782, 1074, 4782, 217, 4520, 91027, 4518, -1000,
	2473, 91027, -1000, 4163, 3825, -1000, 91027, 45924, 47439, 14454,
	3910, -1000, -1000, 4063, 81937, 4063, -1000, 1126, -1000, 506,
	3331, 4782, 91027, 91027, -1000, -1000, -1000, -1000, 27419, 27930,
	27419, -1000, 3762, -1000, -1000, -1000, 91027, 4590, 3059, -1000,
	81432, -1000, 3798, 13923, 91027, 2837, 91027, 91027, -1000, 91027,
	46429, -1000, -1000, 3165, 2123, 1059, 2852, 2584, 1789, -1000,
	-1000, 1942, 1951, 2837, 91027, -1000, 91027, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2021, 91027, -1000, -1000, 28985, -1000,
	-1000, -1000, -1000, -1000, 91027, 91027, 91027, 91027, 1909, 4024,
	91027, 91027, 1900, 4022, 91027, 91027, 91027, 91027, 91027, 91027,
	-1000, 4162, -1000, 2904, 240, 1935, 1241, 2711, -1000, 4161,
	-1000, 240, 1893, 1240, 91027, -1000, 62796, -1000, -1000, -1000,
	1784, 584, 91027, -1000, 91027, -1000, 13621, 2837, 91027, -1000,
	2706, -1000, -1000, 4160, 2144, 4158, 4156, 2319, 3077, 2140,
	4153, 27419, -1000, 28466, 789, 783, 782, 91027, 4535, 1125,
	217, 2295, 91027, 91027, -1000, -1000, -1000, 91027, 91027, 3907,
	-1000, -1000, 1562, 1057, 91027, 91027, 91027, 91027, 62796, 91027,
	91027, 91027, 91027, 62796, 3441, 3527, 3535, 91027, 4782, 3097,
	4589, -1000, 91027, -1000, -1000, 1783, 3036, -1000, 4707, 3804,
	3803, 2600, 2069, 2069, 3440, 86, 217, 217, -1000, 4533,
	-1000, -1000, 1058, -1000, -1000, -1000, -1000, -1000, 780, -1000,
	91027, -1000, 91027, 4533, -1000, 3209, 3209, -1000, 2053, -1000,
	3032, 91027, 264, 4782, 2847, 60271, 2838, -1000, 86, 1019,
	534, -1000, 91027, 91027, 91027, 91027, 91027, -1000, 27419, -1000,
	-1000, -1000, -1000, -1000, 4533, 4118, 253, -1000, -1000, -1000,
	4322, 4321, 4414, 4320, 4414, 4319, -1000, 779, 4420, 4420,
	4420, 4420, 4420, 4420, 4420, 4318, 4420, 4420, 1530, -1000,
	-1000, -1000, -1000, -1000, 1828, -1000, 261, -1000, 37212, -1000,
	51520, -1000, -1000, 3997, 4021, 16377, -1000, -1000, 91027, 91027,
	91027, 91027, -1000, 501, 1367, 37212, 37212, 539, 3135, 2212,
	1367, 37212, 37212, -1000, -1000, 2390, 2647, 2592, 37212, 37212,
	-1000, 13390, -1000, 260, -1000, 37212, -1000, -1000, 4782, -1000,
	-1000, 16377, 37212, 771, 2424, -1000, 13318, 3665, 4402, 4400,
	-1000, -1000, 3665, 37212, 3222, -1000, 768, 16377, 767, 12406,
	-1000, 252, 252, 443, 443, 443, -1000, 473, 473, 473,
	473, 473, 473, 461, 4117, 3183, -1000, 8010, 12342, 12225,
	12124, 765, -1000, -1000, -1000, 136, 11692, -1000, 39782, -1000,
	-1000, 763, 1701, 1700, -1000, 4014, 43894, 3206, -1000, 37212,
	235, 39268, 3665, -1000, -1000, 759, -1000, 4399, 4393, 757,
	-1000, -1000, 11558, 11558, 11558, 118117, 3997, 755, 234, 3632,
	46429, 3590, -1000, -1000, 3651, -1000, -1000, 37212, -1000, 91027,
	3920, 45924, 45924, 4060, 3861, 45924, -1000, -1000, -1000, -1000,
	-1000, 68857, 1122, 91027, -1000, -1000, -1000, -1000, 80927, 1120,
	91027, 91027, -1000, 55212, 3490, 1117, 223, 10275, 1107, 1942,
	3215, -1000, 2421, 1113, -1000, 2829, 3786, -1000, 4020, 246,
	-1000, -1000, -1000, 4538, 3520, 1841, 3062, -1000, -1000, 72880,
	91027, 3544, 1474, 4520, 4519, 4518, -1000, 1112, 3904, 2454,
	118604, -1000, 16377, 4782, 3439, 116169, -1000, 16377, 16377, 2327,
	-1000, 69, 91027, 113247, -1000, 242, -1000, 1409, -1000, 91027,
	4059, 2712, 4706, 91027, 991, 4546, -1000, 2102, -1000, -1000,
	-1000, 4523, 4523, 37212, 8010, 994, 4704, -1000, 4491, -1000,
	-1000, 3802, -1000, -1000, 91027, -1000, 4782, -1000, 2169, 27419,
	515, 2034, 3520, 72880, 3524, 91027, 2872, -1000, 2031, 217,
	217, -1000, -1000, -1000, -1000, -1000, 4703, 1841, 2837, 68857,
	-1000, -1000, 3160, -1000, 4434, 3801, 62796, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 112, -1000, -1000, 47439, -1000, -1000,
	-1000, -1000, 37212, -1000, 1866, 2875, 4116, -1000, -1000, -1000,
	-1000, 1408, 4129, -1000, 91027, 1555, -1000, 80422, -1000, -1000,
	-1000, 239, -1000, 1998, -1000, 2848, 2752, -1000, 236, 2837,
	224, 221, -1000, 4537, 953, 4499, 37212, 4391, 4671, 4667,
	-1000, -1000, 3259, 4388, 4702, 1057, -1000, -1000, -1000, -1000,
	3259, -1000, 4968, 116169, 1019, 1057, 4533, 4533, -1000, -1000,
	-1000, -1000, 4151, 4150, -1000, 91027, 62796, -1000, -1000, 91027,
	62796, -1000, -1000, -1000, -1000, 4145, -1000, 91027, 91027, 91027,
	91027, 91027, 1885, 4019, 91027, 91027, 91027, 91027, -1000, -1000,
	-1000, 1780, -1000, 4533, -1000, -1000, -1000, 91027, 91027, 62796,
	91027, -2, -1000, 4776, 4776, 116169, 222, -1000, 4776, 4776,
	91027, 62796, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1513, 37212, 4144, -1000, -1000,
	-1000, -1000, 2903, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 91027, 91027, 91027, 91027, 4585,
	4533, -1000, 4782, 4782, -1000, 4533, 116169, 116169, 91027, 91027,
	91027, 4143, -1000, -1000, -1000, -1000, -1000, -1000, 4114, 75877,
	-1000, -1000, 4533, 4533, 4533, -1000, -1000, 218, 91027, -1000,
	3989, -1000, -1000, -1000, -1000, 1576, -1000, 86, 86, 86,
	86, 86, -1000, -1000, 60271, 4533, 4414, 4414, -1000, 4414,
	-1000, 4414, 4317, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4420, -1000, -1000, 747, -1000, -1000, 11501, 745,
	1695, 37212, 4508, -1000, -1000, -1000, -1000, 1367, 1367, 37212,
	37212, 37212, 1367, 2390, -1000, -1000, 1367, 1367, -1000, -1000,
	10716, -1000, 16377, -1000, 1530, 4017, -1000, 744, -1000, -1000,
	741, 220, 91027, -1000, -1000, 37212, 42352, 4112, -1000, 37212,
	37212, 37212, -1000, -1000, 216, 214, 1110, -1000, -1000, -1000,
	-1000, 3206, 4014, -1000, -1000, 10584, 735, 1950, 16377, 3200,
	730, -1000, -1000, -1000, -1000, 3665, 37212, 3507, 3665, 2549,
	1695, 3744, 3628, 213, -1000, 91027, 3198, 16377, -1000, -1000,
	4060, -1000, 1109, 37212, 45924, -1000, 1108, 91027, 211, -1000,
	91027, 210, 208, 116169, 200, -1000, 4701, 3528, 41838, 37212,
	3717, -1000, 4577, 4577, 3714, -1000, 3864, 27419, 1107, 4782,
	3786, 91027, 2563, 2563, 3330, 91027, -1000, 73385, 3096, 1560,
	2421, -1000, 91027, 2778, 729, 1068, 91027, 4520, 91027, -1000,
	-1000, 1918, 4699, 46429, 79917, -1000, 193, -1000, 116656, -1000,
	6803, -1000, 1775, -1000, 3438, 1759, 4104, 190, -1000, 4054,
	722, 1973, 1967, 1846, 91027, 1227, 188, 72880, 4584, 4678,
	-1000, 4386, 3795, 3795, 10534, 2556, 862, -1000, 91027, -1000,
	-1000, 186, -1000, 91027, 2029, 718, 91027, 1555, 3030, 91027,
	1227, -1000, 1103, 2473, 91027, 1097, 4535, 217, 505, 10005,
	68857, 4692, 4692, 91027, 27930, 1094, 1093, 1087, -1000, -1000,
	-1000, -1000, 2837, 2793, -1000, -1000, -1000, -1000, -1000, 2793,
	2333, 2793, 46429, 52049, -1000, 91027, 91027, -1000, 9828, -1000,
	4583, 4582, -1000, -1000, 1085, -1000, 4697, 4501, -1000, -1000,
	-1000, -1000, 91027, 91027, 2475, 435, 2475, 432, 91027, -1000,
	-1000, -1000, 4142, -1000, 91027, 62796, -1000, -1000, 4140, -1000,
	-1000, -1000, 2837, -1000, -1000, -1000, -1000, 2319, 51520, 51015,
	-1000, 3077, 1084, 1082, -1000, -1000, 1081, 9727, 91027, 91027,
	429, 425, 1914, 86, 3436, -1000, -1000, -1000, -1000, 4501,
	715, -1000, -1000, -1000, 60271, 60271, 3903, -1000, -1000, -1000,
	-1000, -1000, 91027, -1000, 182, -1000, -1000, -1000, -1000, -1000,
	4414, -1000, -1000, -1000, -1000, -1000, 91027, 16377, 38240, 1367,
	1367, 1367, -1000, 2641, 37212, -1000, -1000, -1000, 9666, 2001,
	42352, 16377, 16377, 16377, -1000, 37212, -1000, 37212, -1000, -1000,
	-1000, 1811, -1000, -1000, 3318, 183, -1000, 4696, 704, 3894,
	37212, -1000, -1000, -1000, -1000, -1000, -1000, 3402, 3507, 692,
	-1000, 2789, -1000, 3738, 3750, 3691, -1000, 4054, 46429, -1000,
	1227, -1000, 91027, 16377, -1000, 37212, 180, -1000, 174, -1000,
	-1000, 1429, 55212, -1000, 1079, 91027, 170, -1000, 1984, 42352,
	9603, -1000, -1000, 3637, 37212, 3636, -1000, 3652, -1000, -1000,
	-1000, 4690, 4690, -1000, -1000, 4690, 4690, 3387, 4782, 168,
	-1000, 24938, 4054, -1000, 3330, 167, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3873, 1076,
	-1000, -1000, 3786, -1000, -1000, 3498, 3497, 2716, 2421, 1068,
	-1000, 1075, 1575, 1512, 1509, 1227, 166, 3798, 118604, 6417,
	-1000, -1000, 453, -1000, -1000, 116169, 4363, 2956, 1759, -1000,
	2585, -1000, -1000, -1000, 91027, -1000, 3631, -1000, 4525, 4524,
	-1000, -1000, 91027, 1740, -1000, 4519, 4518, 91027, -1000, 2764,
	-1000, 2502, 3885, 2337, 1033, 37212, 2894, -1000, 27419, 1555,
	91027, 2716, 1068, -1000, 3324, 1555, 4520, 691, 68857, -1000,
	4788, -1000, 45924, -1000, 4692, -1000, 2898, -1000, -1000, -1000,
	69362, 37212, 37212, 3096, 4523, 1066, 4523, 91027, 4523, -1000,
	-1000, 1065, 3726, 1059, -1000, 4499, -1000, -1000, 37212, 2804,
	3796, -1000, -1000, -1000, 1877, -1000, 1869, -1000, 91027, 2475,
	418, 91027, -1000, 1088, 3432, -1000, 116169, -1000, 116169, 116169,
	37212, -1000, -1000, -1000, 91027, -1000, -1000, 91027, 91027, 91027,
	91027, 4533, -1000, 487, 433, 2069, 1555, 4533, -1000, 173,
	-1000, 4691, 140, -1000, 16377, -1000, -1000, -1000, -1000, 30011,
	1055, 1049, 749, 683, 38754, 38754, 38754, 136, 37212, 2001,
	164, 162, -1000, 3194, 3256, 3395, 3385, 37212, 27419, -1000,
	3398, 16377, -1000, -1000, 682, 3893, -1000, -1000, -1000, 91027,
	3727, 3725, 66332, -1000, -1000, -1000, 160, 156, -1000, -1000,
	-1000, -1000, 91027, 146, -1000, 114708, 41838, 133, 27419, 8010,
	3491, 91027, 3623, 16377, 3639, 4013, 4782, 4782, 4782, 4782,
	58251, 4379, 57746, -1000, -1000, 27419, -1000, -1000, -1000, -1000,
	-1000, 59766, -1000, 3873, -1000, 1841, 46934, 3096, 3330, -1000,
	-1000, 2421, 3786, 3520, 4520, -1000, 1574, 1569, 4519, 2782,
	1048, -1000, 2454, -1000, -1000, 2922, 1036, 1982, -1000, -1000,
	4690, -1000, -1000, 2821, -1000, 2814, 2866, 2864, -1000, -1000,
	-1000, 4689, 976, 1862, -1000, 2746, -1000, 3890, 3889, 3672,
	-1000, -1000, -1000, -1000, 3119, 9272, 4688, 91027, -1000, -1000,
	1555, 2025, 3520, 91027, -1000, -1000, -1000, 1034, 143, -1000,
	112, -1000, -1000, -1000, 139, -1000, 4776, 135, 128, 3795,
	91027, 3795, 994, 3795, 51520, 1435, 3726, -1000, 8622, 1033,
	-1000, 37212, 91027, 91027, -1000, -1000, 1844, -1000, 2344, 1963,
	2344, 125, 123, 117, 8340, 106, 106, 1914, -1000, 86,
	-1000, -1000, -1000, 4082, -1000, -1000, 91027, 1032, 38240, -1000,
	37212, 37212, 1031, -1000, 2937, -1000, 43380, 2517, 2242, 7305,
	2937, 2937, 16377, -1000, -1000, -1000, 3507, 3263, 3244, -1000,
	3299, -1000, 3292, 3310, 3308, -1000, -1000, -1000, -1000, 3404,
	416, 4012, 4010, 481, 4685, 2286, 109, -1000, 91027, 3683,
	3505, -1000, 43894, -1000, 3525, -1000, -1000, -1000, 3621, 3686,
	-1000, -1000, 3619, 1040, 3626, -1000, -1000, -1000, -1000, 69,
	-1000, 57241, 69, -1000, -1000, 107, -1000, -1000, 1841, -1000,
	105, -1000, 953, 4499, 37212, 3873, 3786, 3330, 2421, -1000,
	-1000, -1000, -1000, 4544, 1026, 46429, -1000, 2473, 37212, -1000,
	-1000, -1000, 91027, 2952, 1162, -1000, -1000, 68857, 68857, 1227,
	72880, 91027, -1000, -1000, 3674, -1000, 3680, 2846, 2846, 431,
	1948, 2319, -1000, -1000, 91027, 2004, 1555, 681, -1000, 4787,
	-1000, 69362, -1000, -1000, 4137, -1000, 101, -1000, 2556, 4054,
	679, -1000, 1435, -1000, -1000, 16377, 2475, 2475, 91027, -1000,
	-1000, -1000, 4008, -1000, 68857, -1000, -1000, -1000, 91027, 60271,
	-1000, -1000, -1000, 89, 82, 38240, -1000, 2372, 4539, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 667, 3887, 3886, -1000,
	-1000, 3270, -1000, 3262, -1000, 3507, -1000, 91027, 91027, 91027,
	-1000, -1000, 91027, -1000, 1018, -1000, -1000, 3683, -1000, 42352,
	42352, 4376, -1000, 42352, -1000, 3490, 1016, -1000, 66332, -1000,
	-1000, 3651, 91027, 3761, 1014, -1000, -1000, 69, -1000, -1000,
	59766, -1000, -1000, 46934, 91027, 91027, 8262, 1841, 3330, 3873,
	3786, 4518, 46429, 71, 68857, 7958, -1000, -1000, 2233, -1000,
	-1000, -1000, 1642, -1000, -1000, -1000, -1000, -1000, 3698, 45,
	38, 4519, -1000, -1000, 3126, -1000, -1000, 4378, -1000, -1000,
	-1000, -2, 1555, 91027, -1000, -1000, -1000, -1000, 1005, 2837,
	-1000, 2837, 3885, -1000, -1000, -1000, -1000, -1000, 2475, 91027,
	-1000, -1000, 433, -1000, -1000, 64, 2226, -1000, -1000, 1650,
	37726, -1000, 3235, 3229, -1000, -1000, 3884, 3811, 388, 374,
	-1000, 37212, -1000, 8010, 8010, -1000, 8010, 3521, 90522, -24,
	3190, 57, -1000, 37212, -1000, -1000, -1000, -1000, 4499, -1000,
	3873, 1841, 3330, 1841, 42, -1000, 2782, 996, -1000, 4363,
	664, 646, 198, -1000, -1000, 4136, 4061, -1000, -1000, 994,
	994, -1000, 1555, 37212, -1000, 2837, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3226, 3225, 3336, 56736, 91027, 91027, 91027,
	7699, 91027, 24, -1000, 114221, 3494, 3759, 3676, 20, 91027,
	1841, -1000, 3873, 4054, -1000, 46429, 4544, 26908, 2919, -1000,
	1642, 1966, 1962, -1000, -1000, -1000, 17, 2837, -1000, -1000,
	-1000, 4490, 1017, -1000, -1000, -1000, -1000, -1000, -8, 3507,
	90522, 3504, 1933, 4786, -1000, -1000, -1000, 3651, -1000, -1000,
	-1000, 1841, -1000, -1000, 4518, -31, -1000, -1000, -1000, -1000,
	-1000, 2473, -1000, 4517, 4507, -1000, 56736, 37212, -1000, 633,
	-1000, -1000, 3318, 3493, 3493, 4783, 3603, 3188, -1000, 1841,
	-1000, 26908, 68857, 2859, 2855, 3785, -15, -1000, 3256, 3318,
	3507, -1000, 992, 91027, 3759, 4054, -1000, 978, 68857, 68857,
	91027, 609, 3507, 3256, -1000, 90522, 3508, -1000, -1000, 26908,
	-1000, -1000, -1000, 4782, -1000, 3507, -49, 975, -53, -1000,
	-1000, 90522, -1000, -77, -1000,
}

var yyPgo = [...]int16{
	0, 5329, 5328, 3330, 133, 0, 47, 8979, 5327, 356,
	300, 388, 5326, 2892, 122, 6320, 156, 100, 296, 390,
	5325, 5324, 5323, 5320, 50, 5319, 375, 5286, 11355, 10166,
	134, 5318, 315, 3174, 5317, 386, 359, 271, 5313, 203,
	5312, 5309, 192, 204, 5308, 282, 5305, 441, 5304, 55,
	5302, 5301, 255, 162, 402, 430, 425, 433, 5300, 352,
	399, 351, 369, 357, 5299, 12449, 593, 2594, 12, 5297,
	5295, 427, 5294, 5293, 5291, 345, 5290, 277, 5289, 5288,
	5287, 5285, 18, 391, 409, 5284, 355, 5283, 5282, 5281,
	116, 5276, 5272, 5270, 5269, 281, 373, 354, 5268, 380,
	358, 772, 164, 12364, 15728, 5266, 385, 186, 704, 194,
	11814, 5263, 18886, 5262, 5260, 18355, 18009, 17119, 5258, 16670,
	16074, 163, 235, 287, 366, 374, 414, 291, 421, 946,
	398, 24, 171, 394, 5257, 5253, 5252, 158, 5251, 5250,
	71, 66, 343, 5249, 5248, 93, 37, 67, 423, 400,
	5246, 5245, 436, 5244, 5242, 14489, 80, 215, 5241, 338,
	5238, 346, 349, 81, 56, 5237, 347, 278, 305, 49,
	265, 193, 70, 191, 350, 5236, 5235, 5234, 5232, 98,
	274, 46, 332, 435, 429, 109, 105, 27, 131, 5231,
	178, 175, 5227, 5226, 5225, 5224, 5219, 5215, 5214, 5213,
	5212, 5211, 5210, 5209, 5206, 5205, 5204, 5203, 5201, 5200,
	31, 5199, 5197, 5196, 5194, 40, 41, 5189, 5188, 251,
	259, 276, 339, 5187, 341, 165, 15, 32, 142, 159,
	5186, 5184, 5183, 5179, 42, 90, 22, 5178, 5177, 5176,
	389, 5174, 434, 5173, 5172, 230, 319, 5171, 5169, 3342,
	530, 3339, 5168, 95, 322, 5167, 5165, 5164, 138, 5163,
	5162, 5161, 160, 5161, 64, 78, 5160, 39, 490, 362,
	292, 416, 36, 293, 443, 270, 5159, 432, 396, 393,
	102, 199, 7, 221, 189, 272, 5157, 253, 5156, 5155,
	5155, 431, 325, 243, 258, 167, 51, 21, 448, 5154,
	428, 5153, 5152, 5151, 5150, 336, 45, 89, 5149, 232,
	5147, 111, 5146, 5142, 113, 331, 23, 69, 5141, 44,
	123, 57, 172, 5140, 83, 324, 1, 14, 10, 5139,
	342, 5137, 86, 5136, 309, 275, 5135, 340, 264, 5134,
	261, 94, 11, 6, 5132, 2, 3, 5, 16, 263,
	5131, 62, 5126, 101, 5124, 247, 183, 151, 5119, 135,
	5118, 84, 59, 124, 5117, 5116, 5115, 161, 43, 5114,
	117, 5113, 184, 303, 5112, 5109, 5107, 26, 63, 121,
	77, 82, 61, 33, 119, 65, 5106, 5105, 38, 141,
	5104, 214, 53, 8, 73, 307, 108, 5103, 34, 29,
	20, 353, 228, 382, 387, 5102, 302, 410, 401, 450,
	3552, 118, 383, 48, 213, 5101, 207, 5100, 30, 5099,
	103, 72, 182, 74, 76, 5095, 58, 211, 5093, 166,
	502, 5092, 313, 3827, 20185, 5089, 127, 310, 442, 91,
	5088, 5084, 225, 188, 5083, 5081, 5080, 60, 17, 13,
	367, 120, 456, 406, 408, 5079, 371, 5078, 5077, 5076,
	173, 154, 130, 5075, 139, 5073, 5073, 5073, 5072, 5067,
	5065, 5064, 5063, 5062, 5060, 404, 5059, 5056, 5055, 5054,
	5053, 5052, 5051, 5050, 5049, 5048, 5047, 5045, 5043, 5042,
	5041, 5039, 5038, 5037, 5036, 440, 453, 5035, 379, 5033,
	449, 361, 5032, 405, 5031, 136, 5030, 403, 360, 5029,
	5028, 5027, 370, 460, 422, 417, 5026, 181, 407, 68,
	5025, 104, 437, 9366, 195, 129, 92, 5022, 5021, 198,
	219, 5020, 202, 5017, 447, 279, 5014, 5013, 438, 147,
	145, 5010, 5009, 5008, 5004, 5002, 5001, 5000, 4999, 4998,
	4996, 4995, 4993, 4985, 4982, 4981, 4980, 4979, 4977, 4976,
	4974, 4973, 4970, 4969, 4968, 4967, 4966, 4965, 4964, 4962,
	4960, 4959, 4957, 4956, 4954, 4953, 4952, 4951, 4950, 4947,
	4944, 4942, 4937, 4935, 4933, 4931, 4930, 4929, 4928, 4926,
	4923, 4919, 4918, 4917, 4916, 4914, 4913, 4912, 4911, 4910,
	4909, 4907, 4906, 242, 231, 4905, 4903, 4902, 384, 381,
	420, 4901, 197, 301, 413, 201, 4900, 4900, 4899, 4898,
	306, 439, 222, 224, 97, 4897, 4896, 126, 4893, 4891,
	4887, 424, 4885, 446, 4881, 4877, 4875, 4873, 187, 125,
	4871, 96, 180, 411, 54, 4868, 4859, 220, 311, 128,
	115, 4858, 4857, 4856, 4855, 4854, 190, 4853, 4852, 229,
	85, 4850, 294, 233, 445, 2968, 377, 451, 4849, 418,
	4848, 2047, 426, 4847, 234, 260, 112, 378, 4845, 114,
	4844, 4843, 314, 419, 216, 376, 4841, 4840, 79, 4839,
	4838, 236, 320, 4833, 4830, 4828, 4826, 4825, 4823, 4,
	107, 25, 9, 4820, 4819, 35, 4818, 4815, 298, 4811,
	4810, 397, 88, 87, 4807, 4806, 4805, 15772, 412, 4804,
	4803, 257, 4803, 19, 4802, 4802, 3564, 415, 4800, 75,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 19, 19, 399, 399, 433, 433, 433, 33, 33,
	34, 34, 35, 35, 36, 36, 49, 49, 49, 5,
	5, 5, 6, 6, 6, 6, 6, 8, 8, 7,
	13, 13, 14, 14, 62, 434, 434, 32, 32, 16,
	16, 18, 18, 718, 718, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 15, 15, 17, 17, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 714, 714, 714, 714, 714,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 101, 103, 102, 102, 102, 110, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 125, 125, 69, 69, 96, 96, 100,
	100, 99, 99, 99, 99, 97, 97, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	83, 83, 85, 85, 85, 85, 85, 86, 86, 86,
	87, 12, 12, 12, 12, 12, 12, 12, 12, 88,
	88, 89, 81, 90, 90, 221, 221, 91, 91, 91,
	92, 92, 92, 93, 93, 94, 94, 94, 94, 306,
	306, 306, 671, 671, 132, 132, 132, 132, 132, 132,
	132, 82, 82, 95, 95, 95, 72, 73, 73, 76,
	76, 75, 74, 74, 77, 77, 77, 80, 80, 130,
	130, 130, 78, 78, 79, 165, 165, 165, 158, 158,
	158, 158, 158, 158, 167, 167, 167, 167, 166, 166,
	166, 166, 166, 168, 168, 168, 168, 168, 129, 129,
	108, 108, 108, 108, 108, 108, 126, 126, 126, 109,
	109, 109, 109, 109, 109, 109, 109, 104, 104, 104,
	106, 107, 21, 122, 122, 123, 123, 111, 111, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	118, 118, 114, 114, 715, 715, 716, 716, 105, 105,
	105, 105, 105, 105, 115, 116, 119, 120, 117, 117,
	117, 117, 717, 127, 127, 127, 128, 128, 113, 113,
	155, 155, 157, 157, 159, 159, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 156, 156,
	131, 131, 136, 136, 133, 133, 162, 162, 161, 161,
	179, 179, 182, 182, 183, 183, 181, 181, 181, 181,
	181, 181, 181, 181, 148, 148, 149, 149, 150, 150,
	152, 153, 153, 153, 153, 151, 151, 154, 154, 154,
	184, 184, 184, 184, 184, 184, 184, 276, 276, 275,
	275, 278, 278, 278, 278, 279, 279, 280, 280, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 436, 436, 437, 437, 437, 438, 438, 438, 292,
	292, 292, 292, 292, 292, 293, 293, 293, 293, 294,
	294, 295, 295, 296, 296, 296, 297, 297, 298, 298,
	300, 301, 301, 301, 302, 302, 302, 303, 303, 303,
	304, 304, 282, 282, 224, 224, 224, 245, 285, 285,
	284, 284, 284, 284, 287, 287, 287, 287, 287, 286,
	286, 288, 288, 289, 289, 290, 290, 291, 291, 305,
	305, 314, 314, 310, 310, 311, 312, 312, 313, 313,
	676, 308, 308, 307, 307, 309, 320, 320, 322, 322,
	321, 321, 321, 321, 323, 323, 324, 324, 315, 315,
	316, 316, 317, 317, 317, 318, 318, 319, 319, 319,
	319, 319, 325, 330, 329, 329, 341, 341, 331, 331,
	332, 333, 333, 336, 336, 335, 335, 337, 337, 337,
	338, 338, 338, 339, 339, 334, 334, 340, 340, 343,
	343, 344, 344, 344, 344, 344, 344, 344, 344, 345,
	345, 345, 345, 342, 342, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 347, 347, 347, 347, 347, 348,
	348, 349, 349, 350, 350, 326, 326, 327, 327, 327,
	327, 327, 327, 328, 328, 185, 435, 435, 214, 214,
	214, 214, 214, 236, 236, 215, 215, 219, 186, 216,
	216, 222, 222, 220, 217, 217, 187, 299, 299, 188,
	218, 218, 189, 189, 239, 239, 240, 240, 246, 246,
	246, 255, 255, 256, 256, 258, 258, 259, 259, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 260, 260, 265, 266, 266, 266,
	266, 266, 266, 261, 261, 267, 272, 272, 272, 272,
	268, 268, 268, 268, 42, 42, 410, 410, 410, 410,
	410, 410, 410, 410, 409, 409, 409, 408, 408, 408,
	408, 408, 271, 271, 633, 633, 270, 270, 719, 719,
	660, 660, 241, 241, 242, 242, 243, 243, 244, 244,
	228, 228, 228, 228, 228, 237, 237, 238, 238, 229,
	229, 231, 232, 233, 233, 233, 233, 233, 226, 223,
	223, 223, 230, 230, 230, 263, 263, 264, 264, 234,
	234, 234, 235, 235, 227, 227, 163, 163, 163, 164,
	164, 164, 225, 225, 190, 190, 190, 190, 190, 190,
	412, 412, 412, 412, 412, 412, 412, 412, 351, 351,
	352, 352, 355, 355, 355, 358, 366, 366, 366, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 414,
	414, 415, 415, 416, 416, 417, 417, 353, 353, 354,
	354, 359, 359, 360, 360, 361, 361, 361, 361, 362,
	365, 365, 418, 418, 419, 419, 420, 10, 41, 356,
	370, 370, 371, 371, 371, 371, 374, 374, 374, 374,
	377, 377, 377, 422, 422, 425, 425, 427, 427, 427,
	427, 423, 423, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 720,
	720, 37, 37, 37, 421, 421, 424, 424, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 357, 357, 373,
	373, 373, 373, 373, 373, 373, 375, 375, 364, 364,
	363, 363, 379, 379, 378, 378, 378, 378, 383, 383,
	383, 383, 383, 380, 381, 382, 382, 382, 382, 382,
	384, 384, 385, 385, 386, 387, 387, 388, 388, 388,
	413, 413, 392, 392, 392, 392, 393, 393, 394, 394,
	395, 191, 191, 376, 376, 396, 396, 398, 398, 397,
	397, 400, 400, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 401, 401, 24, 24, 402, 402,
	11, 523, 523, 523, 523, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 404, 404, 404, 405,
	406, 406, 721, 721, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 547, 548, 548, 549,
	549, 550, 551, 551, 468, 468, 468, 468, 468, 468,
	469, 469, 470, 470, 463, 463, 463, 665, 665, 665,
	668, 668, 668, 668, 667, 667, 669, 669, 464, 465,
	618, 618, 619, 619, 467, 466, 617, 617, 722, 722,
	471, 471, 471, 471, 500, 500, 503, 504, 504, 504,
	506, 506, 506, 475, 475, 475, 475, 475, 475, 475,
	472, 472, 476, 476, 501, 501, 502, 502, 507, 505,
	505, 473, 473, 473, 473, 473, 474, 474, 198, 198,
	198, 198, 198, 508, 508, 199, 199, 199, 509, 509,
	510, 510, 511, 511, 200, 201, 201, 201, 201, 201,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 47, 47, 48, 48, 451, 98, 98,
	98, 98, 450, 84, 84, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	368, 368, 369, 369, 369, 369, 369, 369, 389, 390,
	390, 391, 391, 391, 391, 458, 458, 458, 458, 672,
	672, 673, 673, 674, 674, 674, 675, 675, 675, 675,
	675, 677, 677, 677, 677, 677, 678, 121, 121, 121,
	679, 679, 680, 680, 682, 682, 682, 682, 682, 687,
	687, 681, 681, 688, 688, 688, 462, 706, 706, 689,
	689, 670, 670, 460, 460, 690, 690, 690, 692, 692,
	691, 691, 691, 691, 691, 697, 697, 698, 698, 700,
	695, 695, 696, 696, 703, 693, 693, 724, 724, 694,
	694, 701, 701, 723, 723, 699, 699, 699, 702, 702,
	702, 702, 704, 704, 461, 461, 461, 461, 262, 262,
	705, 705, 705, 705, 541, 541, 541, 541, 542, 543,
	543, 543, 543, 612, 612, 615, 544, 544, 545, 546,
	552, 553, 553, 553, 553, 553, 553, 553, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 558, 558, 603, 603, 725, 725,
	559, 559, 560, 560, 604, 604, 606, 606, 606, 606,
	561, 605, 605, 607, 562, 562, 562, 562, 562, 562,
	562, 562, 562, 562, 562, 562, 562, 583, 584, 584,
	613, 613, 613, 613, 609, 609, 608, 608, 624, 624,
	585, 585, 586, 586, 586, 620, 620, 621, 621, 622,
	622, 587, 587, 587, 587, 588, 536, 536, 537, 537,
	589, 589, 590, 591, 591, 623, 623, 655, 655, 655,
	655, 656, 656, 663, 657, 658, 658, 659, 557, 557,
	557, 557, 557, 601, 601, 602, 602, 661, 661, 662,
	662, 539, 539, 540, 196, 195, 195, 197, 444, 444,
	444, 445, 445, 447, 447, 447, 447, 447, 448, 448,
	440, 440, 440, 441, 441, 442, 439, 439, 439, 443,
	443, 446, 446, 446, 446, 666, 666, 666, 666, 666,
	666, 666, 666, 666, 666, 666, 664, 664, 664, 664,
	274, 274, 277, 277, 269, 269, 707, 707, 707, 707,
	707, 707, 707, 709, 709, 709, 273, 273, 9, 9,
	9, 9, 711, 711, 512, 512, 512, 708, 708, 708,
	708, 708, 710, 710, 710, 710, 513, 513, 411, 411,
	411, 411, 411, 411, 429, 429, 38, 38, 39, 40,
	40, 43, 43, 43, 43, 44, 44, 46, 46, 46,
	46, 430, 431, 431, 432, 432, 563, 563, 564, 628,
	628, 628, 628, 625, 625, 627, 626, 626, 565, 629,
	629, 566, 566, 567, 568, 630, 630, 634, 634, 635,
	635, 635, 635, 635, 636, 636, 637, 637, 638, 638,
	639, 639, 569, 640, 640, 570, 570, 571, 571, 642,
	642, 647, 647, 647, 572, 572, 572, 573, 573, 573,
	573, 643, 643, 648, 648, 648, 648, 648, 648, 648,
	283, 283, 574, 575, 575, 575, 575, 575, 575, 575,
	575, 575, 576, 576, 576, 641, 641, 641, 577, 651,
	651, 644, 644, 649, 649, 649, 649, 649, 631, 631,
	712, 712, 712, 713, 713, 578, 579, 579, 645, 645,
	650, 650, 580, 581, 646, 646, 646, 646, 582, 582,
	632, 632, 652, 652, 653, 653, 654, 654, 53, 53,
	53, 52, 52, 169, 169, 172, 172, 172, 172, 172,
	175, 176, 177, 178, 173, 173, 170, 171, 171, 174,
	174, 137, 137, 138, 138, 140, 142, 142, 142, 141,
	143, 143, 139, 139, 144, 144, 144, 144, 145, 145,
	146, 146, 146, 146, 146, 147, 147, 147, 147, 147,
	55, 55, 55, 55, 54, 54, 56, 56, 56, 56,
	56, 56, 57, 57, 58, 58, 59, 60, 60, 60,
	61, 61, 63, 63, 64, 64, 477, 477, 477, 477,
	477, 477, 477, 477, 477, 477, 477, 477, 478, 478,
	726, 726, 726, 496, 496, 496, 479, 485, 483, 480,
	480, 481, 481, 481, 481, 495, 495, 484, 482, 482,
	482, 482, 482, 482, 514, 514, 515, 515, 497, 497,
	497, 497, 497, 497, 498, 498, 498, 498, 498, 498,
	498, 498, 498, 538, 538, 486, 487, 487, 488, 488,
	489, 489, 490, 516, 516, 499, 499, 499, 528, 528,
	528, 521, 521, 521, 521, 521, 521, 517, 517, 517,
	517, 517, 518, 518, 522, 522, 522, 522, 522, 535,
	535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
	535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
	519, 519, 524, 524, 526, 526, 520, 520, 529, 527,
	527, 527, 525, 525, 50, 50, 45, 45, 51, 51,
	134, 135, 135, 459, 459, 459, 452, 452, 683, 683,
	683, 683, 683, 683, 683, 683, 683, 683, 683, 683,
	683, 683, 683, 683, 683, 685, 685, 684, 684, 684,
	686, 686, 686, 686, 686, 727, 727, 449, 449, 449,
	449, 453, 453, 454, 454, 555, 556, 455, 455, 456,
	456, 456, 456, 457, 457, 457, 457, 202, 247, 247,
	247, 247, 247, 247, 248, 248, 248, 203, 203, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 249, 249, 250, 250, 204,
	204, 205, 252, 252, 180, 180, 180, 180, 180, 206,
	206, 206, 253, 253, 254, 207, 207, 207, 207, 208,
	209, 209, 210, 20, 20, 211, 212, 22, 22, 23,
	23, 23, 23, 23, 23, 23, 23, 213, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 530, 530, 492, 492,
	492, 492, 492, 492, 492, 492, 492, 492, 531, 531,
	532, 532, 493, 533, 533, 534, 534, 494, 592, 592,
	592, 592, 592, 592, 592, 592, 592, 592, 592, 592,
	592, 592, 592, 592, 592, 592, 592, 592, 592, 592,
	592, 592, 592, 592, 592, 593, 593, 593, 593, 593,
	593, 593, 593, 593, 593, 593, 593, 593, 593, 593,
	593, 593, 593, 593, 593, 593, 593, 593, 593, 594,
	595, 595, 595, 595, 595, 595, 26, 26, 596, 597,
	597, 597, 597, 610, 610, 611, 611, 614, 614, 614,
	616, 616, 616, 616, 616, 616, 616, 728, 728, 598,
	599, 599, 599, 599, 599, 599, 729, 729, 600, 25,
	25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 2, 3, 0, 1,
	3, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 3, 4, 4, 6, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 1, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 5, 6, 3,
	4, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 6,
	2, 3, 5, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 3, 1,
	5, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 6, 4, 4, 4, 4, 5, 7, 7, 9,
	4, 6, 5, 5, 7, 7, 4, 7, 4, 6,
	6, 4, 5, 4, 5, 3, 11, 8, 9, 8,
	1, 0, 5, 5, 3, 3, 5, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	5, 3, 4, 1, 3, 3, 1, 2, 2, 0,
	1, 2, 0, 2, 3, 3, 3, 4, 0, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	2, 3, 5, 6, 2, 3, 3, 4, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 0, 2, 3, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 2, 4, 1, 5, 2, 5, 2,
	5, 2, 1, 3, 3, 0, 1, 0, 3, 0,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 0, 5, 0, 5, 0, 0, 1, 1, 3,
	1, 1, 3, 3, 1, 1, 1, 2, 4, 4,
	2, 3, 5, 5, 1, 3, 1, 0, 1, 2,
	3, 2, 4, 2, 3, 2, 0, 1, 2, 0,
	9, 9, 2, 1, 4, 4, 4, 1, 0, 1,
	3, 3, 2, 1, 1, 2, 0, 1, 3, 2,
	3, 2, 3, 1, 4, 2, 3, 2, 3, 2,
	3, 1, 1, 2, 2, 4, 1, 2, 3, 3,
	4, 5, 4, 5, 4, 2, 2, 2, 1, 1,
	0, 5, 2, 2, 2, 3, 1, 0, 1, 3,
	9, 1, 2, 0, 7, 7, 0, 10, 6, 0,
	4, 5, 2, 0, 2, 4, 0, 1, 1, 0,
	5, 2, 4, 1, 1, 4, 5, 4, 0, 2,
	0, 1, 0, 1, 5, 1, 0, 2, 0, 2,
	6, 2, 0, 1, 3, 2, 4, 0, 1, 3,
	2, 1, 0, 1, 3, 3, 2, 0, 2, 2,
	2, 3, 3, 4, 1, 3, 3, 2, 7, 12,
	1, 3, 2, 3, 3, 1, 2, 2, 2, 2,
	1, 2, 13, 2, 2, 0, 2, 0, 1, 3,
	3, 1, 3, 1, 3, 3, 3, 3, 3, 0,
	3, 3, 0, 3, 0, 7, 7, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 6, 0, 3, 0, 2, 3, 2, 3, 4,
	4, 3, 3, 0, 5, 2, 5, 2, 0, 4,
	2, 1, 0, 1, 0, 1, 3, 3, 6, 7,
	5, 7, 9, 2, 0, 7, 1, 3, 1, 4,
	4, 7, 2, 1, 1, 1, 3, 2, 8, 1,
	3, 3, 5, 2, 1, 3, 7, 2, 0, 10,
	1, 2, 9, 11, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 3, 0, 1, 3, 2, 0, 1,
	1, 3, 3, 1, 1, 3, 3, 3, 3, 4,
	4, 3, 3, 2, 1, 3, 2, 1, 1, 1,
	1, 3, 0, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 0, 2, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	4, 4, 4, 5, 5, 2, 5, 3, 5, 2,
	0, 3, 1, 2, 5, 5, 8, 3, 4, 8,
	5, 0, 4, 3, 0, 1, 3, 1, 3, 2,
	2, 4, 4, 5, 2, 0, 1, 1, 0, 2,
	2, 0, 2, 0, 13, 16, 12, 15, 14, 17,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 0, 2, 2, 1, 0, 3, 0, 1,
	3, 1, 1, 2, 4, 6, 6, 10, 1, 2,
	1, 3, 4, 0, 1, 3, 2, 1, 1, 6,
	2, 0, 3, 1, 1, 2, 1, 2, 2, 2,
	2, 3, 0, 1, 2, 1, 2, 1, 3, 2,
	3, 1, 2, 2, 2, 1, 2, 3, 1, 2,
	2, 2, 2, 3, 3, 3, 1, 3, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 0, 2, 1,
	4, 4, 5, 2, 5, 5, 7, 3, 1, 5,
	9, 3, 9, 4, 11, 10, 2, 0, 1, 3,
	3, 6, 4, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 3, 3,
	4, 0, 1, 0, 6, 1, 3, 3, 3, 5,
	2, 0, 3, 4, 4, 0, 2, 0, 4, 0,
	3, 16, 19, 1, 0, 2, 0, 4, 0, 1,
	3, 2, 0, 4, 6, 4, 6, 4, 4, 6,
	4, 6, 5, 7, 5, 7, 4, 6, 10, 13,
	10, 13, 11, 14, 1, 3, 1, 0, 1, 3,
	1, 1, 1, 1, 1, 2, 5, 3, 6, 4,
	6, 6, 9, 5, 7, 6, 6, 5, 5, 5,
	5, 9, 4, 5, 7, 6, 4, 8, 4, 2,
	4, 3, 6, 4, 3, 3, 3, 2, 2, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 4, 4,
	3, 2, 3, 2, 2, 3, 4, 3, 2, 2,
	3, 4, 4, 4, 5, 1, 4, 4, 4, 3,
	3, 2, 1, 0, 6, 4, 6, 4, 6, 8,
	4, 6, 4, 6, 5, 7, 9, 7, 9, 7,
	9, 8, 4, 6, 4, 6, 4, 6, 4, 6,
	4, 6, 4, 6, 2, 3, 3, 2, 5, 1,
	1, 2, 3, 2, 1, 1, 2, 1, 2, 4,
	1, 1, 1, 1, 10, 4, 1, 1, 1, 1,
	2, 4, 3, 5, 1, 3, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	6, 5, 3, 5, 1, 0, 1, 3, 2, 1,
	1, 2, 3, 4, 3, 2, 4, 4, 6, 4,
	4, 2, 5, 2, 0, 5, 5, 5, 1, 1,
	1, 1, 3, 0, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 3,
	3, 3, 3, 3, 2, 1, 3, 2, 3, 5,
	5, 5, 2, 1, 3, 6, 6, 6, 6, 6,
	8, 8, 6, 6, 7, 9, 9, 8, 10, 6,
	6, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 7, 9, 6, 8, 7, 9, 8, 10, 8,
	10, 9, 11, 8, 10, 9, 11, 8, 8, 7,
	6, 6, 6, 6, 8, 8, 8, 8, 6, 9,
	0, 2, 2, 1, 2, 2, 2, 2, 3, 1,
	3, 3, 1, 5, 3, 9, 12, 7, 7, 3,
	2, 1, 3, 1, 3, 3, 3, 3, 2, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 4, 5,
	1, 0, 1, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 5, 1, 4, 0, 2, 3, 0, 1,
	1, 2, 1, 17, 21, 1, 1, 2, 1, 3,
	1, 1, 1, 3, 1, 2, 0, 1, 2, 4,
	1, 1, 1, 1, 1, 3, 0, 1, 0, 1,
	1, 4, 0, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 2, 0, 9, 11, 12, 14, 3, 0,
	3, 4, 4, 0, 6, 4, 9, 7, 5, 3,
	5, 7, 9, 1, 3, 1, 3, 5, 5, 6,
	6, 4, 6, 6, 5, 7, 9, 6, 6, 5,
	4, 4, 3, 6, 6, 6, 6, 4, 7, 5,
	8, 7, 8, 6, 5, 8, 1, 0, 1, 0,
	4, 6, 5, 8, 2, 0, 2, 2, 2, 1,
	5, 2, 0, 2, 6, 6, 6, 10, 6, 6,
	6, 9, 9, 6, 6, 9, 6, 7, 7, 6,
	2, 2, 2, 2, 1, 2, 1, 0, 1, 2,
	10, 13, 5, 4, 4, 2, 0, 2, 2, 1,
	0, 11, 14, 12, 15, 11, 4, 0, 2, 1,
	8, 11, 8, 7, 9, 1, 1, 3, 3, 5,
	6, 1, 3, 1, 3, 1, 3, 3, 7, 9,
	9, 8, 6, 1, 0, 1, 3, 3, 1, 5,
	3, 8, 11, 6, 8, 7, 10, 13, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 0, 1, 0, 5, 2, 3, 0, 2,
	0, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 3, 11, 13, 5, 1,
	2, 2, 1, 1, 3, 5, 1, 3, 7, 2,
	0, 5, 5, 10, 8, 2, 0, 2, 0, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 0,
	5, 0, 8, 1, 1, 8, 11, 6, 8, 1,
	3, 1, 1, 3, 4, 7, 6, 5, 5, 5,
	5, 1, 3, 4, 4, 4, 3, 4, 3, 1,
	4, 0, 8, 5, 5, 6, 7, 7, 7, 4,
	4, 5, 11, 10, 10, 2, 2, 0, 13, 2,
	0, 1, 3, 5, 5, 3, 6, 2, 1, 0,
	2, 4, 0, 1, 3, 6, 8, 8, 1, 3,
	5, 5, 10, 10, 11, 11, 5, 5, 6, 10,
	1, 0, 2, 0, 1, 0, 2, 2, 1, 1,
	0, 4, 0, 1, 3, 1, 1, 1, 1, 1,
	2, 4, 4, 5, 2, 0, 3, 1, 3, 4,
	3, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	2, 2, 1, 1, 1, 0, 2, 4, 5, 6,
	4, 5, 2, 3, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	2, 3, 2, 5, 4, 3, 3, 3, 3, 3,
	1, 1, 0, 2, 3, 0, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 0, 3, 6, 3, 5,
	3, 5, 3, 5, 2, 0, 2, 0, 1, 2,
	2, 2, 3, 3, 2, 2, 3, 3, 1, 1,
	3, 3, 2, 1, 1, 8, 8, 11, 5, 7,
	6, 9, 5, 2, 0, 3, 3, 3, 7, 7,
	10, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 5, 1, 3, 2, 2, 2, 2, 2, 1,
	2, 2, 4, 3, 2, 2, 2, 2, 2, 2,
	3, 2, 2, 2, 2, 5, 5, 5, 5, 5,
	1, 3, 1, 2, 3, 0, 3, 1, 2, 1,
	1, 1, 3, 0, 1, 3, 1, 3, 1, 3,
	6, 4, 0, 5, 5, 5, 1, 2, 4, 5,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	2, 2, 2, 1, 2, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	2, 1, 3, 1, 3, 7, 4, 1, 3, 4,
	6, 4, 8, 1, 1, 1, 1, 7, 2, 2,
	2, 2, 3, 0, 2, 2, 0, 2, 2, 1,
	2, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	4, 4, 3, 4, 4, 1, 1, 1, 0, 2,
	2, 5, 3, 0, 1, 1, 1, 1, 1, 3,
	9, 12, 3, 0, 6, 2, 3, 2, 3, 2,
	2, 2, 3, 2, 0, 2, 5, 3, 0, 2,
	2, 2, 3, 1, 3, 1, 2, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 8, 9, 8, 6,
	6, 9, 9, 9, 7, 10, 1, 1, 8, 8,
	8, 8, 8, 8, 8, 9, 8, 8, 2, 0,
	1, 1, 2, 1, 2, 1, 2, 2, 6, 6,
	6, 6, 6, 6, 6, 9, 9, 6, 6, 6,
	8, 6, 8, 8, 8, 8, 6, 8, 6, 8,
	7, 9, 7, 9, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 6, 9, 9, 6, 6, 6, 6,
	6, 6, 8, 8, 8, 6, 7, 6, 6, 7,
	8, 8, 8, 10, 9, 8, 1, 0, 5, 5,
	4, 6, 6, 1, 0, 1, 2, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 4,
	11, 11, 11, 13, 9, 11, 1, 1, 6, 2,
	2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -478, -179, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, -458, -459, -460,
	-461, -539, -540, -195, -196, -197, -541, -542, -543, -544,
	-545, -547, -548, -549, -550, -551, -546, -552, -553, -554,
	-555, -556, -557, -558, -559, -560, -561, -562, -583, -584,
	-585, -586, -587, -588, -589, -590, -591, -563, -564, -565,
	-566, -567, -568, -569, -570, -571, -572, -573, -574, -575,
	-576, -577, -578, -579, -580, -581, -582, -463, -464, -465,
	-468, -469, -470, -477, -479, -480, -481, -482, -483, -484,
	-485, -486, -487, -488, -489, -490, -471, -472, -476, -473,
	-474, -198, -199, -200, -201, -202, -203, -204, -205, -206,
	-207, -208, -209, -210, -211, -212, -213, -491, -492, -493,
	-494, -592, -593, -594, -595, -596, -597, -598, -599, -600,
	266, 212, -181, -182, -297, 111, 26, 22, 27, 394,
	390, 302, 93, 401, 191, 436, 228, 407, 413, 397,
	378, 290, 405, 274, 475, -505, 428, 223, 395, 220,
	259, 250, 280, 345, 222, 273, 249, 328, 472, 358,
	329, 333, 462, 226, 418, 109, 214, -184, -183, -296,
	531, 119, 203, 63, 67, -304, 36, 518, 86, 540,
	-726, 486, 457, -726, 96, 97, 98, 99, 531, -255,
	115, -412, -376, -35, 33, 414, 247, 261, 62, 464,
	454, 225, 276, 284, 422, 103, -441, 202, 268, 449,
	375, 194, 438, 387, 443, 512, -631, 406, 71, 453,
	451, 58, 289, 473, 471, 40, 67, 307, 419, 480,
	85, 284, 104, 199, 225, 236, 247, 261, 286, 71,
	-633, 62, 375, 385, 387, 409, 414, 422, 443, 412,
	460, 268, 406, 103, 449, 438, 454, 464, 276, 40,
	322, 384, -407, -410, -409, 464, 261, 307, 512, 62,
	458, 443, 286, 385, 409, 199, 247, 449, 364, 103,
	406, 71, 67, 419, 480, 85, 284, 225, 236, 438,
	454, 194, 268, 276, -633, 387, 414, 422, 375, 412,
	460, 85, 364, 284, -665, 58, 423, 233, 457, -666,
	-664, -274, 56, 217, 414, 347, 406, 488, -5, 4,
	-27, -28, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 22, 201, 204, 202, 205, 55, 206, 207,
	208, 210, 211, 212, 88, 70, 213, 214, 215, 24,
	216, 218, 219, 220, 221, 222, 223, 123, 226, 227,
	228, 229, 230, 141, 231, 101, 232, 234, 235, 236,
	111, 237, 154, 238, 120, 121, 90, 246, 247, 248,
	249, 250, 251, 253, 254, 98, 149, 150, 255, 89,
	256, 257, 258, 259, 260, 261, 176, 27, 262, 138,
	264, 148, 265, 267, 136, 42, 268, 270, 271, 272,
	273, 274, 275, 276, 277, 279, 281, 282, 91, 283,
	153, 165, 285, 286, 287, 288, 289, 291, 294, 295,
	151, 296, 297, 298, 28, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 312, 313, 314,
	96, 315, 317, 318, 145, 503, 319, 320, 321, 322,
	92, 324, 327, 328, 329, 332, 333, 334, 335, 336,
	337, 105, 85, 338, 99, 340, 341, 342, 343, 344,
	345, 346, 131, 348, 349, 350, 351, 352, 353, 354,
	357, 110, 358, 359, 32, 139, 122, 504, 505, 502,
	144, 62, 506, 507, 124, 501, 508, 102, 364, 365,
	366, 367, 368, 369, 370, 129, 371, 128, 373, 374,
	375, 377, 378, 379, 380, 382, 383, 384, 385, 386,
	112, 387, 152, 143, 388, 389, 390, 391, 84, 132,
	393, 394, 395, 396, 397, 398, 399, 34, 400, 401,
	402, 35, 403, 404, 405, 407, 408, 409, 410, 127,
	412, 413, 146, 415, 416, 87, 417, 418, 419, 420,
	421, 422, 93, 425, 427, 428, 429, 430, 431, 107,
	433, 434, 435, 436, 437, 438, 113, 114, 439, 440,
	441, 147, 442, 443, 445, 446, 104, 448, 449, 108,
	451, 452, 453, 454, 455, 458, 460, 462, 463, 464,
	465, 466, 467, 468, 142, 469, 50, 472, 473, 474,
	97, 475, 476, 477, 478, 155, 183, 479, 480, 481,
	482, 483, 485, 168, 486, 140, 487, 498, 499, 57,
	37, 173, 169, 189, 179, 178, 224, 188, 187, 29,
	278, 175, 292, 293, 500, 186, 171, 185, 166, 160,
	162, 163, 159, 161, 156, 164, 158, 126, 157, 325,
	339, 181, 182, 355, 356, 360, 170, 361, 362, 376,
	177, 174, 411, 426, 172, 444, 184, 459, 461, 86,
	180, 489, 490, 491, 492, 493, 133, 494, 495, 496,
	497, 125, -668, -667, 56, 457, 423, -274, 21, 217,
	233, 58, 347, 406, 414, 488, -726, 457, -726, 379,
	-726, 379, -5, 423, 457, 56, 413, -5, 457, -7,
	-5, -517, -518, 21, -522, 63, 392, 26, 22, -5,
	-517, 290, -518, -5, -475, -505, 118, 531, -179, -185,
	-186, -187, -188, -539, -540, 26, -244, 531, 79, -242,
	531, 118, -274, 56, 457, 423, 21, 531, -242, -511,
	531, 21, 451, 453, 374, 420, -245, -7, -251, -245,
	-249, 349, 382, 91, 92, 193, 396, -102, 21, 285,
	210, 64, 45, -101, 534, 535, 12, -251, -245, 21,
	-7, -7, 378, 21, -5, -5, 536, -5, -21, -103,
	7, -718, 67, -718, 74, 320, -533, -534, -103, 321,
	-132, -671, -104, -5, 4, -27, -29, 209, 115, 225,
	25, 81, 242, 116, 79, 44, 76, 52, 53, 75,
	77, 46, 82, 54, 80, 363, 78, 48, 450, 118,
	-170, -131, 470, 316, 269, 509, -183, -184, -182, -181,
	-182, -296, -288, -289, 21, 41, -436, -434, -437, -5,
	66, 541, -298, 84, -300, -7, -298, 531, -3, -496,
	30, -513, -512, -708, 318, 389, 252, 31, 73, -438,
	-436, 64, 73, -180, -179, -185, -186, -187, -188, -434,
	67, 480, 84, 419, 307, 286, 385, 460, 117, 199,
	412, 458, -632, 463, 34, -19, -5, 28, -7, -15,
	-5, -156, 221, 279, -159, -5, 11, -160, 534, 535,
	536, 537, 538, 539, 525, 526, 527, 18, 19, 20,
	-15, 87, -15, 28, -7, 28, 246, 67, -7, 28,
	336, -11, -523, -9, 241, 245, 424, 4, -27, -28,
	-29, 85, -15, 460, -7, -7, 340, -399, 28, -15,
	-7, -7, 531, 236, -11, -11, 453, 451, 453, 451,
	-436, 28, 21, -434, 28, 21, -434, 28, -434, 28,
	480, 67, 246, 93, 401, -450, -671, -15, -15, -7,
	-15, -449, -671, -29, -5, -11, -523, 321, 221, 279,
	-451, -156, -7, 28, -449, -7, -449, -7, -7, -7,
	-7, -7, 460, -11, -523, 21, -11, 336, -523, 21,
	-7, -15, 28, 87, -15, -7, 383, 139, 28, -17,
	-15, 28, -13, -7, -7, 28, -271, 28, -108, -109,
	426, -111, -112, -118, -114, -117, -110, -717, -104, 186,
	171, 172, 173, 174, 175, 176, 187, 188, 170, 189,
	-119, -120, -115, -116, 184, 56, 185, 166, 4, -27,
	169, -105, 178, 179, 180, 181, 182, -271, 28, 25,
	-33, 28, 221, 279, -454, 28, -451, -33, -7, 28,
	-453, 28, -449, -453, 28, -453, 28, -84, 28, -450,
	-7, 28, -7, 28, 70, 336, -402, 28, -523, -402,
	28, -402, 28, 480, 246, 67, 87, 340, 460, 321,
	480, 70, 414, -665, 423, -665, 219, 209, -618, 21,
	-16, -434, -512, 431, 64, 61, 527, 533, 57, -103,
	-103, -709, -103, 40, -273, -9, -103, 506, 57, 318,
	209, -496, -513, -496, -103, -496, 61, -103, -5, -103,
	-252, 531, 74, 61, 541, 383, 531, -262, 531, -262,
	-262, 104, -262, 74, 506, 64, 506, -242, -475, -500,
	-503, -504, 86, -9, -505, 515, 473, -241, 116, -500,
	-501, -502, -507, -434, -500, 57, 318, 209, -500, -434,
	-7, -5, -509, 414, -510, 307, 67, 104, 247, -500,
	-247, -245, -250, -249, -250, -250, -250, -102, -102, -250,
	-250, -250, -102, 21, -250, -102, 21, -101, -101, -253,
	531, -7, 21, -20, 541, -18, -436, -18, -407, 514,
	-408, 464, 261, 199, 286, 62, 117, -409, 385, 409,
	458, 322, 512, 307, -410, 247, 406, 443, 449, -531,
	130, -534, -273, 531, -96, -99, 533, 529, -148, -55,
	-150, 130, -56, -57, -152, 68, 280, 69, -153, -53,
	21, 41, -53, -53, 70, -170, -131, 532, 532, -276,
	-275, -278, -65, 536, -67, 534, 535, -155, 31, 516,
	-130, 471, 40, -69, -68, 13, 531, -72, -70, -182,
	29, 134, -78, -79, 293, 11, 62, 411, -5, -101,
	6, -103, 49, 43, 47, 9, 10, -671, -714, -110,
	38, -132, -334, -71, -112, -715, -716, -117, -717, 185,
	161, 162, 225, 240, 243, 244, 330, 331, 241, 245,
	424, 447, 103, 239, 242, 512, 278, 356, 362, 376,
	444, 459, 461, 360, 224, 292, 325, 490, 491, 493,
	494, 492, 495, 496, 159, 160, 166, 164, 158, 339,
	156, 163, 157, 497, 173, 169, 189, 179, 178, 188,
	187, 175, 186, 171, 181, 182, 170, 174, 172, 56,
	184, 180, -119, -120, -115, -116, -275, 74, 536, -96,
	-434, 531, 531, 541, -298, -32, 531, -129, -65, 218,
	354, 541, -708, 327, 66, 487, 252, -435, -434, 93,
	-5, 23, -438, -438, 532, -262, -434, 28, -254, -434,
	480, -434, 28, -36, 25, -671, -671, -7, 460, -671,
	-7, 130, -633, -412, 473, 209, -443, 31, -37, 36,
	518, -660, 23, -122, 533, -430, 531, -15, -15, 533,
	-430, 23, 368, 257, 452, 231, -430, 64, 31, -37,
	31, 140, -434, 28, -620, 464, 31, 130, 28, -37,
	480, 513, -7, -629, 365, 74, -7, -32, 31, -429,
	130, 36, 232, -108, -15, -37, -37, -401, -404, 398,
	93, -403, 207, 256, 196, 22, 27, 477, 223, 264,
	258, 309, 354, 122, 31, 365, 401, 400, 153, -39,
	507, 29, 45, -401, -405, 398, -26, 207, 354, 93,
	29, 45, -401, 398, -423, 93, -426, 354, 23, 213,
	90, 305, 335, 338, 342, 364, 419, 436, 402, 473,
	29, -401, 398, 93, 29, -434, 28, 21, -436, 28,
	140, -664, -274, -667, 398, 93, 365, -47, 531, 398,
	93, 365, 394, 398, 93, 365, 398, 365, 36, -610,
	93, 394, -669, -611, -464, -614, -616, 4, 232, 148,
	332, 449, 452, 398, -406, 27, 93, 196, 477, 365,
	398, -452, 93, 365, -26, -683, 354, 215, 404, 441,
	300, 434, 482, 277, 418, 324, 31, 237, 127, 445,
	-670, 366, -464, -47, -96, 398, -538, 196, 27, -7,
	-15, -15, 93, 365, -98, 531, 74, 29, 398, -452,
	93, 365, -26, 398, 93, 196, 27, 365, 398, -452,
	93, 365, -26, 398, 365, 398, -621, -39, 365, 479,
	398, 93, 232, 394, 196, 27, 264, 258, 430, 365,
	74, 74, -7, 398, -37, -495, 45, -495, 398, 130,
	-37, -495, -495, 398, 93, 401, 365, 398, 93, 365,
	29, 368, 257, 452, 231, 398, 196, 27, 93, -455,
	365, -456, 22, 97, -538, 93, -516, -268, 6, 534,
	535, -102, 29, 541, -433, 24, 35, 29, 541, -433,
	74, 29, 541, -433, 29, -126, 134, -109, -124, 531,
	498, 344, 248, 297, 341, -125, 417, -123, -122, 531,
	-113, 531, 177, -123, -123, -123, 531, -127, 518, 519,
	531, -127, -128, 183, 531, -128, -128, 178, 179, -128,
	-433, 29, -17, 28, 531, 29, -15, 28, -15, 28,
	-433, 541, 29, 130, -433, 29, -433, 541, 29, -433,
	29, -433, 29, -433, 541, 29, -37, 29, 29, -402,
	130, 28, 541, 29, 29, 29, 140, 368, 257, 452,
	231, -36, -402, -7, 219, 23, -273, 40, -619, 253,
	299, 541, -103, 120, -277, 40, -269, -272, -268, 49,
	43, 74, -273, -277, 40, -5, -707, -103, 4, -110,
	-268, 40, 58, -711, 260, 234, 327, 413, -5, 23,
	-713, -108, -535, -16, 67, 419, 284, 286, 385, 409,
	247, 261, 321, 322, 367, 414, 449, 464, 21, -402,
	-522, 531, -14, -62, -5, -14, -535, 130, -402, 130,
	-475, 532, 541, -506, -272, -268, -242, 532, 541, -32,
	532, 327, 532, -508, 83, 74, -36, -36, -36, 532,
	121, 115, 314, 204, 416, 354, -245, -245, -245, -245,
	-250, -250, -245, -245, -245, -250, -250, -245, -250, -250,
	-129, -103, 541, -22, 45, -25, 235, 402, -15, -15,
	-7, -108, -108, -450, -449, -451, 221, 279, -7, -7,
	-449, -449, 130, 139, 531, 74, -273, 532, 536, -82,
	190, 21, 41, -95, -65, -107, -104, -99, -106, 536,
	-6, 4, -27, -28, -29, -30, 21, 203, 119, 30,
	510, 134, 23, 94, 60, 511, 38, 512, 513, 39,
	514, 117, 26, 239, 240, 241, 243, 244, 245, 40,
	252, 95, 41, 109, 263, 266, 269, 43, 280, 130,
	284, 64, 290, 71, 72, 45, 311, 316, 73, 323,
	326, 68, 330, 331, 31, 47, 69, 74, 66, 33,
	509, 372, 381, 392, 100, 63, 424, 432, 59, 447,
	67, 106, 61, 456, 49, 470, 471, 103, 83, 190,
	51, 65, 484, 36, -65, -100, -54, -55, -149, -148,
	-152, 130, 389, 97, 354, 427, 503, -57, -56, -58,
	-65, 21, -64, 91, 349, -59, -60, -65, -67, 534,
	535, -151, 122, -183, -183, -183, -171, -174, -65, -148,
	-55, -291, 73, 541, 14, 39, 55, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, -155,
	30, 33, 46, 516, 44, 48, 52, 53, 54, 37,
	45, -158, 23, -8, 11, 62, -159, 4, -31, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 21, 200,
	22, 201, 203, 119, 510, 94, 204, 202, 205, 60,
	206, 207, 208, 209, 210, 211, 212, 173, 115, 169,
	189, 511, 88, 70, 213, 214, 215, 24, 216, 38,
	512, 217, 218, 219, 513, 220, 221, 222, 223, 224,
	225, 514, 123, 226, 227, 228, 229, 230, 25, 141,
	231, 101, 232, 117, 233, 234, 235, 236, 111, 237,
	81, 154, 238, 120, 239, 240, 241, 242, 243, 244,
	245, 121, 90, 246, 247, 249, 188, 187, 250, 40,
	251, 252, 253, 254, 98, 149, 150, 255, 89, 95,
	256, 257, 258, 259, 41, 109, 260, 261, 176, 27,
	262, 263, 138, 264, 148, 265, 266, 267, 136, 42,
	268, 270, 271, 272, 273, 29, 274, 275, 276, 277,
	278, 43, 279, 282, 91, 175, 283, 153, 284, 165,
	285, 116, 79, 286, 287, 288, 289, 291, 292, 293,
	294, 295, 151, 296, 298, 28, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	76, 500, 313, 314, 96, 315, 186, 171, 185, 317,
	318, 75, 166, 160, 162, 163, 159, 161, 156, 164,
	158, 126, 157, 145, 503, 319, 320, 321, 322, 92,
	323, 326, 324, 325, 77, 327, 328, 329, 58, 330,
	331, 332, 333, 334, 335, 336, 337, 105, 85, 338,
	99, 339, 340, 342, 343, 345, 346, 347, 181, 82,
	182, 131, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 31, 110, 358, 359, 47, 360, 32, 170,
	139, 122, 504, 505, 502, 144, 66, 506, 507, 124,
	501, 361, 80, 362, 102, 364, 365, 366, 367, 368,
	369, 370, 129, 371, 128, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	112, 387, 152, 143, 388, 389, 174, 390, 391, 84,
	132, 392, 393, 394, 395, 396, 397, 398, 399, 34,
	400, 401, 402, 35, 403, 404, 405, 78, 406, 407,
	408, 409, 410, 411, 127, 412, 413, 146, 414, 415,
	416, 87, 418, 63, 419, 420, 421, 422, 423, 424,
	93, 426, 425, 427, 428, 429, 430, 172, 431, 432,
	107, 433, 434, 435, 436, 437, 438, 113, 114, 439,
	440, 441, 147, 442, 443, 444, 445, 59, 446, 104,
	447, 67, 448, 450, 449, 108, 451, 452, 453, 454,
	106, 455, 56, 184, 456, 457, 458, 459, 460, 461,
	49, 462, 463, 464, 465, 466, 467, 468, 142, 469,
	471, 50, 472, 473, 474, 97, 103, 83, 475, 476,
	477, 478, 155, 86, 180, 190, 118, 479, 480, 481,
	482, 51, 483, 486, 140, 487, 488, 489, 490, 491,
	492, 493, 133, 494, 495, 496, 497, 125, 499, 57,
	-65, -65, -65, -65, -65, 363, -377, 32, -97, -65,
	-129, -182, -96, -182, -182, -77, 529, 531, 531, 531,
	-96, -103, 531, -103, -103, 531, -73, -65, -136, 485,
	-133, 281, 531, 531, 130, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, -291, 531,
	-434, -129, -300, 23, -13, 541, 532, 39, 55, 30,
	33, 46, 44, 48, 52, 37, 45, 62, 218, -708,
	-710, 389, 399, 421, -214, -179, 102, 531, 40, 23,
	-216, -222, -220, 531, -5, -5, -299, 83, 83, 61,
	-239, 64, 61, 531, 122, 370, -262, 31, 23, -262,
	-434, -603, -423, 354, 31, -19, 28, -5, -672, 531,
	-672, -690, 211, 198, 315, -7, -655, -657, 531, 23,
	-108, 321, 480, 84, -523, -446, -190, -191, -460, -461,
	26, 29, -610, 365, -108, 533, -106, -431, -432, -6,
	-631, 83, -156, 531, 267, 388, -15, -15, -15, -15,
	-15, 29, -604, 29, -7, 531, 370, 31, -622, -621,
	-103, 29, -623, -523, 103, 31, -514, -442, 28, -434,
	531, 74, 332, -523, -434, 464, 74, 29, 21, -643,
	-648, 67, 448, -5, -437, 242, -434, -430, -103, 23,
	130, -514, -514, 541, 61, -721, 117, 514, 168, 335,
	473, 194, 449, -389, 414, 531, 370, 370, -356, 28,
	514, -357, -5, 117, -373, 513, 471, 381, 284, 270,
	-721, 117, -721, 117, 117, 74, 460, 201, 400, 412,
	411, 460, 412, 411, -434, 309, 153, -15, 122, 61,
	-389, 298, 411, 531, -436, 449, 61, 255, 370, -434,
	449, 61, -426, 414, 90, 338, 342, -109, -268, -720,
	70, -268, -268, 70, 346, -37, -37, -434, 61, -721,
	414, -434, -401, 398, 93, -26, 29, 45, -401, 398,
	93, 29, -7, 61, 414, 61, -48, 532, -675, -677,
	-107, -121, 45, 361, 500, 190, -104, -108, 426, 61,
	414, 61, 479, 61, 414, 61, 61, 61, -610, -665,
	449, 225, -614, -728, 527, 68, 61, 117, 40, 31,
	117, 40, 31, 414, -661, 117, -662, 513, 31, 117,
	61, 61, -727, -683, 35, 93, -666, 414, 423, 457,
	61, 255, 74, 47, 418, 254, 317, 324, -268, -268,
	-15, -5, 61, 103, 398, 365, 83, 83, 414, 531,
	61, -108, 355, -434, -7, 61, -727, 414, 61, 255,
	61, -430, -643, -643, -643, 61, 61, -727, 414, 61,
	255, 61, 61, 61, -39, 61, -103, 47, 61, -430,
	387, -103, 387, 387, 387, -430, 61, -434, -434, 398,
	-628, 365, 264, 258, 61, -515, -669, 93, 247, -669,
	61, -623, -515, -669, -669, 61, -389, -389, 61, 61,
	438, 414, 61, -15, -15, -15, -15, -15, 61, 208,
	155, 155, 208, 155, 208, 531, 414, 541, 61, 208,
	-605, -408, -407, 199, 512, 261, 286, 62, 385, 409,
	458, 464, 414, -528, -499, 290, 405, 45, 130, 365,
	6, 6, -17, -15, -13, -7, -15, -7, -108, -271,
	529, 529, -126, 134, -101, 61, 61, 61, 61, 531,
	-123, -129, -101, -101, 56, 56, -101, 531, -101, -128,
	-128, -271, -433, 29, -108, 83, 29, 83, 29, -451,
	-454, -108, -7, -449, -453, -453, -453, -450, -84, 531,
	-7, -7, -433, -623, 29, -523, -402, -402, -402, -434,
	61, -536, -537, 68, 269, 457, -434, 541, -103, 531,
	-5, -180, 541, 532, 61, -16, -16, 246, 422, -453,
	-453, -453, -13, -17, -13, 139, -50, -45, -5, -13,
	-13, -17, 448, 420, 287, 386, 410, -525, 36, 291,
	-14, 541, 532, 532, 64, -517, -518, -525, -518, -475,
	-503, -243, 119, -501, -507, -501, -434, -7, -434, -434,
	-7, -19, -248, 36, 168, 416, -245, -245, -245, -245,
	-245, -245, 532, -436, -24, 359, -23, 194, 411, 427,
	272, -433, 298, 298, 52, 52, 52, 52, 52, 52,
	52, 52, -15, -15, 74, 74, 52, 52, -108, -268,
	-108, -407, 514, -408, 464, 261, 199, 286, 322, 385,
	409, 532, -131, 541, -170, -95, -82, -82, 16, 17,
	530, 542, 66, 503, 427, 541, -60, -63, -67, 534,
	535, 411, 127, 531, -63, 411, 127, -61, -101, 6,
	-61, -154, 359, 430, -16, 541, 83, -163, 94, 95,
	-54, -149, -279, 64, -428, 453, 451, 58, 289, 473,
	67, -434, -278, -108, -15, 56, 58, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, 46, 44, 48, 37, 45, -65, 61,
	47, 31, 49, 43, 50, 41, 260, 357, -167, -166,
	350, 351, 352, 353, 166, -162, 59, 60, -161, -182,
	531, -165, 510, 432, 21, -6, 531, -130, 411, 531,
	-182, 41, 31, -99, 532, 541, -129, -80, 530, -77,
	-129, -156, -129, 532, -82, -124, -101, -76, -75, 51,
	-133, 71, -142, 508, 531, -335, -67, -65, -330, -65,
	531, -101, -101, -101, -101, -65, -87, -12, 4, 498,
	344, 248, 297, 341, 417, -103, -65, -88, -83, -65,
	-82, -89, -66, -67, 534, 535, -155, 411, -85, -83,
	-65, -65, 511, 326, 456, -86, -65, 64, -129, -65,
	-129, -129, -129, -129, 346, -90, -221, -65, -711, -67,
	346, -65, -82, -336, -340, -335, 100, -65, -333, -181,
	-340, -330, -182, -330, -65, -330, 532, -330, -330, -330,
	-711, -279, -129, 532, 532, -301, 85, 31, 532, -65,
	468, 229, 389, -223, 74, -236, 103, 104, -215, -219,
	-5, 86, -5, -279, 541, 527, -217, -220, -97, -224,
	65, -280, -281, -436, -182, 323, -292, 531, -305, -315,
	-325, -306, 127, 125, 126, -5, -132, -71, -334, 166,
	-281, -240, 112, -240, -351, -352, -355, -5, -356, -358,
	-357, 46, -15, 122, -413, 83, 29, -179, 273, -400,
	36, 531, 29, 74, 31, 404, -679, -680, -682, 23,
	321, 458, 484, -683, -673, 532, -674, -675, -679, -692,
	-691, 96, 98, 97, 462, 122, 198, -430, 536, -656,
	509, -658, -663, -659, -675, 4, 74, 321, -7, -434,
	480, -443, -412, -35, -19, -5, -370, -106, 532, 541,
	527, 130, -7, -308, -307, -309, -5, 531, -430, -430,
	-430, -430, -430, -15, -606, 414, 479, 64, 24, -7,
	-608, -609, -613, 295, 354, 478, -351, 122, 29, 284,
	-7, 422, 29, -497, -498, 446, 197, 406, 45, 371,
	265, 469, 309, 4, 232, 476, 103, 23, 31, -262,
	-65, -6, 7, -630, 23, -640, 307, 67, -642, -647,
	-5, -306, 531, -15, 448, -429, 541, -436, 45, -96,
	-262, -262, 387, -108, -103, -403, -7, -7, -7, 505,
	223, 340, -7, -7, -390, -391, -6, -434, -434, 31,
	-356, 28, -108, -7, 531, -377, -395, 83, 503, 503,
	-396, 83, -5, -101, -7, 28, -5, 28, -7, -7,
	-7, -7, 21, 103, 460, 412, 460, 412, -7, 327,
	-7, 21, 103, -7, 327, -434, 411, -523, -46, 110,
	79, 40, 83, 327, -40, -43, -420, 93, 196, 27,
	-10, -6, -401, -404, 398, 93, -7, -7, 74, -434,
	-401, 398, -7, -7, -7, -268, -15, -15, -268, -268,
	-401, 398, -423, 93, -7, -7, -7, -401, 398, 93,
	61, -721, 414, 255, -434, 449, 61, -721, 414, -436,
	398, -608, -609, 365, -7, -7, -523, 532, 541, -107,
	-121, -677, -121, -104, 361, -122, -104, -7, -7, -523,
	-7, -7, -523, -7, -523, -7, 479, -102, -272, 40,
	-7, -7, 47, -7, 28, -65, 47, -7, -7, 531,
	47, -7, -523, -7, -7, -523, 74, 47, 74, 254,
	317, -11, -402, 61, 61, -7, -7, -7, -685, -684,
	-6, -523, 532, 541, 541, 398, -637, 61, 74, -7,
	-7, -523, 74, -7, -523, -7, -7, -523, 74, -7,
	-523, -7, -523, -7, -13, -429, -13, -13, -523, 398,
	398, -26, 61, 61, 400, 201, -11, -498, -7, -11,
	422, -7, -523, -7, -42, -102, 40, -7, -523, 93,
	398, 93, 398, 93, 365, -430, 398, 93, 398, 93,
	365, 196, 22, 27, -7, -7, -103, -34, 28, -309,
	-103, 28, -5, -685, -7, -456, 196, 27, -523, -5,
	-607, 61, -7, -15, -450, 531, -108, -449, -451, 221,
	279, -449, -449, 130, -108, -7, -517, -517, 290, 414,
	406, 103, 61, -433, -433, -433, 74, -433, 530, -101,
	-101, 529, 532, 344, 297, 341, -125, 341, -125, -125,
	-101, 532, 532, 532, 57, 57, 532, -129, 532, -433,
	-17, 23, -7, -15, -7, -15, -433, 321, -433, -433,
	-433, -433, -433, -612, -615, 153, -37, 422, 130, -439,
	36, -523, 64, 531, 61, -512, -269, -124, -101, -108,
	-519, -524, -523, 71, 140, -13, -51, -268, 541, 533,
	45, 45, 45, 45, 45, -520, -529, -6, 70, 532,
	-62, -519, 74, -433, 64, -501, -508, 130, 296, 296,
	343, 427, 272, 427, 272, 97, 411, -530, -103, 47,
	-530, -530, -530, -530, -530, -530, -530, 83, 83, -15,
	261, -15, -530, -530, 321, 52, 23, -15, -15, -7,
	-108, -108, -450, -449, 139, -449, -449, 532, 190, -95,
	-131, -131, 541, -131, -65, -65, -100, -65, 97, -59,
	-63, 66, 36, -101, 6, 531, -129, 334, -174, -157,
	-159, 62, -164, 517, -282, 65, -280, -718, -718, 453,
	451, 453, 451, -718, -434, 57, 42, -65, -65, 61,
	-162, 59, -161, 42, -65, 47, 49, 43, 50, 41,
	260, 357, -167, -166, 64, 357, -168, 36, 168, 155,
	134, 139, 146, -66, -66, -129, -182, 531, -156, 531,
	-129, 41, -97, -65, 530, 530, 541, 532, 532, 532,
	-131, 532, -74, -75, 263, -65, -142, 531, -141, -5,
	531, 65, -337, 47, 192, 155, 542, -339, 509, -349,
	-348, 515, -65, 532, 532, 532, 532, 23, 532, 64,
	532, 541, 532, 532, 372, 532, 14, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, -155,
	52, 45, 62, -66, -66, -66, 532, 532, 48, 64,
	130, 23, -86, -86, -86, 532, 64, -129, 541, 532,
	532, 532, 532, -6, 532, 541, 23, -65, -321, 129,
	-6, 541, 532, -337, 541, 532, -108, -338, 541, 47,
	192, -349, 532, -168, 532, -340, 541, 541, 541, -65,
	-282, 532, 531, 85, -225, 100, 101, 155, 532, 541,
	-97, -224, -222, -65, 532, 541, -225, -65, 120, 541,
	81, -293, 75, 82, 79, 77, 78, 76, -285, -284,
	23, -5, -285, -182, -305, -315, -325, -182, -292, -281,
	-287, -284, 23, -5, -285, -285, -314, 518, 64, 531,
	531, -96, 74, -246, -103, 113, 114, -246, 532, 541,
	-434, -353, 531, -434, -49, 36, 168, -7, -434, -254,
	-439, -7, 23, -389, -14, -434, -436, 29, -678, 67,
	-121, -688, -462, 212, 403, -682, -687, -103, -273, -681,
	130, 532, 541, 40, 527, -688, 74, 33, 122, -692,
	532, 532, 509, 541, 70, 532, 541, 527, -457, 63,
	97, 98, 96, -7, 295, -262, -434, 67, 209, -443,
	-371, 117, -372, -374, 39, 31, 47, 471, 381, 513,
	40, 392, 288, 252, 311, -432, -411, -121, -30, -157,
	-268, -103, 355, 62, 534, 535, 464, 532, 541, -108,
	-601, -602, -103, -430, 64, -7, -273, -273, -37, -418,
	507, -613, -624, -7, 295, 478, -624, 532, -434, -434,
	246, -620, -7, 130, -101, -402, -402, 406, 71, -103,
	47, 371, 371, 68, 474, -402, -179, 29, -413, 532,
	273, 51, -400, -634, 130, 4, 295, 64, 541, -65,
	-32, -429, -648, -262, 414, -262, -283, 65, -283, -13,
	532, 61, 61, 61, -44, -5, 40, 532, 541, 527,
	533, -361, 130, 40, -36, 282, 29, 31, -417, -416,
	439, -373, 270, -65, 531, -368, 307, 531, -395, 531,
	531, -7, -406, 27, 93, 401, 196, -425, -270, -39,
	-427, 402, 93, -368, 29, -433, 29, -433, -7, -7,
	-7, -7, 418, 418, 327, 307, 418, 532, 541, -420,
	-420, -10, -41, -103, 61, -721, 117, 414, 93, 364,
	276, 61, 93, 364, 61, 414, 61, 61, -721, 414,
	-7, -7, -7, 74, -401, 398, 93, -7, -7, -7,
	-7, -401, 398, 93, 61, -39, 61, -675, -121, -121,
	538, -122, 61, -433, 29, -662, -65, -368, 276, 313,
	47, -7, -523, 398, 93, 365, 398, 196, 27, 93,
	365, 541, 532, 527, -108, 355, -108, 61, -638, 83,
	-402, -434, 276, 276, -429, -429, -429, 61, 61, 255,
	-7, -523, -7, 438, 61, 414, 61, 414, 61, 61,
	414, 61, 414, 61, 336, 336, 336, 61, 61, -103,
	31, -433, 29, -433, 532, -270, 93, -273, -108, -15,
	-15, -108, 74, 74, 506, -13, -402, -402, -523, -15,
	530, 530, -101, 532, -127, -127, 532, -433, -108, -433,
	83, -433, 83, -7, 532, 541, 531, -7, -623, 246,
	354, 422, -18, 532, -526, 541, 36, -523, -13, 541,
	-45, -5, 414, 414, 414, 414, 414, -525, 541, -527,
	506, 49, 43, -523, -525, -535, -402, -179, 272, 272,
	-7, -7, 52, -15, 52, -7, -530, -108, 52, 52,
	52, 52, 52, 52, 52, -268, 52, 52, -95, 532,
	532, 532, 530, 66, 36, 455, -129, 532, 541, -164,
	531, 91, 92, -52, 71, -65, -434, -434, -718, -718,
	-718, -718, -434, -65, -65, 42, 42, -65, -66, -66,
	-65, 42, 64, 357, -168, -65, 471, 471, 30, 30,
	532, -65, 532, -129, 532, 541, 532, -77, 532, -103,
	266, -65, 106, -170, -143, -5, -65, -168, 74, 74,
	-330, -330, -338, 70, 166, 532, -108, -65, -167, -65,
	-108, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, 41, 31, 260, -66, -65, -65,
	-65, -108, 532, 532, 532, -129, -65, 532, 541, -221,
	-6, -91, 380, 442, 532, -67, -322, 70, 532, 541,
	-93, 479, -168, -335, -349, -340, -330, 74, 74, -340,
	532, 532, -65, -65, -65, 23, -52, -180, -275, -230,
	531, 74, -179, -179, 102, -219, -225, 527, -220, 122,
	-281, 75, 75, -281, -293, 75, -294, 80, -294, -294,
	-134, 450, -5, 531, -285, -287, -285, -285, 532, -5,
	531, 531, 124, 531, -67, 133, -330, -65, -37, -256,
	-719, 83, -384, 310, -355, -366, -385, -386, 370, -354,
	-359, -360, -357, -5, -353, -392, 74, -389, 505, 531,
	122, 370, 23, -253, -179, 532, -603, -396, -7, -679,
	531, 206, -65, 541, 541, 464, -674, -65, -65, -434,
	-691, -14, 74, 70, -663, -656, -659, 4, -411, 61,
	531, -624, -400, 531, -434, 28, -523, -7, -15, 252,
	47, -377, 503, 531, -66, -434, -422, 201, 70, 253,
	299, -108, -309, -320, 39, 532, 541, -15, -604, 531,
	-122, -384, -353, 531, 370, 140, -622, -418, -623, -402,
	-402, -103, -103, -102, -103, -439, -442, -400, -368, -723,
	286, 385, -625, -627, -5, -636, 61, -635, 21, 63,
	96, 97, 98, -624, -280, -647, 532, 74, -283, -5,
	242, -283, 531, -429, 36, 168, -103, -7, -7, -391,
	-411, -6, 86, -356, 29, -415, -414, 230, -5, 40,
	532, -14, -369, 31, 252, 311, 354, -7, -14, -368,
	-14, -364, -363, -234, -5, -306, 531, 31, 275, 298,
	246, -426, 288, 31, 275, 438, -389, -416, -414, -389,
	288, -427, 93, 464, -37, 438, -5, -7, 418, -7,
	-43, -7, -7, -7, -7, 449, 70, -7, -7, 449,
	70, -7, -7, -7, -7, -7, -7, 61, 276, 61,
	-721, 414, 93, 364, 61, 61, -721, 414, -7, -523,
	464, 538, -7, -7, 532, -7, 313, 61, 414, 61,
	61, -644, -649, 62, 286, 439, -645, -650, 62, 286,
	414, 61, -684, 355, -686, -121, -30, -157, -268, -103,
	532, 532, 532, -7, -639, 36, 531, 398, -7, -7,
	-7, -7, 74, -39, -42, -7, -7, -7, -7, -523,
	-7, -7, -7, -7, -523, 130, 130, 34, 130, 28,
	-7, -103, 211, 198, 29, -5, 464, 23, 83, 83,
	321, -521, 448, 287, 410, 420, 465, 415, -521, 130,
	-433, 530, 532, -7, -7, -433, -615, -612, 422, 246,
	-7, 532, -103, -525, -524, 290, -268, -13, -13, -13,
	-13, -13, -529, -433, 64, -525, 52, 52, -530, 52,
	-530, 52, 532, -532, -103, 47, -532, -532, -532, -532,
	-532, -532, 52, -532, -532, -131, 455, 532, -65, -156,
	-173, 72, 70, -434, -434, -434, -434, -65, -65, 42,
	30, 30, -65, -65, 319, 319, -65, -65, 532, 532,
	-65, -103, -65, 532, -139, 370, 532, -340, 47, 47,
	-340, -171, 148, 532, 532, 64, 64, 41, 260, 42,
	130, 64, 532, 532, -81, -129, 489, 532, 483, 483,
	-322, 70, -67, 132, 155, -65, -94, 541, -65, 354,
	-340, 532, 47, 47, 532, -341, 129, -341, -341, -109,
	-173, 532, 109, -264, -234, 117, -236, -65, -245, -281,
	-281, -295, 83, 74, 75, -281, -671, 531, -13, -284,
	531, -307, -307, -5, -310, -311, -306, -321, 531, 541,
	-218, -228, -237, -238, 51, -258, -259, 531, -37, 150,
	-385, 531, 304, 271, -413, 70, 532, 541, -370, 36,
	-361, -393, 449, 228, -351, -15, 122, -179, 273, -439,
	-705, 36, -400, 531, 74, -688, -313, -676, -107, -104,
	-706, -103, 130, -108, -697, 393, -434, -656, 532, -434,
	-646, 64, 61, -652, 312, 23, -14, 531, 31, -443,
	-372, 31, -429, -429, -65, -262, 23, 40, 83, -15,
	-103, -419, -420, 422, -361, -351, 122, -7, 284, 422,
	23, -393, -671, 273, 30, 45, -638, -402, -642, -65,
	286, 500, 286, 64, 527, 36, 45, 64, -356, -418,
	-5, 40, -368, 532, 252, 476, 299, 253, 309, 532,
	532, 532, 541, 36, -235, -227, 39, -235, -65, 47,
	28, 28, -422, 47, 23, -42, -422, -108, -268, -42,
	-433, -433, 61, 61, -7, -402, -7, -402, 61, -7,
	-7, -7, -7, -7, 449, 70, -7, -7, -7, -7,
	464, -433, -368, -7, -7, -523, -7, 541, -101, -101,
	-108, 541, -101, -101, -7, -523, 513, -65, 61, 276,
	-13, -13, -15, -13, 29, -433, -103, -103, -433, -108,
	-108, -7, -7, -7, 61, 64, -517, -433, -433, -433,
	532, -7, 73, 506, -519, -433, -530, -530, -530, -530,
	52, -532, 532, 532, 532, -137, 484, -65, -53, -65,
	-65, -65, 532, -131, 70, 532, 532, -7, -65, -66,
	64, -65, -65, -65, 532, 541, 532, 531, -322, 532,
	532, 435, 155, 532, -340, -331, -332, -330, -342, -343,
	40, -344, 136, 47, 49, 43, 50, 138, -340, -92,
	306, 354, -137, -302, 87, 97, 110, 532, 541, -7,
	155, -295, 531, -65, -281, 531, -13, 532, -307, 532,
	532, 532, 541, -312, 23, 123, -323, -324, -66, 40,
	-65, -225, -228, -229, 30, -229, 105, 31, -257, 115,
	116, 149, 47, 154, 151, 152, 42, 153, 148, -260,
	-265, -6, -258, -103, -413, -16, -367, 227, 230, 233,
	251, 298, 288, 308, 438, 439, 21, -367, -49, -5,
	-359, 507, -385, -7, 27, 98, 380, 532, -353, -434,
	-439, -7, 513, 216, 58, 23, -264, -436, 541, 532,
	-121, 266, -689, -4, -462, 464, -693, 130, -698, -700,
	-695, 348, 502, -704, 64, 532, -282, 532, 433, 433,
	-653, -654, 478, 354, -624, -179, 532, 29, -394, 83,
	-394, 532, -378, 337, 298, 531, -7, 532, 541, -7,
	422, 532, -434, -418, 246, -7, -179, 531, -723, -627,
	531, -639, 64, 532, -449, -641, 23, -641, -15, -411,
	531, 531, 531, -370, -379, 303, -379, 392, -379, -363,
	-156, 62, -399, -15, -15, 532, 29, 29, 531, 23,
	-320, -7, -7, -24, 93, -24, 93, -7, 61, -7,
	-402, 61, -649, -156, -451, -449, 531, -650, 531, 531,
	531, 532, -7, -7, -729, 36, 518, -729, 34, -729,
	130, -320, 532, -519, -519, 74, -7, -525, -530, -138,
	-140, -5, -169, -172, -65, -175, -177, -176, -178, 531,
	238, 408, 293, -144, 388, 127, 294, -129, 130, -66,
	-129, -90, 499, 354, -346, 168, 36, 541, 23, 532,
	74, -65, 134, 139, -345, -343, 532, 306, -303, 90,
	89, 88, 93, -282, -234, -179, -13, -129, 532, 532,
	-314, -311, 531, -316, -317, -5, 541, 532, 23, -66,
	-329, 23, 106, -65, 106, 105, -660, -660, -660, -660,
	152, 31, 47, -103, 532, 541, -266, -272, -268, 536,
	40, 531, -282, -49, 532, -392, 531, -370, -413, 127,
	127, -384, -385, -353, -253, 506, 513, 513, -179, 532,
	-396, -676, -679, 540, -108, -701, 51, -724, 262, -700,
	-696, 67, 411, -368, -434, 109, 36, 36, -624, 478,
	-705, -400, -434, 307, -375, 354, -383, -380, -381, 74,
	79, 369, 429, -424, 531, -65, -651, 279, -420, -418,
	-7, -384, -353, 140, -418, -439, 532, -671, -626, 7,
	-280, -641, 301, 205, -365, -362, -9, -129, -129, -429,
	531, -429, -434, -429, 531, -163, -389, -235, -65, 298,
	-38, 83, 449, 449, -7, -24, 93, -7, -712, 130,
	-712, -713, -713, -713, -65, -17, -17, -15, -15, -13,
	-433, -526, -433, -521, -418, -433, 541, 23, 541, 532,
	531, 531, 425, 532, -145, -146, 37, 467, 120, -65,
	-145, -145, -65, 532, 532, 155, -347, 145, 144, 140,
	134, 140, 134, 141, 142, -332, -6, 136, 532, 74,
	-14, 91, 91, -216, 532, 532, -307, 532, 541, -108,
	130, -324, 541, -6, -341, -5, -231, -232, 109, 97,
	98, -233, 109, 96, 70, -103, -103, -103, -103, -14,
	536, 47, -14, 536, -265, -261, -267, -272, -392, -393,
	-387, -388, -5, -306, 531, -49, -385, -413, -361, -439,
	506, 506, -705, -398, 303, 531, -688, 273, 531, -694,
	411, 437, -660, 130, -440, 315, 200, 286, 286, 23,
	531, 449, 309, -381, 74, -380, 74, 97, 98, -423,
	532, 23, -15, -418, 422, -361, -7, 531, 532, 541,
	532, 541, -101, 532, 532, -394, -14, -394, -262, -394,
	-156, -164, -163, 532, -424, -65, -7, -7, 449, -421,
	391, 87, 509, -421, 532, 532, 532, 532, -729, 64,
	-140, -141, -172, -129, -129, 531, -147, 270, -146, 377,
	283, 411, 377, 283, -147, -147, -345, 143, 143, 140,
	140, 134, 140, 134, 140, 138, 136, 93, 70, 70,
	-282, -286, 23, -135, 399, 532, -317, -318, -319, 4,
	40, 31, 47, 128, 124, -67, 123, 110, 93, 110,
	-226, 102, 531, 40, 86, 107, 108, -14, 536, 532,
	541, -393, 532, 541, -227, -227, -65, -392, -413, -49,
	-385, -377, 531, -264, -723, -65, -703, -5, 262, -444,
	110, -447, 531, -179, -185, -186, -187, -210, -297, -449,
	-449, -179, -7, -382, 354, 35, 24, 93, -382, 532,
	440, -644, -7, 422, -418, 532, 7, -362, 61, -368,
	532, -368, -378, -282, 532, -164, -24, -24, -7, 70,
	-449, -15, -519, 532, 532, -169, 120, 71, 455, 354,
	30, 532, 74, 74, 140, 140, -343, -5, -14, -14,
	-5, 531, -319, -66, -66, 47, -66, -321, 531, -216,
	-236, -215, 86, 531, -267, -388, -399, -399, 532, -393,
	-49, -392, -413, -400, -397, -234, 532, -671, 532, 411,
	-181, -182, -445, -448, -447, 541, 541, -705, 195, 47,
	40, -418, -7, 531, -383, -368, -24, -15, -433, 532,
	411, 501, -146, 146, 146, 74, 61, 83, 93, 93,
	-65, 123, -326, -327, -5, 131, 155, 532, -129, -227,
	-392, -393, -49, -393, 532, 541, -398, 531, -701, 532,
	540, 61, 64, -262, -262, -418, -129, -368, 147, 147,
	136, -68, -671, 166, -5, -5, -5, 532, -316, 532,
	541, 130, -108, -350, 128, -226, -226, 102, 532, -399,
	-393, -392, -282, -234, -377, -699, -702, -101, 6, -103,
	-6, 273, -448, 433, 433, 532, 40, 531, 532, -342,
	-327, 124, -328, -348, 29, 128, 7, -236, -393, -400,
	532, 541, -723, 36, 36, -68, -82, 532, -346, -328,
	-328, 7, 123, 23, 155, -393, -702, -671, 286, 286,
	83, -131, -347, -346, -342, 531, -7, -226, -282, 531,
	-449, -449, -5, 532, -345, -347, -326, 123, -699, -345,
	532, 531, 532, -326, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	3022, 3022, 1550, -2, 0, 1832, -2, 1895, 1895, 0,
	0, 0, 0, 0, 3022, 0, 3022, 3022, 0, 0,
	0, 0, 0, 1637, 1909, 1905, 0, 1905, 2353, 2354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 174, 0, 0, 0, 0, -2, 1541, 1636,
	0, 2329, 2330, 1672, 0, 1583, 0, 0, 0, -2,
	3025, 3020, 3021, 2777, 0, 0, 0, 0, 1637, 0,
	1831, 0, 0, 2921, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 1960,
	1961, 0, 0, -2, 2133, 2898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 0, 0, 0, 2364, 139, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2360, 2361, 2362, 0, 0, 2366, 2367, 2368,
	0, 0, 0, 1878, 0, 1881, 1882, 1883, 1884, 1885,
	1886, 0, 0, 0, 2274, 333, 444, 234, 478, 2279,
	2725, 0, 561, 217, 434, -2, 425, 511, 2740, 149,
	150, 151, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 426, 427, 428, 429, 430,
	431, 432, 433, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 2288, 2280, 561, 478, 444, 2284, 2285, 217,
	234, 333, 351, 425, 434, 511, 3025, 2777, 3025, 0,
	3025, 0, 3010, 444, 478, 561, 432, 3012, 478, 3233,
	159, 0, 3087, 3088, 3092, 2549, 2549, 2549, 198, 2549,
	0, 0, 3087, 2549, 2300, 1905, 1637, 0, 2313, 2314,
	2315, 2316, 2317, 2318, 2319, 2714, 1903, 0, 1908, 2325,
	0, 1904, 2331, 561, 478, 444, 2335, 0, 2341, 0,
	0, 2355, 2356, 2357, 2358, 2359, 3203, 1657, 3207, 3209,
	0, -2, -2, -2, -2, 190, 413, 3228, 3228, -2,
	-2, 3225, 3226, 1255, 0, 0, 1253, 3208, 3229, 3230,
	3243, 3245, 392, 3247, 3249, 3250, 3251, 3254, 3255, 1472,
	1254, 0, 173, 0, 1895, 3299, 3302, 3303, 3305, 0,
	3307, 0, 1392, 0, -2, -2, 1469, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	-2, 0, 2930, 2930, 2930, 0, -2, 1554, 1555, 0,
	1555, 0, 1588, 0, 1671, 1673, 1582, 1611, 1612, 165,
	0, 0, 1633, 408, 1638, 168, 1634, 0, 2, 3018,
	0, 3019, 2776, 2764, 0, 0, 2770, 0, 0, 0,
	1616, 0, 0, 0, 3234, 3235, 3236, 3237, 3238, 2549,
	0, 0, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 1895, 2920, -2, 0, -2, 302, 2063, 1901,
	184, 0, 221, 283, 1538, 0, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	2582, 0, 0, 302, 2063, 302, 0, 0, 2646, 302,
	338, 2063, 2170, 2171, 2172, 2173, 2174, 2758, 2759, 2760,
	2761, 0, 0, 0, 2820, 0, 0, 168, 302, 133,
	2785, 0, 0, 0, 2063, 2063, 1962, 1963, 1964, 1965,
	0, 302, 0, 3367, 302, 0, 0, 302, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3374,
	0, 3367, 0, -2, 3179, 0, 2170, 0, 221, 283,
	0, 0, 0, 302, 3367, 0, 3367, 0, 0, 0,
	0, 0, 0, 0, -2, 3035, 0, 338, -2, 3035,
	0, 0, 302, 0, 0, 0, 3074, 0, 302, 137,
	186, 302, 137, 160, 0, 302, 137, 302, 1892, 1458,
	0, 1459, 1460, 1461, 1462, 1463, 1272, 1466, 1476, 1479,
	1480, 1481, 1482, 1483, 1519, 264, 1476, 1476, 1476, 1489,
	1490, 1491, 1492, 1493, 1515, 1515, 1258, 1512, 1467, 1468,
	1517, 1505, 1517, 1517, 1500, 0, 1517, 137, 302, 0,
	0, 0, 221, 283, 137, 302, 3183, 0, 137, 302,
	137, 302, 3181, 137, 302, 137, 302, 137, 302, 2383,
	-2, 302, 2566, 302, 0, 338, 3040, 302, 2168, 3038,
	302, 3042, 302, 2363, 0, 2365, 0, 1876, 1877, 1880,
	145, 0, 0, 2275, 444, 2276, 219, 0, 0, 2290,
	2291, 169, 2277, 0, 0, 0, 0, 0, 0, 2728,
	2729, 2730, 2753, 2754, 2731, 2756, 2757, 0, 2281, 0,
	2283, 3006, 3007, 3008, 3016, 3009, 0, 3017, 3011, 3015,
	0, 0, 0, 0, 0, 3089, 0, 3094, 0, 3095,
	3096, 3097, 3098, 0, 0, 0, 0, 1637, 2302, 0,
	2304, 2312, 565, 2307, 2308, 2309, 2713, 1905, 1902, 0,
	2322, 2324, 2326, 168, 0, 2332, 0, 2334, 0, 2344,
	0, -2, 145, 145, 145, 2348, 2349, 2350, 2351, 0,
	0, 3210, 0, 3227, 0, 0, 0, 3228, 3228, 0,
	0, 0, 3228, 3228, 0, 3228, 3228, 1256, 1257, 3239,
	0, 3246, 3248, 3252, 0, 3258, 171, 3401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2364, 1887, 1888, 1889, 1890, 1891, 0,
	0, 3304, 3306, 0, 1393, 1277, 0, 1280, 2985, 1567,
	1564, 0, 2982, 2983, 1568, 0, 0, 0, 1576, 0,
	2928, 2929, 0, 0, 0, -2, 0, 1552, 1553, 1678,
	1587, 1589, 1593, 1594, 1131, 0, 0, 0, 0, 0,
	0, 2032, 1198, 1221, 1222, 1285, 0, 1225, 1226, 1227,
	524, 0, 1232, 1233, 528, 1520, 371, 557, 1275, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 0, 0, 0,
	1408, 1543, 1545, 1289, 1235, 1236, 1237, 1238, 1239, -2,
	538, 535, 580, 1291, 1292, 1294, 1296, 1298, 1300, 1301,
	1302, 1303, 1304, 1305, -2, 0, 525, 549, 553, 554,
	560, 563, 564, 550, 521, 527, 544, 568, 569, 571,
	573, 570, 574, 575, 537, 534, -2, 540, 541, 545,
	539, 536, 543, 576, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 546, -2, -2, -2, -2, -2,
	-2, -2, 1494, 1495, 1496, 1497, 1678, 0, 1613, 166,
	1614, 0, 0, 0, 1635, 0, 0, 0, 1448, 3023,
	0, 0, 2766, 0, 2768, 2769, 2771, 0, 1796, 0,
	1617, 0, 1818, 0, 0, 0, 2549, 302, 0, 2549,
	0, 2597, 302, 132, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1966, 0, 2555, 0, 3374, 2061,
	2062, 0, 1900, 185, 0, 2580, 0, 2899, 0, 0,
	2581, 0, 0, 0, 0, 0, 2587, 0, 0, 2605,
	0, 0, 0, 302, 2650, 0, 0, 0, 0, 3045,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2854,
	0, 0, 0, 0, 0, 3045, 3045, 2143, 2156, 2243,
	0, 2164, 0, 0, 0, 2243, 2243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2235,
	0, 0, 0, 2145, 2147, 0, 0, 0, 3366, 0,
	0, 0, 2148, 0, 2600, 0, 2041, 0, 0, 0,
	2045, 2060, 2048, 0, 0, 0, 0, 2063, -2, 2058,
	0, 2150, 2243, 0, 0, 3367, 302, 0, 0, 302,
	0, 2336, 0, 2337, 0, 0, 0, 2382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3384, 3374, 3370,
	0, 0, 3389, 3373, 2287, 3375, 3388, 3380, 0, 3382,
	3383, 3385, 3386, 0, 2571, 0, 0, 0, 0, 0,
	0, 3176, 0, 0, 0, 3146, 3366, 0, 0, 3150,
	3151, 3152, 3153, 0, 0, 3158, 0, 0, 0, 0,
	3163, 0, 2502, 3177, -2, 0, 0, 3063, 3064, 0,
	0, 0, 0, 0, 2377, 0, 0, 0, 0, 3176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3176,
	0, 0, 0, 0, 0, 0, 2643, 2644, 0, 0,
	0, 0, 0, 0, 0, 0, 2879, 2880, 0, 0,
	0, 0, 0, 0, 3047, 0, 0, 0, 0, 0,
	3047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3186,
	0, 3187, 0, 2612, 1895, 0, 0, 0, 1870, 0,
	0, 1873, 0, 0, 2245, 135, 136, 0, 0, 2247,
	0, 0, 0, 2250, 0, 1450, 1454, 1458, 1464, 0,
	1259, 1260, 1261, 1262, 1263, 1264, 1273, 1477, 1476, 0,
	1484, 0, 1485, 1486, 1487, 1488, 0, 1509, 0, 0,
	0, 1511, 1507, 1516, 0, 1498, 1499, 1517, 1517, 1503,
	2252, 0, 137, 302, 0, 138, 0, 302, 0, 302,
	2272, 0, 0, 0, 2262, 0, 2264, 0, 0, 2266,
	0, 2268, 0, 2270, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 1879, 2369, 2370, 2371,
	2372, 0, 0, 2657, 0, 0, 2732, 2733, 2289, 2292,
	2293, 0, 2735, 2726, 2736, 2738, 2742, 2744, 2745, 1866,
	1867, 1868, 1869, 2737, 2739, 2741, 2727, 2746, 2747, 0,
	2750, 2751, 2752, 2734, 2762, 2763, 2282, 432, 3014, 1637,
	0, 2903, 0, 3099, 0, 440, 0, 291, 398, 428,
	246, 263, 326, 327, 381, 434, 471, 483, 0, 3133,
	3093, 0, 0, 162, 164, 0, 0, 0, 3133, 0,
	2301, 1637, 0, 2306, 2310, 2311, 1907, 2325, 0, 2328,
	2325, 2333, 2339, 2340, 0, 0, 0, 0, 132, 2352,
	3206, 3198, 3199, 3200, 3201, 0, 3211, 3212, 3213, 3214,
	0, 0, 3217, 3218, 3219, 0, 0, 3222, 0, 0,
	0, 3253, 0, 2167, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 283, 0, 0,
	0, 0, 0, 0, 0, 1895, 3298, 1394, 0, 1541,
	0, 0, 0, 1401, 1403, 0, -2, 1278, 1281, 1282,
	1470, 152, 153, 154, 155, 156, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 1279, 0, 1558, 2984, 1559, 1566,
	1569, 0, 0, 1571, 0, 1573, 0, 2980, 2981, 2986,
	2994, 2995, 0, 3004, 3005, 2992, 0, 2996, -2, 0,
	0, 1579, 0, 1584, 1585, 1586, 2946, 2947, 1948, 2985,
	1567, 1596, 0, 0, 0, 733, 701, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 0,
	694, 948, -2, 0, -2, 1035, 866, 1169, 1171, -2,
	845, 0, 0, 1592, -2, 945, 1428, 157, 158, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 695, 696, 697, 698, 699, 700,
	702, 703, 704, 705, 706, 707, 708, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 841, 842, 843, 844,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 946, 947, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1136, 1137, 1151, 1154, 1155, 0, 0, 0, 1223, 1448,
	0, -2, 1228, 1229, 1230, 1231, 0, 0, 0, 0,
	-2, 1248, 0, 1250, 1272, 0, 0, 1407, 1545, 0,
	2958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1351, 0, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1748, 1748,
	0, 0, 0, 0, 0, 0, 0, 0, 1596, 0,
	0, 0, 1639, 1643, 0, 0, 1650, 0, 0, 0,
	0, 1430, 1432, 0, 0, 1546, 0, 0, 3024, 2765,
	2767, 0, 0, 2775, 1931, 1798, 0, 0, 0, 0,
	1596, 1809, 0, 0, 1285, 1618, 1656, 0, 0, 1827,
	1827, 1824, 1825, 1969, 0, 0, 2121, 0, 0, 2142,
	0, 2594, 2596, 0, 0, 0, 302, 131, 2481, 0,
	2481, 0, 2505, 2506, 0, 0, 0, 2579, 0, 0,
	0, 0, 0, 0, 2720, 2719, 2721, 2722, 2723, 2724,
	-2, 132, 2558, 3384, 2021, 0, 1473, 0, 2802, 2804,
	0, 0, 1539, 1692, 0, 0, 0, 0, 0, 0,
	2589, 0, 2602, 0, 2637, 1969, 0, 0, 0, 2649,
	2645, 0, 0, 2665, 2666, 0, 3027, 0, 302, 2549,
	0, 0, 0, 2819, 2826, 0, 0, 0, 0, 2785,
	2861, 0, 470, -2, 2549, 2869, 0, 2784, 0, 0,
	0, 3026, 3028, 0, 0, 0, 0, 2242, 0, 2207,
	2208, 0, 0, 2228, 0, 0, 0, 0, 2175, 302,
	0, 2199, 0, 0, 2078, 0, 2032, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2221, 0, 0, 2223, 2224, 0,
	2229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2042, 0, 2046, 2051, 2052, 2043, 2044, 0,
	2059, 2049, 2050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2152, 2243, 0, 0, 0, 0, 2154, 2243,
	0, 0, 2637, 0, 0, 0, 0, 2374, 2375, 0,
	0, 2470, 2471, 2472, 2473, 2475, -2, 2477, 0, 0,
	0, 0, 3368, 0, 0, 0, 0, 0, 3369, 2286,
	471, 0, 3376, 0, 3387, 3381, 0, 0, 2241, 0,
	0, 0, 0, 0, 2574, 0, 2688, 0, 0, 0,
	0, 0, 3143, 3147, 3175, 0, 2501, 434, 444, 478,
	0, 0, 0, 0, 0, 3156, 3157, 3159, 3160, 3161,
	3162, 3164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2837, 0, 0, 3144, 434, 0, 0,
	0, 2857, 2859, 2858, 2860, 0, 0, 3145, 434, 0,
	0, 0, 0, 0, 2642, 0, 2647, 2648, 0, 2873,
	0, 2874, 2785, 0, 0, 2881, 0, 0, 3367, 0,
	2808, 0, 2809, 2812, 0, 3029, 3031, 0, 0, 3032,
	0, 0, 3030, 3033, 3034, 0, 2821, 2822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	2610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3072, 3073, 0, 0, 0, 0, 0,
	1871, 1872, 137, 187, 137, 161, 137, 0, 1893, 137,
	0, 0, 1451, 1455, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 137, 2254, 0, 0, 0, 0, 0, 0, 3184,
	137, 0, 137, 3182, 137, 137, 137, 2384, 137, 0,
	-2, 2567, 2568, 0, 0, 2169, 3041, 3039, 3043, 2718,
	0, 0, 0, 0, 2659, 0, 170, 0, 1272, 0,
	3013, 3231, 0, 3232, 0, 3100, 3101, 0, 0, 3104,
	3105, 3106, 3107, 3108, 3109, 0, 3111, 3134, 3136, 3112,
	3113, 3114, 0, 0, 0, 0, 0, 3068, 0, 0,
	0, 0, 3090, 2548, 0, 0, 3087, 137, 0, 2303,
	2305, 2325, 1906, 2321, 2327, 2323, 2344, 2343, 2342, 2345,
	2346, 2347, 0, 0, 0, 3202, 3215, 3216, 3220, 3221,
	3223, 3224, 3242, 172, 3256, 2166, 0, 0, 0, 3263,
	3265, 3267, 3399, 3400, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1395, 0, 0, 1540, 1541, 1541, 1541, 0, 0,
	1283, 1280, 1565, 0, 1574, 0, 0, 0, 2997, 0,
	0, -2, -2, 0, 2993, 3002, 3003, 2998, -2, -2,
	2999, 1570, 1577, 0, 1575, 0, 0, 1951, 1946, 1947,
	1562, 1563, 1653, 0, 1677, -2, -2, 333, 294, -2,
	0, 183, 1590, 1132, 1133, 0, 1135, 1138, 1139, 1140,
	1141, 1142, 1143, -2, -2, -2, -2, -2, -2, 1150,
	1152, 1153, -2, 1431, 1433, 0, 1546, 0, -2, 0,
	1168, 0, 1173, 1175, 1177, 0, 1190, 1192, 0, 1447,
	1434, 1435, 1436, 1437, 1438, 0, 0, 1547, 1185, 1548,
	0, 0, 1425, 1426, 1427, 1591, 0, 1172, 0, 0,
	1189, 2030, 0, 1286, 1285, 0, 0, 0, 1416, 1417,
	0, 0, 0, -2, 1541, 1251, 0, 1413, 1409, 0,
	2958, 0, 1288, 0, 0, 1739, 1131, 0, 1744, 1782,
	0, 0, 0, 0, 0, 0, 0, 0, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 0, 0, 0, 1403,
	1350, 0, 0, 1199, 0, 0, 0, 557, 0, 0,
	1403, 0, 0, 0, 0, 0, 1448, 0, 1359, 0,
	0, 0, 0, 0, 0, 0, 1373, 1376, 0, 0,
	0, 0, 0, 1739, 0, 1733, 0, 1403, 1742, 1782,
	0, 1731, -2, 1447, 0, 1748, 1345, 0, 0, 0,
	0, 1653, 0, 1615, 1651, 0, 1641, 0, 167, 1449,
	2772, 2773, 2774, 1953, 0, 0, 1803, 1804, 0, 1805,
	1285, 1802, 1797, 1656, 0, 0, 0, 1814, 1813, 1953,
	0, 1817, 1597, 1659, 1659, 0, 1603, 0, 1668, 1659,
	1659, 1682, 430, 577, 542, 165, 1389, 1390, 1391, 533,
	0, 0, 1826, 0, 0, 1968, 1970, 164, 1972, 1973,
	1974, 0, 1998, 0, 148, 0, 0, 2718, 0, 0,
	0, 0, 0, 0, 0, 0, 2495, 2480, 2482, 0,
	0, 0, 2487, 2488, 0, 2460, 2461, 2463, 2495, 0,
	2508, 2510, 2511, 2512, 2514, 2507, 0, 2578, 0, 0,
	0, 0, 2671, 2675, 2673, 1467, 0, 0, 2918, 2549,
	0, 2554, 0, 0, 0, -2, 2570, 1474, 2801, 0,
	0, 0, 2905, 0, 1691, 1693, 0, 2684, 2593, 2583,
	2584, 2585, 2586, 0, 2604, 0, 0, 0, 2609, 2063,
	2013, 2636, 2634, 0, 0, 0, 0, 0, 0, 0,
	2646, 0, 0, 3044, 3048, 0, 0, 0, 0, 0,
	0, 0, 3058, 3059, 0, 0, 0, 0, 0, 2121,
	0, 0, 2142, 2828, 0, 0, 2843, 2844, 0, 2849,
	2851, 2852, 0, 168, 2785, 2856, 0, 2549, 0, -2,
	2871, 2871, 0, 0, 0, 2165, 2405, 0, 0, 2204,
	2206, 0, 2227, 3319, 0, 2449, 2452, 0, 145, 0,
	2177, 302, 1996, 0, 0, 0, 2440, 0, 0, 0,
	0, 0, 1897, 0, 2440, 302, 137, 302, 137, 2201,
	2205, 2209, 2212, 2213, 0, 0, 0, 0, 2217, 0,
	2214, 2215, 2216, 2220, 0, 2222, 0, 2225, 2230, 2797,
	2798, 2799, 0, 0, 0, 2789, 2791, 445, 193, 265,
	0, 2017, 2144, 2157, 2243, 0, 0, 2413, 0, 2239,
	2146, 0, 0, 2407, 3326, 2047, 2053, 2054, 2055, 2057,
	2149, 0, 2601, 0, 2409, 0, 3328, 2151, 2243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 2385, 3308, 3335, 2373, 0, 0,
	2469, 0, 2468, 1476, 2474, 1476, 1476, 2386, 3309, 3336,
	2387, 3310, 3337, 2388, 3338, 3371, 3372, 3377, 3378, 3379,
	2389, 0, 2572, 137, 302, 2240, 2573, 3311, 0, 0,
	2440, 2577, 3339, 2392, 3313, 3340, 0, 0, 0, 3154,
	3155, 2393, 3037, 0, 0, 0, 0, 3314, 0, 3165,
	3169, 3343, 2378, 0, 0, 0, 2839, 0, 0, 2399,
	3317, 3346, 0, 2400, 3357, 2401, 3318, 3347, 0, 2402,
	3348, 2403, 3355, 2404, 2785, 2875, 2785, 2785, 3358, 0,
	0, 0, 0, 0, 2810, 2811, 2430, 3046, 3036, 2431,
	0, 2432, 3350, 2433, 2847, 1874, 1875, 3321, 3351, 0,
	0, 0, 0, 0, 0, 3398, 0, 0, 0, 0,
	0, 0, 0, 0, 2438, 0, 0, 0, 0, 137,
	2682, 302, 137, 0, 3334, 3188, 0, 0, 3349, 1897,
	2611, 0, 2614, 2615, 2616, 0, 2618, 2619, 2620, 221,
	283, 2623, 2624, 0, 2626, 3312, 0, 0, 0, 0,
	0, 0, 0, 2244, 2246, 2248, 0, 2251, 1456, 0,
	0, 0, 1465, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	0, 1475, 1518, 1515, 1513, 1514, 1515, 0, 1504, 2253,
	137, 0, 137, 0, 137, 0, 2273, 0, 2263, 2265,
	2267, 2269, 2271, 0, 2563, 2565, 0, 0, 0, 2693,
	0, 2569, 0, 0, 2658, 2278, 2743, 2748, 0, 2904,
	3125, 3120, 3122, 0, 0, 3103, 3110, 3138, 0, 0,
	0, 0, 0, 0, 0, 3133, 3127, 0, 0, 3091,
	163, 3133, 0, 3070, 0, 2320, 2338, 0, 3204, 3205,
	3257, 3259, 3266, 3260, 3261, 0, 0, 3268, 3286, 3287,
	3269, 3270, 3271, 3272, 3273, 3274, 3275, 0, 0, 0,
	263, 0, 3279, 3280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1396, 0, 1402,
	0, 0, 0, 0, 1404, 1405, 0, 1279, 1572, 2987,
	0, 2990, 0, 3000, 3001, 0, 0, 1578, 2948, 1951,
	1522, 0, 2950, 0, 2932, 0, 1595, 0, 0, 174,
	174, 174, 174, 0, 182, 0, 0, -2, -2, 0,
	0, 0, 1186, 0, -2, 1170, 1174, 1176, 1178, 0,
	1191, 1194, 0, 1447, 0, 1193, 1196, 0, 0, 1439,
	1440, 1441, 1442, 0, 0, 0, 1187, 0, 0, 0,
	0, 2031, 1224, 1449, 1414, 1415, 0, 1234, 1521, -2,
	0, 0, 0, 1410, 0, 0, 1287, 0, 2956, 2957,
	2961, 0, 1447, 0, 0, 0, 0, 1742, 0, 1723,
	1781, 0, 0, 1293, 1295, 1297, 1299, 0, 1308, 0,
	1309, 0, 1311, 1312, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1201, 1202, 1216, 1314, 1315, 0, 0,
	0, 0, 0, 0, 0, 1320, 0, 1358, 0, 1322,
	1323, 1324, 1325, 0, 1330, 0, 0, 1379, 0, 0,
	0, 0, 1336, 1447, 0, 1338, 1782, 1748, 0, 0,
	0, 1748, 1341, 0, 1343, 0, 0, 0, 0, 0,
	2932, 1674, 1637, 1642, 1795, 0, 1934, 0, 0, 0,
	1807, 1953, 1810, 1811, 0, 0, 1816, 1654, 242, 0,
	0, 0, 0, 0, 1630, 1630, 1630, 1628, 1599, 1658,
	0, 1663, 1601, 1659, 1668, 1659, 1659, -2, 1603, 0,
	1605, 1664, 0, 1663, 1607, 1609, 1679, 0, 0, 0,
	0, -2, 0, 2063, 1828, 1829, 1830, -2, 2111, 0,
	1978, 2113, 0, 1998, 2125, 0, 0, 2120, 2549, 0,
	2695, 3243, 0, 2141, 0, 2597, 2136, 0, 2481, 0,
	2476, 2457, 2493, 0, 0, 2483, 2484, 2489, 2485, 2486,
	0, 2459, 0, 0, 0, 2458, 0, 0, 0, 0,
	2667, 2668, 0, 0, 0, 2674, 0, 0, 0, 3193,
	3194, 3195, 3196, 0, 0, 2142, 0, 0, 0, 2557,
	2020, 0, 2023, 2024, 0, 0, 2069, 2032, 0, 0,
	0, 0, 0, 2026, 0, 2803, 2805, 2778, 2779, 2780,
	2781, 2782, 2783, 371, 1526, 1527, 0, 2591, 0, 1697,
	0, 2683, 2685, 2588, 0, 2606, 2607, 2608, 2605, 2627,
	0, 2635, 2630, 2638, 2631, 2633, 2632, 2111, 1998, 0,
	0, 2650, 2013, 0, 3049, 3050, 3051, 0, 0, 3054,
	3055, 0, 0, 0, 0, 3062, 2718, 0, 2142, 2440,
	0, 0, 2818, 2835, 0, 2825, 0, 0, 0, 0,
	0, 2855, 2862, 2871, 0, 2871, 2866, 0, 2868, 2785,
	0, 0, 0, 0, 2226, 2795, 2796, 2448, 0, 0,
	0, 2236, 0, 2008, 2237, 2238, 0, 0, 1992, 1995,
	0, 2077, 2136, 0, 0, 2081, 0, 0, 2440, 0,
	0, 2135, 2179, 0, 0, 0, 0, 2192, 0, 2198,
	2035, -2, 0, 2200, 0, 2196, 0, 2203, 2210, 2218,
	2211, 2219, 2231, 2232, 0, 0, 2233, 2788, 0, 2792,
	2793, 2794, 2016, 2018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2411, 0, 3330, 0, 2153, 2243, 0, 0, 2415, 0,
	3332, 2155, 2243, 0, 0, 2628, 0, 2376, 2466, 2467,
	0, 1476, 0, 2575, 0, 2687, 0, 2690, 0, 3148,
	0, 2394, 3341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3359, 0, 0, 0, 0, 0, 2841, 0,
	2836, 0, 0, 0, 2878, 2876, 2877, 0, 0, 0,
	2429, 3356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2678,
	0, 3189, 0, 3191, 3185, 0, 0, 2613, 0, 0,
	0, 0, 0, 0, 0, 3075, 3076, 3077, 3342, 137,
	1457, 1452, 0, 1274, 1508, 1510, 1506, 2255, 0, 2257,
	0, 2259, 0, 137, 2561, 0, 0, 2663, 0, 2716,
	0, 0, 0, 0, 3133, 0, 0, 3123, 3102, 0,
	3135, 3137, 0, 0, 0, 0, 0, 3069, 0, 3128,
	3129, 3130, 3131, 3132, 137, 0, 3133, 3197, 3262, 3264,
	0, 0, 0, 0, 0, 0, 3284, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1541, 1397,
	1399, 1400, 1284, 2988, 0, 2991, 0, 1423, 0, 2949,
	0, 1949, 1950, 2945, 0, 1652, 175, 176, 0, 0,
	0, 0, 181, 1134, -2, 0, 0, -2, 0, 0,
	-2, 0, 0, 1195, 1197, -2, 1444, 1446, 0, 0,
	1549, 0, -2, 0, 1420, 0, -2, 1418, 1396, 1252,
	1406, 1412, 0, 0, 2963, 2960, 0, 1748, 0, 0,
	1735, 1736, 1748, 0, 1780, 1290, 0, 1360, 0, 0,
	1200, 1203, 1204, 1205, 1206, 1207, 1208, -2, -2, -2,
	-2, -2, -2, 1215, 0, 0, 1219, 1371, 0, 1354,
	1355, 0, 1317, 1318, 1319, 1357, 0, 1326, 0, 1374,
	1375, 0, 0, 0, 1332, 1700, 0, 211, 1333, 0,
	1388, 0, 1748, 1734, 1747, 0, 1732, 0, 0, 0,
	1342, 1344, 1727, 1727, 1727, 0, 2945, 0, 1952, 0,
	0, 0, 1799, 1800, 0, 1806, 1808, 0, 1815, 0,
	1598, 0, 0, 0, 0, 0, 1625, 1629, 1626, 1627,
	1600, 0, 1661, 0, 1602, 1606, 1608, 1610, 1619, 1661,
	0, 0, 1681, 0, 0, 572, 0, 0, 1838, 2063,
	0, 1898, 2113, 0, 1971, 1975, 2121, 2112, 0, 0,
	1999, 2001, 2002, 2021, 0, 2127, 0, 146, 147, 1969,
	0, 0, 0, 2718, 2553, 2142, 2595, 0, 0, 2495,
	0, 2498, 2496, 0, 0, 0, 2462, 2464, 2465, 2516,
	2509, 2513, 0, 0, 2672, 0, 2676, 0, 2677, 0,
	0, 2923, 0, 0, 0, 302, 2720, 0, 2025, 2027,
	2068, 2785, 2785, 0, 2073, 2549, 0, 2033, 0, 2028,
	2029, 0, 1694, 1695, 0, 2592, 0, 2590, 2603, 0,
	2639, 0, 0, 1969, 0, 0, 0, 2660, 0, 3052,
	3053, 3056, 3057, 3060, 3061, 2691, 0, 2127, 2694, 0,
	2533, 2534, 0, 2813, 0, 2839, 0, 2827, 2829, 2830,
	2831, 2832, 2833, 2842, 2845, 2850, 2853, 0, 2863, 2864,
	2865, 2867, 0, 2872, 0, 0, 0, 2417, 2423, 2450,
	2451, 2454, 0, 2176, 0, 2013, 1991, 0, 1993, 1994,
	2440, 0, 2441, 0, 2443, 0, 0, 2130, 0, 2083,
	0, 0, 2088, 0, 1945, 1945, 0, 0, 2183, 2193,
	1896, 2039, 0, 0, 0, 0, 2187, 2189, 2190, 2188,
	0, 2036, 0, 0, 0, 0, 137, 137, 2234, 2800,
	2790, 2406, 0, 0, 3320, 0, 0, 3365, 2414, 0,
	0, 2408, 3327, 2419, 2410, 0, 3329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2391, 3354,
	2478, 0, 2390, 137, 2440, 3360, 3149, 0, 0, 0,
	0, 2906, 2891, 0, 0, 0, 2907, 2908, 0, 0,
	0, 0, 3166, 3167, 3168, 3170, 3171, 3172, 3173, 3174,
	2379, 2381, 2380, 2397, 2824, 0, 0, 0, 3361, 3362,
	2427, 2428, 0, 2662, 2848, 2434, 3322, 2435, 3323, 3352,
	2436, 3324, 2437, 3325, 3353, 0, 0, 0, 0, 0,
	137, 2681, 0, 0, 140, 137, 0, 0, 0, 0,
	0, 0, 3081, 3082, 3083, 3084, 3085, 3086, 0, 0,
	2249, 1453, 137, 137, 137, 2261, 2564, 0, 0, 2717,
	0, 2656, 2749, 3065, 3121, 0, 3139, 3115, 3116, 3117,
	3118, 3119, 3126, 3066, 0, 137, 0, 0, 3276, 0,
	3278, 0, 0, 3288, 3300, 3301, 3289, 3290, 3291, 3292,
	3293, 3294, 0, 3296, 3297, 0, 2989, 1422, 1449, 0,
	2952, 0, 2930, 177, 178, 179, 180, -2, -2, 0,
	0, 0, -2, -2, 1443, 1445, -2, -2, 1188, 1419,
	1449, 1249, 1411, 1542, 1541, 0, 1544, 0, 1737, 1738,
	0, 1743, 0, 1307, 1310, 0, 0, 0, 1220, 0,
	0, 0, 1316, 1321, 0, 0, 567, 1331, 1377, 1378,
	1701, 0, 1702, 1698, 1699, 0, 0, 0, 1383, 359,
	0, 1339, 1740, 1741, 1340, 1748, 0, 1764, 1748, 1382,
	2952, 1646, 0, 0, 1937, 0, 0, 1812, 1655, 1620,
	0, 1622, 0, 0, 0, 1624, 0, 0, 0, 1604,
	0, 0, 0, 159, 0, 1683, 1687, 0, 0, 0,
	1953, 1820, 1920, 1920, 0, 1822, 1835, 0, 1838, 0,
	2121, 0, 0, 0, 148, 0, 1997, 0, 2003, 0,
	2113, 3244, 0, 0, 0, 1998, 0, 2718, 0, 3240,
	2544, 0, 0, 0, 0, 2455, 0, 1688, 0, 1471,
	-2, 2490, 0, 2491, 2526, 0, 2543, 0, 2669, 1653,
	0, 0, 0, 2925, 0, 0, 0, 1969, 0, 2556,
	2022, 0, 2129, 2129, 0, 2097, 0, 2034, 0, 1696,
	2686, 0, 2014, 0, 0, 0, 0, 2013, 0, 0,
	0, 2715, 0, 0, 0, 0, 2841, 2834, 0, 0,
	0, 2887, 2887, 0, 0, 0, 0, 0, 2178, 2021,
	1989, 1990, 2079, 2093, 2442, 2446, 2444, 2445, 2447, 2093,
	0, 2093, 0, 0, 1939, 134, 0, 1940, 0, 2180,
	0, 0, 2040, 2181, 0, 2185, 0, 1697, 2038, 2186,
	2195, 2202, 0, 0, 2167, 0, 2167, 0, 0, 2421,
	3364, 2412, 0, 3331, 0, 0, 2425, 2416, 0, 3333,
	2479, 2576, 2689, 2395, 3315, 3344, 2396, 0, 0, 0,
	2897, 0, 0, 0, 3316, 3345, 0, 0, 0, 0,
	0, 0, 0, 3394, 0, 2439, 2679, 2680, 3190, 1697,
	0, 2621, 2622, 2625, 0, 0, 0, 2256, 2258, 2260,
	2562, 2664, 0, 3124, 3133, 3071, 3282, 3283, 3277, 3281,
	0, 3295, 1398, 1424, 1523, 1580, 0, 2944, 0, -2,
	-2, -2, 1421, 2967, 0, 1745, 1746, 1779, 1370, -2,
	0, 1356, 1352, 1353, 1327, 0, 1328, 0, 1703, 1334,
	1335, 0, 1384, 1337, 1773, 1726, 1728, 0, 0, 0,
	0, 1750, 1751, 1752, 1753, 1754, 1755, 1758, 1762, 0,
	1380, 0, 1581, 1649, 0, 0, 1930, 1653, 0, 1933,
	0, 1621, 0, 1632, 1623, 0, 0, 1662, 0, 1665,
	1667, 1682, 0, 1685, 0, 0, 0, 1704, 0, 0,
	1725, 1819, 1821, 0, 0, 0, 1915, 0, 1837, 1839,
	1840, 1901, 1901, 1843, 1844, 1901, 1901, 0, 0, 0,
	1854, 1862, 1653, 1833, 148, 0, 1976, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1977, 2125, 0,
	2000, 2021, 2121, 2126, 2122, 0, 0, 2111, 2113, 1998,
	2696, 3243, 0, 0, 0, 0, 0, 2136, 0, 2481,
	1690, 2494, 0, 2499, 2500, 0, 2532, 2528, 2515, 2517,
	0, 2520, 2521, 2440, 0, 2670, 0, 2913, 0, 0,
	2919, 2924, 0, 0, 2922, 2553, 2142, 0, 2070, 0,
	2071, 2087, 2102, 0, 2067, 0, 2890, 2012, 0, 2013,
	0, 2111, 1998, 2640, 0, 2013, 2718, 0, 0, 2814,
	0, 2823, 0, 2870, 2887, 2884, 0, 2883, 2912, 2453,
	0, 0, 0, 2019, 2785, 0, 2785, 0, 2785, 2089,
	2090, 371, 1948, 133, 1944, 1945, 2184, 2194, 0, 0,
	2787, 2418, 2424, 2158, 0, 2160, 0, 2420, 0, 2167,
	0, 0, 2892, 2902, 2902, 2895, 0, 2909, 0, 0,
	0, 2838, 2398, 3363, 0, 3396, 3397, 0, 0, 0,
	0, 137, 2617, 3125, 137, 0, 2013, 137, 3285, 2951,
	2953, 0, 2931, 2933, 2935, 2936, 2937, 2938, 2939, 0,
	241, 427, 528, 0, 0, 0, 0, 2962, 0, -2,
	0, 0, 1385, 1386, 1778, 0, 0, 0, 0, 1347,
	0, 1749, 1756, 1757, 0, 0, 1349, 1381, 1640, 0,
	0, 0, 0, 1932, 1938, 1801, 0, 0, 1660, 1666,
	1680, 1684, 0, 0, 1710, 0, 0, 0, 0, 1707,
	1727, 0, 0, 1919, 0, 1917, 0, 0, 0, 0,
	0, 0, 0, 1853, 1836, 0, 1856, 1857, 1858, 1859,
	1860, 0, 1823, 2125, 2110, 2127, 0, 2004, 148, 2123,
	2124, 2113, 2121, 0, 2718, 2550, 0, 0, 2553, 2138,
	0, 1689, 2495, 2497, 2492, 0, 0, 0, 2527, 2518,
	1901, 2522, 2523, 0, 2542, 2712, 0, 0, 2926, 2927,
	2545, 0, 0, 0, 2072, 0, 2074, 2098, 2099, 0,
	2094, 2095, 2096, 2075, 0, 0, 0, 0, 2015, 2651,
	2013, 0, 0, 0, 2661, 2692, 2806, 0, 0, 2816,
	2846, 2882, 2885, 2886, 0, 2010, 0, 0, 0, 2129,
	0, 2129, 2549, 2129, 0, 1951, 1948, 1941, 0, 2067,
	2197, 0, 0, 0, 2422, 2162, 0, 2426, 2065, 0,
	2065, 0, 0, 0, 0, 3390, 3391, 0, 3392, 3395,
	3192, 3078, 3079, 0, 2655, 3067, 0, 0, 0, 2940,
	0, 0, 0, 2959, 2979, 2968, -2, 486, 242, 0,
	2979, 2979, 1369, 1329, 1372, 1387, 1762, 0, 0, 1765,
	0, 1767, 0, 0, 0, 1729, 1730, 1763, 1348, 0,
	0, 0, 0, 1653, 1670, 3142, 0, 1708, 0, 1712,
	0, 1705, 0, 1706, 0, 1724, 1910, 1911, 0, 0,
	1922, 1912, 0, 0, 0, 1841, 1842, 1845, 1846, 1847,
	1848, 0, 1851, 1852, 1855, 0, 1863, 1865, 2127, 1956,
	0, 2115, 1945, 1945, 0, 2125, 2121, 148, 2113, 3241,
	2551, 2552, 2546, 2032, 0, 0, 2456, 0, 0, 2525,
	2529, 2530, 0, 0, 1637, 2710, 2711, 0, 0, 0,
	1969, 0, 2086, 2100, 0, 2101, 0, 0, 0, 0,
	0, 0, 2889, 2653, 0, 0, 2013, 0, 2815, 0,
	2005, 0, 2009, 2006, 0, 2440, 0, 2440, 2097, 1653,
	0, 1942, 1951, 2182, 2191, 2786, 2167, 2167, 0, 2893,
	2064, 2900, 0, 2894, 0, 2910, 2911, 2840, 0, 0,
	2954, 2955, 2934, 0, 0, 0, 2964, 0, 0, 2970,
	2971, 2972, 2973, 2974, 2965, 2966, 0, 1775, 1777, 1766,
	1768, 0, 1771, 0, 1772, 1759, 1760, 0, 0, 0,
	1929, 1631, 0, 3140, 0, 1686, 1711, 1714, 1715, 0,
	0, 0, 1720, 0, 1713, 0, 0, 1913, 0, 1914,
	1923, 0, 0, 0, 0, 1916, 1918, 1849, 1850, 1861,
	0, 1954, 2114, 0, 134, 134, 0, 2127, 148, 2125,
	2121, 2142, 0, 0, 0, 0, 2519, 2524, 0, 2697,
	2698, 2699, -2, 2703, 2704, 2705, 2706, 2707, 0, 2916,
	2917, 2553, 2128, 2103, 0, 2106, 2107, 0, 2104, 2066,
	2076, 2888, 2013, 0, 2641, 2807, 2817, 2011, 0, 2080,
	2092, 2082, 2102, 2440, 2091, 1943, 2159, 2161, 2167, 0,
	2896, 3393, 137, 2942, 2941, 0, 0, 2976, 2977, 0,
	0, 1346, 0, 0, 1769, 1770, 0, 0, 0, 0,
	1669, 0, 1716, 1717, 1718, 1719, 1721, 0, 0, 1921,
	0, 0, 1927, 0, 1864, 2116, 2117, 2118, 1945, 1958,
	2125, 2127, 148, 2127, 0, 2139, 2138, 0, 2531, 2532,
	1550, -2, 0, 2702, 2708, 0, 0, 2547, 2105, 2549,
	2549, 2652, 2013, 0, 2440, 2085, 2163, 2901, 3080, 2943,
	2975, 2978, 2969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1785, 0, -2, 0, 0, 0, 134,
	2127, 1957, 2125, 1653, 2137, 0, 2032, 2537, 0, 2700,
	-2, 0, 0, 2108, 2109, 2654, 0, 2084, 1774, 1776,
	1761, 0, 0, -2, 1648, 1644, 1645, 3141, 0, 1764,
	0, 0, 1794, 0, 1783, 1924, 1925, 0, 1928, 2119,
	1955, 2127, 2131, 2140, 2142, 0, 2535, 2538, 2539, 2540,
	2541, 0, 2701, 0, 0, 2007, 0, 0, 1709, 0,
	1786, 1787, 1773, 1794, 1794, 0, 0, 0, 1959, 2127,
	2503, 0, 0, 0, 0, 0, 1541, 1722, 1778, 1773,
	1764, 1793, 0, 0, 0, 1653, 2536, 0, 0, 0,
	0, 0, 1762, 1778, 1790, 0, 0, 1926, 2132, 2537,
	2914, 2915, 1647, 0, 1788, 1762, 0, 0, 0, 1789,
	1791, 0, 2504, 0, 1792,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:626
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:781
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:782
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:786
		{
			yyVAL.stmt = nil
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:798
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.list = yyDollar[1].list
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:803
		{
			yyVAL.list = nil
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:809
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:813
		{
			yyVAL.ival = 1
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:814
		{
			yyVAL.ival = 0
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:818
		{
			yyVAL.ival = 1
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:819
		{
			yyVAL.ival = 0
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:823
		{
			yyVAL.bval = true
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:824
		{
			yyVAL.bval = false
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.bval = true
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:829
		{
			yyVAL.bval = false
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:833
		{
			yyVAL.list = yyDollar[2].list
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:834
		{
			yyVAL.list = nil
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:835
		{
			yyVAL.list = nil
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = yyDollar[1].str
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = yyDollar[1].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = yyDollar[1].str
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = yyDollar[1].str
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = yyDollar[1].str
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = yyDollar[1].str
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:870
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:883
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:904
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:933
		{
			yyVAL.list = yyDollar[2].list
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:934
		{
			yyVAL.list = nil
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:943
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:956
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:969
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:975
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:981
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:987
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:993
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1000
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1007
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1013
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1032
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1048
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "abort"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "absent"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "absolute"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "access"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "action"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "add"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "admin"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "after"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "aggregate"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "also"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "alter"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "always"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "asensitive"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "assertion"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "assignment"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "at"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "atomic"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "attach"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "attribute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "backward"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "before"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "begin"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "breadth"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "by"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "cache"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "call"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "called"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "cascade"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "cascaded"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "catalog"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "chain"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "characteristics"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "checkpoint"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "class"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "close"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "cluster"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "columns"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "comment"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "comments"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "commit"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "committed"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "compression"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "conditional"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "configuration"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "conflict"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "connection"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "constraints"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "content"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "continue"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "conversion"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "copy"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "cost"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "csv"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "cube"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "current"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "cursor"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "cycle"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "data"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "database"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "day"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "deallocate"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "declare"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "defaults"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "deferred"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "definer"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "delete"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "delimiter"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "delimiters"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "depends"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "depth"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "detach"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "dictionary"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "disable"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "discard"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "document"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "domain"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "double"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "drop"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "each"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "empty"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "enable"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "encoding"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "encrypted"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "enum"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "error"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "escape"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "event"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "exclude"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "excluding"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "exclusive"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "execute"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "explain"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "expression"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "extension"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "external"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "family"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "filter"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "finalize"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "first"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "following"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "force"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "format"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "forward"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "function"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "functions"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "generated"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "global"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "granted"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "groups"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "handler"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "header"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "hold"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "hour"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "identity"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "if"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "immediate"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "immutable"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "implicit"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "import"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "include"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "including"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "increment"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "indent"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "index"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "indexes"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "inherit"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "inherits"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "inline"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "input"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "insensitive"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "insert"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "instead"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "invoker"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "isolation"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "keep"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "key"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "keys"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "label"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "language"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "large"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "last"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "leakproof"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "level"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "listen"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "load"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "local"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "location"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "lock"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "locked"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "logged"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "mapping"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "match"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "matched"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "materialized"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "maxvalue"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "merge"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "method"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "minute"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "minvalue"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "mode"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "month"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "move"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "name"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "names"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "nested"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "new"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "next"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "nfc"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "nfd"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "nfkc"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "nfkd"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "no"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "normalized"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "nothing"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "notify"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "nowait"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "nulls"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "object"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "of"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "off"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "oids"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "old"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "omit"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "operator"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "option"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "options"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "ordinality"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "others"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "over"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "overriding"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "owned"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "owner"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "parallel"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "parameter"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "parser"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "partial"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "partition"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "passing"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "password"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "path"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "plan"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "plans"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "policy"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "preceding"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "prepare"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "prepared"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "preserve"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "prior"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "privileges"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "procedural"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "procedure"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "procedures"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "program"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "publication"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "quote"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "quotes"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "range"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "read"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "reassign"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "recheck"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "recursive"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "ref"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "referencing"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "refresh"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "reindex"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "relative"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "release"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "rename"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "repeatable"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "replace"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "replica"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "reset"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "restart"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "restrict"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "return"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "returns"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "revoke"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "role"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "rollback"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "rollup"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "routine"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "routines"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "rows"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "rule"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "savepoint"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "scalar"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "schema"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "schemas"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "scroll"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "search"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "second"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "security"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "sequence"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "sequences"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "serializable"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "server"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "session"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "set"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "sets"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "share"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "show"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "simple"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "skip"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "snapshot"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "source"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "sql"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "stable"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "standalone"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "start"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "statement"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "statistics"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "stdin"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "stdout"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "storage"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "stored"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "strict"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "string"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "strip"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "subscription"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "support"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "sysid"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "system"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "tables"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "tablespace"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "target"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "temp"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "template"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "temporary"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "text"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "ties"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "transaction"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "transform"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "trigger"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "truncate"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "trusted"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "type"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "types"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "uescape"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "unbounded"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "uncommitted"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "unconditional"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "unencrypted"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "unknown"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "unlisten"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "unlogged"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "until"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "update"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "vacuum"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "valid"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "validate"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "validator"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "value"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "varying"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "version"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "view"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "views"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "volatile"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "whitespace"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "within"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "without"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "work"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "wrapper"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "write"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "xml"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "year"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "yes"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "zone"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "between"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "bigint"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "bit"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "boolean"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "char"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "character"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "coalesce"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "dec"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "decimal"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "exists"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "extract"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "float"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "greatest"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "grouping"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "inout"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "int"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "integer"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "interval"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "json"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "json_array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "json_arrayagg"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "json_exists"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "json_object"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "json_objectagg"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "json_query"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "json_scalar"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "json_serialize"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "json_table"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "json_value"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "least"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "merge_action"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "national"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "nchar"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "none"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "normalize"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "nullif"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "numeric"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "out"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "overlay"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "position"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "precision"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "real"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "row"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "setof"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "smallint"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "substring"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "time"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "timestamp"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "treat"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "trim"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "values"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "varchar"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "xmlattributes"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "xmlconcat"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "xmlelement"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "xmlexists"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "xmlforest"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "xmlparse"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "xmlpi"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "xmlroot"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "xmlserialize"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "xmltable"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "authorization"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "binary"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "collation"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "concurrently"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "cross"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "current_schema"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "freeze"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "full"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "ilike"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "inner"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "is"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "isnull"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "join"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "left"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "like"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "natural"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "notnull"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "outer"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "overlaps"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "right"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "similar"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "tablesample"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "verbose"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "all"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "analyse"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "analyze"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "and"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "any"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "array"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "as"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "asc"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "asymmetric"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "both"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "case"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "cast"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "check"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "collate"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "column"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "constraint"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "create"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "current_catalog"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "current_date"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "current_role"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "current_time"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "current_timestamp"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "current_user"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "default"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "deferrable"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "desc"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "distinct"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "do"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "else"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "end"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "except"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "false"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "fetch"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "for"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "foreign"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "from"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "grant"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "group"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "having"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "in"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "initially"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "intersect"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "into"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "lateral"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "leading"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "limit"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "localtime"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "localtimestamp"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "not"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "null"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "offset"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "on"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "only"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "or"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "order"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "placing"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "primary"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "references"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "returning"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "select"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "session_user"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "some"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "symmetric"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "system_user"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "table"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "then"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "to"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "trailing"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "true"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "union"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "unique"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "user"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "using"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "variadic"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "when"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "where"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "window"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "with"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "abort"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "absent"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "absolute"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "access"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "action"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "add"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "admin"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "after"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "aggregate"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "all"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "also"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "alter"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "always"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "analyse"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "analyze"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "and"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "any"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "asc"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "asensitive"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "assertion"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "assignment"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "asymmetric"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "at"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "atomic"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "attach"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "attribute"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "authorization"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "backward"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "before"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "begin"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "between"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "bigint"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "binary"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "bit"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "boolean"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "both"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "breadth"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "by"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "cache"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "call"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "called"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "cascade"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "cascaded"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "case"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "cast"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "catalog"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "chain"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "characteristics"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "check"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "checkpoint"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "class"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "close"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "cluster"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "coalesce"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "collate"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "collation"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "column"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "columns"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "comment"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "comments"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "commit"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "committed"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "compression"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "concurrently"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "conditional"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "configuration"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "conflict"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "connection"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "constraint"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "constraints"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "content"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "continue"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "conversion"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "copy"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "cost"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "cross"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "csv"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "cube"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "current"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "current_catalog"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "current_date"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "current_role"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "current_schema"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "current_time"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "current_timestamp"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "current_user"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "cursor"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "cycle"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "data"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "database"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "deallocate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "dec"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "decimal"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "declare"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "default"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "defaults"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "deferrable"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "deferred"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "definer"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "delete"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "delimiter"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "delimiters"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "depends"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "depth"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "desc"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "detach"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "dictionary"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "disable"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "discard"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "distinct"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "do"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "document"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "domain"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "double"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "drop"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "each"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "else"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "empty"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "enable"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "encoding"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "encrypted"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "end"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "enum"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "error"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "escape"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "event"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "exclude"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "excluding"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "exclusive"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "execute"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "exists"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "explain"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "expression"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "extension"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "external"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "extract"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "false"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "family"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "finalize"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "first"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "float"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "following"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "force"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "foreign"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "format"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "forward"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "freeze"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "full"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "function"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "functions"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "generated"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "global"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "granted"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "greatest"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "grouping"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "groups"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "handler"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "header"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "hold"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "identity"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "if"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "ilike"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "immediate"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "immutable"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "implicit"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "import"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "in"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "include"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "including"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "increment"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "indent"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "index"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "indexes"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "inherit"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "inherits"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "initially"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "inline"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "inner"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "inout"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "input"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "insensitive"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "insert"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "instead"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "int"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "integer"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "interval"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "invoker"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "is"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "isolation"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "join"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "json"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "json_array"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "json_arrayagg"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "json_exists"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "json_object"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "json_objectagg"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "json_query"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "json_scalar"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "json_serialize"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "json_table"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "json_value"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "keep"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "key"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "keys"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "label"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "language"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "large"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "last"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "lateral"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "leading"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "leakproof"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "least"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "left"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "level"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "like"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "listen"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "load"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "local"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "localtime"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "localtimestamp"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "location"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "lock"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "locked"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "logged"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "mapping"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "match"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "matched"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "materialized"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "maxvalue"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "merge"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "merge_action"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "method"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "minvalue"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "mode"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "move"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "name"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "names"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "national"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "natural"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "nchar"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "nested"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "new"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "next"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "nfc"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "nfd"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "nfkc"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "nfkd"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "no"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "none"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "normalize"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "normalized"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "not"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "nothing"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "notify"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "nowait"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "null"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "nullif"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "nulls"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "numeric"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "object"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "of"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "off"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "oids"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "old"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "omit"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "only"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "operator"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "option"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "options"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "or"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "ordinality"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "others"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "out"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "outer"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "overlay"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "overriding"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "owned"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "owner"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "parallel"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "parameter"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "parser"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "partial"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "partition"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "passing"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "password"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "path"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "placing"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "plan"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "plans"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "policy"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "position"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "preceding"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "prepare"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "prepared"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "preserve"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "primary"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "prior"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "privileges"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "procedural"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "procedure"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "procedures"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "program"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "publication"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "quote"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "quotes"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "range"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "read"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "real"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "reassign"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "recheck"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "recursive"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "ref"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "references"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "referencing"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "refresh"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "reindex"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "relative"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "release"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "rename"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "repeatable"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "replace"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "replica"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "reset"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "restart"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "restrict"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "return"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "returns"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "revoke"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "right"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "role"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "rollback"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "rollup"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "routine"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "routines"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "row"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "rows"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "rule"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "savepoint"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "scalar"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "schema"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "schemas"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "scroll"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "search"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "security"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "select"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "sequence"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "sequences"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "serializable"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "server"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "session"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "session_user"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "set"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "setof"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "sets"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "share"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "show"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "similar"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "simple"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "skip"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "smallint"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "snapshot"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "some"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "source"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "sql"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "stable"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "standalone"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "start"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "statement"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "statistics"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "stdin"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "stdout"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "storage"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "stored"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "strict"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "string"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "strip"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "subscription"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "substring"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "support"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "symmetric"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "sysid"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "system"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "system_user"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "table"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "tables"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "tablesample"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "tablespace"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "target"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "temp"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "template"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "temporary"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "text"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "then"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "ties"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "time"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "timestamp"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "trailing"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "transaction"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "transform"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "treat"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "trigger"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "trim"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "true"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "truncate"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "trusted"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "type"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "types"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "uescape"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "unbounded"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "uncommitted"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.str = "unconditional"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.str = "unencrypted"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.str = "unique"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2009
		{
			yyVAL.str = "unknown"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.str = "unlisten"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.str = "unlogged"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.str = "until"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2013
		{
			yyVAL.str = "update"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.str = "user"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.str = "using"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.str = "vacuum"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2017
		{
			yyVAL.str = "valid"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.str = "validate"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.str = "validator"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.str = "value"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.str = "values"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.str = "varchar"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.str = "variadic"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.str = "verbose"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2025
		{
			yyVAL.str = "version"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2026
		{
			yyVAL.str = "view"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.str = "views"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.str = "volatile"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2029
		{
			yyVAL.str = "when"
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2030
		{
			yyVAL.str = "whitespace"
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.str = "work"
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2032
		{
			yyVAL.str = "wrapper"
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.str = "write"
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2034
		{
			yyVAL.str = "xml"
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2035
		{
			yyVAL.str = "xmlattributes"
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2036
		{
			yyVAL.str = "xmlconcat"
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2037
		{
			yyVAL.str = "xmlelement"
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2038
		{
			yyVAL.str = "xmlexists"
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2039
		{
			yyVAL.str = "xmlforest"
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2041
		{
			yyVAL.str = "xmlparse"
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2042
		{
			yyVAL.str = "xmlpi"
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2043
		{
			yyVAL.str = "xmlroot"
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2044
		{
			yyVAL.str = "xmlserialize"
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2045
		{
			yyVAL.str = "xmltable"
		}
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2046
		{
			yyVAL.str = "yes"
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2047
		{
			yyVAL.str = "zone"
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2062
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2064
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2068
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2074
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2079
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2084
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2089
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2094
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2099
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2104
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2109
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2114
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2119
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2124
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2129
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2134
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2139
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2144
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2149
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2154
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2158
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2162
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2166
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2170
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2174
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2178
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2183
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2190
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2195
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2202
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2207
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2214
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2219
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2226
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2233
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2240
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2247
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2254
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2258
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2262
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2266
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2270
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2279
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2283
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2287
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2291
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2295
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2299
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2303
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2308
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2313
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2318
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2323
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2328
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2333
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2338
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2343
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2352
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2362
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2366
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2371
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2377
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2383
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2390
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2397
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2405
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2422
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2441
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2446
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2452
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2457
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2461
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2466
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2471
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2476
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2481
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2486
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2491
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2496
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2501
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2506
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2511
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2516
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2521
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2525
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2529
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2534
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2539
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2544
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2551
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2552
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2554
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2563
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2570
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2571
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2573
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2577
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2582
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2586
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2590
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2594
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2600
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2606
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2624
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2625
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2631
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2635
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2639
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2643
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2647
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2651
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2655
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2659
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2664
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2671
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2681
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2686
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2693
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2704
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2707
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2710
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2712
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2716
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2723
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2725
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2727
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2729
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2739
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2747
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2758
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2762
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2773
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2784
		{
			yyVAL.list = nil
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2789
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2807
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2817
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2821
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2828
		{
			yyVAL.node = nil
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2836
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2840
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2844
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2849
		{
			yyVAL.list = nil
		}
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2851
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2863
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2887
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2920
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2926
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2934
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2939
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2944
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2949
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2954
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2959
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2964
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2969
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2974
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2979
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2984
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2989
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2994
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3002
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3007
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3012
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3017
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3021
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3029
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3037
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3047
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3055
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3063
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3071
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3079
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3087
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3096
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3104
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3112
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3120
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3128
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3134
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3139
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3144
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3149
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3154
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3159
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3164
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1329:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3169
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3174
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3179
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3188
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3197
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1334:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3202
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3208
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3214
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3225
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3233
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3245
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3257
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3270
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3278
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3284
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3290
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3298
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1346:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3309
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3334
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1348:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3350
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3370
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3380
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.list = nil
		}
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3391
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3399
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3403
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3412
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3419
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3424
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3435
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.str = "year"
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3447
		{
			yyVAL.str = "month"
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.str = "day"
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3449
		{
			yyVAL.str = "hour"
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3450
		{
			yyVAL.str = "minute"
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3451
		{
			yyVAL.str = "second"
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3452
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3457
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3462
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3470
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3473
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3482
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3490
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3494
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.bval = true
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.bval = false
		}
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3501
		{
			yyVAL.bval = false
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3504
		{
			yyVAL.bval = true
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.bval = false
		}
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.bval = false
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3511
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3515
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3526
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3530
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3534
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3542
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3543
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3547
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3551
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3562
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3566
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3573
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3579
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3585
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3593
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3599
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3607
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3611
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3633
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3638
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3639
		{
			yyVAL.node = nil
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3643
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3645
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3659
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.node = nil
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3665
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3669
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3678
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3680
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3687
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3690
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3698
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3702
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3708
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3715
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3719
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3723
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3727
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3731
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.str = "NFC"
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.str = "NFD"
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.str = "NFKC"
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.str = "NFKD"
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3748
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3749
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3750
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3751
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3756
		{
			yyVAL.bval = true
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3757
		{
			yyVAL.bval = true
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3758
		{
			yyVAL.bval = false
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.bval = false
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3760
		{
			yyVAL.bval = false
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3765
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3769
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3789
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3794
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3800
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3805
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3814
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3823
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3832
		{
			yyVAL.list = nil
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3837
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3838
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3840
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3841
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3848
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3855
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3856
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3866
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3870
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3874
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3881
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.list = nil
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3891
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3897
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3908
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3912
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3916
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3920
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3924
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3932
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3936
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3941
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3946
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3951
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3957
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3961
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3967
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3971
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3977
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3981
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3989
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3993
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4001
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4009
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.str = "varchar"
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4021
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4029
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4037
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4047
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4058
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4072
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4086
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4098
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4110
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4120
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4132
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4149
		{
			yyVAL.ival = 1
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4150
		{
			yyVAL.ival = 0
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4151
		{
			yyVAL.ival = 0
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4154
		{
			yyVAL.ival = 1
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4155
		{
			yyVAL.ival = 0
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4159
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4169
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4176
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4180
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4187
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4197
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4200
		{
			yyVAL.str = "+"
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.str = "-"
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4202
		{
			yyVAL.str = "*"
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4203
		{
			yyVAL.str = "/"
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4204
		{
			yyVAL.str = "%"
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.str = "^"
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4206
		{
			yyVAL.str = "<"
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4207
		{
			yyVAL.str = ">"
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4208
		{
			yyVAL.str = "="
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4209
		{
			yyVAL.str = "<="
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.str = ">="
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4211
		{
			yyVAL.str = "<>"
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4215
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4219
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4228
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4229
		{
			yyVAL.list = nil
		}
	case 1542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4234
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4238
		{
			yyVAL.list = nil
		}
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4243
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.node = nil
		}
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4251
		{
			yyVAL.ival = 0
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.ival = 0
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4256
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4261
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4277
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4281
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4282
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4291
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4292
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4301
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4303
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4310
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4322
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4334
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4340
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4347
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4360
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4379
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.list = nil
		}
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4384
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4385
		{
			yyVAL.list = nil
		}
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4390
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4394
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4402
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4414
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4415
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4417
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4421
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4422
		{
			yyVAL.list = nil
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4427
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4428
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4429
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1580:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4440
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1581:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4459
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4477
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4487
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4492
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4497
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4502
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4514
		{
			yyVAL.list = nil
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4518
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4519
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4524
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4528
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4533
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4538
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4549
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4550
		{
			yyVAL.list = nil
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4554
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4555
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4564
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4572
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4582
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4593
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4604
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4608
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4614
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4632
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4651
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4659
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4668
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4676
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4688
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4694
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4701
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4707
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4713
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4723
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4727
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4733
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4750
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4754
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4763
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4789
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4815
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4823
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4833
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4834
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4835
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4836
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.ival = 1
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4842
		{
			yyVAL.ival = 0
		}
	case 1631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4852
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4874
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4878
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4888
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4889
		{
			yyVAL.with = nil
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4898
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1640:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4906
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4934
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4935
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4936
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1644:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4941
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1645:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4947
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4953
		{
			yyVAL.node = nil
		}
	case 1647:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4960
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4969
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4977
		{
			yyVAL.node = nil
		}
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4988
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4996
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5010
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5011
		{
			yyVAL.node = nil
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5019
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5021
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5025
		{
			yyVAL.node = nil
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5029
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5037
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5038
		{
			yyVAL.alias = nil
		}
	case 1660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5043
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5052
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5057
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5068
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5072
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5076
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5081
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5086
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5094
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5098
		{
			yyVAL.alias = nil
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5106
		{
			yyVAL.ival = 1
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5107
		{
			yyVAL.ival = 0
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5112
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5117
		{
			yyVAL.list = nil
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5127
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5130
		{
			yyVAL.into = nil
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5141
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1680:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5150
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5160
		{
			yyVAL.ival = 1
		}
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5161
		{
			yyVAL.ival = 0
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5167
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5171
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5178
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5187
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5188
		{
			yyVAL.list = nil
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5198
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5202
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5214
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5227
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5228
		{
			yyVAL.list = nil
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5234
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5238
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5247
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5258
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.node = nil
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5268
		{
			yyVAL.str = "BY REF"
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5269
		{
			yyVAL.str = "BY VALUE"
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5275
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5279
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5283
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5287
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5295
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5299
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5307
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5312
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1708:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5321
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1709:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5329
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5340
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5344
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5353
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5358
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5363
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5373
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5377
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5390
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5398
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5402
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1722:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5415
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5439
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.node = nil
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.node = nil
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5462
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5467
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5473
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5474
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5480
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5484
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5500
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5507
		{
			yyVAL.bval = false
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5508
		{
			yyVAL.bval = true
		}
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5509
		{
			yyVAL.bval = false
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5513
		{
			yyVAL.bval = false
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5514
		{
			yyVAL.bval = true
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5515
		{
			yyVAL.bval = true
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5520
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5521
		{
			yyVAL.list = nil
		}
	case 1745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5532
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1746:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5547
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5560
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5567
		{
			yyVAL.node = nil
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5573
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5581
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5592
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5593
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5594
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5595
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5596
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5597
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5598
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5599
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5604
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5608
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1761:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5612
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.node = nil
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5621
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5622
		{
			yyVAL.node = nil
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5627
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5629
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5630
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5631
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5632
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5633
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5634
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5635
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5640
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5641
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5642
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5643
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5644
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5650
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5670
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5681
		{
			yyVAL.node = nil
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5686
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5687
		{
			yyVAL.node = nil
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5697
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5706
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1788:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5715
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1789:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5729
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5743
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1791:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5754
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1792:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5763
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5774
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5775
		{
			yyVAL.node = nil
		}
	case 1795:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5791
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5803
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5807
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5816
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1799:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5822
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5829
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1801:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5836
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5844
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5853
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5854
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5859
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5863
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5871
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1808:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5883
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5896
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5900
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5911
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5917
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5937
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5943
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5944
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1816:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5954
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5966
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5970
		{
			yyVAL.list = nil
		}
	case 1819:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5985
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6002
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6006
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1822:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6017
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1823:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6041
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.ival = 1
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.ival = 0
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.ival = 1
		}
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.ival = 0
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6087
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6088
		{
			yyVAL.str = ""
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6089
		{
			yyVAL.str = ""
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6094
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.node = nil
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6102
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.node = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6109
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6115
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6123
		{
			yyVAL.list = nil
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6130
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6138
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6142
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6146
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6150
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6154
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6162
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6166
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6178
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6182
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6186
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6194
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6198
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6205
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6211
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6214
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6215
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6216
		{
			yyVAL.node = nil
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6221
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6225
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6235
		{
			yyVAL.str = "true"
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6236
		{
			yyVAL.str = "false"
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.str = "on"
		}
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6238
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6242
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6243
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6245
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6250
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6255
		{
			yyVAL.node = nil
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6259
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6261
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6262
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6263
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6264
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6265
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6270
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6272
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6276
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6277
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6278
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6280
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6285
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6290
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.bval = true
		}
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6298
		{
			yyVAL.bval = false
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6302
		{
			yyVAL.ival = 1
		}
	case 1897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6303
		{
			yyVAL.ival = 0
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6319
		{
			yyVAL.node = nil
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6321
		{
			yyVAL.node = nil
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.ival = 1
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6330
		{
			yyVAL.ival = 0
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.ival = 1
		}
	case 1905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6335
		{
			yyVAL.ival = 0
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.ival = 1
		}
	case 1907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6340
		{
			yyVAL.ival = 0
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6344
		{
			yyVAL.ival = 1
		}
	case 1909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6345
		{
			yyVAL.ival = 0
		}
	case 1910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6354
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1911:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6360
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1912:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6366
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6372
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6378
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6386
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6387
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6391
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6392
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6396
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6397
		{
			yyVAL.node = nil
		}
	case 1921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6402
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6417
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6426
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1924:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6433
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1925:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6440
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1926:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6453
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6466
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6475
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1929:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6490
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6500
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6508
		{
			yyVAL.onconflict = nil
		}
	case 1932:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6519
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6528
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6535
		{
			yyVAL.node = nil
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6546
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6550
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6557
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6561
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6568
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6573
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1941:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6578
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1942:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6586
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6597
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1945:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.list = nil
		}
	case 1946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6616
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1948:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6618
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6622
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6623
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6624
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6629
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1953:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6633
		{
			yyVAL.list = nil
		}
	case 1954:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6654
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1955:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6670
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1956:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6687
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1957:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6703
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1958:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6720
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1959:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6737
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6756
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6757
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6758
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6759
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6761
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6762
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6767
		{
			yyVAL.list = nil
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6772
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6777
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6784
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6791
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1976:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6798
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6802
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.ival = 0
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6813
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6814
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6816
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6818
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6819
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6820
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6826
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6827
		{
			yyVAL.str = "default"
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6831
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6832
		{
			yyVAL.str = ""
		}
	case 1993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6836
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6837
		{
			yyVAL.str = "default"
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6841
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.str = ""
		}
	case 1997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6847
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1998:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6848
		{
			yyVAL.list = nil
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6853
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6859
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6866
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6867
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6872
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 2004:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6878
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 2005:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6889
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 2006:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6918
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 2007:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6927
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 2008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6937
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 2009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6946
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6953
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6957
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 2012:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6965
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6966
		{
			yyVAL.list = nil
		}
	case 2014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6971
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6975
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6983
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6989
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6994
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2019:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6999
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7011
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7016
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7023
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7028
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7029
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7031
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7044
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7049
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7054
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7059
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7067
		{
			yyVAL.bval = true
		}
	case 2031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7068
		{
			yyVAL.bval = false
		}
	case 2032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7069
		{
			yyVAL.bval = true
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7073
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7074
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7079
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7081
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7086
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7090
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7094
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7110
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7111
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7116
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7120
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7124
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7128
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7132
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7136
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7140
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7144
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7148
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7152
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7156
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7160
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7164
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7168
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7172
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7176
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7182
		{
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7183
		{
		}
	case 2061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7187
		{
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7188
		{
		}
	case 2063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7189
		{
		}
	case 2064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7194
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7201
		{
			yyVAL.bval = false
		}
	case 2066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7205
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2067:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7206
		{
			yyVAL.list = nil
		}
	case 2068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7211
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7215
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2070:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7219
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2071:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7228
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2072:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7234
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7240
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2074:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7246
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2075:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7263
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2076:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7270
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7280
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7285
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2079:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7290
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2080:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7298
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7309
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2082:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7320
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2083:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7330
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2084:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7341
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2085:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7362
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7376
		{
			yyVAL.bval = true
		}
	case 2087:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7377
		{
			yyVAL.bval = false
		}
	case 2088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7383
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7389
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7397
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7402
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7410
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7414
		{
			yyVAL.list = nil
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7421
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7425
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7429
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2097:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7433
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7440
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7450
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7460
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7467
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7474
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7489
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7502
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7509
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7516
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7523
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7530
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7537
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7546
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7547
		{
			yyVAL.list = nil
		}
	case 2112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7551
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7552
		{
			yyVAL.partspec = nil
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7557
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7565
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7570
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7578
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7585
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7592
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7601
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7602
		{
			yyVAL.str = ""
		}
	case 2122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7606
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7607
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7608
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7609
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7613
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7614
		{
			yyVAL.str = ""
		}
	case 2128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7618
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7619
		{
			yyVAL.str = ""
		}
	case 2130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7623
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2131:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7636
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2132:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7651
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7667
		{
			yyVAL.bval = true
		}
	case 2134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7668
		{
			yyVAL.bval = false
		}
	case 2135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7672
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7673
		{
			yyVAL.str = "btree"
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7677
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7678
		{
			yyVAL.list = nil
		}
	case 2139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7683
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7688
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7696
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7697
		{
			yyVAL.list = nil
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7709
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7715
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7722
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7728
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7735
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7744
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7750
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7757
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7763
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7770
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2153:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7776
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7783
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2155:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7789
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7796
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7805
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2158:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7815
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2159:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7822
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2160:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7830
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2161:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7837
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2162:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7845
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2163:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7852
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7863
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7868
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7876
		{
			yyVAL.bval = true
		}
	case 2167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7877
		{
			yyVAL.bval = false
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7882
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7887
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7895
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7926
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7949
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7956
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7963
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7974
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7981
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7988
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7995
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8002
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8007
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8012
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8017
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8022
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8027
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8034
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8039
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8046
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8051
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8056
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8061
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8066
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8076
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8081
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2194:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8088
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8095
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8103
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2197:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8114
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8124
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8129
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8134
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8145
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8150
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8158
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8166
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8171
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8176
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8181
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8186
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8191
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8196
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8201
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8206
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8211
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8216
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8221
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8226
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8231
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8236
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8241
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8246
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8251
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8256
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8261
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8272
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8279
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8284
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8289
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8294
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8299
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8304
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8309
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8314
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8319
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8323
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8331
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8339
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8346
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8357
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8366
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8367
		{
			yyVAL.node = nil
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8371
		{
		}
	case 2243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8372
		{
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8383
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8396
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8409
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8422
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8435
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8450
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8465
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8478
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8491
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8504
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8517
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8530
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8544
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_CAST
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, yyDollar[7].typnam))
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8558
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8576
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8595
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8613
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8632
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TRANSFORM
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, ast.NewString(yyDollar[7].str)))
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8646
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[3].str)))
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8659
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[5].str)))
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8679
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_FUNCTION
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8691
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_FUNCTION
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8703
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_PROCEDURE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8715
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_PROCEDURE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8727
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_ROUTINE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8739
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_ROUTINE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8754
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_AGGREGATE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8766
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_AGGREGATE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8781
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_OPERATOR
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8793
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_OPERATOR
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8808
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8814
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8820
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8829
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8836
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8840
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8842
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8846
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8850
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8857
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8861
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8867
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8868
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8872
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8881
		{
			yyVAL.stmt = ast.NewConstraintsSetStmt(yyDollar[3].list, yyDollar[4].bval)
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8887
		{
			yyVAL.list = nil
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8888
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8892
		{
			yyVAL.bval = true
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8893
		{
			yyVAL.bval = false
		}
	case 2294:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8905
		{
			n := ast.NewSelectStmt()
			n.DistinctClause = yyDollar[1].list
			n.TargetList = yyDollar[2].list
			n.FromClause = yyDollar[3].list
			n.WhereClause = yyDollar[4].node
			if yyDollar[5].groupClause != nil {
				n.GroupClause = yyDollar[5].groupClause.List
				n.GroupDistinct = yyDollar[5].groupClause.Distinct
			}
			n.HavingClause = yyDollar[6].node
			n.WindowClause = yyDollar[7].list
			n.SortClause = yyDollar[8].list
			if yyDollar[9].selectLimit != nil {
				n.LimitOffset = yyDollar[9].selectLimit.limitOffset
				n.LimitCount = yyDollar[9].selectLimit.limitCount
				n.LimitOption = yyDollar[9].selectLimit.limitOption
			}
			n.LockingClause = yyDollar[10].list
			yyVAL.stmt = n
		}
	case 2295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8930
		{
			n := ast.NewPLAssignStmt(yyDollar[1].str, yyDollar[4].stmt.(*ast.SelectStmt))
			n.Indirection = yyDollar[2].list
			yyVAL.stmt = n
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8938
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8939
		{
			yyVAL.str = fmt.Sprintf("$%d", yyDollar[1].ival)
		}
	case 2300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8953
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8957
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8965
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8970
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8977
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8981
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8989
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8995
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8996
		{
			yyVAL.str = "analyze"
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8997
		{
			yyVAL.str = "format"
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9001
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9002
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9003
		{
			yyVAL.node = nil
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9007
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9008
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9009
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9010
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9011
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9012
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9013
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9022
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9043
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9050
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9059
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9065
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9066
		{
			yyVAL.list = nil
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9071
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9075
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9083
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9089
		{
			yyVAL.str = "analyze"
		}
	case 2330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9090
		{
			yyVAL.str = "analyse"
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9099
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9103
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9107
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9111
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9115
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9126
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9130
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9141
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9145
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9149
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9158
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9167
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9178
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9179
		{
			yyVAL.str = ""
		}
	case 2345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9188
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9201
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9214
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9229
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9230
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9234
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9235
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9239
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9240
		{
			yyVAL.list = nil
		}
	case 2354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9249
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9260
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9264
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9268
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9272
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9276
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9283
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9284
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9285
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9286
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9287
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9288
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9289
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9290
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9291
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9292
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9293
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9294
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9295
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9308
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9309
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9314
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9318
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9326
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9338
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9343
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9345
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9347
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9351
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9364
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9366
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2385:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9370
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9381
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9392
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9403
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9414
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9425
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9437
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9448
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9459
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9470
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2395:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9481
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9498
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2397:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9515
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2398:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9527
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9539
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9550
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9561
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9572
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9583
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9594
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9605
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2406:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9616
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2407:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9627
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9638
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9649
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2410:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9660
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2411:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9671
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2412:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9682
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9693
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2414:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9704
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9715
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2416:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9726
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2417:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9737
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2418:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9750
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2419:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9763
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2420:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9776
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2421:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9789
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2422:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9802
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9815
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2424:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9827
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2425:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9839
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2426:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9852
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2427:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9865
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9877
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2429:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9889
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9900
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9911
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9922
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9933
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2434:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9944
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9955
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2436:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9966
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2437:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9977
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9988
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2439:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9999
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10025
		{
			yyVAL.ival = 0
		}
	case 2441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10027
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10041
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10042
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10043
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10044
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10045
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10046
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10050
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10055
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10060
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10068
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10072
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10076
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10080
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2455:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10094
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2456:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10108
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2457:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10124
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2458:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10139
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10154
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10155
		{
			yyVAL.list = nil
		}
	case 2461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10160
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10164
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10172
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10176
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10181
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10189
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10198
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10207
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10216
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10225
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10236
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10237
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10238
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10239
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10240
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10244
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10248
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10250
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10260
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10272
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10273
		{
			yyVAL.list = nil
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10278
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10284
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10292
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10296
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10300
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10304
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10308
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10315
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10321
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10331
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10337
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10345
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10349
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10361
		{
			yyVAL.node = nil
		}
	case 2496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10368
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10377
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10387
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10393
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10394
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10399
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10403
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2503:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10419
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2504:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10451
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10483
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10484
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10489
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10491
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10531
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10538
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10545
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10552
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10559
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10568
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10569
		{
			yyVAL.list = nil
		}
	case 2517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10573
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10578
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10586
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10597
		{
			yyVAL.bval = true
		}
	case 2521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10598
		{
			yyVAL.bval = false
		}
	case 2522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10602
		{
			yyVAL.bval = true
		}
	case 2523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10603
		{
			yyVAL.bval = false
		}
	case 2524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10607
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10612
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10616
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10628
		{
			yyVAL.bval = true
		}
	case 2530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10629
		{
			yyVAL.bval = false
		}
	case 2531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10633
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10634
		{
			yyVAL.node = nil
		}
	case 2535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10643
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10648
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10652
		{
			yyVAL.list = nil
		}
	case 2538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10657
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10660
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10661
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10662
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10666
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10667
		{
			yyVAL.rangevar = nil
		}
	case 2544:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10680
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2545:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10696
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2546:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10712
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2547:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10728
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10745
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10746
		{
			yyVAL.list = nil
		}
	case 2550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10750
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10751
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10752
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10753
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10764
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10771
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2556:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10778
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2557:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10785
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10801
		{
			n := ast.NewCreatedbStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10814
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, nil)
			yyVAL.stmt = n
		}
	case 2560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10819
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, nil)
			yyVAL.stmt = n
		}
	case 2561:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10824
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10829
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10836
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10837
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[3].defelt)
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10841
		{
			yyVAL.defelt = ast.NewDefElem("force", nil)
		}
	case 2566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10851
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[3].str, false)
			yyVAL.stmt = n
		}
	case 2567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10856
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[5].str, true)
			yyVAL.stmt = n
		}
	case 2568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10870
		{
			n := ast.NewDropOwnedStmt(yyDollar[4].list, yyDollar[5].dropBehav)
			yyVAL.stmt = n
		}
	case 2569:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10878
		{
			n := ast.NewReassignOwnedStmt(yyDollar[4].list, yyDollar[6].rolespec)
			yyVAL.stmt = n
		}
	case 2570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10892
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10910
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10916
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10921
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10926
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2575:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10932
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2576:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10940
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10948
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10963
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10979
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10985
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10990
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10995
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11001
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11006
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11011
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11016
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11021
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2588:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11026
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11031
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2590:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11036
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2591:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11041
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11052
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2593:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11057
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11071
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11076
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11083
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11084
		{
			yyVAL.list = nil
		}
	case 2598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11087
		{
		}
	case 2599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11088
		{
		}
	case 2600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11099
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2601:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11103
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11116
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2603:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11121
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11129
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11138
		{
			yyVAL.list = nil
		}
	case 2606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11145
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11149
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11153
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11158
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11171
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11179
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11188
		{
			yyVAL.list = nil
		}
	case 2613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11195
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11212
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11216
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2617:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11220
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11227
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11235
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2621:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11239
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2622:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11248
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11257
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11261
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2625:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11265
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2626:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11270
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11282
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2628:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11288
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2629:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11292
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11298
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11299
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11300
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11301
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11305
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11306
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11310
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11311
		{
			yyVAL.list = nil
		}
	case 2638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11315
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11316
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2640:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11333
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2641:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11338
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11344
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11348
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11352
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11358
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11359
		{
			yyVAL.str = ""
		}
	case 2647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11364
		{
			yyVAL.str = ""
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11368
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11369
		{
			yyVAL.str = ""
		}
	case 2651:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11382
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2652:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:11388
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2653:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:11394
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2654:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:11400
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2655:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11414
		{
			stmt := ast.NewImportForeignSchemaStmt(
				ast.NewString(yyDollar[8].str),    // server name
				ast.NewString(yyDollar[4].str),    // remote schema
				ast.NewString(yyDollar[10].str),   // local schema
				yyDollar[5].importqual.typ,        // list type
				yyDollar[5].importqual.tableNames, // table list
				yyDollar[11].list,                 // options
			)
			yyVAL.stmt = stmt
		}
	case 2656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11429
		{
			qual := &ImportQual{
				typ:        yyDollar[1].importqualtype,
				tableNames: yyDollar[3].list,
			}
			yyVAL.importqual = qual
		}
	case 2657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11437
		{
			qual := &ImportQual{
				typ:        ast.FDW_IMPORT_SCHEMA_ALL,
				tableNames: nil,
			}
			yyVAL.importqual = qual
		}
	case 2658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11447
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_LIMIT_TO
		}
	case 2659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11448
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_EXCEPT
		}
	case 2660:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11458
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2661:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11462
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2662:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11468
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2663:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11474
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2664:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11478
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11484
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11485
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11490
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11496
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11502
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11508
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11522
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11526
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11534
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11552
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11560
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2678:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11567
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2679:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11575
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2680:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11584
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2681:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11593
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2682:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11601
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11617
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11619
		{
			yyVAL.list = nil
		}
	case 2685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11624
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11626
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11631
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11640
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11645
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11656
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2691:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11676
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2692:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11684
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2693:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11695
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2694:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11710
		{
			yylex.Error("CREATE ASSERTION is not yet implemented")
			return 1
			// PostgreSQL doesn't actually implement CREATE ASSERTION yet.
			// $$ = ast.NewCreateAssertionStmt($3, $6, nil)
		}
	case 2695:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11726
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[6].stmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			/* cram additional flags into the IntoClause */
			if yyDollar[4].into.Rel != nil {
				yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[4].into.SkipData = !yyDollar[7].bval
			yyVAL.stmt = ctas
		}
	case 2696:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11736
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[9].stmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			/* cram additional flags into the IntoClause */
			if yyDollar[7].into.Rel != nil {
				yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[7].into.SkipData = !yyDollar[10].bval
			yyVAL.stmt = ctas
		}
	case 2697:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11756
		{
			n := &ast.RuleStmt{
				BaseNode:    ast.BaseNode{Tag: ast.T_RuleStmt},
				Replace:     yyDollar[2].bval,
				Relation:    yyDollar[9].rangevar,
				Rulename:    yyDollar[4].str,
				WhereClause: yyDollar[10].node,
				Event:       ast.CmdType(yyDollar[7].ival),
				Instead:     yyDollar[12].bval,
				Actions:     yyDollar[13].list,
			}
			yyVAL.stmt = n
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11772
		{
			yyVAL.list = nil
		}
	case 2699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11773
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
		}
	case 2700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11774
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11779
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].list != nil {
					yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].stmt)
					yyVAL.list = yyDollar[1].list
				} else {
					yyVAL.list = ast.NewNodeList(yyDollar[3].stmt)
				}
			}
		}
	case 2702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11790
		{
			if yyDollar[1].stmt != nil {
				yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
			} else {
				yyVAL.list = nil
			}
		}
	case 2708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11808
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11809
		{
			yyVAL.stmt = nil
		}
	case 2710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11813
		{
			yyVAL.bval = true
		}
	case 2711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11814
		{
			yyVAL.bval = false
		}
	case 2712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11815
		{
			yyVAL.bval = false
		}
	case 2713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11818
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11819
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11824
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11836
		{
			yyVAL.bval = true
		}
	case 2717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11837
		{
			yyVAL.bval = false
		}
	case 2718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11838
		{
			yyVAL.bval = true
		}
	case 2719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11843
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11852
		{
			yyVAL.list = nil
		}
	case 2725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11863
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11865
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11869
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11874
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11879
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11884
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11892
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11897
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11902
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11906
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11917
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11925
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11929
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11933
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11937
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11944
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11948
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11955
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11961
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11968
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11969
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11973
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11974
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11976
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11983
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11990
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11991
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11992
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11996
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11997
		{
			yyVAL.str = "default"
		}
	case 2755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11998
		{
			yyVAL.str = ""
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12002
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12003
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12007
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12008
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12009
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12010
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12014
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12015
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12020
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12026
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12031
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12039
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12047
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12051
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12055
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12061
		{
			yyVAL.str = "read uncommitted"
		}
	case 2773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12062
		{
			yyVAL.str = "read committed"
		}
	case 2774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12063
		{
			yyVAL.str = "repeatable read"
		}
	case 2775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12064
		{
			yyVAL.str = "serializable"
		}
	case 2776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12068
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12069
		{
			yyVAL.list = nil
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12073
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12074
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12075
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12078
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12079
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12080
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12084
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12085
		{
			yyVAL.list = nil
		}
	case 2786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12089
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12090
		{
			yyVAL.node = nil
		}
	case 2788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12094
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12099
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12104
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12112
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12116
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12122
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12128
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12134
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12135
		{
			yyVAL.str = ""
		}
	case 2797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12139
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12140
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12141
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12142
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12146
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12151
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12156
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12163
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12164
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2806:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12175
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2807:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12179
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2808:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12185
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12191
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12192
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12193
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12194
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12199
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12204
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2815:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12212
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12219
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12224
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2818:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12238
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12244
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12245
		{
			yyVAL.rolespec = nil
		}
	case 2821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12250
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2822:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12254
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2823:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12269
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2824:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12277
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12284
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12296
		{
			yyVAL.bval = true
		}
	case 2827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12300
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12301
		{
			yyVAL.str = "all"
		}
	case 2829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12305
		{
			yyVAL.str = "all"
		}
	case 2830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12306
		{
			yyVAL.str = "select"
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12307
		{
			yyVAL.str = "insert"
		}
	case 2832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12308
		{
			yyVAL.str = "update"
		}
	case 2833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12309
		{
			yyVAL.str = "delete"
		}
	case 2834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12313
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12314
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12322
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12323
		{
			yyVAL.list = nil
		}
	case 2838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12327
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12328
		{
			yyVAL.node = nil
		}
	case 2840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12332
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12333
		{
			yyVAL.node = nil
		}
	case 2842:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12344
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12350
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12351
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2845:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12362
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2846:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12366
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2847:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12373
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2848:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12377
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12383
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12384
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12388
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12389
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12390
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12401
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2855:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12405
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2856:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12409
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12416
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12420
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12424
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2860:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12428
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12434
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12435
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12440
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12445
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12449
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12453
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12465
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12471
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12476
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12482
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12483
		{
			yyVAL.node = nil
		}
	case 2872:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12494
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12501
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2874:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12505
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2875:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12509
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2876:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12513
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2877:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12517
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2878:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12521
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12525
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12531
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2881:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12537
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2882:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12550
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2883:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12554
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2884:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12558
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12564
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12565
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12566
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2888:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12578
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12584
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12585
		{
			yyVAL.list = nil
		}
	case 2891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12589
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12590
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12595
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12601
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12605
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2896:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12609
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12613
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12619
		{
			yyVAL.bval = true
		}
	case 2899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12620
		{
			yyVAL.bval = false
		}
	case 2900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12624
		{
			yyVAL.list = nil
		}
	case 2901:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12625
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12626
		{
			yyVAL.list = nil
		}
	case 2903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12630
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12631
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2905:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12642
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2906:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12655
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2907:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12659
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12665
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12666
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12671
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12677
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2912:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12692
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2913:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12705
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2914:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12712
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2915:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12718
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12724
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2917:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12730
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2918:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12745
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2919:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12751
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12757
		{
			yyVAL.bval = true
		}
	case 2921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12758
		{
			yyVAL.bval = false
		}
	case 2922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12763
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12764
		{
			yyVAL.list = nil
		}
	case 2924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12768
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12769
		{
			yyVAL.list = nil
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12773
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12774
		{
			yyVAL.list = nil
		}
	case 2928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12777
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12778
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12779
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2931:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12784
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12791
		{
			yyVAL.groupClause = nil
		}
	case 2933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12797
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12798
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12802
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12803
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12804
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12805
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12806
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12811
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2941:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12818
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2942:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12825
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12832
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12841
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2945:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12842
		{
			yyVAL.node = nil
		}
	case 2946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12849
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12853
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12854
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2949:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12859
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12866
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12877
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2952:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12879
		{
			yyVAL.list = nil
		}
	case 2953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12884
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12889
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12897
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12906
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12908
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2958:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12915
		{
			yyVAL.windef = nil
		}
	case 2959:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12920
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12934
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12935
		{
			yyVAL.str = ""
		}
	case 2962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12939
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2963:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12940
		{
			yyVAL.list = nil
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12945
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12952
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12959
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12966
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12977
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2969:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12991
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13026
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13034
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13042
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13050
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13058
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13068
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13069
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13070
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2978:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13071
		{
			yyVAL.ival = 0
		}
	case 2979:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13072
		{
			yyVAL.ival = 0
		}
	case 2980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13081
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13086
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13091
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13095
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13105
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13106
		{
			yyVAL.selectLimit = nil
		}
	case 2986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13111
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2987:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13119
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2988:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13126
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2989:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13134
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2990:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13142
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2991:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13150
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13161
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13164
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13168
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13170
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13177
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13190
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13192
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13196
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 3000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13203
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 3001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13204
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13209
		{
			yyVAL.ival = 0
		}
	case 3003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13210
		{
			yyVAL.ival = 0
		}
	case 3004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13214
		{
			yyVAL.ival = 0
		}
	case 3005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13215
		{
			yyVAL.ival = 0
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13228
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13234
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 3008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13240
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13246
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13252
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 3011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13257
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13262
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 3013:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13267
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 3014:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13272
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 3015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13277
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13283
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13289
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13298
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13304
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 3020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13311
		{
		}
	case 3021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13312
		{
		}
	case 3022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13313
		{
		}
	case 3023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13317
		{
			yyVAL.bval = true
		}
	case 3024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13318
		{
			yyVAL.bval = false
		}
	case 3025:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13319
		{
			yyVAL.bval = false
		}
	case 3026:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13332
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 3027:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13339
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 3028:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13346
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 3029:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13353
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3030:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13359
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3031:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13368
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3032:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13372
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3033:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13376
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3034:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13380
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13386
		{
			yyVAL.str = ""
		}
	case 3036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13387
		{
			yyVAL.str = yyDollar[3].str
		}
	case 3037:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13392
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 3038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13402
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3039:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13406
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13410
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3041:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13414
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13418
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3043:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13422
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13430
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13441
		{
			yyVAL.list = nil
		}
	case 3046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13446
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3047:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13457
		{
			yyVAL.list = nil
		}
	case 3048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13461
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 3049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13463
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 3050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13467
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 3051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13471
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13475
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13479
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13486
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 3055:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13490
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 3056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13494
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 3057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13498
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13503
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 3059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13507
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 3060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13542
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 3061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13546
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 3062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13550
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13556
		{
			yyVAL.ival = 1
		}
	case 3064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13557
		{
			yyVAL.ival = -1
		}
	case 3065:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13569
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 3066:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13581
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 3067:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:13590
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 3068:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13602
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 3069:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13608
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 3070:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13617
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 3071:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13624
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 3072:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13643
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 3073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13649
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13650
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 3075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13655
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 3076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13659
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13663
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3078:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13675
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 3079:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13683
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 3080:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13691
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13701
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 3082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13702
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13703
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13704
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13705
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13706
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13711
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13713
		{
			yyVAL.list = nil
		}
	case 3089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13715
		{
			yyVAL.list = nil
		}
	case 3090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13717
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3091:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13722
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13728
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13729
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13733
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13737
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13741
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13745
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13749
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13759
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13767
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13775
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13783
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13791
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13799
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13807
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13815
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13823
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13831
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13839
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13847
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13855
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13863
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13871
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13879
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13887
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13895
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13903
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13911
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13919
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13930
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13931
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13935
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13936
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13941
		{
			yyVAL.bval = true
		}
	case 3125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13942
		{
			yyVAL.bval = false
		}
	case 3126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13946
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13947
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13952
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13958
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13959
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13960
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13963
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13964
		{
			yyVAL.rolespec = nil
		}
	case 3134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13969
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13973
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13981
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13985
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13990
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13991
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13995
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14003
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14007
		{
			yyVAL.node = nil
		}
	case 3143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14021
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14026
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14031
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14039
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14040
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14046
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14050
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14054
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14058
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14062
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14066
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14070
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14074
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14078
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14082
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14086
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14090
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14094
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14098
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14102
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14106
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14111
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14117
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14118
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14123
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14127
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14131
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14137
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14138
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14139
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14140
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14141
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14152
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14165
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14172
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14179
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14193
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14195
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14199
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14201
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3185:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14213
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14221
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14234
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14235
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14241
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14248
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14256
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14264
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14285
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14286
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14287
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14288
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14298
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14305
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14309
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14313
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14317
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14321
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14324
		{
			yyVAL.ival = 0
		}
	case 3204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14327
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14328
		{
			yyVAL.ival = 0
		}
	case 3206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14329
		{
			yyVAL.ival = 0
		}
	case 3207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14333
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14339
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14347
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14351
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14355
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14359
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14363
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14367
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14371
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14375
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14379
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14383
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14387
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14391
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14395
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14399
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14403
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14407
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14412
		{
			yyVAL.ival = 0
		}
	case 3226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14413
		{
			yyVAL.ival = 0
		}
	case 3227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14417
		{
			yyVAL.ival = 0
		}
	case 3228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14418
		{
			yyVAL.ival = 0
		}
	case 3229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14423
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14428
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14440
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14447
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14450
		{
			yyVAL.list = nil
		}
	case 3234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14454
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14455
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14456
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14457
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14458
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14462
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14466
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3241:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:14476
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14489
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14492
		{
			yyVAL.list = nil
		}
	case 3244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14498
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14506
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14510
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14514
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14518
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14529
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14540
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14544
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14555
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14565
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14566
		{
			yyVAL.str = ""
		}
	case 3255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14575
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14586
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14598
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14599
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14603
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14604
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14605
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14606
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14607
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14608
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14609
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14610
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14619
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14633
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14637
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14641
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14645
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14649
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14653
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14657
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14661
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14665
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3277:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14672
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14683
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14690
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14694
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3281:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14698
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14706
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14716
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14726
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3285:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14730
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14744
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14745
		{
			yyVAL.str = ""
		}
	case 3288:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14754
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3289:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14758
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3290:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14762
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3291:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14766
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14770
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14774
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14778
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14782
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14786
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3297:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14790
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14800
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14801
		{
			yyVAL.str = ""
		}
	case 3300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14805
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14806
		{
			yyVAL.str = ""
		}
	case 3302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14815
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14825
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14826
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14831
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14835
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14846
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14859
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14866
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14873
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14880
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14887
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14894
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14901
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14908
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3316:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14920
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14932
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14939
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14946
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3320:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14953
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14960
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14967
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14974
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14981
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14988
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14995
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3327:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15002
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15009
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15016
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15023
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3331:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15030
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3332:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15037
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3333:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15044
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15051
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15067
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15076
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15085
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15094
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15103
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15112
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15121
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3342:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15130
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15139
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3344:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15148
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3345:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15161
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15174
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15183
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15192
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15201
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15210
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15219
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15228
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15237
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15246
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15255
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15264
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15273
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15282
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15300
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3360:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15313
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3361:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15319
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15325
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3363:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:15331
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3364:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15338
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3365:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15344
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15351
		{
			yyVAL.bval = true
		}
	case 3367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15352
		{
			yyVAL.bval = false
		}
	case 3368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15363
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15376
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15380
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15384
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15390
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15396
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15397
		{
			yyVAL.list = nil
		}
	case 3375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15401
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15402
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15407
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15411
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15415
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15421
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15422
		{
			yyVAL.str = "connection_limit"
		}
	case 3382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15423
		{
			yyVAL.str = "encoding"
		}
	case 3383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15424
		{
			yyVAL.str = "location"
		}
	case 3384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15425
		{
			yyVAL.str = "owner"
		}
	case 3385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15426
		{
			yyVAL.str = "tablespace"
		}
	case 3386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15427
		{
			yyVAL.str = "template"
		}
	case 3387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15430
		{
		}
	case 3388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15431
		{
		}
	case 3389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15436
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3390:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15449
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3391:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15458
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3392:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15467
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:15479
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3394:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15491
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3395:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15498
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3398:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15519
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15529
		{
			yyVAL.bval = false
		}
	case 3400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15530
		{
			yyVAL.bval = true
		}
	case 3401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15531
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
