// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const ORDER_P = 57412
const BY = 57413
const GROUP_P = 57414
const HAVING = 57415
const INTO = 57416
const ON = 57417
const JOIN = 57418
const INNER_P = 57419
const LEFT = 57420
const RIGHT = 57421
const FULL = 57422
const OUTER_P = 57423
const CROSS = 57424
const NATURAL = 57425
const USING = 57426
const RECURSIVE = 57427
const MATERIALIZED = 57428
const LATERAL = 57429
const VALUES = 57430
const SEARCH = 57431
const BREADTH = 57432
const DEPTH = 57433
const CYCLE = 57434
const FIRST_P = 57435
const SET = 57436
const INSERT = 57437
const UPDATE = 57438
const DELETE_P = 57439
const MERGE = 57440
const RETURNING = 57441
const CONFLICT = 57442
const OVERRIDING = 57443
const USER = 57444
const SYSTEM_P = 57445
const CURRENT_P = 57446
const CURSOR = 57447
const OF = 57448
const COLUMNS = 57449
const ORDINALITY = 57450
const XMLTABLE = 57451
const JSON_TABLE = 57452
const ROWS = 57453
const PATH = 57454
const PASSING = 57455
const FOR = 57456
const NESTED = 57457
const REF_P = 57458
const XMLNAMESPACES = 57459
const ARRAY = 57460
const ERROR = 57461
const ERROR_P = 57462
const EMPTY = 57463
const EMPTY_P = 57464
const OBJECT_P = 57465
const WRAPPER = 57466
const CONDITIONAL = 57467
const UNCONDITIONAL = 57468
const QUOTES = 57469
const OMIT = 57470
const KEEP = 57471
const SCALAR = 57472
const STRING_P = 57473
const ENCODING = 57474
const VALUE_P = 57475
const JSON_QUERY = 57476
const JSON_VALUE = 57477
const JSON_SERIALIZE = 57478
const JSON_OBJECT = 57479
const JSON_ARRAY = 57480
const JSON_OBJECTAGG = 57481
const JSON_ARRAYAGG = 57482
const JSON_EXISTS = 57483
const JSON_SCALAR = 57484
const FORMAT = 57485
const JSON = 57486
const UTF8 = 57487
const WITHOUT = 57488
const BIT = 57489
const NUMERIC = 57490
const INTEGER = 57491
const SMALLINT = 57492
const BIGINT = 57493
const REAL = 57494
const FLOAT_P = 57495
const DOUBLE_P = 57496
const PRECISION = 57497
const CHARACTER = 57498
const CHAR_P = 57499
const VARCHAR = 57500
const NATIONAL = 57501
const NCHAR = 57502
const VARYING = 57503
const TIMESTAMP = 57504
const INTERVAL = 57505
const INT_P = 57506
const DECIMAL_P = 57507
const DEC = 57508
const BOOLEAN_P = 57509
const VARIADIC = 57510
const FORMAT_LA = 57511
const NOT_LA = 57512
const NULLS_LA = 57513
const WITH_LA = 57514
const WITHOUT_LA = 57515
const MODE_TYPE_NAME = 57516
const MODE_PLPGSQL_EXPR = 57517
const MODE_PLPGSQL_ASSIGN1 = 57518
const MODE_PLPGSQL_ASSIGN2 = 57519
const MODE_PLPGSQL_ASSIGN3 = 57520
const UNION = 57521
const EXCEPT = 57522
const INTERSECT = 57523
const PARTITION = 57524
const RANGE = 57525
const GROUPS = 57526
const PRECEDING = 57527
const FOLLOWING = 57528
const CUBE = 57529
const ROLLUP = 57530
const KEYS = 57531
const UMINUS = 57532

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"SET",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"'<'",
	"'>'",
	"'='",
	"PARTITION",
	"RANGE",
	"GROUPS",
	"PRECEDING",
	"FOLLOWING",
	"CUBE",
	"ROLLUP",
	"KEYS",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:3028

// Helper functions for converting between grammar types and AST types

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 10,
	205, 10,
	-2, 356,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 22,
	1, 10,
	205, 10,
	-2, 356,
	-1, 122,
	16, 222,
	17, 222,
	196, 222,
	-2, 187,
	-1, 207,
	196, 202,
	-2, 188,
	-1, 213,
	194, 193,
	198, 193,
	-2, 46,
	-1, 284,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 117,
	-1, 285,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 118,
	-1, 286,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 119,
	-1, 287,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 120,
	-1, 288,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 121,
	-1, 289,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 122,
	-1, 294,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 130,
	-1, 300,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 134,
	-1, 342,
	196, 201,
	-2, 226,
	-1, 386,
	196, 222,
	-2, 45,
	-1, 419,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 132,
	-1, 420,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 136,
	-1, 435,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 149,
	-1, 472,
	196, 222,
	197, 40,
	206, 40,
	-2, 45,
	-1, 500,
	196, 202,
	-2, 47,
	-1, 517,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 131,
	-1, 522,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 151,
	-1, 523,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 135,
	-1, 525,
	198, 35,
	-2, 32,
	-1, 526,
	198, 36,
	-2, 33,
	-1, 527,
	198, 37,
	-2, 34,
	-1, 605,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 133,
	-1, 606,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 137,
	-1, 610,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 143,
	-1, 618,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 163,
	-1, 619,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 164,
	-1, 620,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 165,
	-1, 621,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 166,
	-1, 622,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 167,
	-1, 623,
	18, 0,
	19, 0,
	20, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 168,
	-1, 624,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 145,
	-1, 625,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 150,
	-1, 659,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 144,
	-1, 660,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 146,
	-1, 661,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	170, 0,
	-2, 152,
	-1, 782,
	7, 481,
	-2, 101,
}

const yyPrivate = 57344

const yyLast = 6066

var yyAct = [...]int16{
	122, 801, 847, 823, 779, 800, 812, 116, 245, 653,
	833, 754, 223, 780, 698, 648, 301, 744, 39, 136,
	94, 94, 43, 507, 699, 39, 713, 719, 382, 646,
	404, 681, 93, 93, 129, 454, 678, 495, 222, 440,
	638, 39, 483, 506, 151, 356, 755, 475, 578, 106,
	339, 409, 393, 374, 315, 381, 234, 500, 376, 11,
	142, 5, 217, 360, 378, 135, 233, 380, 394, 370,
	390, 10, 379, 204, 29, 131, 309, 373, 776, 335,
	876, 11, 866, 241, 346, 306, 242, 28, 775, 793,
	771, 793, 94, 42, 727, 42, 42, 141, 799, 39,
	42, 156, 39, 39, 93, 792, 739, 722, 734, 721,
	717, 707, 694, 672, 793, 740, 42, 671, 722, 352,
	706, 352, 673, 651, 162, 554, 352, 473, 195, 658,
	441, 194, 191, 123, 533, 534, 535, 536, 224, 536,
	147, 213, 89, 597, 22, 169, 39, 503, 94, 530,
	571, 94, 224, 540, 541, 542, 236, 163, 237, 352,
	93, 546, 39, 139, 270, 608, 463, 42, 438, 143,
	224, 163, 486, 208, 42, 464, 42, 42, 42, 457,
	207, 426, 184, 448, 193, 302, 353, 818, 458, 143,
	733, 219, 224, 140, 348, 352, 184, 687, 185, 225,
	733, 630, 215, 224, 629, 628, 530, 317, 224, 332,
	195, 867, 11, 194, 312, 227, 42, 395, 558, 503,
	733, 42, 395, 42, 396, 627, 42, 604, 365, 252,
	361, 42, 363, 42, 405, 406, 236, 42, 405, 406,
	386, 386, 602, 386, 166, 167, 168, 169, 599, 598,
	570, 549, 437, 347, 104, 103, 844, 344, 407, 770,
	42, 697, 403, 667, 650, 313, 193, 643, 215, 590,
	583, 513, 499, 498, 387, 387, 342, 387, 451, 310,
	411, 395, 42, 398, 42, 212, 210, 206, 29, 150,
	146, 96, 368, 567, 388, 343, 366, 405, 406, 496,
	408, 28, 814, 410, 399, 42, 685, 42, 107, 665,
	369, 42, 92, 400, 401, 402, 364, 537, 538, 539,
	392, 414, 415, 704, 160, 412, 413, 456, 825, 416,
	712, 875, 874, 871, 531, 532, 533, 534, 535, 536,
	705, 870, 164, 165, 166, 167, 168, 169, 835, 834,
	850, 849, 864, 94, 863, 434, 164, 165, 166, 167,
	168, 169, 839, 852, 851, 453, 236, 821, 838, 840,
	841, 427, 822, 472, 878, 423, 485, 485, 491, 832,
	485, 485, 485, 421, 869, 815, 868, 442, 436, 649,
	386, 531, 532, 533, 534, 535, 536, 730, 815, 855,
	163, 797, 342, 342, 342, 856, 465, 387, 811, 449,
	750, 470, 387, 859, 447, 853, 195, 443, 444, 194,
	830, 854, 589, 837, 387, 778, 471, 524, 42, 836,
	313, 468, 461, 490, 460, 459, 487, 469, 824, 317,
	505, 42, 654, 471, 28, 489, 195, 504, 468, 527,
	488, 42, 42, 752, 469, 42, 42, 42, 676, 361,
	220, 28, 211, 569, 455, 236, 515, 516, 155, 485,
	99, 244, 193, 716, 386, 357, 358, 386, 23, 24,
	25, 26, 552, 553, 555, 582, 715, 689, 485, 485,
	485, 485, 551, 548, 37, 664, 566, 313, 691, 690,
	362, 351, 526, 90, 829, 561, 452, 342, 387, 831,
	11, 387, 240, 560, 42, 11, 11, 239, 562, 563,
	313, 568, 565, 195, 95, 576, 194, 572, 580, 581,
	575, 270, 508, 579, 42, 144, 641, 509, 574, 611,
	42, 512, 573, 877, 42, 514, 593, 596, 482, 588,
	862, 375, 492, 493, 494, 16, 350, 110, 603, 17,
	42, 215, 861, 42, 42, 42, 42, 736, 860, 36,
	94, 485, 158, 159, 386, 386, 100, 773, 386, 193,
	21, 819, 634, 138, 94, 164, 165, 166, 167, 168,
	169, 491, 161, 154, 102, 148, 252, 98, 114, 735,
	774, 626, 702, 682, 371, 551, 391, 745, 387, 387,
	631, 497, 387, 635, 802, 242, 342, 807, 101, 647,
	342, 805, 644, 806, 808, 387, 424, 636, 637, 311,
	656, 642, 601, 657, 747, 511, 120, 422, 308, 163,
	218, 600, 386, 746, 94, 42, 42, 307, 308, 215,
	748, 428, 510, 100, 100, 303, 243, 304, 767, 42,
	584, 585, 586, 587, 184, 293, 662, 609, 94, 577,
	481, 479, 480, 478, 491, 417, 387, 700, 666, 33,
	185, 292, 670, 798, 763, 105, 772, 121, 738, 13,
	714, 686, 675, 231, 804, 669, 809, 221, 720, 35,
	132, 270, 647, 696, 27, 828, 693, 186, 387, 723,
	695, 816, 731, 94, 701, 749, 445, 446, 137, 42,
	27, 270, 3, 700, 11, 732, 796, 692, 195, 741,
	652, 194, 728, 803, 756, 757, 714, 714, 726, 760,
	725, 720, 729, 42, 753, 97, 710, 742, 680, 30,
	14, 186, 42, 476, 481, 479, 480, 478, 762, 474,
	477, 764, 758, 759, 302, 42, 252, 769, 761, 743,
	674, 781, 14, 42, 645, 788, 789, 790, 718, 700,
	777, 785, 270, 783, 193, 18, 252, 42, 42, 688,
	795, 663, 195, 791, 781, 194, 784, 349, 42, 186,
	186, 186, 186, 12, 186, 813, 817, 810, 238, 42,
	42, 42, 42, 32, 42, 186, 42, 34, 31, 737,
	826, 827, 38, 633, 164, 165, 166, 167, 168, 169,
	842, 94, 846, 843, 355, 848, 655, 367, 232, 42,
	359, 226, 153, 845, 9, 781, 42, 252, 193, 858,
	42, 42, 42, 857, 42, 8, 7, 6, 559, 848,
	865, 319, 316, 439, 430, 430, 333, 209, 781, 42,
	873, 19, 872, 397, 265, 230, 264, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 267, 266, 186, 341, 272, 251, 250, 16, 186,
	249, 340, 17, 248, 186, 247, 42, 42, 246, 125,
	429, 433, 134, 119, 120, 115, 149, 163, 297, 196,
	42, 19, 4, 21, 19, 296, 298, 295, 2, 299,
	1, 0, 0, 108, 108, 0, 228, 0, 0, 186,
	0, 0, 184, 42, 0, 547, 0, 0, 16, 0,
	0, 16, 17, 186, 0, 17, 0, 0, 185, 120,
	0, 0, 163, 0, 0, 121, 173, 174, 175, 0,
	0, 711, 0, 21, 0, 0, 21, 0, 176, 430,
	430, 177, 0, 0, 0, 187, 564, 184, 0, 430,
	430, 0, 183, 188, 181, 0, 189, 0, 152, 0,
	178, 179, 180, 185, 0, 0, 0, 20, 0, 0,
	121, 0, 0, 200, 201, 202, 203, 0, 186, 186,
	205, 0, 0, 0, 0, 520, 521, 0, 0, 0,
	0, 229, 0, 0, 186, 543, 544, 0, 0, 501,
	476, 481, 479, 480, 478, 216, 474, 477, 152, 186,
	0, 0, 0, 0, 0, 0, 591, 20, 0, 0,
	20, 186, 0, 0, 108, 186, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 15, 0, 294, 15, 300, 0, 0, 305, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 186, 164, 165, 166, 167, 168, 169, 0, 0,
	0, 0, 0, 0, 152, 0, 186, 0, 182, 0,
	0, 186, 186, 0, 0, 120, 354, 186, 163, 0,
	170, 171, 172, 0, 0, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 164, 165, 166,
	167, 168, 169, 184, 0, 186, 186, 640, 476, 481,
	479, 480, 478, 0, 474, 477, 639, 0, 0, 185,
	0, 0, 0, 124, 133, 0, 121, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 186, 0, 0, 419, 420, 0,
	0, 0, 0, 0, 186, 186, 0, 677, 430, 186,
	787, 0, 152, 435, 128, 0, 786, 0, 0, 0,
	0, 0, 0, 186, 186, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 703, 0, 530, 0,
	0, 430, 540, 541, 542, 0, 0, 708, 450, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 186, 186,
	186, 0, 0, 0, 430, 0, 0, 186, 462, 0,
	0, 0, 44, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 751, 0, 709, 0, 0,
	0, 0, 0, 502, 55, 0, 0, 152, 0, 0,
	54, 0, 0, 430, 430, 0, 0, 430, 0, 0,
	0, 0, 0, 164, 165, 166, 167, 168, 169, 0,
	517, 0, 53, 0, 0, 0, 522, 523, 0, 0,
	528, 0, 0, 0, 0, 0, 46, 45, 0, 0,
	47, 48, 49, 50, 51, 52, 0, 556, 557, 765,
	766, 0, 0, 768, 0, 0, 0, 108, 82, 83,
	84, 85, 86, 56, 87, 0, 88, 0, 0, 0,
	58, 0, 59, 0, 0, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 57, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 0, 0,
	0, 594, 0, 595, 0, 0, 537, 538, 539, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 186,
	605, 606, 0, 531, 532, 533, 534, 535, 536, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 0, 0, 624, 120, 625,
	0, 163, 214, 0, 0, 173, 174, 175, 44, 199,
	190, 0, 0, 197, 198, 0, 0, 176, 120, 632,
	177, 163, 0, 0, 187, 0, 184, 0, 0, 0,
	55, 183, 188, 181, 0, 189, 54, 0, 0, 178,
	179, 180, 185, 0, 187, 0, 184, 0, 0, 121,
	0, 183, 188, 181, 0, 189, 0, 0, 53, 659,
	660, 661, 185, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 46, 45, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 82, 83, 84, 85, 86, 56,
	87, 0, 88, 684, 0, 0, 58, 0, 59, 0,
	0, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	57, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 0, 0, 0, 0, 530, 0,
	0, 0, 540, 541, 542, 530, 0, 0, 0, 540,
	541, 542, 0, 0, 607, 0, 0, 182, 41, 0,
	0, 545, 0, 0, 0, 318, 0, 0, 0, 170,
	171, 172, 329, 330, 331, 44, 0, 182, 0, 0,
	0, 0, 594, 0, 0, 0, 164, 165, 166, 167,
	168, 169, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 54, 0, 0, 164, 165, 166, 167,
	168, 169, 530, 0, 0, 0, 540, 541, 542, 0,
	0, 0, 0, 594, 0, 53, 0, 0, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	45, 0, 0, 47, 48, 49, 50, 51, 52, 0,
	0, 0, 0, 0, 820, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 85, 86, 56, 87, 0, 88,
	0, 0, 0, 58, 0, 59, 0, 0, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 57, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 0, 130, 0, 124, 133, 537, 538, 539, 120,
	132, 117, 0, 537, 538, 539, 0, 0, 0, 337,
	0, 0, 0, 531, 532, 533, 534, 535, 536, 113,
	531, 532, 533, 534, 535, 536, 326, 327, 328, 338,
	0, 127, 0, 0, 0, 128, 0, 126, 0, 0,
	0, 0, 0, 320, 321, 322, 323, 324, 325, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 539, 46, 45, 0, 0, 47, 48, 49,
	50, 51, 52, 0, 0, 0, 0, 531, 532, 533,
	534, 535, 536, 0, 0, 82, 83, 84, 85, 86,
	56, 87, 0, 88, 0, 0, 0, 58, 0, 59,
	0, 0, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 57, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 130, 0, 124, 133, 0,
	0, 0, 120, 132, 117, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 336, 0, 0, 0,
	0, 0, 113, 0, 0, 530, 0, 0, 0, 540,
	541, 542, 0, 0, 127, 0, 0, 0, 128, 0,
	126, 0, 0, 120, 118, 334, 163, 111, 112, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 519, 0, 46, 45, 0, 0,
	47, 48, 49, 50, 51, 52, 0, 185, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 82, 83,
	84, 85, 86, 56, 87, 0, 88, 0, 0, 0,
	58, 0, 59, 0, 0, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 57, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 130, 0,
	124, 133, 0, 0, 0, 120, 132, 117, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 128, 0, 126, 0, 0, 0, 118, 0, 0,
	111, 112, 109, 537, 538, 539, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	531, 532, 533, 534, 535, 536, 0, 0, 0, 46,
	45, 0, 0, 47, 48, 49, 50, 51, 52, 0,
	0, 164, 165, 166, 167, 168, 169, 0, 0, 0,
	0, 82, 83, 84, 85, 86, 56, 87, 0, 88,
	0, 0, 0, 58, 0, 59, 0, 0, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 57, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 130, 0, 124, 133, 0, 0, 0, 120, 132,
	117, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 550, 0, 0, 0, 0, 0, 113, 120,
	0, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 128, 0, 126, 0, 120, 0,
	118, 163, 0, 111, 112, 0, 0, 184, 0, 121,
	518, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 185, 0, 0, 184, 0, 0, 425,
	121, 0, 46, 45, 0, 0, 47, 48, 49, 50,
	51, 52, 185, 0, 0, 0, 0, 0, 0, 121,
	0, 467, 0, 0, 82, 83, 84, 85, 86, 56,
	87, 0, 88, 0, 0, 0, 58, 0, 59, 0,
	0, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	57, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 130, 0, 124, 133, 0, 0,
	0, 120, 132, 117, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 120, 0, 0, 163, 0, 0, 0, 173,
	174, 175, 0, 127, 0, 0, 0, 128, 0, 126,
	0, 176, 0, 118, 177, 0, 111, 112, 187, 0,
	184, 0, 121, 0, 0, 183, 188, 181, 0, 189,
	0, 53, 0, 178, 179, 180, 185, 164, 165, 166,
	167, 168, 169, 121, 0, 46, 45, 0, 0, 47,
	48, 49, 50, 51, 52, 0, 164, 165, 166, 167,
	168, 169, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 56, 87, 0, 88, 0, 0, 0, 58,
	0, 59, 0, 0, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 57, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 130, 0, 124,
	133, 0, 0, 0, 0, 132, 117, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 127, 0, 0, 0,
	128, 182, 126, 0, 0, 0, 118, 0, 0, 111,
	112, 0, 0, 170, 171, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 345, 0, 0, 0,
	164, 165, 166, 167, 168, 169, 0, 0, 46, 45,
	0, 0, 47, 48, 49, 50, 51, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 85, 86, 56, 87, 0, 88, 0,
	0, 0, 58, 0, 59, 0, 0, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 57, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	130, 0, 124, 133, 0, 0, 0, 0, 132, 117,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 163, 0, 0, 0, 173, 174, 175, 0, 127,
	0, 0, 0, 128, 0, 126, 0, 176, 0, 118,
	177, 0, 431, 432, 187, 0, 184, 0, 0, 0,
	0, 183, 188, 181, 0, 189, 0, 53, 0, 178,
	179, 180, 185, 0, 0, 0, 0, 0, 0, 121,
	0, 46, 45, 0, 0, 47, 48, 49, 50, 51,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 85, 86, 56, 87,
	0, 88, 0, 0, 0, 58, 0, 59, 0, 0,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 57,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 19, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 654, 182, 54, 0,
	0, 0, 118, 0, 0, 431, 432, 0, 0, 170,
	171, 172, 16, 0, 0, 40, 17, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 164, 165, 166, 167,
	168, 169, 0, 0, 46, 45, 377, 21, 47, 48,
	49, 50, 51, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 384, 385,
	383, 56, 87, 0, 88, 0, 0, 0, 58, 0,
	59, 0, 0, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 57, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 130, 0, 124, 133,
	0, 0, 0, 0, 132, 117, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 20, 0, 0, 120, 0, 0, 163, 0, 0,
	0, 173, 174, 175, 0, 127, 0, 0, 0, 128,
	0, 126, 0, 176, 0, 389, 177, 0, 0, 0,
	187, 0, 184, 0, 0, 0, 0, 183, 188, 181,
	0, 189, 0, 53, 0, 178, 179, 180, 185, 0,
	0, 0, 0, 0, 0, 121, 0, 46, 45, 0,
	0, 47, 48, 49, 50, 51, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 85, 86, 56, 87, 0, 88, 0, 592,
	0, 58, 0, 59, 0, 0, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 57, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 130,
	0, 124, 133, 0, 0, 0, 0, 132, 117, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 128, 182, 126, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 170, 171, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	314, 0, 164, 165, 166, 167, 168, 169, 0, 0,
	46, 45, 0, 0, 47, 48, 49, 50, 51, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 85, 86, 56, 87, 0,
	88, 0, 0, 0, 58, 0, 59, 0, 0, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 57, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 130, 0, 124, 133, 0, 0, 0, 0,
	132, 117, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 163, 0, 0, 0, 173, 174, 175,
	0, 127, 0, 0, 0, 128, 0, 126, 0, 176,
	0, 118, 177, 0, 0, 0, 187, 0, 184, 0,
	0, 0, 0, 183, 188, 181, 0, 189, 0, 679,
	0, 178, 179, 180, 185, 0, 0, 0, 0, 0,
	0, 121, 0, 46, 45, 0, 0, 47, 48, 49,
	50, 51, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 85, 86,
	56, 87, 0, 88, 0, 0, 0, 58, 0, 59,
	0, 0, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 57, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 163, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 184, 0, 55, 418, 0, 0, 0, 182,
	54, 0, 0, 0, 118, 0, 0, 0, 185, 0,
	0, 170, 171, 172, 16, 121, 0, 0, 17, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 164, 165,
	166, 167, 168, 169, 0, 0, 46, 45, 0, 21,
	47, 48, 49, 50, 51, 52, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 85, 86, 56, 87, 0, 88, 0, 0, 0,
	58, 0, 59, 0, 0, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 57, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 20, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 15, 0, 0,
	0, 0, 164, 165, 166, 167, 168, 169, 0, 0,
	40, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	45, 377, 0, 47, 48, 49, 50, 51, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 384, 385, 383, 56, 87, 0, 88,
	0, 0, 0, 58, 0, 59, 0, 0, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 57, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	484, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 163, 0, 0, 0, 173, 174, 175, 0, 0,
	55, 0, 0, 0, 0, 0, 54, 176, 0, 0,
	389, 0, 0, 0, 187, 0, 184, 0, 0, 0,
	0, 183, 188, 181, 0, 189, 0, 0, 53, 178,
	179, 180, 185, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 46, 45, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 85, 86, 56,
	87, 0, 88, 0, 0, 0, 58, 0, 59, 0,
	0, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	57, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 182, 0, 54,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 170,
	171, 172, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 164, 165, 166, 167,
	168, 169, 0, 0, 0, 46, 45, 377, 0, 47,
	48, 49, 50, 51, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 384,
	385, 383, 56, 87, 0, 88, 0, 0, 0, 58,
	0, 59, 0, 0, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 57, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 163, 0, 0,
	0, 173, 174, 175, 0, 0, 55, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 372, 0, 0, 0,
	187, 0, 184, 0, 0, 0, 0, 183, 188, 181,
	0, 189, 0, 0, 53, 178, 179, 180, 185, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 46, 45,
	0, 0, 47, 48, 49, 50, 51, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 384, 385, 383, 56, 87, 0, 88, 0,
	0, 0, 58, 0, 59, 0, 0, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 57, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 0, 182, 0, 54, 0, 0, 0, 15,
	0, 0, 0, 0, 0, 170, 171, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 0, 164, 165, 166, 167, 168, 169, 0, 0,
	0, 46, 45, 0, 0, 47, 48, 49, 50, 51,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 85, 86, 56, 87,
	0, 88, 0, 0, 0, 58, 0, 59, 0, 0,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 57,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 45, 0, 0, 47, 48,
	49, 50, 51, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 56, 87, 0, 88, 0, 0, 0, 58, 0,
	59, 0, 0, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 57, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 145, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 45, 0,
	0, 47, 48, 49, 50, 51, 52, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 85, 86, 56, 87, 794, 88, 0, 0,
	0, 58, 0, 59, 0, 0, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 57, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 271,
	262, 254, 255, 256, 257, 258, 259, 130, 273, 274,
	275, 276, 277, 0, 268, 0, 253, 260, 261, 263,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 45,
	0, 0, 47, 48, 49, 50, 51, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 85, 86, 56, 87, 724, 88, 0,
	0, 0, 58, 0, 59, 0, 0, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 57, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	271, 262, 254, 255, 256, 257, 258, 259, 130, 273,
	274, 275, 276, 277, 0, 268, 0, 253, 260, 261,
	263, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	45, 0, 0, 47, 48, 49, 50, 51, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 85, 86, 56, 87, 0, 88,
	0, 0, 0, 58, 0, 59, 0, 0, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 57, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 271, 262, 254, 255, 256, 257, 258, 259, 192,
	273, 274, 275, 276, 277, 0, 268, 0, 253, 260,
	261, 263, 0, 0, 0, 0, 44, 199, 0, 0,
	0, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 0, 0, 54, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 45, 0, 0, 47, 48, 49, 50, 51, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 85, 86, 56, 87, 0,
	88, 0, 0, 0, 58, 0, 59, 0, 0, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 57, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	199, 0, 0, 0, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 0, 0, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 45, 0, 0, 47, 48, 49,
	50, 51, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 85, 86,
	56, 87, 0, 88, 0, 0, 0, 58, 0, 59,
	0, 0, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 57, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 45, 0, 0,
	47, 48, 49, 50, 51, 52, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 85, 86, 56, 87, 0, 88, 0, 0, 0,
	58, 0, 59, 0, 0, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 57, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	45, 0, 0, 47, 48, 49, 50, 51, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 85, 86, 56, 87, 0, 88,
	0, 0, 0, 58, 0, 59, 0, 0, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 57, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 0, 0, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 45, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 85, 86, 56,
	87, 0, 782, 0, 0, 0, 58, 0, 59, 0,
	0, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	57, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 45, 0, 0, 47,
	48, 49, 50, 51, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 86, 56, 87, 0, 88, 0, 0, 0, 58,
	0, 59, 0, 0, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 57, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 45,
	0, 0, 47, 48, 49, 50, 51, 52, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 85, 86, 56, 87, 0, 88, 0,
	0, 0, 58, 0, 59, 0, 0, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 57, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 0, 0, 0, 54, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 45, 0, 0, 47, 48, 49, 50, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 85, 86, 56, 87,
	0, 88, 0, 0, 0, 58, 0, 59, 0, 0,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 57,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 45, 0, 0, 47, 48,
	49, 50, 51, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 85,
	86, 56, 87, 0, 88, 0, 0, 0, 58, 0,
	59, 0, 0, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 57, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81,
}

var yyPact = [...]int16{
	888, -1000, -61, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 383, -1000, 492, 888, 658, 5204, -64, 5919,
	5490, 95, 888, 523, 5204, 554, 520, -1000, 58, 57,
	492, 1891, 1891, -1000, -1000, 508, -1000, -38, -1000, -5,
	4179, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 94,
	-66, 5490, -1000, 93, -1000, -66, 2320, -1000, 5490, 374,
	5776, 5204, 5204, -1000, -1000, 518, -82, -1000, 1437, -1000,
	-1000, 2320, 2320, 2320, 2320, -1000, -1000, -1000, 2320, -1000,
	-1000, 91, -25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 90, -1000, -1000, 518, 89, -1000,
	1251, -25, -1000, 2320, -1000, 5490, 2320, 5490, -66, 674,
	5490, 2, 3199, 835, 670, 4036, -1000, 5490, 433, 428,
	551, 5490, 1891, 4624, 2320, 2320, 2320, 2320, 2320, 2320,
	2320, 2320, 2320, 2320, 2320, 2320, 2320, 2320, 634, -1000,
	-1000, 2320, 881, 2320, 5490, 599, 2320, 588, 83, 568,
	4775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	386, 386, 3913, 143, -25, 2913, 1604, -25, 1251, -1000,
	1748, 551, 2320, -1000, -1000, -1000, 2341, -123, 56, -3,
	-1000, 470, -11, -1000, 2320, -1000, -1000, -1000, 373, 3321,
	412, 5490, 22, -1000, 112, 5490, -1000, -1000, 539, 3750,
	3464, 541, 3464, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26, -1000, -1000, -1000, -1000, -1000, 87, 149,
	85, 85, 85, -1000, -1000, -1000, -1000, -1000, 66, 62,
	-1000, 142, 84, 142, 142, -1000, 165, 142, 43, 43,
	-59, -59, -59, -1000, 1457, 1457, 1457, 1457, 1457, 1457,
	3913, 3627, -1000, 628, 3323, 2320, 2320, 578, 83, 565,
	2217, -1000, -17, 594, -1000, 143, 2606, 2606, -1000, -1000,
	2320, 2320, -1000, -1000, -1000, 55, -1000, -30, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -76, 2320, 2320, 2320, -1000,
	3199, 700, -1000, 541, -14, -1000, 2320, -1000, -1000, 82,
	-1000, 420, 5490, -1000, 3199, 365, 194, -1000, -1000, -18,
	-1000, -1000, -1000, -1000, 539, 4036, 2320, -31, -1000, -25,
	365, 2177, 2749, -79, 677, 5061, 5061, 3893, -1000, 5061,
	5061, 5061, 127, 547, 77, 76, -5, -1000, 964, 2749,
	-1000, 2320, -79, -1000, 21, 2320, 4775, -1000, 688, -1000,
	-1000, -1000, -1000, 688, -1000, 596, 579, 688, -1000, 75,
	-1000, 688, -1000, -1000, 142, 142, -1000, -1000, 2320, 2198,
	1932, 2606, 2606, -1000, 2320, 2320, 4918, -51, 2320, 1648,
	-1000, 2606, 2606, 1581, -36, 903, -25, -1000, 1604, -1000,
	54, 2034, -1000, -81, -81, 2320, 2320, -1000, -1000, 23,
	3199, 888, -1000, -1000, -1000, 1891, 888, 885, 5490, -25,
	365, -1000, 3199, 109, 5490, -1000, 3199, 357, 3607, 53,
	-47, 677, -5, 3464, 466, 462, 3464, 593, 452, 452,
	452, -1000, -1000, -1000, 5490, 74, -1000, 5061, 5061, 5061,
	5061, -25, -1000, -1000, -1000, -1000, 314, 73, 2892, 2320,
	-25, 2320, 3199, 4775, -1000, -54, -1000, -1000, 52, 51,
	584, 575, 45, 2320, 30, -1000, -1000, 1114, 2320, 2320,
	1574, 135, 625, 1114, -1000, -1000, -1000, -1000, 157, 2320,
	4624, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
	2606, 2606, 2606, 192, 192, 2320, -1000, 2320, -1000, -1000,
	2320, -1000, 28, 8, 2320, 7, 3199, 3199, -1000, 4,
	-1000, -82, -1000, -1000, 373, -1000, -1000, 2320, -1000, 5490,
	5061, -1000, 677, 3464, 3464, 1082, 460, 3464, -1000, -1000,
	-1000, -1000, 71, 5490, -1000, -1000, -1000, -1000, -25, -1000,
	5633, 276, 68, -83, 2627, 3199, -1000, -1000, -1000, 125,
	-1000, -1000, 125, -68, -1000, 1114, 1114, 2320, 2320, 2320,
	1114, -1000, -67, -67, -65, -65, -65, -1000, 192, 192,
	192, 192, 192, 192, 1114, 1114, -1000, -1000, -1000, -1000,
	406, 176, 3199, -1000, -1000, -1000, -1000, 1082, -1000, 67,
	2320, 3464, -1000, 5490, -80, -84, -1000, 669, 351, 3178,
	2463, 2320, -1000, -1000, 162, 365, -1000, -1000, -1000, 1114,
	1114, 1114, 0, 395, 408, 888, -1000, 5490, 3199, -1000,
	-85, -1000, 127, 5633, -1000, 65, 5490, 531, 3035, 207,
	-86, -1000, 1224, 2606, 948, 198, -1000, -1000, -1000, 5490,
	393, 380, -1000, -87, -1000, -1000, -1000, 5490, -88, -1000,
	4473, -1000, 207, 531, -1000, -1000, 2463, -112, 4775, 1911,
	284, 5490, 5490, 14, -1000, 528, 496, 665, -91, -1000,
	4624, -1000, 5490, 603, 302, -1000, -1000, 3035, -1000, 346,
	2320, -1000, -1000, 5490, 5490, 5490, 5490, -1000, 5490, -1000,
	5490, 645, -1000, 603, -1000, 2606, 2606, 611, -1000, 2606,
	-1000, 276, 63, -116, -1000, 663, -1000, 516, -6, -16,
	-1000, -1000, -1000, 5490, -1000, 1911, 1911, -1000, 1911, 318,
	5347, 2320, 4775, 1167, 5490, 5490, 5490, -1000, 5490, -92,
	-1000, 4322, 289, -1000, -1000, 643, -1000, -1000, -1000, -1000,
	-1000, -99, 574, 5347, 300, 273, 704, -1000, 1167, -1000,
	-10, 506, 2320, -1000, -1000, -1000, -1000, -1000, -1000, 249,
	-1000, -1000, 292, 286, 286, 698, 397, 425, -1000, 259,
	3199, -1000, -1000, 220, 305, 244, 292, 574, -1000, 60,
	5490, 5490, -1000, 574, 224, 223, -1000, 240, -1000, 239,
	297, 281, 220, -1000, 5347, 306, -1000, -1000, 493, 487,
	475, -1000, -1000, 230, -1000, 228, -1000, 574, -115, 15,
	264, 211, 203, -1000, -1000, -1000, -1000, 5347, 574, -1000,
	201, 200, -117, 468, -1000, -1000, -1000, 254, -1000,
}

var yyPgo = [...]int16{
	0, 930, 928, 722, 922, 0, 23, 12, 38, 26,
	494, 16, 922, 922, 922, 75, 22, 19, 919, 919,
	916, 916, 916, 916, 916, 916, 916, 916, 901, 603,
	557, 7, 915, 913, 912, 79, 50, 57, 73, 60,
	62, 133, 912, 909, 8, 908, 905, 903, 900, 897,
	896, 65, 895, 43, 894, 892, 891, 876, 874, 68,
	52, 30, 51, 873, 44, 39, 34, 867, 866, 863,
	598, 54, 862, 861, 76, 85, 61, 858, 71, 58,
	689, 857, 856, 855, 844, 842, 841, 840, 838, 837,
	836, 63, 56, 66, 834, 35, 69, 45, 823, 49,
	685, 308, 83, 77, 53, 551, 822, 470, 70, 822,
	42, 172, 819, 818, 817, 813, 324, 64, 47, 48,
	40, 808, 749, 803, 503, 312, 797, 791, 789, 785,
	72, 28, 778, 778, 27, 774, 29, 770, 770, 770,
	770, 37, 67, 14, 24, 769, 17, 758, 15, 36,
	748, 31, 55, 4, 13, 6, 746, 46, 744, 11,
	742, 5, 1, 733, 2, 3, 10, 9, 730, 726,
}

var yyR1 = [...]uint8{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 14, 14, 19, 19, 21, 21, 21, 22, 22,
	23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	27, 27, 5, 5, 5, 6, 6, 6, 6, 6,
	7, 8, 8, 9, 9, 10, 10, 10, 20, 20,
	12, 12, 11, 11, 11, 13, 13, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 16, 17, 18, 18, 18, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 30,
	30, 30, 30, 30, 31, 31, 31, 31, 31, 31,
	64, 64, 41, 43, 42, 42, 42, 32, 32, 37,
	37, 40, 40, 39, 39, 39, 39, 38, 38, 33,
	131, 34, 34, 66, 66, 66, 66, 66, 66, 35,
	35, 36, 36, 36, 64, 64, 44, 45, 45, 45,
	45, 45, 51, 51, 51, 53, 54, 140, 59, 59,
	60, 60, 46, 46, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 48, 48, 49, 49, 52,
	52, 52, 52, 52, 52, 55, 56, 57, 58, 50,
	50, 50, 50, 61, 61, 61, 62, 62, 63, 63,
	70, 70, 72, 72, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 71, 71, 65, 67,
	68, 69, 75, 75, 74, 76, 76, 77, 79, 79,
	78, 78, 80, 80, 80, 80, 100, 100, 99, 99,
	101, 101, 101, 101, 102, 102, 103, 103, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
	105, 106, 106, 106, 107, 107, 107, 117, 117, 117,
	117, 117, 117, 118, 118, 118, 118, 119, 119, 120,
	120, 121, 122, 122, 122, 123, 123, 124, 124, 125,
	126, 126, 126, 127, 127, 127, 128, 128, 128, 129,
	129, 108, 108, 109, 96, 96, 96, 98, 111, 111,
	110, 110, 110, 110, 112, 112, 113, 113, 114, 114,
	115, 115, 116, 116, 130, 130, 141, 141, 135, 135,
	136, 137, 137, 138, 138, 139, 133, 133, 132, 132,
	134, 147, 147, 149, 149, 148, 148, 148, 148, 150,
	150, 151, 151, 142, 142, 143, 143, 144, 144, 144,
	145, 145, 146, 146, 146, 146, 146, 152, 157, 156,
	156, 160, 160, 158, 158, 159, 162, 162, 163, 163,
	163, 163, 163, 163, 163, 163, 164, 164, 164, 164,
	161, 161, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 166, 166, 166, 166, 166, 167, 167, 168, 168,
	169, 169, 153, 153, 154, 154, 154, 154, 154, 154,
	155, 155, 81, 85, 85, 86, 86, 86, 86, 86,
	97, 97, 87, 87, 91, 82, 88, 88, 93, 93,
	92, 89, 89, 83, 121, 121, 84, 90, 94, 95,
	95,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 0, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 2, 3, 0,
	1, 3, 1, 3, 2, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 2, 4, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 3, 5,
	3, 3, 2, 6, 7, 6, 7, 3, 4, 4,
	6, 5, 7, 1, 3, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	2, 1, 0, 2, 2, 3, 5, 0, 2, 4,
	1, 1, 2, 3, 5, 6, 8, 6, 6, 1,
	3, 1, 3, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	3, 0, 2, 3, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 2, 4, 1, 5, 2, 5,
	2, 5, 2, 3, 3, 0, 1, 0, 3, 0,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 0,
	0, 0, 0, 1, 3, 1, 1, 1, 3, 3,
	1, 2, 6, 6, 2, 1, 1, 0, 1, 3,
	3, 2, 1, 1, 2, 0, 1, 3, 2, 2,
	3, 1, 4, 2, 3, 2, 3, 2, 3, 1,
	1, 2, 2, 4, 1, 2, 3, 3, 4, 5,
	4, 5, 4, 2, 2, 2, 1, 1, 0, 5,
	2, 4, 2, 2, 3, 1, 0, 1, 3, 9,
	1, 2, 0, 7, 7, 0, 10, 6, 0, 4,
	5, 2, 0, 1, 2, 4, 0, 1, 1, 0,
	5, 2, 4, 1, 2, 0, 1, 0, 1, 5,
	1, 0, 2, 0, 2, 6, 2, 0, 1, 3,
	2, 4, 0, 1, 3, 2, 4, 0, 1, 3,
	3, 2, 0, 2, 2, 2, 3, 3, 4, 1,
	3, 3, 2, 7, 12, 1, 3, 2, 3, 3,
	1, 2, 2, 2, 2, 1, 2, 13, 2, 2,
	0, 2, 0, 1, 3, 3, 2, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 6, 0,
	3, 0, 2, 3, 2, 3, 4, 4, 3, 3,
	0, 5, 2, 5, 2, 0, 4, 2, 1, 0,
	1, 0, 1, 3, 3, 6, 7, 5, 7, 9,
	2, 0, 7, 1, 3, 1, 4, 4, 7, 2,
	1, 1, 1, 3, 2, 8, 1, 3, 3, 5,
	2, 1, 3, 7, 2, 0, 10, 0, 0, 2,
	0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -76, -81, -82, -83, -84,
	-78, -79, -123, -80, -122, 196, 63, 67, -129, 36,
	172, 88, 205, 95, 96, 97, 98, -80, -78, -79,
	-122, -113, -115, 21, -114, 41, -105, -10, -106, -5,
	66, 4, -15, -16, 21, 86, 85, 89, 90, 91,
	92, 93, 94, 71, 49, 43, 112, 133, 119, 121,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 107, 108, 109, 110, 111, 113, 115, 206,
	-124, 85, -125, -7, -5, -124, 196, -3, 74, -107,
	-105, 64, 74, 197, 197, -100, -99, -101, -28, 201,
	-30, 199, 200, 31, -70, -32, -31, 13, 196, -33,
	11, 62, -5, -41, 6, -43, 49, 43, 47, -66,
	4, -15, 12, 7, -34, -51, -17, -100, 75, 201,
	198, -37, -39, 194, -10, 196, 196, 206, -124, -20,
	196, -64, -28, -85, -10, 94, -5, 23, -107, -107,
	-116, 74, 206, 14, 199, 200, 201, 202, 203, 204,
	182, 183, 184, 18, 19, 20, 30, 33, 52, 53,
	54, 46, 170, 44, 39, 55, -70, 37, 45, 48,
	23, -6, 4, -15, -16, -17, -18, 26, 27, 22,
	-28, -28, -28, -28, -38, -28, 196, -37, 198, -67,
	196, -116, 196, -5, 201, -39, -28, -40, -10, -64,
	-125, 23, -8, -7, 206, 197, -86, -76, 101, 196,
	40, 23, -88, -93, -92, 196, -5, -5, -121, 84,
	84, -102, 64, -10, -101, -44, -45, -46, -47, -48,
	-49, -50, -51, 164, 149, 150, 151, 152, 153, 154,
	165, 166, 148, 167, -57, -58, -55, -56, 162, 56,
	-5, 147, -52, 156, 157, 158, 159, 160, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, 47, 31, -28, 46, 44, 37, 45, 48,
	-28, -11, -5, 56, 58, -28, -75, 59, 60, -74,
	196, 61, -6, -39, 197, -71, -72, -5, 11, -73,
	199, 200, 201, 202, 203, 204, 182, 183, 184, 18,
	19, 20, -5, -68, 197, -35, 168, 21, 41, -36,
	-28, -54, -51, -102, -64, 195, 207, 197, 197, -126,
	86, 31, 206, 197, -28, -94, -97, 102, 103, -87,
	-91, -5, 88, -5, -102, 206, 184, -89, -92, -38,
	-96, 65, 196, -103, -104, -105, -79, 87, -117, -130,
	-142, -152, -131, 111, 109, 110, -5, -66, -104, 196,
	-108, 65, -103, -60, -59, 196, 198, -63, 196, 155,
	-60, -60, -60, 196, -61, 172, 173, 196, -61, -62,
	161, 196, -62, -62, 156, 157, -62, 47, 42, -28,
	-28, -75, 59, -74, 61, 42, 198, -59, 57, -29,
	-30, 199, 200, -29, -64, -28, -38, 197, 198, -69,
	-65, 206, -36, -35, -35, 16, 17, -108, 197, -40,
	-28, 196, 86, -7, -95, 99, 133, 197, 206, -38,
	-96, -93, -28, 197, 206, -95, -28, 104, -79, -117,
	-8, -104, -5, 206, 82, -118, 76, 83, 80, 78,
	79, 77, -111, -110, 23, -5, -111, -79, -130, -142,
	-152, -5, -111, -111, -111, -141, 172, 64, 196, 196,
	-37, 75, -28, 198, -60, -64, -53, -6, -41, -41,
	56, 56, -41, 196, -41, -62, -62, -28, 42, 42,
	-29, -29, -28, -28, -5, 4, -15, -16, -28, 30,
	14, 199, 200, 201, 202, 203, 204, 182, 183, 184,
	18, 19, 20, -29, -29, 30, 197, 42, -71, 197,
	168, -36, -65, -65, 206, -65, -28, -28, 195, -77,
	-76, -99, -76, -76, 101, -91, -95, 184, -92, 106,
	197, 197, -104, 76, 76, -104, -118, 76, -119, 81,
	-119, -119, -5, 196, -111, -111, -111, -111, -37, 108,
	196, -30, 117, -157, -28, -28, -53, 197, 197, 197,
	57, 57, 197, -64, 197, -28, -28, 30, 30, 42,
	-28, -44, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -29, -28, -28, -36, 197, 197, 197,
	197, -97, -28, -98, -7, -110, -104, -104, -120, 84,
	75, 76, -104, 196, -8, -135, -136, -131, -148, 113,
	196, 206, -168, -167, 169, -90, -61, -61, 197, -28,
	-28, -28, -65, -127, 89, 133, -120, 196, -28, -104,
	-8, 197, 197, 206, -137, 23, 107, -30, -149, 71,
	-150, -151, -29, 40, -28, 144, -95, 197, -128, 92,
	91, 90, -76, -8, 197, -141, -136, 196, -143, -144,
	-5, -149, 71, -30, 116, 133, 206, 197, 23, -29,
	-156, 23, 132, -9, -5, 93, 93, 197, -132, -134,
	-5, 197, 206, -44, 114, -149, -151, 206, -6, -160,
	113, -5, -7, 206, 94, 71, 71, -112, 23, 197,
	206, -44, -144, -145, -146, 4, 40, 31, 47, 112,
	108, -30, 107, -158, -159, -157, -5, -5, -9, -9,
	-5, -134, -147, 39, -146, -29, -29, 47, -29, -148,
	196, 206, 23, 61, 84, 94, 94, -11, 107, -153,
	-154, -5, 115, -159, -6, -31, 49, 43, -5, -5,
	-5, -143, 197, 206, 114, -44, -169, 112, 40, 197,
	-161, -162, 40, -163, 120, 47, 49, 43, 50, 122,
	-154, 108, -155, -167, 29, 112, 7, -31, 197, 75,
	-28, 118, 123, -165, 146, 36, -155, -155, 7, 107,
	23, 84, 120, -166, 129, 128, 124, 118, 124, 118,
	125, 126, -165, -161, 196, -7, -5, -164, -162, 127,
	127, 124, 124, 118, 124, 118, 124, -166, -153, 107,
	75, 75, 75, 124, 124, -164, 197, 196, 122, 120,
	130, 130, -153, -162, 131, 131, 197, 75, 120,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	295, 296, 0, 300, 355, 0, 387, 0, 305, 0,
	0, 0, -2, 0, 0, 0, 0, 301, 0, 0,
	0, 307, 307, 386, 390, 388, 304, 329, 330, 45,
	0, 32, 33, 34, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 0,
	352, 59, 357, 49, 40, 353, 0, 2, 0, 0,
	334, 0, 0, 298, 299, 393, 306, 308, 312, 313,
	107, 0, 0, 0, 0, 169, 170, 197, 0, 173,
	270, 0, -2, 174, 175, 176, 67, 68, 179, 289,
	32, 33, 182, 183, 0, 201, 224, 393, 0, 331,
	0, 47, 189, 192, 332, 0, 0, 0, 354, 0,
	0, 0, 180, 0, 493, 0, 335, 0, 515, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	129, 0, 0, 0, 0, 0, 0, 292, 0, 0,
	0, 311, 35, 36, 37, 38, 39, 104, 105, 106,
	108, 109, 125, 142, 171, 0, 0, -2, 0, 290,
	0, 315, 0, -2, 194, 190, 191, 0, 0, 0,
	358, 362, 0, 41, 0, 369, 518, 495, 0, 0,
	0, 0, 315, 506, 0, 0, 197, 336, 376, 0,
	0, 372, 0, 392, 309, 110, 216, 217, 218, 219,
	220, 221, 231, 234, 235, 236, 237, 238, 269, 0,
	231, 231, 231, 244, 245, 246, 247, 248, 265, 265,
	222, 267, 256, 267, 267, 251, 0, 267, 111, 112,
	113, 114, 115, 116, -2, -2, -2, -2, -2, -2,
	123, 124, 126, 0, -2, 0, 0, 292, 0, 0,
	-2, 138, 52, 0, 140, 141, 0, 0, 293, 147,
	0, 0, 310, 198, 197, 0, 286, 0, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 193, 291, 203, 288, 0, 57, 0, 209,
	211, 0, -2, 372, 0, 195, 192, 333, 370, 0,
	360, 0, 0, 48, 181, 520, 0, 500, 501, 0,
	502, 197, 499, 494, 376, 0, 0, 0, 511, 510,
	520, 0, 0, 514, 316, 379, 379, 0, 321, 379,
	379, 379, 397, 99, 97, 98, -2, 200, 0, 0,
	302, 0, 314, 232, 231, 0, 0, 239, 0, 240,
	241, 242, 243, 0, 260, 0, 0, 0, 262, 258,
	266, 0, 249, 250, 267, 267, 254, 128, 0, -2,
	-2, 0, 0, 148, 0, 0, 0, 54, 0, 0,
	153, 0, 0, 0, 0, -2, 172, 271, 0, 199,
	0, 0, 288, 288, 288, 0, 0, 303, 389, 0,
	191, 0, 361, 42, 492, 0, 0, 0, 0, 504,
	520, 507, 508, 0, 0, 513, 374, 0, 379, 321,
	0, 0, -2, 0, 0, 0, 0, 0, 348, 348,
	348, 346, 318, 378, 0, 383, 319, 379, 379, 379,
	379, 222, 323, 325, 327, 394, 0, 0, 0, 0,
	-2, 0, 371, 0, 233, 0, 228, 225, 0, 0,
	0, 0, 0, 0, 0, 252, 253, -2, 0, 0,
	0, 0, -2, -2, 53, -2, -2, -2, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 156, 0, 294, 0, 287, 204,
	0, 210, 0, 0, 0, 0, 212, 213, 196, 0,
	297, 519, 496, 497, 0, 503, 505, 0, 512, 0,
	337, 351, 317, 0, 0, 0, 0, 0, 343, 347,
	344, 345, 381, 0, 320, 324, 326, 328, 202, 396,
	0, 0, 0, 0, 479, 517, 229, 230, 268, 265,
	263, 264, 265, 0, 255, -2, -2, 0, 0, 0,
	-2, 154, 157, 158, 159, 160, 161, 162, -2, -2,
	-2, -2, -2, -2, -2, -2, 288, 205, 207, 208,
	365, 0, 509, 375, 377, 322, 338, 0, 340, 0,
	0, 0, 342, 0, 0, 0, 398, 402, 0, 0,
	0, 0, 438, 478, 0, 520, 259, 261, 257, -2,
	-2, -2, 0, 368, 0, 0, 339, 0, 350, 341,
	0, 382, 397, 0, 400, 0, 0, 415, 0, 66,
	0, 419, 0, 0, 440, 477, 516, 206, 359, 0,
	0, 0, 498, 0, 380, 395, 399, 0, 0, 425,
	0, 416, 0, 417, 413, 414, 0, 0, 0, 422,
	442, 0, 0, 0, 43, 0, 0, 385, 0, 408,
	0, 423, 0, 427, 0, 418, 420, 0, 421, 0,
	0, 439, 476, 0, 0, 0, 0, 349, 0, 401,
	0, 412, 426, 429, 430, 0, 0, 0, 435, 0,
	428, 0, 0, 441, 443, 0, 44, 0, 0, 0,
	384, 409, 410, 0, 431, 432, 433, 434, 436, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	482, 0, -2, 444, 445, 0, 177, 178, 367, 363,
	364, 0, 461, 0, 0, 491, 0, 480, 0, 424,
	0, 0, 0, 447, 448, 449, 450, 451, 452, 455,
	483, 484, 470, 491, 491, 0, 0, 0, 437, 0,
	446, 453, 454, 475, 0, 0, 470, 461, 490, 0,
	0, 0, 460, 459, 0, 0, 462, 0, 464, 0,
	0, 0, 475, 487, 0, 0, 366, 485, 0, 472,
	474, 463, 465, 0, 468, 0, 469, 459, 0, 0,
	0, 0, 0, 466, 467, 486, 488, 0, 456, 457,
	0, 0, 0, 0, 471, 473, 489, 0, 458,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 203, 3, 3,
	196, 197, 201, 199, 206, 200, 198, 202, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 207, 205,
	182, 184, 183, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 194, 3, 195, 204,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	185, 186, 187, 188, 189, 190, 191, 192, 193,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:260
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:275
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:283
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:298
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:309
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:310
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:311
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:312
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:313
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:315
		{
			yyVAL.stmt = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:326
		{
			yyVAL.str = yyDollar[1].str
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:327
		{
			yyVAL.str = ""
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:331
		{
			yyVAL.node = yyDollar[1].node
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:332
		{
			yyVAL.node = nil
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:336
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:337
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:338
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:342
		{
			yyVAL.ival = 1
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:343
		{
			yyVAL.ival = 0
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:347
		{
			yyVAL.ival = 1
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:348
		{
			yyVAL.ival = 0
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:352
		{
			yyVAL.ival = 1
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:353
		{
			yyVAL.ival = 0
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:357
		{
			yyVAL.ival = 1
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:358
		{
			yyVAL.ival = 0
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:362
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:363
		{
			yyVAL.node = nil
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:367
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:368
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:369
		{
			yyVAL.node = nil
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:370
		{
			yyVAL.node = nil
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:379
		{
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:380
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:381
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:385
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:386
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:387
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:388
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:389
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:393
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:398
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:402
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:411
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:415
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:424
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:431
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
				Inh:        true, // inheritance enabled by default
			}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:439
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:468
		{
			yyVAL.node = yyDollar[2].node
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:469
		{
			yyVAL.node = nil
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:474
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:478
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:487
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:491
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:495
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.node = nodes
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:507
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:511
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:525
		{
			yyVAL.str = "all"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.str = "materialized"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:527
		{
			yyVAL.str = "recursive"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.str = "search"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:529
		{
			yyVAL.str = "breadth"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.str = "depth"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:531
		{
			yyVAL.str = "cycle"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:532
		{
			yyVAL.str = "first"
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:533
		{
			yyVAL.str = "set"
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.str = "by"
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:535
		{
			yyVAL.str = "true"
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:536
		{
			yyVAL.str = "false"
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.str = "path"
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.str = "value"
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:539
		{
			yyVAL.str = "error"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.str = "empty"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:541
		{
			yyVAL.str = "wrapper"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:542
		{
			yyVAL.str = "conditional"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:543
		{
			yyVAL.str = "unconditional"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.str = "quotes"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.str = "omit"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:546
		{
			yyVAL.str = "keep"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:547
		{
			yyVAL.str = "scalar"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:548
		{
			yyVAL.str = "string"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.str = "encoding"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:550
		{
			yyVAL.str = "json_query"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:551
		{
			yyVAL.str = "json_value"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:552
		{
			yyVAL.str = "json_serialize"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.str = "json_object"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.str = "json_array"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.str = "json_objectagg"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:556
		{
			yyVAL.str = "json_arrayagg"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:557
		{
			yyVAL.str = "json_exists"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:558
		{
			yyVAL.str = "json_scalar"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.str = "format"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.str = "json"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.str = "utf8"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:562
		{
			yyVAL.str = "without"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.str = "columns"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:564
		{
			yyVAL.str = "ordinality"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:565
		{
			yyVAL.str = "xmltable"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:566
		{
			yyVAL.str = "json_table"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.str = "rows"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:568
		{
			yyVAL.str = "passing"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:569
		{
			yyVAL.str = "nested"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:574
		{
			yyVAL.str = yyDollar[1].str
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.str = yyDollar[1].str
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.str = "create"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.str = "drop"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.str = "alter"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.node = yyDollar[1].node
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:603
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:608
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:613
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:617
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:622
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:627
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:632
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:637
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:642
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:647
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:652
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:657
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:662
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:667
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:672
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:677
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:681
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:685
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:689
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:693
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:697
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:701
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:705
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:710
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:718
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:723
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:731
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:736
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:744
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:749
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:757
		{
			// Convert any_name (which returns a NodeList of strings) to []string
			nodeList := yyDollar[3].node.(*ast.NodeList)
			names := make([]string, len(nodeList.Items))
			for i, node := range nodeList.Items {
				names[i] = node.(*ast.String).SVal
			}
			collateClause := ast.NewCollateClause(names)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:769
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:775
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:781
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:785
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:789
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:794
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:799
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 146:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:804
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:809
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:814
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:819
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:824
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:832
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:837
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.node = yyDollar[1].node
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:848
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:852
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:857
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:862
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:867
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:872
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:877
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:882
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:887
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:892
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:897
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:902
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:907
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:912
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:917
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.node = yyDollar[1].node
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.node = yyDollar[1].node
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:926
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:935
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.node = yyDollar[1].node
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:979
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = yyDollar[1].str
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:993
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:994
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1003
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1017
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.node = yyDollar[1].node
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.node = nil
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.list = nil
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1047
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1059
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.node = yyDollar[1].node
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1076
		{
			// Create function name from ColId + indirection
			result := []*ast.String{ast.NewString(yyDollar[1].str)}
			for _, node := range yyDollar[2].list.Items {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1093
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1099
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:1105
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1113
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1119
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1131
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.node = yyDollar[1].node
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1157
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.node = yyDollar[1].node
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.node = yyDollar[1].node
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.node = yyDollar[1].node
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.node = yyDollar[1].node
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.node = yyDollar[1].node
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.node = yyDollar[1].node
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = yyDollar[1].str
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = yyDollar[1].str
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = yyDollar[1].str
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.node = yyDollar[1].node
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1197
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.list = nil
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1214
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1220
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list.Items {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.node = yyDollar[2].node
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.node = yyDollar[1].node
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.node = yyDollar[1].node
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.node = yyDollar[1].node
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.node = yyDollar[1].node
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1299
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1307
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "varchar"
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1319
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1327
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1335
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.node = ast.NewTypeName([]string{yyDollar[1].str})
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// Note: In full implementation, would set typmods to list with 1
			}
			yyVAL.node = typeName
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1362
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1374
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1386
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1396
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1406
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1416
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.ival = 1
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.ival = 0
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.ival = 0
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.ival = 1
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.ival = 0
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1437
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = yyDollar[1].str
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = yyDollar[1].str
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "+"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "-"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "*"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "/"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "%"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "^"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "<"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = ">"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "="
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "<="
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = ">="
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "<>"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.list = nil
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.node = nil
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.node = nil
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.node = nil
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.ival = 0
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.ival = 0
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.node = yyDollar[2].node
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1545
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			yyVAL.stmt = selectStmt
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1559
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1571
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1583
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].node)
			yyVAL.stmt = selectStmt
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.list = yyDollar[1].list
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.list = nil
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1610
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1619
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.list = yyDollar[2].list
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.list = nil
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1646
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1655
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1663
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].node != nil {
				alias = yyDollar[2].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1674
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].node != nil {
				alias = yyDollar[3].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.node = yyDollar[1].node
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1689
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].node.(*ast.Alias)
			yyVAL.node = joinExpr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1695
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].node != nil {
				rangeFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1703
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1712
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].node != nil {
				rangeTableFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1720
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeTableFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1729
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].node != nil {
				jsonTable.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1737
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].node != nil {
				jsonTable.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.node = yyDollar[1].node
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1762
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1768
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1774
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.node = yyDollar[1].node
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1788
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = rangeVar
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1794
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1815
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1824
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1850
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1876
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1884
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.ival = 1
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.ival = 0
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1913
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].node
			var aliasNode ast.Node = nil
			if yyDollar[5].node != nil {
				aliasNode = yyDollar[5].node
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.node = yyDollar[2].node
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.node = yyDollar[3].node
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.node = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.node = yyDollar[1].node
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.node = nil
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1966
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 359:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:1974
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].node != nil {
				cte.Aliascolnames = yyDollar[2].node.(*ast.NodeList)
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2009
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2015
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.node = nil
		}
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:2028
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2037
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2045
		{
			yyVAL.node = nil
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2056
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].node.(*ast.NodeList)
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2064
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].node.(*ast.NodeList)
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2078
		{
			yyVAL.node = yyDollar[2].node
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2079
		{
			yyVAL.node = nil
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2083
		{
			yyVAL.node = yyDollar[1].node
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2091
		{
			yyVAL.node = yyDollar[2].node
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2093
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2097
		{
			yyVAL.node = nil
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2101
		{
			yyVAL.str = yyDollar[1].str
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2109
		{
			yyVAL.node = yyDollar[1].node
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = nil
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2115
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2120
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2124
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2129
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2137
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = alias
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2141
		{
			yyVAL.node = nil
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.ival = 1
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2150
		{
			yyVAL.ival = 0
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2154
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2155
		{
			yyVAL.list = yyDollar[4].node.(*ast.NodeList)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2159
		{
			yyVAL.list = yyDollar[1].list
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2160
		{
			yyVAL.list = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2170
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2173
		{
			yyVAL.node = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2184
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2193
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2203
		{
			yyVAL.ival = 1
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2204
		{
			yyVAL.ival = 0
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2210
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2214
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2221
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].node != nil {
				funcList.Append(yyDollar[2].node)
			}
			yyVAL.list = funcList
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2230
		{
			yyVAL.node = yyDollar[3].list
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2231
		{
			yyVAL.node = nil
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2241
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2245
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2257
		{
			name := yyDollar[1].str
			fp := &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     &name,
				ArgType:  yyDollar[2].node.(*ast.TypeName),
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
			yyVAL.node = fp
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2272
		{
			yyVAL.list = yyDollar[3].list
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2273
		{
			yyVAL.list = nil
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2279
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2283
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2292
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2303
		{
			// Convert NodeList to []string for collation names
			nodeList := yyDollar[2].node.(*ast.NodeList)
			collNames := make([]string, len(nodeList.Items))
			for i, item := range nodeList.Items {
				if str, ok := item.(*ast.String); ok {
					collNames[i] = str.SVal
				}
			}
			yyVAL.node = ast.NewCollateClause(collNames)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2314
		{
			yyVAL.node = nil
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2319
		{
			yyVAL.str = "BY REF"
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2320
		{
			yyVAL.str = "BY VALUE"
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2326
		{
			yyVAL.node = yyDollar[2].node
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2330
		{
			yyVAL.node = yyDollar[2].node
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2334
		{
			yyVAL.node = yyDollar[3].node
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2338
		{
			yyVAL.node = yyDollar[3].node
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2346
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2350
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2358
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2363
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 423:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2372
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[6].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[6].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 424:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:2388
		{
			// Convert namespace list to []*ResTarget
			var namespaces []*ast.ResTarget
			if yyDollar[5].list != nil {
				namespaces = make([]*ast.ResTarget, len(yyDollar[5].list.Items))
				for i, item := range yyDollar[5].list.Items {
					namespaces[i] = item.(*ast.ResTarget)
				}
			}
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), namespaces, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[11].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[11].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2415
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2419
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2428
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2433
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2438
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2452
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2461
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2469
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2473
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2477
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 437:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:2490
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2514
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2525
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.node = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2531
		{
			yyVAL.node = yyDollar[2].list
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2532
		{
			yyVAL.node = nil
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2536
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2537
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2542
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2550
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2558
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2570
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2571
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2572
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2573
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2574
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2575
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2576
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2581
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2585
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2589
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.node = nil
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2598
		{
			yyVAL.node = yyDollar[1].node
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.node = nil
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2604
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2605
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2606
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2608
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2609
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2610
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2612
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2617
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2627
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2647
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2657
		{
			yyVAL.node = yyDollar[1].node
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2658
		{
			yyVAL.node = nil
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2663
		{
			yyVAL.node = ast.NewString("path")
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2664
		{
			yyVAL.node = nil
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2670
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2674
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2683
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2692
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2706
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2720
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 488:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2731
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:2740
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2751
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.node = nil
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2768
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			if yyDollar[1].node != nil {
				insertStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			// insertStmt.OnConflictClause = $6 // TODO: Add when ON CONFLICT is implemented
			if yyDollar[7].node != nil {
				insertStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].node))
			}
			yyVAL.stmt = insertStmt
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2784
		{
			yyVAL.node = yyDollar[1].node
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2788
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.node = rangeVar
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2797
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2803
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2810
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2819
		{
			insertStmt := ast.NewInsertStmt(nil)
			if yyDollar[2].list != nil {
				insertStmt.Cols = convertToResTargetList(yyDollar[2].list.Items)
			}
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2829
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2838
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2839
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2844
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2848
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2856
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2868
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				updateStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			updateStmt.TargetList = convertToResTargetList(yyDollar[5].list.Items)
			if yyDollar[6].list != nil {
				updateStmt.FromClause = yyDollar[6].list
			}
			updateStmt.WhereClause = yyDollar[7].node
			if yyDollar[8].node != nil {
				updateStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[8].node))
			}
			yyVAL.stmt = updateStmt
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2887
		{
			yyVAL.list = yyDollar[1].list
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2891
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2902
		{
			target := yyDollar[1].node.(*ast.ResTarget)
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2908
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2928
		{
			yyVAL.node = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2934
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2935
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2945
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].node.(*ast.RangeVar))
			if yyDollar[1].node != nil {
				deleteStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			if yyDollar[5].node != nil {
				deleteStmt.UsingClause = yyDollar[5].node.(*ast.NodeList)
			}
			deleteStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].node != nil {
				deleteStmt.ReturningList = convertToResTargetList(convertToNodeList(yyDollar[7].node))
			}
			yyVAL.stmt = deleteStmt
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2963
		{
			yyVAL.node = yyDollar[2].list
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2967
		{
			yyVAL.node = nil
		}
	case 516:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:2982
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			if yyDollar[1].node != nil {
				mergeStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			}
			mergeStmt.Relation = yyDollar[4].node.(*ast.RangeVar)
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			// mergeStmt.MergeWhenClauses = $9 // TODO: Implement when needed
			// mergeStmt.ReturningList = convertToNodeList($10) // TODO: Implement when needed
			yyVAL.stmt = mergeStmt
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3000
		{
			yyVAL.list = nil
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3012
		{
			yyVAL.node = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3019
		{
			yyVAL.node = yyDollar[2].list
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3023
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
