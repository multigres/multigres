// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:13520

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 87,
	540, 87,
	-2, 1580,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 90,
	1, 1493,
	26, 1493,
	36, 1493,
	74, 1493,
	100, 1493,
	532, 1493,
	540, 1493,
	-2, 1498,
	-1, 93,
	67, 1910,
	84, 1910,
	85, 2592,
	236, 2779,
	307, 2077,
	419, 1910,
	480, 1910,
	-2, 100,
	-1, 116,
	68, 1497,
	69, 1497,
	130, 1497,
	269, 1497,
	280, 1497,
	316, 1497,
	470, 1497,
	509, 1497,
	-2, 1499,
	-1, 128,
	1, 87,
	540, 87,
	-2, 1580,
	-1, 170,
	85, 2591,
	-2, 1909,
	-1, 247,
	61, 305,
	64, 305,
	527, 305,
	533, 305,
	-2, 2635,
	-1, 706,
	68, 1482,
	69, 1482,
	130, 1482,
	280, 1482,
	-2, 1500,
	-1, 712,
	68, 1483,
	69, 1483,
	130, 1483,
	280, 1483,
	-2, 1503,
	-1, 766,
	84, 1910,
	480, 1910,
	-2, 99,
	-1, 768,
	209, 88,
	-2, 2598,
	-1, 872,
	7, 1410,
	16, 1410,
	17, 1410,
	531, 1410,
	-2, 106,
	-1, 873,
	7, 1411,
	16, 1411,
	17, 1411,
	531, 1411,
	-2, 107,
	-1, 881,
	531, 1412,
	-2, 3058,
	-1, 900,
	93, 2915,
	398, 2113,
	401, 2915,
	-2, 2006,
	-1, 904,
	93, 2915,
	398, 2113,
	401, 2915,
	-2, 2006,
	-1, 1049,
	74, 116,
	-2, 121,
	-1, 1075,
	68, 1482,
	69, 1482,
	130, 1482,
	280, 1482,
	-2, 1504,
	-1, 1130,
	7, 1212,
	531, 1212,
	-2, 486,
	-1, 1145,
	7, 537,
	16, 537,
	17, 537,
	531, 537,
	-2, 1260,
	-1, 1167,
	7, 1454,
	-2, 487,
	-1, 1175,
	7, 1424,
	-2, 470,
	-1, 1176,
	7, 1459,
	531, 1459,
	-2, 471,
	-1, 1177,
	7, 1431,
	-2, 472,
	-1, 1178,
	7, 1459,
	531, 1459,
	-2, 473,
	-1, 1179,
	7, 1459,
	531, 1459,
	-2, 474,
	-1, 1180,
	7, 1418,
	-2, 476,
	-1, 1181,
	7, 1418,
	-2, 477,
	-1, 1182,
	7, 1461,
	-2, 480,
	-1, 1183,
	7, 1421,
	-2, 484,
	-1, 1184,
	7, 1422,
	-2, 485,
	-1, 1186,
	7, 1459,
	531, 1459,
	-2, 501,
	-1, 1187,
	7, 1418,
	-2, 505,
	-1, 1188,
	7, 1425,
	-2, 510,
	-1, 1189,
	7, 1423,
	-2, 513,
	-1, 1190,
	7, 1457,
	-2, 515,
	-1, 1191,
	7, 1457,
	-2, 516,
	-1, 1192,
	7, 1442,
	531, 1442,
	-2, 520,
	-1, 1344,
	6, 2006,
	12, 2006,
	534, 2006,
	535, 2006,
	-2, 1999,
	-1, 1393,
	531, 1347,
	-2, 3060,
	-1, 1619,
	127, 2877,
	411, 2877,
	-2, 1085,
	-1, 1653,
	21, 1384,
	432, 1384,
	510, 1384,
	-2, 847,
	-1, 1655,
	21, 1386,
	432, 1386,
	510, 1386,
	-2, 794,
	-1, 1660,
	1, 663,
	26, 663,
	36, 663,
	64, 663,
	65, 663,
	68, 663,
	69, 663,
	71, 663,
	72, 663,
	73, 663,
	74, 663,
	100, 663,
	130, 663,
	269, 663,
	280, 663,
	316, 663,
	470, 663,
	484, 663,
	509, 663,
	515, 663,
	532, 663,
	540, 663,
	541, 663,
	-2, 1488,
	-1, 1665,
	21, 1466,
	432, 1466,
	510, 1466,
	-2, 1462,
	-1, 2122,
	68, 1498,
	69, 1498,
	130, 1498,
	269, 1498,
	280, 1498,
	316, 1498,
	470, 1498,
	509, 1498,
	-2, 1181,
	-1, 2131,
	7, 1347,
	531, 1347,
	-2, 1230,
	-1, 2347,
	117, 100,
	307, 2077,
	460, 100,
	-2, 1910,
	-1, 2397,
	536, 121,
	-2, 2463,
	-1, 2425,
	531, 2079,
	-2, 229,
	-1, 2501,
	40, 1418,
	509, 1418,
	527, 1418,
	532, 1418,
	541, 1418,
	-2, 1414,
	-1, 2723,
	36, 2882,
	66, 2882,
	-2, 511,
	-1, 2724,
	36, 2883,
	66, 2883,
	-2, 384,
	-1, 2730,
	127, 2880,
	411, 2880,
	-2, 1194,
	-1, 2731,
	127, 2881,
	411, 2881,
	-2, 1195,
	-1, 2747,
	1, 429,
	26, 429,
	36, 429,
	64, 429,
	65, 429,
	68, 429,
	69, 429,
	71, 429,
	72, 429,
	74, 429,
	100, 429,
	130, 429,
	269, 429,
	280, 429,
	316, 429,
	470, 429,
	484, 429,
	509, 429,
	515, 429,
	529, 429,
	532, 429,
	533, 429,
	540, 429,
	-2, 128,
	-1, 2748,
	1, 427,
	26, 427,
	36, 427,
	64, 427,
	65, 427,
	68, 427,
	69, 427,
	71, 427,
	72, 427,
	74, 427,
	100, 427,
	130, 427,
	269, 427,
	280, 427,
	316, 427,
	470, 427,
	484, 427,
	509, 427,
	515, 427,
	529, 427,
	532, 427,
	533, 427,
	540, 427,
	-2, 128,
	-1, 2751,
	1, 446,
	26, 446,
	36, 446,
	64, 446,
	65, 446,
	68, 446,
	69, 446,
	71, 446,
	72, 446,
	74, 446,
	100, 446,
	130, 446,
	269, 446,
	280, 446,
	316, 446,
	470, 446,
	484, 446,
	509, 446,
	515, 446,
	529, 446,
	532, 446,
	533, 446,
	540, 446,
	-2, 128,
	-1, 2765,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1098,
	-1, 2766,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1099,
	-1, 2767,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1100,
	-1, 2768,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1101,
	-1, 2769,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1102,
	-1, 2770,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1103,
	-1, 2774,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1110,
	-1, 2780,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1114,
	-1, 2825,
	363, 1374,
	-2, 1377,
	-1, 2835,
	16, 1414,
	17, 1414,
	-2, 1346,
	-1, 2920,
	68, 1498,
	69, 1498,
	130, 1498,
	269, 1498,
	280, 1498,
	316, 1498,
	470, 1498,
	509, 1498,
	-2, 1181,
	-1, 3040,
	209, 88,
	-2, 2598,
	-1, 3113,
	536, 122,
	-2, 2463,
	-1, 3216,
	507, 2538,
	-2, 2531,
	-1, 3407,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1112,
	-1, 3408,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1116,
	-1, 3414,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1118,
	-1, 3449,
	363, 1373,
	-2, 1376,
	-1, 3603,
	75, 1602,
	76, 1602,
	77, 1602,
	78, 1602,
	79, 1602,
	81, 1602,
	82, 1602,
	-2, 1498,
	-1, 3617,
	531, 1347,
	-2, 122,
	-1, 3624,
	150, 1842,
	-2, 1777,
	-1, 3798,
	6, 2006,
	12, 2006,
	534, 2006,
	535, 2006,
	-2, 1980,
	-1, 3965,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1111,
	-1, 3968,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1120,
	-1, 3971,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1115,
	-1, 3976,
	52, 0,
	53, 0,
	54, 0,
	-2, 1133,
	-1, 3983,
	21, 1383,
	432, 1383,
	510, 1383,
	-2, 1463,
	-1, 3987,
	363, 1375,
	-2, 1378,
	-1, 4033,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1163,
	-1, 4034,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1164,
	-1, 4035,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1165,
	-1, 4036,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1166,
	-1, 4037,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1167,
	-1, 4038,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1168,
	-1, 4408,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1113,
	-1, 4409,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1117,
	-1, 4413,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1119,
	-1, 4414,
	52, 0,
	53, 0,
	54, 0,
	-2, 1134,
	-1, 4417,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1135,
	-1, 4418,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1137,
	-1, 4542,
	540, 87,
	-2, 1580,
	-1, 4687,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1121,
	-1, 4688,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1136,
	-1, 4689,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1138,
	-1, 4698,
	52, 0,
	-2, 1171,
	-1, 4949,
	52, 0,
	-2, 1172,
	-1, 5132,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 469,
	-1, 5467,
	7, 1727,
	-2, 306,
	-1, 5493,
	7, 1454,
	-2, 487,
}

const yyPrivate = 57344

const yyLast = 97993

var yyAct = [...]int16{
	1108, 4964, 5515, 5142, 5516, 4965, 707, 3393, 4954, 4580,
	5322, 1094, 2878, 5531, 4218, 3483, 5035, 4717, 2995, 5465,
	4480, 840, 2945, 4983, 5209, 5054, 2671, 3782, 5198, 4614,
	2117, 5131, 2300, 1519, 4532, 5015, 3542, 5464, 4898, 4798,
	5192, 4931, 3348, 4846, 3713, 4329, 2948, 3742, 5083, 5310,
	5358, 4984, 3391, 4479, 1332, 3471, 4932, 5261, 5061, 5278,
	4929, 3768, 5056, 2739, 4134, 2896, 4756, 772, 5055, 4780,
	1020, 2320, 3049, 3641, 4471, 4372, 5106, 4613, 5109, 4870,
	4715, 3920, 3344, 5130, 2436, 3716, 1250, 89, 3628, 2961,
	4825, 804, 3136, 3179, 3002, 4502, 4130, 4842, 250, 250,
	963, 1289, 4539, 3612, 654, 659, 2903, 669, 673, 2689,
	4192, 4335, 250, 3313, 4878, 3041, 4330, 4268, 1570, 4222,
	2990, 4339, 1032, 110, 725, 3690, 732, 732, 2496, 2189,
	684, 22, 4138, 717, 118, 725, 3642, 4786, 4763, 725,
	2963, 3184, 3570, 683, 21, 768, 771, 776, 771, 4,
	771, 732, 4509, 732, 2346, 20, 4488, 732, 732, 4062,
	771, 732, 732, 1550, 3279, 4683, 2345, 19, 4185, 1391,
	64, 4513, 1528, 1069, 725, 725, 725, 725, 661, 2344,
	13, 871, 771, 771, 732, 771, 882, 2343, 12, 3102,
	732, 882, 732, 882, 732, 732, 732, 732, 732, 2988,
	682, 10, 732, 771, 2985, 771, 732, 715, 3870, 771,
	732, 732, 879, 1627, 1248, 3676, 3025, 890, 3595, 892,
	681, 9, 4401, 680, 8, 3366, 924, 3349, 679, 7,
	3299, 675, 3178, 2832, 3760, 1268, 3693, 961, 2409, 250,
	250, 3151, 118, 3797, 3776, 4252, 3103, 2382, 2377, 1319,
	3029, 110, 2367, 2373, 803, 3050, 3028, 3226, 2962, 22,
	3016, 3012, 118, 2834, 722, 803, 803, 2987, 2319, 4103,
	3587, 3482, 21, 3606, 2790, 747, 2971, 2949, 3426, 1080,
	750, 3551, 1667, 20, 2853, 2904, 670, 884, 3598, 3030,
	3954, 2126, 2516, 2302, 3396, 19, 2679, 4495, 64, 3452,
	900, 904, 2842, 740, 3067, 1549, 1481, 1524, 13, 1367,
	1117, 3795, 1471, 3183, 853, 1209, 12, 2420, 2394, 1297,
	724, 3132, 3004, 2353, 1275, 3015, 2966, 3620, 2301, 10,
	2970, 2969, 2968, 1362, 2959, 2846, 3475, 2269, 2119, 2893,
	995, 1236, 2850, 2791, 2800, 1628, 3694, 2797, 2719, 9,
	678, 6, 8, 1254, 1616, 2729, 1038, 7, 1518, 1590,
	739, 914, 802, 2494, 868, 3079, 3066, 237, 1298, 2182,
	3065, 1453, 1300, 142, 2982, 767, 2876, 2744, 2141, 1090,
	1081, 140, 1599, 1543, 1617, 1597, 1040, 2698, 674, 1028,
	2670, 921, 209, 208, 2574, 2521, 3009, 2573, 241, 2381,
	163, 2393, 2326, 1063, 116, 730, 1632, 1062, 1600, 1598,
	117, 1064, 664, 689, 1516, 2374, 1373, 706, 1486, 1122,
	1360, 1395, 2912, 242, 229, 243, 636, 728, 746, 775,
	738, 3553, 1027, 1430, 1461, 744, 2690, 736, 3476, 1665,
	1461, 5583, 1635, 3662, 3922, 1462, 1647, 1648, 1649, 5461,
	5500, 1462, 711, 964, 966, 3500, 5460, 5299, 2279, 3394,
	5581, 2280, 5579, 5104, 2691, 2285, 3661, 2277, 1635, 5540,
	4902, 5500, 2282, 2286, 2281, 3663, 2283, 5539, 4900, 6,
	2284, 1658, 1659, 2278, 3498, 2954, 5540, 1121, 751, 5527,
	2287, 869, 2932, 2277, 662, 672, 880, 1535, 5164, 1525,
	989, 880, 1461, 880, 1461, 1124, 4867, 917, 711, 1105,
	4652, 5524, 3500, 1462, 2691, 1462, 3510, 3511, 3512, 187,
	2275, 4988, 5508, 713, 640, 1201, 698, 847, 848, 712,
	5499, 2275, 1635, 1537, 5476, 5469, 1540, 692, 5451, 5500,
	3451, 1291, 1539, 5477, 3575, 2691, 5433, 5124, 1633, 883,
	3514, 1538, 5389, 3751, 733, 4737, 994, 2277, 5438, 5388,
	3516, 2275, 899, 902, 3374, 2745, 5375, 1541, 2275, 5337,
	5331, 1105, 5307, 2278, 3500, 2693, 3554, 1665, 5338, 5332,
	1635, 3702, 5269, 3477, 1647, 1648, 1649, 1665, 1109, 5268,
	1635, 5267, 5437, 5266, 1023, 1011, 2279, 2693, 5267, 1123,
	5246, 981, 5267, 2285, 957, 2277, 976, 978, 5245, 2275,
	2282, 2286, 2281, 1291, 2283, 2277, 5242, 2275, 2284, 1658,
	1659, 2278, 3516, 5240, 5163, 5243, 3445, 1665, 2287, 3444,
	1635, 2278, 5241, 5164, 1647, 1648, 1649, 3446, 2287, 3585,
	2275, 5161, 5160, 5140, 5168, 1665, 2279, 2275, 1635, 2280,
	2275, 1464, 3539, 2285, 5139, 2277, 743, 5029, 5014, 1008,
	2282, 2286, 2281, 2275, 2283, 5004, 4737, 2665, 2284, 1658,
	1659, 2278, 4987, 2277, 5005, 4979, 4410, 4978, 2287, 4851,
	5124, 4986, 5122, 4841, 3702, 4831, 1464, 4957, 4852, 2278,
	725, 2691, 2693, 4815, 3663, 915, 2287, 4750, 4749, 1049,
	4748, 4746, 4814, 4736, 4705, 1500, 4751, 3702, 4703, 3702,
	1464, 4670, 4737, 2275, 3921, 4610, 4609, 4704, 2737, 1076,
	4671, 4716, 741, 4608, 4611, 2693, 4602, 725, 1464, 4672,
	732, 4550, 2693, 4524, 4420, 2693, 1015, 1017, 1018, 4656,
	3663, 4506, 4525, 2275, 4398, 1634, 725, 4147, 1224, 725,
	725, 4463, 2407, 2275, 725, 725, 2693, 725, 4064, 871,
	871, 732, 4195, 871, 1500, 715, 4156, 4065, 4053, 1031,
	3503, 3504, 3505, 3506, 771, 771, 3981, 4054, 3914, 1031,
	4155, 3894, 1031, 3986, 3949, 2275, 3926, 2275, 3821, 1031,
	3893, 3702, 1031, 742, 3808, 3935, 3665, 3822, 3651, 725,
	1211, 3626, 3580, 3809, 3574, 3666, 3565, 3652, 3546, 3538,
	118, 3581, 3536, 3575, 3562, 2275, 3535, 3498, 3539, 3534,
	3533, 2275, 3449, 1229, 3447, 2275, 3369, 3332, 2275, 2275,
	3218, 2275, 3561, 2275, 3560, 2693, 2275, 732, 3498, 3219,
	732, 770, 2665, 791, 1012, 793, 1459, 771, 1640, 1641,
	1642, 1643, 3043, 2938, 2934, 842, 3358, 2695, 3355, 3110,
	1111, 3044, 1464, 2275, 725, 725, 2693, 250, 250, 2817,
	2694, 2717, 2276, 1596, 2658, 2602, 1589, 875, 876, 2693,
	878, 2275, 1579, 1072, 1073, 1579, 732, 771, 771, 747,
	747, 1207, 1665, 1587, 1584, 1635, 1585, 2693, 907, 732,
	910, 1578, 1579, 1579, 2693, 2693, 727, 5033, 128, 1124,
	1579, 1500, 3506, 1643, 1635, 1199, 2350, 1473, 1500, 2350,
	2277, 4322, 1525, 3972, 3854, 3552, 1500, 1473, 1124, 1253,
	1665, 1331, 3548, 1635, 2350, 2954, 2278, 3281, 1203, 3359,
	1016, 1500, 1202, 2287, 1654, 1215, 1203, 1253, 1258, 3921,
	1202, 3921, 5325, 1644, 1645, 1646, 984, 1459, 2277, 1124,
	771, 3967, 1638, 1639, 1640, 1641, 1642, 1643, 1203, 4144,
	3479, 1078, 1202, 2314, 2278, 3501, 3502, 3503, 3504, 3505,
	3506, 2287, 1473, 3752, 2350, 4615, 986, 1532, 1638, 1639,
	1640, 1641, 1642, 1643, 3810, 5572, 4058, 1542, 5326, 1197,
	3811, 5546, 989, 5396, 5379, 1353, 2359, 1548, 5370, 5154,
	4848, 725, 1075, 669, 5323, 1571, 1634, 1571, 5129, 1468,
	5128, 1464, 725, 3507, 3508, 3509, 5117, 1526, 1527, 1252,
	3752, 5116, 3501, 3502, 3503, 3504, 3505, 3506, 1280, 5115,
	5107, 1012, 2954, 1216, 5074, 122, 1464, 4966, 2431, 123,
	4088, 4959, 1638, 1639, 1640, 1641, 1642, 1643, 4059, 1200,
	4942, 4920, 4203, 1581, 984, 1026, 3708, 983, 127, 1238,
	1239, 1012, 995, 1242, 2434, 1012, 995, 995, 4855, 4832,
	1002, 4805, 1654, 1295, 1296, 4760, 1001, 4712, 1003, 1025,
	1005, 1644, 1645, 1646, 3501, 3502, 3503, 3504, 3505, 3506,
	1638, 1639, 1640, 1641, 1642, 1643, 988, 990, 992, 996,
	1638, 1639, 1640, 1641, 1642, 1643, 1058, 1059, 3110, 4709,
	1037, 995, 713, 1042, 1482, 1483, 2128, 2360, 712, 4695,
	1046, 4694, 1654, 1057, 4682, 1572, 1429, 1480, 1260, 4477,
	1435, 1644, 1645, 1646, 1414, 1259, 4470, 1265, 1245, 4467,
	1638, 1639, 1640, 1641, 1642, 1643, 1287, 1208, 4453, 118,
	4448, 4440, 2121, 4439, 4429, 4427, 3133, 4426, 1638, 1639,
	1640, 1641, 1642, 1643, 1482, 1483, 1323, 1226, 1227, 1329,
	4425, 1347, 125, 4424, 715, 4194, 2298, 1484, 1472, 1244,
	4115, 4077, 4076, 4060, 1665, 4050, 4049, 1635, 4048, 3989,
	3983, 1647, 1648, 1649, 3764, 3721, 725, 3701, 732, 122,
	3660, 732, 3625, 123, 3556, 2432, 1393, 4145, 3549, 3529,
	2285, 2315, 2277, 4202, 2304, 3521, 2305, 2282, 2286, 2281,
	3520, 2283, 127, 3499, 725, 3496, 3495, 2325, 2278, 3491,
	3489, 3488, 732, 4849, 2371, 2287, 3487, 3486, 2296, 1567,
	3464, 1477, 1478, 1479, 1485, 3453, 3448, 3339, 685, 776,
	3337, 1575, 771, 771, 771, 771, 3334, 771, 125, 125,
	2358, 989, 2271, 732, 3333, 2933, 1374, 2924, 2810, 2560,
	989, 2127, 725, 119, 691, 1216, 725, 1374, 1512, 1374,
	1356, 2397, 1357, 640, 1358, 122, 122, 1228, 1266, 123,
	123, 1392, 1078, 2317, 2418, 1077, 688, 1404, 139, 1410,
	1413, 1024, 725, 1013, 771, 5580, 5568, 1509, 127, 127,
	5564, 1496, 725, 691, 1016, 5479, 2357, 1573, 725, 2435,
	5445, 1520, 1520, 1456, 1536, 1432, 1016, 5418, 1436, 1437,
	5413, 5406, 5347, 5277, 2184, 3473, 5062, 725, 2341, 5239,
	725, 5214, 5211, 2433, 5127, 1105, 732, 1586, 3500, 5126,
	2437, 5092, 3510, 3511, 3512, 5088, 3629, 5019, 4982, 4916,
	4915, 1489, 1490, 4914, 4412, 1493, 1582, 4892, 4143, 2378,
	4876, 4875, 2313, 1200, 4874, 2387, 2464, 4865, 771, 4862,
	2533, 250, 1593, 1594, 1595, 2184, 3514, 2354, 2811, 4515,
	1530, 2453, 725, 732, 4744, 2370, 3516, 2397, 2397, 2397,
	4741, 2437, 2127, 4706, 1577, 1638, 1639, 1640, 1641, 1642,
	1643, 4535, 985, 1255, 2417, 1568, 725, 725, 986, 4519,
	4505, 3282, 3283, 2123, 1638, 1639, 1640, 1641, 1642, 1643,
	4497, 3903, 2131, 5324, 771, 771, 771, 771, 771, 1583,
	1526, 1527, 4494, 1638, 1639, 1640, 1641, 1642, 1643, 771,
	771, 1014, 2457, 4341, 732, 732, 1608, 771, 732, 1256,
	1257, 1609, 1601, 4241, 713, 1203, 4198, 713, 713, 1202,
	1624, 3282, 3283, 1625, 1626, 1630, 1631, 3951, 4182, 4174,
	4171, 4152, 4120, 1478, 1477, 4118, 4110, 1485, 2129, 3903,
	1479, 3787, 3786, 2414, 3781, 1210, 2171, 4087, 2274, 3618,
	725, 3616, 1004, 119, 1007, 3615, 3568, 3384, 125, 2289,
	1105, 1009, 3470, 3500, 2585, 2586, 5526, 3510, 3511, 3512,
	985, 3463, 3439, 1255, 4083, 2378, 986, 3437, 2802, 2637,
	3310, 775, 1294, 2426, 2428, 122, 3239, 3130, 2663, 123,
	1255, 3052, 725, 725, 2997, 882, 882, 882, 732, 771,
	732, 2468, 2680, 732, 732, 771, 2808, 2858, 127, 2852,
	1571, 3516, 2295, 1529, 1529, 669, 1529, 669, 119, 2476,
	2477, 2643, 1399, 1400, 4091, 725, 725, 2480, 725, 2601,
	725, 2456, 732, 725, 725, 732, 2325, 1490, 1489, 2378,
	2576, 2652, 2576, 2336, 2179, 1493, 2576, 2576, 777, 2327,
	2180, 2398, 2323, 2272, 3784, 788, 789, 790, 1529, 1473,
	1475, 2178, 2177, 2351, 725, 2495, 96, 2176, 2175, 2174,
	2173, 2172, 2170, 2169, 725, 2168, 2167, 771, 2166, 2165,
	2164, 2163, 2328, 2162, 2161, 2401, 1255, 1665, 2160, 2159,
	1635, 2493, 2158, 1105, 2157, 2156, 3500, 2355, 2155, 3390,
	3510, 3511, 3512, 2555, 126, 2154, 2153, 2152, 2151, 2150,
	2482, 1031, 4411, 2486, 2149, 2277, 2148, 2297, 3966, 2147,
	2146, 2144, 2469, 2580, 2143, 2699, 2472, 2473, 2692, 2130,
	2128, 2278, 734, 1569, 3514, 2405, 2406, 697, 2287, 1654,
	1488, 1361, 1206, 845, 3516, 700, 4631, 3667, 1644, 1645,
	1646, 3653, 118, 4094, 3895, 2666, 2667, 1638, 1639, 1640,
	1641, 1642, 1643, 3045, 137, 2955, 2181, 2398, 2398, 2398,
	1482, 1483, 2530, 2531, 3613, 1269, 690, 1269, 3392, 2653,
	2654, 2655, 3779, 5533, 1431, 4810, 3828, 2650, 2518, 4318,
	126, 126, 4313, 2697, 3484, 2408, 2424, 2429, 687, 3838,
	2547, 2630, 2427, 119, 119, 1255, 2518, 4560, 3211, 3207,
	2522, 2559, 5027, 5026, 4659, 2806, 3684, 711, 2565, 5263,
	2479, 3481, 710, 3680, 3939, 2636, 2851, 2736, 3714, 2534,
	3938, 4803, 1320, 1665, 5207, 2136, 1635, 5206, 5025, 4678,
	2545, 2522, 3830, 1412, 2133, 2807, 2552, 2522, 2548, 2549,
	2550, 2410, 3907, 3147, 1022, 997, 5018, 1604, 1604, 4827,
	2628, 2277, 4181, 3135, 3413, 3134, 2715, 2578, 5453, 709,
	1218, 2582, 2583, 2581, 2515, 653, 4590, 2278, 2140, 4953,
	4684, 996, 5534, 1514, 2287, 996, 996, 131, 1534, 2616,
	2606, 4455, 4454, 2423, 651, 2674, 3035, 2676, 753, 94,
	2681, 2682, 2635, 93, 95, 880, 880, 880, 3068, 3507,
	3508, 3509, 2340, 125, 1665, 755, 130, 1635, 3501, 3502,
	3503, 3504, 3505, 3506, 1415, 3790, 1281, 2647, 2181, 753,
	996, 3063, 1233, 3068, 975, 968, 863, 4838, 1415, 4067,
	122, 2839, 2277, 4809, 123, 3406, 755, 3718, 5048, 3738,
	2645, 2646, 1320, 131, 4603, 1034, 3978, 3977, 2278, 2181,
	2675, 4821, 2941, 127, 1529, 2287, 2683, 3069, 1529, 1529,
	97, 3062, 131, 168, 4647, 2657, 660, 3017, 3019, 3018,
	4365, 2705, 130, 2422, 2707, 685, 2672, 2673, 92, 761,
	2840, 3791, 3069, 4321, 4289, 125, 120, 2361, 2362, 2363,
	2364, 130, 2365, 4157, 2700, 1276, 2726, 2701, 3700, 2702,
	2389, 2713, 2706, 4828, 1529, 1529, 1368, 2732, 2132, 2134,
	2135, 3160, 122, 708, 4952, 2421, 123, 1241, 973, 898,
	836, 2446, 2445, 3158, 2841, 3679, 3214, 2838, 2718, 649,
	126, 4397, 3946, 3678, 3684, 127, 5392, 4581, 3402, 2450,
	3401, 3680, 4108, 119, 2743, 2754, 2742, 3400, 852, 3399,
	851, 4837, 711, 850, 3686, 849, 5260, 2686, 99, 3159,
	4331, 5223, 5101, 5100, 3507, 3508, 3509, 676, 120, 121,
	2444, 3157, 1369, 3501, 3502, 3503, 3504, 3505, 3506, 2866,
	4591, 3070, 989, 4642, 3793, 5391, 4306, 114, 4303, 3210,
	112, 5365, 2462, 2458, 2638, 101, 1508, 1447, 701, 2639,
	2843, 3108, 3777, 2642, 1605, 1605, 3070, 2644, 4710, 143,
	5216, 3675, 4291, 2532, 2440, 3881, 2588, 5523, 5522, 4834,
	3719, 4833, 1506, 1445, 5058, 3146, 115, 982, 2668, 2716,
	5368, 5236, 4854, 4817, 168, 4578, 5217, 4297, 4572, 1603,
	2728, 108, 2734, 4001, 3933, 2659, 2661, 3682, 4382, 3342,
	3820, 121, 785, 786, 787, 3276, 2687, 106, 3685, 744,
	776, 779, 780, 781, 782, 783, 784, 2375, 4604, 2589,
	2590, 2591, 2592, 2593, 3076, 1370, 2826, 1606, 1606, 4374,
	2688, 2837, 3817, 2402, 2411, 2629, 3816, 2526, 3932, 2411,
	2685, 2940, 2632, 2843, 169, 3931, 3930, 3507, 3508, 3509,
	1638, 1639, 1640, 1641, 1642, 1643, 3501, 3502, 3503, 3504,
	3505, 3506, 2910, 2735, 3929, 3758, 2805, 1264, 2684, 2843,
	3324, 5041, 5452, 2818, 2822, 5436, 2824, 2823, 3654, 2411,
	4808, 5264, 2411, 1505, 1444, 2411, 5283, 3681, 2411, 2730,
	2730, 3169, 2411, 1262, 2455, 105, 3687, 1270, 3998, 1270,
	2626, 2411, 2411, 1607, 1607, 2898, 2899, 2900, 2901, 3484,
	2517, 96, 113, 2411, 104, 2291, 3732, 3326, 98, 4288,
	3644, 756, 107, 3643, 102, 2292, 2930, 3937, 2517, 3683,
	103, 1219, 3686, 3270, 4332, 2571, 5306, 3254, 2917, 3792,
	3798, 2570, 3999, 3868, 2804, 111, 4342, 2293, 2339, 1439,
	3865, 754, 4375, 100, 2669, 3688, 2556, 4378, 771, 2561,
	3288, 3060, 4376, 2441, 2575, 1442, 1054, 1507, 1446, 5394,
	866, 3287, 760, 2869, 2443, 2442, 3286, 3285, 2950, 3267,
	2952, 761, 754, 3020, 2304, 2627, 3266, 2539, 2975, 2975,
	4373, 1433, 109, 96, 2418, 771, 1638, 1639, 1640, 1641,
	1642, 1643, 1105, 1055, 1261, 3500, 167, 4377, 166, 3510,
	3511, 3512, 2756, 4547, 1428, 169, 1411, 1394, 2843, 732,
	725, 3980, 2870, 2439, 1365, 3682, 3061, 1366, 1246, 3040,
	743, 1364, 1363, 1359, 4796, 126, 3685, 732, 4881, 3051,
	5262, 744, 2942, 3514, 3116, 1320, 2564, 771, 119, 732,
	207, 2418, 2563, 3516, 2562, 2464, 912, 732, 5282, 4219,
	5334, 3736, 3735, 762, 5059, 715, 2871, 4136, 4431, 2868,
	5393, 3104, 771, 2460, 2727, 2568, 725, 1638, 1639, 1640,
	1641, 1642, 1643, 2413, 2412, 4315, 1284, 4333, 1263, 732,
	732, 732, 775, 725, 725, 3834, 741, 2418, 3831, 2821,
	732, 704, 4945, 3014, 2116, 3225, 1371, 3138, 732, 3142,
	732, 732, 3867, 4899, 3644, 3681, 732, 126, 3974, 732,
	732, 3425, 4729, 732, 5060, 732, 732, 3088, 5053, 725,
	677, 5335, 3269, 3131, 2913, 3094, 2123, 2908, 1408, 732,
	732, 725, 2872, 732, 732, 2624, 1056, 705, 3114, 3115,
	758, 2902, 5281, 4757, 1213, 771, 771, 3683, 4220, 4259,
	732, 732, 5361, 1614, 3088, 725, 2475, 742, 3997, 725,
	4730, 732, 2184, 5360, 3918, 3109, 2809, 167, 702, 166,
	703, 2792, 2793, 2794, 2795, 732, 732, 732, 732, 732,
	3148, 972, 732, 839, 2465, 4847, 732, 171, 2848, 1246,
	732, 732, 3386, 2529, 1406, 3083, 1053, 3095, 3818, 982,
	2386, 3176, 2887, 3167, 3162, 5042, 3111, 1588, 1546, 1217,
	3325, 732, 732, 2867, 4371, 732, 3091, 732, 3798, 2906,
	3202, 5362, 732, 3170, 732, 732, 3036, 2929, 3032, 732,
	4787, 732, 2928, 4788, 732, 732, 4789, 2981, 2338, 759,
	2502, 3731, 974, 4259, 1438, 3071, 250, 1440, 732, 3152,
	2625, 1454, 743, 3091, 4790, 732, 1450, 885, 732, 4946,
	1441, 2495, 98, 2918, 3252, 732, 732, 2957, 867, 3051,
	2495, 3297, 3919, 4416, 3304, 4415, 732, 771, 871, 1044,
	1214, 882, 776, 882, 882, 999, 3126, 3013, 2979, 2979,
	709, 4792, 4326, 3221, 3223, 669, 669, 1407, 3245, 3213,
	2527, 4791, 3862, 1051, 3866, 4555, 1421, 3312, 803, 3317,
	3318, 4793, 763, 2958, 760, 2815, 4131, 765, 741, 2181,
	771, 2449, 1451, 5224, 4607, 5051, 3819, 2181, 2331, 3783,
	5081, 757, 3101, 4967, 3263, 4521, 725, 3105, 5210, 4879,
	732, 2330, 5219, 803, 3750, 3089, 4316, 3081, 2953, 3316,
	803, 4273, 5097, 4944, 2465, 2984, 3835, 2454, 3023, 3832,
	2509, 3246, 3669, 2528, 3370, 2691, 4386, 4286, 4520, 5558,
	4260, 2979, 1417, 4606, 725, 4188, 4336, 5557, 3085, 3338,
	4577, 5221, 3089, 5220, 3053, 3054, 3055, 3056, 3057, 742,
	3042, 3038, 3208, 4592, 3039, 2844, 3212, 2978, 2978, 3037,
	3074, 3113, 2142, 5336, 1237, 2859, 2860, 2861, 2862, 3371,
	1065, 1615, 886, 3300, 5065, 3085, 2975, 2449, 5521, 4605,
	995, 4189, 3087, 725, 4584, 1449, 5080, 3745, 3220, 4261,
	5213, 3280, 2466, 5279, 2847, 3350, 2467, 4006, 1065, 1067,
	5353, 4794, 4795, 1065, 1067, 2332, 3248, 3185, 5038, 4179,
	3119, 3191, 923, 923, 1220, 4443, 2577, 4858, 846, 3087,
	4383, 3385, 1545, 4276, 4260, 2976, 2976, 3350, 3200, 3724,
	887, 3205, 4262, 3321, 3322, 1420, 4041, 2448, 970, 776,
	2978, 1292, 5359, 715, 3084, 4253, 4040, 3195, 1544, 5196,
	2288, 980, 864, 3198, 3199, 3672, 3186, 4354, 980, 1405,
	1061, 1510, 3367, 3450, 798, 3395, 3507, 3508, 3509, 2594,
	4353, 1418, 1247, 3455, 3456, 3501, 3502, 3503, 3504, 3505,
	3506, 3084, 3472, 4261, 3294, 1045, 3216, 2599, 3262, 3222,
	3215, 3264, 3265, 2597, 1000, 2600, 2856, 1423, 3435, 2598,
	2603, 4153, 3022, 1422, 5440, 1454, 3438, 3440, 2976, 1487,
	3303, 1476, 1397, 4187, 3553, 3476, 3082, 4956, 1397, 4020,
	715, 4459, 2919, 2921, 775, 2923, 4262, 2925, 2926, 2927,
	3247, 5553, 3100, 2448, 1491, 1492, 1304, 2977, 2977, 4799,
	2600, 1305, 3086, 5468, 4460, 1314, 2598, 5141, 869, 3090,
	4739, 880, 1334, 880, 880, 4274, 3080, 4711, 3573, 3430,
	4337, 3478, 2466, 2596, 3431, 3271, 2467, 3564, 4243, 3272,
	4517, 3432, 3275, 3273, 3427, 4438, 5489, 3272, 4275, 3086,
	3429, 5488, 1066, 5144, 5143, 2304, 3090, 1448, 1455, 5400,
	5456, 3531, 5455, 5290, 3597, 3597, 871, 3354, 2975, 3609,
	3597, 3597, 3309, 2756, 3301, 3388, 3467, 1307, 5289, 3744,
	1066, 5399, 5295, 5292, 4178, 1066, 2595, 969, 5296, 1336,
	2977, 3772, 725, 5001, 725, 725, 5293, 4583, 1571, 725,
	725, 865, 5294, 1419, 4444, 1520, 1313, 1416, 5291, 5002,
	2992, 3341, 2873, 797, 4186, 3139, 5146, 3347, 3346, 4955,
	5071, 3389, 5145, 4962, 3357, 4204, 1460, 3353, 4963, 3554,
	3477, 1504, 1355, 732, 1272, 4042, 725, 1318, 3543, 1424,
	5298, 4800, 5297, 3398, 3537, 1105, 3403, 5490, 3500, 3302,
	3544, 1396, 3510, 3511, 3512, 715, 2979, 1396, 3422, 1529,
	3375, 732, 3058, 3454, 3979, 1529, 1529, 3379, 3376, 732,
	4244, 732, 3378, 725, 725, 2677, 3428, 732, 2732, 5153,
	1303, 3633, 3770, 3387, 1291, 5107, 3514, 3107, 3655, 4472,
	1499, 775, 5311, 5148, 1279, 4823, 3516, 4544, 995, 5147,
	5149, 5150, 3582, 4380, 3748, 3670, 3727, 1308, 3650, 3343,
	3319, 2397, 1335, 3046, 5000, 3746, 3634, 732, 1061, 5313,
	2404, 2145, 4719, 1602, 3412, 4724, 3410, 3423, 5312, 4722,
	3640, 4723, 4725, 1576, 1574, 5314, 1434, 1243, 732, 5534,
	3636, 5504, 1310, 3, 5421, 5420, 5552, 5530, 1309, 3806,
	5316, 4119, 5576, 995, 995, 3442, 3720, 4575, 732, 732,
	732, 732, 5463, 5318, 4754, 2978, 4531, 4096, 3800, 3658,
	3196, 3197, 3769, 3072, 3691, 3692, 3021, 1529, 1290, 2993,
	2451, 3466, 3757, 1623, 3759, 1515, 2354, 3607, 2704, 3555,
	691, 3469, 1498, 1311, 2510, 2507, 1278, 4481, 2519, 1036,
	3557, 2430, 2983, 2509, 1337, 5321, 4734, 5319, 732, 732,
	3755, 732, 732, 732, 5179, 1334, 5315, 989, 4721, 4735,
	4726, 3174, 4478, 5175, 5176, 4994, 3605, 5178, 5327, 5328,
	3526, 3527, 3528, 2976, 1338, 5174, 4992, 1339, 1312, 4767,
	4995, 1340, 2946, 2947, 1019, 5326, 5551, 1529, 3547, 1315,
	732, 2508, 3594, 2321, 2123, 3673, 725, 2464, 3610, 3611,
	3173, 5507, 4227, 1341, 3175, 3118, 1529, 2538, 3861, 732,
	3566, 3572, 735, 4512, 3823, 3824, 2979, 732, 2979, 2914,
	2511, 5230, 1336, 3578, 1317, 1316, 3571, 5229, 3577, 3576,
	129, 3172, 5229, 5230, 3604, 3377, 3602, 3601, 3600, 5320,
	3712, 1344, 3308, 5158, 4228, 133, 134, 135, 136, 3617,
	3382, 3382, 3624, 4766, 3648, 771, 771, 4972, 1342, 3729,
	3730, 3897, 3571, 3622, 3623, 732, 3645, 3799, 3389, 3739,
	3284, 771, 2740, 2741, 4969, 1343, 1223, 4229, 4230, 4231,
	3952, 3953, 5157, 732, 4733, 2977, 3559, 971, 3659, 3852,
	3762, 3853, 4971, 4970, 732, 909, 882, 792, 5326, 2680,
	3928, 1306, 5417, 4248, 3874, 2951, 3875, 3876, 3689, 3710,
	3711, 3715, 1345, 725, 3588, 3593, 3591, 3592, 3590, 132,
	3586, 3589, 3925, 2937, 5016, 2978, 3569, 2978, 3796, 835,
	648, 1320, 650, 652, 236, 2118, 5559, 725, 995, 725,
	3725, 3743, 4843, 5099, 725, 1335, 4776, 3137, 5458, 3871,
	4567, 4772, 3707, 4368, 3763, 4367, 1293, 3619, 3588, 3593,
	3591, 3592, 3590, 3754, 3586, 3589, 3829, 4129, 1591, 3756,
	5459, 2398, 4102, 3593, 3591, 3592, 3590, 2936, 2541, 2540,
	4104, 3950, 2356, 3740, 2378, 3839, 3133, 3778, 3789, 2308,
	3947, 2307, 3923, 2976, 4491, 2976, 3785, 3291, 3657, 4099,
	3295, 3992, 3993, 3994, 4098, 3850, 3771, 3657, 5457, 3940,
	5057, 5398, 5397, 5228, 4011, 3934, 5226, 5155, 4960, 4769,
	4770, 3941, 4926, 2495, 2815, 3855, 4490, 3588, 3593, 3591,
	3592, 3590, 3872, 3586, 3589, 4489, 3825, 1337, 4536, 4164,
	4236, 4074, 4073, 4015, 4014, 3984, 3906, 3905, 3656, 3851,
	3372, 3330, 4778, 4771, 3255, 4774, 4775, 4777, 4773, 996,
	3244, 3715, 2999, 2944, 2524, 715, 2438, 1338, 2390, 3842,
	1339, 3859, 2385, 3847, 1340, 1592, 1466, 1426, 1425, 2636,
	1401, 1285, 1198, 1021, 1010, 1633, 2321, 749, 745, 4402,
	3955, 2849, 5384, 5301, 5300, 5180, 1341, 4457, 4693, 3507,
	3508, 3509, 4643, 3909, 3910, 2977, 4523, 2977, 3501, 3502,
	3503, 3504, 3505, 3506, 4403, 4307, 2950, 4304, 4165, 4019,
	3664, 3368, 2304, 2474, 2471, 1074, 2975, 1067, 3737, 2975,
	3397, 3945, 3917, 3381, 1344, 1084, 4051, 4109, 4594, 2714,
	3597, 3609, 3597, 3597, 3597, 3394, 3761, 4595, 2960, 4116,
	4553, 1342, 3943, 4552, 3898, 3474, 3896, 2312, 5482, 5481,
	2311, 3944, 3908, 3380, 5271, 4830, 4596, 2418, 1343, 4699,
	4141, 4124, 4675, 4593, 1529, 4442, 4395, 3973, 732, 2181,
	3614, 3912, 3492, 3424, 3913, 2745, 2696, 748, 5373, 737,
	1216, 3924, 4907, 4904, 4674, 3927, 4661, 725, 4638, 1571,
	4633, 4632, 4328, 4327, 4317, 1345, 880, 4312, 4225, 3728,
	732, 3887, 3886, 3885, 3884, 3883, 732, 3882, 3942, 771,
	1006, 3878, 4056, 3877, 3869, 3991, 725, 3856, 3849, 4173,
	3837, 3836, 3833, 3767, 3959, 3960, 3961, 3962, 3766, 3765,
	3462, 3461, 3975, 3051, 3460, 3459, 3411, 2799, 3405, 771,
	3409, 3306, 4180, 3268, 3249, 2798, 2799, 4585, 2781, 4142,
	4093, 2664, 2587, 2584, 5364, 2579, 2572, 2558, 2554, 4149,
	2553, 2551, 3991, 4151, 2546, 2544, 2537, 2520, 3988, 2506,
	2505, 2504, 725, 2490, 732, 2463, 4223, 2459, 2452, 2309,
	4140, 732, 2975, 3104, 4013, 4172, 2757, 2641, 2758, 4238,
	3336, 4216, 4018, 4000, 4002, 4003, 3335, 732, 732, 4024,
	4009, 4206, 1043, 4175, 2418, 998, 987, 4163, 4254, 2640,
	5036, 2847, 1571, 2778, 732, 1571, 5410, 1571, 4270, 5187,
	2776, 2779, 2775, 4170, 2777, 989, 3691, 3692, 5442, 4179,
	4622, 4618, 4292, 4469, 732, 5441, 4468, 4435, 4269, 4434,
	3863, 4201, 989, 4265, 2337, 3243, 3240, 3237, 4200, 3607,
	732, 2349, 4070, 4214, 3233, 4055, 4068, 2525, 2378, 732,
	732, 732, 3364, 4069, 732, 3734, 4232, 732, 732, 732,
	732, 4233, 3363, 3621, 4097, 3621, 4277, 4100, 3362, 4084,
	732, 4085, 2557, 4092, 3361, 4082, 4126, 732, 3360, 732,
	4101, 4105, 4106, 3112, 2485, 4242, 3647, 996, 1431, 1328,
	732, 2659, 2661, 1322, 4112, 4095, 4282, 4285, 732, 732,
	3441, 4167, 1070, 732, 732, 732, 732, 732, 4111, 720,
	4113, 4114, 4356, 989, 4132, 5525, 2979, 2814, 4566, 2979,
	4257, 4615, 1071, 4264, 4148, 4266, 3695, 2813, 4193, 721,
	4212, 172, 2513, 3706, 4158, 5543, 2495, 4168, 4162, 751,
	4166, 2512, 996, 996, 4089, 4090, 993, 2495, 2495, 5542,
	732, 732, 732, 732, 732, 2996, 4295, 4533, 1461, 3691,
	3692, 1291, 3013, 3345, 1465, 3733, 5046, 252, 1469, 1462,
	3389, 3152, 776, 4296, 5045, 4340, 4612, 4527, 4191, 766,
	725, 725, 725, 725, 2118, 4197, 3889, 3774, 2815, 4208,
	4209, 3125, 3093, 4249, 4071, 4199, 4207, 3000, 4075, 4205,
	2380, 2372, 4379, 4146, 1494, 2322, 2316, 1288, 1277, 4215,
	1271, 1267, 4237, 1249, 4240, 5395, 4764, 737, 4891, 4234,
	4890, 4355, 4250, 3891, 3858, 2978, 3803, 3801, 2978, 3773,
	3900, 3901, 3741, 3637, 3077, 3073, 2998, 2994, 2651, 4400,
	2649, 2488, 3350, 2484, 4360, 4361, 3911, 2391, 2376, 3105,
	4384, 2368, 2366, 2348, 4290, 3300, 4283, 4284, 4287, 2634,
	1503, 923, 1502, 1501, 3827, 1495, 4346, 1470, 1467, 1463,
	1458, 4294, 4004, 4396, 3280, 4299, 1443, 1402, 1349, 1346,
	1327, 1321, 2979, 2979, 4271, 4620, 923, 4619, 3293, 2347,
	1237, 959, 5304, 2976, 5233, 5222, 2976, 3367, 1251, 5123,
	4871, 4958, 4314, 4893, 4811, 4753, 4623, 4319, 4270, 4579,
	4565, 4556, 4366, 3389, 3632, 3098, 3092, 732, 2979, 2975,
	2975, 809, 2815, 2975, 1511, 2403, 2299, 2273, 1124, 871,
	989, 732, 809, 809, 4482, 5550, 3597, 5535, 3051, 4500,
	4451, 871, 3457, 3458, 4357, 5371, 5077, 3096, 873, 2662,
	4345, 4507, 4362, 873, 809, 1124, 2660, 4169, 873, 3749,
	873, 5037, 1124, 2181, 2418, 771, 3383, 809, 809, 4385,
	2470, 4128, 1124, 3888, 4473, 4474, 1129, 1127, 4504, 949,
	949, 4393, 809, 809, 809, 725, 4534, 996, 1126, 1118,
	2290, 2978, 2978, 991, 1533, 1571, 4542, 4829, 3389, 5351,
	4824, 1194, 4522, 4546, 5040, 2977, 4826, 5215, 2977, 4822,
	4498, 4499, 2329, 4818, 771, 4518, 809, 3646, 4359, 3298,
	4016, 4017, 3649, 2418, 4528, 732, 2755, 2978, 3003, 3638,
	3010, 1388, 635, 2514, 3027, 2335, 2334, 4836, 4835, 871,
	4554, 4456, 5064, 4551, 4423, 4537, 4334, 4388, 4389, 4390,
	4391, 4392, 3099, 4437, 775, 3253, 4224, 3104, 4226, 2976,
	2976, 3419, 4363, 3417, 3747, 764, 3097, 3415, 1283, 3416,
	3418, 2418, 2569, 5076, 4599, 4564, 1529, 4526, 1105, 4221,
	3305, 3500, 3059, 4573, 2604, 3510, 3511, 3512, 3705, 3704,
	42, 41, 40, 4387, 4072, 2976, 39, 38, 37, 36,
	35, 62, 4561, 4562, 4601, 61, 60, 2659, 2661, 59,
	58, 57, 4571, 4557, 56, 55, 4598, 54, 53, 3514,
	52, 51, 50, 49, 732, 4476, 48, 732, 4475, 3516,
	47, 46, 45, 732, 732, 732, 44, 43, 732, 732,
	732, 34, 33, 32, 31, 4005, 1529, 30, 732, 732,
	29, 28, 27, 26, 4496, 25, 24, 23, 4123, 2622,
	3936, 3365, 1457, 4277, 699, 1052, 1050, 1580, 4529, 4616,
	1029, 2977, 2977, 4649, 1039, 2623, 3078, 4486, 4487, 77,
	76, 4492, 75, 4516, 4271, 74, 2796, 73, 732, 732,
	72, 71, 732, 70, 4177, 69, 68, 67, 66, 5,
	65, 669, 4549, 732, 80, 82, 81, 2977, 79, 78,
	4558, 63, 4559, 943, 943, 18, 17, 4503, 2979, 1529,
	1452, 2342, 154, 1221, 4196, 2352, 2746, 4574, 3794, 2979,
	2979, 4570, 3775, 2979, 4251, 210, 4540, 2605, 1324, 4493,
	5431, 3150, 5197, 4135, 141, 5052, 4588, 3677, 3674, 2495,
	4691, 2979, 4258, 4586, 4133, 5082, 4433, 4692, 4679, 732,
	4267, 4436, 4139, 2989, 4137, 2986, 4624, 4621, 5503, 4720,
	4597, 3480, 2911, 2916, 3280, 4625, 4628, 4714, 4990, 4755,
	3420, 5309, 4538, 4587, 3280, 4752, 4501, 3048, 124, 4968,
	1529, 4732, 2935, 2306, 91, 719, 718, 5303, 1079, 4718,
	5006, 5191, 732, 4779, 1529, 4514, 4768, 4127, 138, 4484,
	686, 4466, 2975, 2703, 1035, 732, 3350, 2310, 4500, 4511,
	4510, 5177, 5173, 5172, 4086, 2943, 4508, 2978, 2956, 2294,
	86, 85, 84, 3105, 83, 1529, 16, 15, 2978, 2978,
	725, 14, 2978, 2648, 4801, 11, 4141, 4937, 3695, 4582,
	4935, 4936, 725, 4934, 2803, 778, 4270, 725, 1662, 2733,
	2978, 1068, 4635, 1622, 1060, 4637, 4943, 2979, 4010, 4430,
	2792, 2793, 2794, 2795, 4928, 2139, 732, 3421, 5305, 4676,
	4107, 2836, 927, 928, 1474, 925, 4784, 1119, 732, 951,
	4747, 3902, 4462, 732, 4066, 2976, 725, 4686, 4728, 732,
	4057, 2879, 732, 2875, 2864, 4223, 2976, 2976, 2886, 4812,
	2976, 882, 4450, 4804, 771, 2819, 4210, 4211, 4863, 4213,
	1103, 1102, 2845, 3465, 2137, 1097, 1098, 1093, 2976, 1613,
	1610, 3356, 4270, 776, 2678, 771, 771, 4869, 4707, 4806,
	2491, 4857, 3171, 3805, 3826, 809, 4245, 3177, 2880, 5098,
	3292, 1669, 4269, 732, 732, 809, 4886, 4627, 809, 732,
	2865, 4839, 4731, 732, 4740, 809, 4140, 1664, 809, 2,
	4765, 4761, 1, 0, 776, 882, 2978, 4781, 4802, 4797,
	4844, 4762, 732, 1619, 0, 110, 873, 873, 0, 4816,
	0, 3695, 4872, 22, 0, 4901, 118, 4813, 0, 4820,
	4884, 4911, 873, 4785, 0, 4930, 21, 2977, 4782, 0,
	0, 0, 4819, 0, 0, 0, 0, 20, 2977, 2977,
	0, 0, 2977, 0, 4864, 0, 873, 873, 4866, 19,
	873, 0, 64, 0, 4877, 0, 0, 4924, 4925, 0,
	2977, 4909, 13, 4880, 2976, 4882, 0, 0, 0, 4883,
	12, 0, 0, 0, 0, 0, 0, 4894, 4270, 0,
	0, 0, 732, 10, 4973, 0, 0, 0, 4352, 0,
	4743, 0, 871, 0, 0, 4985, 4364, 4895, 4974, 4947,
	3691, 3692, 0, 9, 0, 0, 8, 4910, 4913, 4908,
	4950, 7, 3507, 3508, 3509, 3350, 3350, 4919, 0, 0,
	0, 3501, 3502, 3503, 3504, 3505, 3506, 0, 0, 4927,
	5012, 0, 4745, 949, 0, 4745, 0, 0, 0, 0,
	0, 0, 2979, 0, 0, 0, 0, 0, 0, 0,
	4977, 0, 4271, 4951, 0, 5007, 0, 0, 0, 0,
	0, 0, 0, 0, 5013, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 2977, 0, 732, 0,
	4530, 0, 0, 0, 0, 0, 2979, 4981, 0, 0,
	4422, 0, 5021, 0, 4980, 732, 0, 5043, 4996, 4997,
	5050, 0, 4998, 4999, 871, 0, 0, 0, 2975, 0,
	1529, 5023, 0, 995, 0, 5049, 0, 0, 0, 1529,
	1529, 4906, 725, 0, 5017, 0, 0, 0, 4271, 4568,
	0, 0, 0, 6, 4713, 775, 5024, 4727, 5067, 0,
	0, 880, 5022, 0, 5072, 732, 5030, 4840, 732, 0,
	5032, 2978, 0, 0, 3389, 5039, 0, 5031, 0, 5020,
	4653, 4654, 2979, 5047, 0, 4657, 4658, 0, 809, 0,
	4860, 0, 809, 809, 0, 0, 775, 0, 0, 0,
	0, 5085, 5086, 5073, 5103, 5070, 5066, 0, 0, 5079,
	5093, 0, 5069, 0, 0, 2978, 0, 5078, 0, 809,
	0, 0, 0, 0, 0, 880, 5084, 5095, 0, 0,
	1571, 809, 5094, 2304, 3117, 0, 0, 809, 0, 2976,
	5087, 0, 5089, 3051, 5091, 0, 0, 5108, 0, 3128,
	0, 0, 5171, 5111, 5112, 0, 0, 0, 0, 0,
	0, 1571, 5120, 1571, 2121, 5159, 5118, 0, 0, 0,
	0, 0, 0, 873, 4271, 873, 4543, 0, 0, 0,
	5199, 0, 873, 2976, 0, 5195, 715, 943, 4503, 5136,
	5137, 2978, 0, 873, 873, 873, 873, 873, 5151, 4976,
	0, 0, 0, 0, 873, 5193, 0, 0, 2979, 5194,
	0, 0, 0, 5167, 0, 5162, 4569, 0, 0, 0,
	0, 5202, 2979, 5208, 0, 5170, 771, 0, 873, 0,
	0, 5204, 732, 0, 0, 5190, 0, 0, 4540, 0,
	0, 0, 0, 0, 0, 0, 5205, 5203, 5156, 1571,
	4975, 2977, 0, 776, 0, 0, 0, 0, 0, 2976,
	5152, 732, 732, 995, 0, 0, 5212, 0, 0, 0,
	0, 0, 0, 5235, 0, 0, 0, 0, 5225, 5185,
	0, 5188, 0, 4930, 0, 5227, 0, 5218, 5008, 0,
	5169, 0, 5237, 0, 5231, 2977, 0, 0, 0, 0,
	0, 0, 0, 0, 5288, 0, 5253, 4781, 0, 0,
	2186, 873, 0, 0, 873, 0, 5256, 2978, 5254, 0,
	5252, 5250, 5028, 0, 5280, 4985, 5265, 5302, 0, 0,
	0, 2978, 0, 0, 5075, 0, 0, 0, 2979, 5273,
	3311, 5274, 0, 5272, 0, 5247, 3320, 5249, 1571, 5251,
	0, 949, 5275, 5276, 0, 809, 5286, 5287, 949, 0,
	0, 2186, 0, 2186, 5333, 0, 0, 5248, 0, 2720,
	0, 2977, 4270, 0, 4663, 4664, 5308, 0, 0, 5352,
	1529, 882, 882, 0, 732, 2976, 809, 0, 5349, 5339,
	5340, 0, 809, 0, 0, 0, 0, 732, 5342, 2976,
	5346, 0, 0, 0, 5344, 0, 0, 5354, 5355, 0,
	0, 5343, 0, 0, 0, 0, 0, 0, 0, 5378,
	0, 732, 0, 0, 0, 5348, 0, 882, 0, 0,
	5345, 3433, 3434, 0, 0, 5374, 0, 5376, 0, 5366,
	0, 5363, 949, 5369, 0, 0, 2464, 2978, 0, 4873,
	0, 0, 5372, 5385, 5377, 0, 5200, 5381, 5382, 0,
	5402, 1571, 1571, 5401, 0, 5405, 5329, 5380, 0, 949,
	4887, 4888, 0, 0, 5387, 0, 0, 0, 0, 5390,
	0, 2304, 0, 0, 0, 2950, 0, 0, 0, 0,
	2979, 0, 0, 0, 0, 5084, 0, 2977, 0, 5199,
	771, 771, 0, 0, 0, 0, 5415, 0, 4270, 0,
	871, 2977, 5426, 5414, 5412, 2976, 3517, 3518, 3519, 5407,
	0, 5423, 5424, 0, 0, 5430, 5193, 5422, 5432, 732,
	1529, 5416, 3350, 5419, 0, 775, 0, 0, 4783, 0,
	5428, 0, 809, 5427, 0, 771, 0, 0, 0, 0,
	0, 5439, 0, 5429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5446, 0, 0, 5447, 0, 0, 0,
	0, 0, 5443, 0, 5466, 0, 949, 0, 949, 5403,
	5404, 873, 5448, 0, 995, 943, 0, 5454, 0, 0,
	0, 0, 943, 0, 0, 0, 0, 0, 5473, 2978,
	5475, 0, 0, 949, 0, 0, 809, 0, 809, 809,
	809, 809, 0, 5480, 0, 5471, 0, 0, 5478, 871,
	5494, 5495, 5496, 5472, 4985, 0, 0, 2977, 0, 5474,
	5491, 0, 771, 0, 5487, 0, 0, 0, 4270, 5505,
	5506, 0, 5510, 5512, 5470, 3550, 0, 5498, 4271, 5485,
	0, 0, 3695, 5509, 0, 0, 0, 0, 5513, 0,
	0, 5466, 873, 873, 873, 4718, 0, 2976, 0, 5514,
	5511, 5486, 5483, 5484, 0, 0, 943, 5528, 5532, 0,
	5529, 5537, 2979, 0, 0, 0, 871, 809, 0, 0,
	5536, 880, 880, 5538, 0, 0, 5541, 5544, 0, 5545,
	5547, 0, 871, 943, 0, 5555, 5548, 5549, 5554, 0,
	0, 5561, 5560, 732, 0, 4718, 0, 5562, 882, 882,
	5571, 873, 5567, 5573, 5566, 5466, 5574, 5563, 873, 873,
	0, 5577, 0, 5356, 0, 0, 5578, 880, 0, 0,
	0, 5466, 873, 949, 5569, 5570, 873, 873, 873, 873,
	873, 873, 873, 873, 873, 873, 873, 873, 873, 873,
	873, 873, 5575, 873, 0, 0, 0, 0, 0, 0,
	0, 2186, 0, 0, 0, 5200, 0, 0, 5582, 2977,
	0, 5520, 3703, 0, 4271, 0, 0, 0, 0, 0,
	0, 2978, 0, 0, 0, 0, 0, 1105, 0, 5003,
	3500, 0, 996, 0, 3510, 3511, 3512, 0, 0, 2979,
	943, 0, 943, 0, 0, 3327, 0, 3328, 2979, 3329,
	5434, 1665, 3331, 0, 1635, 0, 0, 0, 1647, 1648,
	1649, 3515, 0, 5244, 3340, 0, 0, 943, 3514, 0,
	2279, 0, 5520, 2280, 0, 0, 0, 2285, 3516, 2277,
	1665, 0, 0, 1635, 2282, 2286, 2281, 0, 2283, 2976,
	0, 0, 2284, 1658, 1659, 2278, 0, 0, 0, 0,
	5520, 0, 2287, 0, 0, 0, 2285, 0, 2277, 0,
	0, 0, 0, 2282, 2286, 2281, 3373, 2283, 0, 0,
	0, 0, 0, 0, 2278, 0, 0, 0, 0, 2854,
	0, 2287, 0, 0, 0, 0, 0, 0, 0, 0,
	2881, 0, 0, 0, 4271, 0, 0, 0, 2978, 0,
	0, 5234, 2907, 1665, 0, 2854, 1635, 2978, 2783, 5492,
	1647, 1648, 1649, 0, 0, 0, 0, 0, 2787, 0,
	2785, 0, 2279, 0, 2782, 2280, 2784, 2786, 2979, 2285,
	0, 2277, 0, 0, 0, 0, 2282, 2286, 2281, 0,
	2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0, 0,
	0, 2977, 0, 0, 2287, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 0, 2976, 0, 0, 0,
	0, 0, 0, 0, 0, 2976, 5492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5556, 0, 0, 0, 0, 5181, 5182, 5183,
	5184, 0, 0, 0, 0, 0, 0, 0, 880, 880,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 3899, 0, 0, 3969, 3970, 0, 0, 0, 0,
	3904, 1665, 0, 0, 1635, 0, 0, 2978, 1647, 1648,
	1649, 0, 0, 2796, 0, 0, 0, 0, 0, 0,
	2279, 0, 0, 2280, 0, 0, 0, 2285, 0, 2277,
	0, 0, 0, 0, 2282, 2286, 2281, 0, 2283, 0,
	0, 0, 2284, 1658, 1659, 2278, 0, 0, 2977, 0,
	0, 0, 2287, 0, 0, 0, 0, 2977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4027, 4028, 4029, 4030, 4031,
	4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 1384, 4043,
	0, 0, 2523, 0, 0, 0, 0, 2788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1665, 0, 0, 1635, 0, 0,
	0, 1647, 1648, 1649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 842, 0, 0, 0,
	2285, 0, 2277, 0, 0, 0, 0, 2282, 2286, 2281,
	1390, 2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0,
	0, 4022, 0, 0, 0, 2287, 0, 0, 5517, 0,
	0, 4026, 0, 0, 0, 873, 873, 2977, 873, 0,
	5449, 873, 0, 0, 1386, 0, 0, 2792, 2793, 2794,
	2795, 873, 873, 0, 2789, 0, 4047, 0, 873, 0,
	873, 873, 873, 873, 873, 873, 873, 873, 873, 873,
	873, 0, 873, 0, 873, 0, 873, 873, 873, 873,
	873, 873, 0, 873, 873, 873, 0, 0, 873, 5517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3507, 3508, 3509, 0, 0, 0, 5517, 4183, 0,
	3501, 3502, 3503, 3504, 3505, 3506, 1654, 842, 0, 3802,
	0, 3804, 1375, 0, 0, 1644, 1645, 1646, 0, 0,
	1384, 0, 3493, 0, 1638, 1639, 1640, 1641, 1642, 1643,
	0, 3494, 0, 996, 1385, 1654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 0, 0, 873, 0, 0, 0, 873, 873, 873,
	873, 0, 0, 0, 1381, 0, 0, 0, 0, 0,
	0, 0, 1390, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 873, 1378, 0, 0,
	0, 3857, 0, 0, 0, 0, 0, 0, 1654, 0,
	0, 4190, 0, 0, 0, 949, 1386, 1644, 1645, 1646,
	0, 1383, 0, 0, 949, 0, 1638, 1639, 1640, 1641,
	1642, 1643, 0, 3545, 0, 0, 0, 0, 2186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3890, 0, 1389, 3892, 0, 0, 0, 0, 0,
	0, 0, 0, 2186, 0, 0, 0, 0, 873, 0,
	5519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 0, 2132, 0, 0, 0, 0, 98, 0,
	0, 1376, 0, 0, 1375, 0, 949, 0, 3915, 0,
	0, 0, 0, 0, 0, 1382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2186, 1385, 0, 0, 0,
	0, 1379, 0, 2881, 2881, 0, 1654, 0, 1377, 0,
	809, 5519, 1387, 0, 2186, 1644, 1645, 1646, 0, 0,
	0, 0, 0, 0, 1638, 1639, 1640, 1641, 1642, 1643,
	0, 3532, 0, 0, 0, 0, 1381, 0, 0, 5519,
	0, 0, 0, 4422, 0, 0, 0, 0, 0, 1380,
	0, 0, 949, 949, 0, 0, 0, 0, 0, 1378,
	0, 949, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 1665, 0, 0, 1635, 0, 0, 0, 1647,
	1648, 1649, 0, 1383, 4369, 0, 0, 0, 2881, 2881,
	2881, 2279, 0, 0, 2280, 809, 809, 0, 2285, 0,
	2277, 0, 0, 0, 0, 2282, 2286, 2281, 0, 2283,
	0, 0, 0, 2284, 1658, 1659, 2278, 0, 0, 943,
	0, 0, 0, 2287, 0, 1389, 0, 0, 943, 1654,
	809, 0, 0, 0, 0, 0, 0, 809, 1644, 1645,
	1646, 0, 0, 0, 2738, 0, 0, 1638, 1639, 1640,
	1641, 1642, 1643, 0, 3005, 2740, 2741, 1409, 0, 2186,
	98, 0, 1384, 1376, 0, 873, 0, 949, 873, 0,
	873, 873, 0, 949, 0, 0, 1304, 1382, 0, 0,
	0, 1305, 0, 0, 0, 1314, 0, 0, 0, 0,
	0, 0, 0, 1379, 0, 943, 0, 0, 0, 0,
	1377, 873, 0, 0, 1387, 0, 0, 0, 0, 0,
	943, 0, 0, 0, 0, 0, 809, 0, 1665, 0,
	0, 1635, 809, 0, 1390, 1647, 1648, 1649, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2279, 0, 0,
	2280, 1380, 0, 0, 2285, 0, 2277, 1307, 2186, 0,
	0, 2282, 2286, 2281, 809, 3522, 0, 0, 1386, 2284,
	1658, 1659, 2278, 0, 0, 0, 0, 0, 0, 2287,
	0, 3523, 0, 0, 0, 873, 1313, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 943, 943, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 873, 0, 0, 3524, 4545, 873,
	0, 0, 0, 0, 0, 0, 1375, 0, 0, 0,
	1303, 0, 0, 0, 0, 873, 873, 0, 0, 0,
	873, 1301, 0, 0, 0, 0, 0, 0, 1385, 873,
	0, 0, 0, 0, 0, 873, 0, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 873, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 0, 873, 0, 943, 1381, 0,
	1302, 0, 1310, 0, 0, 0, 873, 0, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1378, 94, 0, 0, 0, 93, 95, 0, 0,
	873, 873, 873, 0, 0, 0, 125, 0, 873, 873,
	873, 0, 3006, 873, 0, 1383, 0, 0, 0, 0,
	2186, 0, 0, 1311, 873, 0, 2186, 0, 0, 0,
	4626, 0, 949, 122, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 1384,
	873, 0, 0, 0, 0, 0, 127, 1389, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 873, 4655, 0, 0, 0, 873, 1315,
	0, 92, 0, 873, 0, 873, 4698, 0, 0, 120,
	0, 0, 98, 0, 0, 1376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4666, 4667, 4381, 1382,
	0, 1390, 3187, 0, 1317, 1316, 0, 0, 0, 949,
	0, 0, 0, 0, 809, 1379, 0, 0, 0, 0,
	0, 0, 1377, 0, 0, 0, 1387, 1654, 4394, 1334,
	0, 0, 0, 0, 0, 1386, 1644, 1645, 1646, 3007,
	0, 0, 0, 0, 0, 1638, 1639, 1640, 1641, 1642,
	1643, 99, 2186, 949, 0, 0, 0, 0, 0, 949,
	0, 0, 121, 1380, 0, 3008, 2881, 2881, 0, 809,
	809, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	114, 1306, 0, 112, 0, 0, 0, 0, 101, 809,
	809, 0, 0, 0, 0, 0, 1336, 0, 0, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1320, 0, 0, 873, 0, 0, 0, 0, 115,
	0, 0, 0, 1375, 0, 0, 87, 0, 0, 0,
	0, 3703, 0, 0, 108, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 1385, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 943, 2881, 2881, 2881,
	2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881, 2881,
	0, 2881, 0, 1654, 0, 0, 0, 0, 0, 0,
	0, 0, 1644, 1645, 1646, 1381, 0, 0, 2186, 2186,
	2186, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 4061,
	0, 0, 0, 0, 2854, 0, 0, 0, 1378, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 949, 949, 0,
	949, 0, 1383, 4949, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 943, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 96, 113, 0, 104, 0, 0,
	0, 98, 809, 0, 0, 107, 0, 102, 0, 0,
	0, 4121, 0, 103, 1389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 943, 111, 0,
	0, 0, 4989, 943, 4278, 0, 100, 0, 0, 0,
	0, 0, 4921, 4923, 0, 0, 1403, 0, 0, 98,
	0, 1337, 1376, 0, 809, 0, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 1382, 949, 0, 0,
	0, 0, 0, 809, 809, 109, 0, 0, 0, 0,
	2881, 1338, 1379, 0, 1339, 0, 0, 0, 1340, 1377,
	0, 809, 0, 1387, 0, 0, 0, 0, 0, 809,
	2321, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 809, 0, 126, 4629,
	4630, 0, 809, 0, 0, 0, 0, 0, 0, 0,
	1380, 119, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 1344, 0,
	0, 4648, 0, 873, 873, 0, 0, 873, 873, 873,
	0, 873, 0, 918, 0, 1342, 0, 0, 0, 1212,
	0, 0, 873, 0, 0, 0, 0, 0, 4662, 0,
	0, 0, 1343, 4665, 0, 873, 0, 873, 0, 0,
	0, 0, 5034, 0, 0, 0, 0, 0, 0, 873,
	0, 943, 943, 0, 943, 873, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 1345,
	0, 0, 873, 4680, 0, 0, 873, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	873, 0, 0, 0, 0, 873, 873, 0, 949, 873,
	873, 873, 873, 873, 873, 873, 873, 873, 873, 873,
	873, 873, 0, 873, 0, 0, 0, 0, 0, 0,
	873, 873, 873, 949, 0, 0, 0, 0, 873, 0,
	873, 0, 0, 5110, 0, 5110, 5110, 873, 2186, 731,
	731, 873, 943, 0, 0, 0, 873, 0, 0, 0,
	873, 943, 0, 0, 0, 0, 0, 0, 873, 873,
	873, 0, 0, 0, 795, 0, 799, 0, 0, 873,
	837, 838, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 888, 0, 891, 5165, 893, 894, 895,
	896, 897, 0, 873, 873, 906, 873, 873, 0, 911,
	0, 0, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 0, 0, 1305, 0, 0, 0,
	1314, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	949, 873, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 949, 0, 0, 949, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 1665, 0, 0,
	1635, 0, 873, 0, 1647, 1648, 1649, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2279, 0, 949, 2280,
	0, 0, 1307, 2285, 0, 2277, 0, 0, 4458, 0,
	2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284, 1658,
	1659, 2278, 943, 0, 0, 809, 0, 0, 2287, 809,
	809, 1313, 943, 1665, 0, 0, 1635, 0, 0, 0,
	1647, 1648, 1649, 0, 0, 0, 0, 0, 0, 873,
	873, 0, 2279, 0, 0, 2280, 0, 943, 0, 2285,
	0, 2277, 1318, 0, 0, 0, 2282, 2286, 2281, 0,
	2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0, 0,
	0, 0, 1304, 0, 2287, 873, 0, 1305, 0, 0,
	0, 1314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 2186, 949, 2186,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 0,
	2186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 5408, 5409, 0, 0, 5411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 0, 1310, 0, 0,
	0, 0, 0, 1309, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 943, 0, 0, 0, 5386, 0,
	0, 2186, 0, 949, 0, 943, 943, 0, 1304, 943,
	0, 949, 1665, 1305, 0, 1635, 0, 1314, 0, 1647,
	1648, 1649, 0, 1318, 0, 0, 0, 0, 1311, 809,
	0, 2279, 0, 0, 2280, 0, 0, 0, 2285, 0,
	2277, 0, 943, 2186, 0, 2282, 2286, 2281, 0, 2283,
	0, 0, 0, 2284, 1658, 1659, 2278, 873, 0, 5285,
	0, 0, 0, 2287, 0, 0, 1303, 0, 0, 0,
	0, 0, 0, 1312, 873, 873, 0, 1326, 0, 1307,
	873, 873, 0, 0, 1315, 0, 0, 873, 873, 0,
	0, 0, 0, 1308, 873, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 5114, 0, 1313, 0,
	0, 0, 5119, 0, 5121, 0, 873, 1299, 0, 1317,
	1316, 0, 0, 0, 0, 0, 0, 873, 1310, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 943, 5284, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 873, 0, 873, 0, 0, 0, 1311,
	0, 0, 1303, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 873, 1306, 5502, 2881, 1099,
	90, 0, 873, 0, 0, 0, 873, 873, 0, 1308,
	873, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 1048, 0, 1312, 0, 1320, 0, 873, 0,
	0, 0, 0, 0, 0, 1315, 0, 943, 0, 0,
	0, 0, 0, 0, 1310, 943, 0, 0, 1082, 1082,
	1309, 0, 0, 731, 0, 0, 0, 0, 0, 0,
	949, 2881, 0, 0, 0, 949, 0, 0, 1325, 0,
	1317, 1316, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1240, 0, 0, 0, 0, 0,
	873, 0, 1654, 0, 0, 1311, 0, 0, 0, 0,
	0, 1644, 1645, 1646, 0, 0, 2186, 0, 90, 0,
	1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 714, 716,
	0, 0, 0, 0, 0, 0, 873, 0, 90, 0,
	0, 0, 0, 809, 0, 0, 0, 90, 0, 0,
	1312, 0, 0, 0, 873, 0, 0, 1306, 1654, 873,
	0, 1315, 0, 0, 0, 0, 0, 1644, 1645, 1646,
	1282, 0, 0, 1286, 5497, 0, 1638, 1639, 1640, 1641,
	1642, 1643, 0, 0, 0, 0, 0, 1320, 0, 0,
	873, 0, 0, 0, 3848, 0, 1317, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1398,
	0, 0, 809, 0, 0, 809, 0, 0, 0, 0,
	0, 0, 1427, 943, 0, 1665, 0, 0, 1635, 0,
	0, 0, 1647, 1648, 1649, 0, 0, 0, 0, 0,
	0, 949, 0, 0, 2279, 0, 0, 2280, 0, 873,
	0, 2285, 0, 2277, 0, 2881, 0, 0, 2282, 2286,
	2281, 0, 2283, 1306, 0, 0, 2284, 1658, 1659, 2278,
	0, 0, 0, 949, 949, 0, 2287, 0, 1334, 0,
	0, 0, 0, 0, 0, 0, 4279, 0, 0, 0,
	0, 0, 0, 1320, 1384, 2512, 0, 0, 0, 943,
	0, 0, 0, 809, 0, 0, 0, 943, 0, 0,
	873, 0, 0, 0, 2881, 0, 0, 1654, 873, 873,
	873, 0, 0, 0, 0, 0, 1644, 1645, 1646, 0,
	0, 0, 0, 5435, 0, 1638, 1639, 1640, 1641, 1642,
	1643, 0, 0, 0, 0, 1336, 0, 0, 0, 873,
	873, 0, 0, 873, 873, 873, 1390, 0, 0, 1665,
	0, 0, 1635, 0, 0, 0, 1647, 1648, 1649, 0,
	0, 0, 0, 0, 5450, 0, 0, 0, 2279, 0,
	873, 2280, 0, 0, 0, 2285, 0, 2277, 0, 0,
	1386, 0, 2282, 2286, 2281, 1611, 2283, 1618, 873, 873,
	2284, 1658, 1659, 2278, 1629, 0, 0, 0, 949, 0,
	2287, 0, 0, 873, 873, 2111, 2112, 2113, 2114, 2115,
	0, 0, 0, 2186, 0, 0, 2120, 0, 0, 0,
	0, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 949, 0,
	2138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 1375, 0,
	0, 0, 0, 0, 0, 4253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	1385, 4276, 0, 0, 0, 0, 0, 943, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4280, 731, 0, 2268, 0, 0, 0, 0, 0, 949,
	1381, 0, 2881, 4278, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 873, 1378, 0, 2333, 0, 0, 1304, 0,
	0, 0, 0, 1305, 0, 0, 0, 1314, 0, 949,
	949, 0, 809, 809, 0, 0, 0, 1383, 0, 0,
	1338, 0, 0, 1339, 873, 0, 2369, 1340, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 873, 0, 2321,
	0, 0, 873, 0, 873, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 1389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	0, 0, 943, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 1344, 0, 873,
	0, 1372, 0, 0, 98, 0, 873, 1376, 1313, 0,
	0, 0, 873, 0, 1342, 0, 90, 716, 0, 2489,
	0, 1382, 943, 0, 0, 0, 0, 0, 0, 809,
	0, 1343, 0, 4281, 3777, 0, 0, 1379, 0, 1318,
	0, 0, 0, 0, 1377, 0, 0, 0, 1387, 0,
	0, 0, 0, 0, 0, 0, 0, 714, 0, 0,
	0, 0, 949, 0, 5317, 0, 2543, 0, 1345, 949,
	1654, 0, 0, 0, 0, 0, 0, 0, 0, 1644,
	1645, 1646, 1303, 0, 0, 1380, 5425, 0, 1638, 1639,
	1640, 1641, 1642, 1643, 0, 0, 0, 873, 0, 0,
	2186, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	0, 873, 0, 943, 0, 873, 0, 0, 0, 0,
	0, 0, 809, 873, 873, 0, 2437, 0, 2631, 0,
	0, 2633, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	1309, 0, 0, 943, 943, 0, 0, 0, 0, 0,
	949, 0, 949, 949, 873, 0, 0, 0, 1304, 0,
	0, 0, 0, 1305, 0, 0, 0, 1314, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 873, 873, 873, 1311, 873, 0, 0, 0,
	0, 0, 0, 0, 1654, 873, 2186, 2881, 2881, 0,
	0, 2881, 0, 1644, 1645, 1646, 0, 0, 0, 0,
	5270, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0,
	0, 0, 0, 949, 873, 0, 2186, 0, 1665, 1307,
	1312, 1635, 0, 0, 0, 1647, 1648, 1649, 0, 0,
	0, 1315, 0, 2186, 0, 2709, 0, 2279, 2712, 809,
	2280, 0, 0, 0, 2285, 0, 2277, 873, 1313, 0,
	0, 2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284,
	1658, 1659, 2278, 0, 3843, 0, 1317, 1316, 0, 2287,
	2111, 2112, 0, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 943, 1082, 0, 0, 0, 2759, 2760,
	2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770,
	2771, 2772, 2773, 2774, 0, 2780, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1306, 0, 90, 0, 0, 0, 1308,
	0, 0, 873, 0, 873, 873, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1320, 943, 0, 943, 943, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 714,
	1309, 0, 714, 714, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2122, 0, 0, 0,
	2124, 2125, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 873,
	0, 0, 873, 0, 0, 0, 0, 943, 873, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 0, 0, 0, 0, 0, 1665, 0,
	1312, 1635, 0, 0, 0, 1647, 1648, 1649, 0, 0,
	0, 1315, 0, 0, 873, 949, 0, 2279, 0, 809,
	2280, 0, 0, 0, 2285, 873, 2277, 0, 0, 0,
	0, 2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284,
	1658, 1659, 2278, 0, 3206, 0, 1317, 1316, 0, 2287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	873, 90, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 1665, 0, 0, 1635, 0,
	0, 0, 1647, 1648, 1649, 0, 0, 4991, 0, 0,
	0, 0, 0, 1306, 2279, 0, 0, 2280, 0, 0,
	0, 2285, 0, 2277, 0, 0, 0, 0, 2282, 2286,
	2281, 0, 2283, 873, 0, 0, 2284, 1658, 1659, 2278,
	0, 0, 0, 1320, 873, 0, 2287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	874, 0, 0, 0, 0, 1665, 0, 0, 1635, 0,
	0, 0, 1647, 1648, 1649, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 2279, 0, 0, 2280, 0, 0,
	0, 2285, 0, 2277, 0, 0, 873, 0, 2282, 2286,
	2281, 0, 2283, 0, 949, 0, 2284, 1658, 1659, 2278,
	0, 0, 0, 0, 0, 873, 2287, 2186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1654, 0, 0, 0, 0, 0, 943,
	0, 0, 1644, 1645, 1646, 0, 0, 0, 0, 5255,
	0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0,
	0, 0, 0, 873, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2186, 873,
	0, 0, 0, 0, 4948, 0, 0, 0, 0, 0,
	0, 0, 0, 2833, 0, 873, 873, 0, 0, 0,
	0, 0, 0, 2855, 2857, 0, 2186, 0, 0, 0,
	2863, 0, 2874, 2877, 811, 2888, 2889, 2894, 2897, 0,
	0, 0, 0, 0, 2905, 811, 811, 0, 2909, 2915,
	2857, 2857, 2922, 2857, 0, 2857, 2857, 2857, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 811, 0, 0,
	0, 881, 0, 881, 0, 0, 0, 0, 0, 0,
	811, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 811, 811, 811, 1665, 0,
	0, 1635, 0, 0, 0, 1647, 1648, 1649, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2279, 0, 0,
	2280, 0, 0, 0, 2285, 0, 2277, 0, 90, 811,
	0, 2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284,
	1658, 1659, 2278, 0, 0, 0, 0, 0, 0, 2287,
	0, 0, 0, 0, 0, 2939, 0, 0, 943, 2772,
	2773, 2774, 2780, 1665, 0, 0, 1635, 0, 0, 0,
	1647, 1648, 1649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2279, 0, 0, 2280, 0, 0, 0, 2285,
	0, 2277, 0, 0, 0, 0, 2282, 2286, 2281, 0,
	2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0, 0,
	0, 2801, 3033, 1654, 2287, 0, 0, 0, 0, 0,
	0, 0, 1644, 1645, 1646, 0, 1193, 0, 0, 5232,
	3047, 1638, 1639, 1640, 1641, 1642, 1643, 1665, 0, 0,
	1635, 0, 3064, 0, 1647, 1648, 1649, 0, 0, 0,
	3075, 0, 0, 0, 0, 0, 2279, 0, 0, 2280,
	0, 0, 0, 2285, 0, 2277, 0, 0, 0, 0,
	2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284, 1658,
	1659, 2278, 3120, 3121, 3122, 0, 0, 0, 2287, 0,
	0, 0, 0, 3129, 0, 0, 0, 0, 0, 0,
	0, 3140, 0, 3144, 3145, 0, 0, 0, 0, 3149,
	0, 253, 3153, 3154, 0, 0, 3161, 0, 3163, 3166,
	1654, 0, 0, 0, 0, 0, 0, 0, 0, 1644,
	1645, 1646, 3188, 3189, 0, 0, 3193, 3194, 1638, 1639,
	1640, 1641, 1642, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3203, 3204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3228, 3229,
	3230, 3231, 3232, 0, 0, 3234, 0, 0, 0, 3238,
	1654, 0, 3236, 3241, 3242, 0, 0, 0, 0, 1644,
	1645, 1646, 0, 0, 0, 0, 0, 0, 1638, 1639,
	1640, 1641, 1642, 1643, 3250, 3251, 0, 0, 3256, 0,
	3257, 0, 0, 0, 0, 3258, 0, 3259, 3260, 0,
	0, 0, 3261, 0, 0, 0, 0, 0, 942, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3274, 0, 0, 0, 0, 0, 0, 3277, 0,
	0, 3278, 0, 0, 0, 810, 0, 0, 3289, 3290,
	0, 0, 0, 0, 0, 0, 810, 810, 0, 3307,
	1665, 0, 0, 1635, 0, 0, 0, 1647, 1648, 1649,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 2279,
	0, 0, 2280, 0, 0, 0, 2285, 0, 2277, 0,
	0, 810, 810, 2282, 2286, 2281, 0, 2283, 0, 0,
	0, 2284, 1658, 1659, 2278, 0, 810, 810, 810, 0,
	0, 2287, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 1305, 0, 1304, 0, 1314, 0, 0,
	1305, 0, 0, 0, 1314, 0, 0, 0, 811, 0,
	810, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1618, 0, 0,
	0, 0, 0, 1654, 0, 2120, 0, 0, 0, 1307,
	0, 0, 1644, 1645, 1646, 0, 1307, 1629, 0, 4917,
	0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3407, 3408, 0, 0, 0,
	0, 3414, 0, 0, 0, 0, 0, 2812, 1654, 1318,
	0, 0, 0, 0, 0, 0, 1318, 1644, 1645, 1646,
	0, 0, 0, 0, 4889, 0, 1638, 1639, 1640, 1641,
	1642, 1643, 0, 0, 0, 0, 0, 3443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2833,
	2833, 2833, 1303, 2611, 0, 0, 0, 0, 217, 1303,
	2920, 0, 0, 0, 0, 0, 0, 3468, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 3485, 1308,
	0, 0, 1654, 0, 0, 0, 1308, 0, 0, 0,
	0, 1644, 1645, 1646, 0, 0, 0, 0, 4868, 0,
	1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0, 0,
	2894, 2894, 2894, 0, 1310, 0, 0, 0, 0, 0,
	1309, 1310, 0, 0, 0, 0, 3541, 1309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3563, 0,
	0, 0, 3567, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 3579, 2801, 0, 0, 0,
	3583, 0, 0, 0, 0, 226, 0, 716, 0, 0,
	2607, 0, 0, 0, 0, 0, 0, 2964, 2964, 0,
	0, 811, 0, 0, 0, 811, 811, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 222, 1312, 0, 0,
	0, 1315, 0, 0, 0, 0, 0, 223, 1315, 0,
	1304, 0, 811, 0, 0, 1305, 0, 0, 2617, 1314,
	0, 0, 0, 0, 811, 0, 3668, 0, 0, 0,
	811, 0, 2609, 0, 3192, 0, 1317, 1316, 0, 227,
	0, 2487, 0, 1317, 1316, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 3709, 221, 0, 2610, 0, 0,
	1665, 0, 3717, 1635, 3717, 0, 0, 1647, 1648, 1649,
	3726, 0, 0, 0, 0, 0, 0, 0, 2621, 2279,
	0, 1307, 2280, 0, 0, 0, 2285, 0, 2277, 0,
	1087, 0, 0, 2282, 2286, 2281, 0, 2283, 0, 0,
	0, 2284, 1658, 1659, 2278, 1654, 3753, 0, 0, 810,
	1313, 2287, 0, 1306, 1644, 1645, 1646, 0, 0, 810,
	1306, 4845, 810, 1638, 1639, 1640, 1641, 1642, 1643, 810,
	3780, 3788, 810, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 1320, 0, 0, 0, 0, 0, 0,
	1320, 3812, 3813, 3814, 3815, 207, 2612, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2618, 0, 0,
	2613, 0, 0, 0, 1303, 231, 0, 0, 0, 0,
	218, 0, 942, 232, 0, 0, 0, 0, 0, 0,
	0, 3840, 3841, 2188, 3844, 3845, 3846, 0, 0, 224,
	0, 1308, 0, 0, 2619, 0, 0, 0, 0, 0,
	2620, 0, 0, 0, 0, 225, 0, 0, 0, 2614,
	0, 0, 0, 0, 0, 2615, 0, 0, 0, 3860,
	0, 0, 0, 3864, 0, 0, 1310, 0, 811, 0,
	0, 219, 1309, 0, 2188, 0, 2188, 870, 1665, 0,
	0, 1635, 3879, 0, 0, 1647, 1648, 1649, 0, 0,
	3880, 0, 0, 0, 0, 0, 0, 2279, 0, 811,
	2280, 0, 0, 2608, 2285, 811, 2277, 0, 0, 0,
	0, 2282, 2286, 2281, 0, 2283, 0, 1311, 0, 2284,
	1658, 1659, 2278, 0, 0, 0, 0, 0, 0, 2287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1665, 0, 0, 1635, 0, 0, 3916, 1647, 1648, 1649,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 2279,
	0, 0, 2280, 1315, 0, 0, 2285, 0, 2277, 0,
	0, 0, 0, 2282, 2286, 2281, 0, 2283, 0, 0,
	0, 2284, 1658, 1659, 2278, 0, 0, 0, 0, 0,
	0, 2287, 0, 0, 0, 0, 2483, 0, 1317, 1316,
	0, 0, 0, 0, 3956, 2122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3964, 3965, 0, 0, 3968,
	0, 0, 810, 3971, 0, 2964, 810, 810, 0, 0,
	0, 0, 0, 0, 3976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 3982, 0, 0,
	0, 0, 0, 810, 0, 0, 0, 0, 0, 2801,
	0, 2833, 0, 0, 0, 810, 0, 3995, 3996, 0,
	0, 810, 0, 0, 0, 1306, 0, 4007, 0, 930,
	930, 0, 2122, 3436, 4012, 0, 0, 0, 2857, 2857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4023, 0, 0, 1320, 0, 4025, 2833, 811,
	0, 811, 811, 811, 811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4044, 4045, 4046, 0, 0, 0, 0, 0,
	0, 0, 4052, 0, 0, 0, 0, 0, 0, 2905,
	0, 0, 0, 0, 0, 0, 0, 0, 2855, 0,
	0, 0, 2857, 0, 0, 881, 881, 881, 0, 0,
	4078, 4079, 4080, 0, 0, 1654, 0, 0, 0, 0,
	0, 1082, 0, 0, 1644, 1645, 1646, 0, 0, 0,
	811, 4708, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	942, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2857, 0, 2833, 4125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4150, 0, 1665, 2187, 3599, 1635, 3603, 0, 0,
	1647, 1648, 1649, 0, 4154, 0, 0, 0, 0, 0,
	0, 0, 2279, 4159, 4160, 2280, 0, 0, 0, 2285,
	0, 2277, 0, 3717, 2188, 0, 2282, 2286, 2281, 4176,
	2283, 0, 0, 4512, 2284, 1658, 1659, 2278, 0, 810,
	0, 942, 0, 0, 2287, 2187, 0, 2187, 0, 0,
	0, 0, 1665, 0, 0, 1635, 0, 0, 0, 1647,
	1648, 1649, 0, 0, 0, 0, 0, 0, 942, 0,
	810, 2279, 0, 0, 2280, 0, 810, 0, 2285, 0,
	2277, 0, 0, 0, 0, 2282, 2286, 2281, 0, 2283,
	0, 0, 0, 2284, 1658, 1659, 2278, 4217, 0, 0,
	0, 0, 0, 2287, 3717, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4246, 4247, 90, 1654, 0, 0, 0, 0, 0, 0,
	0, 0, 1644, 1645, 1646, 0, 0, 4263, 0, 4690,
	0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4472, 0, 0, 4298, 0, 942, 0, 942, 0, 0,
	0, 0, 4300, 4301, 4302, 0, 0, 4305, 0, 0,
	4308, 4309, 4310, 4311, 0, 1654, 0, 0, 0, 0,
	0, 0, 942, 4320, 1644, 1645, 1646, 0, 0, 0,
	4323, 4681, 4324, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 0, 0, 4338, 0, 0, 810, 0, 0, 0,
	0, 4343, 4344, 0, 0, 0, 4347, 4348, 4349, 4350,
	4351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1665, 1304, 0, 1635, 0, 0, 1305,
	1647, 1648, 1649, 1314, 0, 0, 0, 0, 0, 0,
	0, 0, 2279, 0, 0, 2280, 0, 0, 0, 2285,
	810, 2277, 810, 810, 810, 810, 2282, 2286, 2281, 0,
	2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0, 4399,
	0, 0, 0, 0, 2287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4408, 4409, 0, 0,
	0, 0, 4413, 4414, 0, 1307, 0, 0, 0, 4417,
	4418, 0, 942, 0, 0, 0, 4421, 0, 1665, 0,
	2833, 1635, 0, 0, 0, 1647, 1648, 1649, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 2279, 4428, 0,
	2280, 810, 0, 0, 2285, 0, 2277, 0, 0, 1629,
	0, 2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284,
	1658, 1659, 2278, 0, 0, 1318, 0, 0, 0, 2287,
	0, 4447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4461, 0, 4464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1303, 0,
	1665, 0, 0, 1635, 0, 0, 0, 1647, 1648, 1649,
	4485, 0, 0, 0, 4483, 2187, 0, 0, 0, 2279,
	0, 0, 2280, 930, 0, 1308, 2285, 2122, 2277, 0,
	0, 0, 0, 2282, 2286, 2281, 0, 2283, 0, 0,
	0, 2284, 1658, 1659, 2278, 0, 0, 0, 0, 0,
	0, 2287, 0, 0, 0, 0, 0, 0, 1654, 0,
	1310, 0, 0, 0, 0, 0, 1309, 1644, 1645, 1646,
	0, 0, 0, 0, 0, 0, 1638, 1639, 1640, 1641,
	1642, 1643, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1650, 0, 0, 0, 0, 0, 0,
	0, 0, 4563, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 1654, 4576, 4446,
	0, 0, 0, 0, 0, 0, 1644, 1645, 1646, 0,
	0, 0, 0, 0, 0, 1638, 1639, 1640, 1641, 1642,
	1643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 90, 0,
	0, 4589, 0, 90, 90, 0, 0, 1315, 0, 0,
	0, 0, 0, 0, 0, 2964, 0, 0, 2964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4617, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 1317, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4634, 0, 0,
	4636, 0, 90, 1650, 0, 0, 4639, 4640, 4641, 0,
	0, 4644, 4645, 4646, 0, 0, 0, 0, 0, 0,
	0, 4650, 4651, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4660, 0, 0, 0, 1196, 0, 0, 0, 0,
	0, 2188, 0, 0, 0, 0, 0, 0, 0, 1306,
	0, 4668, 4669, 0, 0, 4673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2188, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4685, 0, 0, 0, 0, 0, 1654, 0,
	4687, 4688, 4689, 0, 0, 0, 0, 1644, 1645, 1646,
	0, 2964, 0, 0, 4449, 0, 1638, 1639, 1640, 1641,
	1642, 1643, 4696, 0, 0, 0, 0, 0, 2188, 0,
	0, 4697, 0, 0, 0, 4700, 4701, 4702, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 2188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2857, 0, 0, 4738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4742, 0, 0, 1654, 0, 0, 0, 0, 0, 0,
	0, 930, 1644, 1645, 1646, 0, 4759, 0, 930, 0,
	0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 811,
	929, 929, 3005, 0, 0, 0, 0, 0, 0, 3717,
	1384, 0, 0, 0, 0, 0, 0, 945, 945, 0,
	0, 4850, 0, 0, 0, 0, 4853, 0, 0, 0,
	0, 0, 4859, 811, 0, 4861, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 1654, 0, 0, 0, 0,
	0, 0, 930, 0, 1644, 1645, 1646, 0, 0, 0,
	0, 0, 2188, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 881, 1390, 881, 881, 0, 0, 0, 0, 2501,
	0, 0, 0, 0, 0, 0, 4896, 4897, 0, 0,
	0, 0, 4903, 0, 0, 0, 4905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1386, 0, 0, 0,
	0, 0, 0, 0, 0, 4918, 0, 0, 0, 811,
	1195, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	1665, 0, 0, 1635, 942, 0, 0, 1647, 1648, 1649,
	0, 0, 0, 942, 0, 0, 4933, 0, 0, 2279,
	0, 2188, 2280, 0, 0, 0, 2285, 811, 2277, 0,
	0, 4445, 1650, 2282, 2286, 2281, 2905, 2283, 0, 1650,
	0, 2284, 1658, 1659, 2278, 0, 0, 0, 0, 4961,
	1650, 2287, 0, 0, 0, 0, 930, 0, 930, 0,
	0, 0, 0, 0, 1375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 930, 0, 0, 1385, 0, 0, 0,
	0, 0, 0, 0, 4993, 942, 0, 1665, 2964, 2964,
	1635, 0, 2964, 0, 1647, 1648, 1649, 0, 0, 0,
	0, 0, 2187, 0, 0, 0, 2279, 0, 0, 2280,
	0, 0, 0, 2285, 0, 2277, 1381, 0, 0, 0,
	2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284, 1658,
	1659, 2278, 0, 0, 1125, 0, 0, 2187, 2287, 1378,
	4441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3717, 0, 0, 0, 0, 0, 0, 0, 0,
	3006, 942, 942, 1383, 0, 0, 0, 0, 5068, 5063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2187,
	0, 0, 944, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 1389, 0, 0, 2187, 0,
	0, 0, 5096, 930, 0, 0, 0, 0, 5102, 0,
	0, 5105, 0, 2188, 0, 0, 0, 0, 0, 2188,
	0, 0, 0, 0, 0, 0, 5113, 0, 0, 0,
	98, 0, 0, 3001, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1382, 2120, 0,
	0, 0, 0, 0, 5135, 5135, 5135, 0, 5138, 0,
	0, 0, 0, 1379, 0, 0, 942, 2857, 0, 0,
	1377, 0, 942, 0, 1387, 0, 0, 0, 0, 810,
	810, 0, 0, 0, 0, 0, 0, 3007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1380, 0, 3008, 810, 0, 1665, 811, 0, 1635,
	0, 810, 0, 1647, 1648, 1649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2279, 926, 926, 2280, 0,
	0, 0, 2285, 2187, 2277, 0, 0, 0, 0, 2282,
	2286, 2281, 0, 2283, 0, 2188, 0, 2284, 1658, 1659,
	2278, 0, 0, 0, 0, 0, 0, 2287, 0, 0,
	0, 0, 811, 811, 0, 5238, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 811, 811, 0, 0, 0, 0, 0, 0,
	810, 0, 811, 0, 5258, 5259, 810, 0, 0, 5257,
	0, 1665, 0, 0, 1635, 0, 0, 0, 1647, 1648,
	1649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2279, 0, 2187, 2280, 4933, 0, 0, 2285, 810, 2277,
	0, 0, 5135, 0, 2282, 2286, 2281, 0, 2283, 0,
	0, 0, 2284, 1658, 1659, 2278, 0, 0, 0, 0,
	0, 0, 2287, 0, 0, 0, 0, 0, 0, 0,
	0, 2964, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 1654, 0, 0, 0, 0,
	0, 2188, 2188, 2188, 1644, 1645, 1646, 0, 0, 0,
	0, 945, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 5341, 1650, 1650, 1650, 1650, 1650, 0, 0, 0,
	0, 1650, 90, 0, 5350, 0, 0, 5357, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 1650,
	5367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2884, 0, 0, 0, 90,
	0, 0, 0, 0, 5383, 811, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1654, 0, 0, 0, 0, 4933, 0, 0,
	0, 1644, 1645, 1646, 0, 0, 0, 0, 0, 0,
	1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 811, 811, 0, 0,
	0, 0, 0, 0, 2187, 0, 0, 0, 0, 0,
	2187, 0, 0, 0, 811, 0, 0, 0, 942, 0,
	0, 0, 811, 0, 0, 0, 881, 0, 0, 1650,
	0, 0, 5444, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2835, 942, 0, 0, 5135, 0, 0, 942, 0,
	0, 0, 0, 0, 0, 0, 5462, 0, 0, 90,
	0, 2835, 0, 2835, 1665, 0, 0, 1635, 0, 0,
	0, 1647, 1648, 1649, 0, 0, 0, 2835, 0, 0,
	0, 0, 0, 2279, 0, 0, 2280, 0, 810, 0,
	2285, 0, 2277, 0, 0, 0, 0, 2282, 2286, 2281,
	0, 2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0,
	0, 0, 0, 0, 0, 2287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2187, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 1654, 0, 810, 810, 0, 0, 0, 0, 0,
	1644, 1645, 1646, 810, 0, 0, 2833, 4432, 0, 1638,
	1639, 1640, 1641, 1642, 1643, 0, 0, 2964, 0, 0,
	0, 2188, 0, 0, 0, 0, 5565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 942, 942, 0, 942,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 2501, 0, 0, 0, 945,
	0, 0, 0, 0, 2501, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1654, 0, 2122, 0,
	0, 0, 2187, 2187, 2187, 1644, 1645, 1646, 0, 0,
	0, 0, 4419, 0, 1638, 1639, 1640, 1641, 1642, 1643,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	926, 930, 0, 929, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 930, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 810, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 811, 811, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2501, 3224, 0, 0, 0, 810, 810, 0,
	0, 3227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 929, 0, 929,
	810, 0, 0, 0, 0, 0, 810, 0, 0, 0,
	2188, 0, 2188, 0, 945, 0, 945, 0, 0, 0,
	0, 0, 0, 2188, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 942, 0, 0,
	1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
	1650, 1650, 1650, 1650, 1650, 1650, 0, 930, 0, 0,
	0, 1650, 942, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2884, 2884,
	0, 0, 90, 0, 2188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 1654,
	0, 0, 811, 0, 1650, 0, 0, 0, 1644, 1645,
	1646, 0, 0, 0, 0, 4325, 2188, 1638, 1639, 1640,
	1641, 1642, 1643, 0, 0, 0, 1650, 0, 1650, 0,
	0, 0, 0, 0, 1650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 1650, 0, 0, 1650, 0,
	0, 3513, 2187, 2884, 2884, 2884, 0, 0, 0, 1650,
	1650, 945, 0, 0, 0, 1650, 0, 0, 1650, 0,
	0, 0, 0, 0, 0, 944, 1650, 0, 0, 942,
	1650, 0, 0, 0, 0, 0, 1650, 0, 0, 0,
	942, 942, 0, 1650, 942, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 1665, 0, 0, 1635,
	1650, 0, 0, 1647, 1648, 1649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2279, 0, 942, 2280, 0,
	0, 0, 2285, 0, 2277, 0, 0, 0, 926, 2282,
	2286, 2281, 0, 2283, 0, 926, 0, 2284, 1658, 1659,
	2278, 0, 0, 0, 0, 0, 0, 2287, 217, 0,
	0, 0, 216, 0, 0, 0, 0, 2835, 2835, 2835,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	1665, 0, 0, 1635, 810, 0, 0, 1647, 1648, 1649,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 2279,
	0, 0, 2280, 0, 0, 0, 2285, 0, 2277, 944,
	0, 944, 0, 2282, 2286, 2281, 0, 2283, 0, 0,
	0, 2284, 1658, 1659, 2278, 0, 0, 0, 0, 926,
	0, 2287, 0, 0, 0, 0, 944, 942, 0, 810,
	0, 0, 0, 810, 810, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 1665, 0, 926, 1635, 0, 0,
	0, 1647, 1648, 1649, 0, 0, 4081, 0, 0, 0,
	0, 0, 0, 2279, 0, 0, 2280, 0, 0, 2188,
	2285, 0, 2277, 0, 0, 226, 0, 2282, 2286, 2281,
	0, 2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0,
	0, 0, 0, 0, 0, 2287, 811, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 2187, 942, 2187, 0, 0, 0, 223, 0, 0,
	942, 0, 0, 0, 2187, 0, 0, 0, 0, 3224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 926, 0, 926, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 221, 944, 0, 0, 0,
	0, 0, 0, 3224, 0, 811, 0, 0, 811, 930,
	926, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 2187, 0, 1650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1665, 0, 0, 1635, 0, 0, 0, 1647, 1648, 1649,
	0, 0, 0, 810, 0, 0, 0, 0, 0, 2279,
	0, 0, 2280, 0, 0, 0, 2285, 2187, 2277, 0,
	0, 0, 0, 2282, 2286, 2281, 0, 2283, 0, 0,
	0, 2284, 1658, 1659, 2278, 0, 233, 0, 0, 0,
	0, 2287, 0, 0, 0, 207, 811, 0, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 234, 0, 231, 0, 0, 942, 0,
	218, 0, 0, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 235, 0, 0, 0, 211, 0, 2501, 3224, 0,
	3224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 1650, 1650,
	0, 2884, 2884, 0, 942, 1650, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 2188, 1304, 1334, 0,
	0, 0, 1305, 0, 3513, 3513, 1314, 0, 0, 0,
	0, 1654, 0, 0, 1650, 0, 0, 0, 0, 0,
	1644, 1645, 1646, 0, 0, 0, 0, 4256, 0, 1638,
	1639, 1640, 1641, 1642, 1643, 0, 0, 0, 0, 1650,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 1650, 930, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 1307, 0,
	0, 881, 2884, 2884, 2884, 2884, 2884, 2884, 2884, 2884,
	2884, 2884, 2884, 2884, 2884, 1654, 2884, 0, 3513, 3513,
	3513, 0, 0, 0, 1644, 1645, 1646, 1313, 0, 0,
	0, 4235, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	2187, 0, 1650, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 1650, 881, 929, 810, 1650, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	1650, 0, 0, 945, 1650, 811, 811, 0, 0, 1654,
	942, 0, 945, 0, 0, 0, 0, 0, 1644, 1645,
	1646, 1303, 0, 0, 0, 0, 0, 1638, 1639, 1640,
	1641, 1642, 1643, 0, 0, 0, 0, 0, 1335, 2835,
	0, 0, 942, 942, 0, 0, 0, 0, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 810, 0, 0, 810,
	0, 723, 0, 0, 0, 0, 0, 929, 930, 945,
	0, 0, 0, 1310, 0, 0, 2835, 0, 930, 1309,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2884, 0, 1665, 0, 0,
	1635, 0, 811, 930, 1647, 1648, 1649, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2279, 0, 0, 2280,
	1337, 0, 0, 2285, 1311, 2277, 0, 0, 0, 0,
	2282, 2286, 2281, 0, 2283, 0, 0, 0, 2284, 1658,
	1659, 2278, 0, 929, 929, 0, 0, 810, 2287, 0,
	1338, 0, 0, 1339, 0, 0, 0, 1340, 0, 0,
	945, 945, 0, 0, 1650, 1654, 0, 942, 0, 1333,
	0, 0, 0, 2188, 1644, 1645, 1646, 0, 0, 1341,
	1315, 4021, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 1650, 4008, 0, 0, 811, 2835, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 3201, 0, 1317, 1316, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2501, 0, 0, 0, 1342, 0, 856, 859, 861, 0,
	0, 2501, 2501, 0, 0, 3224, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 929, 0, 0, 2187, 0, 0,
	0, 1650, 0, 0, 0, 945, 0, 0, 930, 2188,
	0, 945, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 1306, 0, 0, 0, 0, 0, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 2188,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 1665, 1320, 0, 1635, 0, 2188, 0, 1647, 1648,
	1649, 0, 811, 0, 0, 0, 0, 0, 942, 942,
	2279, 0, 0, 2280, 0, 0, 0, 2285, 0, 2277,
	0, 0, 0, 0, 2282, 2286, 2281, 0, 2283, 0,
	0, 0, 2284, 1658, 1659, 2278, 0, 1650, 0, 0,
	0, 0, 2287, 0, 0, 1650, 1650, 0, 0, 1650,
	3513, 3513, 1650, 0, 944, 0, 0, 1650, 3224, 0,
	0, 0, 0, 1650, 0, 810, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 1650, 1650, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1650, 0,
	0, 0, 0, 1650, 0, 0, 810, 810, 0, 0,
	0, 0, 0, 0, 1650, 0, 1650, 0, 3513, 3513,
	3513, 3513, 3513, 3513, 3513, 3513, 3513, 3513, 3513, 3513,
	3513, 0, 0, 0, 3513, 1650, 1650, 1650, 0, 0,
	0, 0, 926, 1650, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 3224, 0, 944, 944, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 942, 1650,
	1650, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 0, 1650, 0, 926, 0,
	0, 881, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 811, 1650, 0, 0, 2835, 0,
	1650, 1650, 0, 0, 0, 0, 0, 0, 0, 942,
	945, 942, 942, 0, 0, 0, 0, 881, 0, 0,
	944, 0, 811, 0, 3513, 0, 944, 0, 0, 0,
	0, 0, 1654, 0, 2187, 0, 0, 0, 0, 0,
	0, 1644, 1645, 1646, 0, 0, 0, 0, 0, 0,
	1638, 1639, 1640, 1641, 1642, 1643, 810, 0, 0, 926,
	926, 0, 0, 0, 0, 0, 1665, 0, 0, 1635,
	0, 0, 0, 1647, 1648, 1649, 0, 0, 0, 0,
	929, 0, 942, 811, 0, 2279, 0, 0, 2280, 930,
	0, 0, 2285, 0, 2277, 0, 0, 945, 0, 2282,
	2286, 2281, 0, 2283, 0, 0, 0, 2284, 1658, 1659,
	2278, 0, 0, 0, 0, 0, 0, 2287, 0, 0,
	1665, 0, 0, 1635, 929, 0, 0, 1647, 1648, 1649,
	929, 0, 3540, 0, 0, 0, 0, 0, 0, 2279,
	2187, 945, 2280, 0, 0, 0, 2285, 945, 2277, 0,
	0, 0, 0, 2282, 2286, 2281, 0, 2283, 0, 0,
	4541, 2284, 1658, 1659, 2278, 930, 0, 0, 0, 0,
	2187, 2287, 0, 2501, 926, 0, 0, 0, 0, 0,
	926, 1041, 0, 0, 0, 0, 0, 2187, 0, 0,
	1047, 1665, 0, 810, 1635, 0, 0, 0, 1647, 1648,
	1649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2279, 0, 0, 2280, 0, 0, 0, 2285, 1204, 2277,
	0, 0, 0, 0, 2282, 2286, 2281, 0, 2283, 0,
	2188, 0, 2284, 1658, 1659, 2278, 0, 1222, 0, 0,
	1650, 0, 2287, 0, 3530, 1230, 1232, 0, 1234, 1650,
	1650, 0, 0, 0, 1650, 1650, 1654, 0, 1650, 1650,
	0, 0, 1650, 0, 0, 1644, 1645, 1646, 0, 1650,
	0, 0, 3987, 0, 1638, 1639, 1640, 1641, 1642, 1643,
	0, 0, 0, 2884, 0, 0, 0, 0, 0, 0,
	1273, 2188, 0, 0, 0, 0, 0, 930, 929, 929,
	0, 929, 1650, 0, 0, 1650, 0, 0, 881, 881,
	0, 0, 0, 0, 0, 945, 945, 0, 945, 2188,
	0, 0, 0, 0, 1650, 944, 0, 0, 1665, 0,
	0, 1635, 0, 0, 0, 1647, 1648, 1649, 0, 0,
	3525, 930, 0, 0, 0, 0, 2884, 2279, 0, 0,
	2280, 0, 0, 0, 2285, 1350, 2277, 0, 0, 0,
	0, 2282, 2286, 2281, 942, 2283, 0, 0, 0, 2284,
	1658, 1659, 2278, 930, 930, 0, 0, 0, 0, 2287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 1650, 0, 945, 0, 0, 0,
	0, 0, 944, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	1650, 0, 0, 1665, 0, 0, 1635, 0, 0, 0,
	1647, 1648, 1649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2279, 810, 0, 2280, 944, 0, 1650, 2285,
	0, 2277, 944, 0, 0, 0, 2282, 2286, 2281, 0,
	2283, 0, 0, 0, 2284, 1658, 1659, 2278, 0, 926,
	0, 0, 0, 0, 2287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1650, 1566, 0, 0, 0, 0, 0, 930, 0,
	0, 0, 0, 1566, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1650, 0, 1650, 1650,
	1650, 0, 0, 0, 0, 0, 0, 0, 1650, 3513,
	2884, 1650, 1650, 1650, 0, 0, 0, 0, 3224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 926, 0, 0, 929,
	0, 1654, 0, 0, 0, 0, 0, 0, 0, 929,
	1644, 1645, 1646, 1650, 0, 0, 945, 3558, 0, 1638,
	1639, 1640, 1641, 1642, 1643, 0, 945, 0, 3513, 2884,
	1650, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 945, 0, 0, 0, 1654, 0, 0, 0, 0,
	944, 944, 0, 944, 1644, 1645, 1646, 0, 0, 3224,
	0, 0, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1654, 2270, 0, 0,
	0, 0, 0, 0, 0, 1644, 1645, 1646, 0, 0,
	0, 0, 0, 0, 1638, 1639, 1640, 1641, 1642, 1643,
	0, 944, 2187, 0, 0, 2318, 0, 0, 0, 0,
	944, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 929, 0, 0, 929, 0, 945, 0,
	2187, 0, 0, 0, 0, 0, 0, 0, 0, 945,
	945, 0, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2384, 1650, 0, 0, 2388, 0, 929,
	0, 0, 2400, 0, 926, 926, 0, 926, 0, 0,
	3513, 0, 0, 0, 3497, 0, 945, 0, 0, 0,
	0, 0, 1650, 2447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2461,
	0, 0, 4541, 0, 0, 0, 0, 2884, 0, 930,
	3513, 0, 0, 1654, 1650, 0, 0, 0, 2478, 0,
	0, 2481, 1644, 1645, 1646, 0, 0, 0, 0, 0,
	0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 0, 0, 0, 0, 929,
	0, 0, 0, 2542, 0, 0, 0, 0, 2400, 2400,
	2400, 944, 0, 0, 1650, 0, 945, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 2566, 2567, 0,
	930, 0, 930, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 1650, 1654, 0,
	0, 0, 0, 0, 0, 0, 0, 1644, 1645, 1646,
	0, 0, 0, 0, 1650, 0, 1638, 1639, 1640, 1641,
	1642, 1643, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 1650, 0, 0, 1650,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 930, 0, 1665, 0, 0, 1635, 945,
	0, 2656, 1647, 1648, 1649, 0, 0, 3490, 0, 0,
	0, 0, 0, 0, 2279, 0, 0, 2280, 0, 0,
	0, 2285, 0, 2277, 0, 0, 0, 0, 2282, 2286,
	2281, 0, 2283, 0, 0, 0, 2284, 1658, 1659, 2278,
	0, 0, 0, 1566, 1566, 0, 2287, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 944, 944, 1041, 1041, 944, 1041,
	0, 2708, 0, 0, 2710, 2711, 1665, 0, 0, 1635,
	926, 0, 0, 1647, 1648, 1649, 0, 0, 1650, 0,
	0, 0, 0, 0, 0, 2279, 0, 0, 2280, 0,
	0, 944, 2285, 0, 2277, 1566, 0, 0, 0, 2282,
	2286, 2281, 0, 2283, 0, 2753, 0, 2284, 1658, 1659,
	2278, 0, 0, 0, 0, 0, 0, 2287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2884, 2884, 0, 0, 2884, 0, 0, 1665,
	929, 0, 1635, 0, 0, 0, 1647, 1648, 1649, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 2279, 0,
	0, 2280, 1650, 0, 0, 2285, 0, 2277, 0, 0,
	0, 1650, 2282, 2286, 2281, 0, 2283, 0, 0, 0,
	2284, 1658, 1659, 2278, 0, 0, 0, 0, 0, 0,
	2287, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 926, 926,
	0, 0, 926, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 3513,
	3513, 0, 3513, 945, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 1665, 930, 0, 1635, 0, 0,
	0, 1647, 1648, 1649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2279, 0, 0, 2280, 0, 0, 0,
	2285, 0, 2277, 1650, 0, 0, 944, 2282, 2286, 2281,
	0, 2283, 0, 0, 944, 2284, 1658, 1659, 2278, 1665,
	0, 0, 1635, 0, 0, 2287, 1647, 1648, 1649, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2279, 0,
	0, 2280, 0, 0, 0, 2285, 0, 2277, 0, 0,
	0, 0, 2282, 2286, 2281, 0, 2283, 0, 0, 0,
	2284, 1658, 1659, 2278, 0, 0, 0, 0, 929, 0,
	2287, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	926, 945, 945, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	1654, 0, 0, 0, 0, 0, 0, 0, 0, 1644,
	1645, 1646, 0, 0, 0, 0, 0, 0, 1638, 1639,
	1640, 1641, 1642, 1643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3484, 1654, 0, 0, 0, 0, 945, 0, 0, 0,
	1644, 1645, 1646, 0, 0, 0, 0, 0, 0, 1638,
	1639, 1640, 1641, 1642, 1643, 0, 0, 0, 0, 929,
	0, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 168, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 1654, 0, 0, 0, 0, 0,
	0, 0, 0, 1644, 1645, 1646, 0, 0, 2931, 0,
	0, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 945, 0, 0,
	926, 0, 0, 0, 0, 0, 1304, 1334, 0, 0,
	0, 1305, 0, 0, 944, 1314, 0, 0, 0, 0,
	929, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 945, 0,
	0, 0, 0, 0, 0, 0, 944, 944, 0, 1654,
	0, 0, 0, 0, 158, 0, 0, 0, 1644, 1645,
	1646, 0, 0, 0, 0, 2816, 0, 1638, 1639, 1640,
	1641, 1642, 1643, 0, 1336, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 1654, 0, 0, 0, 0, 0,
	0, 3034, 0, 1644, 1645, 1646, 1313, 0, 0, 0,
	0, 0, 1638, 1639, 1640, 1641, 1642, 1643, 0, 0,
	0, 145, 0, 0, 926, 0, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 150, 1318, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	929, 0, 0, 0, 3123, 3124, 0, 0, 0, 0,
	1303, 944, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	926, 926, 0, 0, 0, 206, 0, 1308, 0, 0,
	3168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 3190, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 173, 0, 0, 157, 186, 0, 0, 0,
	0, 0, 1310, 0, 0, 0, 3209, 160, 1309, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 0, 929, 929, 0, 164, 0, 200, 179,
	0, 0, 0, 0, 144, 0, 0, 0, 945, 0,
	945, 945, 152, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 1311, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 156,
	0, 167, 944, 166, 148, 0, 0, 0, 0, 1338,
	0, 0, 1339, 0, 147, 0, 1340, 0, 0, 0,
	0, 171, 0, 170, 929, 926, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 1315,
	0, 945, 944, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 1330, 0, 1317, 1316, 1344, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 184, 3352, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 185, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 1306, 0, 0, 0, 1041, 926, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 926, 926, 0, 0,
	0, 0, 0, 0, 3404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	190, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 192, 0, 0, 196, 0, 193,
	0, 0, 0, 0, 175, 0, 0, 194, 0, 0,
	0, 0, 0, 944, 0, 944, 944, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 201, 0, 929, 0, 0, 203,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 204,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 926,
	926, 0, 0, 3627, 0, 3630, 3631, 0, 0, 0,
	3635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 3722, 3723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3957, 0,
	3958, 0, 0, 0, 0, 3963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4404, 4405, 4406, 4407, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2190, 264, 2196, 281, 815, 2206, 330, 367, 582, 2193,
	2238, 427, 2243, 480, 484, 2267, 573, 2200, 2203, 2213,
	2216, 338, 2221, 820, 2229, 826, 2239, 832, 2258, 549,
	2264, 822, 823, 828, 269, 657, 572, 643, 2252, 2198,
	2256, 434, 2249, 2225, 2265, 2242, 2254, 2235, 2240, 277,
	2227, 2228, 2232, 2241, 824, 821, 825, 831, 819, 829,
	816, 827, 2262, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 2197, 2215, 383, 553, 318, 407, 2248,
	297, 440, 2261, 529, 404, 2255, 512, 532, 2217, 424,
	303, 463, 519, 520, 813, 818, 2205, 834, 2192, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 2223,
	415, 472, 629, 2195, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 4548, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 2263,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 2191, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 2207, 2208,
	2209, 817, 2210, 2211, 2212, 310, 311, 312, 313, 314,
	315, 2214, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 2218, 333, 335, 2219, 336, 339, 2220, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 2222,
	349, 350, 352, 2224, 355, 356, 357, 358, 359, 2226,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	2230, 380, 381, 382, 384, 2231, 385, 386, 389, 390,
	391, 392, 2233, 394, 602, 2234, 395, 396, 397, 2236,
	2237, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 2245, 451, 452, 453, 612, 454, 455, 456, 457,
	2246, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 2247, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 2250, 506, 616, 507, 508, 509, 510,
	511, 2251, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 2253, 530, 531, 833,
	533, 534, 535, 536, 537, 2257, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 2259,
	2260, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 2266, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 2244, 2194,
	2199, 2201, 2202, 2204, 0, 0, 0, 0, 0, 0,
	0, 1566, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4807, 0, 2183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1668,
	0, 0, 0, 0, 0, 0, 1665, 0, 0, 1635,
	0, 0, 5044, 1647, 1648, 1649, 1679, 1681, 1663, 1708,
	1729, 0, 1780, 1826, 1796, 1651, 1913, 1919, 1652, 1980,
	1984, 0, 1660, 1710, 1636, 1760, 1775, 1790, 1802, 1655,
	1661, 1653, 1917, 1656, 2061, 2072, 2092, 1657, 1658, 1659,
	1637, 2053, 2110, 1879, 2038, 1690, 0, 1666, 2004, 0,
	0, 1927, 2042, 5090, 0, 1704, 0, 0, 0, 0,
	1852, 1841, 1875, 1988, 1813, 1933, 1741, 1900, 2078, 1970,
	1889, 2084, 2002, 1703, 1769, 1753, 1805, 1870, 2011, 1686,
	1770, 1845, 2076, 1765, 1891, 0, 1732, 1935, 2077, 2040,
	1888, 2051, 2021, 2046, 1776, 1914, 1739, 1961, 2028, 2029,
	1699, 1812, 1734, 2087, 1684, 1744, 1752, 1922, 1723, 1930,
	2108, 1862, 1995, 1945, 1943, 0, 1902, 1971, 2103, 0,
	0, 1789, 0, 1783, 1921, 2095, 1730, 2069, 1964, 1926,
	1864, 1998, 2033, 1785, 1766, 1767, 1823, 1963, 1808, 1742,
	2083, 1859, 1863, 1861, 1857, 1854, 1858, 1855, 1856, 1860,
	1810, 1853, 0, 0, 1700, 1920, 1848, 2018, 1698, 1967,
	1806, 1779, 0, 0, 0, 2085, 1899, 1901, 0, 2054,
	1849, 1847, 1758, 1757, 1701, 2086, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1680, 1682, 1683, 1687, 1688,
	1689, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1705, 1706,
	1707, 1709, 1712, 1713, 1714, 1716, 1717, 1718, 1719, 1720,
	1721, 1724, 1725, 1726, 1727, 1728, 1731, 1733, 1735, 1736,
	1737, 1738, 1740, 1743, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1754, 1755, 0, 1756, 1759, 1761, 1762, 1763, 1764,
	1768, 1771, 1772, 1773, 1774, 1777, 1778, 1781, 1782, 1784,
	1786, 1787, 1788, 1791, 0, 1792, 1793, 1794, 1795, 1797,
	1798, 1799, 1800, 1801, 1803, 0, 0, 1804, 1807, 1809,
	1811, 1814, 1815, 1816, 1817, 0, 1818, 1819, 1820, 1821,
	1822, 1824, 0, 1825, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1843, 1844,
	1846, 0, 1850, 1851, 1866, 1867, 1868, 1869, 1871, 1873,
	1874, 1872, 1876, 1877, 1878, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1890, 1892, 1893, 0, 1894, 1895, 0,
	1896, 1897, 1898, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1915, 1916, 1918, 1932, 1934, 0, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1944, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1962, 1965, 1966, 1968, 1969, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1981, 1982, 1983, 1985, 1986,
	1987, 1989, 1990, 1991, 1992, 1993, 1994, 1996, 1997, 1999,
	2000, 2001, 0, 2003, 2005, 2006, 2007, 2008, 2009, 2010,
	2013, 2012, 2014, 2015, 2016, 2017, 2019, 2020, 2022, 2023,
	2024, 2025, 2026, 2027, 2030, 2031, 2032, 2034, 2035, 2036,
	2037, 2039, 2041, 2043, 2045, 2044, 2047, 2048, 2049, 2050,
	2052, 2055, 2056, 2057, 2058, 2059, 2060, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2070, 0, 2071, 2073, 2074, 2075,
	2079, 2080, 2081, 2082, 2088, 2089, 2090, 2091, 2093, 0,
	0, 2094, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2104,
	2105, 2106, 2107, 0, 2109, 1842, 1931, 1925, 1865, 1923,
	1924, 1928, 1929, 0, 0, 1685, 1702, 1711, 1715, 1722,
	0, 1654, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 1645, 1646, 0, 0, 0, 0, 0, 0, 1638,
	1639, 1640, 1641, 1642, 1643, 2185, 0, 5518, 989, 0,
	0, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	0, 0, 2190, 264, 2196, 281, 815, 2206, 330, 367,
	582, 2193, 2238, 427, 2243, 480, 484, 2267, 573, 2200,
	2203, 2213, 2216, 338, 2221, 820, 2229, 826, 2239, 832,
	2258, 549, 2264, 822, 823, 828, 269, 657, 572, 643,
	2252, 2198, 2256, 434, 2249, 2225, 2265, 2242, 2254, 2235,
	2240, 277, 2227, 2228, 2232, 2241, 824, 821, 825, 831,
	819, 829, 816, 827, 2262, 471, 405, 622, 498, 276,
	322, 309, 351, 393, 505, 2197, 2215, 383, 553, 318,
	407, 2248, 297, 440, 2261, 529, 404, 2255, 512, 532,
	2217, 424, 303, 463, 519, 520, 813, 818, 2205, 834,
	2192, 307, 308, 429, 289, 437, 634, 600, 492, 450,
	448, 2223, 415, 472, 629, 2195, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 597, 601, 599,
	595, 592, 596, 593, 594, 598, 354, 591, 0, 566,
	575, 609, 589, 617, 574, 614, 584, 329, 613, 578,
	577, 623, 604, 605, 559, 619, 590, 588, 581, 580,
	576, 2263, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 2191, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 579, 814, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	2207, 2208, 2209, 817, 2210, 2211, 2212, 310, 311, 312,
	313, 314, 315, 2214, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 2218, 333, 335, 2219, 336, 339,
	2220, 340, 341, 342, 343, 344, 345, 346, 347, 583,
	348, 2222, 349, 350, 352, 2224, 355, 356, 357, 358,
	359, 2226, 360, 585, 586, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 2230, 380, 381, 382, 384, 2231, 385, 386,
	389, 390, 391, 392, 2233, 394, 602, 2234, 395, 396,
	397, 2236, 2237, 398, 399, 400, 401, 402, 403, 406,
	603, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 606, 607, 423, 425,
	426, 608, 610, 611, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 2245, 451, 452, 453, 612, 454, 455,
	456, 457, 2246, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 2247, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 615, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 2250, 506, 616, 507, 508,
	509, 510, 511, 2251, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 618, 527, 528, 2253, 530,
	531, 833, 533, 534, 535, 536, 537, 2257, 656, 538,
	620, 539, 621, 540, 541, 542, 543, 544, 545, 546,
	548, 2259, 2260, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 2266, 565, 567, 569, 647,
	624, 625, 626, 627, 628, 630, 631, 632, 633, 570,
	571, 587, 438, 432, 388, 430, 431, 435, 436, 439,
	2244, 2194, 2199, 2201, 2202, 2204, 2185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2190, 264, 2196, 281, 815, 2206, 330,
	367, 582, 2193, 2238, 427, 2243, 480, 484, 2267, 573,
	2200, 2203, 2213, 2216, 338, 2221, 820, 2229, 826, 2239,
	832, 2258, 549, 2264, 822, 823, 828, 269, 657, 572,
	643, 2252, 2198, 2256, 434, 2249, 2225, 2265, 2242, 2254,
	2235, 2240, 277, 2227, 2228, 2232, 2241, 824, 821, 825,
	831, 819, 829, 816, 827, 2262, 471, 405, 622, 498,
	276, 322, 309, 351, 393, 505, 2197, 2215, 383, 553,
	318, 407, 2248, 297, 440, 2261, 529, 404, 2255, 512,
	532, 2217, 424, 303, 463, 519, 520, 813, 818, 2205,
	834, 2192, 307, 308, 429, 289, 437, 634, 600, 492,
	450, 448, 2223, 415, 472, 629, 2195, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 597, 601,
	599, 595, 592, 596, 593, 594, 598, 354, 591, 0,
	566, 575, 609, 589, 617, 574, 614, 584, 329, 613,
	578, 577, 623, 604, 605, 559, 619, 590, 588, 581,
	580, 576, 2263, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 2191, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 579, 814, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 2207, 2208, 2209, 817, 2210, 2211, 2212, 310, 311,
	312, 313, 314, 315, 2214, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 2218, 333, 335, 2219, 336,
	339, 2220, 340, 341, 342, 343, 344, 345, 346, 347,
	583, 348, 2222, 349, 350, 352, 2224, 355, 356, 357,
	358, 359, 2226, 360, 585, 586, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 2230, 380, 381, 382, 384, 2231, 385,
	386, 389, 390, 391, 392, 2233, 394, 602, 2234, 395,
	396, 397, 2236, 2237, 398, 399, 400, 401, 402, 403,
	406, 603, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 606, 607, 423,
	425, 426, 608, 610, 611, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 2245, 451, 452, 453, 612, 454,
	455, 456, 457, 2246, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 2247, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 615, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 2250, 506, 616, 507,
	508, 509, 510, 511, 2251, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 618, 527, 528, 2253,
	530, 531, 833, 533, 534, 535, 536, 537, 2257, 656,
	538, 620, 539, 621, 540, 541, 542, 543, 544, 545,
	546, 548, 2259, 2260, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 2266, 565, 567, 569,
	647, 624, 625, 626, 627, 628, 630, 631, 632, 633,
	570, 571, 587, 438, 432, 388, 430, 431, 435, 436,
	439, 2244, 2194, 2199, 2201, 2202, 2204, 2185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2190, 264, 2196, 281, 815, 2206,
	3182, 367, 582, 2193, 2238, 427, 2243, 480, 484, 2267,
	573, 2200, 2203, 2213, 2216, 338, 2221, 820, 2229, 826,
	2239, 832, 2258, 549, 2264, 822, 823, 828, 269, 657,
	572, 643, 2252, 2198, 2256, 434, 2249, 2225, 2265, 2242,
	2254, 2235, 2240, 277, 2227, 2228, 2232, 2241, 824, 821,
	825, 831, 819, 829, 816, 827, 2262, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 3180, 2197, 2215, 383,
	553, 318, 407, 2248, 297, 440, 2261, 529, 404, 2255,
	512, 532, 2217, 424, 303, 463, 519, 520, 813, 818,
	2205, 834, 2192, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 2223, 415, 472, 629, 2195, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 2263, 254, 255, 256, 257, 258, 3181,
	260, 261, 262, 263, 265, 2191, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 814, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 2207, 2208, 2209, 817, 2210, 2211, 2212, 310,
	311, 312, 313, 314, 315, 2214, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 2218, 333, 335, 2219,
	336, 339, 2220, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 2222, 349, 350, 352, 2224, 355, 356,
	357, 358, 359, 2226, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 2230, 380, 381, 382, 384, 2231,
	385, 386, 389, 390, 391, 392, 2233, 394, 602, 2234,
	395, 396, 397, 2236, 2237, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 2245, 451, 452, 453, 612,
	454, 455, 456, 457, 2246, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 2247, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 2250, 506, 616,
	507, 508, 509, 510, 511, 2251, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	2253, 530, 531, 833, 533, 534, 535, 536, 537, 2257,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 2259, 2260, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 2266, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 2244, 2194, 2199, 2201, 2202, 2204, 948, 0,
	1525, 989, 0, 0, 0, 777, 1124, 0, 0, 0,
	0, 0, 788, 789, 790, 2190, 264, 2196, 281, 815,
	2206, 330, 367, 0, 2193, 2238, 427, 2243, 480, 484,
	2267, 0, 2200, 2203, 2213, 2216, 338, 2221, 820, 2229,
	826, 2239, 832, 2258, 549, 2264, 822, 823, 828, 269,
	947, 572, 643, 2252, 2198, 2256, 3697, 2249, 2225, 2265,
	2242, 2254, 2235, 2240, 277, 2227, 2228, 2232, 2241, 824,
	821, 825, 831, 819, 829, 816, 827, 2262, 471, 405,
	0, 498, 276, 322, 309, 351, 393, 505, 2197, 2215,
	383, 553, 318, 407, 2248, 297, 440, 2261, 529, 404,
	2255, 512, 532, 2217, 424, 303, 463, 519, 520, 813,
	818, 2205, 834, 2192, 307, 308, 429, 289, 437, 0,
	0, 492, 450, 448, 2223, 415, 472, 0, 2195, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 566, 950, 940, 932, 933, 934, 935, 936,
	937, 0, 952, 953, 954, 955, 956, 559, 946, 0,
	931, 938, 939, 941, 2263, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 2191, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 0, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 2207, 2208, 2209, 817, 2210, 2211, 2212,
	310, 311, 312, 313, 314, 315, 2214, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 2218, 333, 335,
	2219, 336, 339, 2220, 340, 341, 342, 343, 344, 345,
	346, 347, 0, 348, 2222, 349, 350, 352, 2224, 355,
	356, 357, 358, 359, 2226, 360, 0, 0, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 2230, 380, 381, 382, 384,
	2231, 385, 386, 389, 390, 391, 392, 2233, 394, 0,
	2234, 395, 396, 397, 2236, 2237, 398, 399, 400, 401,
	402, 403, 406, 0, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 3696,
	0, 423, 425, 426, 0, 0, 0, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 2245, 451, 452, 453,
	0, 454, 455, 456, 457, 2246, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 2247, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 0, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 2250, 506,
	2503, 507, 508, 509, 510, 511, 2251, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 0, 527,
	528, 2253, 530, 531, 833, 533, 534, 535, 536, 537,
	2257, 656, 538, 0, 539, 0, 540, 541, 542, 543,
	544, 545, 546, 548, 2259, 2260, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 2266, 565,
	567, 569, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 571, 0, 438, 432, 388, 430, 431,
	435, 436, 439, 2244, 2194, 2199, 2201, 2202, 2204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 785,
	786, 787, 0, 0, 0, 0, 0, 0, 3698, 3699,
	781, 782, 783, 784, 948, 0, 1525, 989, 0, 0,
	0, 777, 1124, 0, 0, 0, 0, 0, 788, 789,
	790, 2190, 264, 2196, 281, 815, 2206, 330, 367, 0,
	2193, 2238, 427, 2243, 480, 484, 2267, 0, 2200, 2203,
	2213, 2216, 338, 2221, 820, 2229, 826, 2239, 832, 2258,
	549, 2264, 822, 823, 828, 269, 947, 572, 643, 2252,
	2198, 2256, 3697, 2249, 2225, 2265, 2242, 2254, 2235, 2240,
	277, 2227, 2228, 2232, 2241, 824, 821, 825, 831, 819,
	829, 816, 827, 2262, 471, 405, 0, 498, 276, 322,
	309, 351, 393, 505, 2197, 2215, 383, 553, 318, 407,
	2248, 297, 440, 2261, 529, 404, 2255, 512, 532, 2217,
	424, 303, 463, 519, 520, 813, 818, 2205, 834, 2192,
	307, 308, 429, 289, 437, 0, 0, 492, 450, 448,
	2223, 415, 472, 0, 2195, 0, 337, 0, 332, 428,
	568, 295, 547, 466, 433, 387, 495, 524, 334, 319,
	320, 363, 465, 353, 305, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 566, 950,
	940, 932, 933, 934, 935, 936, 937, 0, 952, 953,
	954, 955, 956, 559, 946, 0, 931, 938, 939, 941,
	2263, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 265, 2191, 266, 267, 268, 270, 271, 272, 812,
	273, 274, 275, 278, 279, 280, 282, 642, 283, 284,
	285, 286, 287, 288, 0, 814, 290, 291, 292, 293,
	294, 296, 298, 299, 300, 301, 302, 304, 306, 2207,
	2208, 2209, 817, 2210, 2211, 2212, 310, 311, 312, 313,
	314, 315, 2214, 316, 317, 321, 323, 324, 325, 326,
	327, 328, 331, 2218, 333, 335, 2219, 336, 339, 2220,
	340, 341, 342, 343, 344, 345, 346, 347, 0, 348,
	2222, 349, 350, 352, 2224, 355, 356, 357, 358, 359,
	2226, 360, 0, 0, 361, 362, 364, 365, 366, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 2230, 380, 381, 382, 384, 2231, 385, 386, 389,
	390, 391, 392, 2233, 394, 0, 2234, 395, 396, 397,
	2236, 2237, 398, 399, 400, 401, 402, 403, 406, 0,
	408, 409, 410, 411, 412, 413, 414, 644, 416, 417,
	418, 419, 420, 421, 422, 4358, 0, 423, 425, 426,
	0, 0, 0, 830, 441, 442, 443, 444, 445, 446,
	447, 449, 2245, 451, 452, 453, 0, 454, 455, 456,
	457, 2246, 458, 459, 460, 461, 462, 464, 467, 468,
	469, 470, 2247, 473, 474, 475, 476, 477, 478, 479,
	481, 482, 483, 485, 486, 487, 645, 488, 489, 490,
	491, 0, 493, 494, 646, 496, 497, 499, 500, 501,
	502, 503, 504, 655, 2250, 506, 2503, 507, 508, 509,
	510, 511, 2251, 513, 514, 515, 516, 517, 518, 521,
	522, 523, 525, 526, 0, 527, 528, 2253, 530, 531,
	833, 533, 534, 535, 536, 537, 2257, 656, 538, 0,
	539, 0, 540, 541, 542, 543, 544, 545, 546, 548,
	2259, 2260, 550, 551, 552, 554, 555, 556, 557, 560,
	561, 562, 563, 564, 2266, 565, 567, 569, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 571,
	0, 438, 432, 388, 430, 431, 435, 436, 439, 2244,
	2194, 2199, 2201, 2202, 2204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 785, 786, 787, 0, 0,
	0, 0, 0, 0, 3698, 3699, 781, 782, 783, 784,
	872, 0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095,
	0, 0, 0, 0, 0, 0, 0, 2830, 264, 0,
	281, 815, 0, 330, 367, 1100, 0, 1088, 427, 0,
	480, 484, 0, 573, 1120, 0, 1092, 2831, 338, 1113,
	820, 0, 826, 1114, 832, 1112, 549, 0, 822, 823,
	828, 269, 1190, 572, 643, 0, 0, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 1143,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 307, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	1101, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172,
	1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175,
	1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559,
	1191, 1130, 1183, 1181, 1180, 1177, 2829, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	1155, 1133, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135,
	1136, 1140, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 1147, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 1156, 1104,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 1157, 0, 395, 396, 397, 1137, 1138, 398, 399,
	400, 401, 402, 403, 406, 1170, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 1148, 423, 425, 426, 1154, 610, 1149, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 1150, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 1107, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	1141, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	1151, 527, 528, 1142, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 1152, 539, 1153, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 1091, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 1158, 1159, 1162, 1160,
	1161, 1163, 1164, 1174, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 0, 1146, 0,
	0, 0, 1089, 0, 0, 872, 0, 1110, 989, 0,
	1115, 1116, 1105, 1124, 1095, 0, 0, 1096, 2827, 0,
	1085, 1086, 2828, 264, 0, 281, 815, 0, 330, 367,
	1100, 0, 1088, 427, 0, 480, 484, 125, 573, 1120,
	0, 1092, 0, 338, 1113, 820, 0, 826, 1114, 832,
	1112, 549, 0, 822, 823, 828, 269, 1190, 572, 643,
	0, 0, 0, 1106, 122, 0, 0, 0, 123, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 1030, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 1143, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 634, 600, 492, 450,
	448, 0, 415, 472, 629, 1101, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 1171, 1173, 1169,
	1165, 1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566,
	1176, 1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179,
	1178, 1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180,
	1177, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 1155, 1133, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 1147,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 1156, 1104, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 1157, 0, 395, 396,
	397, 1137, 1138, 398, 399, 400, 401, 402, 403, 406,
	1170, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 606, 1148, 423, 425,
	426, 1154, 610, 1149, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 1150, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 1107, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 1141, 506, 616, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 1151, 527, 528, 1142, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	1152, 539, 1153, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 1091, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	624, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570,
	571, 587, 438, 432, 388, 430, 431, 435, 436, 439,
	0, 0, 0, 1146, 0, 0, 0, 1089, 0, 126,
	872, 0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095,
	0, 0, 1096, 5125, 0, 1085, 1086, 0, 264, 0,
	281, 815, 0, 330, 367, 1100, 0, 1088, 427, 0,
	480, 484, 125, 573, 1120, 0, 1092, 0, 338, 1113,
	820, 0, 826, 1114, 832, 1112, 549, 0, 822, 823,
	828, 269, 1190, 572, 643, 0, 0, 0, 1106, 122,
	0, 0, 0, 123, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 1030, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 2914, 297, 440, 1143,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 307, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	1101, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172,
	1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175,
	1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559,
	1191, 1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	1155, 1133, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135,
	1136, 1140, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 1147, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 1156, 1104,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 1157, 0, 395, 396, 397, 1137, 1138, 398, 399,
	400, 401, 402, 403, 406, 1170, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 1148, 423, 425, 426, 1154, 610, 1149, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 1150, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 1107, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	1141, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	1151, 527, 528, 1142, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 1152, 539, 1153, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 1091, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 1158, 1159, 1162, 1160,
	1161, 1163, 1164, 1174, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 0, 1146, 0,
	0, 0, 1089, 0, 126, 872, 0, 1110, 989, 0,
	1115, 1116, 1105, 1124, 1095, 0, 0, 1096, 0, 0,
	1085, 1086, 0, 264, 0, 281, 815, 0, 330, 367,
	1100, 0, 1088, 427, 0, 480, 484, 125, 573, 1120,
	0, 1092, 0, 338, 1113, 820, 0, 826, 1114, 832,
	1112, 549, 0, 822, 823, 828, 269, 1190, 572, 643,
	0, 0, 0, 1106, 122, 0, 0, 0, 123, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 1030, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 1143, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 634, 600, 492, 450,
	448, 0, 415, 472, 629, 1101, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 1171, 1173, 1169,
	1165, 1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566,
	1176, 1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179,
	1178, 1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180,
	1177, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 1155, 1133, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 1147,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 1156, 1104, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 1157, 0, 395, 396,
	397, 1137, 1138, 398, 399, 400, 401, 402, 403, 406,
	1170, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 606, 1148, 423, 425,
	426, 1154, 610, 1149, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 1150, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 1107, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 1141, 506, 616, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 1151, 527, 528, 1142, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	1152, 539, 1153, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 1091, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	624, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570,
	571, 587, 438, 432, 388, 430, 431, 435, 436, 439,
	0, 0, 0, 1146, 0, 0, 0, 1089, 0, 126,
	872, 0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095,
	0, 0, 1096, 0, 0, 1085, 1086, 0, 264, 0,
	281, 815, 0, 330, 367, 1100, 0, 1088, 427, 0,
	480, 484, 0, 573, 1120, 0, 1092, 0, 338, 1113,
	820, 0, 826, 1114, 832, 1112, 549, 0, 822, 823,
	828, 269, 1190, 572, 643, 0, 0, 0, 1106, 0,
	2895, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 1143,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 307, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	1101, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172,
	1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175,
	1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559,
	1191, 1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	1155, 1133, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135,
	1136, 1140, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 1147, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 1156, 1104,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 1157, 2891, 395, 396, 397, 1137, 1138, 398, 399,
	400, 401, 402, 403, 406, 1170, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 1148, 423, 425, 426, 1154, 610, 1149, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 1150, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 1107, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	1141, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	1151, 527, 528, 1142, 530, 531, 833, 533, 534, 535,
	536, 537, 2892, 656, 538, 1152, 539, 1153, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 1091, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 1158, 1159, 1162, 1160,
	1161, 1163, 1164, 1174, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 2890, 1146, 0,
	0, 0, 1089, 0, 872, 0, 1110, 989, 0, 1115,
	1116, 1105, 1124, 1095, 0, 0, 0, 1096, 0, 0,
	1085, 1086, 264, 0, 281, 815, 0, 330, 367, 1100,
	0, 1088, 427, 0, 480, 484, 0, 573, 1120, 0,
	1092, 0, 338, 1113, 820, 0, 826, 1114, 832, 1112,
	549, 0, 822, 823, 828, 269, 1190, 572, 643, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 824, 821, 825, 831, 819,
	829, 816, 827, 0, 471, 405, 622, 498, 276, 322,
	309, 351, 393, 505, 0, 0, 383, 553, 318, 407,
	0, 297, 440, 1143, 529, 404, 0, 512, 532, 0,
	424, 303, 463, 519, 520, 813, 818, 0, 834, 0,
	307, 308, 429, 289, 437, 634, 600, 492, 450, 448,
	0, 415, 472, 629, 1101, 0, 337, 0, 332, 428,
	568, 295, 547, 466, 433, 387, 495, 524, 334, 319,
	320, 363, 465, 353, 305, 558, 1171, 1173, 1169, 1165,
	1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566, 1176,
	1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179, 1178,
	1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180, 1177,
	0, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 265, 0, 266, 267, 268, 270, 271, 272, 812,
	273, 274, 275, 278, 279, 280, 282, 642, 283, 284,
	285, 286, 287, 288, 1155, 1133, 290, 291, 292, 293,
	294, 296, 298, 299, 300, 301, 302, 304, 306, 1144,
	1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313,
	314, 315, 0, 316, 317, 321, 323, 324, 325, 326,
	327, 328, 331, 0, 333, 335, 0, 336, 339, 0,
	340, 341, 342, 343, 344, 345, 346, 347, 1147, 348,
	0, 349, 350, 352, 0, 355, 356, 357, 358, 359,
	0, 360, 1156, 1104, 361, 362, 364, 365, 366, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 382, 384, 0, 385, 386, 389,
	390, 391, 392, 0, 394, 1157, 0, 395, 396, 397,
	1137, 1138, 398, 399, 400, 401, 402, 403, 406, 1170,
	408, 409, 410, 411, 412, 413, 414, 644, 416, 417,
	418, 419, 420, 421, 422, 606, 1148, 423, 425, 426,
	1154, 610, 1149, 830, 441, 442, 443, 444, 445, 446,
	447, 449, 0, 451, 452, 453, 1150, 454, 455, 456,
	457, 0, 458, 459, 460, 461, 462, 464, 467, 468,
	469, 470, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 482, 483, 485, 486, 487, 645, 488, 489, 490,
	491, 1107, 493, 494, 646, 496, 497, 499, 500, 501,
	502, 503, 504, 655, 1141, 506, 616, 507, 508, 509,
	510, 511, 0, 513, 514, 515, 516, 517, 518, 521,
	522, 523, 525, 526, 1151, 527, 528, 1142, 530, 531,
	833, 533, 534, 535, 536, 537, 0, 656, 538, 1152,
	539, 1153, 540, 541, 542, 543, 544, 545, 546, 548,
	0, 1091, 550, 551, 552, 554, 555, 556, 557, 560,
	561, 562, 563, 564, 0, 565, 567, 569, 647, 624,
	1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571,
	587, 438, 432, 388, 430, 431, 435, 436, 439, 0,
	0, 0, 1146, 0, 0, 0, 1089, 0, 0, 872,
	0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095, 0,
	0, 1096, 0, 0, 1085, 1086, 1083, 264, 0, 281,
	815, 0, 330, 367, 1100, 0, 1088, 427, 0, 480,
	484, 0, 573, 1120, 0, 1092, 0, 338, 1113, 820,
	0, 826, 1114, 832, 1112, 549, 0, 822, 823, 828,
	269, 1190, 572, 643, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	824, 821, 825, 831, 819, 829, 816, 827, 0, 471,
	405, 622, 498, 276, 322, 309, 351, 393, 505, 0,
	0, 383, 553, 318, 407, 0, 297, 440, 1143, 529,
	404, 0, 512, 532, 0, 424, 303, 463, 519, 520,
	813, 818, 0, 834, 0, 307, 308, 429, 289, 437,
	634, 600, 492, 450, 448, 0, 415, 472, 629, 1101,
	0, 337, 0, 332, 428, 568, 295, 547, 466, 433,
	387, 495, 524, 334, 319, 320, 363, 465, 353, 305,
	558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168,
	354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188,
	1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191,
	1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 265, 0, 266, 267,
	268, 270, 271, 272, 812, 273, 274, 275, 278, 279,
	280, 282, 642, 283, 284, 285, 286, 287, 288, 1155,
	1133, 290, 291, 292, 293, 294, 296, 298, 299, 300,
	301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136,
	1140, 310, 311, 312, 313, 314, 315, 0, 316, 317,
	321, 323, 324, 325, 326, 327, 328, 331, 0, 333,
	335, 0, 336, 339, 0, 340, 341, 342, 343, 344,
	345, 346, 347, 1147, 348, 0, 349, 350, 352, 0,
	355, 356, 357, 358, 359, 0, 360, 1156, 1104, 361,
	362, 364, 365, 366, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 382,
	384, 0, 385, 386, 389, 390, 391, 392, 0, 394,
	1157, 0, 395, 396, 397, 1137, 1138, 398, 399, 400,
	401, 402, 403, 406, 1170, 408, 409, 410, 411, 412,
	413, 414, 644, 416, 417, 418, 419, 420, 421, 422,
	606, 1148, 423, 425, 426, 1154, 610, 1149, 830, 441,
	442, 443, 444, 445, 446, 447, 449, 0, 451, 452,
	453, 1150, 454, 455, 456, 457, 0, 458, 459, 460,
	461, 462, 464, 467, 468, 469, 470, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 482, 483, 485, 486,
	487, 645, 488, 489, 490, 491, 1107, 493, 494, 646,
	496, 497, 499, 500, 501, 502, 503, 504, 655, 1141,
	506, 616, 507, 508, 509, 510, 511, 0, 513, 514,
	515, 516, 517, 518, 521, 522, 523, 525, 526, 1151,
	527, 528, 1142, 530, 531, 833, 533, 534, 535, 536,
	537, 0, 656, 538, 1152, 539, 1153, 540, 541, 542,
	543, 544, 545, 546, 548, 0, 1091, 550, 551, 552,
	554, 555, 556, 557, 560, 561, 562, 563, 564, 0,
	565, 567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161,
	1163, 1164, 1174, 570, 571, 587, 438, 432, 388, 430,
	431, 435, 436, 439, 0, 0, 0, 1146, 0, 0,
	0, 1089, 0, 872, 0, 1110, 989, 0, 1115, 1116,
	1105, 1124, 1095, 0, 2127, 2820, 1096, 0, 0, 1085,
	1086, 264, 0, 281, 815, 0, 330, 367, 1100, 0,
	1088, 427, 0, 480, 484, 0, 573, 1120, 0, 1092,
	0, 338, 1113, 820, 0, 826, 1114, 832, 1112, 549,
	0, 822, 823, 828, 269, 1190, 572, 643, 0, 0,
	2781, 1106, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 1143, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 1101, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166,
	1131, 1132, 1172, 1168, 354, 1167, 0, 566, 1176, 1187,
	1184, 1189, 1175, 1188, 1182, 937, 613, 1179, 1178, 1192,
	1185, 1186, 559, 1191, 1130, 1183, 1181, 1180, 1177, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 1155, 1133, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 1144, 1134,
	1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 1147, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 1156, 1104, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 1157, 0, 395, 396, 397, 1137,
	1138, 398, 399, 400, 401, 402, 403, 406, 1170, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 1148, 423, 425, 426, 1154,
	610, 1149, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 1150, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	1107, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 1141, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 1151, 527, 528, 1142, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 1152, 539,
	1153, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	1091, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 1158,
	1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 0, 0,
	0, 1146, 0, 0, 0, 1089, 0, 872, 0, 1110,
	989, 0, 1115, 1116, 1105, 1124, 1095, 0, 0, 0,
	1096, 0, 0, 1085, 1086, 264, 0, 281, 815, 0,
	330, 367, 1100, 0, 1088, 427, 0, 480, 484, 0,
	573, 1120, 0, 1092, 0, 338, 1113, 820, 0, 826,
	1114, 832, 1112, 549, 0, 822, 823, 828, 269, 1190,
	572, 643, 0, 0, 0, 1106, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 824, 821,
	825, 831, 819, 829, 816, 827, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 1143, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 813, 818,
	0, 834, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 1101, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 1171,
	1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354, 1167,
	0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182, 937,
	613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130, 1183,
	1181, 1180, 1177, 3990, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 1155, 1133, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 1147, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 1156, 1104, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 1157, 0,
	395, 396, 397, 1137, 1138, 398, 399, 400, 401, 402,
	403, 406, 1170, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 1148,
	423, 425, 426, 1154, 610, 1149, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 1150,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 1107, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 1141, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 1151, 527, 528,
	1142, 530, 531, 833, 533, 534, 535, 536, 537, 0,
	656, 538, 1152, 539, 1153, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 1091, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163, 1164,
	1174, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 0, 0, 0, 1146, 0, 0, 0, 1089,
	0, 872, 0, 1110, 989, 0, 1115, 1116, 1105, 1124,
	1095, 0, 0, 0, 1096, 0, 0, 1085, 1086, 264,
	0, 281, 815, 0, 330, 367, 1100, 0, 1088, 427,
	0, 480, 484, 0, 573, 1120, 0, 1092, 0, 338,
	1113, 820, 0, 826, 1114, 832, 1112, 549, 0, 822,
	823, 828, 269, 1190, 572, 643, 0, 0, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 824, 821, 825, 831, 819, 829, 816, 827,
	0, 471, 405, 622, 498, 276, 322, 309, 351, 393,
	505, 0, 0, 383, 553, 318, 407, 0, 297, 440,
	1143, 529, 404, 0, 512, 532, 0, 424, 303, 463,
	519, 520, 813, 818, 0, 834, 0, 307, 308, 429,
	289, 437, 634, 600, 492, 450, 448, 0, 415, 472,
	629, 1101, 0, 337, 0, 332, 428, 568, 295, 547,
	466, 433, 387, 495, 524, 334, 319, 320, 363, 465,
	353, 305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132,
	1172, 1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189,
	1175, 1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186,
	559, 1191, 1130, 1183, 1181, 1180, 1177, 0, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 265, 0,
	266, 267, 268, 270, 271, 272, 812, 273, 274, 275,
	278, 279, 280, 282, 642, 283, 284, 285, 286, 287,
	288, 1155, 1133, 290, 291, 292, 293, 294, 296, 298,
	299, 300, 301, 302, 304, 306, 1144, 1134, 1139, 1145,
	1135, 1136, 1140, 310, 311, 312, 313, 314, 315, 0,
	316, 317, 321, 323, 324, 325, 326, 327, 328, 331,
	0, 333, 335, 0, 336, 339, 0, 340, 341, 342,
	343, 344, 345, 346, 347, 1147, 348, 0, 349, 350,
	352, 0, 355, 356, 357, 358, 359, 0, 360, 1156,
	1104, 361, 362, 364, 365, 366, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 382, 384, 0, 385, 386, 389, 390, 391, 392,
	0, 394, 1157, 0, 395, 396, 397, 1137, 1138, 398,
	399, 400, 401, 402, 403, 406, 1170, 408, 409, 410,
	411, 412, 413, 414, 644, 416, 417, 418, 419, 420,
	421, 422, 606, 1148, 423, 425, 426, 1154, 610, 1149,
	830, 441, 442, 443, 444, 445, 446, 447, 449, 0,
	451, 452, 453, 1150, 454, 455, 456, 457, 0, 458,
	459, 460, 461, 462, 464, 467, 468, 469, 470, 0,
	473, 474, 475, 476, 477, 478, 479, 481, 482, 483,
	485, 486, 487, 645, 488, 489, 490, 491, 1107, 493,
	494, 646, 496, 497, 499, 500, 501, 502, 503, 504,
	655, 1141, 506, 616, 507, 508, 509, 510, 511, 0,
	513, 514, 515, 516, 517, 518, 521, 522, 523, 525,
	526, 1151, 527, 528, 1142, 530, 531, 833, 533, 534,
	535, 536, 537, 0, 656, 538, 1152, 539, 1153, 540,
	541, 542, 543, 544, 545, 546, 548, 0, 1091, 550,
	551, 552, 554, 555, 556, 557, 560, 561, 562, 563,
	564, 0, 565, 567, 569, 647, 624, 1158, 1159, 1162,
	1160, 1161, 1163, 1164, 1174, 570, 571, 587, 438, 432,
	388, 430, 431, 435, 436, 439, 0, 0, 0, 1146,
	0, 0, 0, 1089, 0, 872, 0, 1110, 989, 0,
	1115, 1116, 1105, 1124, 1095, 0, 0, 0, 1096, 3985,
	0, 1085, 1086, 264, 0, 281, 815, 0, 330, 367,
	1100, 0, 1088, 427, 0, 480, 484, 0, 573, 1120,
	0, 1092, 0, 338, 1113, 820, 0, 826, 1114, 832,
	1112, 549, 0, 822, 823, 828, 269, 1190, 572, 643,
	0, 0, 0, 1106, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 622, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 1143, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 634, 600, 492, 450,
	448, 0, 415, 472, 629, 1101, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 1171, 1173, 1169,
	1165, 1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566,
	1176, 1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179,
	1178, 1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180,
	1177, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 1155, 1133, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 1147,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 1156, 1104, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 1157, 0, 395, 396,
	397, 1137, 1138, 398, 399, 400, 401, 402, 403, 406,
	1170, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 606, 1148, 423, 425,
	426, 1154, 610, 1149, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 1150, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 1107, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 1141, 506, 616, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 1151, 527, 528, 1142, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	1152, 539, 1153, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 1091, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	624, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570,
	571, 587, 438, 432, 388, 430, 431, 435, 436, 439,
	0, 0, 0, 1146, 0, 0, 0, 1089, 0, 872,
	0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095, 0,
	0, 0, 1096, 3948, 0, 1085, 1086, 264, 0, 281,
	815, 0, 330, 367, 1100, 0, 1088, 427, 0, 480,
	484, 0, 573, 1120, 0, 1092, 0, 338, 1113, 820,
	0, 826, 1114, 832, 1112, 549, 0, 822, 823, 828,
	269, 1190, 572, 643, 0, 0, 0, 1106, 0, 2895,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	824, 821, 825, 831, 819, 829, 816, 827, 0, 471,
	405, 622, 498, 276, 322, 309, 351, 393, 505, 0,
	0, 383, 553, 318, 407, 0, 297, 440, 1143, 529,
	404, 0, 512, 532, 0, 424, 303, 463, 519, 520,
	813, 818, 0, 834, 0, 307, 308, 429, 289, 437,
	634, 600, 492, 450, 448, 0, 415, 472, 629, 1101,
	0, 337, 0, 332, 428, 568, 295, 547, 466, 433,
	387, 495, 524, 334, 319, 320, 363, 465, 353, 305,
	558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168,
	354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188,
	1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191,
	1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 265, 0, 266, 267,
	268, 270, 271, 272, 812, 273, 274, 275, 278, 279,
	280, 282, 642, 283, 284, 285, 286, 287, 288, 1155,
	1133, 290, 291, 292, 293, 294, 296, 298, 299, 300,
	301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136,
	1140, 310, 311, 312, 313, 314, 315, 0, 316, 317,
	321, 323, 324, 325, 326, 327, 328, 331, 0, 333,
	335, 0, 336, 339, 0, 340, 341, 342, 343, 344,
	345, 346, 347, 1147, 348, 0, 349, 350, 352, 0,
	355, 356, 357, 358, 359, 0, 360, 1156, 1104, 361,
	362, 364, 365, 366, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 382,
	384, 0, 385, 386, 389, 390, 391, 392, 0, 394,
	1157, 0, 395, 396, 397, 1137, 1138, 398, 399, 400,
	401, 402, 403, 406, 1170, 408, 409, 410, 411, 412,
	413, 414, 644, 416, 417, 418, 419, 420, 421, 422,
	606, 1148, 423, 425, 426, 1154, 610, 1149, 830, 441,
	442, 443, 444, 445, 446, 447, 449, 0, 451, 452,
	453, 1150, 454, 455, 456, 457, 0, 458, 459, 460,
	461, 462, 464, 467, 468, 469, 470, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 482, 483, 485, 486,
	487, 645, 488, 489, 490, 491, 1107, 493, 494, 646,
	496, 497, 499, 500, 501, 502, 503, 504, 655, 1141,
	506, 616, 507, 508, 509, 510, 511, 0, 513, 514,
	515, 516, 517, 518, 521, 522, 523, 525, 526, 1151,
	527, 528, 1142, 530, 531, 833, 533, 534, 535, 536,
	537, 0, 656, 538, 1152, 539, 1153, 540, 541, 542,
	543, 544, 545, 546, 548, 0, 1091, 550, 551, 552,
	554, 555, 556, 557, 560, 561, 562, 563, 564, 0,
	565, 567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161,
	1163, 1164, 1174, 570, 571, 587, 438, 432, 388, 430,
	431, 435, 436, 439, 0, 0, 0, 1146, 0, 0,
	0, 1089, 0, 872, 0, 1110, 989, 0, 1115, 1116,
	1105, 1124, 1095, 0, 0, 0, 1096, 0, 0, 1085,
	1086, 264, 0, 281, 815, 0, 330, 367, 1100, 0,
	1088, 427, 0, 480, 484, 0, 573, 1120, 0, 1092,
	0, 338, 1113, 820, 0, 826, 1114, 832, 1112, 549,
	0, 822, 823, 828, 269, 1190, 572, 643, 0, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 2914,
	297, 440, 1143, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 1101, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166,
	1131, 1132, 1172, 1168, 354, 1167, 0, 566, 1176, 1187,
	1184, 1189, 1175, 1188, 1182, 937, 613, 1179, 1178, 1192,
	1185, 1186, 559, 1191, 1130, 1183, 1181, 1180, 1177, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 1155, 1133, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 1144, 1134,
	1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 1147, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 1156, 1104, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 1157, 0, 395, 396, 397, 1137,
	1138, 398, 399, 400, 401, 402, 403, 406, 1170, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 1148, 423, 425, 426, 1154,
	610, 1149, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 1150, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	1107, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 1141, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 1151, 527, 528, 1142, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 1152, 539,
	1153, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	1091, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 1158,
	1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 0, 0,
	0, 1146, 0, 0, 0, 1089, 0, 872, 0, 1110,
	989, 0, 1115, 1116, 1105, 1124, 1095, 0, 0, 0,
	1096, 0, 0, 1085, 1086, 264, 0, 281, 815, 0,
	330, 367, 1100, 0, 1088, 427, 0, 480, 484, 0,
	573, 1120, 0, 1092, 0, 338, 1113, 820, 0, 826,
	1114, 832, 1112, 549, 0, 822, 823, 828, 269, 1190,
	572, 643, 0, 0, 0, 1106, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 824, 821,
	825, 831, 819, 829, 816, 827, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 1143, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 813, 818,
	0, 834, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 1101, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 1171,
	1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354, 1167,
	0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182, 937,
	613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130, 1183,
	1181, 1180, 1177, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 1155, 1133, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 1147, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 1156, 1104, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 1157, 0,
	395, 396, 397, 1137, 1138, 398, 399, 400, 401, 402,
	403, 406, 1170, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 1148,
	423, 425, 426, 1154, 610, 1149, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 1150,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 1107, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 1141, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 1151, 527, 528,
	1142, 530, 531, 833, 533, 534, 535, 536, 537, 0,
	656, 538, 1152, 539, 1153, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 1091, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163, 1164,
	1174, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 0, 0, 0, 1146, 0, 0, 0, 1089,
	0, 0, 872, 0, 1110, 989, 0, 1115, 1116, 1105,
	1124, 1095, 0, 0, 1096, 2825, 0, 1085, 1086, 1612,
	264, 0, 281, 815, 0, 330, 367, 1100, 0, 1088,
	427, 0, 480, 484, 0, 573, 1120, 0, 1092, 0,
	338, 1113, 820, 0, 826, 1114, 832, 1112, 549, 0,
	822, 823, 828, 269, 1190, 572, 643, 0, 0, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 1143, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 1101, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166, 1131,
	1132, 1172, 1168, 354, 1167, 0, 566, 1176, 1187, 1184,
	1189, 1175, 1188, 1182, 937, 613, 1179, 1178, 1192, 1185,
	1186, 559, 1191, 1130, 1183, 1181, 1180, 1177, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 1155, 1133, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 1144, 1134, 1139,
	1145, 1135, 1136, 1140, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 1147, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	1156, 1104, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 1157, 0, 395, 396, 397, 1137, 1138,
	398, 399, 400, 401, 402, 403, 406, 1170, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 1148, 423, 425, 426, 1154, 610,
	1149, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 1150, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 1107,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 1141, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 1151, 527, 528, 1142, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 1152, 539, 1153,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 1091,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 1158, 1159,
	1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 0, 0, 0,
	1146, 0, 0, 0, 1089, 0, 872, 0, 1110, 989,
	0, 1115, 1116, 1105, 1124, 1095, 0, 0, 0, 1096,
	0, 0, 1085, 1086, 264, 0, 281, 815, 0, 330,
	367, 1100, 0, 1088, 427, 0, 480, 484, 0, 573,
	1120, 0, 1092, 0, 338, 1113, 820, 0, 826, 1114,
	832, 1112, 549, 0, 822, 823, 828, 269, 1190, 572,
	643, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 824, 821, 825,
	831, 819, 829, 816, 827, 0, 471, 405, 622, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 1143, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 813, 818, 0,
	834, 0, 307, 308, 429, 289, 437, 634, 600, 492,
	450, 448, 0, 415, 472, 629, 1101, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 1171, 1173,
	1169, 1165, 1166, 1131, 1132, 1172, 1168, 354, 1167, 0,
	566, 1176, 1187, 1184, 1189, 1175, 1188, 1182, 937, 613,
	1179, 1178, 1192, 1185, 1186, 559, 1191, 1130, 1183, 1181,
	1180, 1177, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 1155, 1133, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 340, 341, 342, 343, 344, 345, 346, 347,
	1147, 348, 0, 349, 350, 352, 0, 355, 356, 357,
	358, 359, 0, 360, 1156, 1104, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 1157, 0, 395,
	396, 397, 1137, 1138, 398, 399, 400, 401, 402, 403,
	406, 1170, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 606, 1148, 423,
	425, 426, 1154, 610, 1149, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 1150, 454,
	455, 456, 457, 0, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 1107, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 1141, 506, 616, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 1151, 527, 528, 1142,
	530, 531, 833, 533, 534, 535, 536, 537, 0, 656,
	538, 1152, 539, 1153, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 1091, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 624, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174,
	570, 571, 587, 438, 432, 388, 430, 431, 435, 436,
	439, 0, 0, 0, 1146, 0, 0, 0, 1089, 0,
	872, 0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095,
	0, 0, 0, 1096, 0, 0, 1085, 1086, 264, 0,
	281, 815, 0, 330, 367, 1100, 0, 1088, 427, 0,
	480, 484, 0, 573, 1120, 0, 1092, 0, 338, 1113,
	820, 0, 826, 1114, 832, 1112, 549, 0, 822, 823,
	828, 269, 1190, 572, 643, 0, 0, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 1143,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 5134, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	1101, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172,
	1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175,
	1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559,
	1191, 1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	1155, 1133, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135,
	1136, 1140, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 1147, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 1156, 1104,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 1157, 0, 395, 396, 397, 1137, 1138, 398, 399,
	400, 401, 402, 403, 406, 1170, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 1148, 423, 425, 426, 1154, 610, 1149, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 1150, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 1107, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	1141, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	1151, 527, 528, 1142, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 1152, 539, 1153, 540, 541,
	542, 543, 544, 5133, 546, 548, 0, 1091, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 1158, 1159, 1162, 1160,
	1161, 1163, 1164, 1174, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 0, 1146, 0,
	0, 0, 1089, 0, 872, 0, 1110, 989, 0, 1115,
	1116, 1105, 1124, 1095, 0, 0, 0, 1096, 0, 0,
	1085, 1086, 264, 0, 281, 815, 0, 330, 367, 1100,
	0, 1088, 427, 0, 480, 484, 0, 573, 1120, 0,
	1092, 0, 338, 1113, 820, 0, 826, 1114, 832, 1112,
	549, 0, 822, 823, 828, 269, 1190, 572, 643, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 824, 821, 825, 831, 819,
	829, 816, 827, 0, 471, 405, 622, 498, 276, 322,
	309, 351, 393, 505, 0, 0, 383, 553, 318, 407,
	0, 297, 440, 1143, 529, 404, 0, 512, 532, 0,
	424, 303, 463, 519, 520, 813, 818, 0, 834, 0,
	307, 308, 429, 289, 437, 634, 600, 492, 450, 448,
	0, 415, 472, 629, 1101, 0, 337, 0, 332, 428,
	568, 295, 547, 466, 433, 387, 495, 524, 334, 319,
	320, 363, 465, 353, 305, 558, 1171, 1173, 1169, 1165,
	1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566, 1176,
	1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179, 1178,
	1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180, 1177,
	0, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 265, 0, 266, 267, 268, 270, 271, 272, 812,
	273, 274, 275, 278, 279, 280, 282, 642, 283, 284,
	285, 286, 287, 288, 1155, 1133, 290, 291, 292, 293,
	294, 296, 298, 299, 300, 301, 302, 304, 4939, 1144,
	1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313,
	314, 315, 0, 316, 317, 321, 323, 324, 325, 326,
	327, 328, 331, 0, 333, 335, 0, 336, 339, 0,
	340, 341, 342, 343, 344, 345, 346, 347, 1147, 348,
	0, 349, 350, 352, 0, 355, 356, 357, 358, 359,
	0, 360, 1156, 4941, 361, 362, 364, 365, 366, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 382, 384, 0, 385, 386, 389,
	390, 391, 392, 0, 394, 1157, 0, 395, 396, 397,
	1137, 1138, 398, 399, 400, 401, 402, 403, 406, 1170,
	408, 409, 410, 411, 412, 413, 414, 644, 416, 417,
	418, 419, 420, 421, 422, 606, 1148, 423, 425, 426,
	1154, 610, 1149, 830, 441, 442, 443, 444, 445, 446,
	447, 449, 0, 451, 452, 453, 1150, 454, 455, 456,
	457, 0, 458, 459, 460, 461, 462, 464, 467, 468,
	469, 470, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 482, 483, 485, 486, 487, 645, 488, 4940, 490,
	491, 1107, 493, 494, 646, 496, 497, 499, 500, 501,
	502, 503, 504, 655, 1141, 506, 616, 507, 508, 509,
	510, 511, 0, 513, 514, 515, 516, 517, 518, 521,
	522, 523, 525, 526, 1151, 527, 528, 1142, 530, 531,
	833, 533, 534, 535, 536, 537, 0, 656, 538, 1152,
	539, 1153, 540, 541, 542, 543, 544, 545, 546, 548,
	0, 1091, 550, 551, 552, 554, 555, 556, 557, 560,
	561, 562, 563, 564, 0, 565, 567, 569, 647, 624,
	1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571,
	587, 438, 432, 388, 430, 431, 435, 436, 439, 0,
	0, 0, 1146, 0, 0, 0, 1089, 0, 872, 0,
	1110, 989, 0, 1115, 1116, 1105, 1124, 1095, 0, 0,
	0, 4938, 0, 0, 1085, 1086, 264, 0, 281, 815,
	0, 330, 367, 1100, 0, 1088, 427, 0, 480, 484,
	0, 5132, 1120, 0, 1092, 0, 338, 1113, 820, 0,
	826, 1114, 832, 1112, 549, 0, 822, 823, 828, 269,
	1190, 572, 643, 0, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 5134, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 1101, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182,
	937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130,
	1183, 1181, 1180, 1177, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 1104, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 1107, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 5133, 546, 548, 0, 1091, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 1146, 0, 0, 0,
	1089, 0, 872, 0, 1110, 989, 0, 1115, 1116, 1105,
	1124, 1095, 0, 0, 0, 1096, 0, 0, 1085, 1086,
	264, 0, 281, 815, 0, 330, 367, 1100, 0, 1088,
	427, 0, 480, 484, 0, 573, 1120, 0, 1092, 0,
	338, 1113, 820, 0, 826, 1114, 832, 1112, 549, 0,
	822, 823, 828, 269, 1190, 572, 643, 0, 0, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 1143, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 1101, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166, 1131,
	1132, 1172, 1168, 354, 1167, 0, 566, 1176, 1187, 1184,
	1189, 1175, 1188, 1182, 937, 613, 1179, 1178, 1192, 1185,
	1186, 559, 1191, 1130, 1183, 1181, 1180, 1177, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 1155, 1133, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 1144, 1134, 1139,
	1145, 1135, 1136, 1140, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 1147, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	1156, 1104, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 1157, 0, 395, 396, 397, 1137, 1138,
	398, 399, 400, 401, 402, 403, 406, 1170, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 4465, 606, 1148, 423, 425, 426, 1154, 610,
	1149, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 1150, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 1107,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 1141, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 1151, 527, 528, 1142, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 1152, 539, 1153,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 1091,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 1158, 1159,
	1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 0, 0, 0,
	1146, 0, 0, 0, 1089, 0, 872, 0, 1110, 989,
	0, 1115, 1116, 1105, 1124, 1095, 0, 0, 0, 1096,
	0, 0, 1085, 1086, 264, 0, 281, 815, 0, 330,
	367, 1100, 0, 1088, 427, 0, 480, 484, 0, 573,
	1120, 0, 1092, 0, 338, 1113, 820, 0, 826, 1114,
	832, 1112, 549, 0, 822, 823, 828, 269, 1190, 572,
	643, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 824, 821, 825,
	831, 819, 829, 816, 827, 0, 471, 405, 622, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 1143, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 813, 818, 0,
	834, 0, 307, 308, 429, 289, 437, 634, 600, 492,
	450, 448, 0, 415, 472, 629, 1101, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 1171, 1173,
	1169, 1165, 1166, 1131, 1132, 1172, 1168, 354, 1167, 0,
	566, 1176, 1187, 1184, 1189, 1175, 1188, 1182, 937, 613,
	1179, 1178, 1192, 1185, 1186, 559, 1191, 1130, 1183, 1181,
	1180, 1177, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 1155, 1133, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 340, 341, 342, 343, 344, 345, 346, 347,
	1147, 348, 0, 349, 350, 352, 0, 355, 356, 357,
	358, 359, 0, 360, 1156, 1104, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 1157, 0, 395,
	396, 397, 1137, 1138, 398, 399, 400, 401, 402, 403,
	406, 1170, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 606, 1148, 423,
	425, 426, 1154, 610, 1149, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 1150, 454,
	455, 456, 457, 0, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 1107, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 1141, 506, 616, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 1151, 527, 528, 1142,
	530, 531, 833, 533, 534, 535, 536, 537, 0, 656,
	538, 1152, 539, 1153, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 1091, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 4452, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174,
	570, 571, 587, 438, 432, 388, 430, 431, 435, 436,
	439, 0, 0, 0, 1146, 0, 0, 0, 1089, 0,
	872, 0, 1110, 989, 0, 1115, 1116, 1105, 1124, 1095,
	0, 0, 0, 1096, 0, 0, 1085, 1086, 264, 0,
	281, 815, 0, 330, 367, 1100, 0, 1088, 427, 0,
	480, 484, 0, 573, 1120, 0, 1092, 0, 338, 1113,
	820, 0, 826, 1114, 832, 1112, 549, 0, 822, 823,
	828, 269, 1190, 572, 643, 0, 0, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 1143,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 3584, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	1101, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172,
	1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175,
	1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559,
	1191, 1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	1155, 1133, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135,
	1136, 1140, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 1147, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 1156, 1104,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 1157, 0, 395, 396, 397, 1137, 1138, 398, 399,
	400, 401, 402, 403, 406, 1170, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 1148, 423, 425, 426, 1154, 610, 1149, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 1150, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 1107, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	1141, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	1151, 527, 528, 1142, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 1152, 539, 1153, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 1091, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 1158, 1159, 1162, 1160,
	1161, 1163, 1164, 1174, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 0, 1146, 0,
	0, 0, 1089, 0, 872, 0, 2731, 989, 0, 1115,
	1116, 1105, 1124, 1095, 0, 0, 0, 1096, 0, 0,
	1085, 1086, 264, 0, 281, 815, 0, 330, 367, 1100,
	0, 1088, 427, 0, 480, 484, 0, 573, 1120, 0,
	1092, 0, 338, 1113, 820, 0, 826, 1114, 832, 1112,
	549, 0, 822, 823, 828, 269, 1190, 572, 643, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 824, 821, 825, 831, 819,
	829, 816, 827, 0, 471, 405, 622, 498, 276, 322,
	309, 351, 393, 505, 0, 0, 383, 553, 318, 407,
	0, 297, 440, 1143, 529, 404, 0, 512, 532, 0,
	424, 303, 463, 519, 520, 813, 818, 0, 834, 0,
	307, 308, 429, 289, 437, 634, 600, 492, 450, 448,
	0, 415, 472, 629, 1101, 0, 337, 0, 332, 428,
	568, 295, 547, 466, 433, 387, 495, 524, 334, 319,
	320, 363, 465, 353, 305, 558, 1171, 1173, 1169, 1165,
	1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566, 1176,
	1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179, 1178,
	1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180, 1177,
	0, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 265, 0, 266, 267, 268, 270, 271, 272, 812,
	273, 274, 275, 278, 279, 280, 282, 642, 283, 284,
	285, 286, 287, 288, 1155, 1133, 290, 291, 292, 293,
	294, 296, 298, 299, 300, 301, 302, 304, 306, 1144,
	1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313,
	314, 315, 0, 316, 317, 321, 323, 324, 325, 326,
	327, 328, 331, 0, 333, 335, 0, 336, 339, 0,
	340, 341, 342, 343, 344, 345, 346, 347, 1147, 348,
	0, 349, 350, 352, 0, 355, 356, 357, 358, 359,
	0, 360, 1156, 1104, 361, 362, 364, 365, 366, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 382, 384, 0, 385, 386, 389,
	390, 391, 392, 0, 394, 1157, 0, 395, 396, 397,
	1137, 1138, 398, 399, 400, 401, 402, 403, 406, 1170,
	408, 409, 410, 411, 412, 413, 414, 644, 416, 417,
	418, 419, 420, 421, 422, 606, 1148, 423, 425, 426,
	1154, 610, 1149, 830, 441, 442, 443, 444, 445, 446,
	447, 449, 0, 451, 452, 453, 1150, 454, 455, 456,
	457, 0, 458, 459, 460, 461, 462, 464, 467, 468,
	469, 470, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 482, 483, 485, 486, 487, 645, 488, 489, 490,
	491, 1107, 493, 494, 646, 496, 497, 499, 500, 501,
	502, 503, 504, 655, 1141, 506, 616, 507, 508, 509,
	510, 511, 0, 513, 514, 515, 516, 517, 518, 521,
	522, 523, 525, 526, 1151, 527, 528, 1142, 530, 531,
	833, 533, 534, 535, 536, 537, 0, 656, 538, 1152,
	539, 1153, 540, 541, 542, 543, 544, 545, 546, 548,
	0, 1091, 550, 551, 552, 554, 555, 556, 557, 560,
	561, 562, 563, 564, 0, 565, 567, 569, 647, 624,
	1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571,
	587, 438, 432, 388, 430, 431, 435, 436, 439, 0,
	0, 0, 1146, 0, 0, 0, 1089, 0, 872, 0,
	1110, 989, 0, 1115, 1116, 1105, 1124, 1095, 0, 0,
	0, 1096, 0, 0, 1085, 1086, 264, 0, 281, 815,
	0, 330, 367, 1100, 0, 1088, 427, 0, 480, 484,
	0, 573, 1120, 0, 1092, 0, 338, 1113, 820, 0,
	826, 1114, 832, 1112, 549, 0, 822, 823, 828, 269,
	1190, 572, 643, 0, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 1101, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182,
	937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130,
	1183, 1181, 1180, 1177, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 1104, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 1107, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 1091, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 1146, 0, 0, 0,
	1089, 0, 872, 0, 1110, 989, 0, 1115, 1116, 1105,
	1124, 1095, 0, 0, 0, 1096, 0, 0, 1620, 1621,
	264, 0, 281, 815, 0, 330, 367, 1100, 0, 0,
	427, 0, 480, 484, 0, 573, 1120, 0, 4758, 0,
	338, 1113, 820, 0, 826, 1114, 832, 1112, 549, 0,
	822, 823, 828, 269, 1190, 572, 643, 0, 0, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 1143, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 1101, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166, 1131,
	1132, 1172, 1168, 354, 1167, 0, 566, 1176, 1187, 1184,
	1189, 1175, 1188, 1182, 937, 613, 1179, 1178, 1192, 1185,
	1186, 559, 1191, 1130, 1183, 1181, 1180, 1177, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 1155, 1133, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 1144, 1134, 1139,
	1145, 1135, 1136, 1140, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 1147, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	1156, 1104, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 1157, 0, 395, 396, 397, 1137, 1138,
	398, 399, 400, 401, 402, 403, 406, 1170, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 1148, 423, 425, 426, 1154, 610,
	1149, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 1150, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 2885,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 1141, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 1151, 527, 528, 1142, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 1152, 539, 1153,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 1158, 1159,
	1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 0, 0, 0,
	1146, 0, 0, 0, 0, 0, 872, 0, 1110, 989,
	0, 1115, 1116, 1105, 1124, 1095, 0, 0, 0, 2725,
	0, 0, 2882, 2883, 264, 0, 281, 815, 0, 330,
	367, 1100, 0, 0, 427, 0, 480, 484, 0, 573,
	1120, 0, 0, 0, 338, 1113, 820, 0, 826, 1114,
	832, 1112, 549, 0, 822, 823, 828, 269, 1190, 572,
	643, 0, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 824, 821, 825,
	831, 819, 829, 816, 827, 0, 471, 405, 622, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 1143, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 813, 818, 0,
	834, 0, 307, 308, 429, 289, 437, 634, 600, 492,
	450, 448, 0, 415, 472, 629, 1101, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 1171, 1173,
	1169, 1165, 1166, 1131, 1132, 1172, 1168, 354, 1167, 0,
	566, 1176, 1187, 1184, 1189, 1175, 1188, 1182, 937, 613,
	1179, 1178, 1192, 1185, 1186, 559, 1191, 1130, 1183, 1181,
	1180, 1177, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 1155, 1133, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 340, 341, 342, 343, 344, 345, 346, 347,
	1147, 348, 0, 349, 350, 352, 0, 355, 356, 357,
	358, 359, 0, 360, 1156, 1104, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 1157, 0, 395,
	396, 397, 1137, 1138, 398, 399, 400, 401, 402, 403,
	406, 1170, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 606, 1148, 423,
	425, 426, 1154, 610, 1149, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 1150, 454,
	455, 456, 457, 0, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 2885, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 1141, 506, 616, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 1151, 527, 528, 1142,
	530, 531, 833, 533, 534, 535, 536, 537, 0, 656,
	538, 1152, 539, 1153, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 0, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 624, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174,
	570, 571, 587, 438, 432, 388, 430, 431, 435, 436,
	439, 0, 0, 0, 1146, 0, 0, 0, 0, 0,
	872, 0, 1110, 989, 0, 1115, 1116, 0, 1124, 1095,
	0, 0, 0, 2725, 0, 0, 2882, 2883, 264, 0,
	281, 815, 0, 330, 367, 1100, 0, 0, 427, 0,
	480, 484, 0, 573, 1120, 0, 0, 0, 338, 1113,
	820, 0, 826, 1114, 832, 1112, 549, 0, 822, 823,
	828, 269, 1190, 572, 643, 0, 0, 0, 434, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 1143,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 307, 308, 429, 289,
	437, 634, 600, 2724, 450, 448, 0, 415, 472, 629,
	1101, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172,
	1168, 354, 1167, 0, 566, 1176, 1187, 1184, 1189, 1175,
	1188, 1182, 937, 613, 1179, 1178, 1192, 1185, 1186, 559,
	1191, 1130, 1183, 1181, 1180, 1177, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	1155, 1133, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 1144, 1134, 1139, 1145, 1135,
	1136, 1140, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 1147, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 1156, 1104,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 1157, 0, 395, 396, 397, 1137, 1138, 398, 399,
	400, 401, 402, 403, 406, 1170, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 1148, 423, 425, 426, 1154, 610, 1149, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 1150, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 2723, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	1141, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	1151, 527, 528, 1142, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 1152, 539, 1153, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 0, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 1158, 1159, 1162, 1160,
	1161, 1163, 1164, 1174, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 0, 1146, 0,
	0, 0, 0, 0, 872, 0, 1110, 989, 0, 1115,
	1116, 1105, 1124, 1095, 0, 0, 0, 2725, 0, 0,
	2721, 2722, 264, 0, 281, 815, 0, 330, 367, 1100,
	0, 1088, 427, 0, 480, 484, 0, 0, 1120, 0,
	1092, 0, 338, 1113, 0, 0, 0, 1114, 0, 1112,
	549, 0, 0, 0, 0, 269, 1190, 572, 643, 0,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 824, 821, 825, 831, 819,
	829, 816, 827, 0, 471, 405, 622, 498, 276, 322,
	309, 351, 393, 505, 0, 0, 383, 553, 318, 407,
	0, 297, 440, 1143, 529, 404, 0, 512, 532, 0,
	424, 303, 463, 519, 520, 813, 818, 0, 834, 0,
	5134, 308, 429, 289, 437, 634, 600, 492, 450, 448,
	0, 415, 472, 629, 1101, 0, 337, 0, 332, 428,
	568, 295, 547, 466, 433, 387, 495, 524, 334, 319,
	320, 363, 465, 353, 305, 558, 1171, 1173, 1169, 1165,
	1166, 1131, 1132, 1172, 1168, 354, 1167, 0, 566, 1176,
	1187, 1184, 1189, 1175, 1188, 1182, 937, 613, 1179, 1178,
	1192, 1185, 1186, 559, 1191, 1130, 1183, 1181, 1180, 1177,
	0, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 265, 0, 266, 267, 268, 270, 271, 272, 812,
	273, 274, 275, 278, 279, 280, 282, 642, 283, 284,
	285, 286, 287, 288, 1155, 1133, 290, 291, 292, 293,
	294, 296, 298, 299, 300, 301, 302, 304, 306, 1144,
	1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313,
	314, 315, 0, 316, 317, 321, 323, 324, 325, 326,
	327, 328, 331, 0, 333, 335, 0, 336, 339, 0,
	340, 341, 342, 343, 344, 345, 346, 347, 1147, 348,
	0, 349, 350, 352, 0, 355, 356, 357, 358, 359,
	0, 360, 1156, 1104, 361, 362, 364, 365, 366, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 382, 384, 0, 385, 386, 389,
	390, 391, 392, 0, 394, 1157, 0, 395, 396, 397,
	1137, 1138, 398, 399, 400, 401, 402, 403, 406, 1170,
	408, 409, 410, 411, 412, 413, 414, 644, 416, 417,
	418, 419, 420, 421, 422, 606, 1148, 423, 425, 426,
	1154, 610, 1149, 830, 441, 442, 443, 444, 445, 446,
	447, 449, 0, 451, 452, 453, 1150, 454, 455, 456,
	457, 0, 458, 459, 460, 461, 462, 464, 467, 468,
	469, 470, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 482, 483, 485, 486, 487, 645, 488, 489, 490,
	491, 1107, 493, 494, 646, 496, 497, 499, 500, 501,
	502, 503, 504, 655, 1141, 506, 616, 507, 508, 509,
	510, 511, 0, 513, 514, 515, 516, 517, 518, 521,
	522, 523, 525, 526, 1151, 527, 528, 1142, 530, 531,
	833, 533, 534, 535, 536, 537, 0, 656, 538, 1152,
	539, 1153, 540, 541, 542, 543, 544, 5133, 546, 548,
	0, 1091, 550, 551, 552, 554, 555, 556, 557, 560,
	561, 562, 563, 564, 0, 565, 567, 569, 647, 624,
	1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571,
	587, 438, 432, 388, 430, 431, 435, 436, 439, 0,
	0, 0, 1146, 0, 0, 0, 0, 0, 872, 0,
	1110, 989, 0, 1115, 1116, 0, 1124, 1095, 0, 0,
	0, 1096, 0, 0, 1085, 1086, 264, 0, 281, 815,
	0, 330, 367, 1100, 0, 0, 427, 0, 480, 484,
	0, 573, 1120, 0, 0, 0, 338, 1113, 820, 0,
	826, 1114, 832, 1112, 549, 0, 822, 823, 828, 269,
	1190, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 1101, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182,
	937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130,
	1183, 1181, 1180, 1177, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 1104, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 2885, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 1146, 0, 872, 0,
	1110, 989, 0, 1115, 1116, 0, 1124, 1095, 0, 0,
	0, 0, 0, 0, 0, 2725, 264, 0, 281, 815,
	0, 330, 367, 1100, 0, 0, 427, 0, 480, 484,
	0, 573, 1120, 0, 0, 0, 338, 1113, 820, 0,
	826, 1114, 832, 1112, 549, 0, 822, 823, 828, 269,
	1190, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 4122, 1101, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182,
	937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130,
	1183, 1181, 1180, 1177, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 1104, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 2885, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 1146, 0, 872, 0,
	1110, 989, 0, 1115, 1116, 0, 1124, 1095, 0, 0,
	0, 0, 0, 0, 0, 2725, 264, 0, 281, 815,
	0, 330, 367, 1100, 0, 0, 427, 0, 480, 484,
	0, 573, 1120, 0, 0, 0, 338, 1113, 820, 0,
	826, 1114, 832, 1112, 549, 0, 822, 823, 828, 269,
	1190, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 4063, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 1101, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	1167, 0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182,
	937, 613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130,
	1183, 1181, 1180, 1177, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 1104, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 2885, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 872, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 2725, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 125, 573, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 122, 0, 0, 726, 123, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 1030, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 1143, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 2973, 2974, 2972, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166,
	1131, 1132, 1172, 1168, 354, 2980, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 1155, 1133, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 1144, 1134,
	1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 1147, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 1156, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 2965, 394, 1157, 0, 395, 396, 397, 1137,
	1138, 398, 399, 400, 401, 402, 403, 406, 1170, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 1148, 423, 425, 426, 1154,
	610, 1149, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 1150, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 1141, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 1151, 527, 528, 1142, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 1152, 539,
	1153, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 1158,
	1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 0, 0,
	0, 1146, 0, 808, 0, 1525, 989, 126, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 0, 0, 0,
	2967, 264, 0, 281, 815, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 5010,
	0, 338, 1522, 820, 0, 826, 0, 832, 1521, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 1523, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 817, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5011, 0, 0, 1526, 1527, 5009, 264, 0, 281, 815,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	726, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 2973,
	2974, 2972, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	2980, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 2965, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 872, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 2967, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 1143, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166,
	1131, 1132, 1172, 1168, 354, 2980, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 1155, 1133, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 1144, 1134,
	1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 1147, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 1156, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 1157, 0, 395, 396, 397, 1137,
	1138, 398, 399, 400, 401, 402, 403, 406, 1170, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 1148, 423, 425, 426, 1154,
	610, 1149, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 1150, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 1141, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 1151, 527, 528, 1142, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 1152, 539,
	1153, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 1158,
	1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 872, 0,
	0, 1146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	4272, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	2980, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 872, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 5201, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 1143, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 1171, 1173, 1169, 1165, 1166,
	1131, 1132, 1172, 1168, 354, 2980, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 1155, 1133, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 1144, 1134,
	1139, 1145, 1135, 1136, 1140, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 1147, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 1156, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 1157, 0, 395, 396, 397, 1137,
	1138, 398, 399, 400, 401, 402, 403, 406, 1170, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 1148, 423, 425, 426, 1154,
	610, 1149, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 1150, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 1141, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 1151, 527, 528, 1142, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 1152, 539,
	1153, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 1158,
	1159, 1162, 1160, 1161, 1163, 1164, 1174, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 872, 0,
	0, 1146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	3106, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 1143, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 2973,
	2974, 2972, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	1171, 1173, 1169, 1165, 1166, 1131, 1132, 1172, 1168, 354,
	2980, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 1155, 1133,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 1144, 1134, 1139, 1145, 1135, 1136, 1140,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 1147, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 1156, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 1157,
	0, 395, 396, 397, 1137, 1138, 398, 399, 400, 401,
	402, 403, 406, 1170, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	1148, 423, 425, 426, 1154, 610, 1149, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	1150, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 1141, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 1151, 527,
	528, 1142, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 1152, 539, 1153, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 1158, 1159, 1162, 1160, 1161, 1163,
	1164, 1174, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 1146, 0, 808, 0,
	1525, 989, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 264, 0, 281, 815,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 1531, 0, 338, 1522, 820, 0,
	826, 0, 832, 1521, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 1523, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 817, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 1525, 989, 0, 0, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 0, 1526, 1527,
	264, 0, 281, 815, 0, 330, 367, 582, 0, 0,
	427, 0, 480, 484, 0, 573, 0, 0, 1517, 0,
	338, 1522, 820, 0, 826, 0, 832, 1521, 549, 0,
	822, 823, 828, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 1523, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 814, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 0,
	817, 0, 0, 0, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 0, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 1525, 989,
	0, 0, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 1526, 1527, 264, 0, 281, 815, 0, 330,
	367, 582, 0, 0, 427, 0, 480, 484, 0, 573,
	0, 0, 0, 0, 338, 1522, 820, 0, 826, 0,
	832, 1521, 549, 0, 822, 823, 828, 269, 657, 572,
	643, 0, 0, 0, 434, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 1523, 824, 821, 825,
	831, 819, 829, 816, 827, 0, 471, 405, 622, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 0, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 813, 818, 0,
	834, 0, 307, 308, 429, 289, 437, 634, 600, 492,
	450, 448, 0, 415, 472, 629, 0, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 597, 601,
	599, 595, 592, 596, 593, 594, 598, 354, 591, 0,
	566, 575, 609, 589, 617, 574, 614, 584, 329, 613,
	578, 577, 623, 604, 605, 559, 619, 590, 588, 581,
	580, 576, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 579, 814, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 0, 0, 0, 817, 0, 0, 0, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 340, 341, 342, 343, 344, 345, 346, 347,
	583, 348, 0, 349, 350, 352, 0, 355, 356, 357,
	358, 359, 0, 360, 585, 586, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 602, 0, 395,
	396, 397, 0, 0, 398, 399, 400, 401, 402, 403,
	406, 603, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 606, 607, 423,
	425, 426, 608, 610, 611, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 612, 454,
	455, 456, 457, 0, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 615, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 0, 506, 616, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 618, 527, 528, 0,
	530, 531, 833, 533, 534, 535, 536, 537, 0, 656,
	538, 620, 539, 621, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 0, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 624, 625, 626, 627, 628, 630, 631, 632, 633,
	570, 571, 587, 438, 432, 388, 430, 431, 435, 436,
	439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1526, 1527, 264, 0,
	281, 815, 0, 330, 367, 582, 0, 0, 427, 0,
	480, 484, 125, 573, 0, 0, 0, 0, 338, 0,
	820, 0, 826, 0, 832, 0, 549, 0, 822, 823,
	828, 269, 657, 572, 643, 0, 0, 0, 434, 122,
	0, 0, 0, 123, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 1030, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 0,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 120, 307, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	0, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 597, 601, 599, 595, 592, 596, 593, 594,
	598, 354, 591, 0, 566, 575, 609, 589, 617, 574,
	614, 584, 329, 613, 578, 577, 623, 604, 605, 559,
	619, 590, 588, 581, 580, 576, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 121, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	579, 814, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 0, 0, 0, 817, 0,
	0, 0, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 583, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 585, 586,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 602, 0, 395, 396, 397, 0, 0, 398, 399,
	400, 401, 402, 403, 406, 603, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 607, 423, 425, 426, 608, 610, 611, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 612, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 615, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	0, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	618, 527, 528, 0, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 620, 539, 621, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 0, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 625, 626, 627, 628,
	630, 631, 632, 633, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 872, 0, 0, 0, 0,
	0, 1033, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 281, 815, 119, 330, 367,
	582, 0, 0, 427, 0, 480, 484, 0, 573, 0,
	0, 0, 0, 338, 0, 820, 0, 826, 0, 832,
	0, 549, 0, 822, 823, 828, 269, 657, 572, 643,
	0, 0, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 622, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 0, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 634, 600, 492, 450,
	448, 0, 415, 472, 629, 0, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 597, 601, 599,
	595, 592, 596, 593, 594, 598, 354, 591, 0, 566,
	575, 609, 589, 617, 574, 614, 584, 329, 613, 578,
	577, 623, 604, 605, 559, 619, 590, 588, 581, 580,
	576, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 579, 814, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	0, 0, 0, 817, 0, 0, 0, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 583,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 585, 586, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 602, 0, 395, 396,
	397, 0, 0, 398, 399, 400, 401, 402, 403, 406,
	603, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 606, 607, 423, 425,
	426, 608, 610, 611, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 612, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 615, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 0, 506, 616, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 618, 527, 528, 0, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	620, 539, 621, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 0, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	624, 625, 626, 627, 628, 630, 631, 632, 633, 570,
	571, 587, 438, 432, 388, 430, 431, 435, 436, 439,
	251, 0, 0, 0, 0, 0, 0, 777, 0, 0,
	0, 0, 0, 0, 788, 789, 790, 0, 264, 0,
	281, 0, 4912, 330, 367, 582, 0, 0, 427, 0,
	480, 484, 0, 573, 0, 0, 0, 0, 338, 0,
	0, 0, 0, 0, 0, 0, 549, 0, 0, 0,
	0, 269, 657, 572, 643, 0, 0, 0, 434, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 0,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 0, 0, 0, 0, 0, 307, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	0, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 597, 601, 599, 595, 592, 596, 593, 594,
	598, 354, 591, 0, 566, 575, 609, 589, 617, 574,
	614, 584, 329, 613, 578, 577, 623, 604, 605, 559,
	619, 590, 588, 581, 580, 576, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 0, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	579, 0, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 583, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 585, 586,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 602, 0, 395, 396, 397, 0, 0, 398, 399,
	400, 401, 402, 403, 406, 603, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 607, 423, 425, 426, 608, 610, 611, 0,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 612, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 615, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	0, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	618, 527, 528, 0, 530, 531, 0, 533, 534, 535,
	536, 537, 0, 656, 538, 620, 539, 621, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 0, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 625, 626, 627, 628,
	630, 631, 632, 633, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 785, 786, 787, 0, 0, 0, 0, 0, 251,
	779, 780, 781, 782, 783, 784, 777, 0, 0, 0,
	0, 0, 0, 788, 789, 790, 0, 264, 0, 281,
	0, 0, 330, 367, 582, 0, 0, 427, 0, 480,
	484, 0, 573, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 0, 0, 0, 549, 0, 0, 0, 0,
	269, 657, 572, 643, 0, 0, 0, 4885, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	405, 622, 498, 276, 322, 309, 351, 393, 505, 0,
	0, 383, 553, 318, 407, 0, 297, 440, 0, 529,
	404, 0, 512, 532, 0, 424, 303, 463, 519, 520,
	0, 0, 0, 0, 0, 307, 308, 429, 289, 437,
	634, 600, 492, 450, 448, 0, 415, 472, 629, 0,
	0, 337, 0, 332, 428, 568, 295, 547, 466, 433,
	387, 495, 524, 334, 319, 320, 363, 465, 353, 305,
	558, 597, 601, 599, 595, 592, 596, 593, 594, 598,
	354, 591, 0, 566, 575, 609, 589, 617, 574, 614,
	584, 329, 613, 578, 577, 623, 604, 605, 559, 619,
	590, 588, 581, 580, 576, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 265, 0, 266, 267,
	268, 270, 271, 272, 0, 273, 274, 275, 278, 279,
	280, 282, 642, 283, 284, 285, 286, 287, 288, 579,
	0, 290, 291, 292, 293, 294, 296, 298, 299, 300,
	301, 302, 304, 306, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 312, 313, 314, 315, 0, 316, 317,
	321, 323, 324, 325, 326, 327, 328, 331, 0, 333,
	335, 0, 336, 339, 0, 340, 341, 342, 343, 344,
	345, 346, 347, 583, 348, 0, 349, 350, 352, 0,
	355, 356, 357, 358, 359, 0, 360, 585, 586, 361,
	362, 364, 365, 366, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 382,
	384, 0, 385, 386, 389, 390, 391, 392, 0, 394,
	602, 0, 395, 396, 397, 0, 0, 398, 399, 400,
	401, 402, 403, 406, 603, 408, 409, 410, 411, 412,
	413, 414, 644, 416, 417, 418, 419, 420, 421, 422,
	606, 607, 423, 425, 426, 608, 610, 611, 0, 441,
	442, 443, 444, 445, 446, 447, 449, 0, 451, 452,
	453, 612, 454, 455, 456, 457, 0, 458, 459, 460,
	461, 462, 464, 467, 468, 469, 470, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 482, 483, 485, 486,
	487, 645, 488, 489, 490, 491, 615, 493, 494, 646,
	496, 497, 499, 500, 501, 502, 503, 504, 655, 0,
	506, 616, 507, 508, 509, 510, 511, 0, 513, 514,
	515, 516, 517, 518, 521, 522, 523, 525, 526, 618,
	527, 528, 0, 530, 531, 0, 533, 534, 535, 536,
	537, 0, 656, 538, 620, 539, 621, 540, 541, 542,
	543, 544, 545, 546, 548, 0, 0, 550, 551, 552,
	554, 555, 556, 557, 560, 561, 562, 563, 564, 0,
	565, 567, 569, 647, 624, 625, 626, 627, 628, 630,
	631, 632, 633, 570, 571, 587, 438, 432, 388, 430,
	431, 435, 436, 439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 786, 787, 0, 0, 0, 0, 0, 251, 779,
	780, 781, 782, 783, 784, 777, 0, 0, 0, 0,
	0, 0, 788, 789, 790, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 3314, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 3315, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 785,
	786, 787, 0, 0, 0, 0, 0, 251, 779, 780,
	781, 782, 783, 784, 777, 0, 0, 0, 0, 0,
	0, 788, 789, 790, 0, 264, 0, 281, 0, 0,
	330, 367, 582, 0, 0, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 269, 657,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 0, 0,
	0, 0, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 0, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 773, 287, 288, 579, 0, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 774, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 0, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 0, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 785, 786,
	787, 0, 0, 0, 0, 0, 0, 779, 780, 781,
	782, 783, 784, 264, 0, 281, 815, 0, 330, 367,
	582, 0, 0, 427, 0, 480, 484, 0, 573, 0,
	0, 0, 0, 338, 0, 820, 0, 826, 0, 832,
	0, 549, 0, 822, 823, 828, 269, 657, 572, 643,
	0, 0, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 622, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 1143, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 634, 600, 492, 450,
	448, 0, 415, 472, 629, 0, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 1171, 1173, 1169,
	1165, 1166, 1131, 1132, 1172, 1168, 354, 2980, 0, 566,
	575, 609, 589, 617, 574, 614, 584, 329, 613, 578,
	577, 623, 604, 605, 559, 619, 590, 588, 581, 580,
	576, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 1155, 1133, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	1144, 1134, 1139, 1145, 1135, 1136, 1140, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 1147,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 1156, 586, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 1157, 0, 395, 396,
	397, 1137, 1138, 398, 399, 400, 401, 402, 403, 406,
	1170, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 606, 1148, 423, 425,
	426, 1154, 610, 1149, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 1150, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 615, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 1141, 506, 616, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 1151, 527, 528, 1142, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	1152, 539, 1153, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 0, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	624, 1158, 1159, 1162, 1160, 1161, 1163, 1164, 1174, 570,
	571, 587, 438, 432, 388, 430, 431, 435, 436, 439,
	808, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 0,
	281, 815, 0, 330, 367, 582, 0, 0, 427, 0,
	480, 484, 0, 573, 0, 0, 0, 0, 338, 0,
	820, 0, 826, 0, 832, 0, 549, 0, 822, 823,
	828, 269, 657, 572, 643, 0, 0, 0, 434, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 622, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 0,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 120, 307, 308, 429, 289,
	437, 634, 600, 492, 450, 448, 0, 415, 472, 629,
	0, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 597, 601, 599, 595, 592, 596, 593, 594,
	598, 354, 591, 0, 566, 575, 609, 589, 617, 574,
	614, 584, 329, 613, 578, 577, 623, 604, 605, 559,
	619, 590, 588, 581, 580, 576, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 121, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	579, 814, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 0, 0, 0, 817, 0,
	0, 0, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 583, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 585, 586,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 602, 0, 395, 396, 397, 0, 0, 398, 399,
	400, 401, 402, 403, 406, 603, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 606, 607, 423, 425, 426, 608, 610, 611, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 612, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 615, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	0, 506, 616, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	618, 527, 528, 0, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 620, 539, 621, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 0, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 624, 625, 626, 627, 628,
	630, 631, 632, 633, 570, 571, 587, 438, 432, 388,
	430, 431, 435, 436, 439, 0, 0, 872, 0, 1110,
	989, 1033, 1115, 1116, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 281, 815, 0,
	330, 367, 582, 0, 0, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 1113, 820, 0, 826,
	1114, 832, 1112, 549, 0, 822, 823, 828, 269, 1190,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 824, 821,
	825, 831, 819, 829, 816, 827, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 813, 818,
	0, 834, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 5493,
	0, 566, 1176, 1187, 1184, 1189, 1175, 1188, 1182, 937,
	613, 1179, 1178, 1192, 1185, 1186, 559, 1191, 1130, 1183,
	1181, 1180, 1177, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 814, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 817, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 833, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 281, 0, 0, 330, 367, 582, 0, 0,
	427, 0, 480, 484, 0, 573, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 0, 0, 0, 549, 0,
	0, 0, 0, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 0, 0, 0, 0, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 0, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 0, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 0, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 0, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 0, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 281, 0, 0,
	330, 367, 582, 0, 5330, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 269, 657,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 0, 0,
	0, 0, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 0, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 0, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 0, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 0, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 281, 0, 0, 330, 367, 582, 0, 5189,
	427, 0, 480, 484, 0, 573, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 0, 0, 0, 549, 0,
	0, 0, 0, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 0, 0, 0, 0, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 0, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 0, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 0, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 0, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 0, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 281, 0, 0,
	330, 367, 582, 0, 5186, 427, 0, 480, 484, 125,
	573, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 269, 657,
	572, 643, 0, 0, 0, 434, 122, 0, 0, 0,
	123, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 405, 1030,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 0, 0,
	0, 0, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 0, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 0, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 0, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 0, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 808, 0, 0, 989, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 281, 815, 119, 330, 367, 582, 0, 0,
	427, 0, 480, 484, 0, 573, 0, 0, 0, 0,
	338, 1522, 820, 0, 826, 0, 832, 1521, 549, 0,
	822, 823, 828, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 1523, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 814, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 0,
	817, 0, 0, 0, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 0, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 281, 815, 0,
	330, 367, 582, 0, 0, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 0, 820, 0, 826,
	0, 832, 0, 549, 0, 822, 823, 828, 269, 657,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 3351, 0, 0, 0, 824, 821,
	825, 831, 819, 829, 816, 827, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 813, 818,
	0, 834, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 814, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 805, 817, 0, 0, 806, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 807, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 833, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 281, 815, 0, 330, 367, 582, 0, 0,
	427, 0, 480, 484, 0, 573, 0, 0, 0, 0,
	338, 0, 820, 0, 826, 0, 832, 0, 549, 0,
	822, 823, 828, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 2379, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 814, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 805,
	817, 0, 0, 806, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 807, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 281, 0, 0,
	330, 367, 582, 0, 0, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 269, 657,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 726,
	2395, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 0, 0,
	0, 0, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 0, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 0, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 2399, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 0, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 2396, 531, 0, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 905,
	264, 0, 281, 815, 1255, 330, 367, 582, 0, 0,
	427, 0, 480, 484, 0, 573, 0, 0, 0, 0,
	338, 0, 820, 0, 826, 0, 832, 0, 549, 0,
	822, 823, 828, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 814, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 805,
	817, 0, 0, 806, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 903, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 807, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 264, 0, 281, 815, 0,
	330, 367, 582, 0, 0, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 0, 820, 0, 826,
	0, 832, 0, 549, 0, 822, 823, 828, 269, 657,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 824, 821,
	825, 831, 819, 829, 816, 827, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 813, 818,
	0, 834, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 814, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 805, 817, 0, 0, 806, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 807, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 833, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 281, 815, 0, 330, 367, 582, 0, 0,
	427, 0, 480, 484, 0, 573, 0, 0, 0, 0,
	338, 0, 820, 0, 826, 0, 832, 0, 549, 0,
	822, 823, 828, 269, 657, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 622, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 634, 600, 492, 450, 448, 0, 415,
	472, 629, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 597, 601, 599, 595, 592, 596,
	593, 594, 598, 354, 591, 0, 566, 575, 609, 589,
	617, 574, 614, 584, 329, 613, 578, 577, 623, 604,
	605, 559, 619, 590, 588, 581, 580, 576, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 579, 814, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 805,
	817, 0, 0, 806, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 583, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	585, 586, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 602, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 603, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 606, 607, 423, 425, 426, 608, 610,
	611, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 612, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 615,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 807, 506, 616, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 618, 527, 528, 0, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 620, 539, 621,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 624, 625, 626,
	627, 628, 630, 631, 632, 633, 570, 571, 587, 438,
	432, 388, 430, 431, 435, 436, 439, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 3596, 281, 0, 0,
	330, 367, 582, 0, 0, 427, 0, 480, 484, 0,
	573, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 0, 269, 657,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 405, 622,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 0, 0,
	0, 0, 0, 307, 308, 429, 289, 437, 634, 600,
	492, 450, 448, 0, 415, 472, 629, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 597,
	601, 599, 595, 592, 596, 593, 594, 598, 354, 591,
	0, 566, 575, 609, 589, 617, 574, 614, 584, 329,
	613, 578, 577, 623, 604, 605, 559, 619, 590, 588,
	581, 580, 576, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 0, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 579, 0, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 583, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 585, 586, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 602, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 603, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 606, 607,
	423, 425, 426, 608, 610, 611, 0, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 612,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 615, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 616,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 618, 527, 528,
	0, 530, 531, 0, 533, 534, 535, 536, 537, 0,
	656, 538, 620, 539, 621, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 624, 625, 626, 627, 628, 630, 631, 632,
	633, 570, 571, 587, 438, 432, 388, 430, 431, 435,
	436, 439, 0, 808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 1078, 330, 967, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	805, 817, 0, 0, 806, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 807, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	0, 330, 965, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 805, 817, 0, 0, 806,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 807, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 808, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 0, 330, 962, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	805, 817, 0, 0, 806, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 960, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 807, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 805, 817, 0, 0, 806,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	801, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 807, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 808, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 1513,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 817, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 2303, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 808, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	4117, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 817, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	3473, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 1205, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 817, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 817, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 3031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 815, 0, 330, 367, 0, 0,
	0, 427, 0, 480, 484, 0, 0, 0, 0, 0,
	0, 338, 0, 820, 2497, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 947, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 0, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 0, 0, 492, 450, 448, 0,
	415, 472, 0, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 0, 566, 950, 940,
	932, 933, 934, 935, 936, 937, 0, 952, 953, 954,
	955, 956, 559, 946, 0, 931, 938, 939, 941, 2500,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 0, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 817, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 0, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 0, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 0, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 0, 0, 423, 425, 426, 0,
	2498, 0, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 0, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	0, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 2503, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 0, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 0, 539,
	0, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 570, 571, 2499,
	438, 432, 388, 430, 431, 435, 436, 439, 3026, 264,
	0, 281, 0, 0, 330, 2415, 582, 0, 0, 427,
	0, 480, 484, 0, 573, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 0, 3024, 0, 549, 0, 0,
	0, 0, 269, 657, 572, 643, 0, 0, 0, 434,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 405, 622, 498, 276, 322, 309, 351, 393,
	505, 0, 0, 383, 553, 318, 407, 0, 297, 440,
	0, 529, 404, 0, 512, 532, 0, 424, 303, 463,
	519, 520, 0, 0, 2419, 0, 0, 307, 308, 429,
	289, 437, 634, 600, 492, 450, 448, 0, 415, 472,
	629, 0, 0, 337, 0, 332, 428, 568, 295, 547,
	466, 433, 387, 495, 524, 334, 319, 320, 363, 465,
	353, 305, 558, 597, 601, 599, 595, 592, 596, 593,
	594, 598, 354, 591, 0, 566, 575, 609, 589, 617,
	574, 614, 584, 329, 613, 578, 577, 623, 604, 605,
	559, 619, 590, 588, 581, 580, 576, 0, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 265, 0,
	266, 267, 268, 270, 271, 272, 0, 273, 274, 275,
	278, 279, 280, 282, 642, 283, 284, 285, 286, 287,
	288, 579, 0, 290, 291, 292, 293, 294, 296, 298,
	299, 300, 301, 302, 304, 306, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 312, 313, 314, 315, 0,
	316, 317, 321, 323, 324, 325, 326, 327, 328, 331,
	0, 333, 335, 0, 336, 339, 0, 2425, 341, 342,
	343, 344, 345, 346, 347, 583, 348, 0, 349, 350,
	352, 2424, 355, 356, 357, 358, 359, 0, 360, 585,
	586, 361, 362, 364, 365, 366, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 382, 384, 0, 385, 386, 389, 390, 391, 392,
	0, 394, 602, 0, 395, 396, 397, 0, 0, 398,
	399, 400, 401, 402, 403, 406, 603, 408, 409, 410,
	411, 412, 413, 414, 644, 416, 417, 418, 419, 420,
	421, 422, 606, 607, 423, 425, 426, 608, 610, 611,
	0, 441, 442, 443, 444, 445, 446, 447, 449, 0,
	451, 452, 453, 612, 454, 455, 456, 457, 2423, 458,
	459, 460, 461, 462, 464, 467, 468, 469, 470, 0,
	473, 474, 475, 476, 477, 478, 479, 481, 482, 483,
	485, 486, 487, 645, 488, 489, 490, 491, 615, 493,
	494, 646, 496, 497, 499, 500, 501, 502, 503, 504,
	655, 0, 506, 616, 507, 508, 509, 510, 511, 0,
	513, 514, 515, 516, 517, 518, 521, 522, 523, 525,
	526, 618, 527, 528, 0, 530, 531, 0, 533, 534,
	535, 536, 537, 0, 656, 538, 620, 539, 621, 540,
	541, 542, 543, 544, 545, 546, 548, 0, 2422, 550,
	551, 552, 554, 555, 556, 557, 560, 561, 562, 563,
	564, 0, 565, 567, 569, 647, 624, 625, 626, 627,
	628, 630, 631, 632, 633, 570, 571, 587, 438, 432,
	388, 430, 431, 435, 436, 439, 251, 0, 0, 0,
	2421, 2416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 281, 0, 0, 330,
	367, 582, 0, 0, 427, 0, 480, 484, 0, 573,
	0, 0, 0, 0, 338, 0, 0, 0, 2991, 0,
	0, 0, 549, 0, 0, 0, 0, 269, 657, 572,
	643, 0, 0, 0, 434, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 405, 622, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 0, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 0, 0, 2419,
	0, 0, 307, 308, 429, 289, 437, 634, 600, 492,
	450, 448, 0, 415, 472, 629, 0, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 597, 601,
	599, 595, 592, 596, 593, 594, 598, 354, 591, 0,
	566, 575, 609, 589, 617, 574, 614, 584, 329, 613,
	578, 577, 623, 604, 605, 559, 619, 590, 588, 581,
	580, 576, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 0, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 579, 0, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 2425, 341, 342, 343, 344, 345, 346, 347,
	583, 348, 0, 349, 350, 352, 2424, 355, 356, 357,
	358, 359, 0, 360, 585, 586, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 602, 0, 395,
	396, 397, 0, 0, 398, 399, 400, 401, 402, 403,
	406, 603, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 606, 607, 423,
	425, 426, 608, 610, 611, 0, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 612, 454,
	455, 456, 457, 2423, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 615, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 0, 506, 616, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 618, 527, 528, 0,
	530, 531, 0, 533, 534, 535, 536, 537, 0, 656,
	538, 620, 539, 621, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 2422, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 624, 625, 626, 627, 628, 630, 631, 632, 633,
	570, 571, 587, 438, 432, 388, 430, 431, 435, 436,
	439, 251, 0, 0, 0, 2421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	0, 281, 0, 0, 330, 367, 582, 0, 0, 427,
	0, 480, 484, 0, 573, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 0, 0, 0, 549, 0, 0,
	0, 0, 269, 657, 572, 643, 0, 0, 0, 434,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 405, 622, 498, 276, 322, 309, 351, 393,
	505, 0, 0, 383, 553, 318, 407, 0, 297, 440,
	0, 529, 404, 0, 512, 532, 0, 424, 303, 463,
	519, 520, 0, 0, 2419, 0, 0, 307, 308, 429,
	289, 437, 634, 600, 492, 450, 448, 0, 415, 472,
	629, 0, 0, 337, 0, 332, 428, 568, 295, 547,
	466, 433, 387, 495, 524, 334, 319, 320, 363, 465,
	353, 305, 558, 597, 601, 599, 595, 592, 596, 593,
	594, 598, 354, 591, 0, 566, 575, 609, 589, 617,
	574, 614, 584, 329, 613, 578, 577, 623, 604, 605,
	559, 619, 590, 588, 581, 580, 576, 0, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 265, 0,
	266, 267, 268, 270, 271, 272, 0, 273, 274, 275,
	278, 279, 280, 282, 642, 283, 284, 285, 286, 287,
	288, 579, 0, 290, 291, 292, 293, 294, 296, 298,
	299, 300, 301, 302, 304, 306, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 312, 313, 314, 315, 0,
	316, 317, 321, 323, 324, 325, 326, 327, 328, 331,
	0, 333, 335, 0, 336, 339, 0, 2425, 341, 342,
	343, 344, 345, 346, 347, 583, 348, 0, 349, 350,
	352, 2424, 355, 356, 357, 358, 359, 0, 360, 585,
	586, 361, 362, 364, 365, 366, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 382, 384, 0, 385, 386, 389, 390, 391, 392,
	0, 394, 602, 0, 395, 396, 397, 0, 0, 398,
	399, 400, 401, 402, 403, 406, 603, 408, 409, 410,
	411, 412, 413, 414, 644, 416, 417, 418, 419, 420,
	421, 422, 606, 607, 423, 425, 426, 608, 610, 611,
	0, 441, 442, 443, 444, 445, 446, 447, 449, 0,
	451, 452, 453, 612, 454, 455, 456, 457, 2423, 458,
	459, 460, 461, 462, 464, 467, 468, 469, 470, 0,
	473, 474, 475, 476, 477, 478, 479, 481, 482, 483,
	485, 486, 487, 645, 488, 489, 490, 491, 615, 493,
	494, 646, 496, 497, 499, 500, 501, 502, 503, 504,
	655, 0, 506, 616, 507, 508, 509, 510, 511, 0,
	513, 514, 515, 516, 517, 518, 521, 522, 523, 525,
	526, 618, 527, 528, 0, 530, 531, 0, 533, 534,
	535, 536, 537, 0, 656, 538, 620, 539, 621, 540,
	541, 542, 543, 544, 545, 546, 548, 0, 2422, 550,
	551, 552, 554, 555, 556, 557, 560, 561, 562, 563,
	564, 0, 565, 567, 569, 647, 624, 625, 626, 627,
	628, 630, 631, 632, 633, 570, 571, 587, 438, 432,
	388, 430, 431, 435, 436, 439, 948, 0, 0, 0,
	2421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 281, 815, 0, 330,
	367, 0, 0, 0, 427, 0, 480, 484, 0, 0,
	0, 0, 0, 0, 338, 0, 820, 2497, 826, 0,
	832, 0, 549, 0, 822, 823, 828, 269, 947, 572,
	643, 0, 0, 0, 434, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 824, 821, 825,
	831, 819, 829, 816, 827, 0, 471, 405, 0, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 0, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 813, 818, 0,
	834, 0, 307, 308, 429, 289, 437, 0, 0, 492,
	450, 448, 0, 415, 472, 0, 0, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	566, 950, 940, 932, 933, 934, 935, 936, 937, 0,
	952, 953, 954, 955, 956, 559, 946, 0, 931, 938,
	939, 941, 2500, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 0, 814, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 0, 0, 0, 817, 0, 0, 0, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 340, 341, 342, 343, 344, 345, 346, 347,
	0, 348, 0, 349, 350, 352, 0, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 0, 0, 395,
	396, 397, 0, 0, 398, 399, 400, 401, 402, 403,
	406, 0, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 0, 0, 423,
	425, 426, 0, 2498, 0, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 0, 454,
	455, 456, 457, 0, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 0, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 0, 506, 2503, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 0, 527, 528, 0,
	530, 531, 833, 533, 534, 535, 536, 537, 0, 656,
	538, 0, 539, 0, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 0, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 0, 0, 0, 0, 948, 0, 0, 0, 0,
	570, 571, 2499, 438, 432, 388, 430, 431, 435, 436,
	439, 0, 0, 264, 0, 281, 815, 0, 330, 367,
	0, 0, 0, 427, 0, 480, 484, 0, 0, 0,
	0, 0, 0, 338, 3011, 820, 2497, 826, 0, 832,
	0, 549, 0, 822, 823, 828, 269, 947, 572, 643,
	0, 0, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 0, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 0, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 0, 0, 492, 450,
	448, 0, 415, 472, 0, 0, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 0, 566,
	950, 940, 932, 933, 934, 935, 936, 937, 0, 952,
	953, 954, 955, 956, 559, 946, 0, 931, 938, 939,
	941, 2500, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 0, 814, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	0, 0, 0, 817, 0, 0, 0, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 0,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 0, 0, 395, 396,
	397, 0, 0, 398, 399, 400, 401, 402, 403, 406,
	0, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 0, 0, 423, 425,
	426, 0, 2498, 0, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 0, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 0, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 0, 506, 2503, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 0, 527, 528, 0, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	0, 539, 0, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 0, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	0, 0, 0, 251, 0, 0, 0, 0, 0, 570,
	571, 2499, 438, 432, 388, 430, 431, 435, 436, 439,
	663, 668, 0, 281, 0, 667, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 2492, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 665, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 3323,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 666, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 668, 0, 281, 0,
	667, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 665, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 671, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 666, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 668, 0, 281, 0, 667, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 665, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 666, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2392, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	726, 2395, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 2399, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 2396, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1565, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 1551, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 1557, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	1558, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 1553, 355, 1554, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	1559, 1560, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 1561, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 1555, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 1556, 491,
	615, 493, 494, 1562, 496, 497, 499, 500, 1552, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 1563, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 1564, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	726, 2395, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 2399, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 2396, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 281, 0, 667, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 665, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 666, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3164, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 3165, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3155, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 3156, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 264, 0, 281, 0,
	0, 330, 854, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	726, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 726, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 4600, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 3596, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 4255, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 4239, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 3608, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 3807,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 2749, 0, 0,
	0, 434, 0, 0, 0, 0, 2752, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 2750, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	2748, 534, 2747, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 2751, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 1354, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 726, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 264, 0, 281, 0,
	0, 330, 1351, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 244, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 980, 273,
	274, 275, 278, 279, 280, 282, 245, 283, 979, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 247, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 248, 488, 489, 490, 491,
	615, 493, 494, 246, 496, 497, 499, 500, 501, 502,
	503, 504, 977, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 240, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 249, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 264, 0, 281, 0,
	0, 330, 857, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 693, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 695, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 694, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	637, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 639, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 638, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	5467, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 3296, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	244, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 245, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 247, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	248, 488, 489, 490, 491, 615, 493, 494, 246, 496,
	497, 499, 500, 501, 502, 503, 504, 977, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 240, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 249, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 3235, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 3143, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 3141, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 3127, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 244, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 245, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 247, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 248, 488, 489, 490, 491,
	615, 493, 494, 246, 496, 497, 499, 500, 501, 502,
	503, 504, 2535, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 2536, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 249, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 2383, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 2324, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 1547, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 1497, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 1274, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 1235, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 1231, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 1225, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 0, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 920, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 916, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 913, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 908, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 889, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 862, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 860, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 841, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 800, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 796, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 794, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 769, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	657, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 615, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 656, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 492, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 658, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 0,
	0, 330, 367, 582, 0, 0, 427, 0, 480, 484,
	0, 573, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 269,
	244, 572, 238, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 405,
	622, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 0,
	0, 0, 0, 0, 307, 308, 429, 289, 437, 634,
	600, 492, 450, 448, 0, 415, 472, 629, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	597, 601, 599, 595, 592, 596, 593, 594, 598, 354,
	591, 0, 566, 575, 609, 589, 617, 574, 614, 584,
	329, 613, 578, 577, 623, 604, 605, 559, 619, 590,
	588, 581, 580, 576, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 0, 273, 274, 275, 278, 279, 280,
	282, 245, 283, 284, 285, 286, 287, 288, 579, 0,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 583, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 585, 586, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 602,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 603, 408, 409, 410, 411, 412, 413,
	414, 247, 416, 417, 418, 419, 420, 421, 422, 606,
	607, 423, 425, 426, 608, 610, 611, 0, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	612, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	248, 488, 489, 490, 491, 615, 493, 494, 246, 496,
	497, 499, 500, 501, 502, 503, 504, 239, 0, 506,
	616, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 618, 527,
	528, 0, 530, 531, 0, 533, 534, 535, 536, 537,
	0, 240, 538, 620, 539, 621, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 249, 624, 625, 626, 627, 628, 630, 631,
	632, 633, 570, 571, 587, 438, 432, 388, 430, 431,
	435, 436, 439, 251, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 281, 0, 0, 330, 367, 582, 0,
	0, 427, 0, 480, 484, 0, 573, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 0, 0, 0, 269, 657, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 405, 622, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 0, 0, 0, 0, 0, 307,
	308, 429, 289, 437, 634, 600, 0, 450, 448, 0,
	415, 472, 629, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 597, 601, 599, 595, 592,
	596, 593, 594, 598, 354, 591, 0, 566, 575, 609,
	589, 617, 574, 614, 584, 329, 613, 578, 577, 623,
	604, 605, 559, 619, 590, 588, 581, 580, 576, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 0, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 579, 0, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 583, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 585, 586, 0, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 602, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 603, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 606, 607, 423, 425, 426, 608,
	610, 611, 0, 441, 442, 443, 444, 445, 446, 0,
	449, 0, 451, 452, 453, 612, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 0, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	615, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 616, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 618, 527, 528, 0, 530, 531, 0,
	533, 534, 535, 536, 537, 0, 656, 538, 620, 539,
	621, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 570, 571, 587,
	438, 432, 388, 430, 431, 435, 436, 439, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 0, 281, 815,
	0, 330, 367, 0, 0, 0, 427, 0, 480, 484,
	0, 0, 0, 0, 0, 0, 338, 0, 820, 2497,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	947, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	0, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 0,
	0, 492, 450, 448, 0, 415, 472, 0, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 566, 950, 940, 932, 933, 934, 935, 936,
	937, 0, 952, 953, 954, 955, 956, 559, 946, 0,
	931, 938, 939, 941, 2500, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 0, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 817, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 0, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 0,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 0, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 0,
	0, 423, 425, 426, 0, 2498, 0, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	0, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 0, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	2503, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 0, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 0, 539, 0, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 570, 571, 2499, 438, 432, 388, 430, 431,
	435, 436, 439, 264, 0, 281, 815, 0, 330, 367,
	0, 0, 0, 427, 0, 480, 484, 0, 0, 0,
	0, 0, 0, 338, 0, 820, 0, 826, 2525, 832,
	0, 549, 0, 822, 823, 828, 269, 947, 572, 643,
	0, 0, 0, 434, 0, 0, 0, 0, 3639, 0,
	0, 277, 0, 0, 0, 0, 824, 821, 825, 831,
	819, 829, 816, 827, 0, 471, 405, 0, 498, 276,
	322, 309, 351, 393, 505, 0, 0, 383, 553, 318,
	407, 0, 297, 440, 0, 529, 404, 0, 512, 532,
	0, 424, 303, 463, 519, 520, 813, 818, 0, 834,
	0, 307, 308, 429, 289, 437, 0, 0, 492, 450,
	448, 0, 415, 472, 0, 0, 0, 337, 0, 332,
	428, 568, 295, 547, 466, 433, 387, 495, 524, 334,
	319, 320, 363, 465, 353, 305, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 0, 566,
	950, 940, 932, 933, 934, 935, 936, 937, 0, 952,
	953, 954, 955, 956, 559, 946, 0, 931, 938, 939,
	941, 0, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 265, 0, 266, 267, 268, 270, 271, 272,
	812, 273, 274, 275, 278, 279, 280, 282, 642, 283,
	284, 285, 286, 287, 288, 0, 814, 290, 291, 292,
	293, 294, 296, 298, 299, 300, 301, 302, 304, 306,
	0, 0, 0, 817, 0, 0, 0, 310, 311, 312,
	313, 314, 315, 0, 316, 317, 321, 323, 324, 325,
	326, 327, 328, 331, 0, 333, 335, 0, 336, 339,
	0, 340, 341, 342, 343, 344, 345, 346, 347, 0,
	348, 0, 349, 350, 352, 0, 355, 356, 357, 358,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 366,
	368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 382, 384, 0, 385, 386,
	389, 390, 391, 392, 0, 394, 0, 0, 395, 396,
	397, 0, 0, 398, 399, 400, 401, 402, 403, 406,
	0, 408, 409, 410, 411, 412, 413, 414, 644, 416,
	417, 418, 419, 420, 421, 422, 0, 0, 423, 425,
	426, 0, 0, 0, 830, 441, 442, 443, 444, 445,
	446, 447, 449, 0, 451, 452, 453, 0, 454, 455,
	456, 457, 0, 458, 459, 460, 461, 462, 464, 467,
	468, 469, 470, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 482, 483, 485, 486, 487, 645, 488, 489,
	490, 491, 0, 493, 494, 646, 496, 497, 499, 500,
	501, 502, 503, 504, 655, 0, 506, 2503, 507, 508,
	509, 510, 511, 0, 513, 514, 515, 516, 517, 518,
	521, 522, 523, 525, 526, 0, 527, 528, 0, 530,
	531, 833, 533, 534, 535, 536, 537, 0, 656, 538,
	0, 539, 0, 540, 541, 542, 543, 544, 545, 546,
	548, 0, 0, 550, 551, 552, 554, 555, 556, 557,
	560, 561, 562, 563, 564, 0, 565, 567, 569, 647,
	0, 0, 948, 0, 0, 0, 0, 0, 0, 570,
	571, 0, 438, 432, 388, 430, 431, 435, 436, 439,
	264, 0, 281, 815, 0, 330, 367, 0, 0, 0,
	427, 0, 480, 484, 0, 0, 0, 0, 0, 0,
	338, 0, 820, 0, 826, 0, 832, 0, 549, 0,
	822, 823, 828, 269, 947, 572, 643, 0, 0, 0,
	434, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 824, 821, 825, 831, 819, 829, 816,
	827, 0, 471, 405, 0, 498, 276, 322, 309, 351,
	393, 505, 0, 0, 383, 553, 318, 407, 0, 297,
	440, 0, 529, 404, 0, 512, 532, 0, 424, 303,
	463, 519, 520, 813, 818, 0, 834, 0, 307, 308,
	429, 289, 437, 0, 0, 492, 450, 448, 5501, 415,
	472, 0, 0, 0, 337, 0, 332, 428, 568, 295,
	547, 466, 433, 387, 495, 524, 334, 319, 320, 363,
	465, 353, 305, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 0, 566, 950, 940, 932,
	933, 934, 935, 936, 937, 0, 952, 953, 954, 955,
	956, 559, 946, 0, 931, 938, 939, 941, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 265,
	0, 266, 267, 268, 270, 271, 272, 812, 273, 274,
	275, 278, 279, 280, 282, 642, 283, 284, 285, 286,
	287, 288, 0, 814, 290, 291, 292, 293, 294, 296,
	298, 299, 300, 301, 302, 304, 306, 0, 0, 0,
	817, 0, 0, 0, 310, 311, 312, 313, 314, 315,
	0, 316, 317, 321, 323, 324, 325, 326, 327, 328,
	331, 0, 333, 335, 0, 336, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 347, 0, 348, 0, 349,
	350, 352, 0, 355, 356, 357, 358, 359, 0, 360,
	0, 0, 361, 362, 364, 365, 366, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 382, 384, 0, 385, 386, 389, 390, 391,
	392, 0, 394, 0, 0, 395, 396, 397, 0, 0,
	398, 399, 400, 401, 402, 403, 406, 0, 408, 409,
	410, 411, 412, 413, 414, 644, 416, 417, 418, 419,
	420, 421, 422, 0, 0, 423, 425, 426, 0, 0,
	0, 830, 441, 442, 443, 444, 445, 446, 447, 449,
	0, 451, 452, 453, 0, 454, 455, 456, 457, 0,
	458, 459, 460, 461, 462, 464, 467, 468, 469, 470,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 482,
	483, 485, 486, 487, 645, 488, 489, 490, 491, 0,
	493, 494, 646, 496, 497, 499, 500, 501, 502, 503,
	504, 655, 0, 506, 0, 507, 508, 509, 510, 511,
	0, 513, 514, 515, 516, 517, 518, 521, 522, 523,
	525, 526, 0, 527, 528, 0, 530, 531, 833, 533,
	534, 535, 536, 537, 0, 656, 538, 0, 539, 0,
	540, 541, 542, 543, 544, 545, 546, 548, 0, 0,
	550, 551, 552, 554, 555, 556, 557, 560, 561, 562,
	563, 564, 0, 565, 567, 569, 647, 0, 0, 948,
	0, 0, 0, 0, 0, 0, 570, 571, 0, 438,
	432, 388, 430, 431, 435, 436, 439, 264, 0, 281,
	815, 0, 330, 367, 0, 0, 0, 427, 0, 480,
	484, 0, 0, 0, 0, 0, 0, 338, 0, 820,
	0, 826, 0, 832, 0, 549, 0, 822, 823, 828,
	269, 947, 572, 643, 0, 0, 0, 434, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	824, 821, 825, 831, 819, 829, 816, 827, 0, 471,
	405, 0, 498, 276, 322, 309, 351, 393, 505, 0,
	0, 383, 553, 318, 407, 0, 297, 440, 0, 529,
	404, 0, 512, 532, 0, 424, 303, 463, 519, 520,
	813, 818, 0, 834, 0, 307, 308, 429, 289, 437,
	0, 0, 492, 450, 448, 5166, 415, 472, 0, 0,
	0, 337, 0, 332, 428, 568, 295, 547, 466, 433,
	387, 495, 524, 334, 319, 320, 363, 465, 353, 305,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	354, 0, 0, 566, 950, 940, 932, 933, 934, 935,
	936, 937, 0, 952, 953, 954, 955, 956, 559, 946,
	0, 931, 938, 939, 941, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 265, 0, 266, 267,
	268, 270, 271, 272, 812, 273, 274, 275, 278, 279,
	280, 282, 642, 283, 284, 285, 286, 287, 288, 0,
	814, 290, 291, 292, 293, 294, 296, 298, 299, 300,
	301, 302, 304, 306, 0, 0, 0, 817, 0, 0,
	0, 310, 311, 312, 313, 314, 315, 0, 316, 317,
	321, 323, 324, 325, 326, 327, 328, 331, 0, 333,
	335, 0, 336, 339, 0, 340, 341, 342, 343, 344,
	345, 346, 347, 0, 348, 0, 349, 350, 352, 0,
	355, 356, 357, 358, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 366, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 382,
	384, 0, 385, 386, 389, 390, 391, 392, 0, 394,
	0, 0, 395, 396, 397, 0, 0, 398, 399, 400,
	401, 402, 403, 406, 0, 408, 409, 410, 411, 412,
	413, 414, 644, 416, 417, 418, 419, 420, 421, 422,
	0, 0, 423, 425, 426, 0, 0, 0, 830, 441,
	442, 443, 444, 445, 446, 447, 449, 0, 451, 452,
	453, 0, 454, 455, 456, 457, 0, 458, 459, 460,
	461, 462, 464, 467, 468, 469, 470, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 482, 483, 485, 486,
	487, 645, 488, 489, 490, 491, 0, 493, 494, 646,
	496, 497, 499, 500, 501, 502, 503, 504, 655, 0,
	506, 0, 507, 508, 509, 510, 511, 0, 513, 514,
	515, 516, 517, 518, 521, 522, 523, 525, 526, 0,
	527, 528, 0, 530, 531, 833, 533, 534, 535, 536,
	537, 0, 656, 538, 0, 539, 0, 540, 541, 542,
	543, 544, 545, 546, 548, 0, 0, 550, 551, 552,
	554, 555, 556, 557, 560, 561, 562, 563, 564, 0,
	565, 567, 569, 647, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 570, 571, 0, 438, 432, 388, 430,
	431, 435, 436, 439, 264, 0, 281, 815, 0, 330,
	367, 0, 0, 0, 427, 0, 480, 484, 0, 0,
	0, 0, 0, 0, 338, 0, 820, 0, 826, 0,
	832, 0, 549, 0, 822, 823, 828, 269, 947, 572,
	643, 0, 0, 0, 434, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 824, 821, 825,
	831, 819, 829, 816, 827, 0, 471, 405, 0, 498,
	276, 322, 309, 351, 393, 505, 0, 0, 383, 553,
	318, 407, 0, 297, 440, 0, 529, 404, 0, 512,
	532, 0, 424, 303, 463, 519, 520, 813, 818, 0,
	834, 0, 307, 308, 429, 289, 437, 0, 0, 492,
	450, 448, 0, 415, 472, 0, 0, 0, 337, 0,
	332, 428, 568, 295, 547, 466, 433, 387, 495, 524,
	334, 319, 320, 363, 465, 353, 305, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	566, 950, 940, 932, 933, 934, 935, 936, 937, 0,
	952, 953, 954, 955, 956, 559, 946, 0, 931, 938,
	939, 941, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 265, 0, 266, 267, 268, 270, 271,
	272, 812, 273, 274, 275, 278, 279, 280, 282, 642,
	283, 284, 285, 286, 287, 288, 0, 814, 290, 291,
	292, 293, 294, 296, 298, 299, 300, 301, 302, 304,
	306, 0, 0, 0, 817, 0, 0, 0, 310, 311,
	312, 313, 314, 315, 0, 316, 317, 321, 323, 324,
	325, 326, 327, 328, 331, 0, 333, 335, 0, 336,
	339, 0, 340, 341, 342, 343, 344, 345, 346, 347,
	0, 348, 0, 349, 350, 352, 0, 355, 356, 357,
	358, 359, 0, 360, 0, 0, 361, 362, 364, 365,
	366, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 382, 384, 0, 385,
	386, 389, 390, 391, 392, 0, 394, 0, 0, 395,
	396, 397, 0, 0, 398, 399, 400, 401, 402, 403,
	406, 0, 408, 409, 410, 411, 412, 413, 414, 644,
	416, 417, 418, 419, 420, 421, 422, 4922, 0, 423,
	425, 426, 0, 0, 0, 830, 441, 442, 443, 444,
	445, 446, 447, 449, 0, 451, 452, 453, 0, 454,
	455, 456, 457, 0, 458, 459, 460, 461, 462, 464,
	467, 468, 469, 470, 0, 473, 474, 475, 476, 477,
	478, 479, 481, 482, 483, 485, 486, 487, 645, 488,
	489, 490, 491, 0, 493, 494, 646, 496, 497, 499,
	500, 501, 502, 503, 504, 655, 0, 506, 0, 507,
	508, 509, 510, 511, 0, 513, 514, 515, 516, 517,
	518, 521, 522, 523, 525, 526, 0, 527, 528, 0,
	530, 531, 833, 533, 534, 535, 536, 537, 0, 656,
	538, 0, 539, 0, 540, 541, 542, 543, 544, 545,
	546, 548, 0, 0, 550, 551, 552, 554, 555, 556,
	557, 560, 561, 562, 563, 564, 0, 565, 567, 569,
	647, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	570, 571, 0, 438, 432, 388, 430, 431, 435, 436,
	439, 264, 0, 281, 815, 0, 330, 367, 0, 0,
	0, 427, 0, 480, 484, 0, 0, 0, 0, 0,
	0, 338, 0, 820, 0, 826, 0, 832, 0, 549,
	0, 822, 823, 828, 269, 947, 572, 643, 0, 0,
	0, 434, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 824, 821, 825, 831, 819, 829,
	816, 827, 0, 471, 405, 0, 498, 276, 322, 309,
	351, 393, 505, 0, 0, 383, 553, 318, 407, 0,
	297, 440, 0, 529, 404, 0, 512, 532, 0, 424,
	303, 463, 519, 520, 813, 818, 0, 834, 0, 307,
	308, 429, 289, 437, 0, 0, 492, 450, 448, 0,
	415, 472, 0, 0, 0, 337, 0, 332, 428, 568,
	295, 547, 466, 433, 387, 495, 524, 334, 319, 320,
	363, 465, 353, 305, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 0, 566, 950, 940,
	932, 933, 934, 935, 936, 937, 0, 952, 953, 954,
	955, 956, 559, 946, 0, 931, 938, 939, 941, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	265, 0, 266, 267, 268, 270, 271, 272, 812, 273,
	274, 275, 278, 279, 280, 282, 642, 283, 284, 285,
	286, 287, 288, 0, 814, 290, 291, 292, 293, 294,
	296, 298, 299, 300, 301, 302, 304, 306, 0, 0,
	0, 817, 0, 0, 0, 310, 311, 312, 313, 314,
	315, 0, 316, 317, 321, 323, 324, 325, 326, 327,
	328, 331, 0, 333, 335, 0, 336, 339, 0, 340,
	341, 342, 343, 344, 345, 346, 347, 0, 348, 0,
	349, 350, 352, 0, 355, 356, 357, 358, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 366, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 382, 384, 0, 385, 386, 389, 390,
	391, 392, 0, 394, 0, 0, 395, 396, 397, 0,
	0, 398, 399, 400, 401, 402, 403, 406, 0, 408,
	409, 410, 411, 412, 413, 414, 644, 416, 417, 418,
	419, 420, 421, 422, 0, 0, 423, 425, 426, 0,
	0, 0, 830, 441, 442, 443, 444, 445, 446, 447,
	449, 0, 451, 452, 453, 0, 454, 455, 456, 457,
	0, 458, 459, 460, 461, 462, 464, 467, 468, 469,
	470, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	482, 483, 485, 486, 487, 645, 488, 489, 490, 491,
	0, 493, 494, 646, 496, 497, 499, 500, 501, 502,
	503, 504, 655, 0, 506, 2503, 507, 508, 509, 510,
	511, 0, 513, 514, 515, 516, 517, 518, 521, 522,
	523, 525, 526, 0, 527, 528, 0, 530, 531, 833,
	533, 534, 535, 536, 537, 0, 656, 538, 0, 539,
	0, 540, 541, 542, 543, 544, 545, 546, 548, 0,
	0, 550, 551, 552, 554, 555, 556, 557, 560, 561,
	562, 563, 564, 0, 565, 567, 569, 647, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 570, 571, 0,
	438, 432, 388, 430, 431, 435, 436, 439, 264, 0,
	281, 815, 0, 330, 367, 0, 0, 0, 427, 0,
	480, 484, 0, 0, 0, 0, 0, 0, 338, 0,
	820, 0, 826, 0, 832, 0, 549, 0, 822, 823,
	828, 269, 947, 572, 643, 0, 0, 0, 434, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 824, 821, 825, 831, 819, 829, 816, 827, 0,
	471, 405, 0, 498, 276, 322, 309, 351, 393, 505,
	0, 0, 383, 553, 318, 407, 0, 297, 440, 0,
	529, 404, 0, 512, 532, 0, 424, 303, 463, 519,
	520, 813, 818, 0, 834, 0, 307, 308, 429, 289,
	437, 0, 0, 492, 450, 448, 0, 415, 472, 0,
	0, 0, 337, 0, 332, 428, 568, 295, 547, 466,
	433, 387, 495, 524, 334, 319, 320, 363, 465, 353,
	305, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 354, 0, 0, 566, 950, 940, 932, 933, 934,
	935, 936, 937, 0, 952, 953, 954, 955, 956, 559,
	946, 0, 931, 938, 939, 941, 0, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 265, 0, 266,
	267, 268, 270, 271, 272, 812, 273, 274, 275, 278,
	279, 280, 282, 642, 283, 284, 285, 286, 287, 288,
	0, 814, 290, 291, 292, 293, 294, 296, 298, 299,
	300, 301, 302, 304, 306, 0, 0, 0, 817, 0,
	0, 0, 310, 311, 312, 313, 314, 315, 0, 316,
	317, 321, 323, 324, 325, 326, 327, 328, 331, 0,
	333, 335, 0, 336, 339, 0, 340, 341, 342, 343,
	344, 345, 346, 347, 0, 348, 0, 349, 350, 352,
	0, 355, 356, 357, 358, 359, 0, 360, 0, 0,
	361, 362, 364, 365, 366, 368, 369, 370, 371, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	382, 384, 0, 385, 386, 389, 390, 391, 392, 0,
	394, 0, 0, 395, 396, 397, 0, 0, 398, 399,
	400, 401, 402, 403, 406, 0, 408, 409, 410, 411,
	412, 413, 414, 644, 416, 417, 418, 419, 420, 421,
	422, 4370, 0, 423, 425, 426, 0, 0, 0, 830,
	441, 442, 443, 444, 445, 446, 447, 449, 0, 451,
	452, 453, 0, 454, 455, 456, 457, 0, 458, 459,
	460, 461, 462, 464, 467, 468, 469, 470, 0, 473,
	474, 475, 476, 477, 478, 479, 481, 482, 483, 485,
	486, 487, 645, 488, 489, 490, 491, 0, 493, 494,
	646, 496, 497, 499, 500, 501, 502, 503, 504, 655,
	0, 506, 0, 507, 508, 509, 510, 511, 0, 513,
	514, 515, 516, 517, 518, 521, 522, 523, 525, 526,
	0, 527, 528, 0, 530, 531, 833, 533, 534, 535,
	536, 537, 0, 656, 538, 0, 539, 0, 540, 541,
	542, 543, 544, 545, 546, 548, 0, 0, 550, 551,
	552, 554, 555, 556, 557, 560, 561, 562, 563, 564,
	0, 565, 567, 569, 647, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 570, 571, 0, 438, 432, 388,
	430, 431, 435, 436, 439, 264, 0, 281, 815, 0,
	330, 367, 0, 0, 0, 427, 0, 480, 484, 0,
	0, 0, 0, 0, 0, 338, 0, 820, 0, 826,
	0, 832, 0, 549, 0, 822, 823, 828, 269, 947,
	572, 643, 0, 0, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 824, 821,
	825, 831, 819, 829, 816, 827, 0, 471, 405, 0,
	498, 276, 322, 309, 351, 393, 505, 0, 0, 383,
	553, 318, 407, 0, 297, 440, 0, 529, 404, 0,
	512, 532, 0, 424, 303, 463, 519, 520, 813, 818,
	0, 834, 0, 307, 308, 429, 289, 437, 0, 0,
	492, 450, 448, 0, 415, 472, 0, 0, 0, 337,
	0, 332, 428, 568, 295, 547, 466, 433, 387, 495,
	524, 334, 319, 320, 363, 465, 353, 305, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 566, 950, 940, 932, 933, 934, 935, 936, 937,
	0, 952, 953, 954, 955, 956, 559, 946, 0, 931,
	938, 939, 941, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 265, 0, 266, 267, 268, 270,
	271, 272, 812, 273, 274, 275, 278, 279, 280, 282,
	642, 283, 284, 285, 286, 287, 288, 0, 814, 290,
	291, 292, 293, 294, 296, 298, 299, 300, 301, 302,
	304, 306, 0, 0, 0, 817, 0, 0, 0, 310,
	311, 312, 313, 314, 315, 0, 316, 317, 321, 323,
	324, 325, 326, 327, 328, 331, 0, 333, 335, 0,
	336, 339, 0, 340, 341, 342, 343, 344, 345, 346,
	347, 0, 348, 0, 349, 350, 352, 0, 355, 356,
	357, 358, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 366, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 382, 384, 0,
	385, 386, 389, 390, 391, 392, 0, 394, 0, 0,
	395, 396, 397, 0, 0, 398, 399, 400, 401, 402,
	403, 406, 0, 408, 409, 410, 411, 412, 413, 414,
	644, 416, 417, 418, 419, 420, 421, 422, 0, 0,
	423, 425, 426, 0, 0, 0, 830, 441, 442, 443,
	444, 445, 446, 447, 449, 0, 451, 452, 453, 0,
	454, 455, 456, 457, 0, 458, 459, 460, 461, 462,
	464, 467, 468, 469, 470, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 482, 483, 485, 486, 487, 645,
	488, 489, 490, 491, 0, 493, 494, 646, 496, 497,
	499, 500, 501, 502, 503, 504, 655, 0, 506, 0,
	507, 508, 509, 510, 511, 0, 513, 514, 515, 516,
	517, 518, 521, 522, 523, 525, 526, 0, 527, 528,
	0, 530, 531, 833, 533, 534, 535, 536, 537, 0,
	656, 538, 0, 539, 0, 540, 541, 542, 543, 544,
	545, 546, 548, 0, 0, 550, 551, 552, 554, 555,
	556, 557, 560, 561, 562, 563, 564, 0, 565, 567,
	569, 647, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 570, 571, 0, 438, 432, 388, 430, 431, 435,
	436, 439, 264, 0, 281, 815, 0, 330, 958, 0,
	0, 0, 427, 0, 480, 484, 0, 0, 0, 0,
	0, 0, 338, 0, 820, 0, 826, 0, 832, 0,
	549, 0, 822, 823, 828, 269, 947, 572, 643, 0,
	0, 0, 434, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 824, 821, 825, 831, 819,
	829, 816, 827, 0, 471, 405, 0, 498, 276, 322,
	309, 351, 393, 505, 0, 0, 383, 553, 318, 407,
	0, 297, 440, 0, 529, 404, 0, 512, 532, 0,
	424, 303, 463, 519, 520, 813, 818, 0, 834, 0,
	307, 308, 429, 289, 437, 0, 0, 492, 450, 448,
	0, 415, 472, 0, 0, 0, 337, 0, 332, 428,
	568, 295, 547, 466, 433, 387, 495, 524, 334, 319,
	320, 363, 465, 353, 305, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 566, 950,
	940, 932, 933, 934, 935, 936, 937, 0, 952, 953,
	954, 955, 956, 559, 946, 0, 931, 938, 939, 941,
	0, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 265, 0, 266, 267, 268, 270, 271, 272, 812,
	273, 274, 275, 278, 279, 280, 282, 642, 283, 284,
	285, 286, 287, 288, 0, 814, 290, 291, 292, 293,
	294, 296, 298, 299, 300, 301, 302, 304, 306, 0,
	0, 0, 817, 0, 0, 0, 310, 311, 312, 313,
	314, 315, 0, 316, 317, 321, 323, 324, 325, 326,
	327, 328, 331, 0, 333, 335, 0, 336, 339, 0,
	340, 341, 342, 343, 344, 345, 346, 347, 0, 348,
	0, 349, 350, 352, 0, 355, 356, 357, 358, 359,
	0, 360, 0, 0, 361, 362, 364, 365, 366, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 382, 384, 0, 385, 386, 389,
	390, 391, 392, 0, 394, 0, 0, 395, 396, 397,
	0, 0, 398, 399, 400, 401, 402, 403, 406, 0,
	408, 409, 410, 411, 412, 413, 414, 644, 416, 417,
	418, 419, 420, 421, 422, 0, 0, 423, 425, 426,
	0, 0, 0, 830, 441, 442, 443, 444, 445, 446,
	447, 449, 0, 451, 452, 453, 0, 454, 455, 456,
	457, 0, 458, 459, 460, 461, 462, 464, 467, 468,
	469, 470, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 482, 483, 485, 486, 487, 645, 488, 489, 490,
	491, 0, 493, 494, 646, 496, 497, 499, 500, 501,
	502, 503, 504, 655, 0, 506, 0, 507, 508, 509,
	510, 511, 0, 513, 514, 515, 516, 517, 518, 521,
	522, 523, 525, 526, 0, 527, 528, 0, 530, 531,
	833, 533, 534, 535, 536, 537, 0, 656, 538, 0,
	539, 0, 540, 541, 542, 543, 544, 545, 546, 548,
	0, 0, 550, 551, 552, 554, 555, 556, 557, 560,
	561, 562, 563, 564, 0, 565, 567, 569, 647, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 570, 571,
	0, 438, 432, 388, 430, 431, 435, 436, 439, 264,
	0, 281, 815, 0, 330, 922, 0, 0, 0, 427,
	0, 480, 484, 0, 0, 0, 0, 0, 0, 338,
	0, 820, 0, 826, 0, 832, 0, 549, 0, 822,
	823, 828, 269, 947, 572, 643, 0, 0, 0, 434,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 824, 821, 825, 831, 819, 829, 816, 827,
	0, 471, 405, 0, 498, 276, 322, 309, 351, 393,
	505, 0, 0, 383, 553, 318, 407, 0, 297, 440,
	0, 529, 404, 0, 512, 532, 0, 424, 303, 463,
	519, 520, 813, 818, 0, 834, 0, 307, 308, 429,
	289, 437, 0, 0, 492, 450, 448, 0, 415, 472,
	0, 0, 0, 337, 0, 332, 428, 568, 295, 547,
	466, 433, 387, 495, 524, 334, 319, 320, 363, 465,
	353, 305, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 566, 950, 940, 932, 933,
	934, 935, 936, 937, 0, 952, 953, 954, 955, 956,
	559, 946, 0, 931, 938, 939, 941, 0, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 265, 0,
	266, 267, 268, 270, 271, 272, 812, 273, 274, 275,
	278, 279, 280, 282, 642, 283, 284, 285, 286, 287,
	288, 0, 814, 290, 291, 292, 293, 294, 296, 298,
	299, 300, 301, 302, 304, 306, 0, 0, 0, 817,
	0, 0, 0, 310, 311, 312, 313, 314, 315, 0,
	316, 317, 321, 323, 324, 325, 326, 327, 328, 331,
	0, 333, 335, 0, 336, 339, 0, 340, 341, 342,
	343, 344, 345, 346, 347, 0, 348, 0, 349, 350,
	352, 0, 355, 356, 357, 358, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 366, 368, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 382, 384, 0, 385, 386, 389, 390, 391, 392,
	0, 394, 0, 0, 395, 396, 397, 0, 0, 398,
	399, 400, 401, 402, 403, 406, 0, 408, 409, 410,
	411, 412, 413, 414, 644, 416, 417, 418, 419, 420,
	421, 422, 0, 0, 423, 425, 426, 0, 0, 0,
	830, 441, 442, 443, 444, 445, 446, 447, 449, 0,
	451, 452, 453, 0, 454, 455, 456, 457, 0, 458,
	459, 460, 461, 462, 464, 467, 468, 469, 470, 0,
	473, 474, 475, 476, 477, 478, 479, 481, 482, 483,
	485, 486, 487, 645, 488, 489, 490, 491, 0, 493,
	494, 646, 496, 497, 499, 500, 501, 502, 503, 504,
	655, 0, 506, 0, 507, 508, 509, 510, 511, 0,
	513, 514, 515, 516, 517, 518, 521, 522, 523, 525,
	526, 0, 527, 528, 0, 530, 531, 833, 533, 534,
	535, 536, 537, 0, 656, 538, 0, 539, 0, 540,
	541, 542, 543, 544, 545, 546, 548, 0, 0, 550,
	551, 552, 554, 555, 556, 557, 560, 561, 562, 563,
	564, 0, 565, 567, 569, 647, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 570, 571, 0, 438, 432,
	388, 430, 431, 435, 436, 439, 264, 0, 281, 815,
	0, 330, 367, 0, 0, 0, 427, 0, 480, 484,
	0, 0, 0, 0, 0, 0, 338, 0, 820, 0,
	826, 0, 832, 0, 549, 0, 822, 823, 828, 269,
	0, 572, 643, 0, 0, 0, 434, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 824,
	821, 825, 831, 819, 829, 816, 827, 0, 471, 405,
	0, 498, 276, 322, 309, 351, 393, 505, 0, 0,
	383, 553, 318, 407, 0, 297, 440, 0, 529, 404,
	0, 512, 532, 0, 424, 303, 463, 519, 520, 813,
	818, 0, 834, 0, 307, 308, 429, 289, 437, 0,
	0, 492, 450, 448, 0, 415, 472, 0, 0, 0,
	337, 0, 332, 428, 568, 295, 547, 466, 433, 387,
	495, 524, 334, 319, 320, 363, 465, 353, 305, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 566, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 265, 0, 266, 267, 268,
	270, 271, 272, 812, 273, 274, 275, 278, 279, 280,
	282, 642, 283, 284, 285, 286, 287, 288, 0, 814,
	290, 291, 292, 293, 294, 296, 298, 299, 300, 301,
	302, 304, 306, 0, 0, 0, 817, 0, 0, 0,
	310, 311, 312, 313, 314, 315, 0, 316, 317, 321,
	323, 324, 325, 326, 327, 328, 331, 0, 333, 335,
	0, 336, 339, 0, 340, 341, 342, 343, 344, 345,
	346, 347, 0, 348, 0, 349, 350, 352, 0, 355,
	356, 357, 358, 359, 0, 360, 0, 0, 361, 362,
	364, 365, 366, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 382, 384,
	0, 385, 386, 389, 390, 391, 392, 0, 394, 0,
	0, 395, 396, 397, 0, 0, 398, 399, 400, 401,
	402, 403, 406, 0, 408, 409, 410, 411, 412, 413,
	414, 644, 416, 417, 418, 419, 420, 421, 422, 0,
	0, 423, 425, 426, 0, 0, 0, 830, 441, 442,
	443, 444, 445, 446, 447, 449, 0, 451, 452, 453,
	0, 454, 455, 456, 457, 0, 458, 459, 460, 461,
	462, 464, 467, 468, 469, 470, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 482, 483, 485, 486, 487,
	645, 488, 489, 490, 491, 0, 493, 494, 646, 496,
	497, 499, 500, 501, 502, 503, 504, 655, 0, 506,
	0, 507, 508, 509, 510, 511, 0, 513, 514, 515,
	516, 517, 518, 521, 522, 523, 525, 526, 0, 527,
	528, 0, 530, 531, 833, 533, 534, 535, 536, 537,
	0, 656, 538, 0, 539, 0, 540, 541, 542, 543,
	544, 545, 546, 548, 0, 0, 550, 551, 552, 554,
	555, 556, 557, 560, 561, 562, 563, 564, 0, 565,
	567, 569, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 571, 0, 438, 432, 388, 430, 431,
	435, 436, 439,
}

var yyPact = [...]int32{
	6800, -1000, 368, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1390, 1390, -1000,
	-1000, 3209, 1193, 16210, 16515, 13381, 3309, 91604, 75444, 1390,
	1542, 1475, 1456, 76454, 91099, 1479, 63829, 63324, 1919, 1227,
	1205, 74939, 1166, 1174, -1000, 2047, -1000, 1513, 982, 1233,
	-1000, -1000, 3868, 67869, 365, 90594, 76454, 1161, 6800, 3967,
	-1000, -1000, 2330, 3475, 67869, 3583, 3474, 1233, 76454, -1000,
	1822, 2354, 2184, 3925, 90089, 76454, 45683, 76454, 3270, 89584,
	89079, 2767, 88574, 55294, 3304, 1530, 76454, 76454, 2173, 88069,
	76454, 76454, 1172, 2552, 52768, 52768, -1000, -1000, 1572, 1567,
	-1000, -1000, -1000, 67364, 74434, 87564, 87059, 1416, 2755, 2197,
	58829, 76454, 76454, 76454, 76454, 58829, 52768, 2266, 2521, 86554,
	58829, 76454, 58829, 76454, 76454, 76454, 76454, 76454, 1529, 52263,
	51758, 76454, 86049, 3268, 76454, 76454, 1993, -1000, 85544, 85039,
	84534, 96997, 96510, 4046, 54789, 54284, 53779, -1000, -1000, -1000,
	1415, 2741, -1000, -1000, -1000, 3260, 2171, 1528, -1000, 2251,
	-1000, -1000, -1000, -1000, -1000, -1000, 1414, -1000, 77464, 73929,
	2098, -1000, -1000, 1003, 3719, 4103, 4103, 3886, 57314, 1309,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3718, 2297, 2655,
	453, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3967, 2330,
	3967, 4103, 3619, 4103, -1000, -1000, -1000, -1000, 76454, -1000,
	4103, 3470, 534, 930, -1000, 793, 793, 793, 3140, 793,
	3469, 1308, 530, 805, -1000, 3072, 1232, 43086, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1442, 3083, 46706, -1000, 76454,
	46706, -1000, 453, 3715, 2291, 2646, -1000, 46706, 76454, 2219,
	46706, -1000, -1000, -1000, -1000, -1000, -1000, 2700, 3861, 3861,
	3861, 3515, 1513, -1000, -1000, 773, 770, 982, 24640, 24640,
	-1000, 3468, -1000, 379, -1000, 417, 58324, 1171, 350, 76454,
	-1000, 974, -1000, 350, 29782, -1000, -1000, 2256, -1000, 404,
	-1000, 2212, 1764, -1000, 2532, 76454, 3243, 84029, 67869, 67869,
	765, -1000, 793, 83524, 76454, 1412, 83019, 4045, 58829, 58829,
	76454, 1527, 58829, 3007, 1986, -1000, 1875, 2633, -1000, 3962,
	4055, 414, 1019, 76454, 76454, -1000, 415, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1115, 1956, 1234, 3960, 1701, 3959, 2894, 82514, 1501,
	3957, 3066, 1701, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1406, 76454, 2041, 3467, 76454,
	974, 3956, -1000, 3048, 2579, 96023, 76454, 1701, 1701, -1000,
	-1000, -1000, -1000, 7559, 4032, 3828, 7710, 4031, 3824, 16334,
	4030, 11252, 4029, 73424, 72919, 2892, 76454, 72414, 1955, 1170,
	-1000, 417, -1000, -1000, -1000, 1954, 1953, 1946, 1949, 8303,
	1170, -1000, 417, 1939, 2855, 76454, 76454, 76454, 3466, 4028,
	6848, 2431, 6149, 1938, 1405, 2609, 3464, 3463, 76454, 1936,
	1699, 3823, 1913, 3006, 1699, 3823, 2176, 2192, 4027, 1836,
	2559, 2861, -1000, 4021, 416, -1000, 4020, 480, -1000, 3462,
	4019, 478, 4018, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	396, -1000, -1000, -1000, -1000, -1000, 1089, 2704, 1088, 1088,
	1088, -1000, -1000, -1000, -1000, -1000, 606, 656, -1000, -1000,
	2696, 1169, 2696, 2696, -1000, 2726, 2696, 478, 4016, 82009,
	3062, 164, 4014, -1000, 164, 4013, 164, 4011, -1000, 2891,
	-1000, 1835, -1000, -1000, -1000, 4045, -1000, 2612, -1000, 4081,
	55799, 404, 4103, 3065, 42058, 41544, 76454, 493, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2558, -1000, 2211,
	-1000, -1000, -1000, -1000, -1000, -1000, 81504, -1000, -1000, -1000,
	64839, 52768, 65849, 1162, 76454, -1000, 76454, -1000, -1000, -1000,
	-1000, 64839, 3004, 52768, 3003, 1232, -1000, 369, -1000, 42572,
	1161, -1000, -1000, -1000, -1000, 3072, -1000, 362, -1000, 355,
	-1000, 974, 361, -1000, 2210, -1000, 344, 3345, 3461, 417,
	4045, 4045, 4045, -1000, -1000, -1000, -1000, 341, 2705, 2988,
	2993, 1720, 3518, 2672, -1000, 29268, 2392, 33894, 3061, 982,
	-1000, -1000, 982, 982, 29782, -1000, 2700, -1000, -1000, 3472,
	204, -1000, 18925, -1000, -1000, 29782, 29782, 29782, 29782, 29782,
	2061, 3932, -1000, -1000, -1000, -1000, 23611, -1000, -1000, 417,
	1047, 752, -1000, -1000, 1159, -1000, 967, 1158, 417, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1273, 4103, 1264,
	29782, 1353, 2451, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1153, 1150, 2991, -1000, 1149, 1148, 1145, 1143, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1138, 1137, 1136, 1135,
	1134, 1127, 1124, 1123, 1121, 1118, 1117, 1113, 1112, 1110,
	1109, 1108, 1107, 1105, 1104, 1102, 1101, 975, 1100, 1099,
	1098, 1097, 1096, 1091, 1090, -1000, 2696, -1000, 2696, 2696,
	1088, 1088, 1089, -1000, -1000, 2726, 2696, 1088, -1000, -1000,
	656, 606, -1000, -1000, -1000, -1000, -1000, 475, 1079, -1000,
	417, -1000, 18109, 29782, -1000, 76454, 29782, 76454, 350, 4084,
	76454, 340, 15928, -1000, 2602, 2330, -1000, 1846, -1000, -1000,
	-1000, 1146, 4083, 56304, -1000, 76454, 3368, 3366, 3688, 3556,
	851, 3955, 793, 76454, 2899, 3954, 80999, -1000, 1078, 1078,
	2460, 76454, 1072, 96023, 2247, 1788, -1000, 52768, 4043, 4004,
	96023, -1000, 401, 19972, -1000, 19972, 3871, 3359, 44096, -1000,
	739, 76454, 76454, 76454, 76454, -1000, 76454, 4003, -1000, -1000,
	-1000, 4002, 76454, 874, 3950, 1419, 4103, 3999, 50748, 3949,
	-1000, 80494, 3458, 2198, 52768, 76454, 1506, 3454, 3998, -1000,
	64334, 1019, 4103, 4082, 2990, -1000, -1000, 211, -1000, 1694,
	-1000, 2034, 2033, 60327, 1645, 1640, 3084, 880, 3452, 1883,
	1580, 76454, 2498, 76454, 3058, 3687, 829, 2389, 1803, -1000,
	1060, 67869, 1614, 211, -1000, 3686, 2023, 76454, 1613, 211,
	3684, 2899, -1000, 2594, 96023, 916, -1000, 3514, -1000, 916,
	916, 3513, 2140, 1701, 1701, -1000, 76454, 211, 1719, 76454,
	10358, 3994, 3819, 10013, 3992, 76454, -1000, 895, -1000, 3682,
	-1000, 62331, 417, 3680, 3679, 3678, 3134, -1000, 3163, 3881,
	1717, 3081, 3676, 5957, -1000, 3450, 3780, -1000, -1000, -1000,
	-1000, 1739, 2376, -1000, 2199, 916, 916, 76454, -1000, 76454,
	79989, -1000, -1000, 417, 3675, 3164, -1000, -1000, 1909, 3356,
	3355, 76454, 76454, 3674, 5957, 3673, 51253, 65344, 65344, 3670,
	5957, 3669, 3667, 1285, -1000, 3805, 3666, 892, 4103, 1987,
	1985, 1979, -1000, -1000, 1019, 76454, 76454, 1997, 3665, -1000,
	2191, 2539, 2191, 3664, 50748, -1000, 2191, 2191, 3662, 829,
	829, 3661, 1648, 76454, 76454, 76454, 76454, 76454, 2778, 2708,
	2702, 1058, 334, -1000, 2662, -1000, 10141, 2175, 76454, 76454,
	-1000, -1000, -1000, 76454, 76454, -1000, 76454, 76454, 96023, -1000,
	96023, -1000, 451, 29782, -1000, 4096, -1000, -1000, -1000, -1000,
	4096, -1000, 3723, 3701, 4096, -1000, 1050, -1000, 4096, -1000,
	-1000, 2696, 2696, -1000, -1000, 96023, 416, 3991, 50748, 3989,
	52768, 52768, 52768, 52768, -1000, -1000, -1000, -1000, -1000, 76454,
	4081, 1478, -1000, -1000, -1000, -1000, 333, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4130, 4123, -1000, -1000,
	333, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 76454, -1000, 3660,
	301, 76454, 76454, 1852, 58829, 58829, 58829, 76454, 76454, 76454,
	2936, 76454, 76454, 76454, 76454, 1740, -1000, 400, -1000, 76454,
	338, -1000, 325, 3582, 63829, 223, 65849, -1000, 1232, 46706,
	-1000, -1000, -1000, 3069, 76454, 76454, -1000, 76454, -1000, 76454,
	-1000, 76454, 76454, 76454, 76454, 76454, -1000, -1000, -1000, -1000,
	-1000, -1000, 1721, 3533, -1000, 1323, -1000, 1672, -1000, -1000,
	330, 15928, -1000, 35436, -1000, -1000, -1000, 1983, 15928, -1000,
	33380, 33380, 1753, 76454, 2304, -1000, 2304, 177, -1000, 6451,
	2705, 2988, 3581, 71909, 24640, 96023, 76454, 3700, 29782, 29782,
	29782, 29782, 29782, 29782, 29782, 29782, 29782, 29782, 29782, 29782,
	29782, 29782, 29782, 29782, 3746, 29782, 3657, 5737, -1000, -1000,
	3656, 1007, 1754, 19972, -1000, -1000, 1035, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 900, 900, 518, 6003, 6003, 867, 1047, 3866, 417,
	15883, 328, 439, 417, -1000, -1000, -1000, 25155, 29782, 44096,
	28753, 417, -1000, 22066, -1000, 1653, 4096, 3730, 15928, 2451,
	3480, 1278, 1038, 29782, 29782, 1036, 4096, 4096, 4096, 4096,
	29782, 2045, 29782, 29782, 34922, 29782, 29782, 24126, 29782, 29782,
	29782, 29782, 29782, 2125, 29782, 2558, 36464, 2111, 29782, 28239,
	23096, 29782, 29782, 29782, 745, 29782, 29782, 29782, 2558, 3581,
	29782, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15768, -50,
	743, 322, -1000, 3352, 321, 29782, -1000, 76454, 3700, 29782,
	29782, 29782, 29782, 3657, 5737, 3656, 1007, 1035, -1000, -1000,
	-1000, 1693, 1973, -1000, 3449, -1000, 3139, 49233, 3279, 76454,
	501, -1000, 1198, 76454, -1000, -1000, 3543, 39014, 39014, 3090,
	3090, -1000, -1000, 60832, 76454, 3057, 3988, 3899, 1023, -1000,
	2899, 2424, 3987, 3448, 3946, -1000, 11889, 61842, 6521, 1841,
	-1000, -1000, 3054, 2674, 1019, -1000, 59839, 2237, 76454, 76454,
	1376, -1000, -1000, -1000, -1000, -1000, -1000, 2046, 76454, -1000,
	19972, -1000, 320, -1000, 1196, 2983, 76454, -1000, 76454, 1020,
	1019, 1019, 1019, 1019, 1019, -1000, 76454, 1867, 76454, 1573,
	60832, 3051, 3986, 2446, -1000, -1000, 76454, 1722, -1000, -1000,
	3985, 2480, 4073, 3941, 793, 19972, 4120, -1000, 4072, 2595,
	40529, 76454, 1623, 577, -1000, 67869, 3818, 409, 793, -1000,
	379, -1000, 1977, 96023, 4103, 2480, 2480, 2884, 76454, 76454,
	76454, -1000, 76454, 76454, -1000, 3940, 79484, -1000, 96023, 76454,
	-1000, 1016, 3363, 1322, 1320, 3324, 71404, 76454, 78979, 78474,
	76454, 1590, -1000, -1000, 2170, 76454, -1000, 19972, 76454, 66859,
	1581, 1569, 76454, 2207, 66354, 76454, 2206, -1000, 76454, 1800,
	-1000, -1000, 52768, -1000, 3181, 2204, 20483, 6544, 76454, 76454,
	76454, 10006, 76454, 76454, -1000, -1000, -1000, -1000, -1000, -1000,
	916, -1000, -1000, -1000, 76454, 76454, 916, 916, 13865, 76454,
	76454, 8846, 211, 1708, 76454, 1610, 211, 1707, 67869, 1598,
	76454, 298, -1000, -1000, 95049, 92614, -1000, 2064, -1000, -1000,
	-1000, 396, -1000, 97484, 76454, 76454, 76454, 76454, 76454, -1000,
	3777, 77969, 29782, 3770, -1000, 76454, -1000, 1015, 3769, 76454,
	76454, -1000, -1000, -1000, 3768, 3446, 2374, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2619, 1666, 52768, 52768, 3653,
	76454, 76454, 2196, 3440, 76454, -1000, 76454, -1000, 318, 318,
	318, 76454, -1000, 76454, 76454, -1000, -1000, -1000, 76454, -1000,
	76454, -1000, 3905, 76454, 76454, -1000, 1908, 1901, 3652, -1000,
	2052, -1000, 52768, 2443, -1000, 77464, -1000, 76454, -1000, 52768,
	1703, 2443, -1000, -1000, 76454, -1000, -1000, 76454, 897, 3237,
	1899, 1898, 1893, 1882, 76454, 76454, 4103, 4040, 76454, 4103,
	76959, 19972, 2853, 76454, 3650, 76454, 76454, 58829, 1009, 96023,
	58829, 45154, 58829, 58829, 2980, 96023, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 63829, 62819, 1776, 2134, 416, -1000,
	480, -1000, 3914, 3437, -1000, 478, -1000, 295, 742, 734,
	3709, 3703, 728, 29782, 725, -1000, -1000, 478, -1000, 76454,
	1697, 2979, -1000, 164, 164, 164, 3907, 2330, 42572, -1000,
	-1000, -1000, -1000, -1000, 50243, 76454, 301, 301, 2887, 76454,
	317, -1000, 317, 317, 187, 305, 187, 916, 315, 406,
	-1000, 187, 187, 305, 3813, 3809, 3803, 3797, 3787, -1000,
	19972, 3511, 294, 76454, -1000, -1000, 50243, 3436, 303, 3914,
	500, -1000, -1000, 76454, -1000, -1000, -1000, -1000, 3345, -1000,
	-1000, -1000, -1000, -1000, -1000, 3198, -1000, 29782, 1983, 3557,
	-1000, 4140, 4140, 986, -1000, 23611, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2188, 301, 29782, 1597, 1221,
	-1000, -1000, -1000, -1000, 3540, 39014, -1000, 3523, 3523, 1566,
	1557, 3523, 76454, -1000, -1000, -1000, -1000, 3651, -1000, 312,
	312, 374, 374, 374, -1000, 5679, 5679, 5679, 5679, 5679,
	5679, 518, 6003, 566, 1863, 29782, 29782, 3649, 3647, 1007,
	1782, 29782, -1000, 4200, -1000, -1000, -1000, 3579, -1000, -1000,
	2084, 2908, -1000, -1000, -1000, -1000, 2795, 34922, 34922, -1000,
	-1000, -1000, 23611, 1006, -1000, -1000, -1000, -1000, 44096, -1000,
	1001, 29782, -1000, -1000, 3839, -1000, -1000, 29782, 99, 96,
	-1000, -1000, 292, 724, 290, -1000, -1, -1000, 723, 29782,
	29782, 29782, -1000, 15928, 4106, -1000, -1000, 3644, -1000, 3643,
	3640, 3639, -1000, 1000, 718, 2713, -1000, 29782, 1278, 991,
	-1000, 57819, 3550, 2838, 2776, 428, 1272, 15695, 29782, 715,
	714, 709, 708, 15604, 707, 3578, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5650, 704, 703, 15042, 297, 701,
	5626, -1000, 34922, 34922, 34922, 986, 698, 693, 6597, 14937,
	27725, 27725, 27725, 687, 14800, 29782, 106, 5880, 288, 287,
	284, 280, 19972, 277, -1000, 14729, 29782, 2909, 19972, 5752,
	276, 391, 686, -1000, 96023, 428, 384, 1239, 682, -1000,
	417, 2908, 14675, 3179, -1000, 293, 291, 273, 29782, 3540,
	274, -1000, 29782, -1000, -1000, 985, -1000, 3301, -1000, 15928,
	-1000, -1000, -1000, 3186, 3170, 2773, -1000, -1000, 272, -1000,
	-1000, -1000, -1000, 3543, 56304, 29782, 270, -1000, 417, 3186,
	32866, 98, 3299, 68879, 68879, 41034, -1000, 37989, 70394, 68879,
	68879, 1216, 3576, 984, 980, 417, -1000, -1000, -1000, 978,
	975, 3343, 3210, -1000, 3210, 680, 260, -1000, -1000, -1000,
	-1000, 76454, 835, 76454, 76454, 4071, 829, 76454, 76454, 67869,
	3984, 93101, 2031, 6521, -1000, 4103, 57314, 2978, -1000, -1000,
	266, -1000, -1000, 1671, 2031, 3434, -1000, -1000, -1000, 3047,
	-1000, -1000, 1841, -1000, 678, -66, 3510, 264, -1000, -1000,
	-1000, 1180, 76454, 2397, 793, 76454, 4043, 1791, 1832, 2616,
	-1000, 1964, -1000, -1000, 19972, 20994, 1504, -1000, 675, 250,
	-1000, 96023, 4103, -1000, -1000, -1000, -1000, -1000, 1002, -1000,
	76454, 57314, 57314, -1000, 1701, 1281, 1573, -1000, 76454, 1612,
	76454, 673, 76454, 76454, 2553, 1501, 76454, 2976, -1000, -1000,
	4096, 52768, 52768, 2165, 3788, 2011, 2010, -1000, -1000, 3520,
	1435, 52768, 1233, 3983, 3318, 2706, 3899, 2974, 4135, 2379,
	-1000, -1000, 489, -1000, 417, -1000, 29782, 974, 3905, -1000,
	65344, 793, 1771, 409, 3541, 3541, 76454, 672, 3638, -1000,
	-1000, 3637, 3632, 3042, 2709, 3980, -1000, 3936, 1633, 1472,
	29782, 973, -1000, 2352, 1083, 971, 970, 76454, 1858, 3234,
	-1000, 3978, 3914, 3977, 3914, -1000, -1000, -1000, 70899, -1000,
	262, -1000, 467, -1000, -1000, -1000, -1000, 76454, 76454, 76454,
	76454, -1000, 1738, -1000, -1000, -1000, -1000, 1734, -1000, 2201,
	-1000, -1000, -1000, -1000, -1000, 2349, 1702, 256, -1000, -1000,
	19972, 19972, 19972, 4103, -1000, 211, -1000, 1685, 2325, -1000,
	-1000, 211, 3631, 2322, -1000, -1000, -1000, -1000, -1000, -1000,
	211, 3630, 2899, -1000, 3629, 211, 1698, 76454, 76454, 8586,
	76454, 76454, 76454, 7826, 3627, 1285, 1573, -1000, -1000, 92614,
	95049, -1000, 95049, -1000, 396, -1000, 386, 414, -1000, -1000,
	-1000, -1000, 3626, -1000, 3914, 3975, 15928, -1000, 1735, 29782,
	-1000, -1000, -1000, 2319, 3763, -1000, -1000, -1000, 164, 76454,
	1872, 2236, 3623, 3326, 52768, 76454, -1000, -1000, -1000, -1000,
	-1000, -1000, 505, -1000, 505, 505, 3622, 3620, 76454, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 76454, -1000, -1000, -1000,
	-1000, -1000, 4096, 4096, 1647, 3616, 3614, 3613, 3612, -1000,
	3611, 3610, 4103, 3935, 3914, -1000, 3974, 3914, 249, -1000,
	1187, -1000, 2661, 2657, 3228, -1000, 57314, -1000, -1000, -1000,
	96023, -1000, -1000, -1000, 76454, 76454, 968, -1000, -1000, 96023,
	-1000, 3433, 3432, 1306, 76454, 52768, 52768, -1000, -1000, -1000,
	76454, -1000, -1000, -1000, 1212, -1000, -1000, 1212, 246, -1000,
	-1000, 416, 76454, 50748, -1000, 2248, 404, -1000, 408, -1000,
	-1000, 52768, -1000, 76454, 187, 58829, 245, -1000, 76454, 76454,
	1770, 1752, 1751, 1744, 1700, 254, -1000, 1741, 52768, -1000,
	-1000, 173, 64839, -1000, 52768, -1000, -1000, -1000, -1000, 3555,
	-1000, 1547, -1000, -1000, 27211, 243, -1000, -1000, 1221, -1000,
	956, -1000, 3249, 3479, 29782, 98, 76454, -1000, 76454, 3523,
	3523, 3523, 3523, 76454, -1000, 29782, 29782, 1636, 919, 29782,
	34922, 34922, -1000, 29782, 881, -1000, -1000, -1000, -1000, 3573,
	-1000, -1000, 2081, 2908, 29782, -1000, -1000, 1446, 1445, -1000,
	-1000, -1000, -1000, 3034, 2311, 244, -1000, 23611, 668, 26697,
	242, -1000, 417, 14360, -1000, -1000, 883, -1000, -1000, -1000,
	667, 26183, -1000, -1000, 1268, -57, -57, 29782, 29782, 2144,
	1921, 1772, 1746, 4096, 4103, 2501, -1000, 29782, 14136, -1000,
	1268, -1000, -1000, 92109, 29782, 2908, 3430, 3429, 29782, 29782,
	2837, 3509, -1000, -1000, 2723, 13699, -1000, -1000, -1000, -1000,
	96023, -1000, 29782, -1000, 2151, -1000, -1000, 29782, 29782, -1000,
	96023, 34922, 34922, 34922, 34922, 34922, 34922, 34922, 34922, 34922,
	34922, 34922, 34922, 34922, 2775, 34922, 967, 441, 441, 441,
	-1000, -1000, 25669, 29782, 29782, 96023, 666, 664, 663, -1000,
	29782, 106, 29782, -1000, -1000, -1000, -1000, 236, -1000, 29782,
	19972, 616, 661, 37484, 226, 1420, -1000, 2908, 29782, -1000,
	1239, 3179, 29782, 3428, 3427, 3179, -1000, 660, -1000, 659,
	29782, 29782, 29782, 13533, 3479, -1000, 1004, 15928, 1233, -1000,
	-1000, 24640, 976, 1233, 1482, 76454, 417, 3186, -1000, 15928,
	1186, 76454, -1000, 15928, 3045, 39014, 3389, 3384, 39014, 3357,
	3360, 3360, 3360, -1000, 1562, -1000, 76454, 965, -1000, 68879,
	70394, 68879, 68879, 53273, 658, 3299, -1000, -1000, 56809, 964,
	-1000, -1000, -1000, 3027, 961, 36974, 29782, 417, 22066, 29782,
	1701, -1000, -1000, -1000, 3344, 2336, 60832, -1000, 2017, 61337,
	835, 847, 1233, -1000, 215, 2899, 3324, 76454, 6521, 960,
	-1000, -1000, -1000, 2665, 29782, -1000, -1000, 239, -1000, 225,
	1499, -1000, 92614, 29782, 29782, -1000, 76454, 1841, 76454, 3425,
	-1000, -1000, 3508, 92614, 92614, -1000, 4133, 20994, 959, 76454,
	3899, 958, 52768, 4043, -1000, 76454, -1000, -1000, 76454, 2732,
	-1000, 3932, 1319, 957, 34922, 76454, 2813, -1000, 2452, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 956, 4130, 4123,
	96023, -1000, 76454, 3869, 653, 221, -1000, -1000, 76454, -1000,
	-1000, -1000, -1000, -1000, 945, -1000, -1000, 414, -1000, -1000,
	-1000, 2336, 835, 692, 2885, 1419, 1281, 50748, -1000, 164,
	164, 52768, 52768, -1000, -1000, 4103, 4103, 947, 4103, 164,
	3907, 76454, 3899, 76454, 2093, 76454, -1000, 3607, 3241, -1000,
	76454, 39014, 40529, 13459, 3426, -1000, -1000, 3541, 69889, 3541,
	-1000, 942, -1000, 505, 2902, 4103, 76454, 76454, -1000, 3277,
	-1000, -1000, -1000, 76454, 3973, 2585, -1000, 69384, -1000, 3324,
	13385, 76454, 2448, 76454, 76454, -1000, 76454, 39519, -1000, -1000,
	2650, 8295, 829, 2409, 2146, 1490, -1000, -1000, 1701, 1644,
	2448, 76454, -1000, 76454, -1000, -1000, -1000, -1000, -1000, 19972,
	20994, 19972, -1000, -1000, -1000, -1000, -1000, -1000, 1689, 76454,
	-1000, -1000, 20483, -1000, -1000, -1000, -1000, -1000, 76454, 76454,
	76454, 1609, 3507, 76454, 1607, 3505, 76454, 76454, 76454, 76454,
	-1000, 3606, 211, 1691, 2312, -1000, 3603, 211, 1688, 76454,
	-1000, -1000, -1000, -1000, 1489, 383, 76454, -1000, 76454, -1000,
	12773, 2448, -1000, 2309, -1000, 3602, 3601, 1968, 2644, 76454,
	3919, 932, 164, 1868, -1000, -1000, -1000, 76454, 76454, -1000,
	1285, 897, 76454, 76454, 76454, 76454, 76454, 4103, 2629, 3972,
	-1000, 76454, -1000, 19972, -1000, 21530, 1476, 2547, -1000, 4069,
	3332, 3330, -1000, 95536, 2223, 1862, 1862, 2973, 187, 164,
	164, 3914, -1000, -1000, -1000, -1000, -1000, 1696, -1000, 2544,
	2404, 50243, 2406, -1000, 187, -1000, 916, 406, -1000, 76454,
	76454, 76454, 76454, 76454, -1000, 19972, -1000, -1000, -1000, -1000,
	-1000, 3914, 3572, 223, -1000, 1546, -1000, 212, -1000, 29782,
	-1000, 44096, -1000, -1000, 3477, 3504, 15928, -1000, -1000, 76454,
	76454, 76454, 76454, -1000, 454, 576, 29782, 29782, 634, 1642,
	1344, 576, 29782, 29782, -1000, -1000, 1183, 2286, 2284, 29782,
	29782, -1000, 12460, -1000, 202, -1000, 29782, -1000, -1000, 4103,
	29782, -1000, 651, 648, 635, 15928, 15928, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 633, -1000, -1000, 15928, 29782, 632,
	2018, -1000, 12365, 3179, 3762, 3760, -1000, -1000, 3179, 29782,
	2797, -1000, 631, 15928, 629, 12126, -1000, 234, 234, 373,
	373, 373, -1000, 560, 560, 560, 560, 560, 560, 441,
	3571, 2744, -1000, 4247, 12029, 11439, 11347, 628, -1000, -1000,
	-1000, 106, 11262, -1000, 32352, -1000, -1000, 626, 1369, 1368,
	-1000, 3487, 36464, 2759, -1000, 29782, 210, 31838, 3179, -1000,
	-1000, 617, -1000, 3759, 3756, 614, -1000, -1000, 11051, 11051,
	11051, 96023, 3477, -1000, 607, 204, 3113, 39519, 3080, -1000,
	-1000, 3139, -1000, -1000, 29782, -1000, 76454, 3299, 39014, 39014,
	3412, 3379, 39014, -1000, -1000, -1000, -1000, -1000, 58829, 921,
	76454, -1000, -1000, -1000, -1000, 68879, 909, 76454, 76454, -1000,
	46201, 2909, 899, 200, -1, 10992, 868, 1701, 2790, -1000,
	2017, 898, -1000, 2394, 3318, -1000, 3496, 201, -1000, -1000,
	-1000, 3921, 3042, 60832, 76454, 3044, 3901, 3899, -1000, 890,
	3424, 2031, 97484, -1000, 15928, 4103, 2967, 96023, -1000, 15928,
	15928, 1940, -1000, 56, 76454, 92614, -1000, 199, -1000, 1180,
	-1000, 3549, 2323, 4068, 76454, -1000, 1736, -1000, -1000, -1000,
	3905, 3905, 29782, 4247, 793, 4067, -1000, 3858, -1000, -1000,
	3327, -1000, -1000, 76454, -1000, 4103, -1000, 1867, 19972, 401,
	1686, 3042, 60832, 3035, 76454, 2426, -1000, 1683, 164, 164,
	-1000, -1000, -1000, -1000, -1000, 4066, 1558, -1000, 58829, -1000,
	-1000, 2724, -1000, 3672, 3326, 52768, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 98, -1000, -1000, 40529, -1000, -1000, -1000,
	-1000, 29782, -1000, 1550, 2437, 3569, -1000, -1000, 3562, -1000,
	76454, 1281, -1000, 68374, -1000, -1000, -1000, 194, -1000, 1662,
	-1000, 2450, 2345, -1000, 191, 2448, 184, 183, -1000, 3920,
	946, 3862, 29782, 3754, 4039, 4037, -1000, -1000, 2813, 3753,
	4063, 897, -1000, -1000, -1000, -1000, 2813, -1000, 6946, 96023,
	916, 897, 3914, 3914, -1000, -1000, 1179, -1000, -1000, -1000,
	-1000, 3600, 3599, 76454, 52768, -1000, 76454, 52768, -1000, -1000,
	-1000, 3597, 76454, 76454, 76454, 1604, 3492, 76454, 76454, 76454,
	-1000, -1000, 1470, -1000, 3914, -1000, -1000, 76454, 76454, -31,
	-1000, 4096, 4096, 96023, 198, -1000, 4096, 4096, -1000, -1000,
	1261, 29782, 3595, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3914, -1000, 4103, 4103, -1000, 3914, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 96023, 96023, 76454, 76454, 179,
	188, 76454, 3593, -1000, -1000, -1000, -1000, -1000, -1000, 3568,
	63829, -1000, 76454, -1000, -1000, -1000, 1293, -1000, 187, 187,
	187, 187, 187, -1000, -1000, 50243, 3914, -1000, -1000, 10689,
	602, 1356, 29782, 3861, -1000, -1000, -1000, -1000, 576, 576,
	29782, 29782, 29782, 576, 1183, -1000, -1000, 576, 576, -1000,
	-1000, 10617, -1000, 1268, -1000, -1000, -1000, -1000, 15928, -1000,
	1268, 3488, -1000, 599, -1000, -1000, 597, 177, 76454, -1000,
	-1000, 29782, 34922, 3565, -1000, 29782, 29782, 29782, -1000, -1000,
	176, 172, 882, -1000, -1000, -1000, -1000, 2759, 3487, -1000,
	-1000, 10419, 587, 1643, 15928, 2772, 555, -1000, -1000, -1000,
	-1000, 3179, 29782, 3082, 3179, 2136, 1356, 3257, 3109, 171,
	-1000, 76454, 2765, 15928, -1000, -1000, -1000, 3412, -1000, 879,
	29782, 39014, -1000, 873, 76454, 169, -1000, 76454, 168, 166,
	96023, 165, -1000, 4062, 3041, 34408, 29782, 553, 3222, -1000,
	3966, 3966, 3208, -1000, 3364, 19972, 868, 4103, 3318, 76454,
	2333, 2333, 2873, 76454, -1000, 61337, 1964, 1284, 2017, 549,
	835, 76454, -1000, 1687, 4061, 39519, 67869, -1000, 161, -1000,
	95049, -1000, 1837, -1000, 1457, -1000, 2965, 1471, 3561, 153,
	-1000, 547, 1658, 1656, 1543, 76454, 1233, 151, 4043, -1000,
	3752, 3319, 3319, 9959, 2178, 712, -1000, 76454, -1000, -1000,
	147, -1000, 76454, 1680, 546, 76454, 1281, 2541, 76454, 1233,
	-1000, 76454, 858, 2093, 76454, 856, 3919, 164, 442, 9716,
	58829, 4057, 4057, 76454, 853, 850, 849, -1000, -1000, -1000,
	-1000, 2448, 2366, -1000, -1000, -1000, -1000, -1000, 2366, 1966,
	2366, 39519, 44625, -1000, 76454, 76454, -1000, 9642, -1000, 3971,
	3969, -1000, -1000, 846, -1000, 4060, 3869, -1000, -1000, -1000,
	-1000, 20994, 76454, 76454, 2074, 385, 2074, 377, 76454, -1000,
	-1000, 3592, 76454, 52768, -1000, -1000, 3591, -1000, -1000, 2448,
	-1000, -1000, 1968, 44096, 43591, -1000, 2644, 842, 839, 838,
	9577, 76454, -1000, -1000, -1000, -1000, 3869, 529, -1000, -1000,
	-1000, 94562, 96023, -1000, 50243, 50243, 3408, -1000, -1000, 173,
	-1000, -1000, -1000, -1000, 76454, 15928, 30810, 576, 576, 576,
	-1000, 528, 2295, 29782, -1000, -1000, -1000, 9364, 1509, 34922,
	15928, 15928, 15928, -1000, 29782, -1000, 29782, -1000, -1000, -1000,
	1485, -1000, -1000, 2851, 146, -1000, 4058, 519, 3404, 29782,
	-1000, -1000, -1000, -1000, -1000, -1000, 2889, 3082, 515, -1000,
	2357, -1000, 3244, 3264, 3224, -1000, 3540, 39519, -1000, 1233,
	-1000, 76454, 15928, -1000, 29782, 145, -1000, 143, -1000, -1000,
	1216, 46201, -1000, 837, 76454, 140, -1000, 498, 34922, 9294,
	-1000, -1000, -1000, 3130, 29782, 3119, -1000, 3135, -1000, -1000,
	-1000, 4055, 4055, -1000, -1000, 4055, 4055, 2962, 4103, 133,
	-1000, 38499, 3540, -1000, 2873, 126, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3310, 829,
	1311, 836, -1000, -1000, 3318, 2336, 2017, 835, 1292, 1260,
	1259, 1233, 125, 3324, 97484, 6521, -1000, -1000, 367, -1000,
	-1000, 96023, 3729, 2516, 1471, -1000, 2124, -1000, -1000, -1000,
	76454, -1000, -1000, 3918, 3910, -1000, -1000, 76454, 1430, -1000,
	3901, 3899, -1000, 2348, -1000, 2094, 3396, 2015, 815, 29782,
	2465, -1000, 19972, 1281, 76454, 2336, 835, -1000, 2880, 1281,
	3907, -1000, 512, 58829, -1000, 4119, -1000, 39014, -1000, 4057,
	-1000, 2455, -1000, -1000, 59334, 29782, 29782, 1964, 3905, 834,
	3905, 76454, 3905, -1000, -1000, 830, 3238, 829, -1000, 3862,
	-1000, -1000, 29782, 2384, 3320, -1000, -1000, -1000, -1000, -1000,
	1584, -1000, 1583, -1000, 76454, 2074, 370, 76454, -1000, 910,
	2955, -1000, 96023, -1000, 96023, 96023, 29782, -1000, -1000, 3914,
	-1000, 507, 499, 494, 408, 410, 1862, 3914, 141, -1000,
	4056, 139, -1000, 15928, -1000, -1000, -1000, -1000, 22581, 828,
	823, 595, -1000, 486, 31324, 31324, 31324, 106, 29782, 1509,
	122, 111, -1000, 2762, 2809, 2882, 2959, 29782, 19972, -1000,
	2943, 15928, -1000, -1000, 477, 3403, -1000, -1000, -1000, 76454,
	3251, 3212, 56304, -1000, -1000, -1000, 110, 109, -1000, -1000,
	-1000, -1000, 76454, 92, -1000, 94075, 34408, 103, 19972, 4247,
	2960, 76454, 3126, 15928, 3118, 3485, 4103, 4103, 4103, 4103,
	48728, 3742, 48223, -1000, -1000, 19972, -1000, -1000, -1000, -1000,
	-1000, 49738, -1000, 3310, -1000, 1558, 2591, -1000, -1000, 40024,
	1964, 2873, 2017, 3318, 3042, -1000, 1291, 1288, 3901, 2365,
	821, -1000, 2031, -1000, -1000, 2487, 820, 1669, -1000, -1000,
	4055, -1000, -1000, 2542, -1000, 2427, 2425, -1000, -1000, -1000,
	4052, 1582, -1000, 2344, -1000, 3402, 3399, 3195, -1000, -1000,
	-1000, -1000, 2899, 9187, 4051, 76454, -1000, -1000, 1281, 1679,
	3042, 76454, -1000, -1000, -1000, 818, 91, -1000, 98, -1000,
	-1000, -1000, 84, -1000, 4096, 76, 68, 3319, 76454, 3319,
	793, 3319, 44096, 1221, 3238, -1000, 8927, 815, -1000, 29782,
	76454, 76454, -1000, -1000, 1577, -1000, 1969, 1692, 1969, 61,
	-1000, 57, 50, 8388, -1000, -1000, -1000, -1000, -1000, -1000,
	3560, -1000, 76454, 814, 30810, -1000, 29782, 29782, 812, -1000,
	2493, -1000, 35950, 2095, 1795, 7616, 2493, 2493, 15928, -1000,
	-1000, -1000, 3082, 2835, 2820, -1000, 2868, -1000, 2843, 2862,
	2848, -1000, -1000, -1000, -1000, 2904, 364, 3484, 3483, 394,
	4049, 1857, 40, -1000, 76454, 3088, 3026, -1000, 36464, -1000,
	3040, -1000, -1000, -1000, 3097, 3206, -1000, -1000, 3095, 912,
	3121, -1000, -1000, -1000, -1000, 56, -1000, 47718, 56, -1000,
	-1000, 38, -1000, -1000, 1558, -1000, 2353, 37, -1000, 946,
	3862, 29782, 3310, 3318, 2873, 2017, -1000, -1000, -1000, 3932,
	811, 39519, -1000, 2093, 29782, -1000, -1000, -1000, 76454, 2508,
	58829, 58829, 1233, 76454, -1000, -1000, 3183, -1000, 3190, 2458,
	2458, 3192, 1621, 1968, -1000, -1000, 76454, 1678, 1281, 476,
	-1000, 4118, -1000, 59334, -1000, -1000, 3587, -1000, 34, -1000,
	2178, 3540, 472, -1000, 1221, -1000, -1000, 15928, 2074, 2074,
	76454, -1000, -1000, -1000, 3482, -1000, 58829, 96023, -1000, -1000,
	-1000, 50243, -1000, -1000, -1000, 27, 20, 30810, -1000, 1935,
	3965, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 471, 3398,
	3397, -1000, -1000, 2841, -1000, 2819, -1000, 3082, -1000, 76454,
	76454, 76454, -1000, -1000, 76454, -1000, 810, -1000, -1000, 3088,
	-1000, 34922, 34922, 3739, -1000, 34922, -1000, 2909, 809, -1000,
	56304, -1000, -1000, 3139, 76454, 3276, 806, -1000, -1000, 56,
	-1000, -1000, 49738, -1000, -1000, 3018, 3017, -1000, 40024, 76454,
	76454, 8254, 1558, 2873, 3310, 3318, 3899, 39519, 14, 58829,
	7841, -1000, -1000, 1784, 51, 17, 3901, -1000, -1000, 2679,
	-1000, -1000, 3758, -1000, -1000, -1000, -31, 1281, 76454, -1000,
	-1000, -1000, -1000, 799, 2448, -1000, 2448, 3396, -1000, -1000,
	-1000, -1000, -1000, 2074, 76454, -1000, -1000, 410, -1000, -1000,
	6, 1781, -1000, -1000, 1327, 30296, -1000, 2816, 2814, -1000,
	-1000, 3394, 3347, 363, 356, -1000, 29782, -1000, 4247, 4247,
	-1000, 4247, 3039, 75949, -56, 2758, 3, -1000, 29782, -1000,
	-1000, -1000, -1000, -1000, -1000, 3862, -1000, 3310, 1558, 2873,
	1558, 2, -1000, 2365, 794, -1000, 3729, 3558, 3554, -1000,
	-1000, 793, 793, -1000, 1281, 29782, -1000, 2448, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2804, 2799, 2911, 47213, 76454,
	76454, 76454, 7672, 76454, -2, -1000, 93588, 3013, 3272, 3159,
	-10, 76454, 1558, -1000, 3310, 3540, -1000, 39519, 3932, 19461,
	2475, 1655, 1654, -1000, -1000, -1000, -21, 2448, -1000, -1000,
	-1000, 3855, 995, -1000, -1000, -1000, -1000, -1000, -43, 3082,
	75949, 3023, 1714, 4110, -1000, -1000, -1000, 3139, -1000, -1000,
	-1000, 1558, -1000, -1000, 3899, -55, -1000, -1000, -1000, -1000,
	-1000, 2093, 3893, 3879, -1000, 47213, 29782, -1000, 469, -1000,
	-1000, 2851, 3011, 3011, 4108, 3123, 2746, -1000, 1558, -1000,
	19461, 58829, 2421, 2413, 3313, -57, -1000, 2809, 2851, 3082,
	-1000, 789, 76454, 3272, 3540, -1000, 785, 58829, 58829, 76454,
	463, 3082, 2809, -1000, 75949, 3029, -1000, -1000, 19461, -1000,
	-1000, -1000, 4103, -1000, 3082, -70, 784, -72, -1000, -1000,
	75949, -1000, -91, -1000,
}

var yyPgo = [...]int16{
	0, 4652, 4649, 3143, 149, 0, 141, 7363, 4647, 91,
	313, 362, 4640, 297, 118, 695, 163, 361, 375, 3947,
	9801, 9370, 129, 4631, 315, 4631, 4630, 373, 341, 235,
	4629, 249, 4627, 4624, 164, 232, 4623, 296, 4622, 420,
	4620, 39, 4614, 4611, 290, 173, 385, 409, 407, 403,
	4610, 354, 384, 355, 348, 4609, 7369, 2473, 3595, 11,
	4607, 4606, 599, 4605, 4604, 4603, 335, 4602, 291, 4601,
	4600, 4595, 4592, 12, 376, 4592, 4588, 339, 4584, 4583,
	4581, 106, 4580, 4578, 4574, 4572, 233, 333, 338, 4571,
	525, 337, 588, 172, 860, 10627, 4569, 369, 263, 2570,
	226, 4567, 4565, 12184, 4564, 4563, 12030, 11715, 11698, 4562,
	9716, 4181, 128, 257, 312, 4561, 302, 306, 418, 65,
	379, 6, 487, 378, 4560, 4558, 4555, 165, 4554, 4549,
	60, 55, 342, 4548, 4546, 83, 31, 59, 408, 382,
	4544, 4543, 411, 4541, 4539, 10460, 67, 236, 4538, 282,
	4535, 344, 347, 63, 52, 4534, 343, 274, 278, 41,
	299, 213, 56, 222, 345, 4533, 4531, 4530, 4527, 350,
	280, 87, 8039, 410, 404, 228, 223, 220, 200, 4525,
	187, 179, 4521, 4517, 4516, 4514, 4512, 4511, 4510, 4509,
	46, 32, 4508, 4506, 277, 293, 285, 328, 4505, 334,
	142, 10, 29, 152, 138, 4504, 4503, 4502, 4501, 20,
	77, 22, 4500, 4499, 4497, 374, 4494, 413, 4493, 4490,
	4489, 327, 4488, 4487, 4486, 171, 4485, 4483, 4481, 70,
	4481, 53, 69, 4480, 40, 346, 358, 311, 391, 33,
	307, 425, 279, 4478, 414, 380, 377, 89, 258, 7,
	234, 218, 288, 4477, 273, 4476, 4475, 4475, 406, 326,
	270, 269, 156, 133, 4474, 427, 4473, 405, 4472, 4471,
	4469, 4468, 332, 276, 72, 4467, 255, 4466, 95, 4465,
	4462, 103, 331, 23, 51, 4461, 49, 110, 36, 159,
	4459, 66, 330, 37, 19, 13, 4458, 721, 4457, 80,
	4453, 419, 284, 4452, 336, 281, 4451, 422, 74, 17,
	5, 4449, 1, 8, 3, 15, 271, 4448, 204, 4445,
	88, 4444, 267, 199, 120, 4443, 132, 4442, 61, 48,
	117, 4440, 4435, 4434, 137, 27, 4432, 115, 4428, 215,
	317, 4427, 4425, 4424, 30, 43, 114, 68, 62, 50,
	25, 96, 64, 4423, 4422, 28, 84, 4421, 241, 35,
	9, 97, 321, 92, 4420, 24, 21, 18, 319, 237,
	372, 368, 4418, 38, 309, 393, 4417, 4415, 392, 125,
	381, 47, 245, 4414, 244, 4412, 44, 4411, 93, 57,
	168, 71, 58, 4408, 54, 243, 4406, 101, 353, 4405,
	323, 3026, 14111, 4403, 140, 320, 428, 82, 4402, 247,
	214, 4401, 26, 364, 113, 416, 390, 4400, 371, 4400,
	4396, 4395, 166, 154, 136, 4391, 169, 4389, 4388, 4386,
	4385, 388, 4384, 4380, 4379, 4378, 4377, 4376, 4375, 4373,
	4371, 4370, 4367, 4365, 4362, 4360, 4359, 433, 437, 4356,
	365, 4355, 432, 356, 4354, 389, 4350, 122, 4347, 386,
	359, 4346, 4345, 4344, 360, 430, 399, 397, 4342, 178,
	387, 42, 4341, 75, 412, 100, 227, 109, 81, 4340,
	4339, 225, 305, 421, 143, 130, 4337, 4336, 4335, 4333,
	4332, 4331, 4330, 4327, 4324, 4323, 4322, 4321, 4317, 4316,
	4312, 4311, 4310, 4306, 4303, 4302, 4301, 4300, 4298, 4297,
	4295, 4294, 4291, 4290, 4289, 4286, 4285, 4281, 4280, 4279,
	4278, 4277, 4276, 4272, 4271, 4270, 4269, 4268, 268, 252,
	4264, 4262, 4260, 370, 366, 304, 324, 415, 253, 248,
	85, 4259, 4253, 119, 4252, 4248, 4246, 400, 4245, 424,
	4244, 4238, 4236, 4235, 208, 121, 4232, 79, 189, 401,
	45, 4226, 4223, 246, 318, 116, 111, 4222, 4220, 4218,
	4217, 4216, 216, 4215, 4214, 250, 86, 4213, 292, 256,
	423, 367, 398, 426, 4212, 394, 4211, 310, 402, 4210,
	261, 289, 102, 363, 4209, 94, 4208, 4202, 322, 396,
	230, 4199, 4198, 4197, 73, 4193, 4192, 260, 325, 4189,
	4187, 4186, 4184, 4183, 4180, 2, 90, 16, 4, 4179,
	4177, 34, 4176, 4174, 303, 4173, 4170, 383, 76, 78,
	4169, 4168, 4157, 4156, 294, 4151, 4150, 238, 14, 4141,
	4141, 3290, 395,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 18, 18,
	366, 366, 401, 401, 401, 25, 25, 26, 26, 27,
	27, 28, 28, 41, 41, 41, 5, 5, 5, 6,
	6, 6, 6, 6, 8, 8, 7, 13, 13, 14,
	14, 402, 402, 24, 24, 16, 16, 634, 634, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 15, 15,
	17, 17, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 630,
	630, 630, 630, 630, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 92, 94, 93,
	93, 93, 101, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 60,
	60, 87, 87, 91, 91, 90, 90, 90, 90, 88,
	88, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 74, 74, 76, 76, 76, 76,
	76, 77, 77, 77, 78, 12, 12, 12, 12, 12,
	12, 12, 12, 79, 79, 80, 72, 81, 81, 196,
	196, 82, 82, 82, 83, 83, 83, 84, 84, 85,
	85, 85, 85, 273, 273, 273, 587, 587, 122, 122,
	122, 122, 122, 122, 122, 73, 73, 86, 86, 86,
	63, 64, 64, 67, 67, 66, 65, 65, 68, 68,
	68, 71, 71, 120, 120, 120, 69, 69, 70, 155,
	155, 155, 148, 148, 148, 148, 148, 148, 157, 157,
	157, 157, 156, 156, 156, 156, 156, 158, 158, 158,
	158, 158, 119, 119, 99, 100, 100, 100, 100, 100,
	95, 95, 95, 97, 98, 113, 113, 114, 114, 102,
	102, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 109, 109, 105, 105, 631, 631, 632, 632,
	96, 96, 96, 96, 96, 96, 106, 107, 110, 111,
	108, 108, 108, 108, 633, 117, 117, 117, 118, 118,
	104, 104, 145, 145, 147, 147, 149, 149, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	146, 146, 121, 121, 126, 126, 123, 123, 152, 152,
	151, 151, 169, 169, 170, 172, 172, 173, 173, 171,
	171, 171, 171, 171, 171, 171, 171, 138, 138, 139,
	139, 140, 140, 142, 143, 143, 143, 143, 141, 141,
	144, 144, 144, 174, 174, 174, 174, 174, 174, 174,
	243, 243, 242, 242, 245, 245, 245, 245, 246, 246,
	247, 247, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 404, 404, 405, 405, 405, 406,
	406, 406, 259, 259, 259, 259, 259, 259, 260, 260,
	260, 260, 261, 261, 262, 262, 263, 263, 263, 264,
	264, 265, 265, 267, 268, 268, 268, 269, 269, 269,
	270, 270, 270, 271, 271, 249, 249, 199, 199, 199,
	220, 252, 252, 251, 251, 251, 251, 254, 254, 254,
	254, 254, 253, 253, 255, 255, 256, 256, 257, 257,
	258, 258, 272, 272, 281, 281, 277, 277, 278, 279,
	279, 280, 280, 592, 275, 275, 274, 274, 276, 287,
	287, 289, 289, 288, 288, 288, 288, 290, 290, 291,
	291, 282, 282, 283, 283, 284, 284, 284, 285, 285,
	286, 286, 286, 286, 286, 292, 297, 296, 296, 308,
	308, 298, 298, 299, 300, 300, 303, 303, 302, 302,
	304, 304, 304, 305, 305, 305, 306, 306, 301, 301,
	307, 307, 310, 310, 311, 311, 311, 311, 311, 311,
	311, 311, 312, 312, 312, 312, 309, 309, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 314, 314, 314,
	314, 314, 315, 315, 316, 316, 317, 317, 293, 293,
	294, 294, 294, 294, 294, 294, 295, 295, 175, 403,
	403, 189, 189, 189, 189, 189, 211, 211, 190, 190,
	194, 176, 191, 191, 197, 197, 195, 192, 192, 177,
	266, 266, 178, 193, 193, 179, 179, 214, 214, 215,
	215, 221, 221, 221, 222, 222, 223, 223, 225, 225,
	226, 226, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 227, 227, 232,
	233, 233, 233, 233, 233, 233, 228, 228, 234, 239,
	239, 239, 239, 235, 235, 235, 235, 34, 34, 378,
	378, 378, 378, 378, 378, 378, 378, 377, 377, 377,
	376, 376, 376, 376, 376, 238, 238, 549, 549, 237,
	237, 635, 635, 576, 576, 216, 216, 217, 217, 218,
	218, 219, 219, 203, 203, 203, 203, 203, 212, 212,
	213, 213, 204, 204, 206, 207, 208, 208, 208, 208,
	208, 201, 198, 198, 198, 205, 205, 205, 230, 230,
	231, 231, 209, 209, 209, 210, 210, 202, 202, 153,
	153, 153, 154, 154, 154, 200, 200, 180, 180, 180,
	180, 180, 180, 380, 380, 380, 380, 380, 380, 380,
	380, 318, 318, 319, 319, 322, 322, 322, 325, 333,
	333, 333, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 382, 382, 383, 383, 384, 384, 385, 385,
	320, 320, 321, 321, 326, 326, 327, 327, 328, 328,
	328, 328, 329, 332, 332, 386, 386, 387, 387, 388,
	10, 33, 323, 337, 337, 338, 338, 338, 338, 341,
	341, 341, 341, 344, 344, 344, 390, 390, 393, 393,
	395, 395, 395, 395, 391, 391, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 636, 636, 29, 29, 29, 389, 389, 392,
	392, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	324, 324, 340, 340, 340, 340, 340, 340, 340, 342,
	342, 331, 331, 330, 330, 346, 346, 345, 345, 345,
	345, 350, 350, 350, 350, 350, 347, 348, 349, 349,
	349, 349, 349, 351, 351, 352, 352, 353, 354, 354,
	355, 355, 355, 381, 381, 359, 359, 359, 359, 360,
	360, 361, 361, 362, 181, 181, 343, 343, 363, 363,
	365, 365, 364, 364, 367, 367, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 368, 368, 373,
	373, 369, 369, 11, 475, 475, 475, 475, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 371,
	371, 371, 372, 374, 374, 637, 637, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 425,
	425, 425, 581, 581, 581, 584, 584, 584, 584, 583,
	583, 585, 585, 426, 427, 427, 427, 427, 452, 452,
	455, 456, 456, 456, 458, 458, 458, 431, 431, 431,
	431, 431, 431, 431, 428, 428, 432, 432, 453, 453,
	454, 454, 459, 457, 457, 429, 429, 429, 429, 429,
	430, 430, 185, 185, 185, 185, 185, 460, 460, 186,
	186, 186, 461, 461, 462, 462, 463, 463, 187, 188,
	188, 188, 188, 188, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 39, 39, 40,
	40, 414, 89, 89, 89, 89, 413, 75, 75, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 335, 335, 336, 336, 336, 336,
	336, 336, 356, 357, 357, 358, 358, 358, 358, 420,
	420, 420, 420, 588, 588, 589, 589, 590, 590, 590,
	591, 591, 591, 591, 591, 593, 593, 593, 593, 593,
	594, 112, 112, 112, 595, 595, 596, 596, 598, 598,
	598, 598, 598, 603, 603, 597, 597, 604, 604, 604,
	424, 622, 622, 605, 605, 586, 586, 422, 422, 606,
	606, 606, 608, 608, 607, 607, 607, 607, 607, 613,
	613, 614, 614, 616, 611, 611, 612, 612, 619, 609,
	609, 639, 639, 610, 610, 617, 617, 638, 638, 615,
	615, 615, 618, 618, 618, 618, 620, 620, 423, 423,
	423, 423, 229, 229, 621, 621, 621, 621, 486, 486,
	486, 486, 487, 488, 488, 488, 488, 488, 488, 488,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 493, 493, 528, 528,
	640, 640, 494, 494, 495, 495, 529, 529, 531, 531,
	531, 531, 496, 530, 530, 532, 497, 497, 497, 497,
	497, 497, 497, 497, 497, 497, 497, 497, 497, 518,
	519, 519, 535, 535, 535, 535, 534, 534, 533, 533,
	540, 540, 520, 520, 521, 521, 521, 536, 536, 537,
	537, 538, 538, 522, 522, 522, 522, 523, 523, 524,
	525, 525, 539, 539, 571, 571, 571, 571, 572, 572,
	579, 573, 574, 574, 575, 492, 492, 492, 492, 492,
	526, 526, 527, 527, 577, 577, 578, 578, 484, 484,
	485, 408, 408, 409, 407, 407, 407, 410, 410, 411,
	411, 411, 411, 582, 582, 582, 582, 582, 582, 582,
	582, 582, 582, 582, 580, 580, 580, 580, 241, 241,
	244, 244, 236, 236, 623, 623, 623, 623, 623, 623,
	623, 623, 623, 625, 625, 625, 240, 240, 9, 9,
	9, 9, 627, 627, 464, 464, 464, 624, 624, 624,
	624, 624, 626, 626, 626, 626, 465, 465, 379, 379,
	379, 379, 379, 379, 397, 397, 30, 30, 31, 32,
	32, 35, 35, 35, 35, 36, 36, 38, 38, 38,
	38, 398, 399, 399, 400, 400, 498, 498, 499, 544,
	544, 544, 544, 541, 541, 543, 542, 542, 500, 545,
	545, 501, 501, 502, 503, 546, 546, 550, 550, 551,
	551, 551, 551, 551, 552, 552, 553, 553, 554, 554,
	555, 555, 504, 556, 556, 505, 505, 506, 506, 558,
	558, 563, 563, 563, 507, 507, 507, 508, 508, 508,
	508, 559, 559, 564, 564, 564, 564, 564, 564, 564,
	250, 250, 509, 510, 510, 510, 510, 510, 510, 510,
	510, 510, 511, 511, 511, 557, 557, 557, 512, 567,
	567, 560, 560, 565, 565, 565, 565, 565, 547, 547,
	628, 628, 628, 629, 629, 513, 514, 514, 561, 561,
	566, 566, 515, 516, 562, 562, 562, 562, 517, 517,
	548, 548, 568, 568, 569, 569, 570, 570, 45, 45,
	45, 44, 44, 159, 159, 162, 162, 162, 162, 162,
	165, 166, 167, 168, 163, 163, 160, 161, 161, 164,
	164, 127, 127, 128, 128, 130, 132, 132, 132, 131,
	133, 133, 129, 129, 134, 134, 134, 134, 135, 135,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	47, 47, 47, 47, 46, 46, 48, 48, 48, 48,
	48, 48, 49, 49, 50, 50, 51, 52, 52, 52,
	53, 53, 54, 54, 55, 55, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 434, 434,
	641, 641, 641, 448, 448, 448, 435, 441, 439, 436,
	436, 437, 437, 437, 437, 447, 447, 440, 438, 438,
	438, 438, 438, 438, 466, 466, 467, 467, 449, 449,
	449, 449, 449, 449, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 483, 483, 442, 443, 443, 444, 444,
	445, 445, 446, 468, 468, 451, 451, 451, 480, 480,
	480, 473, 473, 473, 473, 473, 473, 469, 469, 469,
	469, 469, 470, 470, 474, 474, 474, 474, 474, 482,
	482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
	482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
	471, 471, 476, 476, 478, 478, 472, 472, 481, 479,
	479, 479, 477, 477, 42, 42, 37, 37, 43, 43,
	124, 125, 125, 421, 421, 421, 415, 415, 599, 599,
	599, 599, 599, 599, 599, 599, 599, 599, 599, 599,
	599, 599, 599, 599, 599, 601, 601, 600, 600, 600,
	602, 602, 602, 602, 602, 642, 642, 412, 412, 412,
	412, 416, 416, 490, 491, 417, 417, 418, 418, 418,
	418, 419, 419, 419, 419,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 2, 0, 3, 0, 2,
	0, 1, 0, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 2, 3, 0, 1, 3, 1, 0, 3,
	3, 4, 4, 4, 4, 3, 2, 1, 1, 2,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 5, 3,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 3,
	4, 4, 6, 3, 3, 4, 3, 4, 4, 5,
	4, 5, 1, 1, 3, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 5, 6, 3, 4, 1, 1, 2, 4, 1,
	1, 1, 2, 2, 2, 2, 1, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 6, 2, 3, 5, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	2, 1, 2, 1, 0, 2, 2, 3, 5, 0,
	2, 4, 3, 1, 5, 1, 1, 4, 1, 4,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 6, 4, 4, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 6, 4, 4, 4, 4,
	5, 7, 7, 9, 4, 6, 5, 5, 7, 7,
	4, 7, 4, 6, 6, 4, 5, 4, 5, 3,
	11, 8, 9, 8, 1, 0, 5, 5, 3, 3,
	5, 3, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 5, 3, 4, 1, 3, 3,
	1, 2, 2, 0, 1, 2, 0, 2, 3, 3,
	3, 4, 0, 1, 1, 1, 1, 2, 3, 4,
	5, 6, 8, 6, 6, 1, 3, 1, 3, 3,
	5, 1, 0, 1, 2, 4, 2, 0, 3, 3,
	2, 1, 3, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 4, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 3, 2, 3,
	2, 0, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 3, 0, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 2, 4, 1, 5, 2,
	5, 2, 5, 2, 1, 3, 3, 0, 1, 0,
	3, 0, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 0, 5, 0, 5, 0, 0, 1,
	1, 3, 1, 1, 1, 3, 3, 1, 1, 1,
	2, 4, 4, 2, 3, 5, 5, 1, 3, 1,
	0, 1, 2, 3, 2, 4, 2, 3, 2, 0,
	1, 2, 0, 9, 9, 2, 1, 4, 4, 4,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 3, 2, 3, 1, 4, 2, 3,
	2, 3, 2, 3, 1, 1, 2, 2, 4, 1,
	2, 3, 3, 4, 5, 4, 5, 4, 2, 2,
	2, 1, 1, 0, 5, 2, 2, 2, 3, 1,
	0, 1, 3, 9, 1, 2, 0, 7, 7, 0,
	10, 6, 0, 4, 5, 2, 0, 2, 4, 0,
	1, 1, 0, 5, 2, 4, 1, 1, 4, 5,
	4, 0, 2, 0, 1, 0, 1, 5, 1, 0,
	2, 0, 2, 6, 2, 0, 1, 3, 2, 4,
	0, 1, 3, 2, 1, 0, 1, 3, 3, 2,
	0, 2, 2, 2, 3, 3, 4, 1, 3, 3,
	2, 7, 12, 1, 3, 2, 3, 3, 1, 2,
	2, 2, 2, 1, 2, 13, 2, 2, 0, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 3, 3,
	3, 3, 0, 3, 3, 0, 3, 0, 7, 7,
	3, 0, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 2,
	3, 3, 2, 5, 1, 1, 2, 3, 2, 1,
	1, 2, 1, 2, 2, 4, 3, 5, 1, 3,
	2, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 6, 5, 3, 5, 1, 0,
	1, 3, 2, 1, 1, 2, 3, 4, 3, 2,
	4, 4, 6, 4, 4, 2, 5, 2, 0, 5,
	5, 5, 1, 1, 1, 1, 3, 0, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 3, 2, 1,
	3, 2, 3, 5, 5, 5, 2, 1, 3, 6,
	6, 6, 6, 6, 8, 8, 6, 6, 7, 9,
	9, 8, 10, 6, 6, 6, 6, 6, 6, 6,
	8, 6, 8, 6, 8, 7, 9, 6, 8, 7,
	9, 8, 10, 8, 10, 9, 11, 8, 10, 9,
	11, 8, 8, 7, 6, 6, 6, 6, 8, 8,
	8, 8, 6, 9, 0, 2, 2, 1, 2, 2,
	2, 2, 3, 1, 3, 3, 1, 5, 3, 9,
	12, 7, 7, 3, 2, 1, 3, 1, 3, 3,
	3, 3, 2, 2, 1, 1, 1, 1, 2, 1,
	1, 1, 4, 5, 1, 0, 1, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 5, 1, 4, 0,
	2, 3, 0, 1, 1, 2, 1, 17, 21, 1,
	1, 2, 1, 3, 1, 1, 1, 3, 1, 2,
	0, 1, 2, 4, 1, 1, 1, 1, 1, 3,
	0, 1, 0, 1, 1, 4, 0, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 2, 0, 9, 11,
	12, 14, 3, 0, 3, 4, 4, 0, 6, 4,
	9, 7, 6, 4, 6, 6, 5, 7, 9, 6,
	6, 5, 4, 4, 3, 6, 6, 6, 6, 4,
	7, 5, 8, 7, 8, 6, 5, 8, 1, 0,
	1, 0, 4, 6, 5, 8, 2, 0, 2, 2,
	2, 1, 5, 2, 0, 2, 6, 6, 6, 10,
	6, 6, 6, 9, 9, 6, 6, 9, 6, 7,
	7, 6, 2, 2, 2, 2, 1, 2, 1, 0,
	1, 2, 10, 13, 5, 4, 4, 2, 0, 2,
	2, 1, 0, 11, 14, 12, 15, 8, 11, 8,
	7, 9, 1, 1, 3, 3, 5, 6, 1, 3,
	1, 3, 1, 3, 3, 7, 9, 9, 8, 6,
	1, 0, 1, 3, 3, 1, 5, 3, 8, 11,
	6, 1, 0, 5, 2, 3, 0, 2, 0, 1,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 3, 11, 13, 5, 1,
	2, 2, 1, 1, 3, 5, 1, 3, 7, 2,
	0, 5, 5, 10, 8, 2, 0, 2, 0, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 0,
	5, 0, 8, 1, 1, 8, 11, 6, 8, 1,
	3, 1, 1, 3, 4, 7, 6, 5, 5, 5,
	5, 1, 3, 4, 4, 4, 3, 4, 3, 1,
	4, 0, 8, 5, 5, 6, 7, 7, 7, 4,
	4, 5, 11, 10, 10, 2, 2, 0, 13, 2,
	0, 1, 3, 5, 5, 3, 6, 2, 1, 0,
	2, 4, 0, 1, 3, 6, 8, 8, 1, 3,
	5, 5, 10, 10, 11, 11, 5, 5, 6, 10,
	1, 0, 2, 0, 1, 0, 2, 2, 1, 1,
	0, 4, 0, 1, 3, 1, 1, 1, 1, 1,
	2, 4, 4, 5, 2, 0, 3, 1, 3, 4,
	3, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	2, 2, 1, 1, 1, 0, 2, 4, 5, 6,
	4, 5, 2, 3, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	2, 3, 2, 5, 4, 3, 3, 3, 3, 3,
	1, 1, 0, 2, 3, 0, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 0, 3, 6, 3, 5,
	3, 5, 3, 5, 2, 0, 2, 0, 1, 2,
	2, 2, 3, 3, 2, 2, 3, 3, 1, 1,
	3, 3, 2, 1, 1, 8, 8, 11, 5, 7,
	6, 9, 5, 2, 0, 3, 3, 3, 7, 7,
	10, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 5, 1, 3, 2, 2, 2, 2, 2, 1,
	2, 2, 4, 3, 2, 2, 2, 2, 2, 2,
	3, 2, 2, 2, 2, 5, 5, 5, 5, 5,
	1, 3, 1, 2, 3, 0, 3, 1, 2, 1,
	1, 1, 3, 0, 1, 3, 1, 3, 1, 3,
	6, 4, 0, 5, 5, 5, 1, 2, 4, 5,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	2, 2, 2, 1, 2, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	2, 1, 3, 7, 4, 1, 3, 4, 6, 4,
	8, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -434, -169, -175, -176, -177,
	-178, -179, -180, -181, -182, -183, -184, -420, -421, -422,
	-423, -484, -485, -486, -487, -488, -489, -490, -491, -492,
	-493, -494, -495, -496, -497, -518, -519, -520, -521, -522,
	-523, -524, -525, -498, -499, -500, -501, -502, -503, -504,
	-505, -506, -507, -508, -509, -510, -511, -512, -513, -514,
	-515, -516, -517, -425, -426, -433, -435, -436, -437, -438,
	-439, -440, -441, -442, -443, -444, -445, -446, -427, -428,
	-432, -429, -430, -185, -186, -187, -188, 266, 212, -171,
	-172, -264, 111, 26, 22, 27, 394, 93, 401, 191,
	436, 228, 407, 413, 397, 378, 290, 405, 274, 475,
	-457, 428, 223, 395, 220, 259, -174, -173, -263, 531,
	119, 202, 63, 67, -271, 36, 518, 86, 540, -641,
	486, 457, -641, 96, 97, 98, 99, 531, -222, 115,
	-380, -343, -27, 33, 414, 261, 62, 464, 454, 225,
	276, 284, 422, 103, -408, 268, 449, 375, 194, 438,
	387, 443, 512, -547, 406, 71, 453, 451, 58, 289,
	473, 471, 40, 67, 307, 419, 480, 85, 284, 104,
	199, 225, 236, 247, 261, 286, 71, -549, 62, 375,
	385, 387, 409, 414, 422, 443, 412, 460, 268, 406,
	103, 449, 438, 454, 464, 276, 40, 384, -375, -378,
	-377, 464, 261, 307, 103, 406, 71, 67, 419, 480,
	85, 284, 225, 236, 438, 454, 194, 268, 276, -549,
	387, 414, 422, 375, 412, 460, 85, -581, 58, 423,
	457, -582, -580, -241, 56, 217, 414, 347, 406, 488,
	-5, 4, -19, -20, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 22, 201, 203, 204, 205, 55,
	206, 207, 208, 210, 211, 212, 88, 70, 213, 214,
	215, 24, 216, 218, 219, 220, 221, 222, 223, 123,
	226, 227, 228, 229, 230, 141, 231, 101, 232, 233,
	234, 235, 236, 111, 237, 154, 238, 120, 121, 90,
	246, 247, 248, 249, 250, 251, 253, 254, 98, 149,
	150, 255, 89, 256, 257, 258, 259, 260, 261, 176,
	27, 262, 138, 264, 148, 265, 267, 136, 42, 268,
	270, 271, 272, 273, 274, 275, 276, 277, 279, 281,
	282, 91, 283, 153, 165, 285, 286, 287, 288, 289,
	291, 294, 295, 151, 296, 297, 298, 28, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	312, 313, 314, 96, 315, 317, 318, 145, 503, 319,
	320, 321, 322, 92, 324, 327, 328, 329, 332, 333,
	334, 335, 336, 337, 105, 85, 338, 99, 340, 341,
	342, 343, 344, 345, 346, 131, 348, 349, 350, 351,
	352, 353, 354, 357, 110, 358, 359, 32, 139, 122,
	504, 505, 502, 144, 62, 506, 507, 124, 501, 508,
	102, 364, 365, 366, 367, 368, 369, 370, 129, 371,
	128, 373, 374, 375, 377, 378, 379, 380, 382, 383,
	384, 385, 386, 112, 387, 152, 143, 388, 389, 390,
	391, 84, 132, 393, 394, 395, 396, 397, 398, 399,
	34, 400, 401, 402, 35, 403, 404, 405, 407, 408,
	409, 410, 127, 412, 413, 146, 415, 416, 87, 417,
	418, 419, 420, 421, 422, 93, 425, 427, 428, 429,
	430, 431, 107, 433, 434, 435, 436, 437, 438, 113,
	114, 439, 440, 441, 147, 442, 443, 445, 446, 104,
	448, 449, 108, 451, 452, 453, 454, 455, 458, 460,
	462, 463, 464, 465, 466, 467, 468, 142, 469, 50,
	472, 473, 474, 97, 475, 476, 477, 478, 155, 183,
	479, 480, 481, 482, 483, 485, 168, 486, 140, 487,
	498, 499, 57, 37, 173, 169, 189, 179, 178, 224,
	188, 187, 29, 278, 175, 292, 293, 500, 186, 171,
	185, 166, 160, 162, 163, 159, 161, 156, 164, 158,
	126, 157, 325, 339, 181, 182, 355, 356, 360, 170,
	361, 362, 376, 177, 174, 411, 426, 172, 444, 184,
	459, 461, 86, 180, 489, 490, 491, 492, 493, 133,
	494, 495, 496, 497, 125, -584, -583, 56, 457, 423,
	-241, 21, 217, 58, 347, 406, 414, 488, -641, 457,
	-641, 379, -641, 379, -5, 423, 457, 56, 413, -5,
	457, -469, -470, 21, -474, 63, 392, 26, 22, -5,
	-469, 290, -470, -5, -431, -457, 118, 531, -169, -175,
	-176, -177, -178, -484, -485, 26, -219, 531, 79, -217,
	531, 118, -241, 56, 457, 423, 21, 531, -217, -463,
	531, 21, 451, 453, 374, 420, -160, -121, 470, 316,
	269, 509, -173, -174, -172, -171, -172, -263, -255, -256,
	21, 41, -404, -402, -405, -5, 66, 541, -265, 84,
	-267, -7, -5, -265, 531, -3, -448, 30, -465, -464,
	-624, 318, 389, 252, 31, 73, -406, -404, 64, 73,
	-170, -169, -402, 67, 480, 84, 419, 307, 286, 385,
	460, 117, 199, 458, -548, 463, 34, -18, -5, 28,
	-15, -5, -146, 221, 279, -149, -5, 11, -150, 534,
	535, 536, 537, 538, 539, 525, 526, 527, 18, 19,
	20, -15, 87, -15, 28, -7, 28, 246, 67, -7,
	28, 336, -11, -475, -9, 241, 245, 424, 4, -19,
	-20, -21, 209, 115, 225, 25, 81, 242, 116, 79,
	44, 76, 52, 53, 75, 77, 46, 82, 54, 80,
	363, 78, 48, 450, 118, 85, 460, -7, -7, 340,
	-366, 28, -15, -7, -7, 531, 236, -11, -11, 453,
	451, 453, 451, -404, 28, 21, -402, 28, 21, -402,
	28, -402, 28, 480, 67, 246, 93, 401, -413, -587,
	-95, -5, 4, -19, -21, -15, -15, -7, -15, -412,
	-587, -21, -5, -11, -475, 321, 221, 279, -7, 28,
	-412, -7, -412, -7, -7, -7, -7, -7, 460, -11,
	-475, 21, -11, 336, -475, 21, -7, -15, 28, 87,
	-15, -7, 383, 28, -17, -15, 28, -13, -7, -7,
	28, -238, 28, -99, -100, -102, -103, -109, -105, -108,
	-95, 186, 171, 172, 173, 174, 175, 176, 187, 188,
	170, 189, -110, -111, -106, -107, 184, 56, 4, -19,
	169, -96, 178, 179, 180, 181, 182, -238, 28, 25,
	336, -369, 28, -475, -369, 28, -369, 28, 480, 246,
	67, 87, 340, 460, 321, 480, -581, 423, -581, 219,
	209, -464, 431, 64, 61, 527, 533, 57, -94, 7,
	-94, -625, -94, 40, -240, -9, -94, 506, 57, 318,
	209, -448, -465, -448, -94, -448, 61, -94, -5, -94,
	74, 61, 541, 383, 531, -229, 531, -229, -229, 104,
	-229, 74, 506, 64, 506, -217, -431, -452, -455, -456,
	86, -9, -457, 515, 473, -216, 116, -452, -453, -454,
	-459, -402, -452, 57, 318, 209, -452, -402, -7, -5,
	-461, 414, -462, 307, 67, 104, 247, -452, -138, -47,
	-140, 130, -48, -49, -142, 68, 280, 69, -143, -45,
	21, 41, -45, -45, 70, -160, -121, 532, 532, -243,
	-242, -245, -56, 536, -58, 534, 535, -145, 31, 516,
	-120, 471, 40, -60, -59, 13, 531, -63, -61, -172,
	29, 134, -69, -70, 293, 11, 62, 411, -5, -92,
	6, -94, 49, 43, 47, 9, 10, -587, -630, -101,
	38, -122, -301, -62, 12, -103, -631, -632, -108, -633,
	185, 161, 162, 225, 240, 243, 244, 330, 331, 241,
	245, 424, 447, 103, 239, 242, 512, 278, 356, 362,
	376, 444, 459, 461, 360, 224, 292, 325, 490, 491,
	493, 494, 492, 495, 496, 159, 160, 166, 164, 158,
	339, 156, 163, 157, 497, 173, 169, 189, 179, 178,
	188, 187, 175, 186, 171, 181, 182, 170, 174, 172,
	56, 184, 180, -110, -111, -106, -107, -242, 74, 536,
	-87, -90, 533, 529, -402, 531, 531, 541, -265, -24,
	531, -119, -56, 218, 354, 541, -624, 327, 66, 487,
	252, -403, -402, 93, -5, 23, -406, -406, 532, -229,
	-402, 28, -402, 480, -402, 28, -28, 25, -587, -587,
	-7, 460, -587, 130, -549, -380, 473, 209, -410, 31,
	-576, 23, -113, 533, -398, 531, -15, -15, 533, -398,
	23, 368, 257, 452, 231, -398, 64, 31, -29, 36,
	518, 31, 140, -402, 28, -536, 464, 31, 130, 28,
	-29, 480, -7, -545, 365, 74, -7, -24, 31, -397,
	130, 36, 232, -99, -15, -29, -29, -368, -371, 398,
	-370, 207, 256, 196, 22, 27, 477, 93, 223, 264,
	258, 309, 354, 122, 31, 365, 401, 400, 153, -31,
	507, 29, 45, -368, -372, 398, 207, 29, 45, -368,
	398, -391, -394, 354, 23, 213, 90, 305, 335, 338,
	342, 364, 419, 436, 402, 473, 29, -368, 398, 29,
	-402, 28, 21, -404, 28, 140, -580, -241, -583, 398,
	-39, 531, -87, 398, 398, 398, 398, -374, 27, 93,
	196, 477, 398, -415, -599, 215, 404, 441, 300, 434,
	482, 277, 418, 324, 31, 237, 127, 445, -586, 366,
	93, -426, -39, -87, 398, -483, 196, 27, -7, -15,
	-15, 74, 29, 398, -415, 398, 93, 196, 27, 398,
	-415, 398, 398, -537, -31, 479, 398, 93, 232, 394,
	196, 27, 264, 258, 430, 74, 74, -7, 398, -29,
	-447, 45, -447, 398, 130, -29, -447, -447, 398, 93,
	401, 398, 93, 29, 368, 257, 452, 231, 398, 196,
	27, 93, -417, -418, 22, 97, -483, -468, 29, 541,
	-401, 24, 35, 29, 541, -401, 74, 29, 541, -401,
	29, -114, -113, 531, -104, 531, 177, -114, -114, -114,
	531, -117, 518, 519, 531, -117, -118, 183, 531, -118,
	-118, 178, 179, -118, -401, 29, -17, 28, 130, 28,
	541, 29, 29, 29, 140, 368, 257, 452, 231, -28,
	219, 23, -240, 40, -94, 120, -244, 40, -236, -239,
	-235, 49, 43, 74, -240, 6, 534, 535, -93, -92,
	-244, 40, -5, -623, -94, 4, -235, 40, 58, 49,
	43, 74, 504, -627, 260, 234, 327, 413, -5, -482,
	-16, 67, 419, 284, 286, 385, 409, 247, 261, 321,
	322, 367, 414, 449, 464, 21, -402, -369, -474, 531,
	-14, -5, -14, -482, 130, -369, 130, -431, 532, 541,
	-458, -239, -235, -217, 532, 541, -24, 532, 327, 532,
	-460, 83, 74, -28, -28, -28, 532, -46, -47, -139,
	-138, -142, 130, 389, 97, 354, 427, 503, -49, -48,
	-50, -56, 21, -55, 91, 349, -51, -52, -56, -58,
	534, 535, -141, 122, -173, -173, -173, -161, -164, -56,
	-138, -47, -258, 73, 541, 14, 39, 55, 534, 535,
	536, 537, 538, 539, 525, 526, 527, 18, 19, 20,
	-145, 30, 33, 46, 516, 44, 48, 52, 53, 54,
	37, 45, -148, 23, -8, 11, 62, -149, 4, -23,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 21,
	200, 22, 201, 202, 119, 510, 94, 203, 204, 205,
	60, 206, 207, 208, 209, 210, 211, 212, 173, 115,
	169, 189, 511, 88, 70, 213, 214, 215, 24, 216,
	38, 512, 217, 218, 219, 513, 220, 221, 222, 223,
	224, 225, 514, 123, 226, 227, 228, 229, 230, 25,
	141, 231, 101, 232, 117, 233, 234, 235, 236, 111,
	237, 81, 154, 238, 120, 239, 240, 241, 242, 243,
	244, 245, 121, 90, 246, 247, 249, 188, 187, 250,
	40, 251, 252, 253, 254, 98, 149, 150, 255, 89,
	95, 256, 257, 258, 259, 41, 109, 260, 261, 176,
	27, 262, 263, 138, 264, 148, 265, 266, 267, 136,
	42, 268, 270, 271, 272, 273, 29, 274, 275, 276,
	277, 278, 43, 279, 282, 91, 175, 283, 153, 284,
	165, 285, 116, 79, 286, 287, 288, 289, 291, 292,
	293, 294, 295, 151, 296, 298, 28, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 76, 500, 313, 314, 96, 315, 186, 171, 185,
	317, 318, 75, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 145, 503, 319, 320, 321, 322,
	92, 323, 326, 324, 325, 77, 327, 328, 329, 58,
	330, 331, 332, 333, 334, 335, 336, 337, 105, 85,
	338, 99, 339, 340, 342, 343, 345, 346, 347, 181,
	82, 182, 131, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 31, 110, 358, 359, 47, 360, 32,
	170, 139, 122, 504, 505, 502, 144, 66, 506, 507,
	124, 501, 361, 80, 362, 102, 364, 365, 366, 367,
	368, 369, 370, 129, 371, 128, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 112, 387, 152, 143, 388, 389, 174, 390, 391,
	84, 132, 392, 393, 394, 395, 396, 397, 398, 399,
	34, 400, 401, 402, 35, 403, 404, 405, 78, 406,
	407, 408, 409, 410, 411, 127, 412, 413, 146, 414,
	415, 416, 87, 418, 63, 419, 420, 421, 422, 423,
	424, 93, 426, 425, 427, 428, 429, 430, 172, 431,
	432, 107, 433, 434, 435, 436, 437, 438, 113, 114,
	439, 440, 441, 147, 442, 443, 444, 445, 59, 446,
	104, 447, 67, 448, 450, 449, 108, 451, 452, 453,
	454, 106, 455, 56, 184, 456, 457, 458, 459, 460,
	461, 49, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 471, 50, 472, 473, 474, 97, 103, 83, 475,
	476, 477, 478, 155, 86, 180, 190, 118, 479, 480,
	481, 482, 51, 483, 486, 140, 487, 488, 489, 490,
	491, 492, 493, 133, 494, 495, 496, 497, 125, 499,
	57, -56, -56, -56, -56, -56, 363, -344, 32, -88,
	-56, -119, -172, -87, -172, -172, -68, 529, 531, 531,
	531, -87, -94, 531, -94, -94, 531, -64, -56, -126,
	485, -123, 281, 531, 531, 130, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, -258,
	531, -90, -97, 536, -6, 4, -19, -20, -21, -22,
	21, 202, 119, 30, 510, 134, 23, 94, 60, 511,
	38, 512, 513, 39, 514, 117, 26, 239, 240, 241,
	243, 244, 245, 40, 252, 95, 41, 109, 263, 266,
	269, 43, 280, 130, 284, 64, 290, 71, 72, 45,
	311, 316, 73, 323, 326, 68, 330, 331, 31, 47,
	69, 74, 66, 33, 509, 372, 381, 392, 100, 63,
	424, 432, 59, 447, 67, 106, 61, 456, 49, 470,
	471, 103, 83, 190, 51, 65, 484, 36, -56, -91,
	-402, -119, -267, 23, -13, 541, 532, 39, 55, 30,
	33, 46, 44, 48, 52, 37, 45, 62, 218, -624,
	-626, 389, 399, 421, -189, -169, 102, 531, 40, 23,
	-191, -197, -195, 531, -5, -5, -266, 83, 83, 61,
	-214, 64, 61, 531, 122, 370, 31, -229, -402, -528,
	-391, 354, 31, -18, 28, -5, -588, 531, -588, -606,
	211, 198, 315, -7, -571, -573, 531, -99, 321, 480,
	84, -475, -411, -180, -181, -422, -423, 26, 29, -99,
	533, -97, -399, -400, -6, -547, 83, -146, 531, 267,
	388, -15, -15, -15, -15, -15, 29, -529, 29, -7,
	531, 370, 31, -538, -537, -94, 29, -539, -475, 103,
	31, -466, -409, 28, -402, 74, 332, -475, -402, 464,
	74, 29, 21, -559, -564, 67, 448, -5, -405, 242,
	-402, -398, -94, 23, 130, -466, -466, 541, 61, -637,
	117, 514, 370, 370, -323, 28, 514, -324, -5, 117,
	-340, 513, 471, 381, 284, 270, -637, 117, -637, 117,
	117, 168, 335, 473, 194, 449, -356, 531, 74, 460,
	201, 400, 412, 411, 460, 412, 411, -402, 309, 153,
	-15, 122, 61, -356, 298, 411, 531, -404, 449, 61,
	370, -402, 449, 61, -394, 90, 338, 342, -100, -235,
	-636, 70, -235, -235, 70, 346, -29, -29, -402, 61,
	-637, -402, -368, 398, 29, 45, -368, 398, 29, -7,
	61, -40, 532, -591, -593, -98, -112, 45, 361, 500,
	190, -95, -99, 426, 61, 61, 61, 61, 117, 40,
	31, 117, 40, 31, -577, 117, -578, 513, 31, 117,
	61, -642, -599, 35, 74, 47, 418, 254, 317, 324,
	-235, -235, -15, -5, -582, 423, 457, 61, 103, 398,
	83, 83, -402, -7, 61, -642, 61, -398, -559, -559,
	-559, 61, -642, 61, 61, -31, -94, 47, 61, -398,
	387, -94, 387, 387, 387, -398, -402, -402, 398, -544,
	264, 258, 61, -467, -585, 93, -426, 247, -585, 61,
	-539, -467, -585, -585, 61, -356, -356, 61, 438, -15,
	-15, -15, -15, -15, 61, 208, 155, 155, 208, 155,
	208, 531, 541, 208, -530, -376, -375, 199, 512, 261,
	286, 62, 385, 409, 458, 464, -378, 247, 406, 443,
	449, 307, -480, -451, 290, 405, 45, 130, -17, -15,
	-13, -7, -15, -7, -99, -238, -114, -119, -92, -92,
	56, 56, -92, 531, -92, -118, -118, -238, -401, 29,
	-539, 29, -475, -369, -369, -369, -402, 457, 541, -92,
	6, -92, 6, -5, 61, 541, -16, -16, 246, 422,
	-416, -412, -416, -416, -13, -17, -13, 139, -42, -37,
	-5, -13, -13, -17, 448, 420, 287, 386, 410, -477,
	36, 291, -14, 541, 532, 532, 64, -469, -470, -477,
	-470, -431, -455, -218, 119, -453, -459, -453, -402, -7,
	-402, -402, -7, -18, 66, 503, 427, 541, -52, -54,
	-58, 534, 535, 411, 127, 531, -54, 411, 127, -53,
	-92, 6, -53, -144, 359, 430, -16, 541, 83, -153,
	94, 95, -46, -139, -246, 64, -396, 453, 451, 58,
	289, 473, 67, -402, -245, -99, -15, 56, 58, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, 46, 44, 48, 37, 45,
	-56, 61, 47, 31, 49, 43, 50, 41, 260, 357,
	-157, -156, 350, 351, 352, 353, 166, -152, 59, 60,
	-151, -172, 531, -155, 510, 432, 21, -6, 531, -120,
	411, 531, -172, 41, 31, -90, 532, 541, -119, -71,
	530, -68, -119, -146, -119, 532, -73, 532, 536, 190,
	21, 41, -86, -56, -98, -95, -115, 498, 344, 248,
	297, 341, -116, 417, -92, -67, -66, 51, -123, 71,
	-132, 508, 531, -302, -58, -56, -297, -56, 531, -92,
	-92, -92, -92, -56, -78, -12, 4, 498, 344, 248,
	297, 341, 417, -94, -56, -79, -74, -56, -73, -80,
	-57, -58, 534, 535, -145, 411, -76, -74, -56, -56,
	511, 326, 456, -77, -56, 64, -119, -56, -119, -119,
	-119, -119, 346, -81, -196, -56, -627, -58, 346, -56,
	-73, -303, -307, -302, 100, -56, -300, -171, -307, -297,
	-172, -297, -56, -297, 532, -297, -297, -297, -627, -246,
	-119, 530, 542, 532, 532, -268, 85, 31, 532, -56,
	468, 229, 389, -198, 74, -211, 103, 104, -190, -194,
	-5, 86, -5, -246, 541, 527, -192, -195, -88, -199,
	65, -247, -248, -404, -172, 323, -259, 531, -272, -282,
	-292, -273, 127, 125, 126, -5, -122, -62, -301, -587,
	166, -248, -215, 112, -215, -318, -319, -322, -323, -325,
	-324, 46, -15, 122, 29, -367, 36, 531, 29, 74,
	31, 404, -595, -596, -598, 23, 321, 458, 484, -599,
	-589, 532, -590, -591, -595, -608, -607, 96, 98, 97,
	462, 122, 198, -398, 536, -572, 509, -574, -579, -575,
	-591, 4, 321, -7, -402, 480, -410, -380, -27, -18,
	-5, -337, -97, 532, 541, 527, 130, -7, -275, -274,
	-276, -5, 531, -398, -398, -398, -398, -398, -15, -531,
	414, 479, 64, 24, -7, -533, -534, -535, 295, 354,
	478, -318, 122, 29, 284, -7, 422, 29, -449, -450,
	446, 197, 406, 45, 371, 265, 469, 309, 4, 232,
	476, 103, 23, 31, -229, -6, 7, -546, 23, -556,
	307, 67, -558, -563, -5, -273, 531, -15, 448, -397,
	541, -404, 45, -87, -229, -229, 387, -99, -94, -370,
	-7, -7, -7, -402, -402, 31, -323, 28, -99, -7,
	531, -344, -362, 83, 503, 503, -363, 83, -5, -92,
	-7, 28, -5, 28, -7, -7, 505, 223, 340, -7,
	-357, -358, -6, -7, -7, 21, 103, 460, 412, 460,
	412, -7, 327, -7, 21, 103, -7, 327, -402, 411,
	-475, -38, 110, 79, 40, 83, 327, -32, -35, -388,
	93, 196, 27, -10, -6, -368, -371, 398, -7, -7,
	-402, -368, 398, -7, -7, -235, -15, -15, -235, -235,
	-368, 398, -391, -7, -7, -368, 398, 61, -637, -402,
	449, 61, -637, -404, 398, -533, -534, -7, 532, 541,
	-98, -112, -593, -112, -95, 361, -113, -95, -7, -7,
	-7, -7, -7, 47, -7, 28, -56, 47, -7, 531,
	47, -7, -7, 47, 74, 254, 317, -11, -369, 61,
	-7, -7, 398, -553, 61, 74, -7, -7, -7, -7,
	-7, -7, -13, -397, -13, -13, 398, 398, 61, 400,
	201, -11, -450, -581, -7, -11, 422, -7, -7, -34,
	-93, 40, 534, 535, 93, 398, 398, 398, 398, -7,
	-7, -94, -26, 28, -276, -94, 28, -5, -601, -600,
	-6, -418, 196, 27, -5, -532, 61, -7, -15, -413,
	531, -99, -412, -414, 221, 279, -146, -412, -412, 130,
	-99, -469, -469, 290, 414, 406, 103, -401, -401, -401,
	74, -401, 532, 532, 532, 57, 57, 532, -119, 532,
	-401, -17, 422, 130, -407, 36, -464, -236, -471, -476,
	-475, 71, -402, 140, -13, 541, -43, -235, 541, 533,
	45, 45, 45, 45, 45, -472, -481, -6, 70, 532,
	-5, -471, 74, -401, 64, -453, -460, 97, -51, -54,
	66, 36, -92, 6, 531, -119, 334, -164, -147, -149,
	62, -154, 517, -249, 65, -247, -634, 67, -634, 453,
	451, 453, 451, -634, -402, 57, 42, -56, -56, 61,
	-152, 59, -151, 42, -56, 47, 49, 43, 50, 41,
	260, 357, -157, -156, 64, 357, -158, 36, 168, 155,
	134, 139, 146, -57, -57, -119, -172, 531, -146, 531,
	-119, 41, -88, -56, 530, 530, 541, 532, 532, 532,
	-121, 541, -160, 532, -86, -73, -73, 16, 17, 61,
	61, 61, 61, 531, 532, -65, -66, 263, -56, -132,
	531, -131, -5, 531, 65, -304, 47, 192, 155, 542,
	-306, 509, -316, -315, 515, -56, 532, 532, 532, 532,
	23, 532, 64, 532, 541, 532, 532, 372, 541, 532,
	14, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -145, 52, 45, 62, -57, -57, -57,
	532, 532, 48, 64, 130, 23, -77, -77, -77, 532,
	64, -119, 541, 532, 532, 532, 532, -6, 532, 541,
	23, -56, -288, 129, -6, 541, 532, -304, 541, 532,
	-99, -305, 541, 47, 192, -316, 532, -158, 532, -307,
	541, 541, 541, -56, -249, 532, -91, -56, 531, 85,
	-200, 100, 101, 155, 532, 541, -88, -199, -197, -56,
	532, 541, -200, -56, 120, 541, 81, -260, 75, 82,
	79, 77, 78, 76, -252, -251, 23, -5, -252, -172,
	-272, -282, -292, -172, -259, -248, -254, -251, 23, -5,
	-252, -252, -281, 518, 64, 531, 531, -87, 531, 74,
	-221, -94, 113, 114, -221, 532, 541, -402, -320, 531,
	-402, -402, 23, -356, -14, -402, -404, 29, -594, 67,
	-112, -604, -424, 212, 403, -598, -603, -94, -240, -597,
	130, 532, 541, 40, 527, -604, 74, 33, 122, -608,
	532, 532, 509, 541, 70, 532, 541, 527, -7, 295,
	-229, -402, 209, -410, -338, 117, -339, -341, 39, 31,
	47, 471, 381, 513, 40, 392, 288, 252, 311, -400,
	-379, -112, -22, -147, -235, -94, 355, 62, 534, 535,
	464, 532, 541, -99, -526, -527, -94, -398, 64, -7,
	-240, -240, -29, -386, 507, -535, -540, -7, 295, 478,
	-540, 532, -402, -402, 246, -536, -7, 130, -92, -369,
	-369, 406, 71, -94, 47, 371, 371, 68, 474, -369,
	-169, 29, -381, 83, 273, 51, -367, -550, 130, 4,
	295, 64, 541, -56, -24, -397, -564, -229, 414, -229,
	-250, 65, -250, -13, 532, 61, 61, 61, -328, 130,
	40, -28, 282, 29, 31, -385, -384, 439, -340, 270,
	-56, 531, -335, 307, 531, -362, 531, 531, -7, -374,
	27, 93, 401, 196, -393, -237, -31, -395, 402, 93,
	-335, 29, -401, 29, -401, -36, -5, 40, 532, 541,
	527, 533, -7, -7, -7, -7, 418, 418, 327, 307,
	418, 532, 541, -388, -388, -10, -33, -94, 61, -637,
	117, 93, 364, 61, 93, 364, 61, 61, 61, -637,
	-7, -7, -368, 398, -7, -7, -7, -368, 398, 61,
	-31, -591, -112, -112, 538, -113, 61, -401, 29, -578,
	-56, -335, 313, 47, -7, 398, 398, 196, 27, 61,
	-554, 83, -369, -402, -397, -397, -397, 61, 61, -7,
	-7, 438, 61, 61, 61, 61, 61, 61, -94, 31,
	-401, 29, -401, 541, 532, 527, -237, 93, -240, -99,
	-15, -15, -89, 531, -99, 74, 74, 506, -13, -369,
	-369, -15, -117, -117, 532, -401, -7, -539, 246, 354,
	-478, 541, 36, -475, -13, -412, 541, -37, -5, 414,
	414, 414, 414, 414, -477, 541, -479, 506, 49, 43,
	-475, -477, -482, -369, 66, 36, 455, -119, 532, 541,
	-154, 531, 91, 92, -44, 71, -56, -402, -402, -634,
	-634, -634, -634, -402, -56, -56, 42, 42, -56, -57,
	-57, -56, 42, 64, 357, -158, -56, 471, 471, 30,
	30, 532, -56, 532, -119, 532, 541, 532, -68, 532,
	190, -86, -121, -121, -121, -56, -56, 344, 297, 341,
	-116, 341, -116, -116, -92, -94, 266, -56, 106, -160,
	-133, -5, -56, -158, 74, 74, -297, -297, -305, 70,
	166, 532, -99, -56, -157, -56, -99, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	41, 31, 260, -57, -56, -56, -56, -99, 532, 532,
	532, -119, -56, 532, 541, -196, -6, -82, 380, 442,
	532, -58, -289, 70, 532, 541, -84, 479, -158, -302,
	-316, -307, -297, 74, 74, -307, 532, 532, -56, -56,
	-56, 23, -44, 530, -170, -242, -205, 531, 74, -169,
	-169, 102, -194, -200, 527, -195, 122, -248, 75, 75,
	-248, -260, 75, -261, 80, -261, -261, -124, 450, -5,
	531, -252, -254, -252, -252, 532, -5, 531, 531, 124,
	531, -58, 133, -297, -73, -56, -29, -223, -635, 83,
	-351, 310, -322, -333, -352, -353, 370, -321, -326, -327,
	-324, -5, -320, 531, 122, 370, -169, 532, -528, -363,
	-7, -595, 531, 206, -56, 541, 541, 464, -590, -56,
	-56, -402, -607, -14, 74, 70, -579, -572, -575, 4,
	-379, 531, -540, -367, 531, -475, -7, -15, 252, 47,
	-344, 503, 531, -57, -402, -390, 201, 70, 253, 299,
	-99, -276, -287, 39, 532, 541, -15, -529, 531, -113,
	-351, -320, 531, 370, 140, -538, -386, -539, -369, -369,
	-94, -94, -93, -94, -407, -409, -367, -7, -638, 286,
	385, -541, -543, -5, -552, 61, -551, 21, 63, 96,
	97, 98, -540, -247, -563, 532, 74, -250, -5, 242,
	-250, 531, -397, 36, 168, -94, -7, -7, 86, -323,
	29, -383, -382, 230, -5, 40, 532, -14, -336, 31,
	252, 311, 354, -7, -14, -335, -14, -331, -330, -209,
	-5, -273, 531, 31, 275, 298, 246, -394, 288, 31,
	275, 438, -356, -384, -382, -356, 288, -395, 93, 464,
	-29, 438, -5, -7, -358, -379, -6, 418, -7, -35,
	-7, -7, -7, 449, 70, -7, 449, 70, -7, -7,
	-7, -7, 61, 61, -637, 93, 364, 61, 61, -637,
	-7, 464, 538, -7, -7, 532, 313, 61, 61, -560,
	-565, 62, 286, 439, -561, -566, 62, 286, -7, -555,
	36, 531, 398, -7, -7, -31, -34, -7, -7, -7,
	-7, -7, -94, 211, 198, 29, -5, -600, 355, -602,
	-112, -22, -147, -235, -94, 464, 23, 83, 83, -99,
	355, 321, -473, 448, 287, 410, 420, 465, 415, -473,
	130, -401, 422, 246, -477, -476, 290, -235, -13, -13,
	-13, -13, -13, -481, -401, 64, -477, 455, 532, -56,
	-146, -163, 72, 70, -402, -402, -402, -402, -56, -56,
	42, 30, 30, -56, -56, 319, 319, -56, -56, 532,
	532, -56, -94, -86, 532, 532, 532, 532, -56, 532,
	-129, 370, 532, -307, 47, 47, -307, -161, 148, 532,
	532, 64, 64, 41, 260, 42, 130, 64, 532, 532,
	-72, -119, 489, 532, 483, 483, -289, 70, -58, 132,
	155, -56, -85, 541, -56, 354, -307, 532, 47, 47,
	532, -308, 129, -308, -308, -100, -163, 532, 109, -231,
	-209, 117, -211, -56, -220, -7, -248, -248, -262, 83,
	74, 75, -248, -587, 531, -13, -251, 531, -274, -274,
	-5, -277, -278, -273, -288, 531, 541, -121, -193, -203,
	-212, -213, 51, -225, -226, 531, -29, 150, -352, 531,
	304, 271, -381, 70, 532, 541, -337, 36, -328, -318,
	-15, 122, -621, 36, -367, 531, 74, -604, -280, -592,
	-98, -95, -622, -94, 130, -99, -613, 393, -402, -572,
	532, -562, 64, 61, -568, 312, 23, -14, -410, -339,
	31, -397, -397, -56, -229, 23, 40, 83, -15, -94,
	-387, -388, 422, -328, -318, 122, -7, 284, 422, 23,
	-360, 449, -587, 273, 30, 45, -554, -369, -558, -56,
	286, 500, 286, 64, 36, 45, 64, -323, -386, -5,
	40, -335, 532, 252, 476, 299, 253, 309, 532, 532,
	532, 541, 36, -210, -202, 39, -210, -56, 47, 28,
	28, -390, 47, 23, -34, -390, -99, -235, -34, -401,
	-401, 527, 61, 61, -7, -369, -7, -369, 61, -7,
	-7, -7, 449, 70, -7, -7, -7, 464, -401, -335,
	-7, -7, 541, -92, -92, -99, 541, -92, -92, 513,
	-56, 61, -401, -94, -94, -401, -99, -99, -7, -7,
	532, 541, 541, -7, 61, 64, -469, -7, 506, -471,
	-401, 532, 532, -127, 484, -56, -45, -56, -56, -56,
	532, -121, -121, 70, 532, 532, -7, -56, -57, 64,
	-56, -56, -56, 532, 541, 532, 531, -289, 532, 532,
	435, 155, 532, -307, -298, -299, -297, -309, -310, 40,
	-311, 136, 47, 49, 43, 50, 138, -307, -83, 306,
	354, -127, -269, 87, 97, 110, 532, 541, -7, 155,
	-262, 531, -56, -248, 531, -13, 532, -274, 532, 532,
	532, 541, -279, 23, 123, -290, -291, -57, 40, -56,
	532, -200, -203, -204, 30, -204, 105, 31, -224, 115,
	116, 149, 47, 154, 151, 152, 42, 153, 148, -227,
	-232, -6, -225, -94, -381, -16, -334, 227, 230, 233,
	251, 298, 288, 308, 438, 439, 21, -334, -41, 36,
	168, -5, -326, 507, -352, 532, -320, -402, 513, 216,
	58, 23, -231, -404, 541, 532, -112, 266, -605, -4,
	-424, 464, -609, 130, -614, -616, -611, 348, 502, -620,
	64, 532, 532, 433, 433, -569, -570, 478, 354, -540,
	-169, 532, -361, 83, -361, 532, -345, 337, 298, 531,
	-7, 532, 541, -7, 422, 532, -402, -386, 246, -7,
	-169, -7, 531, -638, -543, 531, -555, 64, 532, -412,
	-557, 23, -557, -15, 531, 531, 531, -337, -346, 303,
	-346, 392, -346, -330, -146, 62, -366, -15, -15, 532,
	29, 29, 531, 23, -287, -379, -7, -7, -373, 359,
	93, -373, 93, -7, 61, -7, -369, 61, -565, -146,
	-414, -412, 531, -566, 531, 531, 531, 532, -7, -287,
	532, -99, 355, -99, -471, -471, 74, -477, -128, -130,
	-5, -159, -162, -56, -165, -167, -166, -168, 531, 238,
	408, 293, 532, -134, 388, 127, 294, -119, 130, -57,
	-119, -81, 499, 354, -313, 168, 36, 541, 23, 532,
	74, -56, 134, 139, -312, -310, 532, 306, -270, 90,
	89, 88, 93, -249, -209, -169, -13, -119, 532, 532,
	-281, -278, 531, -283, -284, -5, 541, 532, 23, -57,
	-296, 23, 106, -56, 106, 105, -576, -576, -576, -576,
	152, 31, 47, -94, 532, 541, -233, -239, -235, 536,
	40, 531, -249, -41, 532, -359, 74, -356, 505, 531,
	-337, -381, -351, -352, -320, 506, 513, 513, -169, 532,
	-363, -592, -595, 540, -99, -617, 51, -639, 262, -616,
	-612, 67, 411, -335, -402, 36, 36, -540, 478, -621,
	-367, 307, -342, 354, -350, -347, -348, 74, 79, 369,
	429, -392, 531, -56, -567, 279, -388, -386, -7, -351,
	-320, 140, -386, -407, 532, -587, -542, 7, -247, -557,
	301, 205, -332, -329, -9, -119, -119, -397, 531, -397,
	-402, -397, 531, -153, -356, -210, -56, 298, -30, 83,
	449, 449, -7, -373, 93, -7, -628, 130, -628, -629,
	-99, -629, -629, -56, -401, 532, 532, 532, -478, -401,
	-473, -401, 541, 23, 541, 532, 531, 531, 425, 532,
	-135, -136, 37, 467, 120, -56, -135, -135, -56, 532,
	532, 155, -314, 145, 144, 140, 134, 140, 134, 141,
	142, -299, -6, 136, 532, 74, -14, 91, 91, -191,
	532, 532, -274, 532, 541, -99, 130, -291, 541, -6,
	-308, -5, -206, -207, 109, 97, 98, -208, 109, 96,
	70, -94, -94, -94, -94, -14, 536, 47, -14, 536,
	-232, -228, -234, -239, -359, -360, 228, -354, -355, -5,
	-273, 531, -41, -352, -381, -328, 506, 506, -621, -365,
	303, 531, -604, 273, 531, -610, 411, 437, -576, 130,
	286, 286, 23, 449, 309, -348, 74, -347, 74, 97,
	98, -391, 532, 23, -15, -386, 422, -328, -7, 531,
	532, 541, 532, 541, -92, 532, 532, -361, -14, -361,
	-229, -361, -146, -154, -153, 532, -392, -56, -7, -7,
	449, -389, 391, 87, 509, -389, 532, 541, 532, 532,
	532, 64, -130, -131, -162, -119, -119, 531, -137, 270,
	-136, 377, 283, 411, 377, 283, -137, -137, -312, 143,
	143, 140, 140, 134, 140, 134, 140, 138, 136, 93,
	70, 70, -249, -253, 23, -125, 399, 532, -284, -285,
	-286, 4, 40, 31, 47, 128, 124, -58, 123, 110,
	93, 110, -201, 102, 531, 40, 86, 107, 108, -14,
	536, 532, 541, -360, 27, 98, 380, 532, 541, -202,
	-202, -56, -359, -381, -41, -352, -344, 531, -231, -638,
	-56, -619, -5, 262, -412, -412, -169, -7, -349, 354,
	35, 24, 93, -349, 532, 440, -560, -7, 422, -386,
	532, 7, -329, 61, -335, 532, -335, -345, -249, 532,
	-154, -373, -373, -7, 70, -412, -99, -471, 532, 532,
	-159, 120, 71, 455, 354, 30, 532, 74, 74, 140,
	140, -310, -5, -14, -14, -5, 531, -286, -57, -57,
	47, -57, -288, 531, -191, -211, -190, 86, 531, -234,
	127, 127, -355, -366, -366, 532, -360, -41, -359, -381,
	-367, -364, -209, 532, -587, 532, 411, 541, 541, -621,
	195, 47, 40, -386, -7, 531, -350, -335, -373, -15,
	-401, 532, 411, 501, -136, 146, 146, 74, 61, 83,
	93, 93, -56, 123, -293, -294, -5, 131, 155, 532,
	-119, -202, -359, -360, -41, -360, 532, 541, -365, 531,
	-617, 61, 64, -229, -229, -386, -119, -335, 147, 147,
	136, -59, -587, 166, -5, -5, -5, 532, -283, 532,
	541, 130, -99, -317, 128, -201, -201, 102, 532, -366,
	-360, -359, -249, -209, -344, -615, -618, -92, 6, -94,
	-6, 273, 433, 433, 532, 40, 531, 532, -309, -294,
	124, -295, -315, 29, 128, 7, -211, -360, -367, 532,
	541, -638, 36, 36, -59, -73, 532, -313, -295, -295,
	7, 123, 23, 155, -360, -618, -587, 286, 286, 83,
	-121, -314, -313, -309, 531, -7, -201, -249, 531, -412,
	-412, -5, 532, -312, -314, -293, 123, -615, -312, 532,
	531, 532, -293, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 2902, 2902, 1492,
	-2, 0, 1775, -2, 1838, 1838, 0, 0, 0, 2902,
	0, 2902, 2902, 0, 0, 0, 0, 0, 1580, 1852,
	1848, 0, 1848, 2267, 2268, 0, -2, 1483, 1579, 0,
	2243, 2244, 1615, 0, 1526, 0, 0, 0, -2, 2905,
	2900, 2901, 2657, 0, 0, 0, 0, 0, 0, 1774,
	0, 0, 2801, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 1903, 1904, 0, 0,
	-2, 2076, 2778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1837, 0, 0,
	0, 0, 0, 2278, 0, 0, 0, 2274, 2275, 2276,
	0, 0, 2280, 2281, 2282, 0, 0, 0, 1821, 0,
	1824, 1825, 1826, 1827, 1828, 1829, 0, 2199, 287, 398,
	432, 2204, 2603, 0, 515, 171, 388, -2, 379, 465,
	2618, 106, 107, 108, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 399, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 2213, 2205, 515, 432, 398,
	2209, 2210, 171, 287, 305, 379, 388, 465, 2905, 2657,
	2905, 0, 2905, 0, 2890, 398, 432, 515, 386, 2892,
	0, 0, 2967, 2968, 2972, 2463, 2463, 2463, 152, 2463,
	0, 0, 2967, 2463, 2214, 1848, 1580, 0, 2227, 2228,
	2229, 2230, 2231, 2232, 2233, 2592, 1846, 0, 1851, 2239,
	0, 1847, 2245, 515, 432, 398, 2249, 0, 2255, 0,
	0, 2269, 2270, 2271, 2272, 2273, -2, 0, 2810, 2810,
	2810, 0, -2, 1497, 1498, 0, 1498, 0, 1531, 0,
	1614, 1616, 1525, 1554, 1555, 121, 0, 0, 1576, 362,
	1581, 124, 116, 1577, 0, 2, 2898, 0, 2899, 2656,
	2644, 0, 0, 2650, 0, 0, 0, 1559, 0, 0,
	0, 1494, 2463, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 1838, 2800, -2, 0, -2, 256,
	1844, 138, 0, 175, 237, 1480, 0, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 2484, 0, 0, 256, 2006, 256, 0, 0, 2548,
	256, 292, 2006, 2113, 2114, 2115, 2116, 2117, 2638, 2639,
	2640, 2641, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 0, 0, 2700, 0, 0,
	124, 256, 90, 2665, 0, 0, 0, 2006, 2006, 1905,
	1906, 1907, 1908, 0, 256, 0, 0, 256, 0, 0,
	256, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, -2, -2, 1412, 0, 0, 0, 0, 0,
	0, -2, 3059, 0, 2113, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 2915, 0, 292, -2, 2915, 0, 0, 256, 0,
	0, 0, 2954, 256, 94, 140, 256, 94, 117, 0,
	256, 94, 256, 1835, 1404, 1405, 1406, 1407, 1408, 1409,
	1418, 1421, 1422, 1423, 1424, 1425, 1461, 218, 1418, 1418,
	1418, 1431, 1432, 1433, 1434, 1435, 1457, 1457, 1410, 1411,
	1459, 1447, 1459, 1459, 1442, 0, 1459, 94, 256, 0,
	292, 2920, 256, 2111, 2918, 256, 2922, 256, 2277, 0,
	2279, 0, 1819, 1820, 1823, 102, 2200, 398, 2201, 173,
	0, 2202, 0, 0, 0, 0, 0, 0, 2606, 1208,
	2607, 2608, 2633, 2634, 2609, 2636, 2637, 0, 2206, 0,
	2208, 2886, 2887, 2888, 2896, 2889, 0, 2897, 2891, 2895,
	0, 0, 0, 2969, 0, 2974, 0, 2975, 2976, 2977,
	2978, 0, 0, 0, 0, 1580, 2216, 0, 2218, 2226,
	519, 2221, 2222, 2223, 2591, 1848, 1845, 0, 2236, 2238,
	2240, 124, 0, 2246, 0, 2248, 0, 2258, 0, -2,
	102, 102, 102, 2262, 2263, 2264, 2265, 0, 2865, 1510,
	1507, 0, 2862, 2863, 1511, 0, 0, 0, 1519, 0,
	2808, 2809, 0, 0, 0, -2, 0, 1495, 1496, 1621,
	1530, 1532, 1536, 1537, 1085, 0, 0, 0, 0, 0,
	0, 1975, 1152, 1175, 1176, 1239, 0, 1179, 1180, 1181,
	478, 0, 1186, 1187, 482, 1462, 325, 511, 1229, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 0, 0, 0,
	1362, 1485, 1487, 1243, 1207, 1189, 1190, 1191, 1192, 1193,
	-2, 492, 489, 534, 1245, 1246, 1248, 1250, 1252, 1254,
	1255, 1256, 1257, 1258, 1259, -2, 0, 479, 503, 507,
	508, 514, 517, 518, 504, 475, 481, 498, 522, 523,
	525, 527, 524, 528, 529, 491, 488, -2, 494, 495,
	499, 493, 490, 497, 530, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 500, -2, -2, -2, -2,
	-2, -2, -2, 1436, 1437, 1438, 1439, 1621, 0, 1556,
	122, 1231, 0, 1234, 1557, 0, 0, 0, 1578, 0,
	0, 0, 1402, 2903, 0, 0, 2646, 0, 2648, 2649,
	2651, 0, 1739, 0, 1560, 0, 1761, 0, 0, 0,
	0, 256, 2463, 0, 2499, 256, 89, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 1909, 0, 2469, 0,
	0, 1843, 139, 0, 2482, 0, 2779, 0, 0, 2483,
	0, 0, 0, 0, 0, 2489, 0, 0, 2507, 2004,
	2005, 0, 0, 0, 256, 2552, 0, 0, 0, 0,
	2925, 0, 0, 0, 0, 0, 0, 0, 0, 2734,
	0, 0, 0, 0, 0, 2925, 2925, 2086, 2099, 2186,
	2107, 0, 0, 0, 2186, 2186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2178,
	0, 0, 0, 2088, 2090, 0, 0, 0, 0, 2091,
	0, 2502, 1984, 0, 0, 0, 1988, 2003, 1991, 0,
	0, 0, 0, 2006, -2, 2001, 0, 2093, 2186, 0,
	0, 256, 0, 0, 256, 0, 2250, 0, 2251, 0,
	2296, 0, 1347, 0, 0, 0, 0, 2473, 0, 0,
	0, 0, 0, 3056, 3026, 0, 0, 3030, 3031, 3032,
	3033, 0, 0, 3038, 0, 0, 0, 0, 3043, 0,
	0, 2416, 3057, -2, 0, 0, 2943, 2944, 0, 0,
	0, 0, 0, 0, 3056, 0, 0, 0, 0, 0,
	3056, 0, 0, 2545, 2546, 0, 0, 0, 0, 0,
	0, 0, 2759, 2760, 0, 0, 0, 0, 0, 2927,
	0, 0, 0, 0, 0, 2927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3064, 3065, 0, 2514, 1838, 0, 0, 0,
	2188, 92, 93, 0, 0, 2190, 0, 0, 0, 2193,
	0, 1419, 1418, 0, 1426, 0, 1427, 1428, 1429, 1430,
	0, 1451, 0, 0, 0, 1453, 1449, 1458, 0, 1440,
	1441, 1459, 1459, 1445, 2195, 0, 94, 256, 0, 0,
	0, 0, 0, 0, 1822, 2283, 2284, 2285, 2286, 0,
	0, 0, 2610, 2611, 2613, 2604, 2614, 2616, 2620, 2622,
	2623, 1809, 1810, 1811, 1812, 1813, 0, 0, 1816, 1209,
	2615, 2617, 2619, 2605, 2624, 2625, 2626, 2627, 2628, 2629,
	2630, 2631, 2632, 2612, 2642, 2643, 2207, 386, 2894, 0,
	2979, 0, 394, 0, 245, 352, 382, 200, 217, 280,
	281, 335, 388, 425, 437, 0, 125, 3013, 2973, 0,
	0, 119, 0, 0, 0, 3013, 0, 2215, 1580, 0,
	2220, 2224, 2225, 1850, 2239, 0, 2242, 2239, 2247, 2253,
	2254, 0, 0, 0, 0, 89, 2266, 1501, 2864, 1502,
	1509, 1512, 0, 0, 1514, 0, 1516, 0, 2860, 2861,
	2866, 2874, 2875, 0, 2884, 2885, 2872, 0, 2876, -2,
	0, 0, 1522, 0, 1527, 1528, 1529, 2826, 2827, 1891,
	2865, 1510, 1539, 0, 0, 0, 687, 655, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	0, 648, 902, -2, 0, -2, 989, 820, 1123, 1125,
	-2, 799, 0, 0, 1535, -2, 899, 1382, 114, 115,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 649, 650, 651, 652, 653,
	654, 656, 657, 658, 659, 660, 661, 662, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 795, 796, 797,
	798, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 900, 901,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1090, 1091, 1105, 1108, 1109, 0, 0, 0, 1177,
	1402, 0, -2, 1182, 1183, 1184, 1185, 0, 0, 0,
	0, -2, 1202, 0, 1204, 1226, 0, 0, 1361, 1487,
	0, 2838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1691,
	1691, 0, 0, 0, 0, 0, 0, 0, 0, 1539,
	0, 1232, 1235, 1236, 1413, 109, 110, 111, 112, 113,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 1233, 0,
	0, 0, 1582, 1586, 0, 0, 1593, 0, 0, 0,
	0, 1384, 1386, 0, 0, 1488, 0, 0, 2904, 2645,
	2647, 0, 0, 2655, 1874, 1741, 0, 0, 0, 0,
	1539, 1752, 0, 0, 1239, 1561, 1599, 0, 0, 1770,
	1770, 1767, 1768, 1912, 0, 0, 0, 2085, 0, 2496,
	2498, 0, 0, 0, 256, 88, 2395, 0, 2395, 0,
	2419, 2420, 0, 0, 0, 2481, 0, 0, 0, 0,
	0, 2598, 2597, 2599, 2600, 2601, 2602, -2, 89, 1964,
	0, 1415, 0, 2682, 2684, 0, 0, 1481, 1635, 0,
	0, 0, 0, 0, 0, 2491, 0, 2504, 0, 2539,
	1912, 0, 0, 0, 2551, 2547, 0, 0, 2562, 2563,
	0, 2907, 0, 256, 2463, 0, 0, 2699, 2706, 0,
	0, 0, 0, 2665, 2741, 0, 424, -2, 2463, 2749,
	0, 2664, 0, 0, 0, 2906, 2908, 0, 0, 0,
	0, 2185, 0, 0, 2118, 256, 0, 2142, 0, 0,
	2021, 0, 1975, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 2150, 2151, 0, 0, 2171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2164, 0, 0,
	2166, 2167, 0, 2172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1985, 1989, 1994, 1995, 1986, 1987,
	0, 2002, 1992, 1993, 0, 0, 0, 0, 0, 0,
	0, 0, 2095, 2186, 0, 0, 2097, 2186, 0, 2539,
	0, 0, 2288, 2289, 0, 0, 2384, 2385, 2386, 2387,
	2389, -2, 2391, 0, 0, 0, 0, 0, 0, 2184,
	0, 0, 0, 0, 2476, 0, 2585, 0, 0, 0,
	0, 3023, 3027, 3055, 0, 0, 0, 3036, 3037, 3039,
	3040, 3041, 3042, 3044, 2415, 398, 432, 0, 0, 0,
	0, 0, 2717, 0, 0, 3024, 0, 2737, 2739, 2738,
	2740, 0, 3025, 0, 0, 2544, 2549, 2550, 0, 2753,
	0, 2754, 2665, 0, 0, 2761, 0, 0, 0, 2688,
	2689, 2692, 0, 2909, 2911, 0, 2212, 0, 2912, 0,
	0, 2910, 2913, 2914, 0, 2701, 2702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 2512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1830, 1831, 1832, 1833,
	1834, 2278, 2952, 2953, 0, 0, 0, 0, 94, 141,
	94, 118, 94, 0, 1836, 94, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 94, 2197, 0,
	0, 0, 2112, 2921, 2919, 2923, 2596, 0, 0, 1210,
	1814, 1211, 1815, 2893, 0, 0, 2980, 2981, 0, 0,
	2984, 3061, 2985, 2986, 2987, 2988, 2989, 0, 2991, 3014,
	3016, 2992, 2993, 2994, 0, 0, 0, 0, 0, 2948,
	0, 0, 0, 0, 2970, 2462, 0, 0, 2967, 94,
	0, 2217, 2219, 2239, 1849, 2235, 2241, 2237, 2258, 2257,
	2256, 2259, 2260, 2261, 1508, 0, 1517, 0, 0, 0,
	2877, 0, 0, -2, -2, 0, 2873, 2882, 2883, 2878,
	-2, -2, 2879, 1513, 1520, 0, 1518, 0, 0, 1894,
	1889, 1890, 1505, 1506, 1596, 0, 1620, -2, -2, 287,
	248, -2, 0, 137, 1533, 1086, 1087, 0, 1089, 1092,
	1093, 1094, 1095, 1096, 1097, -2, -2, -2, -2, -2,
	-2, 1104, 1106, 1107, -2, 1385, 1387, 0, 1488, 0,
	-2, 0, 1122, 0, 1127, 1129, 1131, 0, 1144, 1146,
	0, 1401, 1388, 1389, 1390, 1391, 1392, 0, 0, 1489,
	1139, 1490, 0, 0, 1379, 1380, 1381, 1534, 0, 1126,
	0, 0, 1143, 1973, 0, 1240, 1239, 0, 0, 0,
	1370, 1371, 0, 0, 0, -2, 1483, 1348, 0, 0,
	0, 0, 1355, 1357, 0, -2, 1205, 1213, 1214, 1215,
	1216, 1217, 1218, 1227, 0, 1367, 1363, 0, 2838, 0,
	1242, 0, 0, 1682, 1085, 0, 1687, 1725, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 0, 0, 0, 1357, 1304, 0,
	0, 1153, 0, 0, 0, 511, 0, 0, 1357, 0,
	0, 0, 0, 0, 1402, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 1327, 1330, 0, 0, 0, 0,
	0, 1682, 0, 1676, 0, 1357, 1685, 1725, 0, 1674,
	-2, 1401, 0, 1691, 1299, 0, 0, 0, 0, 1596,
	0, 1237, 1234, 1558, 1594, 0, 1584, 0, 123, 1403,
	2652, 2653, 2654, 1896, 0, 0, 1746, 1747, 0, 1748,
	1239, 1745, 1740, 1599, 0, 0, 0, 1757, 1756, 1896,
	0, 1760, 1540, 1602, 1602, 0, 1546, 0, 1611, 1602,
	1602, 1625, 384, 531, 496, 121, 1343, 1344, 1345, 0,
	487, 0, 0, 1769, 0, 0, 1911, 1913, 1915, 1916,
	1917, 0, 1941, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2409, 2394, 2396, 0, 0, 0, 2401, 2402,
	0, 2374, 2375, 2377, 2409, 0, 2422, 2424, 2425, 2426,
	2428, 2421, 0, 2480, 0, 0, 0, 0, 2568, 2572,
	2570, 1410, 0, 2798, 2463, 0, 2468, 0, 0, 0,
	-2, 2472, 1416, 2681, 0, 0, 0, 2785, 0, 1634,
	1636, 0, 2581, 2495, 2485, 2486, 2487, 2488, 0, 2506,
	0, 0, 0, 2511, 2006, 1956, 2538, 2536, 0, 0,
	0, 0, 0, 0, 0, 2548, 0, 0, 2924, 2928,
	0, 0, 0, 0, 0, 0, 0, 2938, 2939, 0,
	0, 0, 0, 0, 2064, 0, 2085, 2708, 0, 0,
	2723, 2724, 0, 2729, 2731, 2732, 0, 124, 2665, 2736,
	0, 2463, 0, -2, 2751, 2751, 0, 0, 0, 2108,
	2319, 0, 0, 0, 102, 0, 2120, 256, 1939, 0,
	0, 0, 2354, 0, 0, 0, 0, 0, 1840, 0,
	2354, 256, 94, 256, 94, 2144, 2147, 2149, 0, 2170,
	0, 2363, 2366, 2148, 2152, 2155, 2156, 0, 0, 0,
	0, 2160, 0, 2157, 2158, 2159, 2163, 0, 2165, 0,
	2168, 2173, 2677, 2678, 2679, 0, 0, 0, 2669, 2671,
	399, 147, 219, 0, 1960, 2087, 2100, 2186, 0, 2327,
	2182, 2089, 0, 0, 2321, 1990, 1996, 1997, 1998, 2000,
	2092, 0, 2503, 2323, 0, 2094, 2186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 2299, 2287, 0,
	0, 2383, 0, 2382, 1418, 2388, 1418, 0, 2300, 2301,
	2302, 2303, 0, 2474, 94, 256, 2183, 2475, 0, 0,
	2354, 2479, 2306, 0, 0, 3034, 3035, 2307, 2917, 0,
	0, 0, 0, 2719, 0, 0, 2313, 2314, 2315, 2316,
	2317, 2318, 2665, 2755, 2665, 2665, 0, 0, 0, 2690,
	2691, 2344, 2926, 2211, 2916, 2345, 0, 2346, 2347, 2727,
	1817, 1818, 0, 0, 0, 0, 0, 0, 0, 2352,
	0, 0, 0, 0, 94, 2579, 256, 94, 0, 3045,
	3049, 3066, 0, 0, 1840, 2513, 0, 2516, 2517, 2518,
	0, 2520, 2521, 2522, 175, 237, 0, 2525, 2526, 0,
	2528, 0, 0, 0, 0, 0, 0, 2187, 2189, 2191,
	0, 2194, 1417, 1460, 1457, 1455, 1456, 1457, 0, 1446,
	2196, 94, 0, 0, 2590, 0, 2203, 2621, 3005, 3000,
	3002, 0, 126, 0, 2983, 0, 2990, 3018, 0, 0,
	0, 0, 0, 0, 0, 3013, 3007, 0, 0, 2971,
	120, 3013, 0, 2950, 0, 2234, 2252, 1515, 2867, 0,
	2870, 0, 2880, 2881, 0, 0, 1521, 2828, 1894, 1464,
	0, 2830, 0, 2812, 0, 1538, 0, 127, 0, 128,
	128, 128, 128, 0, 136, 0, 0, -2, -2, 0,
	0, 0, 1140, 0, -2, 1124, 1128, 1130, 1132, 0,
	1145, 1148, 0, 1401, 0, 1147, 1150, 0, 0, 1393,
	1394, 1395, 1396, 0, 0, 0, 1141, 0, 0, 0,
	0, 1974, 1178, 1403, 1368, 1369, 0, 1188, 1463, -2,
	0, 0, 1482, 1349, 1483, 1483, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1364, 0, 0, 1241,
	0, 2836, 2837, 2841, 0, 1401, 0, 0, 0, 0,
	1685, 0, 1666, 1724, 0, 0, 1247, 1249, 1251, 1253,
	0, 1262, 0, 1263, 0, 1265, 1266, 0, 0, 1267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1155, 1156, 1170,
	1268, 1269, 0, 0, 0, 0, 0, 0, 0, 1274,
	0, 1312, 0, 1276, 1277, 1278, 1279, 0, 1284, 0,
	0, 1333, 0, 0, 0, 0, 1290, 1401, 0, 1292,
	1725, 1691, 0, 0, 0, 1691, 1295, 0, 1297, 0,
	0, 0, 0, 0, 2812, 1617, 0, 1233, 0, 1585,
	1738, 0, 1877, 0, 0, 0, 1750, 1896, 1753, 1754,
	0, 0, 1759, 1597, 196, 0, 0, 0, 0, 0,
	1573, 1573, 1573, 1571, 1542, 1601, 0, 1606, 1544, 1602,
	1611, 1602, 1602, -2, 1546, 0, 1548, 1607, 0, 1606,
	1550, 1552, 1622, 0, 0, 0, 0, -2, 0, 0,
	2006, 1771, 1772, 1773, -2, 2054, 0, 1921, 2056, 0,
	1941, 0, 0, 2084, 0, 2499, 2079, 0, 2395, 0,
	2390, 2371, 2407, 0, 0, 2397, 2398, 2403, 2399, 2400,
	0, 2373, 0, 0, 0, 2372, 0, 0, 0, 0,
	2564, 2565, 0, 0, 0, 2571, 0, 0, 0, 0,
	2085, 0, 0, 2471, 1963, 0, 1966, 1967, 0, 0,
	2012, 1975, 0, 0, 0, 0, 0, 1969, 0, 2683,
	2685, 2658, 2659, 2660, 2661, 2662, 2663, 325, 1468, 1469,
	0, 2493, 0, 1640, 0, 2580, 2582, 2490, 0, 2508,
	2509, 2510, 2507, 2529, 0, 2537, 2532, 2540, 2533, 2535,
	2534, 2054, 1941, 0, 0, 2552, 1956, 0, 2929, 2930,
	2931, 0, 0, 2934, 2935, 0, 0, 0, 0, 2942,
	2596, 0, 2085, 0, 0, 0, 2698, 2715, 0, 2705,
	0, 0, 0, 0, 0, 2735, 2742, 2751, 0, 2751,
	2746, 0, 2748, 2665, 0, 0, 0, 0, 2179, 0,
	1951, 2180, 2181, 0, 0, 1935, 1938, 0, 2020, 2079,
	0, 0, 2024, 0, 0, 2354, 0, 0, 2078, 2122,
	0, 0, 0, 0, 2135, 0, 2141, 1978, -2, 0,
	2143, 0, 2139, 0, 2146, 2169, 2675, 2676, 2362, 0,
	0, 0, 2153, 2161, 2154, 2162, 2174, 2175, 0, 0,
	2176, 2668, 0, 2672, 2673, 2674, 1959, 1961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2325, 0, 2096, 2186, 0, 2329, 0, 2098, 2186, 0,
	2530, 2290, 2380, 2381, 0, 0, 0, 2477, 0, 2584,
	0, 2587, 3028, 0, 2308, 0, 0, 0, 0, 0,
	2721, 0, 2716, 0, 2758, 2756, 2757, 0, 0, 2343,
	0, 0, 0, 0, 0, 0, 0, 0, 2575, 0,
	3067, 0, 3069, 0, 3063, 0, 0, 0, 2515, 0,
	0, 0, 2291, 0, 0, 0, 0, 0, 2955, 2956,
	2957, 94, 1450, 1452, 1448, 2198, 2560, 0, 2594, 0,
	3013, 0, 0, 3003, 2982, 3062, 0, 3015, 3017, 0,
	0, 0, 0, 0, 2949, 0, 3008, 3009, 3010, 3011,
	3012, 94, 0, 3013, 2868, 0, 2871, 0, 1377, 0,
	2829, 0, 1892, 1893, 2825, 0, 1595, 129, 130, 0,
	0, 0, 0, 135, 1088, -2, 0, 0, -2, 0,
	0, -2, 0, 0, 1149, 1151, -2, 1398, 1400, 0,
	0, 1491, 0, -2, 0, 1374, 0, -2, 1372, 1350,
	0, 1356, 0, 0, 0, 1358, 1359, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 0, 1206, 1360, 1366, 0, 0,
	2843, 2840, 0, 1691, 0, 0, 1678, 1679, 1691, 0,
	1723, 1244, 0, 1314, 0, 0, 1154, 1157, 1158, 1159,
	1160, 1161, 1162, -2, -2, -2, -2, -2, -2, 1169,
	0, 0, 1173, 1325, 0, 1308, 1309, 0, 1271, 1272,
	1273, 1311, 0, 1280, 0, 1328, 1329, 0, 0, 0,
	1286, 1643, 0, 165, 1287, 0, 1342, 0, 1691, 1677,
	1690, 0, 1675, 0, 0, 0, 1296, 1298, 1670, 1670,
	1670, 0, 2825, 1238, 0, 1895, 0, 0, 0, 1742,
	1743, 0, 1749, 1751, 0, 1758, 0, 1541, 0, 0,
	0, 0, 0, 1568, 1572, 1569, 1570, 1543, 0, 1604,
	0, 1545, 1549, 1551, 1553, 1562, 1604, 0, 0, 1624,
	0, 0, 526, 0, 1483, 0, 1781, 2006, 0, 1841,
	2056, 0, 1914, 1918, 2064, 2055, 0, 0, 1942, 1944,
	1945, 1964, 0, 1912, 0, 0, 2467, 2085, 2497, 0,
	0, 2409, 0, 2412, 2410, 0, 0, 0, 2376, 2378,
	2379, 2430, 2423, 2427, 0, 0, 2569, 0, 2573, 0,
	2574, 0, 2803, 0, 0, 2598, 0, 1968, 1970, 2011,
	2665, 2665, 0, 2016, 2463, 0, 1976, 0, 1971, 1972,
	0, 1637, 1638, 0, 2494, 0, 2492, 2505, 0, 2541,
	0, 0, 1912, 0, 0, 0, 2557, 0, 2932, 2933,
	2936, 2937, 2940, 2941, 2588, 0, 2070, 2063, 0, 2447,
	2448, 0, 2693, 0, 2719, 0, 2707, 2709, 2710, 2711,
	2712, 2713, 2722, 2725, 2730, 2733, 0, 2743, 2744, 2745,
	2747, 0, 2752, 0, 0, 0, 2331, 2337, 0, 2119,
	0, 1956, 1934, 0, 1936, 1937, 2354, 0, 2355, 0,
	2357, 0, 0, 2073, 0, 2026, 0, 0, 2031, 0,
	1888, 1888, 0, 0, 2126, 2136, 1839, 1982, 0, 0,
	0, 0, 2130, 2132, 2133, 2131, 0, 1979, 0, 0,
	0, 0, 94, 94, 2364, 2365, 2368, 2177, 2680, 2670,
	2320, 0, 0, 0, 0, 2328, 0, 0, 2322, 2333,
	2324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2305, 2392, 0, 2304, 94, 2354, 3029, 0, 0, 2786,
	2771, 0, 0, 0, 2787, 2788, 0, 0, 2311, 2704,
	0, 0, 0, 2341, 2342, 2559, 2728, 2348, 2349, 2350,
	2351, 94, 2578, 0, 0, 97, 94, 3046, 3047, 3048,
	3050, 3051, 3052, 3053, 3054, 0, 0, 0, 0, 0,
	0, 0, 0, 2961, 2962, 2963, 2964, 2965, 2966, 0,
	0, 2192, 0, 2595, 2945, 3001, 0, 3019, 2995, 2996,
	2997, 2998, 2999, 3006, 2946, 0, 94, 2869, 1376, 1403,
	0, 2832, 0, 2810, 131, 132, 133, 134, -2, -2,
	0, 0, 0, -2, -2, 1397, 1399, -2, -2, 1142,
	1373, 1403, 1203, 1483, 1351, 1353, 1354, 1228, 1365, 1484,
	1483, 0, 1486, 0, 1680, 1681, 0, 1686, 0, 1261,
	1264, 0, 0, 0, 1174, 0, 0, 0, 1270, 1275,
	0, 0, 521, 1285, 1331, 1332, 1644, 0, 1645, 1641,
	1642, 0, 0, 0, 1337, 313, 0, 1293, 1683, 1684,
	1294, 1691, 0, 1707, 1691, 1336, 2832, 1589, 0, 0,
	1880, 0, 0, 1755, 1598, 1600, 1563, 0, 1565, 0,
	0, 0, 1567, 0, 0, 0, 1547, 0, 0, 0,
	116, 0, 1626, 1630, 0, 0, 0, 0, 1896, 1763,
	1863, 1863, 0, 1765, 1778, 0, 1781, 0, 2064, 0,
	0, 0, 105, 0, 1940, 0, 1946, 0, 2056, 0,
	1941, 0, 2458, 0, 0, 0, 0, 2369, 0, 1631,
	0, 1414, -2, 2404, 0, 2405, 2440, 0, 2457, 0,
	2566, 0, 0, 0, 2805, 0, 0, 0, 2470, 1965,
	0, 2072, 2072, 0, 2040, 0, 1977, 0, 1639, 2583,
	0, 1957, 0, 0, 0, 0, 1956, 0, 0, 0,
	2593, 0, 0, 0, 0, 0, 2721, 2714, 0, 0,
	0, 2767, 2767, 0, 0, 0, 0, 2121, 1964, 1932,
	1933, 2022, 2036, 2356, 2360, 2358, 2359, 2361, 2036, 0,
	2036, 0, 0, 1882, 91, 0, 1883, 0, 2123, 0,
	0, 1983, 2124, 0, 2128, 0, 1640, 1981, 2129, 2138,
	2145, 0, 0, 0, 2110, 0, 2110, 0, 0, 2335,
	2326, 0, 0, 0, 2339, 2330, 0, 2393, 2478, 2586,
	2309, 2310, 0, 0, 0, 2777, 0, 0, 0, 0,
	0, 0, 2353, 2576, 2577, 3068, 1640, 0, 2523, 2524,
	2292, 0, 0, 2527, 0, 0, 0, 2561, 3004, 3013,
	2951, 1378, 1465, 1523, 0, 2824, 0, -2, -2, -2,
	1375, 0, 2847, 0, 1688, 1689, 1722, 1324, -2, 0,
	1310, 1306, 1307, 1281, 0, 1282, 0, 1646, 1288, 1289,
	0, 1338, 1291, 1716, 1669, 1671, 0, 0, 0, 0,
	1693, 1694, 1695, 1696, 1697, 1698, 1701, 1705, 0, 1334,
	0, 1524, 1592, 0, 0, 1873, 1596, 0, 1876, 0,
	1564, 0, 1575, 1566, 0, 0, 1605, 0, 1608, 1610,
	1625, 0, 1628, 0, 0, 0, 1647, 0, 0, 1668,
	1350, 1762, 1764, 0, 0, 0, 1858, 0, 1780, 1782,
	1783, 1844, 1844, 1786, 1787, 1844, 1844, 0, 0, 0,
	1797, 1805, 1596, 1776, 105, 0, 1919, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1920, 2068, 0,
	0, 0, 1943, 1964, 2064, 2054, 2056, 1941, 0, 0,
	0, 0, 0, 2079, 0, 2395, 1633, 2408, 0, 2413,
	2414, 0, 2446, 2442, 2429, 2431, 0, 2434, 2435, 2354,
	0, 2567, 2793, 0, 0, 2799, 2804, 0, 0, 2802,
	2467, 2085, 2013, 0, 2014, 2030, 2045, 0, 2010, 0,
	2770, 1955, 0, 1956, 0, 2054, 1941, 2542, 0, 1956,
	2596, 2069, 0, 0, 2694, 0, 2703, 0, 2750, 2767,
	2764, 0, 2763, 2792, 0, 0, 0, 1962, 2665, 0,
	2665, 0, 2665, 2032, 2033, 325, 1891, 90, 1887, 1888,
	2127, 2137, 0, 0, 2667, 2367, 2332, 2338, 2101, 2109,
	0, 2103, 0, 2334, 0, 2110, 0, 0, 2772, 2782,
	2782, 2775, 0, 2789, 0, 0, 0, 2718, 2312, 94,
	2519, 0, 0, 0, 3005, 94, 0, 94, 2831, 2833,
	0, 2811, 2813, 2815, 2816, 2817, 2818, 2819, 0, 195,
	381, 482, 1352, 0, 0, 0, 0, 2842, 0, -2,
	0, 0, 1339, 1340, 1721, 0, 0, 0, 0, 1301,
	0, 1692, 1699, 1700, 0, 0, 1303, 1335, 1583, 0,
	0, 0, 0, 1875, 1881, 1744, 0, 0, 1603, 1609,
	1623, 1627, 0, 0, 1653, 0, 0, 0, 0, 1650,
	1670, 0, 0, 1862, 0, 1860, 0, 0, 0, 0,
	0, 0, 0, 1796, 1779, 0, 1799, 1800, 1801, 1802,
	1803, 0, 1766, 2068, 2053, 2070, 0, 103, 104, 0,
	1947, 105, 2056, 2064, 0, 2464, 0, 0, 2467, 2081,
	0, 1632, 2409, 2411, 2406, 0, 0, 0, 2441, 2432,
	1844, 2436, 2437, 0, 2456, 0, 0, 2806, 2807, 2459,
	0, 0, 2015, 0, 2017, 2041, 2042, 0, 2037, 2038,
	2039, 2018, 0, 0, 0, 0, 1958, 2553, 1956, 0,
	0, 0, 2558, 2589, 2686, 0, 0, 2696, 2726, 2762,
	2765, 2766, 0, 1953, 0, 0, 0, 2072, 0, 2072,
	2463, 2072, 0, 1894, 1891, 1884, 0, 2010, 2140, 0,
	0, 0, 2336, 2105, 0, 2340, 2008, 0, 2008, 0,
	2783, 0, 0, 0, 3070, 2293, 2295, 2294, 2958, 2959,
	0, 2947, 0, 0, 0, 2820, 0, 0, 0, 2839,
	2859, 2848, -2, 440, 196, 0, 2859, 2859, 1323, 1283,
	1326, 1341, 1705, 0, 0, 1708, 0, 1710, 0, 0,
	0, 1672, 1673, 1706, 1302, 0, 0, 0, 0, 1596,
	1613, 3022, 0, 1651, 0, 1655, 0, 1648, 0, 1649,
	0, 1667, 1853, 1854, 0, 0, 1865, 1855, 0, 0,
	0, 1784, 1785, 1788, 1789, 1790, 1791, 0, 1794, 1795,
	1798, 0, 1806, 1808, 2070, 1899, 0, 0, 2058, 1888,
	1888, 0, 2068, 2064, 105, 2056, 2465, 2466, 2460, 1975,
	0, 0, 2370, 0, 0, 2439, 2443, 2444, 0, 0,
	0, 0, 0, 0, 2029, 2043, 0, 2044, 0, 0,
	0, 0, 0, 0, 2769, 2555, 0, 0, 1956, 0,
	2695, 0, 1948, 0, 1952, 1949, 0, 2354, 0, 2354,
	2040, 1596, 0, 1885, 1894, 2125, 2134, 2666, 2110, 2110,
	0, 2773, 2007, 2780, 0, 2774, 0, 0, 2790, 2791,
	2720, 0, 2834, 2835, 2814, 0, 0, 0, 2844, 0,
	0, 2850, 2851, 2852, 2853, 2854, 2845, 2846, 0, 1718,
	1720, 1709, 1711, 0, 1714, 0, 1715, 1702, 1703, 0,
	0, 0, 1872, 1574, 0, 3020, 0, 1629, 1654, 1657,
	1658, 0, 0, 0, 1663, 0, 1656, 0, 0, 1856,
	0, 1857, 1866, 0, 0, 0, 0, 1859, 1861, 1792,
	1793, 1804, 0, 1897, 2065, 0, 0, 2057, 0, 91,
	91, 0, 2070, 105, 2068, 2064, 2085, 0, 0, 0,
	0, 2433, 2438, 0, 2796, 2797, 2467, 2071, 2046, 0,
	2049, 2050, 0, 2047, 2009, 2019, 2768, 1956, 0, 2543,
	2687, 2697, 1954, 0, 2023, 2035, 2025, 2045, 2354, 2034,
	1886, 2102, 2104, 2110, 0, 2776, 2784, 94, 2822, 2821,
	0, 0, 2856, 2857, 0, 0, 1300, 0, 0, 1712,
	1713, 0, 0, 0, 0, 1612, 0, 1659, 1660, 1661,
	1662, 1664, 0, 0, 1864, 0, 0, 1870, 0, 1807,
	2066, 2067, 2059, 2060, 2061, 1888, 1901, 2068, 2070, 105,
	2070, 0, 2082, 2081, 0, 2445, 2446, 0, 0, 2461,
	2048, 2463, 2463, 2554, 1956, 0, 2354, 2028, 2106, 2781,
	2960, 2823, 2855, 2858, 2849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1728, 0, -2, 0, 0,
	0, 91, 2070, 1900, 2068, 1596, 2080, 0, 1975, 2451,
	0, 0, 0, 2051, 2052, 2556, 0, 2027, 1717, 1719,
	1704, 0, 0, -2, 1591, 1587, 1588, 3021, 0, 1707,
	0, 0, 1737, 0, 1726, 1867, 1868, 0, 1871, 2062,
	1898, 2070, 2074, 2083, 2085, 0, 2449, 2452, 2453, 2454,
	2455, 0, 0, 0, 1950, 0, 0, 1652, 0, 1729,
	1730, 1716, 1737, 1737, 0, 0, 0, 1902, 2070, 2417,
	0, 0, 0, 0, 0, 1483, 1665, 1721, 1716, 1707,
	1736, 0, 0, 0, 1596, 2450, 0, 0, 0, 0,
	0, 1705, 1721, 1733, 0, 0, 1869, 2075, 2451, 2794,
	2795, 1590, 0, 1731, 1705, 0, 0, 0, 1732, 1734,
	0, 2418, 0, 1735,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:591
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = nil
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:720
		{
			yyVAL.str = ""
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.list = yyDollar[1].list
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:725
		{
			yyVAL.list = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:731
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:735
		{
			yyVAL.ival = 1
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:736
		{
			yyVAL.ival = 0
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:740
		{
			yyVAL.ival = 1
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:741
		{
			yyVAL.ival = 0
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:745
		{
			yyVAL.bval = true
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:746
		{
			yyVAL.bval = false
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.bval = true
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:751
		{
			yyVAL.bval = false
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:755
		{
			yyVAL.list = yyDollar[2].list
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:756
		{
			yyVAL.list = nil
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:757
		{
			yyVAL.list = nil
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.str = yyDollar[1].str
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.str = yyDollar[1].str
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.str = yyDollar[1].str
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.str = yyDollar[1].str
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.str = yyDollar[1].str
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.str = yyDollar[1].str
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.str = yyDollar[1].str
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.str = yyDollar[1].str
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.str = yyDollar[1].str
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.str = yyDollar[1].str
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.str = yyDollar[1].str
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:792
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:805
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:820
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:849
		{
			yyVAL.list = yyDollar[2].list
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:850
		{
			yyVAL.list = nil
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:859
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:872
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:878
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:884
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:890
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:896
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:903
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:910
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:916
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:935
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:951
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "abort"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "absent"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "absolute"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "access"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "action"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "add"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "admin"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "after"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "aggregate"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "also"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "alter"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "always"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "asensitive"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "assertion"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "assignment"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "at"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "atomic"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "attach"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "attribute"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "backward"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "before"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "begin"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "breadth"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "by"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "cache"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "call"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "called"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "cascade"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "cascaded"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "catalog"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "chain"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "characteristics"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "checkpoint"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "class"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "close"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "cluster"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "columns"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "comment"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "comments"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "commit"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "committed"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "compression"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "conditional"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "configuration"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "conflict"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "connection"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "constraints"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "content"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "continue"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "conversion"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "copy"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "cost"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "csv"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "cube"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "current"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "cursor"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "cycle"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "data"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "database"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "day"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "deallocate"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "declare"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "defaults"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "deferred"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "definer"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "delete"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "delimiter"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "delimiters"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "depends"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "depth"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "detach"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "dictionary"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "disable"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "discard"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "document"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "domain"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "double"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "drop"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "each"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "empty"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "enable"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "encoding"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "encrypted"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "enum"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "error"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "escape"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "event"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "exclude"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "excluding"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "exclusive"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "execute"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "explain"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "expression"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "extension"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "external"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "family"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "filter"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "finalize"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "first"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "following"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "force"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "format"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "forward"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "function"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "functions"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "generated"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "global"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "granted"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "groups"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "handler"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "header"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "hold"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "hour"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "identity"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "if"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "immediate"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "immutable"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "implicit"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "import"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "include"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "including"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "increment"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "indent"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "index"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "indexes"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "inherit"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "inherits"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "inline"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "input"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "insensitive"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "insert"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "instead"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "invoker"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "isolation"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "keep"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "key"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "keys"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "label"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "language"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "large"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "last"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "leakproof"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "level"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "listen"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "load"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "local"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "location"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "lock"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "locked"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "logged"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "mapping"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "match"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "matched"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "materialized"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "maxvalue"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "merge"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "method"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "minute"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "minvalue"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "mode"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "month"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "move"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "name"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "names"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "nested"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "new"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "next"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "nfc"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "nfd"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "nfkc"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "nfkd"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "no"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "normalized"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "nothing"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "notify"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "nowait"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "nulls"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "object"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "of"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "off"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "oids"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "old"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "omit"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "operator"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "option"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "options"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "ordinality"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "others"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "over"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "overriding"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "owned"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "owner"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "parallel"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "parameter"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "parser"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "partial"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "partition"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "passing"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "password"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "path"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "plan"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "plans"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "policy"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "preceding"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "prepare"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "prepared"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "preserve"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "prior"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "privileges"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "procedural"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "procedure"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "procedures"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "program"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "publication"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "quote"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "quotes"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "range"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "read"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "reassign"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "recheck"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "recursive"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "ref"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "referencing"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "refresh"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "reindex"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "relative"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "release"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "rename"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "repeatable"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "replace"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "replica"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "reset"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "restart"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "restrict"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "return"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "returns"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "revoke"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "role"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "rollback"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "rollup"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "routine"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "routines"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "rows"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "rule"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "savepoint"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "scalar"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "schema"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "schemas"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "scroll"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "search"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "second"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "security"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "sequence"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "sequences"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "serializable"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "server"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "session"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "set"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "sets"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "share"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "show"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "simple"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "skip"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "snapshot"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "source"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "sql"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "stable"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "standalone"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "start"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "statement"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "statistics"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "stdin"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "stdout"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "storage"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "stored"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "strict"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "string"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "strip"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "subscription"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "support"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "sysid"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "system"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "tables"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "tablespace"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "target"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "temp"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "template"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "temporary"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "text"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "ties"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "transaction"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "transform"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "trigger"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "truncate"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "trusted"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "type"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "types"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "uescape"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "unbounded"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "uncommitted"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "unconditional"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "unencrypted"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "unknown"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "unlisten"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "unlogged"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "until"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "update"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "vacuum"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "valid"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "validate"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "validator"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "value"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "varying"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "version"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "view"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "views"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "volatile"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "whitespace"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "within"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "without"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "work"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "wrapper"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "write"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "xml"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "year"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "yes"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "zone"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "between"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "bigint"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "bit"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "boolean"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "char"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "character"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "coalesce"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "dec"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "decimal"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "exists"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "extract"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "float"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "greatest"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "grouping"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "inout"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "int"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "integer"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "interval"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "json"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "json_array"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "json_arrayagg"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "json_exists"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "json_object"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "json_objectagg"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "json_query"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "json_scalar"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "json_serialize"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "json_table"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "json_value"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "least"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "merge_action"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "national"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "nchar"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "none"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "normalize"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "nullif"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "numeric"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "out"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "overlay"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "position"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "precision"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "real"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "row"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "setof"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "smallint"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "substring"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "time"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "timestamp"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "treat"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "trim"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "values"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "varchar"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "xmlattributes"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "xmlconcat"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "xmlelement"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "xmlexists"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "xmlforest"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "xmlparse"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "xmlpi"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "xmlroot"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "xmlserialize"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "xmltable"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "authorization"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "binary"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "collation"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "concurrently"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "cross"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "current_schema"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "freeze"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "full"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "ilike"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "inner"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "is"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "isnull"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "join"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "left"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "like"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "natural"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "notnull"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "outer"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "overlaps"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "right"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "similar"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "tablesample"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "verbose"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "all"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "analyse"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "analyze"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "and"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "any"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "array"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "as"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "asc"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "asymmetric"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "both"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "case"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "cast"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "check"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "collate"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "column"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "constraint"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "create"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "current_catalog"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "current_date"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "current_role"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "current_time"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "current_timestamp"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "current_user"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "default"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "deferrable"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "desc"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "distinct"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "do"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "else"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "end"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "except"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "false"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "fetch"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "for"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "foreign"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "from"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "grant"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "group"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "having"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "in"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "initially"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "intersect"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "into"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "lateral"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "leading"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "limit"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "localtime"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "localtimestamp"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "not"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "null"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "offset"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "on"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "only"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "or"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "order"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "placing"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "primary"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "references"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "returning"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "select"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "session_user"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "some"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "symmetric"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "system_user"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "table"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "then"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "to"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "trailing"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "true"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "union"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "unique"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "user"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "using"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "variadic"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "when"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "where"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "window"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "with"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "abort"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "absent"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "absolute"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "access"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "action"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "add"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "admin"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "after"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "aggregate"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "all"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "also"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "alter"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "always"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "analyse"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "analyze"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "and"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "any"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "asc"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "asensitive"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "assertion"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "assignment"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "asymmetric"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "at"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "atomic"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "attach"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "attribute"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "authorization"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "backward"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "before"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "begin"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "between"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "bigint"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "binary"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "bit"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "boolean"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "both"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "breadth"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "by"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "cache"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "call"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "called"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "cascade"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "cascaded"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "case"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "cast"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "catalog"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "chain"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "characteristics"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "check"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "checkpoint"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "class"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "close"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "cluster"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "coalesce"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "collate"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "collation"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "column"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "columns"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "comment"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "comments"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "commit"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "committed"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "compression"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "concurrently"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "conditional"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "configuration"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "conflict"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "connection"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "constraint"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "constraints"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "content"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "continue"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "conversion"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "copy"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "cost"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "cross"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "csv"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "cube"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "current"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "current_catalog"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "current_date"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "current_role"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "current_schema"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "current_time"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "current_timestamp"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "current_user"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "cursor"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "cycle"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "data"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "database"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "deallocate"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "dec"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "decimal"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "declare"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "default"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "defaults"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "deferrable"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "deferred"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "definer"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "delete"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "delimiter"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "delimiters"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "depends"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "depth"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "desc"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "detach"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "dictionary"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "disable"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "discard"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "distinct"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "do"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "document"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "domain"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "double"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "drop"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "each"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "else"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "empty"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "enable"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "encoding"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "encrypted"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "end"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "enum"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "error"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "escape"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "event"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "exclude"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "excluding"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "exclusive"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "execute"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "exists"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "explain"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "expression"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "extension"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "external"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "extract"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "false"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "family"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "finalize"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "first"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "float"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "following"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "force"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "foreign"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "format"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "forward"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "freeze"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "full"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "function"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "functions"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "generated"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "global"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "granted"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "greatest"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "grouping"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "groups"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "handler"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "header"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "hold"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "identity"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "if"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "ilike"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "immediate"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "immutable"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "implicit"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "import"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "in"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "include"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "including"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "increment"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "indent"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "index"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "indexes"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "inherit"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "inherits"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "initially"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "inline"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "inner"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "inout"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "input"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "insensitive"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "insert"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "instead"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "int"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "integer"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "interval"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "invoker"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "is"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "isolation"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "join"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "json"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "json_array"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "json_arrayagg"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "json_exists"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "json_object"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "json_objectagg"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "json_query"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "json_scalar"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "json_serialize"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "json_table"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "json_value"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "keep"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "key"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "keys"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "label"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "language"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "large"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "last"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "lateral"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "leading"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "leakproof"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "least"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "left"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "level"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "like"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "listen"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "load"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "local"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "localtime"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "localtimestamp"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "location"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "lock"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "locked"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "logged"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "mapping"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "match"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "matched"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "materialized"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "maxvalue"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "merge"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "merge_action"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "method"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "minvalue"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "mode"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "move"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "name"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "names"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "national"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "natural"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "nchar"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "nested"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "new"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "next"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "nfc"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "nfd"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "nfkc"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "nfkd"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "no"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "none"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "normalize"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "normalized"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "not"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "nothing"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "notify"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "nowait"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "null"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "nullif"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "nulls"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "numeric"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "object"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "of"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "off"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "oids"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "old"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "omit"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "only"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "operator"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "option"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "options"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "or"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "ordinality"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "others"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "out"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "outer"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "overlay"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "overriding"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "owned"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "owner"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "parallel"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "parameter"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "parser"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "partial"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "partition"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "passing"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "password"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "path"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "placing"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "plan"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "plans"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "policy"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "position"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "preceding"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "prepare"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "prepared"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "preserve"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "primary"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "prior"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "privileges"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "procedural"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "procedure"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "procedures"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "program"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "publication"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "quote"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "quotes"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "range"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "read"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "real"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "reassign"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "recheck"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "recursive"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "ref"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "references"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "referencing"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "refresh"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "reindex"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "relative"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "release"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "rename"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "repeatable"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "replace"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "replica"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "reset"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "restart"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "restrict"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "return"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "returns"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "revoke"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "right"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "role"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "rollback"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "rollup"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "routine"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "routines"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "row"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "rows"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "rule"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "savepoint"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "scalar"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "schema"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "schemas"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "scroll"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "search"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "security"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "select"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "sequence"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "sequences"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "serializable"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "server"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "session"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "session_user"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "set"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "setof"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "sets"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "share"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "show"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "similar"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "simple"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "skip"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "smallint"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "snapshot"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "some"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "source"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "sql"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "stable"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "standalone"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "start"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "statement"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "statistics"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "stdin"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "stdout"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "storage"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "stored"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "strict"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "string"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "strip"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "subscription"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "substring"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "support"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "symmetric"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "sysid"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "system"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "system_user"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "table"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "tables"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "tablesample"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "tablespace"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "target"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "temp"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "template"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "temporary"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "text"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "then"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "ties"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "time"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "timestamp"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "trailing"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "transaction"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "transform"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "treat"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "trigger"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "trim"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "true"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "truncate"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "trusted"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "type"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "types"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "uescape"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "unbounded"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "uncommitted"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "unconditional"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "unencrypted"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "unique"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "unknown"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "unlisten"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "unlogged"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "until"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "update"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "user"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "using"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "vacuum"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "valid"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "validate"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "validator"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "value"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "values"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "varchar"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "variadic"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "verbose"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "version"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "view"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "views"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "volatile"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "when"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "whitespace"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "work"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "wrapper"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "write"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "xml"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "xmlattributes"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "xmlconcat"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "xmlelement"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "xmlexists"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "xmlforest"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "xmlparse"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "xmlpi"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "xmlroot"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "xmlserialize"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "xmltable"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "yes"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "zone"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1971
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1088:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1977
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1982
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1987
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1992
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1997
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2002
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2007
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2012
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2017
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2022
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2027
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2032
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2037
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2042
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2047
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2052
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2057
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2061
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2065
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2069
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2073
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2077
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2081
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2086
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2093
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2098
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2105
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2110
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2117
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2122
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2129
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2136
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2143
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2150
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2165
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2169
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2173
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2182
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2186
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2190
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2194
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2198
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2202
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2206
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2211
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2216
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2221
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2226
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1138:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2231
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2236
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2241
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2246
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2255
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2265
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2269
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2274
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2280
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2286
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2293
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2300
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2308
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2325
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2344
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2349
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2351
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2355
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2360
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2364
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2369
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2374
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2379
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2384
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2389
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2394
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2399
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2404
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2409
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2414
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2419
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2424
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2428
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2432
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2437
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2442
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2447
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2457
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2466
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2473
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2480
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2485
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2489
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2493
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2497
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2503
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2509
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2527
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2528
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2529
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2530
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2534
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2538
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2542
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2550
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2554
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2558
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2562
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2567
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2574
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2584
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2589
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2596
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2613
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2614
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2628
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2630
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2632
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2634
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2636
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2638
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2642
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2646
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2650
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2661
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2665
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2676
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.list = nil
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2696
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2706
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2710
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2720
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2724
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2730
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.node = nil
		}
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2739
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2747
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.list = nil
		}
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2754
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2766
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2790
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2823
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2829
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2837
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2842
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2847
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2852
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2857
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2862
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2867
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2872
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2877
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2882
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2887
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2892
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2897
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2905
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2910
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2915
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2920
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2924
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2932
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2940
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2950
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2958
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2966
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2974
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2982
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2990
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2999
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3007
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3015
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3023
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3031
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3037
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3042
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3047
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3052
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3057
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3062
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3067
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3072
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3077
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3082
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3091
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3100
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3105
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3111
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3117
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3128
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3136
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3148
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3160
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3173
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3181
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3187
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3193
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3201
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1300:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3212
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3237
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3253
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1303:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3273
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3283
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3287
		{
			yyVAL.list = nil
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3294
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3298
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3302
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3306
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3315
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3322
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3327
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3338
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3348
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3349
		{
			yyVAL.str = "year"
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3350
		{
			yyVAL.str = "month"
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3351
		{
			yyVAL.str = "day"
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.str = "hour"
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3353
		{
			yyVAL.str = "minute"
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3354
		{
			yyVAL.str = "second"
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3355
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3360
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3365
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3373
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3376
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3381
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3385
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3393
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3397
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3402
		{
			yyVAL.bval = true
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3403
		{
			yyVAL.bval = false
		}
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.bval = false
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3407
		{
			yyVAL.bval = true
		}
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3408
		{
			yyVAL.bval = false
		}
	case 1336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3409
		{
			yyVAL.bval = false
		}
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3414
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3418
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3433
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3437
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3450
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3454
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3465
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3469
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3476
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3482
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3488
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3496
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3502
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3510
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3514
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3521
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3525
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3529
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3536
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3542
		{
			yyVAL.node = nil
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3546
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3548
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3556
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3562
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3563
		{
			yyVAL.node = nil
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3568
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3572
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3581
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3583
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3590
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3591
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3593
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3600
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3605
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3612
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3634
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3638
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3644
		{
			yyVAL.str = "NFC"
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.str = "NFD"
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3646
		{
			yyVAL.str = "NFKC"
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.str = "NFKD"
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3651
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3652
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3655
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3659
		{
			yyVAL.bval = true
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.bval = true
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3661
		{
			yyVAL.bval = false
		}
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3662
		{
			yyVAL.bval = false
		}
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3663
		{
			yyVAL.bval = false
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3672
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3687
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3689
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3690
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3694
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3698
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3705
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3709
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3716
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.list = nil
		}
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3726
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3732
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3747
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3751
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3763
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3767
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3771
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3776
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3781
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3786
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3792
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3796
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3802
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3806
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3812
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3816
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3824
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3828
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3836
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3844
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.str = "varchar"
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3856
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3864
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3872
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3882
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3893
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3907
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3919
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3931
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3941
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3951
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3961
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3973
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3978
		{
			yyVAL.ival = 1
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.ival = 0
		}
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3980
		{
			yyVAL.ival = 0
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3983
		{
			yyVAL.ival = 1
		}
	case 1459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.ival = 0
		}
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3988
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3998
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4005
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4009
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4020
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4025
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4026
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4029
		{
			yyVAL.str = "+"
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4030
		{
			yyVAL.str = "-"
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4031
		{
			yyVAL.str = "*"
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4032
		{
			yyVAL.str = "/"
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4033
		{
			yyVAL.str = "%"
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4034
		{
			yyVAL.str = "^"
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4035
		{
			yyVAL.str = "<"
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4036
		{
			yyVAL.str = ">"
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4037
		{
			yyVAL.str = "="
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4038
		{
			yyVAL.str = "<="
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4039
		{
			yyVAL.str = ">="
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4040
		{
			yyVAL.str = "<>"
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4044
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4048
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4057
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4058
		{
			yyVAL.list = nil
		}
	case 1484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4063
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4067
		{
			yyVAL.list = nil
		}
	case 1486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4072
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4076
		{
			yyVAL.node = nil
		}
	case 1488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4080
		{
			yyVAL.ival = 0
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4081
		{
			yyVAL.ival = 0
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4085
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4090
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4105
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4106
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4110
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4115
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4116
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4125
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4126
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4135
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4137
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4144
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4156
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4168
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4174
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4181
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4194
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4213
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4214
		{
			yyVAL.list = nil
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4218
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4219
		{
			yyVAL.list = nil
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4224
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4228
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4236
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4248
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4249
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4250
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4251
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4255
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4256
		{
			yyVAL.list = nil
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4261
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4262
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4263
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1523:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4274
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1524:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4293
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4311
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4321
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4326
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4331
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4336
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4347
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.list = nil
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4352
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4353
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4362
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4367
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4372
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4383
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4384
		{
			yyVAL.list = nil
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4388
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4389
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4398
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4406
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4416
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4427
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4438
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4442
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4448
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4466
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4485
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4493
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4502
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4510
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4522
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4528
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4535
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4541
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4547
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4557
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4561
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4567
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4584
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4588
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4597
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4623
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4649
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4657
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4667
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4668
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4669
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4670
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4675
		{
			yyVAL.ival = 1
		}
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4676
		{
			yyVAL.ival = 0
		}
	case 1574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4686
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4697
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4708
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4712
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4716
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4722
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4723
		{
			yyVAL.with = nil
		}
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4728
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4732
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1583:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4740
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4768
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4769
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4770
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1587:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4775
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1588:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4781
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4787
		{
			yyVAL.node = nil
		}
	case 1590:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4794
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4803
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4811
		{
			yyVAL.node = nil
		}
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4822
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4830
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4844
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4845
		{
			yyVAL.node = nil
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4853
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4855
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4859
		{
			yyVAL.node = nil
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4871
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4872
		{
			yyVAL.alias = nil
		}
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4877
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4886
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4891
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4902
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4906
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4910
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4915
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4920
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4928
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4932
		{
			yyVAL.alias = nil
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4940
		{
			yyVAL.ival = 1
		}
	case 1615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4941
		{
			yyVAL.ival = 0
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4945
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4946
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4950
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4951
		{
			yyVAL.list = nil
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4961
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4964
		{
			yyVAL.into = nil
		}
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4975
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4984
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4994
		{
			yyVAL.ival = 1
		}
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4995
		{
			yyVAL.ival = 0
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5005
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5012
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5021
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5022
		{
			yyVAL.list = nil
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5036
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5061
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.list = nil
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5068
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5072
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5081
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5092
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5097
		{
			yyVAL.node = nil
		}
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5102
		{
			yyVAL.str = "BY REF"
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5103
		{
			yyVAL.str = "BY VALUE"
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5109
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5113
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5117
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5121
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5129
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5133
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5141
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5146
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1651:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5155
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1652:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5163
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5174
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5178
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5187
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5192
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5197
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5211
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5220
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5224
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5228
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5232
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5236
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1665:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5249
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5273
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5284
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5285
		{
			yyVAL.node = nil
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5290
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5291
		{
			yyVAL.node = nil
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5295
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5296
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5301
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5307
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5308
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5314
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5318
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5330
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5334
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5341
		{
			yyVAL.bval = false
		}
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5342
		{
			yyVAL.bval = true
		}
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5343
		{
			yyVAL.bval = false
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5347
		{
			yyVAL.bval = false
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5348
		{
			yyVAL.bval = true
		}
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5349
		{
			yyVAL.bval = true
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5354
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5355
		{
			yyVAL.list = nil
		}
	case 1688:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5366
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1689:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5381
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5394
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5401
		{
			yyVAL.node = nil
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5407
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5415
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5428
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5429
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5430
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5431
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5432
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5438
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5442
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1704:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5446
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.node = nil
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.node = nil
		}
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5462
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5463
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5464
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5465
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5466
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5469
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5474
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5476
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5477
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5478
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5484
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5504
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5514
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5515
		{
			yyVAL.node = nil
		}
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5520
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5521
		{
			yyVAL.node = nil
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5527
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5531
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5540
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5549
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1732:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5563
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5577
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1734:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5588
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1735:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5597
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5608
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5609
		{
			yyVAL.node = nil
		}
	case 1738:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5625
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5637
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5641
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5650
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5656
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5663
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1744:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5670
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5678
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5687
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5688
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5697
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5705
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1751:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5717
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5730
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5734
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5745
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5751
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5771
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5777
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5778
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1759:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5788
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5800
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5804
		{
			yyVAL.list = nil
		}
	case 1762:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5819
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5836
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5840
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1765:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5851
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1766:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5875
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5911
		{
			yyVAL.ival = 1
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5912
		{
			yyVAL.ival = 0
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5916
		{
			yyVAL.ival = 1
		}
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5917
		{
			yyVAL.ival = 0
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5921
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5922
		{
			yyVAL.str = ""
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.str = ""
		}
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.node = nil
		}
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5936
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5939
		{
			yyVAL.node = nil
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5943
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5944
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5949
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5957
		{
			yyVAL.list = nil
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5964
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5968
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5972
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5976
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5980
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5984
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5988
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5992
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5996
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6000
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6004
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6008
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6012
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6016
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6020
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6028
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6032
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6039
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6045
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6048
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6049
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6050
		{
			yyVAL.node = nil
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6055
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6059
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6065
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6069
		{
			yyVAL.str = "true"
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6070
		{
			yyVAL.str = "false"
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6071
		{
			yyVAL.str = "on"
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6072
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6079
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6084
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6088
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6089
		{
			yyVAL.node = nil
		}
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6093
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6094
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6095
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6098
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6099
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6106
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6112
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6113
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6114
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6119
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6124
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6131
		{
			yyVAL.bval = true
		}
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6132
		{
			yyVAL.bval = false
		}
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6136
		{
			yyVAL.ival = 1
		}
	case 1840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6137
		{
			yyVAL.ival = 0
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6153
		{
			yyVAL.node = nil
		}
	case 1844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6155
		{
			yyVAL.node = nil
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6163
		{
			yyVAL.ival = 1
		}
	case 1846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6164
		{
			yyVAL.ival = 0
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6168
		{
			yyVAL.ival = 1
		}
	case 1848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6169
		{
			yyVAL.ival = 0
		}
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6173
		{
			yyVAL.ival = 1
		}
	case 1850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.ival = 0
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6178
		{
			yyVAL.ival = 1
		}
	case 1852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.ival = 0
		}
	case 1853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6188
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6194
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6200
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6206
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6212
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6221
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6225
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1861:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6226
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.node = nil
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6236
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6251
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6260
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1867:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6267
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1868:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6274
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1869:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6287
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6300
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6309
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1872:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6324
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6334
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6342
		{
			yyVAL.onconflict = nil
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6353
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6362
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6369
		{
			yyVAL.node = nil
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6380
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6384
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6391
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6395
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6402
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6407
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6412
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6420
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6431
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6445
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6446
		{
			yyVAL.list = nil
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6450
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6451
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6452
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6456
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6457
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1894:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6458
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6463
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6467
		{
			yyVAL.list = nil
		}
	case 1897:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6488
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1898:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6504
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1899:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6521
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1900:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6537
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1901:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6554
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1902:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6571
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6589
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6590
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6591
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6592
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6593
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6594
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6595
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6596
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6600
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6601
		{
			yyVAL.list = nil
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6611
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6618
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6619
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6620
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6625
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6632
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6636
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6640
		{
			yyVAL.ival = 0
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6646
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6647
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6648
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6649
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6650
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6651
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6652
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6653
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6654
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6655
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6660
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6661
		{
			yyVAL.str = "default"
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6665
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1935:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6666
		{
			yyVAL.str = ""
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6670
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6671
		{
			yyVAL.str = "default"
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6675
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6676
		{
			yyVAL.str = ""
		}
	case 1940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6681
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6682
		{
			yyVAL.list = nil
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6687
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6693
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6700
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6701
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6706
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1947:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6712
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1948:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6723
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1949:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6752
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1950:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6761
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6771
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6780
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6787
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6791
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1955:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6799
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1956:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.list = nil
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6805
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6809
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6823
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6828
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1962:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6833
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6845
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6850
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6857
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6862
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6863
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6865
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6878
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6883
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6888
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6893
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6901
		{
			yyVAL.bval = true
		}
	case 1974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6902
		{
			yyVAL.bval = false
		}
	case 1975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6903
		{
			yyVAL.bval = true
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6907
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6908
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6913
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6915
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6920
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6924
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6928
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6938
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6944
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6945
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6950
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6954
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6958
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6962
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6966
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6970
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6974
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6978
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6982
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6986
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6990
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6994
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6998
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7002
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7006
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7010
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7016
		{
		}
	case 2003:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7017
		{
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7021
		{
		}
	case 2005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7022
		{
		}
	case 2006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7023
		{
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7028
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7035
		{
			yyVAL.bval = false
		}
	case 2009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7039
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7040
		{
			yyVAL.list = nil
		}
	case 2011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7045
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7049
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2013:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7053
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2014:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7062
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2015:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7068
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7074
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2017:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7080
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2018:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7097
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7104
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7114
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7119
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2022:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7124
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2023:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7132
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7143
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2025:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7154
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2026:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7164
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2027:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7175
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2028:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7196
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7210
		{
			yyVAL.bval = true
		}
	case 2030:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7211
		{
			yyVAL.bval = false
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7217
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7223
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7231
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2034:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7236
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2035:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7244
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7248
		{
			yyVAL.list = nil
		}
	case 2037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7255
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7259
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7263
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7267
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7274
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7284
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7294
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7301
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7308
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7323
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7336
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7343
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7350
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7357
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7364
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7371
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2053:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7380
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2054:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7381
		{
			yyVAL.list = nil
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7385
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7386
		{
			yyVAL.partspec = nil
		}
	case 2057:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7391
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7399
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7404
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7412
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7419
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7426
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7435
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2064:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7436
		{
			yyVAL.str = ""
		}
	case 2065:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7440
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2066:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7441
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2067:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7442
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7443
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7447
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2070:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7448
		{
			yyVAL.str = ""
		}
	case 2071:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7452
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2072:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7453
		{
			yyVAL.str = ""
		}
	case 2073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7457
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2074:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7470
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2075:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7485
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7501
		{
			yyVAL.bval = true
		}
	case 2077:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7502
		{
			yyVAL.bval = false
		}
	case 2078:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7506
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7507
		{
			yyVAL.str = "btree"
		}
	case 2080:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7511
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7512
		{
			yyVAL.list = nil
		}
	case 2082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7517
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7522
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7530
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2085:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7531
		{
			yyVAL.list = nil
		}
	case 2086:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7543
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7549
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7556
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7562
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7569
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2091:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7578
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2092:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7584
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2093:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7591
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2094:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7597
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2095:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7604
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2096:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7610
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2097:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7617
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2098:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7623
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2099:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7630
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7639
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2101:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7649
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2102:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7656
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2103:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7664
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2104:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7671
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2105:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7679
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2106:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7686
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7697
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7702
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7710
		{
			yyVAL.bval = true
		}
	case 2110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7711
		{
			yyVAL.bval = false
		}
	case 2111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7716
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7721
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7729
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7760
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7783
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7790
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7797
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7808
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7815
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7822
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7829
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7836
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7841
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7846
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2125:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7851
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7856
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7861
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7868
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7873
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7880
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7885
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7890
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7895
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2134:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7900
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7910
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7915
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2137:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7922
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7929
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7937
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2140:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7948
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7958
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7963
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7968
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7979
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7984
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7992
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8000
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8010
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8015
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8020
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8025
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8030
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8035
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8040
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8045
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8050
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8055
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8060
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8065
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8070
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8075
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8080
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8085
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8090
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8095
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8101
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8106
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8113
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8118
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8123
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8128
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8133
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8138
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8143
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8148
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8153
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8157
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8165
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8173
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8180
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8191
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8200
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8201
		{
			yyVAL.node = nil
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8205
		{
		}
	case 2186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8206
		{
		}
	case 2187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8217
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8230
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8243
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8256
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8269
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2192:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8284
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8299
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8312
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8325
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8338
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8351
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8364
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8380
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8386
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8392
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8401
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8405
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8408
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8412
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8418
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8422
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8429
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8439
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8440
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8444
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8453
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8457
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8465
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8470
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8477
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8481
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8489
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8495
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8496
		{
			yyVAL.str = "analyze"
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8497
		{
			yyVAL.str = "format"
		}
	case 2224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8501
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8502
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8503
		{
			yyVAL.node = nil
		}
	case 2227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8507
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8508
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8509
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8510
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8511
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8512
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8513
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8522
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8543
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8550
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8559
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8565
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8566
		{
			yyVAL.list = nil
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8571
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8575
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8583
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8589
		{
			yyVAL.str = "analyze"
		}
	case 2244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8590
		{
			yyVAL.str = "analyse"
		}
	case 2245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8599
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8603
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8607
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8611
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8615
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8626
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8630
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8641
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8645
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8649
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8658
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8667
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8678
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8679
		{
			yyVAL.str = ""
		}
	case 2259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8688
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8701
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8714
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8729
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8730
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8734
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8735
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8739
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8740
		{
			yyVAL.list = nil
		}
	case 2268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8749
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8760
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8764
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8768
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8772
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8776
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8783
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8784
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8785
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8786
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8787
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8788
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8789
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8790
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8791
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8792
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8793
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8794
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8795
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8808
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8809
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8814
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8818
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8826
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8838
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8843
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8845
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8847
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8851
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8864
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8866
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8870
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8881
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8892
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8903
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8914
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2304:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8925
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8937
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8948
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8959
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2308:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8970
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2309:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8981
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2310:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8998
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2311:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9015
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2312:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9027
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9039
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9050
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2315:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9061
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9072
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9083
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9094
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9105
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2320:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9116
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9127
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9138
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9149
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9160
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2325:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9171
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2326:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9182
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9193
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2328:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9204
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9215
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2330:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9226
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2331:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9237
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2332:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9250
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2333:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9263
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2334:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9276
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2335:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9289
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2336:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9302
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2337:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9315
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2338:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9327
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2339:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9339
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2340:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9352
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2341:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9365
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2342:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9377
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2343:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9389
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9400
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9411
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9422
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9433
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2348:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9444
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9455
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2350:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9466
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9477
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9488
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2353:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9499
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9525
		{
			yyVAL.ival = 0
		}
	case 2355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9527
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9541
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9542
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9543
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9544
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9545
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9546
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9550
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9555
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9560
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9568
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9572
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9576
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9580
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2369:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9594
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2370:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9608
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9624
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9639
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9654
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9655
		{
			yyVAL.list = nil
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9660
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9664
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9672
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9676
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9681
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9689
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9698
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9707
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9716
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9725
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9736
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9737
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9738
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9739
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9740
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9744
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9748
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9750
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9760
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9772
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9773
		{
			yyVAL.list = nil
		}
	case 2396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9778
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9784
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9792
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9796
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9800
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9804
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9808
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9815
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9821
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9831
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9837
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9845
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9849
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9861
		{
			yyVAL.node = nil
		}
	case 2410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9868
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9877
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9887
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9893
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9894
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9899
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9903
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2417:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9919
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2418:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9951
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9982
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9983
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9984
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9989
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9991
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10031
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10038
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10045
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10052
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10059
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10068
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10069
		{
			yyVAL.list = nil
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10073
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10078
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10086
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10097
		{
			yyVAL.bval = true
		}
	case 2435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10098
		{
			yyVAL.bval = false
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10102
		{
			yyVAL.bval = true
		}
	case 2437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10103
		{
			yyVAL.bval = false
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10107
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10112
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10116
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10128
		{
			yyVAL.bval = true
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10129
		{
			yyVAL.bval = false
		}
	case 2445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10133
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10134
		{
			yyVAL.node = nil
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10143
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10148
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10152
		{
			yyVAL.list = nil
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10157
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10160
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10161
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10162
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10166
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10167
		{
			yyVAL.rangevar = nil
		}
	case 2458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10180
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2459:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10196
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2460:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10212
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2461:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10228
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10245
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10246
		{
			yyVAL.list = nil
		}
	case 2464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10250
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10251
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10252
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10253
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10264
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10271
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2470:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10278
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2471:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10285
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10301
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10319
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10325
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10330
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10335
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10341
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2478:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10349
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10357
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10372
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10388
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10394
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10399
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10404
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10410
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10415
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10420
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10425
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10430
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10435
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10440
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10445
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2493:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10450
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10461
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10466
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10480
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10485
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10492
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10493
		{
			yyVAL.list = nil
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10496
		{
		}
	case 2501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10497
		{
		}
	case 2502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10508
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10512
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10525
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10530
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10538
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10547
		{
			yyVAL.list = nil
		}
	case 2508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10554
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10558
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10562
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10567
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10580
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10588
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10597
		{
			yyVAL.list = nil
		}
	case 2515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10604
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10617
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10621
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10625
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2519:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10629
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10636
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10640
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10644
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2523:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10648
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2524:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10657
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10666
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10670
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2527:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10674
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10679
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2529:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10691
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2530:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10697
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10701
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10707
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10708
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10709
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10710
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10714
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10715
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10719
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10720
		{
			yyVAL.list = nil
		}
	case 2540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10724
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10725
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2542:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10742
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2543:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10747
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10753
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10757
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10761
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10767
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10768
		{
			yyVAL.str = ""
		}
	case 2549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10772
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10773
		{
			yyVAL.str = ""
		}
	case 2551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10777
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10778
		{
			yyVAL.str = ""
		}
	case 2553:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10791
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2554:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10797
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2555:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10803
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2556:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10809
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2557:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10821
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2558:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10825
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10831
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2560:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10837
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2561:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10841
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10847
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10848
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10853
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10859
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10865
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2567:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10871
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10885
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10889
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10897
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10904
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10911
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10915
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10923
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2575:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10930
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2576:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10938
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2577:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10947
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10956
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10964
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10980
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10982
		{
			yyVAL.list = nil
		}
	case 2582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10987
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10989
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10994
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11003
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11008
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11019
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11039
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2589:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11047
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11058
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11064
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11065
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11070
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11082
		{
			yyVAL.bval = true
		}
	case 2595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11083
		{
			yyVAL.bval = false
		}
	case 2596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11084
		{
			yyVAL.bval = true
		}
	case 2597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11089
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11098
		{
			yyVAL.list = nil
		}
	case 2603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11109
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11111
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11115
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11120
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11125
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11130
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11138
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11143
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11148
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11152
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11163
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11171
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11175
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11179
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11183
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11190
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11194
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11201
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11207
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11214
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11215
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11219
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11220
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11221
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11222
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11223
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11224
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11225
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11226
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11227
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11232
		{
			yyVAL.str = "default"
		}
	case 2635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11233
		{
			yyVAL.str = ""
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11237
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11238
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11242
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11244
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11245
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11249
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11250
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11255
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11261
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11266
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11274
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11278
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11282
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11286
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11290
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11296
		{
			yyVAL.str = "read uncommitted"
		}
	case 2653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11297
		{
			yyVAL.str = "read committed"
		}
	case 2654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11298
		{
			yyVAL.str = "repeatable read"
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11299
		{
			yyVAL.str = "serializable"
		}
	case 2656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11303
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11304
		{
			yyVAL.list = nil
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11308
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11309
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11310
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11313
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11314
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11315
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11319
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11320
		{
			yyVAL.list = nil
		}
	case 2666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11324
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11325
		{
			yyVAL.node = nil
		}
	case 2668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11329
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11334
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11339
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11347
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11351
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11357
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11369
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11370
		{
			yyVAL.str = ""
		}
	case 2677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11374
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11375
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11376
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11377
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11381
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11386
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11391
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11398
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11399
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2686:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11410
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2687:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11414
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11420
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11426
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11427
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11428
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11429
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11439
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11447
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11454
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11459
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2698:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11473
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11479
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11480
		{
			yyVAL.rolespec = nil
		}
	case 2701:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11485
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2702:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11489
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2703:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11504
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2704:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11512
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11519
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11531
		{
			yyVAL.bval = true
		}
	case 2707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11535
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11536
		{
			yyVAL.str = "all"
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11540
		{
			yyVAL.str = "all"
		}
	case 2710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.str = "select"
		}
	case 2711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11542
		{
			yyVAL.str = "insert"
		}
	case 2712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11543
		{
			yyVAL.str = "update"
		}
	case 2713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11544
		{
			yyVAL.str = "delete"
		}
	case 2714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11549
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11557
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11558
		{
			yyVAL.list = nil
		}
	case 2718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11562
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11563
		{
			yyVAL.node = nil
		}
	case 2720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11567
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11568
		{
			yyVAL.node = nil
		}
	case 2722:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11579
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11585
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11586
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2725:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11597
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2726:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11601
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11608
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2728:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11612
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11619
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11623
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11624
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11625
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11636
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2735:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11640
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11644
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11651
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11655
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2739:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11659
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11663
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11669
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11670
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11675
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11680
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11684
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11688
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11700
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11706
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11711
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11717
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11718
		{
			yyVAL.node = nil
		}
	case 2752:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11729
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11736
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11740
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2755:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11744
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2756:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11748
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2757:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11752
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2758:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11756
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2759:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11760
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11766
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11772
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2762:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11785
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2763:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11789
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2764:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11793
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11799
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11800
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11801
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2768:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11813
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11819
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11820
		{
			yyVAL.list = nil
		}
	case 2771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11824
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11825
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11830
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11836
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11840
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2776:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11844
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11848
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11854
		{
			yyVAL.bval = true
		}
	case 2779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11855
		{
			yyVAL.bval = false
		}
	case 2780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11859
		{
			yyVAL.list = nil
		}
	case 2781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11860
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11861
		{
			yyVAL.list = nil
		}
	case 2783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11865
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11866
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2785:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11877
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2786:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11890
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2787:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11894
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11900
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11901
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11906
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11912
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2792:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11927
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2793:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11940
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2794:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11947
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2795:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11953
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2796:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11959
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11965
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2798:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11980
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2799:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11986
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11992
		{
			yyVAL.bval = true
		}
	case 2801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11993
		{
			yyVAL.bval = false
		}
	case 2802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11998
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11999
		{
			yyVAL.list = nil
		}
	case 2804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12003
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12004
		{
			yyVAL.list = nil
		}
	case 2806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12008
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12009
		{
			yyVAL.list = nil
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12012
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12013
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12014
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2811:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12019
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12026
		{
			yyVAL.groupClause = nil
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12032
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12033
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12037
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12038
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12039
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12040
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12041
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12046
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12053
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2822:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12060
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2823:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12067
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12076
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12077
		{
			yyVAL.node = nil
		}
	case 2826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12084
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12088
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12089
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2829:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12094
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12101
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12112
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12114
		{
			yyVAL.list = nil
		}
	case 2833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12119
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12124
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12132
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12141
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12143
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12150
		{
			yyVAL.windef = nil
		}
	case 2839:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12155
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12169
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12170
		{
			yyVAL.str = ""
		}
	case 2842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12174
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12175
		{
			yyVAL.list = nil
		}
	case 2844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12180
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12187
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12194
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12201
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12212
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12226
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12261
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12269
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12277
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12285
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12293
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12303
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12304
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12305
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12306
		{
			yyVAL.ival = 0
		}
	case 2859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12307
		{
			yyVAL.ival = 0
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12316
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12321
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12326
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12330
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12340
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12341
		{
			yyVAL.selectLimit = nil
		}
	case 2866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12346
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12354
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2868:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12361
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2869:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12369
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12377
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2871:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12385
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12396
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12399
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12403
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12405
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12412
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12425
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12427
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12431
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12438
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12439
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12444
		{
			yyVAL.ival = 0
		}
	case 2883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12445
		{
			yyVAL.ival = 0
		}
	case 2884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12449
		{
			yyVAL.ival = 0
		}
	case 2885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12450
		{
			yyVAL.ival = 0
		}
	case 2886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12463
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12469
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12475
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12481
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12487
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12492
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12497
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12502
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2894:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12507
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12512
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12518
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12524
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12533
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12539
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12546
		{
		}
	case 2901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12547
		{
		}
	case 2902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12548
		{
		}
	case 2903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12552
		{
			yyVAL.bval = true
		}
	case 2904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12553
		{
			yyVAL.bval = false
		}
	case 2905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12554
		{
			yyVAL.bval = false
		}
	case 2906:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12567
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2907:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12574
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2908:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12581
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2909:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12588
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12594
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12603
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12607
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12611
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12615
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12621
		{
			yyVAL.str = ""
		}
	case 2916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12622
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2917:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12627
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12637
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2919:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12641
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12645
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2921:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12649
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12653
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2923:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12657
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12665
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12676
		{
			yyVAL.list = nil
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12681
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12692
		{
			yyVAL.list = nil
		}
	case 2928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12696
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12698
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12702
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12706
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12710
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12714
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12721
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12725
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12729
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12733
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12738
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12742
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12777
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12781
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12785
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12791
		{
			yyVAL.ival = 1
		}
	case 2944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12792
		{
			yyVAL.ival = -1
		}
	case 2945:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12804
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2946:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12816
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2947:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12825
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2948:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12837
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2949:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12843
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2950:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12852
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2951:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12859
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2952:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12878
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12884
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12885
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12890
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12894
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12898
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2958:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12910
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2959:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12918
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2960:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12926
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12936
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12937
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12938
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12939
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 2965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12940
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 2966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12941
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12946
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12948
		{
			yyVAL.list = nil
		}
	case 2969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12950
		{
			yyVAL.list = nil
		}
	case 2970:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12952
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2971:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12957
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12963
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 2973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12964
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 2974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12968
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 2975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12972
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 2976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12976
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 2977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12980
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 2978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12984
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 2979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12994
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 2980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13002
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 2981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13010
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 2982:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13018
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 2983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13026
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 2984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13034
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 2985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13042
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 2986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13050
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 2987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13058
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 2988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13066
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 2989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13074
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 2990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13082
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 2991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13090
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 2992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13098
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 2993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13106
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 2994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13114
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 2995:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13122
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 2996:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13130
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 2997:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13138
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 2998:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13146
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 2999:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13154
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13165
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3001:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13166
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13170
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13171
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13176
		{
			yyVAL.bval = true
		}
	case 3005:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13177
		{
			yyVAL.bval = false
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13181
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13182
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13187
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13193
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13194
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13195
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13198
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13199
		{
			yyVAL.rolespec = nil
		}
	case 3014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13204
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13208
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13216
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13220
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13225
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13226
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3020:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13230
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3021:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13238
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13242
		{
			yyVAL.node = nil
		}
	case 3023:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13256
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3024:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13261
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3025:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13266
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13274
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13275
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3028:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13281
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3029:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13285
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13289
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13293
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13297
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13301
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13305
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13309
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13313
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13317
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13321
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13325
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13329
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13333
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13337
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13341
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13346
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13352
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13353
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13358
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13362
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13366
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13372
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13373
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13374
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13375
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13376
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3057:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13387
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13400
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13407
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13414
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13428
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13430
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3063:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13442
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3064:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13450
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13463
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13464
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3067:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13470
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3068:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13477
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13485
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3070:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13493
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13514
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13515
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13516
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13517
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	}
	goto yystack /* stack new state and value */
}
