// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:34
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     *ast.NodeList

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:9658

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 43,
	541, 43,
	-2, 1314,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	67, 1622,
	84, 1622,
	85, 2259,
	308, 1789,
	420, 1622,
	481, 1622,
	-2, 56,
	-1, 62,
	1, 43,
	541, 43,
	-2, 1314,
	-1, 90,
	85, 2258,
	-2, 1621,
	-1, 162,
	61, 261,
	64, 261,
	528, 261,
	534, 261,
	-2, 2302,
	-1, 606,
	84, 1622,
	481, 1622,
	-2, 55,
	-1, 608,
	210, 44,
	-2, 2265,
	-1, 663,
	16, 1179,
	17, 1179,
	532, 1179,
	-2, 62,
	-1, 664,
	16, 1180,
	17, 1180,
	532, 1180,
	-2, 63,
	-1, 972,
	6, 1718,
	12, 1718,
	535, 1718,
	536, 1718,
	-2, 1711,
	-1, 1151,
	1, 619,
	26, 619,
	36, 619,
	64, 619,
	65, 619,
	73, 619,
	74, 619,
	101, 619,
	533, 619,
	541, 619,
	542, 619,
	-2, 1250,
	-1, 1616,
	532, 1143,
	-2, 1129,
	-1, 1784,
	118, 56,
	308, 1789,
	461, 56,
	-2, 1622,
	-1, 1838,
	532, 1791,
	-2, 185,
	-1, 2022,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1051,
	-1, 2023,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1052,
	-1, 2024,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1053,
	-1, 2025,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1054,
	-1, 2026,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1055,
	-1, 2027,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1056,
	-1, 2032,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1064,
	-1, 2038,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1068,
	-1, 2074,
	532, 1142,
	-2, 1183,
	-1, 2178,
	40, 1187,
	510, 1187,
	528, 1187,
	533, 1187,
	542, 1187,
	-2, 1183,
	-1, 2206,
	210, 44,
	-2, 2265,
	-1, 2344,
	508, 2205,
	-2, 2198,
	-1, 2438,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1066,
	-1, 2439,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1070,
	-1, 2452,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1083,
	-1, 2523,
	532, 1143,
	-2, 78,
	-1, 2529,
	151, 1554,
	-2, 1489,
	-1, 2693,
	6, 1718,
	12, 1718,
	535, 1718,
	536, 1718,
	-2, 1692,
	-1, 2786,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1065,
	-1, 2791,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1085,
	-1, 2792,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1069,
	-1, 3067,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1067,
	-1, 3068,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1071,
	-1, 3072,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1077,
	-1, 3080,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1097,
	-1, 3081,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1098,
	-1, 3082,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1099,
	-1, 3083,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1100,
	-1, 3084,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1101,
	-1, 3085,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1102,
	-1, 3086,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1079,
	-1, 3087,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 3157,
	541, 43,
	-2, 1314,
	-1, 3274,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1078,
	-1, 3275,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1080,
	-1, 3276,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1086,
	-1, 3832,
	7, 1439,
	-2, 262,
}

const yyPrivate = 57344

const yyLast = 61150

var yyAct = [...]int16{
	584, 3829, 2312, 3885, 3944, 3874, 3927, 2433, 3875, 850,
	3716, 3884, 3896, 826, 2957, 3120, 3913, 3194, 3520, 3830,
	3643, 3096, 2258, 2088, 3461, 3711, 2091, 3535, 3344, 3632,
	3419, 2136, 3500, 2675, 3115, 3146, 3683, 3220, 3750, 3701,
	1737, 3431, 3625, 2638, 3387, 2655, 1096, 3558, 3462, 3542,
	960, 3095, 165, 165, 3568, 2661, 3536, 1759, 574, 2873,
	3382, 2549, 3537, 3325, 3301, 574, 895, 612, 2213, 574,
	2534, 3219, 3298, 2307, 875, 608, 611, 614, 611, 2869,
	611, 2426, 3373, 1849, 3153, 2518, 3113, 2143, 2937, 3245,
	2615, 2114, 2877, 574, 574, 574, 574, 2264, 3174, 662,
	611, 611, 2207, 611, 662, 696, 613, 3411, 660, 662,
	2986, 662, 2106, 694, 2961, 3127, 731, 3308, 694, 2466,
	694, 611, 1632, 611, 2166, 42, 611, 899, 865, 1783,
	18, 3104, 2126, 893, 3230, 1782, 17, 2073, 566, 54,
	1781, 12, 2930, 2601, 1780, 11, 2306, 2179, 2550, 1105,
	4, 2504, 2129, 5, 165, 165, 2173, 3123, 2479, 3332,
	947, 2193, 2071, 2279, 2669, 2969, 2692, 1822, 1816, 1812,
	571, 1802, 2131, 2580, 1808, 2197, 2196, 590, 2184, 1758,
	1046, 2198, 2214, 2169, 2092, 2496, 911, 42, 3712, 2128,
	1739, 816, 18, 1612, 1917, 593, 1056, 2847, 17, 2231,
	992, 54, 2259, 12, 790, 646, 1101, 11, 918, 2311,
	1790, 2183, 883, 1833, 2171, 2145, 2641, 2525, 156, 43,
	987, 594, 2109, 2113, 1738, 1712, 2112, 2111, 2102, 2061,
	1604, 2104, 2046, 2619, 2043, 2105, 2067, 728, 1095, 693,
	659, 2230, 2121, 817, 2229, 695, 788, 926, 1625, 2011,
	738, 928, 72, 697, 735, 70, 126, 729, 125, 855,
	582, 607, 1809, 1765, 1124, 1093, 985, 925, 580, 1061,
	2589, 589, 53, 794, 2012, 564, 737, 737, 3975, 3827,
	3826, 837, 847, 1036, 1127, 2434, 1036, 3859, 1137, 1138,
	1139, 840, 3966, 2588, 1037, 1036, 3964, 1037, 2078, 3904,
	1720, 3905, 2590, 1721, 3883, 3859, 1037, 1727, 3905, 1725,
	3881, 1127, 3867, 3594, 1724, 1728, 1723, 3858, 1729, 1718,
	1127, 1718, 1722, 1143, 1144, 1726, 3859, 563, 837, 585,
	3843, 1127, 1730, 610, 3836, 629, 1725, 631, 3810, 3844,
	3766, 2097, 2124, 2484, 3731, 1725, 3725, 3283, 710, 2124,
	712, 831, 44, 3732, 3692, 3726, 1725, 689, 690, 3071,
	692, 1726, 2507, 719, 720, 837, 3698, 3676, 1127, 3582,
	806, 3436, 1726, 3675, 3672, 2627, 1718, 3670, 723, 1730,
	725, 3593, 1718, 3673, 771, 3591, 3671, 3514, 3499, 3788,
	3594, 1727, 3488, 1725, 1039, 3470, 3283, 3498, 1724, 1728,
	1723, 3489, 1729, 3457, 3469, 1125, 3392, 565, 3599, 1726,
	3271, 3381, 1039, 3379, 44, 3393, 1730, 807, 3433, 44,
	2124, 3361, 2590, 3292, 3291, 3282, 2798, 2799, 2800, 2801,
	3360, 3269, 3293, 1039, 3283, 3118, 1126, 3216, 3215, 3214,
	3270, 1820, 1112, 2940, 1102, 801, 3217, 2124, 2124, 2896,
	849, 3208, 3302, 3168, 3138, 2886, 2811, 2779, 837, 2716,
	2124, 1127, 2590, 3139, 2124, 1718, 1718, 2703, 2717, 2895,
	2592, 2571, 2823, 2489, 2483, 2474, 2704, 2494, 1114, 2593,
	2572, 1117, 2490, 2484, 1718, 2465, 1725, 1116, 2458, 2812,
	2456, 2627, 2455, 2532, 1718, 793, 1115, 1718, 962, 2414,
	1750, 2457, 1726, 1718, 2209, 2125, 2997, 2467, 1718, 1730,
	2053, 2084, 1118, 2210, 2124, 1913, 1130, 1131, 1132, 1133,
	1039, 2080, 1719, 2006, 861, 579, 3518, 1048, 62, 1787,
	1718, 1718, 2795, 2801, 2906, 1787, 2805, 2806, 2807, 1133,
	3163, 3471, 853, 1102, 1048, 1787, 898, 849, 857, 849,
	2705, 814, 856, 857, 2795, 898, 2706, 856, 2805, 2806,
	2807, 791, 1048, 1794, 1787, 901, 964, 3719, 839, 839,
	3070, 1057, 1058, 2795, 798, 3232, 574, 2805, 2806, 2807,
	3908, 3770, 837, 3761, 1059, 1127, 3586, 839, 3585, 574,
	3584, 870, 574, 574, 1057, 1058, 3553, 574, 574, 1844,
	574, 3447, 662, 662, 3443, 3396, 662, 1055, 2948, 59,
	1725, 885, 886, 2788, 3720, 889, 3391, 3351, 3389, 3093,
	2883, 3092, 3221, 3091, 3090, 1847, 1726, 2939, 842, 2857,
	3717, 2818, 792, 1730, 2261, 2832, 56, 574, 1753, 2646,
	57, 2626, 2587, 2531, 2459, 796, 2421, 2419, 795, 2416,
	2415, 2633, 2079, 1904, 1806, 909, 874, 574, 574, 1613,
	61, 55, 3965, 903, 814, 813, 69, 3942, 3938, 876,
	59, 3846, 3820, 3794, 1735, 3787, 2835, 3741, 3543, 3669,
	3648, 3645, 2795, 1850, 1795, 59, 2805, 2806, 2807, 963,
	3567, 3563, 2535, 3504, 3460, 3425, 3409, 56, 3069, 3408,
	3407, 57, 3406, 3403, 590, 590, 2970, 611, 611, 2795,
	959, 900, 56, 2805, 2806, 2807, 57, 3241, 2594, 3129,
	3287, 61, 2994, 3149, 3133, 2810, 3117, 2124, 2124, 3109,
	2943, 2935, 2927, 2919, 2891, 2859, 61, 1733, 2852, 2774,
	2795, 2682, 1613, 2681, 2805, 2806, 2807, 2674, 2522, 2521,
	2477, 2998, 2097, 2048, 2398, 2357, 2794, 902, 2257, 908,
	851, 2216, 2097, 2138, 2996, 1615, 1845, 586, 1990, 2947,
	981, 1869, 1775, 1766, 611, 1623, 1621, 1620, 1614, 55,
	2795, 965, 1063, 1048, 1085, 897, 1127, 1146, 1050, 800,
	802, 804, 808, 986, 2827, 854, 1134, 1135, 1136, 1109,
	864, 1034, 2124, 3812, 1043, 1128, 1129, 1130, 1131, 1132,
	1133, 966, 860, 1039, 967, 1805, 2838, 3434, 968, 3434,
	2211, 2098, 839, 839, 839, 839, 2519, 1793, 2573, 839,
	1760, 3898, 1128, 1129, 1130, 1131, 1132, 1133, 3684, 563,
	969, 1128, 1129, 1130, 1131, 1132, 1133, 839, 1057, 1058,
	862, 3390, 1128, 1129, 1130, 1131, 1132, 1133, 839, 1627,
	574, 839, 890, 872, 873, 3036, 3434, 912, 2884, 2723,
	1741, 1146, 1742, 1821, 1126, 1011, 3031, 1751, 972, 1919,
	1848, 574, 1842, 3512, 1764, 837, 1754, 3511, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 970, 1919, 1840, 2733, 2339,
	2335, 1627, 614, 1791, 1846, 611, 611, 611, 611, 1009,
	611, 2639, 971, 1725, 2999, 2670, 2787, 951, 1047, 3349,
	957, 948, 975, 1892, 574, 3641, 2725, 2672, 3640, 1726,
	1823, 3899, 1831, 1052, 1053, 1054, 1730, 2926, 3510, 809,
	574, 1837, 611, 1119, 3356, 3503, 2263, 2275, 837, 973,
	574, 1127, 2262, 2201, 1756, 923, 574, 1606, 1060, 880,
	1089, 998, 1850, 782, 1001, 1002, 1916, 3375, 837, 1792,
	775, 1127, 656, 1103, 1104, 574, 1725, 1010, 574, 2444,
	2227, 1717, 1128, 1129, 1130, 1131, 1132, 1133, 1777, 1714,
	1012, 596, 1726, 1086, 1083, 1080, 1725, 1012, 1778, 1730,
	2643, 962, 3209, 3369, 574, 2232, 3368, 1850, 598, 3162,
	1877, 1071, 1726, 3007, 2897, 574, 574, 2430, 948, 1730,
	2226, 1732, 919, 611, 611, 611, 611, 1813, 1866, 2882,
	1097, 1097, 2000, 1113, 611, 611, 1064, 1065, 1836, 888,
	1068, 807, 611, 1786, 2802, 2803, 2804, 1752, 564, 839,
	807, 807, 1609, 2796, 2797, 2798, 2799, 2800, 2801, 3718,
	1616, 604, 1870, 1107, 2233, 88, 2802, 2803, 2804, 964,
	3233, 3234, 1103, 1104, 780, 2796, 2797, 2798, 2799, 2800,
	2801, 574, 67, 2679, 1827, 2802, 2803, 2804, 1106, 1106,
	718, 1106, 60, 2831, 2796, 2797, 2798, 2799, 2800, 2801,
	1839, 1841, 641, 3355, 1830, 55, 1128, 1129, 1130, 1131,
	1132, 1133, 797, 857, 1624, 3195, 1622, 856, 798, 900,
	3691, 3376, 1715, 900, 3655, 1813, 574, 839, 1835, 839,
	839, 839, 839, 839, 839, 839, 839, 839, 839, 839,
	839, 839, 839, 3579, 1893, 1762, 839, 1788, 839, 611,
	1767, 839, 2288, 60, 645, 1977, 644, 2050, 1889, 1890,
	1859, 1858, 1796, 1797, 1798, 1799, 1734, 1800, 60, 2286,
	1834, 1933, 900, 596, 2685, 3577, 604, 1984, 3253, 1813,
	1607, 55, 3024, 2644, 1610, 1611, 3021, 2338, 2234, 1945,
	598, 1981, 963, 737, 2802, 2803, 2804, 1882, 3757, 1863,
	2287, 1885, 1886, 2796, 2797, 2798, 2799, 2800, 2801, 1857,
	2232, 3173, 1875, 1881, 2185, 2187, 2186, 2285, 737, 44,
	2609, 2802, 2803, 2804, 1079, 1871, 3210, 2605, 1983, 2274,
	2796, 2797, 2798, 2799, 2800, 2801, 643, 2670, 642, 3009,
	1853, 2686, 837, 1997, 3539, 1127, 1895, 1624, 3650, 1899,
	1077, 73, 2802, 2803, 2804, 1106, 2429, 789, 605, 1106,
	1106, 2796, 2797, 2798, 2799, 2800, 2801, 3759, 3666, 2233,
	1725, 1975, 3395, 2437, 3651, 2015, 88, 3192, 794, 1824,
	1948, 1949, 1950, 1951, 965, 3015, 1726, 1969, 2715, 1959,
	2001, 3186, 1976, 1730, 1824, 3065, 993, 89, 2424, 1979,
	1982, 2796, 2797, 2798, 2799, 2800, 2801, 1128, 1129, 1130,
	1131, 1132, 1133, 2342, 966, 2380, 2574, 967, 3121, 1824,
	1025, 968, 2240, 1824, 2712, 1994, 2711, 1824, 2560, 3526,
	1824, 3813, 837, 1760, 962, 1127, 1992, 1993, 2297, 1137,
	1138, 1139, 1985, 969, 2688, 601, 1023, 1986, 2604, 2551,
	913, 1989, 1824, 1824, 1824, 1991, 2603, 2609, 1727, 1868,
	1725, 1076, 1918, 994, 2605, 1724, 1728, 1723, 3006, 1729,
	2014, 2224, 2377, 1722, 1143, 1144, 1726, 1824, 1942, 1918,
	3045, 972, 1090, 1730, 1941, 1776, 1028, 2754, 2753, 2003,
	2386, 907, 2385, 2234, 2384, 2007, 2009, 3342, 970, 2004,
	3354, 2383, 964, 2374, 603, 597, 2039, 2373, 2365, 1128,
	1129, 1130, 1131, 1132, 1133, 971, 808, 905, 1087, 48,
	1923, 2005, 1021, 47, 49, 808, 808, 1020, 1111, 1018,
	1017, 1013, 1008, 59, 1007, 2600, 2225, 2958, 1006, 1854,
	1005, 999, 997, 990, 602, 1078, 989, 1035, 988, 984,
	1856, 1855, 973, 3165, 3414, 2431, 2875, 1022, 1873, 87,
	56, 86, 794, 1826, 57, 3728, 995, 1825, 3033, 2611,
	2579, 3432, 1128, 1129, 1130, 1131, 1132, 1133, 3534, 837,
	2729, 891, 1127, 2783, 61, 2726, 1137, 1138, 1139, 1888,
	2276, 51, 1128, 1129, 1130, 1131, 1132, 1133, 1720, 1852,
	793, 1721, 779, 774, 2047, 1727, 3753, 1725, 89, 46,
	2976, 3756, 1724, 1728, 1723, 3388, 1729, 3752, 1939, 603,
	1722, 1143, 1144, 1726, 1878, 963, 599, 639, 904, 2713,
	1730, 2304, 2295, 2290, 1123, 3540, 2959, 3729, 1088, 2976,
	2552, 1024, 2563, 3063, 781, 1878, 705, 811, 1810, 2687,
	2693, 3363, 1770, 3161, 2870, 48, 1027, 1862, 3656, 47,
	49, 3213, 2607, 2899, 3532, 1769, 791, 2561, 820, 59,
	2612, 2376, 2714, 2610, 2678, 600, 3754, 3644, 3135, 3412,
	2188, 3574, 1867, 3004, 2991, 3212, 2933, 597, 3191, 2238,
	706, 2784, 884, 1910, 2658, 3541, 56, 3880, 3647, 3198,
	57, 2815, 3747, 3523, 3333, 2062, 2611, 3334, 1862, 1091,
	3335, 3134, 906, 3399, 839, 839, 614, 965, 1122, 2924,
	61, 839, 839, 777, 839, 657, 2900, 51, 3336, 2613,
	2562, 3211, 2934, 636, 3066, 2649, 2970, 792, 3630, 3653,
	3056, 1934, 787, 2932, 1121, 46, 787, 966, 707, 2597,
	967, 2893, 2606, 3055, 968, 948, 1081, 892, 812, 2190,
	1952, 3815, 1032, 1051, 3364, 3338, 1760, 1062, 991, 1771,
	87, 3305, 86, 3467, 3527, 3337, 969, 2693, 3915, 789,
	1066, 1067, 3921, 2059, 793, 3339, 3835, 3285, 2482, 3131,
	91, 3345, 891, 1956, 2608, 1955, 3468, 3475, 3974, 2607,
	3973, 3485, 3970, 3947, 3969, 3929, 3928, 3946, 3977, 3952,
	2610, 152, 3950, 1861, 972, 3953, 3962, 3486, 3951, 839,
	3961, 839, 839, 3931, 839, 839, 611, 3949, 3948, 3930,
	3550, 970, 2977, 1029, 2949, 2093, 1075, 2095, 983, 3034,
	3371, 1741, 2054, 2058, 915, 2118, 2118, 996, 971, 2064,
	791, 2730, 2076, 1831, 611, 1954, 2727, 3911, 1026, 3159,
	3926, 2977, 3912, 3968, 1861, 3967, 1128, 1129, 1130, 1131,
	1132, 1133, 1879, 3933, 1074, 2931, 1880, 574, 922, 3932,
	3934, 3935, 2663, 2652, 2558, 973, 2206, 2425, 2407, 2606,
	1627, 2978, 50, 1879, 2215, 1019, 3116, 1880, 3602, 52,
	3899, 2552, 611, 776, 3863, 658, 1831, 2057, 1953, 3797,
	1877, 3914, 3796, 635, 3920, 3340, 3341, 2657, 2462, 3730,
	2978, 792, 2245, 3484, 3346, 2923, 574, 574, 1609, 2992,
	1831, 2608, 1031, 3895, 2979, 3707, 2858, 3751, 1146, 3956,
	2266, 3828, 2270, 3197, 3709, 3296, 3189, 1134, 1135, 1136,
	2665, 3145, 2993, 2280, 2840, 2181, 1128, 1129, 1130, 1131,
	1132, 1133, 574, 2979, 2051, 783, 785, 2585, 2236, 1624,
	2189, 2134, 2075, 2662, 574, 1864, 1624, 1073, 1092, 1908,
	3097, 921, 1920, 1843, 2122, 801, 3280, 3886, 611, 611,
	3891, 962, 3715, 2244, 3889, 3713, 3890, 3892, 574, 3281,
	3094, 2191, 574, 2302, 2172, 3608, 3609, 3478, 3612, 3721,
	3722, 1911, 2202, 2172, 839, 3919, 60, 3607, 3126, 3476,
	1910, 3611, 3479, 2217, 2218, 2219, 2220, 2221, 50, 55,
	2480, 2100, 2089, 2090, 3312, 52, 1909, 3720, 2235, 2481,
	3661, 3662, 2301, 3662, 3661, 3714, 2303, 3452, 2170, 2330,
	3569, 3570, 3589, 3866, 564, 63, 64, 65, 66, 964,
	611, 662, 3771, 3772, 662, 614, 662, 662, 2480, 2694,
	660, 2298, 2101, 694, 2300, 694, 694, 869, 3588, 2255,
	3449, 2120, 2253, 2039, 3888, 1146, 3893, 2096, 3451, 3450,
	2123, 839, 2527, 2528, 1134, 1135, 1136, 611, 1912, 3279,
	778, 3802, 724, 1128, 1129, 1130, 1131, 1132, 1133, 3311,
	630, 2133, 3720, 2118, 2341, 2524, 2497, 2502, 2500, 2501,
	2499, 3793, 2495, 2498, 3702, 2965, 2094, 2119, 2119, 56,
	2083, 2478, 2404, 57, 839, 839, 2208, 2204, 640, 151,
	2203, 2260, 3925, 2656, 839, 839, 3383, 2205, 3576, 839,
	839, 3704, 60, 61, 839, 3824, 2265, 3060, 3059, 2222,
	3703, 2868, 1925, 839, 2336, 55, 1924, 3705, 2340, 839,
	839, 839, 2246, 1745, 1744, 2848, 3107, 3825, 2843, 839,
	2047, 2584, 963, 2473, 2082, 2842, 565, 2497, 2502, 2500,
	2501, 2499, 2261, 2495, 2498, 3976, 2107, 2107, 1741, 839,
	3960, 3959, 2584, 3958, 839, 3909, 3501, 2506, 2506, 662,
	2399, 2118, 2506, 2506, 2506, 3538, 2408, 2323, 2314, 2420,
	3660, 3658, 2911, 2326, 2327, 2530, 2846, 2502, 2500, 2501,
	2499, 2267, 3150, 574, 2892, 574, 574, 167, 2313, 1751,
	574, 574, 2319, 2583, 2344, 2324, 2325, 2343, 2559, 3706,
	2412, 2366, 2140, 2087, 1851, 1819, 1041, 2996, 1015, 2328,
	1014, 1003, 2333, 611, 852, 2567, 165, 1125, 2361, 592,
	588, 3694, 3693, 3613, 965, 1106, 3465, 2451, 3254, 1040,
	3137, 1106, 1106, 1044, 3025, 3022, 2912, 2434, 2591, 2378,
	2379, 3106, 2497, 2502, 2500, 2501, 2499, 1887, 2495, 2498,
	3105, 2397, 574, 2400, 966, 2405, 2406, 967, 1884, 2103,
	3378, 968, 1749, 1791, 2520, 1748, 2012, 2396, 591, 1069,
	3764, 2539, 3, 1760, 3441, 3438, 3200, 3262, 3249, 3243,
	3242, 2468, 3043, 969, 2423, 3201, 664, 574, 574, 3042,
	1097, 664, 702, 2582, 2435, 2432, 664, 2428, 664, 3035,
	3030, 2445, 2766, 2542, 3202, 702, 702, 2765, 839, 2764,
	807, 2491, 2763, 2762, 2761, 2758, 763, 763, 564, 2442,
	2440, 972, 2757, 2755, 2746, 2595, 2744, 2701, 2732, 2731,
	2728, 2660, 2659, 2453, 2443, 587, 2441, 2045, 970, 2394,
	2461, 2375, 2362, 2049, 1947, 2119, 2044, 2045, 1106, 2547,
	1946, 702, 2695, 1944, 2475, 971, 2469, 2470, 1943, 2575,
	1936, 1932, 1931, 1930, 1929, 1928, 1922, 1921, 2622, 1907,
	1906, 1905, 2487, 1903, 2485, 2486, 1876, 1872, 2576, 2578,
	564, 1865, 2511, 2513, 2617, 2510, 2509, 1746, 2418, 2523,
	2598, 2529, 973, 2040, 1988, 2041, 2514, 2417, 810, 799,
	2632, 1987, 158, 3521, 2556, 2062, 3784, 801, 839, 144,
	2553, 2051, 3620, 2628, 2107, 2035, 2924, 574, 2616, 841,
	801, 3817, 2034, 2036, 2033, 849, 2037, 3228, 3816, 3224,
	3156, 1877, 2718, 2719, 2568, 2898, 2546, 2577, 2047, 2436,
	2358, 2119, 2751, 2119, 2564, 2565, 2653, 1935, 2031, 2355,
	1607, 807, 2586, 611, 611, 555, 844, 2351, 105, 3199,
	845, 1898, 843, 611, 2030, 2637, 956, 950, 2677, 569,
	2566, 2614, 2980, 801, 3882, 1914, 3180, 2691, 2676, 3221,
	2640, 2938, 2635, 2636, 1913, 839, 2137, 3147, 839, 570,
	3175, 839, 839, 2427, 839, 839, 839, 1036, 2650, 839,
	839, 2645, 1106, 1106, 3321, 3218, 805, 3141, 1037, 3317,
	2508, 606, 2512, 839, 2664, 2680, 2260, 2684, 839, 2503,
	2671, 2768, 839, 839, 2515, 2516, 2517, 2667, 2252, 807,
	807, 839, 2243, 2724, 2141, 2093, 1815, 1807, 1761, 1755,
	920, 1741, 914, 910, 894, 2118, 2446, 2450, 2118, 3309,
	3424, 3423, 2734, 1106, 2745, 3057, 2851, 2967, 2748, 2506,
	2506, 2506, 2506, 2506, 2698, 2696, 2666, 2654, 2543, 1995,
	2720, 2241, 839, 839, 2237, 839, 2139, 2135, 3314, 3315,
	1998, 1813, 1996, 1831, 1901, 1897, 2880, 1811, 1803, 1801,
	1785, 1070, 1045, 1042, 2640, 1038, 2770, 1033, 1004, 977,
	974, 2749, 955, 839, 949, 2775, 3226, 3225, 2391, 1784,
	884, 3323, 3316, 773, 3319, 3320, 3322, 3318, 3789, 3697,
	3654, 896, 3426, 3357, 839, 839, 3295, 3229, 3193, 3179,
	3169, 3058, 2538, 2389, 574, 2392, 1751, 2242, 2821, 2822,
	2824, 1082, 1736, 1716, 44, 2782, 2471, 2472, 849, 3918,
	2010, 2769, 2008, 2916, 611, 2737, 849, 2881, 849, 2742,
	839, 574, 3900, 2777, 3762, 801, 2778, 3556, 3522, 1883,
	2867, 1120, 2002, 803, 1110, 3157, 3377, 2918, 2215, 2925,
	2820, 594, 2890, 1086, 611, 808, 2833, 2834, 3745, 2540,
	2888, 3372, 3164, 3525, 3374, 2837, 3649, 3370, 807, 1768,
	3365, 2814, 2554, 2150, 2557, 574, 2144, 2544, 2167, 2962,
	2771, 2772, 2163, 550, 551, 157, 1915, 1831, 2195, 2836,
	2776, 2971, 2829, 2828, 1774, 1751, 1773, 1030, 1940, 3555,
	1751, 2839, 1751, 2988, 2845, 2917, 2960, 2955, 2393, 2223,
	1957, 2630, 2885, 2629, 38, 2951, 37, 3010, 2849, 2850,
	36, 2622, 35, 2920, 2987, 664, 664, 2280, 2879, 3014,
	2172, 2862, 2865, 2051, 2983, 34, 33, 2617, 2946, 32,
	31, 2887, 2871, 40, 664, 39, 2945, 30, 2172, 2172,
	2841, 29, 2904, 2844, 2905, 2953, 28, 2995, 27, 664,
	664, 26, 25, 664, 24, 2051, 23, 22, 21, 20,
	2526, 2616, 2526, 2914, 2170, 2907, 2901, 19, 1813, 41,
	16, 1983, 2401, 2909, 1779, 84, 573, 2913, 867, 2915,
	3000, 3003, 1789, 2689, 2989, 2555, 808, 2119, 3184, 2668,
	2119, 2968, 127, 1624, 1958, 952, 3808, 2278, 839, 839,
	3631, 2874, 71, 3533, 2602, 839, 3013, 839, 839, 839,
	839, 839, 839, 839, 839, 839, 839, 839, 839, 2942,
	2936, 839, 2622, 839, 2599, 2975, 2944, 2872, 839, 2966,
	839, 3557, 2952, 2954, 839, 2950, 2985, 2878, 2617, 44,
	2130, 2876, 2988, 2127, 44, 44, 3862, 3119, 3887, 839,
	2620, 3601, 3710, 2118, 2118, 2631, 2107, 2118, 3473, 2107,
	3300, 3001, 3002, 3700, 808, 808, 3005, 3152, 2506, 3098,
	662, 2922, 2616, 3294, 3017, 3112, 2212, 58, 3012, 3448,
	3278, 2853, 2854, 2855, 2856, 2081, 1743, 45, 568, 567,
	3008, 3696, 665, 1831, 611, 815, 1106, 2690, 3490, 3624,
	44, 2941, 3324, 2789, 2790, 3128, 3313, 2866, 68, 3100,
	1747, 2808, 2809, 3125, 3124, 3610, 3032, 3606, 3605, 2830,
	2086, 3037, 574, 3122, 2099, 1731, 2007, 2009, 3148, 3136,
	1751, 3048, 3061, 2989, 15, 702, 14, 13, 839, 3132,
	10, 9, 8, 7, 702, 702, 614, 3142, 6, 611,
	2722, 616, 2618, 3073, 2464, 2063, 1619, 757, 1831, 756,
	741, 3114, 3151, 743, 759, 758, 742, 1049, 662, 664,
	664, 664, 664, 740, 739, 2119, 664, 3196, 1831, 3110,
	765, 3205, 2773, 2055, 835, 834, 2060, 2460, 1617, 168,
	829, 830, 3089, 3140, 664, 825, 2820, 704, 2299, 2700,
	2721, 839, 2305, 3575, 1629, 664, 2390, 1106, 664, 863,
	704, 704, 3187, 3181, 3178, 1158, 3330, 3207, 1155, 3111,
	2, 1, 3204, 0, 0, 3143, 0, 3185, 0, 2767,
	0, 0, 0, 808, 0, 3176, 0, 0, 0, 3154,
	702, 0, 0, 763, 0, 0, 1629, 0, 1629, 0,
	0, 0, 0, 0, 0, 3160, 704, 0, 0, 0,
	2172, 0, 0, 3130, 3171, 0, 0, 2995, 0, 702,
	0, 3222, 2928, 0, 0, 3172, 0, 0, 0, 0,
	839, 839, 839, 0, 3167, 3259, 0, 0, 3102, 3103,
	3188, 0, 3108, 0, 703, 0, 2910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 703, 0,
	763, 0, 0, 0, 0, 0, 0, 839, 2118, 0,
	0, 0, 0, 0, 2119, 3248, 0, 839, 839, 839,
	3203, 0, 0, 0, 0, 2119, 2119, 0, 3246, 2119,
	0, 3246, 3326, 0, 574, 0, 0, 0, 3347, 3227,
	2880, 3144, 2119, 703, 3238, 0, 574, 3235, 0, 3231,
	2988, 574, 0, 0, 0, 3236, 0, 702, 0, 3231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2974, 0, 0, 3329, 0,
	2982, 763, 2984, 763, 0, 0, 664, 0, 0, 0,
	574, 0, 0, 0, 2107, 2107, 3182, 0, 2107, 2962,
	0, 3358, 3350, 0, 0, 0, 3266, 0, 763, 3277,
	0, 702, 3404, 0, 0, 3352, 0, 0, 2988, 614,
	0, 611, 611, 2620, 0, 0, 3290, 0, 0, 0,
	0, 0, 3348, 0, 3398, 3286, 0, 3385, 0, 2987,
	0, 2989, 3237, 3310, 0, 0, 3327, 0, 0, 3074,
	3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084,
	3085, 0, 0, 3359, 664, 763, 664, 664, 664, 664,
	664, 664, 664, 664, 664, 664, 664, 664, 664, 664,
	3307, 3306, 42, 664, 2988, 664, 3417, 18, 664, 3435,
	3453, 1106, 1629, 17, 662, 3343, 54, 3463, 12, 839,
	1106, 1106, 11, 3384, 839, 3454, 3367, 3410, 3366, 2989,
	839, 3362, 2879, 3405, 0, 0, 0, 0, 0, 0,
	0, 0, 3413, 3380, 3415, 3427, 0, 0, 3416, 0,
	0, 0, 3428, 0, 2620, 3496, 0, 0, 0, 0,
	0, 0, 0, 3289, 3440, 0, 0, 3401, 2622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3497, 0,
	3246, 0, 0, 0, 2617, 0, 0, 0, 0, 0,
	3464, 0, 0, 3491, 0, 2989, 0, 0, 3458, 574,
	3459, 0, 0, 3480, 3481, 3114, 0, 3482, 3483, 0,
	2119, 839, 0, 0, 0, 3054, 3506, 0, 2616, 0,
	0, 0, 0, 0, 3456, 662, 0, 0, 0, 839,
	839, 3528, 3508, 3531, 3554, 574, 3530, 0, 3444, 3446,
	3170, 0, 0, 2409, 3509, 2410, 839, 2411, 0, 3502,
	2413, 3507, 2119, 0, 0, 0, 0, 0, 3546, 3455,
	0, 0, 2422, 0, 3551, 3516, 0, 0, 0, 3517,
	1751, 0, 3505, 1741, 0, 3524, 0, 3515, 0, 2107,
	0, 2215, 0, 0, 0, 0, 0, 3545, 3549, 0,
	839, 0, 0, 0, 3600, 3603, 3548, 0, 3420, 3421,
	0, 3581, 0, 3552, 0, 1751, 0, 1751, 0, 0,
	0, 0, 3326, 3590, 3572, 0, 0, 0, 3154, 574,
	2119, 0, 0, 0, 3571, 3633, 0, 0, 0, 44,
	3562, 3513, 3564, 0, 3566, 0, 3519, 0, 3629, 0,
	0, 44, 0, 0, 3158, 2007, 2009, 0, 0, 3592,
	3627, 0, 0, 1106, 3598, 3636, 0, 3560, 3561, 3597,
	3578, 0, 3626, 0, 0, 44, 0, 0, 0, 3642,
	0, 0, 0, 3623, 3638, 0, 0, 0, 0, 0,
	3492, 0, 0, 0, 1751, 3639, 2119, 3637, 614, 3183,
	0, 0, 0, 0, 0, 0, 2119, 839, 0, 3646,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3665, 3652, 0, 3659, 3463, 3634, 0, 3695, 3657,
	839, 3663, 0, 839, 0, 3667, 0, 0, 0, 0,
	0, 3595, 2447, 2447, 0, 0, 0, 0, 1106, 0,
	0, 1751, 0, 3677, 3687, 3679, 3685, 3681, 0, 0,
	0, 0, 0, 0, 0, 3682, 839, 44, 0, 0,
	3680, 0, 0, 3699, 0, 3727, 2988, 0, 0, 839,
	0, 0, 0, 3746, 0, 0, 0, 0, 0, 0,
	0, 3559, 3743, 0, 0, 0, 3740, 3738, 0, 3736,
	704, 3733, 3734, 0, 0, 0, 0, 0, 0, 704,
	704, 0, 0, 3737, 3264, 3265, 0, 0, 0, 3769,
	0, 0, 0, 3777, 1751, 1751, 0, 3742, 3780, 3739,
	0, 3755, 0, 839, 839, 0, 0, 839, 0, 44,
	0, 3765, 3760, 3767, 1877, 1741, 0, 0, 2697, 2093,
	2699, 3763, 3773, 0, 0, 3768, 0, 0, 0, 0,
	0, 3774, 3775, 3633, 611, 611, 0, 2989, 0, 1631,
	3781, 3791, 2988, 3786, 662, 3792, 0, 0, 0, 807,
	0, 664, 664, 3811, 3803, 3790, 3472, 0, 664, 664,
	3328, 664, 3798, 3809, 3799, 3801, 3804, 703, 0, 3795,
	0, 3805, 3807, 3626, 0, 704, 703, 703, 0, 0,
	0, 1631, 0, 1631, 3814, 3806, 0, 2119, 3831, 839,
	0, 0, 3834, 0, 0, 839, 3821, 0, 0, 0,
	2747, 0, 3818, 3822, 704, 0, 0, 0, 3748, 0,
	0, 0, 0, 0, 3833, 0, 0, 0, 3823, 0,
	0, 839, 0, 3840, 3634, 3842, 3854, 3855, 3856, 3463,
	0, 3845, 3847, 2989, 0, 3841, 1630, 3839, 3853, 611,
	3838, 0, 0, 0, 0, 2988, 3864, 3865, 0, 3879,
	3871, 3674, 0, 3857, 0, 3852, 664, 3869, 664, 664,
	3831, 664, 664, 3850, 0, 0, 3872, 0, 3873, 3868,
	2620, 2780, 703, 0, 3870, 0, 0, 3897, 1630, 3894,
	1630, 0, 664, 664, 0, 0, 0, 839, 3902, 0,
	3901, 3848, 3849, 0, 0, 3906, 3907, 0, 0, 0,
	0, 703, 704, 0, 763, 3903, 0, 662, 3879, 0,
	3916, 3917, 0, 763, 3923, 0, 3924, 0, 0, 0,
	0, 3922, 0, 3837, 0, 1629, 3943, 3559, 2119, 3937,
	3941, 3945, 3940, 3936, 0, 0, 2989, 0, 0, 3831,
	3955, 0, 0, 3954, 0, 3879, 0, 0, 3957, 3851,
	3587, 0, 3487, 0, 0, 808, 704, 1629, 3945, 3963,
	0, 0, 0, 0, 0, 0, 3831, 3971, 0, 763,
	0, 3972, 0, 0, 0, 0, 0, 0, 0, 3861,
	807, 0, 0, 0, 0, 3618, 0, 3621, 1629, 0,
	0, 3800, 3800, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 702, 0, 0, 44, 1629, 0, 2447,
	2447, 0, 0, 0, 0, 2119, 0, 2447, 2447, 0,
	0, 0, 0, 0, 2119, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 1127, 1631, 0, 0,
	1137, 1138, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 1720, 703, 0, 1721, 0, 0, 0, 1727,
	702, 1725, 0, 0, 3678, 0, 1724, 1728, 1723, 0,
	1729, 0, 0, 0, 1722, 1143, 1144, 1726, 0, 0,
	0, 702, 702, 0, 1730, 0, 0, 0, 0, 0,
	2860, 0, 0, 0, 0, 0, 3800, 0, 664, 0,
	763, 664, 0, 664, 664, 0, 763, 0, 0, 3614,
	3615, 3616, 3617, 0, 0, 0, 0, 0, 0, 0,
	0, 3723, 0, 0, 808, 0, 0, 2119, 664, 0,
	0, 0, 0, 0, 1630, 0, 0, 0, 3876, 0,
	0, 824, 732, 0, 702, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 3782, 3783, 0, 0, 3785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 664, 0, 0, 0, 0, 0, 2447, 0,
	0, 664, 664, 0, 0, 0, 664, 664, 0, 0,
	0, 664, 0, 0, 3778, 3779, 0, 3876, 0, 0,
	664, 0, 583, 583, 0, 0, 664, 664, 664, 0,
	0, 0, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 633, 3064, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 3876, 0, 664, 0, 0, 0,
	0, 664, 0, 0, 691, 0, 664, 0, 664, 0,
	708, 0, 711, 0, 713, 714, 715, 716, 717, 0,
	0, 0, 722, 0, 0, 0, 726, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 0, 0, 0, 0, 702, 837, 0, 0, 1127,
	0, 0, 0, 1137, 1138, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1720, 0, 0, 1721, 763,
	763, 0, 1727, 0, 1725, 0, 0, 0, 763, 1724,
	1728, 1723, 0, 1729, 0, 0, 0, 1722, 1143, 1144,
	1726, 0, 0, 0, 0, 0, 0, 1730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1629, 763,
	0, 0, 0, 763, 0, 808, 0, 0, 0, 0,
	0, 0, 0, 702, 702, 2447, 2447, 2447, 2447, 2447,
	2447, 2447, 2447, 2447, 2447, 2447, 2447, 0, 0, 837,
	0, 0, 1127, 0, 0, 0, 1137, 1138, 1139, 0,
	0, 3474, 0, 0, 0, 664, 0, 0, 1720, 0,
	0, 1721, 0, 0, 0, 1727, 0, 1725, 0, 0,
	0, 0, 1724, 1728, 1723, 0, 1729, 0, 0, 0,
	1722, 1143, 1144, 1726, 0, 0, 0, 0, 0, 0,
	1730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 1629, 1629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3239, 3240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3258, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 3263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 702, 0, 3878, 0, 763, 0, 0, 1146,
	0, 0, 0, 0, 0, 763, 0, 0, 1134, 1135,
	1136, 0, 0, 0, 0, 3686, 0, 1128, 1129, 1130,
	1131, 1132, 1133, 702, 0, 0, 0, 0, 0, 0,
	0, 3878, 664, 0, 0, 664, 0, 0, 664, 664,
	0, 664, 664, 664, 0, 0, 664, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 664, 0, 0, 0, 664,
	664, 0, 0, 0, 837, 0, 0, 1127, 664, 0,
	0, 1137, 1138, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 1720, 0, 664, 1721, 0, 0, 0,
	1727, 0, 1725, 0, 0, 0, 0, 1724, 1728, 1723,
	0, 1729, 0, 0, 0, 1722, 1143, 1144, 1726, 664,
	664, 0, 664, 0, 0, 1730, 0, 0, 0, 0,
	1631, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3297, 2447, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1631, 0, 0, 0, 0, 0, 0, 0,
	763, 664, 664, 763, 0, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 763, 763,
	0, 0, 763, 1631, 0, 702, 837, 0, 0, 1127,
	0, 0, 0, 1137, 1138, 1139, 887, 664, 704, 0,
	0, 0, 1631, 0, 0, 1720, 0, 0, 1721, 0,
	0, 0, 1727, 0, 1725, 0, 0, 1630, 0, 1724,
	1728, 1723, 0, 1729, 0, 0, 0, 1722, 1143, 1144,
	1726, 0, 0, 0, 924, 0, 0, 1730, 0, 0,
	702, 0, 1146, 0, 0, 0, 0, 0, 0, 1630,
	0, 1134, 1135, 1136, 0, 704, 0, 0, 3664, 0,
	1128, 1129, 1130, 1131, 1132, 1133, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 704, 704, 0, 0,
	1630, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1629, 763, 1629, 703, 0, 0, 1000, 1630,
	0, 0, 0, 0, 0, 1629, 0, 0, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 3466, 0, 0,
	0, 0, 2447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1146, 0, 0, 0, 704,
	0, 0, 0, 0, 1134, 1135, 1136, 0, 0, 0,
	0, 0, 703, 1128, 1129, 1130, 1131, 1132, 1133, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 703, 664, 664, 0, 0, 0,
	0, 0, 664, 763, 664, 664, 664, 664, 664, 664,
	664, 664, 664, 664, 664, 664, 0, 0, 664, 0,
	664, 0, 0, 0, 0, 664, 0, 664, 0, 837,
	1150, 664, 1127, 0, 0, 0, 1137, 1138, 1139, 664,
	0, 0, 0, 0, 0, 0, 664, 0, 1720, 0,
	664, 664, 0, 0, 664, 1727, 703, 1725, 0, 0,
	0, 0, 1724, 1728, 1723, 0, 1729, 664, 0, 0,
	1722, 1143, 1144, 1726, 583, 0, 0, 0, 1150, 0,
	1730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	704, 1772, 0, 837, 0, 763, 1127, 0, 2447, 0,
	1137, 1138, 1139, 0, 0, 0, 0, 0, 0, 0,
	763, 0, 1720, 0, 0, 1721, 0, 0, 1804, 1727,
	0, 1725, 0, 0, 0, 664, 1724, 1728, 1723, 0,
	1729, 0, 0, 3126, 1722, 1143, 1144, 1726, 0, 0,
	0, 1629, 0, 0, 1730, 0, 0, 0, 0, 0,
	0, 0, 0, 1631, 0, 664, 818, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 704,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1146, 0, 0, 0, 0, 0, 1902, 703, 664, 1134,
	1135, 1136, 0, 0, 0, 0, 3422, 0, 1128, 1129,
	1130, 1131, 1132, 1133, 0, 763, 0, 1927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 702, 0, 0, 0, 0, 3708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1978, 0, 0, 1980, 0, 0, 0, 0,
	1630, 1631, 1631, 1631, 0, 837, 763, 0, 1127, 0,
	0, 0, 1137, 1138, 1139, 703, 703, 664, 664, 664,
	0, 0, 0, 0, 1720, 0, 0, 1721, 0, 0,
	0, 1727, 0, 1725, 0, 0, 0, 0, 1724, 1728,
	1723, 0, 1729, 0, 0, 0, 1722, 1143, 1144, 1726,
	0, 0, 1146, 0, 664, 664, 1730, 0, 0, 0,
	0, 1134, 1135, 1136, 664, 664, 664, 0, 3386, 0,
	1128, 1129, 1130, 1131, 1132, 1133, 0, 1629, 0, 0,
	0, 2447, 2447, 0, 0, 2447, 837, 704, 0, 1127,
	0, 0, 0, 1137, 1138, 1139, 0, 664, 1630, 1630,
	1630, 0, 763, 661, 0, 1720, 0, 0, 1721, 0,
	0, 0, 1727, 0, 1725, 0, 0, 0, 704, 1724,
	1728, 1723, 0, 1729, 0, 0, 0, 1722, 1143, 1144,
	1726, 0, 0, 0, 0, 0, 0, 1730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1600, 1601, 1602, 1603, 0, 664, 0, 1605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 1127, 0, 703, 1618, 1137, 1138, 1139, 763,
	0, 0, 0, 0, 0, 0, 1711, 0, 1720, 0,
	0, 1721, 702, 0, 0, 1727, 0, 1725, 0, 0,
	0, 0, 1724, 1728, 1723, 703, 1729, 0, 763, 763,
	1722, 1143, 1144, 1726, 0, 0, 0, 0, 0, 0,
	1730, 664, 744, 744, 0, 0, 0, 0, 572, 0,
	0, 664, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 1146, 0, 0, 0, 0,
	0, 0, 0, 0, 1134, 1135, 1136, 0, 0, 0,
	704, 0, 0, 1128, 1129, 1130, 1131, 1132, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 763, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 652, 654, 0, 0, 0, 664, 0,
	0, 1629, 0, 0, 0, 704, 0, 0, 0, 1146,
	0, 0, 664, 0, 0, 702, 664, 664, 1134, 1135,
	1136, 0, 0, 0, 0, 0, 0, 1128, 1129, 1130,
	1131, 1132, 1133, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 703, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1631, 0, 1631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1631, 763, 0, 0, 0, 0, 0, 664, 0, 1629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 0, 0,
	0, 0, 703, 702, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 0, 0, 0, 2032, 0, 2038, 0, 0, 2042,
	0, 0, 0, 0, 1630, 0, 1630, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 0, 0,
	3121, 1146, 0, 0, 0, 0, 0, 0, 0, 0,
	1134, 1135, 1136, 0, 664, 0, 0, 0, 0, 1128,
	1129, 1130, 1131, 1132, 1133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 664, 0, 0,
	664, 0, 1150, 1150, 1150, 1150, 0, 1150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 1146, 664, 0, 0, 664, 837, 0, 0,
	1127, 1134, 1135, 1136, 1137, 1138, 1139, 0, 3041, 0,
	1128, 1129, 1130, 1131, 1132, 1133, 1720, 0, 0, 1721,
	0, 702, 0, 1727, 0, 1725, 0, 0, 0, 0,
	1724, 1728, 1723, 0, 1729, 0, 1631, 0, 1722, 1143,
	1144, 1726, 0, 0, 0, 0, 0, 0, 1730, 0,
	664, 664, 0, 0, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 1146, 0, 0, 0, 664,
	0, 664, 0, 2817, 1134, 1135, 1136, 0, 0, 0,
	0, 2973, 0, 1128, 1129, 1130, 1131, 1132, 1133, 0,
	0, 0, 0, 0, 0, 704, 0, 0, 704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 0, 664, 1629, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2228, 0, 0, 0,
	0, 0, 0, 0, 2239, 0, 0, 0, 664, 0,
	0, 0, 0, 0, 2247, 2248, 2249, 0, 0, 763,
	0, 0, 0, 0, 0, 2256, 0, 0, 0, 0,
	0, 0, 664, 2268, 1629, 2272, 2273, 0, 0, 0,
	0, 2277, 0, 0, 2281, 2282, 0, 0, 2289, 0,
	2291, 2294, 703, 0, 858, 703, 0, 0, 0, 0,
	0, 0, 1631, 0, 2316, 2317, 0, 868, 2321, 2322,
	0, 0, 0, 0, 664, 877, 879, 0, 881, 0,
	0, 0, 0, 0, 0, 2331, 2332, 0, 0, 0,
	0, 0, 0, 1629, 664, 0, 2345, 0, 2346, 2347,
	2348, 2349, 2350, 0, 0, 2352, 0, 0, 0, 2356,
	0, 0, 0, 2359, 2360, 916, 0, 2363, 2364, 0,
	0, 2367, 2368, 2369, 2370, 2371, 0, 0, 0, 2372,
	1629, 0, 0, 0, 0, 978, 0, 0, 0, 2381,
	2382, 0, 0, 0, 0, 2387, 2388, 837, 0, 0,
	1127, 2395, 0, 0, 1137, 1138, 1139, 0, 0, 1630,
	0, 0, 0, 0, 0, 0, 1720, 0, 0, 1721,
	0, 0, 0, 1727, 0, 1725, 0, 0, 0, 0,
	1724, 1728, 1723, 0, 1729, 0, 0, 704, 1722, 1143,
	1144, 1726, 0, 0, 0, 0, 0, 0, 1730, 0,
	2072, 0, 0, 0, 0, 0, 0, 0, 1150, 1150,
	1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
	1150, 1150, 0, 0, 1150, 0, 0, 0, 0, 0,
	1150, 0, 0, 0, 1150, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1150, 0, 837,
	0, 0, 1127, 0, 703, 0, 1137, 1138, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 2085, 1720, 2028,
	2029, 1721, 2032, 2038, 0, 1727, 744, 1725, 0, 0,
	0, 0, 1724, 1728, 1723, 0, 1729, 0, 0, 0,
	1722, 1143, 1144, 1726, 0, 0, 1631, 0, 0, 0,
	1730, 0, 0, 0, 0, 0, 0, 0, 1713, 0,
	704, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 1134, 1135, 1136, 0, 703, 0, 0, 1757,
	0, 1128, 1129, 1130, 1131, 1132, 1133, 704, 932, 0,
	0, 0, 0, 933, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1818, 0, 1631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 2634, 1860, 0,
	0, 0, 1631, 1630, 0, 2642, 0, 2642, 704, 0,
	0, 0, 0, 2651, 1874, 0, 0, 703, 0, 0,
	935, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1891, 0, 0, 1894, 0, 2683, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 941,
	0, 744, 0, 0, 0, 0, 0, 0, 2707, 2708,
	2709, 2710, 1926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2354, 1937, 1938, 0, 0, 0, 0, 0,
	946, 1630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 0, 703, 0, 0, 2735, 2736,
	0, 2739, 2740, 2741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 929, 2752, 0, 0, 0, 1999,
	0, 0, 0, 0, 0, 0, 0, 0, 2759, 0,
	936, 0, 0, 2760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 2013, 938, 704, 0, 0, 0,
	0, 937, 2438, 2439, 0, 0, 0, 2781, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2452, 0,
	1150, 1150, 2454, 0, 0, 0, 0, 0, 0, 0,
	0, 2463, 0, 0, 1150, 0, 1150, 2072, 2072, 2072,
	0, 0, 0, 1146, 0, 1150, 939, 2476, 0, 704,
	0, 0, 1134, 1135, 1136, 0, 0, 0, 1150, 2813,
	0, 1128, 1129, 1130, 1131, 1132, 1133, 2488, 0, 0,
	1150, 0, 2492, 837, 1150, 0, 1127, 0, 0, 0,
	1137, 1138, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 1720, 703, 0, 1721, 0, 0, 0, 1727,
	932, 1725, 943, 0, 0, 933, 1724, 1728, 1723, 942,
	1729, 0, 1631, 0, 1722, 1143, 1144, 1726, 0, 0,
	0, 0, 0, 0, 1730, 0, 2889, 0, 73, 0,
	0, 0, 0, 0, 0, 2315, 0, 945, 944, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
	0, 0, 935, 0, 0, 1146, 0, 0, 0, 0,
	0, 0, 0, 2921, 1134, 1135, 1136, 0, 0, 2077,
	0, 0, 0, 1128, 1129, 1130, 1131, 1132, 1133, 83,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2673, 0, 1631, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 2956,
	0, 0, 2963, 2964, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1150, 0, 0, 0, 0,
	0, 2981, 0, 0, 0, 1631, 1630, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 3011, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3016, 0, 0,
	0, 0, 936, 0, 0, 0, 3018, 3019, 3020, 0,
	0, 3023, 0, 0, 3026, 3027, 3028, 3029, 0, 0,
	0, 79, 0, 0, 0, 1630, 2750, 3038, 0, 3039,
	0, 3040, 1150, 0, 0, 930, 0, 938, 3044, 0,
	3046, 3047, 0, 937, 3049, 3050, 3051, 3052, 3053, 0,
	0, 0, 0, 0, 0, 2074, 0, 75, 0, 0,
	0, 0, 1630, 0, 85, 0, 0, 1150, 1150, 0,
	0, 0, 80, 1150, 1150, 1150, 0, 0, 0, 0,
	81, 0, 0, 837, 0, 89, 1127, 0, 939, 0,
	1137, 1138, 1139, 0, 0, 0, 0, 0, 1150, 0,
	0, 0, 1720, 2785, 0, 1721, 2786, 1150, 1150, 1727,
	0, 1725, 2791, 2792, 2793, 0, 1724, 1728, 1723, 0,
	1729, 0, 0, 3101, 1722, 1143, 1144, 1726, 0, 0,
	0, 2816, 0, 940, 1730, 0, 2072, 0, 0, 0,
	2825, 2826, 0, 0, 943, 1150, 1150, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1150, 927, 0, 945,
	944, 0, 0, 0, 1150, 1150, 0, 0, 0, 0,
	0, 2863, 0, 2864, 0, 0, 0, 0, 0, 0,
	2178, 0, 0, 0, 0, 0, 0, 0, 932, 2178,
	74, 0, 0, 933, 0, 0, 0, 942, 82, 0,
	0, 2894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2902, 2903, 0, 0, 0, 87, 0, 86,
	78, 0, 0, 0, 0, 0, 934, 0, 0, 0,
	77, 0, 0, 0, 0, 744, 0, 91, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1146,
	935, 0, 0, 0, 0, 0, 948, 0, 1134, 1135,
	1136, 0, 0, 0, 0, 2052, 0, 1128, 1129, 1130,
	1131, 1132, 1133, 0, 3244, 0, 0, 3247, 0, 941,
	0, 0, 0, 3250, 3251, 3252, 0, 0, 3255, 3256,
	3257, 0, 0, 0, 0, 3260, 3261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 3267, 3268, 0, 2200, 3272, 0, 3273, 1150,
	1150, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1150,
	1150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3284, 1150, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2250, 2251, 744, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	2296, 0, 0, 0, 933, 0, 0, 0, 942, 0,
	0, 0, 2318, 0, 0, 938, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 3067, 3068, 0, 1150,
	0, 0, 0, 3072, 0, 0, 2337, 0, 0, 3394,
	0, 0, 0, 0, 0, 3400, 0, 0, 3402, 3086,
	0, 3087, 0, 0, 0, 0, 3088, 0, 2072, 0,
	1964, 0, 2072, 0, 0, 132, 939, 0, 0, 0,
	0, 935, 2074, 2074, 2074, 1150, 0, 3099, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3429, 3430, 0, 0, 0,
	941, 0, 3437, 0, 0, 0, 3439, 0, 0, 0,
	0, 940, 0, 0, 0, 3442, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 1150, 1150, 1150, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	1150, 0, 0, 0, 0, 0, 2548, 0, 0, 0,
	0, 0, 0, 0, 0, 2743, 1150, 945, 944, 1146,
	0, 0, 0, 0, 0, 0, 3177, 0, 1134, 1135,
	1136, 0, 0, 0, 931, 2178, 2548, 1128, 1129, 1130,
	1131, 1132, 1133, 0, 2581, 932, 962, 0, 0, 0,
	933, 0, 0, 141, 942, 0, 0, 0, 1960, 0,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2548, 0, 0, 0, 744,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 3223,
	0, 0, 0, 0, 934, 138, 938, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 1970, 0, 3547, 0,
	0, 0, 0, 0, 964, 0, 0, 935, 0, 0,
	1962, 0, 0, 0, 948, 0, 0, 142, 0, 0,
	0, 2533, 932, 2536, 2537, 143, 0, 933, 2541, 0,
	0, 942, 0, 136, 0, 1963, 941, 939, 0, 0,
	0, 3580, 0, 0, 3583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1974, 0, 3274, 3275,
	3276, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3604, 1150,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	2596, 0, 0, 943, 935, 3288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3304, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 2647, 2648, 963, 945, 944,
	932, 0, 0, 124, 1965, 933, 145, 936, 0, 942,
	0, 0, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 744, 3668, 946, 1971, 0, 0, 1966, 0,
	0, 744, 0, 146, 0, 0, 0, 0, 133, 0,
	0, 147, 938, 0, 0, 1150, 0, 0, 937, 0,
	3689, 0, 3690, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 1972, 0, 0, 0, 0, 931, 1973, 0,
	0, 0, 935, 140, 0, 934, 0, 1967, 954, 0,
	0, 0, 0, 1968, 0, 0, 0, 932, 962, 965,
	0, 2074, 933, 939, 936, 0, 942, 0, 0, 134,
	0, 941, 0, 0, 0, 948, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 967, 0, 0, 2756, 968, 0, 3749, 938,
	0, 1961, 946, 0, 0, 937, 0, 0, 961, 3758,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 943,
	0, 0, 0, 0, 0, 0, 964, 0, 0, 935,
	1150, 0, 0, 0, 3776, 0, 0, 0, 3477, 0,
	0, 0, 932, 0, 0, 931, 0, 933, 0, 0,
	939, 942, 2329, 0, 945, 944, 972, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 2178, 0, 0, 2548,
	0, 2548, 936, 970, 0, 0, 0, 1150, 0, 0,
	0, 0, 0, 0, 2178, 2178, 1150, 0, 2548, 946,
	971, 0, 932, 0, 0, 940, 0, 933, 0, 0,
	0, 942, 3819, 0, 0, 0, 943, 938, 0, 0,
	0, 0, 0, 937, 935, 0, 0, 0, 0, 3544,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 934, 931, 0, 0, 0, 0, 0, 0, 953,
	0, 945, 944, 941, 0, 0, 0, 0, 0, 963,
	0, 0, 0, 0, 3573, 0, 0, 0, 939, 936,
	0, 948, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 933, 0, 941, 938, 942, 0, 0, 0, 2548,
	937, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 2908, 0, 943, 0, 0, 931, 934, 0,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2929,
	0, 965, 0, 0, 936, 939, 0, 2738, 948, 945,
	944, 932, 1150, 0, 0, 0, 933, 0, 935, 0,
	942, 0, 0, 3939, 0, 0, 0, 931, 744, 0,
	0, 966, 0, 0, 967, 0, 0, 0, 968, 938,
	0, 0, 0, 1818, 0, 937, 0, 941, 0, 744,
	961, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	969, 943, 0, 0, 0, 3688, 0, 0, 0, 0,
	932, 0, 0, 2074, 0, 933, 0, 2074, 946, 942,
	0, 0, 0, 935, 0, 0, 934, 0, 0, 938,
	939, 2863, 0, 0, 958, 937, 945, 944, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 970, 948, 0, 0, 0,
	0, 931, 0, 0, 3735, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 940, 0, 3744, 0, 0,
	939, 0, 935, 946, 0, 3155, 943, 0, 936, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2178, 0, 0, 973,
	0, 941, 0, 934, 0, 0, 0, 0, 0, 2334,
	0, 945, 944, 938, 0, 940, 931, 0, 0, 937,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 946, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 92, 0, 0, 0, 104, 0, 2320,
	0, 945, 944, 0, 939, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 931, 0, 0, 938, 0,
	0, 0, 0, 0, 937, 0, 0, 0, 934, 2146,
	118, 744, 0, 0, 0, 2146, 0, 2159, 0, 0,
	0, 0, 936, 2159, 0, 0, 0, 2863, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	3166, 0, 0, 0, 0, 0, 0, 938, 934, 0,
	0, 0, 744, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1900, 0, 945, 944, 0, 0, 0,
	2165, 0, 0, 0, 0, 0, 2165, 0, 948, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 943, 98, 0, 939, 0,
	0, 0, 0, 0, 2161, 0, 0, 0, 0, 0,
	2161, 0, 0, 0, 0, 3910, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 132, 1896, 0,
	945, 944, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 940, 101, 135, 0, 0, 2548, 0,
	0, 0, 0, 0, 943, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 131, 116, 0, 0, 0, 0,
	0, 0, 948, 123, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 103, 0, 0, 0, 976, 0, 945,
	944, 0, 2151, 0, 0, 0, 0, 0, 2151, 0,
	0, 0, 0, 0, 93, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 2160, 0, 0, 0, 0, 0,
	2160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2548, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2156, 141, 0, 0, 0, 0,
	2156, 0, 3331, 0, 744, 744, 934, 0, 0, 0,
	0, 0, 107, 0, 3353, 0, 0, 2153, 0, 0,
	0, 124, 108, 2153, 109, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 138, 2147, 0,
	0, 2158, 0, 117, 2147, 0, 110, 2158, 0, 114,
	0, 111, 0, 0, 0, 0, 94, 0, 3397, 112,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 120, 0, 143, 0, 0,
	113, 0, 0, 2164, 0, 136, 119, 0, 0, 2164,
	0, 121, 0, 0, 3155, 0, 0, 115, 0, 0,
	0, 122, 744, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 52, 0,
	0, 2182, 0, 0, 52, 0, 0, 2142, 0, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	0, 2157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2154, 0, 0, 0, 0, 0, 2154, 2152, 0,
	0, 0, 2162, 0, 2152, 0, 0, 0, 2162, 0,
	0, 0, 0, 0, 0, 2148, 148, 0, 0, 0,
	0, 2148, 0, 0, 0, 124, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 2155,
	0, 2149, 0, 0, 0, 2155, 0, 2149, 0, 0,
	0, 0, 0, 149, 0, 146, 0, 0, 0, 0,
	133, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 3529, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 3565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1633, 179,
	1639, 196, 669, 1649, 245, 282, 497, 1636, 1681, 342,
	1686, 395, 399, 1710, 488, 1643, 1646, 1656, 1659, 253,
	1664, 674, 1672, 680, 1682, 686, 1701, 464, 1707, 676,
	677, 682, 184, 578, 487, 558, 1695, 1641, 1699, 349,
	1692, 1668, 1708, 1685, 1697, 1678, 1683, 192, 1670, 1671,
	1675, 1684, 678, 675, 679, 685, 673, 683, 670, 681,
	1705, 386, 320, 0, 537, 413, 191, 237, 224, 266,
	308, 420, 1640, 1658, 298, 468, 233, 322, 1691, 212,
	355, 1704, 444, 319, 1698, 427, 447, 1660, 339, 218,
	378, 434, 435, 667, 672, 1648, 688, 1635, 222, 223,
	344, 204, 352, 549, 515, 407, 365, 363, 1666, 330,
	387, 544, 1638, 0, 252, 0, 247, 343, 483, 210,
	462, 381, 348, 302, 410, 439, 249, 234, 235, 278,
	380, 268, 220, 473, 512, 516, 514, 510, 507, 511,
	508, 509, 513, 269, 506, 744, 481, 490, 524, 504,
	532, 489, 529, 499, 244, 528, 493, 492, 538, 519,
	520, 474, 534, 505, 503, 496, 495, 491, 1706, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 180,
	1634, 181, 182, 183, 185, 186, 187, 666, 188, 189,
	190, 193, 194, 195, 197, 557, 198, 199, 200, 201,
	202, 203, 494, 668, 205, 206, 207, 208, 209, 211,
	213, 214, 215, 216, 217, 219, 221, 1650, 1651, 1652,
	671, 1653, 1654, 1655, 225, 226, 227, 228, 229, 230,
	1657, 231, 232, 236, 238, 239, 240, 241, 242, 243,
	246, 1661, 248, 250, 1662, 251, 254, 1663, 255, 256,
	257, 258, 259, 260, 261, 262, 498, 263, 1665, 264,
	265, 267, 1667, 270, 271, 272, 273, 274, 1669, 275,
	500, 501, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 1673,
	295, 296, 297, 299, 1674, 300, 301, 304, 305, 306,
	307, 1676, 309, 517, 1677, 310, 311, 312, 1679, 1680,
	313, 314, 315, 316, 317, 318, 321, 518, 323, 324,
	325, 326, 327, 328, 329, 559, 331, 332, 333, 334,
	335, 336, 337, 521, 522, 338, 340, 341, 523, 525,
	526, 684, 356, 357, 358, 359, 360, 361, 362, 364,
	1688, 366, 367, 368, 527, 369, 370, 371, 372, 1689,
	373, 374, 375, 376, 377, 379, 382, 383, 384, 385,
	1690, 388, 389, 390, 391, 392, 393, 394, 396, 397,
	398, 400, 401, 402, 560, 403, 404, 405, 406, 530,
	408, 409, 561, 411, 412, 414, 415, 416, 417, 418,
	419, 576, 1693, 421, 531, 422, 423, 424, 425, 426,
	1694, 428, 429, 430, 431, 432, 433, 436, 437, 438,
	440, 441, 533, 442, 443, 1696, 445, 446, 687, 448,
	449, 450, 451, 452, 1700, 577, 453, 535, 454, 536,
	455, 456, 457, 458, 459, 460, 461, 463, 1702, 1703,
	465, 466, 467, 469, 470, 471, 472, 475, 476, 477,
	478, 479, 1709, 480, 482, 484, 562, 539, 540, 541,
	542, 543, 545, 546, 547, 548, 485, 486, 502, 353,
	347, 303, 345, 346, 350, 351, 354, 1687, 1637, 1642,
	1644, 1645, 1647, 0, 0, 0, 0, 0, 0, 0,
	0, 1157, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 1127, 0, 0, 1626, 1137, 1138, 1139, 1168, 1170,
	1154, 1197, 1218, 0, 1269, 1315, 1285, 1140, 1402, 1408,
	1141, 1469, 1473, 0, 1151, 1199, 1148, 1249, 1264, 1279,
	1291, 1147, 1152, 1145, 1406, 1153, 1550, 1561, 1581, 1142,
	1143, 1144, 1149, 1542, 1599, 1368, 1527, 1179, 0, 1156,
	1493, 0, 0, 1416, 1531, 0, 0, 1193, 0, 0,
	0, 0, 1341, 1330, 1364, 1477, 1302, 1422, 1230, 1389,
	1567, 1459, 1378, 0, 1573, 1491, 1192, 1258, 1242, 1294,
	1359, 1500, 1175, 1259, 1334, 1565, 1254, 1380, 0, 1221,
	1424, 1566, 1529, 1377, 1540, 1510, 1535, 1265, 1403, 1228,
	1450, 1517, 1518, 1188, 1301, 1223, 1576, 1173, 1233, 1241,
	1411, 1212, 1419, 1597, 1351, 1484, 1434, 1432, 0, 1391,
	1460, 1592, 0, 0, 1278, 0, 1272, 1410, 1584, 1219,
	1558, 1453, 1415, 1353, 1487, 1522, 1274, 1255, 1256, 1312,
	1452, 1297, 1231, 1572, 1348, 1352, 1350, 1346, 1343, 1347,
	1344, 1345, 1349, 1299, 1342, 0, 0, 1189, 1409, 1337,
	1507, 1187, 1456, 1295, 1268, 0, 0, 0, 1574, 1388,
	1390, 0, 1543, 1338, 1336, 1247, 1246, 1190, 1575, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1171,
	1172, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1194, 1195, 1196, 1198, 1201, 1202, 1203, 1205, 1206,
	1207, 1208, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1220,
	1222, 1224, 1225, 1226, 1227, 1229, 1232, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1243, 1244, 0, 1245, 1248, 1250,
	1251, 1252, 1253, 1257, 1260, 1261, 1262, 1263, 1266, 1267,
	1270, 1271, 1273, 1275, 1276, 1277, 1280, 0, 1281, 1282,
	1283, 1284, 1286, 1287, 1288, 1289, 1290, 1292, 0, 0,
	1293, 1296, 1298, 1300, 1303, 1304, 1305, 1306, 0, 1307,
	1308, 1309, 1310, 1311, 1313, 0, 1314, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1332, 1333, 1335, 0, 1339, 1340, 1355, 1356, 1357,
	1358, 1360, 1362, 1363, 1361, 1365, 1366, 1367, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1379, 1381, 1382, 0,
	1383, 1384, 0, 1385, 1386, 1387, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1404, 1405, 1407, 1421,
	1423, 0, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1433,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1451, 1454, 1455, 1457, 1458,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1470, 1471,
	1472, 1474, 1475, 1476, 1478, 1479, 1480, 1481, 1482, 1483,
	1485, 1486, 1488, 1489, 1490, 0, 1492, 1494, 1495, 1496,
	1497, 1498, 1499, 1502, 1501, 1503, 1504, 1505, 1506, 1508,
	1509, 1511, 1512, 1513, 1514, 1515, 1516, 1519, 1520, 1521,
	1523, 1524, 1525, 1526, 1528, 1530, 1532, 1534, 1533, 1536,
	1537, 1538, 1539, 1541, 1544, 1545, 1546, 1547, 1548, 1549,
	1551, 1552, 1553, 1554, 1555, 1556, 1557, 1559, 0, 1560,
	1562, 1563, 1564, 1568, 1569, 1570, 1571, 1577, 1578, 1579,
	1580, 1582, 0, 0, 1583, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1593, 1594, 1595, 1596, 0, 1598, 1331, 1420,
	1414, 1354, 1412, 1413, 1417, 1418, 0, 0, 1174, 1191,
	1200, 1204, 1211, 0, 1146, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 1135, 1136, 0, 0, 0, 0,
	0, 0, 1128, 1129, 1130, 1131, 1132, 1133, 1628, 0,
	3877, 801, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 1633, 179, 1639, 196, 669,
	1649, 245, 282, 497, 1636, 1681, 342, 1686, 395, 399,
	1710, 488, 1643, 1646, 1656, 1659, 253, 1664, 674, 1672,
	680, 1682, 686, 1701, 464, 1707, 676, 677, 682, 184,
	578, 487, 558, 1695, 1641, 1699, 349, 1692, 1668, 1708,
	1685, 1697, 1678, 1683, 192, 1670, 1671, 1675, 1684, 678,
	675, 679, 685, 673, 683, 670, 681, 1705, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 1640,
	1658, 298, 468, 233, 322, 1691, 212, 355, 1704, 444,
	319, 1698, 427, 447, 1660, 339, 218, 378, 434, 435,
	667, 672, 1648, 688, 1635, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 1666, 330, 387, 544, 1638,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 1706, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 1634, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 1650, 1651, 1652, 671, 1653, 1654,
	1655, 225, 226, 227, 228, 229, 230, 1657, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 1661, 248,
	250, 1662, 251, 254, 1663, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 1665, 264, 265, 267, 1667,
	270, 271, 272, 273, 274, 1669, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 1673, 295, 296, 297,
	299, 1674, 300, 301, 304, 305, 306, 307, 1676, 309,
	517, 1677, 310, 311, 312, 1679, 1680, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 1688, 366, 367,
	368, 527, 369, 370, 371, 372, 1689, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 1690, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 1693,
	421, 531, 422, 423, 424, 425, 426, 1694, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 1696, 445, 446, 687, 448, 449, 450, 451,
	452, 1700, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 1702, 1703, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 1709,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 1687, 1637, 1642, 1644, 1645, 1647,
	1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1633, 179, 1639,
	196, 669, 1649, 245, 282, 497, 1636, 1681, 342, 1686,
	395, 399, 1710, 488, 1643, 1646, 1656, 1659, 253, 1664,
	674, 1672, 680, 1682, 686, 1701, 464, 1707, 676, 677,
	682, 184, 578, 487, 558, 1695, 1641, 1699, 349, 1692,
	1668, 1708, 1685, 1697, 1678, 1683, 192, 1670, 1671, 1675,
	1684, 678, 675, 679, 685, 673, 683, 670, 681, 1705,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 1640, 1658, 298, 468, 233, 322, 1691, 212, 355,
	1704, 444, 319, 1698, 427, 447, 1660, 339, 218, 378,
	434, 435, 667, 672, 1648, 688, 1635, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 1666, 330, 387,
	544, 1638, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 1706, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 1634,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 1650, 1651, 1652, 671,
	1653, 1654, 1655, 225, 226, 227, 228, 229, 230, 1657,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	1661, 248, 250, 1662, 251, 254, 1663, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 1665, 264, 265,
	267, 1667, 270, 271, 272, 273, 274, 1669, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 1673, 295,
	296, 297, 299, 1674, 300, 301, 304, 305, 306, 307,
	1676, 309, 517, 1677, 310, 311, 312, 1679, 1680, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 1688,
	366, 367, 368, 527, 369, 370, 371, 372, 1689, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 1690,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 1693, 421, 531, 422, 423, 424, 425, 426, 1694,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 1696, 445, 446, 687, 448, 449,
	450, 451, 452, 1700, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 1702, 1703, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 1709, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 1687, 1637, 1642, 1644,
	1645, 1647, 1628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1633,
	179, 1639, 196, 669, 1649, 2310, 282, 497, 1636, 1681,
	342, 1686, 395, 399, 1710, 488, 1643, 1646, 1656, 1659,
	253, 1664, 674, 1672, 680, 1682, 686, 1701, 464, 1707,
	676, 677, 682, 184, 578, 487, 558, 1695, 1641, 1699,
	349, 1692, 1668, 1708, 1685, 1697, 1678, 1683, 192, 1670,
	1671, 1675, 1684, 678, 675, 679, 685, 673, 683, 670,
	681, 1705, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 2308, 1640, 1658, 298, 468, 233, 322, 1691,
	212, 355, 1704, 444, 319, 1698, 427, 447, 1660, 339,
	218, 378, 434, 435, 667, 672, 1648, 688, 1635, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 1666,
	330, 387, 544, 1638, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 1706,
	169, 170, 171, 172, 173, 2309, 175, 176, 177, 178,
	180, 1634, 181, 182, 183, 185, 186, 187, 666, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 668, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 1650, 1651,
	1652, 671, 1653, 1654, 1655, 225, 226, 227, 228, 229,
	230, 1657, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 1661, 248, 250, 1662, 251, 254, 1663, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 1665,
	264, 265, 267, 1667, 270, 271, 272, 273, 274, 1669,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	1673, 295, 296, 297, 299, 1674, 300, 301, 304, 305,
	306, 307, 1676, 309, 517, 1677, 310, 311, 312, 1679,
	1680, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 684, 356, 357, 358, 359, 360, 361, 362,
	364, 1688, 366, 367, 368, 527, 369, 370, 371, 372,
	1689, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 1690, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 1693, 421, 531, 422, 423, 424, 425,
	426, 1694, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 1696, 445, 446, 687,
	448, 449, 450, 451, 452, 1700, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 1702,
	1703, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 1709, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 1687, 1637,
	1642, 1644, 1645, 1647, 762, 0, 1102, 801, 0, 0,
	0, 615, 849, 0, 0, 0, 0, 0, 626, 627,
	628, 1633, 179, 1639, 196, 669, 1649, 245, 282, 0,
	1636, 1681, 342, 1686, 395, 399, 1710, 0, 1643, 1646,
	1656, 1659, 253, 1664, 674, 1672, 680, 1682, 686, 1701,
	464, 1707, 676, 677, 682, 184, 761, 487, 558, 1695,
	1641, 1699, 2623, 1692, 1668, 1708, 1685, 1697, 1678, 1683,
	192, 1670, 1671, 1675, 1684, 678, 675, 679, 685, 673,
	683, 670, 681, 1705, 386, 320, 0, 0, 413, 191,
	237, 224, 266, 308, 420, 1640, 1658, 298, 468, 233,
	322, 1691, 212, 355, 1704, 444, 319, 1698, 427, 447,
	1660, 339, 218, 378, 434, 435, 667, 672, 1648, 688,
	1635, 222, 223, 344, 204, 352, 0, 0, 407, 365,
	363, 1666, 330, 387, 0, 1638, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 481,
	764, 754, 746, 747, 748, 749, 750, 751, 0, 766,
	767, 768, 769, 770, 474, 760, 0, 745, 752, 753,
	755, 1706, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 1634, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 0, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	1650, 1651, 1652, 671, 1653, 1654, 1655, 225, 226, 227,
	228, 229, 230, 1657, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 1661, 248, 250, 1662, 251, 254,
	1663, 255, 256, 257, 258, 259, 260, 261, 262, 0,
	263, 1665, 264, 265, 267, 1667, 270, 271, 272, 273,
	274, 1669, 275, 0, 0, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 1673, 295, 296, 297, 299, 1674, 300, 301,
	304, 305, 306, 307, 1676, 309, 0, 1677, 310, 311,
	312, 1679, 1680, 313, 314, 315, 316, 317, 318, 321,
	0, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 2621, 0, 338, 340,
	341, 0, 0, 0, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 1688, 366, 367, 368, 0, 369, 370,
	371, 372, 1689, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 1690, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 0, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 1693, 421, 2180, 422, 423,
	424, 425, 426, 1694, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 0, 442, 443, 1696, 445,
	446, 687, 448, 449, 450, 451, 452, 1700, 577, 453,
	0, 454, 0, 455, 456, 457, 458, 459, 460, 461,
	463, 1702, 1703, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 1709, 480, 482, 484, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 485,
	486, 0, 353, 347, 303, 345, 346, 350, 351, 354,
	1687, 1637, 1642, 1644, 1645, 1647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 623, 624, 625, 0,
	0, 0, 0, 0, 0, 2624, 2625, 619, 620, 621,
	622, 663, 0, 841, 801, 0, 0, 0, 837, 849,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 196, 669, 0, 245, 282, 832, 0, 823, 342,
	0, 395, 399, 59, 488, 846, 0, 0, 0, 253,
	844, 674, 0, 680, 845, 686, 843, 464, 0, 676,
	677, 682, 184, 578, 487, 558, 0, 0, 0, 838,
	56, 0, 0, 0, 57, 0, 0, 192, 0, 0,
	0, 0, 678, 675, 679, 685, 673, 683, 670, 681,
	0, 386, 320, 0, 1608, 413, 191, 237, 224, 266,
	308, 420, 0, 0, 298, 468, 233, 322, 0, 212,
	355, 0, 444, 319, 0, 427, 447, 0, 339, 218,
	378, 434, 435, 667, 672, 0, 688, 0, 222, 223,
	344, 204, 352, 549, 515, 407, 365, 363, 0, 330,
	387, 544, 833, 0, 252, 0, 247, 343, 483, 210,
	462, 381, 348, 302, 410, 439, 249, 234, 235, 278,
	380, 268, 220, 473, 512, 516, 514, 510, 507, 511,
	508, 509, 513, 269, 506, 0, 481, 490, 524, 504,
	532, 489, 529, 499, 244, 528, 493, 492, 538, 519,
	520, 474, 534, 505, 503, 496, 495, 491, 0, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 180,
	0, 181, 182, 183, 185, 186, 187, 666, 188, 189,
	190, 193, 194, 195, 197, 557, 198, 199, 200, 201,
	202, 203, 494, 668, 205, 206, 207, 208, 209, 211,
	213, 214, 215, 216, 217, 219, 221, 0, 0, 0,
	671, 0, 0, 0, 225, 226, 227, 228, 229, 230,
	0, 231, 232, 236, 238, 239, 240, 241, 242, 243,
	246, 0, 248, 250, 0, 251, 254, 0, 255, 256,
	257, 258, 259, 260, 261, 262, 498, 263, 0, 264,
	265, 267, 0, 270, 271, 272, 273, 274, 0, 275,
	500, 836, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 0,
	295, 296, 297, 299, 0, 300, 301, 304, 305, 306,
	307, 0, 309, 517, 0, 310, 311, 312, 0, 0,
	313, 314, 315, 316, 317, 318, 321, 518, 323, 324,
	325, 326, 327, 328, 329, 559, 331, 332, 333, 334,
	335, 336, 337, 521, 522, 338, 340, 341, 523, 525,
	526, 684, 356, 357, 358, 359, 360, 361, 362, 364,
	0, 366, 367, 368, 527, 369, 370, 371, 372, 0,
	373, 374, 375, 376, 377, 379, 382, 383, 384, 385,
	0, 388, 389, 390, 391, 392, 393, 394, 396, 397,
	398, 400, 401, 402, 560, 403, 404, 405, 406, 848,
	408, 409, 561, 411, 412, 414, 415, 416, 417, 418,
	419, 576, 0, 421, 531, 422, 423, 424, 425, 426,
	0, 428, 429, 430, 431, 432, 433, 436, 437, 438,
	440, 441, 533, 442, 443, 0, 445, 446, 687, 448,
	449, 450, 451, 452, 0, 577, 453, 535, 454, 536,
	455, 456, 457, 458, 459, 460, 461, 463, 0, 0,
	465, 466, 467, 469, 470, 471, 472, 475, 476, 477,
	478, 479, 0, 480, 482, 484, 562, 539, 540, 541,
	542, 543, 545, 546, 547, 548, 485, 486, 502, 353,
	347, 303, 345, 346, 350, 351, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 663, 0, 841,
	801, 0, 0, 0, 837, 849, 827, 0, 0, 828,
	0, 0, 821, 822, 2069, 179, 0, 196, 669, 0,
	245, 282, 832, 0, 823, 342, 0, 395, 399, 0,
	488, 846, 0, 0, 2070, 253, 844, 674, 0, 680,
	845, 686, 843, 464, 0, 676, 677, 682, 184, 578,
	487, 558, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 678, 675,
	679, 685, 673, 683, 670, 681, 0, 386, 320, 0,
	537, 413, 191, 237, 224, 266, 308, 420, 0, 0,
	298, 468, 233, 322, 0, 212, 355, 0, 444, 319,
	0, 427, 447, 0, 339, 218, 378, 434, 435, 667,
	672, 0, 688, 0, 222, 223, 344, 204, 352, 549,
	515, 407, 365, 363, 0, 330, 387, 544, 833, 0,
	252, 0, 247, 343, 483, 210, 462, 381, 348, 302,
	410, 439, 249, 234, 235, 278, 380, 268, 220, 473,
	512, 516, 514, 510, 507, 511, 508, 509, 513, 269,
	506, 0, 481, 490, 524, 504, 532, 489, 529, 499,
	244, 528, 493, 492, 538, 519, 520, 474, 534, 505,
	503, 496, 495, 491, 2068, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 180, 0, 181, 182, 183,
	185, 186, 187, 666, 188, 189, 190, 193, 194, 195,
	197, 557, 198, 199, 200, 201, 202, 203, 494, 668,
	205, 206, 207, 208, 209, 211, 213, 214, 215, 216,
	217, 219, 221, 0, 0, 0, 671, 0, 0, 0,
	225, 226, 227, 228, 229, 230, 0, 231, 232, 236,
	238, 239, 240, 241, 242, 243, 246, 0, 248, 250,
	0, 251, 254, 0, 255, 256, 257, 258, 259, 260,
	261, 262, 498, 263, 0, 264, 265, 267, 0, 270,
	271, 272, 273, 274, 0, 275, 500, 836, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 0, 295, 296, 297, 299,
	0, 300, 301, 304, 305, 306, 307, 0, 309, 517,
	0, 310, 311, 312, 0, 0, 313, 314, 315, 316,
	317, 318, 321, 518, 323, 324, 325, 326, 327, 328,
	329, 559, 331, 332, 333, 334, 335, 336, 337, 521,
	522, 338, 340, 341, 523, 525, 526, 684, 356, 357,
	358, 359, 360, 361, 362, 364, 0, 366, 367, 368,
	527, 369, 370, 371, 372, 0, 373, 374, 375, 376,
	377, 379, 382, 383, 384, 385, 0, 388, 389, 390,
	391, 392, 393, 394, 396, 397, 398, 400, 401, 402,
	560, 403, 404, 405, 406, 848, 408, 409, 561, 411,
	412, 414, 415, 416, 417, 418, 419, 576, 0, 421,
	531, 422, 423, 424, 425, 426, 0, 428, 429, 430,
	431, 432, 433, 436, 437, 438, 440, 441, 533, 442,
	443, 0, 445, 446, 687, 448, 449, 450, 451, 452,
	0, 577, 453, 535, 454, 536, 455, 456, 457, 458,
	459, 460, 461, 463, 0, 0, 465, 466, 467, 469,
	470, 471, 472, 475, 476, 477, 478, 479, 0, 480,
	482, 484, 562, 539, 540, 541, 542, 543, 545, 546,
	547, 548, 485, 486, 502, 353, 347, 303, 345, 346,
	350, 351, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 0, 841, 801, 0, 0, 0, 837,
	849, 827, 0, 0, 0, 828, 2066, 0, 821, 822,
	179, 0, 196, 669, 0, 245, 282, 832, 0, 823,
	342, 0, 395, 399, 0, 488, 846, 0, 0, 0,
	253, 844, 674, 0, 680, 845, 686, 843, 464, 0,
	676, 677, 682, 184, 578, 487, 558, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 678, 675, 679, 685, 673, 683, 670,
	681, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 667, 672, 0, 688, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 833, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 666, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 668, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 671, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 836, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 684, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	848, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 687,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	841, 801, 0, 0, 0, 837, 849, 827, 0, 0,
	828, 0, 0, 821, 822, 819, 179, 0, 196, 669,
	0, 245, 282, 832, 0, 823, 342, 0, 395, 399,
	0, 488, 846, 0, 0, 0, 253, 844, 674, 0,
	680, 845, 686, 843, 464, 0, 676, 677, 682, 184,
	578, 487, 558, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 833,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 836, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 848, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 0, 841, 801, 0, 0, 0,
	837, 849, 827, 0, 1613, 2056, 828, 0, 0, 821,
	822, 179, 0, 196, 669, 0, 245, 282, 832, 0,
	823, 342, 0, 395, 399, 0, 488, 846, 0, 0,
	0, 253, 844, 674, 0, 680, 845, 686, 843, 464,
	0, 676, 677, 682, 184, 578, 487, 558, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 678, 675, 679, 685, 673, 683,
	670, 681, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 667, 672, 0, 688, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 833, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	2819, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 666,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 668, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 671, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	255, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 0, 270, 271, 272, 273, 274,
	0, 275, 500, 836, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 684, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 0, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 848, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	687, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 0, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	841, 801, 0, 0, 0, 837, 849, 827, 0, 0,
	0, 828, 0, 0, 821, 822, 179, 0, 196, 669,
	0, 245, 282, 832, 0, 823, 342, 0, 395, 399,
	0, 488, 846, 0, 0, 0, 253, 844, 674, 0,
	680, 845, 686, 843, 464, 0, 676, 677, 682, 184,
	578, 487, 558, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 833,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 836, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 848, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 0, 841, 801, 0, 0, 0,
	837, 849, 827, 0, 0, 0, 828, 2065, 0, 821,
	822, 179, 0, 196, 669, 0, 245, 282, 832, 0,
	823, 342, 0, 395, 399, 0, 488, 846, 0, 0,
	0, 253, 844, 674, 0, 680, 845, 686, 843, 464,
	0, 676, 677, 682, 184, 578, 487, 558, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 678, 675, 679, 685, 673, 683,
	670, 681, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 667, 672, 0, 688, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 833, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 666,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 668, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 671, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	255, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 0, 270, 271, 272, 273, 274,
	0, 275, 500, 836, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 684, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 0, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 848, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	687, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 0, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	841, 801, 0, 0, 0, 837, 849, 827, 0, 0,
	0, 828, 0, 0, 821, 822, 179, 0, 196, 669,
	0, 245, 282, 832, 0, 823, 342, 0, 395, 399,
	0, 488, 846, 0, 0, 0, 253, 844, 674, 0,
	680, 845, 686, 843, 464, 0, 676, 677, 682, 184,
	578, 487, 558, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 2493, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 833,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 836, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 848, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 0, 841, 801, 0, 0, 0,
	0, 849, 827, 0, 0, 0, 828, 0, 0, 821,
	822, 179, 0, 196, 669, 0, 245, 282, 832, 0,
	0, 342, 0, 395, 399, 0, 488, 846, 0, 3303,
	0, 253, 844, 674, 0, 680, 845, 686, 843, 464,
	0, 676, 677, 682, 184, 578, 487, 558, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 678, 675, 679, 685, 673, 683,
	670, 681, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 667, 672, 0, 688, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 833, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 666,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 668, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 671, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	255, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 0, 270, 271, 272, 273, 274,
	0, 275, 500, 836, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 684, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 0, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 848, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	687, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 0, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	841, 801, 0, 0, 0, 0, 849, 827, 0, 0,
	0, 828, 0, 0, 2448, 2449, 179, 0, 196, 669,
	0, 245, 282, 832, 0, 0, 342, 0, 395, 399,
	0, 488, 846, 0, 0, 0, 253, 844, 674, 0,
	680, 845, 686, 843, 464, 0, 676, 677, 682, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 833,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 836, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 848, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 1102, 801, 0, 0, 0,
	0, 849, 0, 0, 0, 0, 828, 0, 0, 2448,
	2449, 179, 0, 196, 669, 0, 245, 282, 497, 0,
	0, 342, 0, 395, 399, 0, 488, 0, 0, 3494,
	0, 253, 1099, 674, 0, 680, 0, 686, 1098, 464,
	0, 676, 677, 682, 184, 578, 487, 558, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 1100, 678, 675, 679, 685, 673, 683,
	670, 681, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 667, 672, 0, 688, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 0, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 666,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 668, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 671, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	255, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 0, 270, 271, 272, 273, 274,
	0, 275, 500, 501, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 684, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 0, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 530, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	687, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 0, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 1102, 801, 0, 0, 0, 0, 849, 0, 0,
	0, 3495, 0, 0, 1103, 1104, 3493, 179, 0, 196,
	669, 0, 245, 282, 497, 0, 0, 342, 0, 395,
	399, 0, 488, 0, 0, 1108, 0, 253, 1099, 674,
	0, 680, 0, 686, 1098, 464, 0, 676, 677, 682,
	184, 578, 487, 558, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 1100,
	678, 675, 679, 685, 673, 683, 670, 681, 0, 386,
	320, 0, 537, 413, 191, 237, 224, 266, 308, 420,
	0, 0, 298, 468, 233, 322, 0, 212, 355, 0,
	444, 319, 0, 427, 447, 0, 339, 218, 378, 434,
	435, 667, 672, 0, 688, 0, 222, 223, 344, 204,
	352, 549, 515, 407, 365, 363, 0, 330, 387, 544,
	0, 0, 252, 0, 247, 343, 483, 210, 462, 381,
	348, 302, 410, 439, 249, 234, 235, 278, 380, 268,
	220, 473, 512, 516, 514, 510, 507, 511, 508, 509,
	513, 269, 506, 0, 481, 490, 524, 504, 532, 489,
	529, 499, 244, 528, 493, 492, 538, 519, 520, 474,
	534, 505, 503, 496, 495, 491, 0, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 180, 0, 181,
	182, 183, 185, 186, 187, 666, 188, 189, 190, 193,
	194, 195, 197, 557, 198, 199, 200, 201, 202, 203,
	494, 668, 205, 206, 207, 208, 209, 211, 213, 214,
	215, 216, 217, 219, 221, 0, 0, 0, 671, 0,
	0, 0, 225, 226, 227, 228, 229, 230, 0, 231,
	232, 236, 238, 239, 240, 241, 242, 243, 246, 0,
	248, 250, 0, 251, 254, 0, 255, 256, 257, 258,
	259, 260, 261, 262, 498, 263, 0, 264, 265, 267,
	0, 270, 271, 272, 273, 274, 0, 275, 500, 501,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 0, 295, 296,
	297, 299, 0, 300, 301, 304, 305, 306, 307, 0,
	309, 517, 0, 310, 311, 312, 0, 0, 313, 314,
	315, 316, 317, 318, 321, 518, 323, 324, 325, 326,
	327, 328, 329, 559, 331, 332, 333, 334, 335, 336,
	337, 521, 522, 338, 340, 341, 523, 525, 526, 684,
	356, 357, 358, 359, 360, 361, 362, 364, 0, 366,
	367, 368, 527, 369, 370, 371, 372, 0, 373, 374,
	375, 376, 377, 379, 382, 383, 384, 385, 0, 388,
	389, 390, 391, 392, 393, 394, 396, 397, 398, 400,
	401, 402, 560, 403, 404, 405, 406, 530, 408, 409,
	561, 411, 412, 414, 415, 416, 417, 418, 419, 576,
	0, 421, 531, 422, 423, 424, 425, 426, 0, 428,
	429, 430, 431, 432, 433, 436, 437, 438, 440, 441,
	533, 442, 443, 0, 445, 446, 687, 448, 449, 450,
	451, 452, 0, 577, 453, 535, 454, 536, 455, 456,
	457, 458, 459, 460, 461, 463, 0, 0, 465, 466,
	467, 469, 470, 471, 472, 475, 476, 477, 478, 479,
	0, 480, 482, 484, 562, 539, 540, 541, 542, 543,
	545, 546, 547, 548, 485, 486, 502, 353, 347, 303,
	345, 346, 350, 351, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 1102, 801, 0, 0,
	0, 0, 849, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 179, 0, 196, 669, 0, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	1094, 0, 253, 1099, 674, 0, 680, 0, 686, 1098,
	464, 0, 676, 677, 682, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 1100, 678, 675, 679, 685, 673,
	683, 670, 681, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 667, 672, 0, 688,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 671, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 687, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 1102, 801, 0, 0, 0, 0, 849, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 179, 0, 196,
	669, 0, 245, 282, 497, 0, 0, 342, 0, 395,
	399, 0, 488, 0, 0, 0, 0, 253, 1099, 674,
	0, 680, 0, 686, 1098, 464, 0, 676, 677, 682,
	184, 578, 487, 558, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 1100,
	678, 675, 679, 685, 673, 683, 670, 681, 0, 386,
	320, 0, 537, 413, 191, 237, 224, 266, 308, 420,
	0, 0, 298, 468, 233, 322, 0, 212, 355, 0,
	444, 319, 0, 427, 447, 0, 339, 218, 378, 434,
	435, 667, 672, 0, 688, 0, 222, 223, 344, 204,
	352, 549, 515, 407, 365, 363, 0, 330, 387, 544,
	0, 0, 252, 0, 247, 343, 483, 210, 462, 381,
	348, 302, 410, 439, 249, 234, 235, 278, 380, 268,
	220, 473, 512, 516, 514, 510, 507, 511, 508, 509,
	513, 269, 506, 0, 481, 490, 524, 504, 532, 489,
	529, 499, 244, 528, 493, 492, 538, 519, 520, 474,
	534, 505, 503, 496, 495, 491, 0, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 180, 0, 181,
	182, 183, 185, 186, 187, 666, 188, 189, 190, 193,
	194, 195, 197, 557, 198, 199, 200, 201, 202, 203,
	494, 668, 205, 206, 207, 208, 209, 211, 213, 214,
	215, 216, 217, 219, 221, 0, 0, 0, 671, 0,
	0, 0, 225, 226, 227, 228, 229, 230, 0, 231,
	232, 236, 238, 239, 240, 241, 242, 243, 246, 0,
	248, 250, 0, 251, 254, 0, 255, 256, 257, 258,
	259, 260, 261, 262, 498, 263, 0, 264, 265, 267,
	0, 270, 271, 272, 273, 274, 0, 275, 500, 501,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 0, 295, 296,
	297, 299, 0, 300, 301, 304, 305, 306, 307, 0,
	309, 517, 0, 310, 311, 312, 0, 0, 313, 314,
	315, 316, 317, 318, 321, 518, 323, 324, 325, 326,
	327, 328, 329, 559, 331, 332, 333, 334, 335, 336,
	337, 521, 522, 338, 340, 341, 523, 525, 526, 684,
	356, 357, 358, 359, 360, 361, 362, 364, 0, 366,
	367, 368, 527, 369, 370, 371, 372, 0, 373, 374,
	375, 376, 377, 379, 382, 383, 384, 385, 0, 388,
	389, 390, 391, 392, 393, 394, 396, 397, 398, 400,
	401, 402, 560, 403, 404, 405, 406, 530, 408, 409,
	561, 411, 412, 414, 415, 416, 417, 418, 419, 576,
	0, 421, 531, 422, 423, 424, 425, 426, 0, 428,
	429, 430, 431, 432, 433, 436, 437, 438, 440, 441,
	533, 442, 443, 0, 445, 446, 687, 448, 449, 450,
	451, 452, 0, 577, 453, 535, 454, 536, 455, 456,
	457, 458, 459, 460, 461, 463, 0, 0, 465, 466,
	467, 469, 470, 471, 472, 475, 476, 477, 478, 479,
	0, 480, 482, 484, 562, 539, 540, 541, 542, 543,
	545, 546, 547, 548, 485, 486, 502, 353, 347, 303,
	345, 346, 350, 351, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 0, 841, 801, 0, 0,
	0, 0, 849, 827, 0, 0, 0, 0, 0, 0,
	1103, 1104, 179, 0, 196, 669, 0, 245, 282, 832,
	0, 0, 342, 0, 395, 399, 0, 488, 846, 0,
	0, 0, 253, 844, 674, 0, 680, 845, 686, 843,
	464, 0, 676, 677, 682, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 678, 675, 679, 685, 673,
	683, 670, 681, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 667, 672, 0, 688,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 833, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 671, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 836, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 848, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 687, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	663, 0, 841, 801, 0, 0, 0, 0, 849, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 669, 828, 245, 282, 832, 0, 0, 342, 0,
	395, 399, 0, 488, 846, 0, 0, 0, 253, 844,
	674, 0, 680, 845, 686, 843, 464, 0, 676, 677,
	682, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 3299, 0, 0, 0,
	0, 678, 675, 679, 685, 673, 683, 670, 681, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 667, 672, 0, 688, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 833, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 671,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	836, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 848, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 687, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 663, 0, 841, 801,
	0, 0, 0, 0, 849, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 669, 828, 245,
	282, 832, 0, 0, 342, 0, 395, 399, 0, 488,
	846, 0, 0, 0, 253, 844, 674, 0, 680, 845,
	686, 843, 464, 0, 676, 677, 682, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 678, 675, 679,
	685, 673, 683, 670, 681, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 667, 672,
	0, 688, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 2861, 833, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 666, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 668, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 671, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 836, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 684, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 848, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 687, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 669, 828, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 59, 488, 0, 0, 0, 0,
	253, 0, 674, 0, 680, 0, 686, 0, 464, 0,
	676, 677, 682, 184, 578, 487, 558, 0, 0, 0,
	349, 56, 0, 0, 575, 57, 0, 0, 192, 0,
	0, 0, 0, 678, 675, 679, 685, 673, 683, 670,
	681, 0, 386, 320, 2108, 1608, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 667, 672, 0, 688, 0, 222,
	223, 344, 204, 352, 2116, 2117, 2115, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 666, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 668, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 671, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 684, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 687,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 663, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 669,
	2110, 245, 282, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 674, 0,
	680, 0, 686, 0, 464, 0, 676, 677, 682, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	575, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	2108, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	2116, 2117, 2115, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 669, 2110, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 674, 0, 680, 0, 686, 0,
	464, 0, 676, 677, 682, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 678, 675, 679, 685, 673,
	683, 670, 681, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 667, 672, 0, 688,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 671, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 687, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 669, 2990, 245, 282, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	674, 0, 680, 0, 686, 0, 464, 0, 676, 677,
	682, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 678, 675, 679, 685, 673, 683, 670, 681, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 667, 672, 0, 688, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 671,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 687, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 669, 3635, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 674, 0, 680, 0,
	686, 0, 464, 0, 676, 677, 682, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 678, 675, 679,
	685, 673, 683, 670, 681, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 667, 672,
	0, 688, 0, 222, 223, 344, 204, 352, 2116, 2117,
	2115, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 666, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 668, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 671, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 684, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 687, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 615,
	0, 0, 0, 0, 0, 0, 626, 627, 628, 0,
	179, 0, 196, 0, 55, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 624, 625, 0, 0, 0,
	0, 0, 166, 617, 618, 619, 620, 621, 622, 615,
	0, 0, 0, 0, 0, 0, 626, 627, 628, 0,
	179, 0, 196, 0, 0, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	3418, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 624, 625, 0, 0, 0,
	0, 0, 166, 617, 618, 619, 620, 621, 622, 615,
	0, 0, 0, 0, 0, 0, 626, 627, 628, 0,
	179, 0, 196, 0, 0, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	2402, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 2403, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 623, 624, 625, 0, 0, 0,
	0, 0, 0, 617, 618, 619, 620, 621, 622, 179,
	0, 196, 0, 0, 245, 282, 497, 0, 0, 342,
	0, 395, 399, 0, 488, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 184, 578, 487, 558, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 320, 0, 537, 413, 191, 237, 224, 266,
	308, 420, 0, 0, 298, 468, 233, 322, 0, 212,
	355, 0, 444, 319, 0, 427, 447, 0, 339, 218,
	378, 434, 435, 0, 0, 0, 0, 0, 222, 223,
	344, 204, 352, 549, 515, 407, 365, 363, 0, 330,
	387, 544, 0, 0, 252, 0, 247, 343, 483, 210,
	462, 381, 348, 302, 410, 439, 249, 234, 235, 278,
	380, 268, 220, 473, 512, 516, 514, 510, 507, 511,
	508, 509, 513, 269, 506, 0, 481, 490, 524, 504,
	532, 489, 529, 499, 244, 528, 493, 492, 538, 519,
	520, 474, 534, 505, 503, 496, 495, 491, 0, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 180,
	0, 181, 182, 183, 185, 186, 187, 0, 188, 189,
	190, 193, 194, 195, 197, 557, 198, 199, 200, 201,
	202, 203, 494, 0, 205, 206, 207, 208, 209, 211,
	213, 214, 215, 216, 217, 219, 221, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 230,
	0, 231, 232, 236, 238, 239, 240, 241, 242, 243,
	246, 0, 248, 250, 0, 251, 254, 0, 255, 256,
	257, 258, 259, 260, 261, 262, 498, 263, 0, 264,
	265, 267, 0, 270, 271, 272, 273, 274, 0, 275,
	500, 501, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 0,
	295, 296, 297, 299, 0, 300, 301, 304, 305, 306,
	307, 0, 309, 517, 0, 310, 311, 312, 0, 0,
	313, 314, 315, 316, 317, 318, 321, 518, 323, 324,
	325, 326, 327, 328, 329, 559, 331, 332, 333, 334,
	335, 336, 337, 521, 522, 338, 340, 341, 523, 525,
	526, 0, 356, 357, 358, 359, 360, 361, 362, 364,
	0, 366, 367, 368, 527, 369, 370, 371, 372, 0,
	373, 374, 375, 376, 377, 379, 382, 383, 384, 385,
	0, 388, 389, 390, 391, 392, 393, 394, 396, 397,
	398, 400, 401, 402, 560, 403, 404, 405, 406, 530,
	408, 409, 561, 411, 412, 414, 415, 416, 417, 418,
	419, 576, 0, 421, 531, 422, 423, 424, 425, 426,
	0, 428, 429, 430, 431, 432, 433, 436, 437, 438,
	440, 441, 533, 442, 443, 0, 445, 446, 0, 448,
	449, 450, 451, 452, 0, 577, 453, 535, 454, 536,
	455, 456, 457, 458, 459, 460, 461, 463, 0, 0,
	465, 466, 467, 469, 470, 471, 472, 475, 476, 477,
	478, 479, 0, 480, 482, 484, 562, 539, 540, 541,
	542, 543, 545, 546, 547, 548, 485, 486, 502, 353,
	347, 303, 345, 346, 350, 351, 354, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 196, 0, 0,
	245, 282, 497, 0, 3724, 342, 0, 395, 399, 0,
	488, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 184, 578,
	487, 558, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 320, 0,
	537, 413, 191, 237, 224, 266, 308, 420, 0, 0,
	298, 468, 233, 322, 0, 212, 355, 0, 444, 319,
	0, 427, 447, 0, 339, 218, 378, 434, 435, 0,
	0, 0, 0, 0, 222, 223, 344, 204, 352, 549,
	515, 407, 365, 363, 0, 330, 387, 544, 0, 0,
	252, 0, 247, 343, 483, 210, 462, 381, 348, 302,
	410, 439, 249, 234, 235, 278, 380, 268, 220, 473,
	512, 516, 514, 510, 507, 511, 508, 509, 513, 269,
	506, 0, 481, 490, 524, 504, 532, 489, 529, 499,
	244, 528, 493, 492, 538, 519, 520, 474, 534, 505,
	503, 496, 495, 491, 0, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 180, 0, 181, 182, 183,
	185, 186, 187, 0, 188, 189, 190, 193, 194, 195,
	197, 557, 198, 199, 200, 201, 202, 203, 494, 0,
	205, 206, 207, 208, 209, 211, 213, 214, 215, 216,
	217, 219, 221, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 230, 0, 231, 232, 236,
	238, 239, 240, 241, 242, 243, 246, 0, 248, 250,
	0, 251, 254, 0, 255, 256, 257, 258, 259, 260,
	261, 262, 498, 263, 0, 264, 265, 267, 0, 270,
	271, 272, 273, 274, 0, 275, 500, 501, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 0, 295, 296, 297, 299,
	0, 300, 301, 304, 305, 306, 307, 0, 309, 517,
	0, 310, 311, 312, 0, 0, 313, 314, 315, 316,
	317, 318, 321, 518, 323, 324, 325, 326, 327, 328,
	329, 559, 331, 332, 333, 334, 335, 336, 337, 521,
	522, 338, 340, 341, 523, 525, 526, 0, 356, 357,
	358, 359, 360, 361, 362, 364, 0, 366, 367, 368,
	527, 369, 370, 371, 372, 0, 373, 374, 375, 376,
	377, 379, 382, 383, 384, 385, 0, 388, 389, 390,
	391, 392, 393, 394, 396, 397, 398, 400, 401, 402,
	560, 403, 404, 405, 406, 530, 408, 409, 561, 411,
	412, 414, 415, 416, 417, 418, 419, 576, 0, 421,
	531, 422, 423, 424, 425, 426, 0, 428, 429, 430,
	431, 432, 433, 436, 437, 438, 440, 441, 533, 442,
	443, 0, 445, 446, 0, 448, 449, 450, 451, 452,
	0, 577, 453, 535, 454, 536, 455, 456, 457, 458,
	459, 460, 461, 463, 0, 0, 465, 466, 467, 469,
	470, 471, 472, 475, 476, 477, 478, 479, 0, 480,
	482, 484, 562, 539, 540, 541, 542, 543, 545, 546,
	547, 548, 485, 486, 502, 353, 347, 303, 345, 346,
	350, 351, 354, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 196, 0, 0, 245, 282, 497, 0,
	3622, 342, 0, 395, 399, 0, 488, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 184, 578, 487, 558, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 0, 0, 0, 0, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 0, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 0,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 0, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	255, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 0, 270, 271, 272, 273, 274,
	0, 275, 500, 501, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 0, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 0, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 530, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	0, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 0, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 196,
	0, 0, 245, 282, 497, 0, 3619, 342, 0, 395,
	399, 59, 488, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	184, 578, 487, 558, 0, 0, 0, 349, 56, 0,
	0, 0, 57, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	320, 0, 1608, 413, 191, 237, 224, 266, 308, 420,
	0, 0, 298, 468, 233, 322, 0, 212, 355, 0,
	444, 319, 0, 427, 447, 0, 339, 218, 378, 434,
	435, 0, 0, 0, 0, 0, 222, 223, 344, 204,
	352, 549, 515, 407, 365, 363, 0, 330, 387, 544,
	0, 0, 252, 0, 247, 343, 483, 210, 462, 381,
	348, 302, 410, 439, 249, 234, 235, 278, 380, 268,
	220, 473, 512, 516, 514, 510, 507, 511, 508, 509,
	513, 269, 506, 0, 481, 490, 524, 504, 532, 489,
	529, 499, 244, 528, 493, 492, 538, 519, 520, 474,
	534, 505, 503, 496, 495, 491, 0, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 180, 0, 181,
	182, 183, 185, 186, 187, 0, 188, 189, 190, 193,
	194, 195, 197, 557, 198, 199, 200, 201, 202, 203,
	494, 0, 205, 206, 207, 208, 209, 211, 213, 214,
	215, 216, 217, 219, 221, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 230, 0, 231,
	232, 236, 238, 239, 240, 241, 242, 243, 246, 0,
	248, 250, 0, 251, 254, 0, 255, 256, 257, 258,
	259, 260, 261, 262, 498, 263, 0, 264, 265, 267,
	0, 270, 271, 272, 273, 274, 0, 275, 500, 501,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 0, 295, 296,
	297, 299, 0, 300, 301, 304, 305, 306, 307, 0,
	309, 517, 0, 310, 311, 312, 0, 0, 313, 314,
	315, 316, 317, 318, 321, 518, 323, 324, 325, 326,
	327, 328, 329, 559, 331, 332, 333, 334, 335, 336,
	337, 521, 522, 338, 340, 341, 523, 525, 526, 0,
	356, 357, 358, 359, 360, 361, 362, 364, 0, 366,
	367, 368, 527, 369, 370, 371, 372, 0, 373, 374,
	375, 376, 377, 379, 382, 383, 384, 385, 0, 388,
	389, 390, 391, 392, 393, 394, 396, 397, 398, 400,
	401, 402, 560, 403, 404, 405, 406, 530, 408, 409,
	561, 411, 412, 414, 415, 416, 417, 418, 419, 576,
	0, 421, 531, 422, 423, 424, 425, 426, 0, 428,
	429, 430, 431, 432, 433, 436, 437, 438, 440, 441,
	533, 442, 443, 0, 445, 446, 0, 448, 449, 450,
	451, 452, 0, 577, 453, 535, 454, 536, 455, 456,
	457, 458, 459, 460, 461, 463, 0, 0, 465, 466,
	467, 469, 470, 471, 472, 475, 476, 477, 478, 479,
	0, 480, 482, 484, 562, 539, 540, 541, 542, 543,
	545, 546, 547, 548, 485, 486, 502, 353, 347, 303,
	345, 346, 350, 351, 354, 701, 0, 0, 801, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 196, 669, 55, 245, 282,
	497, 0, 0, 342, 0, 395, 399, 0, 488, 0,
	0, 0, 0, 253, 1099, 674, 0, 680, 0, 686,
	1098, 464, 0, 676, 677, 682, 184, 578, 487, 558,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 1100, 678, 675, 679, 685,
	673, 683, 670, 681, 0, 386, 320, 0, 537, 413,
	191, 237, 224, 266, 308, 420, 0, 0, 298, 468,
	233, 322, 0, 212, 355, 0, 444, 319, 0, 427,
	447, 0, 339, 218, 378, 434, 435, 667, 672, 0,
	688, 0, 222, 223, 344, 204, 352, 549, 515, 407,
	365, 363, 0, 330, 387, 544, 0, 0, 252, 0,
	247, 343, 483, 210, 462, 381, 348, 302, 410, 439,
	249, 234, 235, 278, 380, 268, 220, 473, 512, 516,
	514, 510, 507, 511, 508, 509, 513, 269, 506, 0,
	481, 490, 524, 504, 532, 489, 529, 499, 244, 528,
	493, 492, 538, 519, 520, 474, 534, 505, 503, 496,
	495, 491, 0, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 180, 0, 181, 182, 183, 185, 186,
	187, 666, 188, 189, 190, 193, 194, 195, 197, 557,
	198, 199, 200, 201, 202, 203, 494, 668, 205, 206,
	207, 208, 209, 211, 213, 214, 215, 216, 217, 219,
	221, 0, 0, 0, 671, 0, 0, 0, 225, 226,
	227, 228, 229, 230, 0, 231, 232, 236, 238, 239,
	240, 241, 242, 243, 246, 0, 248, 250, 0, 251,
	254, 0, 255, 256, 257, 258, 259, 260, 261, 262,
	498, 263, 0, 264, 265, 267, 0, 270, 271, 272,
	273, 274, 0, 275, 500, 501, 276, 277, 279, 280,
	281, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 0, 295, 296, 297, 299, 0, 300,
	301, 304, 305, 306, 307, 0, 309, 517, 0, 310,
	311, 312, 0, 0, 313, 314, 315, 316, 317, 318,
	321, 518, 323, 324, 325, 326, 327, 328, 329, 559,
	331, 332, 333, 334, 335, 336, 337, 521, 522, 338,
	340, 341, 523, 525, 526, 684, 356, 357, 358, 359,
	360, 361, 362, 364, 0, 366, 367, 368, 527, 369,
	370, 371, 372, 0, 373, 374, 375, 376, 377, 379,
	382, 383, 384, 385, 0, 388, 389, 390, 391, 392,
	393, 394, 396, 397, 398, 400, 401, 402, 560, 403,
	404, 405, 406, 530, 408, 409, 561, 411, 412, 414,
	415, 416, 417, 418, 419, 576, 0, 421, 531, 422,
	423, 424, 425, 426, 0, 428, 429, 430, 431, 432,
	433, 436, 437, 438, 440, 441, 533, 442, 443, 0,
	445, 446, 687, 448, 449, 450, 451, 452, 0, 577,
	453, 535, 454, 536, 455, 456, 457, 458, 459, 460,
	461, 463, 0, 0, 465, 466, 467, 469, 470, 471,
	472, 475, 476, 477, 478, 479, 0, 480, 482, 484,
	562, 539, 540, 541, 542, 543, 545, 546, 547, 548,
	485, 486, 502, 353, 347, 303, 345, 346, 350, 351,
	354, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 196, 669, 0, 245, 282, 497, 0, 0, 342,
	0, 395, 399, 0, 488, 0, 0, 0, 0, 253,
	0, 674, 0, 680, 0, 686, 0, 464, 0, 676,
	677, 682, 184, 578, 487, 558, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 678, 675, 679, 685, 673, 683, 670, 681,
	0, 386, 320, 0, 537, 413, 191, 237, 224, 266,
	308, 420, 0, 0, 298, 468, 233, 322, 0, 212,
	355, 1814, 444, 319, 0, 427, 447, 0, 339, 218,
	378, 434, 435, 667, 672, 0, 688, 0, 222, 223,
	344, 204, 352, 549, 515, 407, 365, 363, 0, 330,
	387, 544, 0, 0, 252, 0, 247, 343, 483, 210,
	462, 381, 348, 302, 410, 439, 249, 234, 235, 278,
	380, 268, 220, 473, 512, 516, 514, 510, 507, 511,
	508, 509, 513, 269, 506, 0, 481, 490, 524, 504,
	532, 489, 529, 499, 244, 528, 493, 492, 538, 519,
	520, 474, 534, 505, 503, 496, 495, 491, 0, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 180,
	0, 181, 182, 183, 185, 186, 187, 666, 188, 189,
	190, 193, 194, 195, 197, 557, 198, 199, 200, 201,
	202, 203, 494, 668, 205, 206, 207, 208, 209, 211,
	213, 214, 215, 216, 217, 219, 221, 0, 0, 698,
	671, 0, 0, 699, 225, 226, 227, 228, 229, 230,
	0, 231, 232, 236, 238, 239, 240, 241, 242, 243,
	246, 0, 248, 250, 0, 251, 254, 0, 255, 256,
	257, 258, 259, 260, 261, 262, 498, 263, 0, 264,
	265, 267, 0, 270, 271, 272, 273, 274, 0, 275,
	500, 501, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 0,
	295, 296, 297, 299, 0, 300, 301, 304, 305, 306,
	307, 0, 309, 517, 0, 310, 311, 312, 0, 0,
	313, 314, 315, 316, 317, 318, 321, 518, 323, 324,
	325, 326, 327, 328, 329, 559, 331, 332, 333, 334,
	335, 336, 337, 521, 522, 338, 340, 341, 523, 525,
	526, 684, 356, 357, 358, 359, 360, 361, 362, 364,
	0, 366, 367, 368, 527, 369, 370, 371, 372, 0,
	373, 374, 375, 376, 377, 379, 382, 383, 384, 385,
	0, 388, 389, 390, 391, 392, 393, 394, 396, 397,
	398, 400, 401, 402, 560, 403, 404, 405, 406, 530,
	408, 409, 561, 411, 412, 414, 415, 416, 417, 418,
	419, 576, 700, 421, 531, 422, 423, 424, 425, 426,
	0, 428, 429, 430, 431, 432, 433, 436, 437, 438,
	440, 441, 533, 442, 443, 0, 445, 446, 687, 448,
	449, 450, 451, 452, 0, 577, 453, 535, 454, 536,
	455, 456, 457, 458, 459, 460, 461, 463, 0, 0,
	465, 466, 467, 469, 470, 471, 472, 475, 476, 477,
	478, 479, 0, 480, 482, 484, 562, 539, 540, 541,
	542, 543, 545, 546, 547, 548, 485, 486, 502, 353,
	347, 303, 345, 346, 350, 351, 354, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 196, 669, 0,
	245, 282, 497, 0, 0, 342, 0, 395, 399, 0,
	488, 0, 0, 0, 0, 253, 0, 674, 0, 680,
	0, 686, 0, 464, 0, 676, 677, 682, 184, 578,
	487, 558, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 678, 675,
	679, 685, 673, 683, 670, 681, 0, 386, 320, 0,
	537, 413, 191, 237, 224, 266, 308, 420, 0, 0,
	298, 468, 233, 322, 0, 212, 355, 0, 444, 319,
	0, 427, 447, 0, 339, 218, 378, 434, 435, 667,
	672, 0, 688, 0, 222, 223, 344, 204, 352, 549,
	515, 407, 365, 363, 0, 330, 387, 544, 0, 0,
	252, 0, 247, 343, 483, 210, 462, 381, 348, 302,
	410, 439, 249, 234, 235, 278, 380, 268, 220, 473,
	512, 516, 514, 510, 507, 511, 508, 509, 513, 269,
	506, 0, 481, 490, 524, 504, 532, 489, 529, 499,
	244, 528, 493, 492, 538, 519, 520, 474, 534, 505,
	503, 496, 495, 491, 0, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 180, 0, 181, 182, 183,
	185, 186, 187, 666, 188, 189, 190, 193, 194, 195,
	197, 557, 198, 199, 200, 201, 202, 203, 494, 668,
	205, 206, 207, 208, 209, 211, 213, 214, 215, 216,
	217, 219, 221, 0, 0, 698, 671, 0, 0, 699,
	225, 226, 227, 228, 229, 230, 0, 231, 232, 236,
	238, 239, 240, 241, 242, 243, 246, 0, 248, 250,
	0, 251, 254, 0, 255, 256, 257, 258, 259, 260,
	261, 262, 498, 263, 0, 264, 265, 267, 0, 270,
	271, 272, 273, 274, 0, 275, 500, 501, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 0, 295, 296, 297, 299,
	0, 300, 301, 304, 305, 306, 307, 0, 309, 517,
	0, 310, 311, 312, 0, 0, 313, 314, 315, 316,
	317, 318, 321, 518, 323, 324, 325, 326, 327, 328,
	329, 559, 331, 332, 333, 334, 335, 336, 337, 521,
	522, 338, 340, 341, 523, 525, 526, 684, 356, 357,
	358, 359, 360, 361, 362, 364, 0, 366, 367, 368,
	527, 369, 370, 371, 372, 0, 373, 374, 375, 376,
	377, 379, 382, 383, 384, 385, 0, 388, 389, 390,
	391, 392, 393, 394, 396, 397, 398, 400, 401, 402,
	560, 403, 404, 405, 406, 530, 408, 409, 561, 411,
	412, 414, 415, 416, 417, 418, 419, 576, 700, 421,
	531, 422, 423, 424, 425, 426, 0, 428, 429, 430,
	431, 432, 433, 436, 437, 438, 440, 441, 533, 442,
	443, 0, 445, 446, 687, 448, 449, 450, 451, 452,
	0, 577, 453, 535, 454, 536, 455, 456, 457, 458,
	459, 460, 461, 463, 0, 0, 465, 466, 467, 469,
	470, 471, 472, 475, 476, 477, 478, 479, 0, 480,
	482, 484, 562, 539, 540, 541, 542, 543, 545, 546,
	547, 548, 485, 486, 502, 353, 347, 303, 345, 346,
	350, 351, 354, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 2505, 196, 0, 0, 245, 282, 497, 0,
	0, 342, 0, 395, 399, 0, 488, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 184, 578, 487, 558, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 0, 0, 0, 0, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 0, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 0,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 0, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	255, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 0, 270, 271, 272, 273, 274,
	0, 275, 500, 501, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 0, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 0, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 530, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	0, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 0, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 669, 814, 245, 282, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	674, 0, 680, 0, 686, 0, 464, 0, 676, 677,
	682, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 678, 675, 679, 685, 673, 683, 670, 681, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 667, 672, 0, 688, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 698, 671,
	0, 0, 699, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 721, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 700, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 687, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 701, 0, 0, 801,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 669, 0, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 1084, 0, 253, 0, 674, 0, 680, 0,
	686, 0, 464, 0, 676, 677, 682, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 678, 675, 679,
	685, 673, 683, 670, 681, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 667, 672,
	0, 688, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 666, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 668, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 671, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 684, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 687, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 701, 0,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 669,
	1740, 245, 282, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 674, 0,
	680, 0, 686, 0, 464, 0, 676, 677, 682, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 669, 859, 245, 282, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	674, 0, 680, 0, 686, 0, 464, 0, 676, 677,
	682, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 678, 675, 679, 685, 673, 683, 670, 681, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 667, 672, 0, 688, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 671,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 687, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 669, 0, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 674, 0, 680, 0,
	686, 0, 464, 0, 676, 677, 682, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 678, 675, 679,
	685, 673, 683, 670, 681, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 667, 672,
	0, 688, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 666, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 668, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 671, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 684, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 687, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 2199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 669, 0, 245, 282, 0, 0, 0,
	342, 0, 395, 399, 0, 0, 0, 0, 0, 0,
	253, 0, 674, 2174, 680, 0, 686, 0, 464, 0,
	676, 677, 682, 184, 761, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 678, 675, 679, 685, 673, 683, 670,
	681, 0, 386, 320, 0, 0, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 667, 672, 0, 688, 0, 222,
	223, 344, 204, 352, 0, 0, 407, 365, 363, 0,
	330, 387, 0, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 481, 764, 754,
	746, 747, 748, 749, 750, 751, 0, 766, 767, 768,
	769, 770, 474, 760, 0, 745, 752, 753, 755, 2177,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 666, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 0, 668, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 671, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 0, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 0, 0, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 0, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 0, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 0, 0, 338, 340, 341, 0,
	2175, 0, 684, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 0, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	0, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 2180, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 0, 442, 443, 0, 445, 446, 687,
	448, 449, 450, 451, 452, 0, 577, 453, 0, 454,
	0, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 485, 486, 2176,
	353, 347, 303, 345, 346, 350, 351, 354, 2194, 179,
	0, 196, 0, 0, 245, 1828, 497, 0, 0, 342,
	0, 395, 399, 0, 488, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 0, 2192, 0, 464, 0, 0,
	0, 0, 184, 578, 487, 558, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 320, 0, 537, 413, 191, 237, 224, 266,
	308, 420, 0, 0, 298, 468, 233, 322, 0, 212,
	355, 0, 444, 319, 0, 427, 447, 0, 339, 218,
	378, 434, 435, 0, 0, 1832, 0, 0, 222, 223,
	344, 204, 352, 549, 515, 407, 365, 363, 0, 330,
	387, 544, 0, 0, 252, 0, 247, 343, 483, 210,
	462, 381, 348, 302, 410, 439, 249, 234, 235, 278,
	380, 268, 220, 473, 512, 516, 514, 510, 507, 511,
	508, 509, 513, 269, 506, 0, 481, 490, 524, 504,
	532, 489, 529, 499, 244, 528, 493, 492, 538, 519,
	520, 474, 534, 505, 503, 496, 495, 491, 0, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 180,
	0, 181, 182, 183, 185, 186, 187, 0, 188, 189,
	190, 193, 194, 195, 197, 557, 198, 199, 200, 201,
	202, 203, 494, 0, 205, 206, 207, 208, 209, 211,
	213, 214, 215, 216, 217, 219, 221, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 230,
	0, 231, 232, 236, 238, 239, 240, 241, 242, 243,
	246, 0, 248, 250, 0, 251, 254, 0, 1838, 256,
	257, 258, 259, 260, 261, 262, 498, 263, 0, 264,
	265, 267, 1837, 270, 271, 272, 273, 274, 0, 275,
	500, 501, 276, 277, 279, 280, 281, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 0,
	295, 296, 297, 299, 0, 300, 301, 304, 305, 306,
	307, 0, 309, 517, 0, 310, 311, 312, 0, 0,
	313, 314, 315, 316, 317, 318, 321, 518, 323, 324,
	325, 326, 327, 328, 329, 559, 331, 332, 333, 334,
	335, 336, 337, 521, 522, 338, 340, 341, 523, 525,
	526, 0, 356, 357, 358, 359, 360, 361, 362, 364,
	0, 366, 367, 368, 527, 369, 370, 371, 372, 1836,
	373, 374, 375, 376, 377, 379, 382, 383, 384, 385,
	0, 388, 389, 390, 391, 392, 393, 394, 396, 397,
	398, 400, 401, 402, 560, 403, 404, 405, 406, 530,
	408, 409, 561, 411, 412, 414, 415, 416, 417, 418,
	419, 576, 0, 421, 531, 422, 423, 424, 425, 426,
	0, 428, 429, 430, 431, 432, 433, 436, 437, 438,
	440, 441, 533, 442, 443, 0, 445, 446, 0, 448,
	449, 450, 451, 452, 0, 577, 453, 535, 454, 536,
	455, 456, 457, 458, 459, 460, 461, 463, 0, 1835,
	465, 466, 467, 469, 470, 471, 472, 475, 476, 477,
	478, 479, 0, 480, 482, 484, 562, 539, 540, 541,
	542, 543, 545, 546, 547, 548, 485, 486, 502, 353,
	347, 303, 345, 346, 350, 351, 354, 166, 0, 0,
	0, 1834, 1829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 196, 0, 0,
	245, 282, 497, 0, 0, 342, 0, 395, 399, 0,
	488, 0, 0, 0, 0, 253, 0, 0, 0, 2132,
	0, 0, 0, 464, 0, 0, 0, 0, 184, 578,
	487, 558, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 320, 0,
	537, 413, 191, 237, 224, 266, 308, 420, 0, 0,
	298, 468, 233, 322, 0, 212, 355, 0, 444, 319,
	0, 427, 447, 0, 339, 218, 378, 434, 435, 0,
	0, 1832, 0, 0, 222, 223, 344, 204, 352, 549,
	515, 407, 365, 363, 0, 330, 387, 544, 0, 0,
	252, 0, 247, 343, 483, 210, 462, 381, 348, 302,
	410, 439, 249, 234, 235, 278, 380, 268, 220, 473,
	512, 516, 514, 510, 507, 511, 508, 509, 513, 269,
	506, 0, 481, 490, 524, 504, 532, 489, 529, 499,
	244, 528, 493, 492, 538, 519, 520, 474, 534, 505,
	503, 496, 495, 491, 0, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 180, 0, 181, 182, 183,
	185, 186, 187, 0, 188, 189, 190, 193, 194, 195,
	197, 557, 198, 199, 200, 201, 202, 203, 494, 0,
	205, 206, 207, 208, 209, 211, 213, 214, 215, 216,
	217, 219, 221, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 230, 0, 231, 232, 236,
	238, 239, 240, 241, 242, 243, 246, 0, 248, 250,
	0, 251, 254, 0, 1838, 256, 257, 258, 259, 260,
	261, 262, 498, 263, 0, 264, 265, 267, 1837, 270,
	271, 272, 273, 274, 0, 275, 500, 501, 276, 277,
	279, 280, 281, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 0, 295, 296, 297, 299,
	0, 300, 301, 304, 305, 306, 307, 0, 309, 517,
	0, 310, 311, 312, 0, 0, 313, 314, 315, 316,
	317, 318, 321, 518, 323, 324, 325, 326, 327, 328,
	329, 559, 331, 332, 333, 334, 335, 336, 337, 521,
	522, 338, 340, 341, 523, 525, 526, 0, 356, 357,
	358, 359, 360, 361, 362, 364, 0, 366, 367, 368,
	527, 369, 370, 371, 372, 1836, 373, 374, 375, 376,
	377, 379, 382, 383, 384, 385, 0, 388, 389, 390,
	391, 392, 393, 394, 396, 397, 398, 400, 401, 402,
	560, 403, 404, 405, 406, 530, 408, 409, 561, 411,
	412, 414, 415, 416, 417, 418, 419, 576, 0, 421,
	531, 422, 423, 424, 425, 426, 0, 428, 429, 430,
	431, 432, 433, 436, 437, 438, 440, 441, 533, 442,
	443, 0, 445, 446, 0, 448, 449, 450, 451, 452,
	0, 577, 453, 535, 454, 536, 455, 456, 457, 458,
	459, 460, 461, 463, 0, 1835, 465, 466, 467, 469,
	470, 471, 472, 475, 476, 477, 478, 479, 0, 480,
	482, 484, 562, 539, 540, 541, 542, 543, 545, 546,
	547, 548, 485, 486, 502, 353, 347, 303, 345, 346,
	350, 351, 354, 166, 0, 0, 0, 1834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 196, 0, 0, 245, 282, 497, 0,
	0, 342, 0, 395, 399, 0, 488, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 184, 578, 487, 558, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 320, 0, 537, 413, 191, 237,
	224, 266, 308, 420, 0, 0, 298, 468, 233, 322,
	0, 212, 355, 0, 444, 319, 0, 427, 447, 0,
	339, 218, 378, 434, 435, 0, 0, 1832, 0, 0,
	222, 223, 344, 204, 352, 549, 515, 407, 365, 363,
	0, 330, 387, 544, 0, 0, 252, 0, 247, 343,
	483, 210, 462, 381, 348, 302, 410, 439, 249, 234,
	235, 278, 380, 268, 220, 473, 512, 516, 514, 510,
	507, 511, 508, 509, 513, 269, 506, 0, 481, 490,
	524, 504, 532, 489, 529, 499, 244, 528, 493, 492,
	538, 519, 520, 474, 534, 505, 503, 496, 495, 491,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 180, 0, 181, 182, 183, 185, 186, 187, 0,
	188, 189, 190, 193, 194, 195, 197, 557, 198, 199,
	200, 201, 202, 203, 494, 0, 205, 206, 207, 208,
	209, 211, 213, 214, 215, 216, 217, 219, 221, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 230, 0, 231, 232, 236, 238, 239, 240, 241,
	242, 243, 246, 0, 248, 250, 0, 251, 254, 0,
	1838, 256, 257, 258, 259, 260, 261, 262, 498, 263,
	0, 264, 265, 267, 1837, 270, 271, 272, 273, 274,
	0, 275, 500, 501, 276, 277, 279, 280, 281, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 0, 295, 296, 297, 299, 0, 300, 301, 304,
	305, 306, 307, 0, 309, 517, 0, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 318, 321, 518,
	323, 324, 325, 326, 327, 328, 329, 559, 331, 332,
	333, 334, 335, 336, 337, 521, 522, 338, 340, 341,
	523, 525, 526, 0, 356, 357, 358, 359, 360, 361,
	362, 364, 0, 366, 367, 368, 527, 369, 370, 371,
	372, 1836, 373, 374, 375, 376, 377, 379, 382, 383,
	384, 385, 0, 388, 389, 390, 391, 392, 393, 394,
	396, 397, 398, 400, 401, 402, 560, 403, 404, 405,
	406, 530, 408, 409, 561, 411, 412, 414, 415, 416,
	417, 418, 419, 576, 0, 421, 531, 422, 423, 424,
	425, 426, 0, 428, 429, 430, 431, 432, 433, 436,
	437, 438, 440, 441, 533, 442, 443, 0, 445, 446,
	0, 448, 449, 450, 451, 452, 0, 577, 453, 535,
	454, 536, 455, 456, 457, 458, 459, 460, 461, 463,
	0, 1835, 465, 466, 467, 469, 470, 471, 472, 475,
	476, 477, 478, 479, 0, 480, 482, 484, 562, 539,
	540, 541, 542, 543, 545, 546, 547, 548, 485, 486,
	502, 353, 347, 303, 345, 346, 350, 351, 354, 762,
	0, 0, 0, 1834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 196,
	669, 0, 245, 282, 0, 0, 0, 342, 0, 395,
	399, 0, 0, 0, 0, 0, 0, 253, 0, 674,
	2174, 680, 0, 686, 0, 464, 0, 676, 677, 682,
	184, 761, 487, 558, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	678, 675, 679, 685, 673, 683, 670, 681, 0, 386,
	320, 0, 0, 413, 191, 237, 224, 266, 308, 420,
	0, 0, 298, 468, 233, 322, 0, 212, 355, 0,
	444, 319, 0, 427, 447, 0, 339, 218, 378, 434,
	435, 667, 672, 0, 688, 0, 222, 223, 344, 204,
	352, 0, 0, 407, 365, 363, 0, 330, 387, 0,
	0, 0, 252, 0, 247, 343, 483, 210, 462, 381,
	348, 302, 410, 439, 249, 234, 235, 278, 380, 268,
	220, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 481, 764, 754, 746, 747, 748,
	749, 750, 751, 0, 766, 767, 768, 769, 770, 474,
	760, 0, 745, 752, 753, 755, 2177, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 180, 0, 181,
	182, 183, 185, 186, 187, 666, 188, 189, 190, 193,
	194, 195, 197, 557, 198, 199, 200, 201, 202, 203,
	0, 668, 205, 206, 207, 208, 209, 211, 213, 214,
	215, 216, 217, 219, 221, 0, 0, 0, 671, 0,
	0, 0, 225, 226, 227, 228, 229, 230, 0, 231,
	232, 236, 238, 239, 240, 241, 242, 243, 246, 0,
	248, 250, 0, 251, 254, 0, 255, 256, 257, 258,
	259, 260, 261, 262, 0, 263, 0, 264, 265, 267,
	0, 270, 271, 272, 273, 274, 0, 275, 0, 0,
	276, 277, 279, 280, 281, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 0, 295, 296,
	297, 299, 0, 300, 301, 304, 305, 306, 307, 0,
	309, 0, 0, 310, 311, 312, 0, 0, 313, 314,
	315, 316, 317, 318, 321, 0, 323, 324, 325, 326,
	327, 328, 329, 559, 331, 332, 333, 334, 335, 336,
	337, 0, 0, 338, 340, 341, 0, 2175, 0, 684,
	356, 357, 358, 359, 360, 361, 362, 364, 0, 366,
	367, 368, 0, 369, 370, 371, 372, 0, 373, 374,
	375, 376, 377, 379, 382, 383, 384, 385, 0, 388,
	389, 390, 391, 392, 393, 394, 396, 397, 398, 400,
	401, 402, 560, 403, 404, 405, 406, 0, 408, 409,
	561, 411, 412, 414, 415, 416, 417, 418, 419, 576,
	0, 421, 2180, 422, 423, 424, 425, 426, 0, 428,
	429, 430, 431, 432, 433, 436, 437, 438, 440, 441,
	0, 442, 443, 0, 445, 446, 687, 448, 449, 450,
	451, 452, 0, 577, 453, 0, 454, 0, 455, 456,
	457, 458, 459, 460, 461, 463, 0, 0, 465, 466,
	467, 469, 470, 471, 472, 475, 476, 477, 478, 479,
	0, 480, 482, 484, 562, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 485, 486, 2176, 353, 347, 303,
	345, 346, 350, 351, 354, 2292, 179, 0, 196, 0,
	0, 245, 282, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 2168, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 2293, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2283, 179, 0, 196, 0, 0, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 2284, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 648, 179, 0,
	196, 0, 0, 245, 647, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 575, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 575, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 3206, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 2505, 196, 0,
	0, 245, 282, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	2972, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 0, 0, 245, 282, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 2702, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 982, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 575, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 179, 0, 196, 0,
	0, 245, 979, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 159, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	787, 188, 189, 190, 193, 194, 195, 197, 160, 198,
	786, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 162, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 163, 403, 404,
	405, 406, 530, 408, 409, 161, 411, 412, 414, 415,
	416, 417, 418, 419, 784, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 155, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 164,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 179, 0,
	196, 0, 0, 245, 650, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 556, 179, 0, 196, 0, 0, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 552, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 554, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	553, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	3832, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 0,
	0, 245, 282, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 282, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 159, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 160, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 162, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 163, 403, 404,
	405, 406, 530, 408, 409, 161, 411, 412, 414, 415,
	416, 417, 418, 419, 2569, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 2570, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 164,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 0, 0, 245, 2353, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	2271, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 2269, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 0,
	0, 245, 2254, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 1817, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 0, 0, 245, 1763, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	1072, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 917, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 0,
	0, 245, 882, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 878, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 871,
	196, 0, 0, 245, 282, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	0, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	282, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 159, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	160, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	162, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 163,
	403, 404, 405, 406, 530, 408, 409, 161, 411, 412,
	414, 415, 416, 417, 418, 419, 784, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	155, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 164, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 734, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 0,
	0, 245, 730, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 727, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 0, 0, 245, 709, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	655, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 653, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 0,
	0, 245, 638, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	578, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 530, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 577, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 0, 0, 245, 634, 497,
	0, 0, 342, 0, 395, 399, 0, 488, 0, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 184, 578, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 320, 0, 537, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 0, 0, 0, 0,
	0, 222, 223, 344, 204, 352, 549, 515, 407, 365,
	363, 0, 330, 387, 544, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 512, 516, 514,
	510, 507, 511, 508, 509, 513, 269, 506, 0, 481,
	490, 524, 504, 532, 489, 529, 499, 244, 528, 493,
	492, 538, 519, 520, 474, 534, 505, 503, 496, 495,
	491, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	0, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 494, 0, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 498,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 500, 501, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 517, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	518, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 521, 522, 338, 340,
	341, 523, 525, 526, 0, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 527, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 530, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 531, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 533, 442, 443, 0, 445,
	446, 0, 448, 449, 450, 451, 452, 0, 577, 453,
	535, 454, 536, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	539, 540, 541, 542, 543, 545, 546, 547, 548, 485,
	486, 502, 353, 347, 303, 345, 346, 350, 351, 354,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	196, 0, 0, 245, 632, 497, 0, 0, 342, 0,
	395, 399, 0, 488, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 184, 578, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 320, 0, 537, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 0, 0, 0, 0, 0, 222, 223, 344,
	204, 352, 549, 515, 407, 365, 363, 0, 330, 387,
	544, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 512, 516, 514, 510, 507, 511, 508,
	509, 513, 269, 506, 0, 481, 490, 524, 504, 532,
	489, 529, 499, 244, 528, 493, 492, 538, 519, 520,
	474, 534, 505, 503, 496, 495, 491, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 0, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 494, 0, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 498, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 500,
	501, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 517, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 518, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 521, 522, 338, 340, 341, 523, 525, 526,
	0, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 527, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 530, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 531, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 533, 442, 443, 0, 445, 446, 0, 448, 449,
	450, 451, 452, 0, 577, 453, 535, 454, 536, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 539, 540, 541, 542,
	543, 545, 546, 547, 548, 485, 486, 502, 353, 347,
	303, 345, 346, 350, 351, 354, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 196, 0, 0, 245,
	609, 497, 0, 0, 342, 0, 395, 399, 0, 488,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 184, 578, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 320, 0, 537,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 0, 0,
	0, 0, 0, 222, 223, 344, 204, 352, 549, 515,
	407, 365, 363, 0, 330, 387, 544, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 512,
	516, 514, 510, 507, 511, 508, 509, 513, 269, 506,
	0, 481, 490, 524, 504, 532, 489, 529, 499, 244,
	528, 493, 492, 538, 519, 520, 474, 534, 505, 503,
	496, 495, 491, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 0, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 494, 0, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 498, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 500, 501, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 517, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 518, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 521, 522,
	338, 340, 341, 523, 525, 526, 0, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 527,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 530, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 531,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 533, 442, 443,
	0, 445, 446, 0, 448, 449, 450, 451, 452, 0,
	577, 453, 535, 454, 536, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 539, 540, 541, 542, 543, 545, 546, 547,
	548, 485, 486, 502, 353, 347, 303, 345, 346, 350,
	351, 354, 166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 196, 0, 0, 245, 282, 497, 0, 0,
	342, 0, 395, 399, 0, 488, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 184, 578, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 320, 0, 537, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 0, 0, 0, 0, 0, 222,
	223, 344, 204, 352, 549, 515, 407, 365, 363, 0,
	330, 387, 544, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 512, 516, 514, 510, 507,
	511, 508, 509, 513, 269, 506, 0, 481, 490, 524,
	504, 532, 489, 529, 499, 244, 528, 493, 492, 538,
	519, 520, 474, 534, 505, 503, 496, 495, 491, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 0, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 494, 0, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 498, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 500, 501, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 517, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 518, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 521, 522, 338, 340, 341, 523,
	525, 526, 0, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 527, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	530, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 531, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 533, 442, 443, 0, 445, 446, 0,
	448, 449, 450, 451, 452, 0, 577, 453, 535, 454,
	536, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 539, 540,
	541, 542, 543, 545, 546, 547, 548, 485, 486, 502,
	353, 347, 303, 345, 346, 350, 351, 354, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 196, 0,
	0, 245, 282, 497, 0, 0, 342, 0, 395, 399,
	0, 488, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 184,
	159, 487, 153, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 320,
	0, 537, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	0, 0, 0, 0, 0, 222, 223, 344, 204, 352,
	549, 515, 407, 365, 363, 0, 330, 387, 544, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 512, 516, 514, 510, 507, 511, 508, 509, 513,
	269, 506, 0, 481, 490, 524, 504, 532, 489, 529,
	499, 244, 528, 493, 492, 538, 519, 520, 474, 534,
	505, 503, 496, 495, 491, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 0, 188, 189, 190, 193, 194,
	195, 197, 160, 198, 199, 200, 201, 202, 203, 494,
	0, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 498, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 500, 501, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	517, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 518, 323, 324, 325, 326, 327,
	328, 329, 162, 331, 332, 333, 334, 335, 336, 337,
	521, 522, 338, 340, 341, 523, 525, 526, 0, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 527, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 163, 403, 404, 405, 406, 530, 408, 409, 161,
	411, 412, 414, 415, 416, 417, 418, 419, 154, 0,
	421, 531, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 533,
	442, 443, 0, 445, 446, 0, 448, 449, 450, 451,
	452, 0, 155, 453, 535, 454, 536, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 164, 539, 540, 541, 542, 543, 545,
	546, 547, 548, 485, 486, 502, 353, 347, 303, 345,
	346, 350, 351, 354, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 196, 669, 0, 245, 282, 0,
	0, 0, 342, 0, 395, 399, 0, 0, 0, 0,
	0, 0, 253, 0, 674, 2174, 680, 0, 686, 0,
	464, 0, 676, 677, 682, 184, 761, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 678, 675, 679, 685, 673,
	683, 670, 681, 0, 386, 320, 0, 0, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 667, 672, 0, 688,
	0, 222, 223, 344, 204, 352, 0, 0, 407, 365,
	363, 0, 330, 387, 0, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 481,
	764, 754, 746, 747, 748, 749, 750, 751, 0, 766,
	767, 768, 769, 770, 474, 760, 0, 745, 752, 753,
	755, 2177, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 0, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 671, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 0,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 0, 0, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 0, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	0, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 0, 0, 338, 340,
	341, 0, 2175, 0, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 0, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 0, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 2180, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 0, 442, 443, 0, 445,
	446, 687, 448, 449, 450, 451, 452, 0, 577, 453,
	0, 454, 0, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	0, 0, 762, 0, 0, 0, 0, 0, 0, 485,
	486, 2176, 353, 347, 303, 345, 346, 350, 351, 354,
	179, 0, 196, 669, 0, 245, 282, 0, 0, 0,
	342, 0, 395, 399, 0, 0, 0, 0, 0, 0,
	253, 0, 674, 0, 680, 2546, 686, 0, 464, 0,
	676, 677, 682, 184, 761, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 2545, 0, 0, 192, 0,
	0, 0, 0, 678, 675, 679, 685, 673, 683, 670,
	681, 0, 386, 320, 0, 0, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 667, 672, 0, 688, 0, 222,
	223, 344, 204, 352, 0, 0, 407, 365, 363, 0,
	330, 387, 0, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 481, 764, 754,
	746, 747, 748, 749, 750, 751, 0, 766, 767, 768,
	769, 770, 474, 760, 0, 745, 752, 753, 755, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 666, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 0, 668, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 671, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 0, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 0, 0, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 0, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 0, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 0, 0, 338, 340, 341, 0,
	0, 0, 684, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 0, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	0, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 2180, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 0, 442, 443, 0, 445, 446, 687,
	448, 449, 450, 451, 452, 0, 577, 453, 0, 454,
	0, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 0, 0,
	762, 0, 0, 0, 0, 0, 0, 485, 486, 0,
	353, 347, 303, 345, 346, 350, 351, 354, 179, 0,
	196, 669, 0, 245, 282, 0, 0, 0, 342, 0,
	395, 399, 0, 0, 0, 0, 0, 0, 253, 0,
	674, 0, 680, 0, 686, 0, 464, 0, 676, 677,
	682, 184, 761, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 678, 675, 679, 685, 673, 683, 670, 681, 0,
	386, 320, 0, 0, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 667, 672, 0, 688, 0, 222, 223, 344,
	204, 352, 0, 0, 407, 365, 363, 3860, 330, 387,
	0, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 481, 764, 754, 746, 747,
	748, 749, 750, 751, 0, 766, 767, 768, 769, 770,
	474, 760, 0, 745, 752, 753, 755, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 0, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 671,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 0, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 0,
	0, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 0, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 0, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 0, 0, 338, 340, 341, 0, 0, 0,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 0, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 0, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 0, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 0, 442, 443, 0, 445, 446, 687, 448, 449,
	450, 451, 452, 0, 577, 453, 0, 454, 0, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 0, 0, 762, 0,
	0, 0, 0, 0, 0, 485, 486, 0, 353, 347,
	303, 345, 346, 350, 351, 354, 179, 0, 196, 669,
	0, 245, 282, 0, 0, 0, 342, 0, 395, 399,
	0, 0, 0, 0, 0, 0, 253, 0, 674, 0,
	680, 0, 686, 0, 464, 0, 676, 677, 682, 184,
	761, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 0, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	0, 0, 407, 365, 363, 3596, 330, 387, 0, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 481, 764, 754, 746, 747, 748, 749,
	750, 751, 0, 766, 767, 768, 769, 770, 474, 760,
	0, 745, 752, 753, 755, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 0,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 0, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 0, 0, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	0, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 0, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	0, 0, 338, 340, 341, 0, 0, 0, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 0, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 0, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 0, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 0,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 0, 454, 0, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 485, 486, 0, 353, 347, 303, 345,
	346, 350, 351, 354, 179, 0, 196, 669, 0, 245,
	282, 0, 0, 0, 342, 0, 395, 399, 0, 0,
	0, 0, 0, 0, 253, 0, 674, 0, 680, 0,
	686, 0, 464, 0, 676, 677, 682, 184, 761, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 678, 675, 679,
	685, 673, 683, 670, 681, 0, 386, 320, 0, 0,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 667, 672,
	0, 688, 0, 222, 223, 344, 204, 352, 0, 0,
	407, 365, 363, 0, 330, 387, 0, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 481, 764, 754, 746, 747, 748, 749, 750, 751,
	0, 766, 767, 768, 769, 770, 474, 760, 0, 745,
	752, 753, 755, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 666, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 0, 668, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 671, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 0, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 0, 0, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 0, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 0, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 3445, 0,
	338, 340, 341, 0, 0, 0, 684, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 0,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 0, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 0,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 0, 442, 443,
	0, 445, 446, 687, 448, 449, 450, 451, 452, 0,
	577, 453, 0, 454, 0, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 485, 486, 0, 353, 347, 303, 345, 346, 350,
	351, 354, 179, 0, 196, 669, 0, 245, 282, 0,
	0, 0, 342, 0, 395, 399, 0, 0, 0, 0,
	0, 0, 253, 0, 674, 0, 680, 0, 686, 0,
	464, 0, 676, 677, 682, 184, 761, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 678, 675, 679, 685, 673,
	683, 670, 681, 0, 386, 320, 0, 0, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 667, 672, 0, 688,
	0, 222, 223, 344, 204, 352, 0, 0, 407, 365,
	363, 0, 330, 387, 0, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 481,
	764, 754, 746, 747, 748, 749, 750, 751, 0, 766,
	767, 768, 769, 770, 474, 760, 0, 745, 752, 753,
	755, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 0, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 671, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 0,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 0, 0, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 0, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	0, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 0, 0, 338, 340,
	341, 0, 0, 0, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 0, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 0, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 2180, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 0, 442, 443, 0, 445,
	446, 687, 448, 449, 450, 451, 452, 0, 577, 453,
	0, 454, 0, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	0, 0, 762, 0, 0, 0, 0, 0, 0, 485,
	486, 0, 353, 347, 303, 345, 346, 350, 351, 354,
	179, 0, 196, 669, 0, 245, 282, 0, 0, 0,
	342, 0, 395, 399, 0, 0, 0, 0, 0, 0,
	253, 0, 674, 0, 680, 0, 686, 0, 464, 0,
	676, 677, 682, 184, 761, 487, 558, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 678, 675, 679, 685, 673, 683, 670,
	681, 0, 386, 320, 0, 0, 413, 191, 237, 224,
	266, 308, 420, 0, 0, 298, 468, 233, 322, 0,
	212, 355, 0, 444, 319, 0, 427, 447, 0, 339,
	218, 378, 434, 435, 667, 672, 0, 688, 0, 222,
	223, 344, 204, 352, 0, 0, 407, 365, 363, 0,
	330, 387, 0, 0, 0, 252, 0, 247, 343, 483,
	210, 462, 381, 348, 302, 410, 439, 249, 234, 235,
	278, 380, 268, 220, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 481, 764, 754,
	746, 747, 748, 749, 750, 751, 0, 766, 767, 768,
	769, 770, 474, 760, 0, 745, 752, 753, 755, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	180, 0, 181, 182, 183, 185, 186, 187, 666, 188,
	189, 190, 193, 194, 195, 197, 557, 198, 199, 200,
	201, 202, 203, 0, 668, 205, 206, 207, 208, 209,
	211, 213, 214, 215, 216, 217, 219, 221, 0, 0,
	0, 671, 0, 0, 0, 225, 226, 227, 228, 229,
	230, 0, 231, 232, 236, 238, 239, 240, 241, 242,
	243, 246, 0, 248, 250, 0, 251, 254, 0, 255,
	256, 257, 258, 259, 260, 261, 262, 0, 263, 0,
	264, 265, 267, 0, 270, 271, 272, 273, 274, 0,
	275, 0, 0, 276, 277, 279, 280, 281, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 295, 296, 297, 299, 0, 300, 301, 304, 305,
	306, 307, 0, 309, 0, 0, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 318, 321, 0, 323,
	324, 325, 326, 327, 328, 329, 559, 331, 332, 333,
	334, 335, 336, 337, 3062, 0, 338, 340, 341, 0,
	0, 0, 684, 356, 357, 358, 359, 360, 361, 362,
	364, 0, 366, 367, 368, 0, 369, 370, 371, 372,
	0, 373, 374, 375, 376, 377, 379, 382, 383, 384,
	385, 0, 388, 389, 390, 391, 392, 393, 394, 396,
	397, 398, 400, 401, 402, 560, 403, 404, 405, 406,
	0, 408, 409, 561, 411, 412, 414, 415, 416, 417,
	418, 419, 576, 0, 421, 0, 422, 423, 424, 425,
	426, 0, 428, 429, 430, 431, 432, 433, 436, 437,
	438, 440, 441, 0, 442, 443, 0, 445, 446, 687,
	448, 449, 450, 451, 452, 0, 577, 453, 0, 454,
	0, 455, 456, 457, 458, 459, 460, 461, 463, 0,
	0, 465, 466, 467, 469, 470, 471, 472, 475, 476,
	477, 478, 479, 0, 480, 482, 484, 562, 0, 0,
	762, 0, 0, 0, 0, 0, 0, 485, 486, 0,
	353, 347, 303, 345, 346, 350, 351, 354, 179, 0,
	196, 669, 0, 245, 282, 0, 0, 0, 342, 0,
	395, 399, 0, 0, 0, 0, 0, 0, 253, 0,
	674, 0, 680, 0, 686, 0, 464, 0, 676, 677,
	682, 184, 761, 487, 558, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 678, 675, 679, 685, 673, 683, 670, 681, 0,
	386, 320, 0, 0, 413, 191, 237, 224, 266, 308,
	420, 0, 0, 298, 468, 233, 322, 0, 212, 355,
	0, 444, 319, 0, 427, 447, 0, 339, 218, 378,
	434, 435, 667, 672, 0, 688, 0, 222, 223, 344,
	204, 352, 0, 0, 407, 365, 363, 0, 330, 387,
	0, 0, 0, 252, 0, 247, 343, 483, 210, 462,
	381, 348, 302, 410, 439, 249, 234, 235, 278, 380,
	268, 220, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 481, 764, 754, 746, 747,
	748, 749, 750, 751, 0, 766, 767, 768, 769, 770,
	474, 760, 0, 745, 752, 753, 755, 0, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 180, 0,
	181, 182, 183, 185, 186, 187, 666, 188, 189, 190,
	193, 194, 195, 197, 557, 198, 199, 200, 201, 202,
	203, 0, 668, 205, 206, 207, 208, 209, 211, 213,
	214, 215, 216, 217, 219, 221, 0, 0, 0, 671,
	0, 0, 0, 225, 226, 227, 228, 229, 230, 0,
	231, 232, 236, 238, 239, 240, 241, 242, 243, 246,
	0, 248, 250, 0, 251, 254, 0, 255, 256, 257,
	258, 259, 260, 261, 262, 0, 263, 0, 264, 265,
	267, 0, 270, 271, 272, 273, 274, 0, 275, 0,
	0, 276, 277, 279, 280, 281, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 0, 295,
	296, 297, 299, 0, 300, 301, 304, 305, 306, 307,
	0, 309, 0, 0, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 318, 321, 0, 323, 324, 325,
	326, 327, 328, 329, 559, 331, 332, 333, 334, 335,
	336, 337, 0, 0, 338, 340, 341, 0, 0, 0,
	684, 356, 357, 358, 359, 360, 361, 362, 364, 0,
	366, 367, 368, 0, 369, 370, 371, 372, 0, 373,
	374, 375, 376, 377, 379, 382, 383, 384, 385, 0,
	388, 389, 390, 391, 392, 393, 394, 396, 397, 398,
	400, 401, 402, 560, 403, 404, 405, 406, 0, 408,
	409, 561, 411, 412, 414, 415, 416, 417, 418, 419,
	576, 0, 421, 0, 422, 423, 424, 425, 426, 0,
	428, 429, 430, 431, 432, 433, 436, 437, 438, 440,
	441, 0, 442, 443, 0, 445, 446, 687, 448, 449,
	450, 451, 452, 0, 577, 453, 0, 454, 0, 455,
	456, 457, 458, 459, 460, 461, 463, 0, 0, 465,
	466, 467, 469, 470, 471, 472, 475, 476, 477, 478,
	479, 0, 480, 482, 484, 562, 0, 0, 762, 0,
	0, 0, 0, 0, 0, 485, 486, 0, 353, 347,
	303, 345, 346, 350, 351, 354, 179, 0, 196, 669,
	0, 245, 772, 0, 0, 0, 342, 0, 395, 399,
	0, 0, 0, 0, 0, 0, 253, 0, 674, 0,
	680, 0, 686, 0, 464, 0, 676, 677, 682, 184,
	761, 487, 558, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 678,
	675, 679, 685, 673, 683, 670, 681, 0, 386, 320,
	0, 0, 413, 191, 237, 224, 266, 308, 420, 0,
	0, 298, 468, 233, 322, 0, 212, 355, 0, 444,
	319, 0, 427, 447, 0, 339, 218, 378, 434, 435,
	667, 672, 0, 688, 0, 222, 223, 344, 204, 352,
	0, 0, 407, 365, 363, 0, 330, 387, 0, 0,
	0, 252, 0, 247, 343, 483, 210, 462, 381, 348,
	302, 410, 439, 249, 234, 235, 278, 380, 268, 220,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 481, 764, 754, 746, 747, 748, 749,
	750, 751, 0, 766, 767, 768, 769, 770, 474, 760,
	0, 745, 752, 753, 755, 0, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 180, 0, 181, 182,
	183, 185, 186, 187, 666, 188, 189, 190, 193, 194,
	195, 197, 557, 198, 199, 200, 201, 202, 203, 0,
	668, 205, 206, 207, 208, 209, 211, 213, 214, 215,
	216, 217, 219, 221, 0, 0, 0, 671, 0, 0,
	0, 225, 226, 227, 228, 229, 230, 0, 231, 232,
	236, 238, 239, 240, 241, 242, 243, 246, 0, 248,
	250, 0, 251, 254, 0, 255, 256, 257, 258, 259,
	260, 261, 262, 0, 263, 0, 264, 265, 267, 0,
	270, 271, 272, 273, 274, 0, 275, 0, 0, 276,
	277, 279, 280, 281, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 0, 295, 296, 297,
	299, 0, 300, 301, 304, 305, 306, 307, 0, 309,
	0, 0, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 318, 321, 0, 323, 324, 325, 326, 327,
	328, 329, 559, 331, 332, 333, 334, 335, 336, 337,
	0, 0, 338, 340, 341, 0, 0, 0, 684, 356,
	357, 358, 359, 360, 361, 362, 364, 0, 366, 367,
	368, 0, 369, 370, 371, 372, 0, 373, 374, 375,
	376, 377, 379, 382, 383, 384, 385, 0, 388, 389,
	390, 391, 392, 393, 394, 396, 397, 398, 400, 401,
	402, 560, 403, 404, 405, 406, 0, 408, 409, 561,
	411, 412, 414, 415, 416, 417, 418, 419, 576, 0,
	421, 0, 422, 423, 424, 425, 426, 0, 428, 429,
	430, 431, 432, 433, 436, 437, 438, 440, 441, 0,
	442, 443, 0, 445, 446, 687, 448, 449, 450, 451,
	452, 0, 577, 453, 0, 454, 0, 455, 456, 457,
	458, 459, 460, 461, 463, 0, 0, 465, 466, 467,
	469, 470, 471, 472, 475, 476, 477, 478, 479, 0,
	480, 482, 484, 562, 0, 0, 762, 0, 0, 0,
	0, 0, 0, 485, 486, 0, 353, 347, 303, 345,
	346, 350, 351, 354, 179, 0, 196, 669, 0, 245,
	736, 0, 0, 0, 342, 0, 395, 399, 0, 0,
	0, 0, 0, 0, 253, 0, 674, 0, 680, 0,
	686, 0, 464, 0, 676, 677, 682, 184, 761, 487,
	558, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 678, 675, 679,
	685, 673, 683, 670, 681, 0, 386, 320, 0, 0,
	413, 191, 237, 224, 266, 308, 420, 0, 0, 298,
	468, 233, 322, 0, 212, 355, 0, 444, 319, 0,
	427, 447, 0, 339, 218, 378, 434, 435, 667, 672,
	0, 688, 0, 222, 223, 344, 204, 352, 0, 0,
	407, 365, 363, 0, 330, 387, 0, 0, 0, 252,
	0, 247, 343, 483, 210, 462, 381, 348, 302, 410,
	439, 249, 234, 235, 278, 380, 268, 220, 473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 481, 764, 754, 746, 747, 748, 749, 750, 751,
	0, 766, 767, 768, 769, 770, 474, 760, 0, 745,
	752, 753, 755, 0, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 180, 0, 181, 182, 183, 185,
	186, 187, 666, 188, 189, 190, 193, 194, 195, 197,
	557, 198, 199, 200, 201, 202, 203, 0, 668, 205,
	206, 207, 208, 209, 211, 213, 214, 215, 216, 217,
	219, 221, 0, 0, 0, 671, 0, 0, 0, 225,
	226, 227, 228, 229, 230, 0, 231, 232, 236, 238,
	239, 240, 241, 242, 243, 246, 0, 248, 250, 0,
	251, 254, 0, 255, 256, 257, 258, 259, 260, 261,
	262, 0, 263, 0, 264, 265, 267, 0, 270, 271,
	272, 273, 274, 0, 275, 0, 0, 276, 277, 279,
	280, 281, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 0, 295, 296, 297, 299, 0,
	300, 301, 304, 305, 306, 307, 0, 309, 0, 0,
	310, 311, 312, 0, 0, 313, 314, 315, 316, 317,
	318, 321, 0, 323, 324, 325, 326, 327, 328, 329,
	559, 331, 332, 333, 334, 335, 336, 337, 0, 0,
	338, 340, 341, 0, 0, 0, 684, 356, 357, 358,
	359, 360, 361, 362, 364, 0, 366, 367, 368, 0,
	369, 370, 371, 372, 0, 373, 374, 375, 376, 377,
	379, 382, 383, 384, 385, 0, 388, 389, 390, 391,
	392, 393, 394, 396, 397, 398, 400, 401, 402, 560,
	403, 404, 405, 406, 0, 408, 409, 561, 411, 412,
	414, 415, 416, 417, 418, 419, 576, 0, 421, 0,
	422, 423, 424, 425, 426, 0, 428, 429, 430, 431,
	432, 433, 436, 437, 438, 440, 441, 0, 442, 443,
	0, 445, 446, 687, 448, 449, 450, 451, 452, 0,
	577, 453, 0, 454, 0, 455, 456, 457, 458, 459,
	460, 461, 463, 0, 0, 465, 466, 467, 469, 470,
	471, 472, 475, 476, 477, 478, 479, 0, 480, 482,
	484, 562, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 485, 486, 0, 353, 347, 303, 345, 346, 350,
	351, 354, 179, 0, 196, 669, 0, 245, 282, 0,
	0, 0, 342, 0, 395, 399, 0, 0, 0, 0,
	0, 0, 253, 0, 674, 0, 680, 0, 686, 0,
	464, 0, 676, 677, 682, 184, 0, 487, 558, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 678, 675, 679, 685, 673,
	683, 670, 681, 0, 386, 320, 0, 0, 413, 191,
	237, 224, 266, 308, 420, 0, 0, 298, 468, 233,
	322, 0, 212, 355, 0, 444, 319, 0, 427, 447,
	0, 339, 218, 378, 434, 435, 667, 672, 0, 688,
	0, 222, 223, 344, 204, 352, 0, 0, 407, 365,
	363, 0, 330, 387, 0, 0, 0, 252, 0, 247,
	343, 483, 210, 462, 381, 348, 302, 410, 439, 249,
	234, 235, 278, 380, 268, 220, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 481,
	0, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	0, 0, 0, 0, 474, 0, 0, 0, 0, 0,
	0, 0, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 180, 0, 181, 182, 183, 185, 186, 187,
	666, 188, 189, 190, 193, 194, 195, 197, 557, 198,
	199, 200, 201, 202, 203, 0, 668, 205, 206, 207,
	208, 209, 211, 213, 214, 215, 216, 217, 219, 221,
	0, 0, 0, 671, 0, 0, 0, 225, 226, 227,
	228, 229, 230, 0, 231, 232, 236, 238, 239, 240,
	241, 242, 243, 246, 0, 248, 250, 0, 251, 254,
	0, 255, 256, 257, 258, 259, 260, 261, 262, 0,
	263, 0, 264, 265, 267, 0, 270, 271, 272, 273,
	274, 0, 275, 0, 0, 276, 277, 279, 280, 281,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 0, 295, 296, 297, 299, 0, 300, 301,
	304, 305, 306, 307, 0, 309, 0, 0, 310, 311,
	312, 0, 0, 313, 314, 315, 316, 317, 318, 321,
	0, 323, 324, 325, 326, 327, 328, 329, 559, 331,
	332, 333, 334, 335, 336, 337, 0, 0, 338, 340,
	341, 0, 0, 0, 684, 356, 357, 358, 359, 360,
	361, 362, 364, 0, 366, 367, 368, 0, 369, 370,
	371, 372, 0, 373, 374, 375, 376, 377, 379, 382,
	383, 384, 385, 0, 388, 389, 390, 391, 392, 393,
	394, 396, 397, 398, 400, 401, 402, 560, 403, 404,
	405, 406, 0, 408, 409, 561, 411, 412, 414, 415,
	416, 417, 418, 419, 576, 0, 421, 0, 422, 423,
	424, 425, 426, 0, 428, 429, 430, 431, 432, 433,
	436, 437, 438, 440, 441, 0, 442, 443, 0, 445,
	446, 687, 448, 449, 450, 451, 452, 0, 577, 453,
	0, 454, 0, 455, 456, 457, 458, 459, 460, 461,
	463, 0, 0, 465, 466, 467, 469, 470, 471, 472,
	475, 476, 477, 478, 479, 0, 480, 482, 484, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 485,
	486, 0, 353, 347, 303, 345, 346, 350, 351, 354,
}

var yyPact = [...]int32{
	1533, -1000, -13, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1858, 550, 6655, 8196, 8360,
	1954, 55254, 41592, -1000, 1966, 649, 2398, 36532, -17, 54748,
	42604, 235, 1533, 2097, 36532, 2154, 2096, 649, 42604, -1000,
	1106, 1267, 1058, 2427, 54242, 42604, 23348, 42604, 1922, 53736,
	53230, 1566, 52724, 1190, 1953, 641, -1000, -1000, 784, 702,
	-1000, -1000, 36026, 41086, 52218, 51712, 491, 1558, 31506, 42604,
	42604, 42604, 42604, 31506, 27963, 1224, 1368, 51206, 31506, 42604,
	31506, 42604, 42604, 42604, 42604, 42604, 629, 27963, 28976, 42604,
	42604, 1914, 42604, 42604, -1000, 50700, 50194, 49688, 60152, 59664,
	2538, 1166, -1000, -1000, -1000, 489, 1556, -1000, -1000, -1000,
	1912, 1161, 613, -1000, 1222, -1000, -1000, -1000, -1000, -1000,
	-1000, 482, -1000, 49182, 40580, 1247, -1000, -1000, 584, 2292,
	2608, 2608, 2416, 30494, 432, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2291, 1228, 1448, 40, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 132, 131, 1966, 13118, 13118, -1000,
	2090, -1000, 5, -1000, 23, 31000, -1000, -1000, -1000, 280,
	-18, 42604, -1000, 268, -1000, -18, 15179, -1000, 42604, 1883,
	48676, 36532, 36532, 123, -1000, 137, 48170, 42604, 478, 47664,
	2535, 31506, 31506, 42604, 578, 31506, 1007, 1447, -1000, 2463,
	2548, 21, 179, -1000, 31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 640,
	1159, 591, 2462, 831, 2461, 1603, 47158, 557, 2459, 1750,
	474, 42604, -1000, -1000, -1000, -1000, 6638, 2525, 2372, 7540,
	2523, 2371, 7735, 2521, 8088, 2520, 40074, 39568, 1597, 1050,
	261, -1000, 23, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1049,
	1047, 1044, 1269, 1043, 261, 1042, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42604, 42604, 42604, 2087, 2519,
	1041, 1039, 1035, 1033, 510, 1032, 2086, 2084, 42604, 1031,
	1030, 1664, 1028, 1023, 1088, 1359, 1635, 2518, 259, -1000,
	2516, 271, -1000, 2082, 2514, 262, 2513, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12, -1000, -1000, -1000, -1000, -1000,
	256, 1485, 251, 251, 251, -1000, -1000, -1000, -1000, -1000,
	75, 52, -1000, -1000, 1483, 250, 1483, 1483, -1000, 1501,
	1483, 262, 2512, 46652, 1746, -1000, 1595, -1000, 992, -1000,
	-1000, -1000, 2535, -1000, 1436, -1000, 2568, 29482, 242, 2608,
	-1000, 1210, 894, -1000, 1356, 1757, 18270, 17755, 42604, 438,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1383,
	-1000, 1206, -1000, -1000, -1000, 2094, -106, -1000, 9477, -1000,
	-1000, 15179, 15179, 15179, 15179, -1000, -1000, -1000, 12087, -1000,
	-1000, 23, 247, 129, -1000, -1000, 246, -1000, 233, 23,
	-1000, -1000, -1000, -1000, -1000, -1000, 15179, -1000, 245, -1000,
	244, 332, 243, -1000, 23, -1000, 8957, 15179, -1000, 42604,
	15179, 42604, -18, 2570, 42604, -11, 6932, 634, 2569, 29988,
	-1000, 42604, 1991, 1990, 2276, 2151, 42604, 515, 2458, 137,
	42604, 1311, 2457, 46146, -1000, 241, 241, 1353, 42604, 240,
	904, -1000, 27963, 2533, 2511, 59176, -1000, 11, 10526, -1000,
	10526, 23348, -1000, 295, 42604, 42604, 42604, 42604, -1000, 42604,
	2510, -1000, -1000, -1000, 2509, 42604, 283, 2456, 517, 2608,
	2508, 27457, 2455, 45640, 2081, -101, -1000, 812, -1000, 1096,
	1092, 33007, 779, 764, 1765, 430, 2080, 1038, 748, 42604,
	1403, 42604, 1752, 2270, 151, 1283, 947, -1000, 239, 36532,
	775, -101, -1000, 2266, 1087, 42604, 762, -101, 2265, 1311,
	-1000, 1454, 59176, 537, -1000, 2138, -1000, 537, 537, 2127,
	1142, 831, 831, -1000, 42604, -101, 862, 42604, 8029, 2506,
	2366, 7964, 2505, 42604, 2262, -1000, 120, 23, 2260, 2259,
	2258, 1818, -1000, 1880, 2394, 848, 1764, 2256, -1000, 2255,
	1021, 1983, 1979, 42604, 42604, 2254, 2253, 2252, 2251, 2250,
	413, -1000, 2350, 2249, 42604, 42604, 1119, 2247, 2242, 27457,
	2239, 2233, 42604, 42604, 42604, 42604, 1599, 1539, 1537, -1000,
	7288, -1000, -1000, 42604, 42604, -1000, -1000, -1000, 42604, 42604,
	-1000, 42604, 42604, 59176, -1000, 59176, -1000, 30, 15179, -1000,
	2586, -1000, -1000, -1000, -1000, 2586, -1000, 2295, 2288, 2586,
	-1000, 236, -1000, 2586, -1000, -1000, 1483, 1483, -1000, -1000,
	59176, 259, 2503, 27457, 2501, -1000, -1000, -1000, -1000, -1000,
	42604, 2568, 574, -1000, -1000, 1431, -1000, -1000, 999, -1000,
	-1000, -1000, -1000, -19, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2596, 2594, -1000, -1000, -19, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2152, 42604, 13118, 59176, 15179, 15179,
	15179, 15179, 15179, 15179, 15179, 15179, 15179, 15179, 15179, 15179,
	15179, 15179, 2367, -1000, -1000, 15179, 2328, 15179, 42604, 2287,
	15179, 2237, 221, 2232, 10526, -1000, 233, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	772, 772, 1321, 306, 23, 6622, -32, 18, 235, 23,
	-1000, -1000, -1000, 13634, 15179, 23348, 23, 2304, 6932, -1000,
	14664, 12603, 2152, 15179, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6218, -245, 119, -12, -1000, 1999, -22, 15179, -1000,
	15179, 15179, 2367, 15179, 15179, 42604, 2287, 2237, 221, 2232,
	233, 2079, -1000, 1828, 26445, 1939, 42604, 210, -1000, 293,
	42604, -1000, -1000, 2144, 21324, 21324, 1771, 1771, -1000, -1000,
	-28, -1000, 33513, 42604, 1748, 2498, 2400, 231, -1000, 1311,
	1433, 2497, 2078, 2453, -1000, 8282, 34525, 8276, 1117, -1000,
	-1000, 1747, 1460, 179, -1000, 32518, 42604, 472, -1000, -1000,
	-1000, -1000, -1000, -1000, 1218, 42604, -1000, 10526, -1000, -29,
	-1000, 292, -1000, 42604, 229, 179, 179, 179, 179, 179,
	-1000, 42604, 956, 42604, 709, 33513, 1745, 2495, 1304, -1000,
	-1000, 42604, 899, -1000, -1000, 2492, 2564, 2451, 137, 10526,
	7267, 42604, 42604, 42604, -1000, 42604, 42604, -1000, 2447, 45134,
	-1000, 59176, 42604, -1000, 226, 2009, 448, 442, 1973, 39062,
	42604, 44628, 44122, 42604, 723, -1000, -1000, 1149, 42604, -1000,
	10526, 42604, 35520, 756, 739, 42604, 1205, 35014, 42604, 1204,
	-1000, 42604, 926, -1000, -1000, 27963, -1000, 1863, 1203, 11038,
	6296, 42604, 42604, 42604, 7870, 42604, 42604, -1000, -1000, -1000,
	-1000, -1000, -1000, 537, -1000, -1000, -1000, 42604, 42604, 537,
	537, 7453, 42604, 42604, 7820, -101, 839, 42604, 737, -101,
	838, 36532, 914, 42604, -1000, 42604, 42604, 42604, 42604, 42604,
	-1000, 2360, 43616, 15179, 2352, -1000, 42604, -1000, 223, 2343,
	42604, 42604, 27963, 2231, 42604, 42604, 1009, 2077, 42604, 42604,
	42604, 42604, 42604, -1000, -1000, -1000, 42604, 1008, 1004, 2230,
	-1000, 1170, -1000, 27963, 27963, 892, 42604, 42604, 1002, 995,
	993, 991, 42604, 42604, 2608, 2530, 2608, 2228, 42604, 42604,
	31506, 222, 59176, 31506, 24408, 31506, 31506, 1657, 59176, -1000,
	-1000, -1000, -1000, -1000, -1000, 259, -1000, 271, -1000, 2423,
	2076, -1000, 262, -1000, -34, 117, 116, 2290, 2281, 114,
	15179, 113, -1000, -1000, 262, -1000, 42604, 875, 1656, 2407,
	1431, -1000, -1000, 787, 1065, -1000, 18785, -1000, -1000, -1000,
	-1000, 2122, 21324, -1000, -1000, -1000, -21, -21, -1, -1,
	-1, -1000, 354, 354, 354, 354, 354, 354, 1321, 4948,
	-1000, 2342, 1231, 15179, 15179, 2227, 221, 2223, 937, -1000,
	2194, -1000, 306, 16724, 16724, -1000, -1000, -1000, 12087, 15179,
	-1000, -1000, -1000, 15179, -39, -41, -1000, -1000, -45, 111,
	1554, -1000, 15179, -1000, -48, -1000, -1000, -35, 15179, 15179,
	15179, -1000, 6932, 2580, -1000, 2122, -58, -1000, 15179, -1000,
	-1000, 218, -1000, 1946, -1000, 6932, 1829, 1837, 1532, -1000,
	-1000, -59, -1000, -1000, -1000, -1000, 2144, 29988, 15179, -60,
	-1000, 23, 1829, 15694, -65, 2012, 37544, 37544, 22842, -1000,
	20818, 37544, 37544, 37544, 307, 2150, 217, 216, 23, -1000,
	1941, 1878, -1000, 1878, 42604, -1000, 110, -49, -1000, -1000,
	-1000, -1000, 42604, 160, 42604, 42604, 2559, 151, 42604, 42604,
	36532, 2489, 56248, 1136, 8276, -1000, 2608, 30494, 1653, -1000,
	-1000, 2074, -1000, -1000, -1000, -1000, 909, 1312, -1000, 1217,
	537, 537, 42604, -1000, 42604, 43110, -1000, -62, -1000, -1000,
	788, 58200, 55760, -1000, 1108, -1000, -1000, -1000, 12, -1000,
	60640, 1136, 2339, 2069, -1000, -1000, -1000, 1744, -1000, -1000,
	1117, -1000, 109, -240, 2118, -63, -1000, -1000, -1000, 190,
	137, 42604, 2533, 924, 943, 1439, -1000, 1317, -1000, -1000,
	10526, 11550, 108, -51, -1000, 59176, 2608, -1000, -1000, -1000,
	-1000, -1000, 587, -1000, 42604, 30494, 30494, -1000, 831, 403,
	709, -1000, 42604, 704, 42604, 106, 42604, 42604, 1388, 557,
	42604, 1652, 649, 2488, 1960, 1543, -1000, -1000, 2221, 2220,
	1742, 1567, 2487, -1000, 2446, 797, 656, 15179, 215, -1000,
	2387, 1266, 551, 211, 209, 42604, 1147, 1875, -1000, 2486,
	2423, 2485, 2423, -1000, -1000, -1000, 38556, -1000, -66, -1000,
	22, -1000, -1000, -1000, -1000, 42604, 42604, 42604, 42604, -1000,
	907, -1000, -1000, -1000, -1000, 905, -1000, 1201, -1000, -1000,
	-1000, -1000, -1000, 1264, 869, -74, -1000, -1000, 10526, 10526,
	10526, 2608, -1000, -101, -1000, 808, 1391, -1000, -1000, -101,
	2219, 1386, -1000, -1000, -1000, -1000, -1000, -1000, -101, 2218,
	1311, -1000, 2217, -101, 837, 42604, 42604, 7648, 42604, 42604,
	42604, 7046, 2215, 413, 709, -1000, -1000, -1000, -1000, -1000,
	2213, -1000, 2423, 2479, 6932, -1000, 865, 15179, -1000, -1000,
	-1000, -1000, 42604, 989, 988, 2212, 42604, -1000, -1000, -1000,
	-1000, -1000, -1000, 2211, 2204, 42604, -1000, -1000, -1000, -1000,
	42604, -1000, -1000, 2203, 2202, 2201, 2198, -1000, 2196, 2191,
	2608, 2440, -1000, -1000, 30494, -1000, -1000, -1000, 59176, -1000,
	-1000, -1000, 42604, 42604, 207, -1000, -1000, 59176, -1000, -1000,
	-1000, -1000, 42604, -1000, -1000, -1000, 329, -1000, -1000, 329,
	-76, -1000, -1000, 259, 42604, 27457, -1000, 1236, 242, -1000,
	-1000, -1000, -1000, -1000, 15179, -65, -1000, 15179, 874, 571,
	16724, 16724, -1000, 15179, 15179, 15179, 726, -1000, 16724, 16724,
	695, -77, 447, 23, 6086, -1000, -1000, 212, -1000, -1000,
	1334, -1000, 15179, 5776, -1000, -1000, 98, 14149, -1000, -70,
	-70, 15179, 15179, -1000, -1000, 263, 6932, 649, -1000, -1000,
	13118, 561, 649, 573, 42604, 23, 1829, -1000, 6932, 288,
	42604, -1000, 6932, 1731, 21324, 2010, 2003, 21324, 2051, 1995,
	1995, 1995, -1000, -1000, -1000, 42604, 206, -1000, 37544, 37544,
	37544, 37544, 28469, 96, 2012, -1000, -1000, -1000, -1000, 1711,
	203, 20312, 15179, 23, 15179, 831, -1000, -1000, -1000, 1978,
	-1000, 1243, 33513, -1000, 1085, 34019, 160, 497, 649, -1000,
	-78, 1311, 1973, 42604, 8276, 202, 2060, -1000, 12, -1000,
	-1000, 1444, 15179, -1000, -1000, -73, -1000, -93, 549, 2338,
	1308, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1432,
	825, -1000, 55760, 15179, 15179, 58200, -1000, 58200, -1000, -1000,
	-5, 21, -1000, 42604, 1117, 42604, 2048, -1000, -1000, 2116,
	55760, 55760, -1000, 2599, 11550, 2400, 201, 27963, 2533, -1000,
	42604, -1000, -1000, 42604, 1572, -1000, 2434, 433, 200, 16724,
	42604, 1573, -1000, 1332, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 199, 2596, 2594, -1000, 42604, 2392, 94,
	-99, -1000, -1000, 42604, -1000, -1000, -1000, -1000, -1000, 198,
	-1000, -1000, 21, -1000, -1000, -1000, 1243, 160, 237, 1593,
	517, 403, 27457, 2407, 42604, 2400, 42604, 1150, 42604, 42604,
	42604, -1000, 1938, -1000, -1000, -1000, 42604, 2478, 1405, -1000,
	38050, -1000, 1973, 5358, 42604, 1479, -1000, 2381, 42604, 42604,
	-1000, 42604, 21830, -1000, -1000, 1553, 475, 151, 1294, 1274,
	548, -1000, -1000, 831, 800, 1479, 42604, -1000, 42604, -1000,
	-1000, -1000, -1000, -1000, 10526, 11550, 10526, -1000, -1000, -1000,
	-1000, -1000, -1000, 866, 42604, -1000, -1000, 11038, -1000, -1000,
	-1000, -1000, -1000, 42604, 42604, 42604, 736, 2115, 42604, 732,
	2114, 42604, 42604, 42604, 42604, -1000, 2189, -101, 815, 1374,
	-1000, 2188, -101, 804, 42604, -1000, 42604, -1000, 42604, -1000,
	5265, 1479, -1000, 2178, 2171, 42604, 981, 42604, 42604, -1000,
	413, 42604, 42604, 42604, 42604, 42604, 2608, 1441, 2476, -1000,
	2558, 1975, 1974, -1000, 58688, 1221, 2423, -1000, -1000, -1000,
	-1000, -1000, 872, -1000, 1387, 6932, 957, 15179, 15179, 668,
	540, 317, 957, 297, 15179, 59176, 16724, 16724, 16724, 16724,
	16724, 16724, 16724, 16724, 16724, 16724, 16724, 16724, 766, 766,
	15179, -1000, 15179, -1000, -1000, -1000, 6932, 15179, -1000, 15179,
	-1000, 91, 90, 15179, 88, 6932, 6932, -1000, 86, -106,
	1790, 21830, 1762, -1000, -1000, 1828, -1000, -1000, 15179, -1000,
	42604, 2012, 21324, 21324, 2117, 2001, 21324, -1000, -1000, -1000,
	-1000, 197, 42604, -1000, -1000, -1000, -1000, 37544, -1000, 31506,
	1666, 194, -107, 5184, 5022, 187, 831, 1538, -1000, 1085,
	192, -1000, 1306, 1960, -1000, 2110, -79, -1000, -1000, -1000,
	2421, 1742, 33513, 42604, 1728, 2401, 2400, -1000, 191, 2058,
	1136, 60640, 2333, -1000, 6932, 2608, 1628, 59176, 1239, -1000,
	-1000, -1000, 6932, 6932, -1000, -1000, 544, 1, 1059, -1000,
	-200, 42604, 55760, -1000, -80, -1000, 190, -1000, 2557, 42604,
	-1000, 1180, -1000, -1000, -1000, 2404, 2404, 15179, 559, 137,
	2556, -1000, 2386, -1000, -1000, 23348, -1000, -1000, 42604, -1000,
	2608, -1000, 956, 10526, 11, 868, 1742, 33513, 1723, 42604,
	1303, -1000, 854, -1000, 2555, 665, -1000, 31506, -1000, -1000,
	1569, -1000, 2364, -1000, -1000, 2190, -1000, 42604, 403, -1000,
	37038, -1000, -1000, -1000, -82, -1000, 749, -1000, 1331, 1251,
	-1000, -1000, -94, 1479, -95, -96, -1000, 2419, 583, 2390,
	15179, 2332, 2529, 2528, -1000, -1000, 1573, 2330, 2554, 535,
	-1000, -1000, -1000, -1000, 1573, -1000, 1868, 59176, 537, 535,
	2423, 2423, -1000, -1000, 189, -1000, -1000, -1000, -1000, 2169,
	2168, 42604, 27963, -1000, 42604, 27963, -1000, -1000, -1000, 2167,
	42604, 42604, 42604, 728, 2108, 42604, 42604, 42604, -1000, -1000,
	2423, -1000, 42604, 42604, -1000, 2166, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2423, -1000, 2608, 2608, -1000, 59176, 42604,
	42604, -102, -132, 42604, -1000, 42604, -1000, 957, 957, 15179,
	15179, 15179, 957, -1000, -111, -111, -7, -7, -7, -1000,
	766, 766, 766, 766, 766, 766, 957, 957, 6932, -1000,
	-1000, -1000, -1000, 1911, 1788, -108, -1000, 42604, 1531, 6932,
	-1000, -1000, -1000, 2117, -1000, 188, 15179, 21324, -1000, 42604,
	-109, -1000, -110, -1000, 2553, 1721, 19806, 16209, 15179, -1000,
	-1000, 1504, 1867, -1000, 2469, 2469, 1903, -1000, 2412, 10526,
	187, 2608, 1960, 42604, 1376, 1376, 1655, 42604, -1000, 34019,
	1317, 411, 1085, 84, 160, 42604, -1000, 886, 2550, 21830,
	36532, -1000, -112, -1000, 58200, -1000, 1237, 1397, -1000, 541,
	-1000, -1000, -1000, 538, 1609, 618, 2146, -120, -1000, 649,
	-122, 2533, -1000, 2319, 1963, 179, 1963, 4725, 1177, 319,
	-1000, 83, -1000, -1000, -127, -1000, 42604, 849, 72, 42604,
	403, 1366, 42604, 649, -1000, 42604, 171, 1150, 42604, 170,
	168, 167, 164, -1000, -1000, -1000, -1000, 1479, 1275, -1000,
	-1000, -1000, -1000, -1000, 1275, 1061, 1275, 21830, 23878, -1000,
	42604, 42604, -1000, 4603, -1000, 2472, 2471, -1000, -1000, 163,
	-1000, -1000, -1000, 2586, 2586, 2549, 2392, -1000, -1000, -1000,
	-1000, 11550, 42604, 42604, 1111, 324, -1000, 1111, 277, 42604,
	-1000, -1000, 2164, 42604, 27963, -1000, -1000, 2163, -1000, 1479,
	-1000, -1000, 42604, -1000, -1000, -1000, 71, -1000, -1000, -1000,
	57712, 59176, -1000, -1000, 957, 957, 957, 68, 1889, 1899,
	1853, -1000, 2122, 21830, -1000, 649, -1000, 42604, 6932, -1000,
	-130, -1000, 307, 31506, -1000, 162, 42604, 2106, 19300, 1540,
	-138, -1000, 518, 16724, 4368, 1548, -1000, -1000, 1812, 15179,
	1800, -1000, 1816, -1000, -1000, -1000, 2548, 2548, -1000, -1000,
	2548, 2548, 1670, 2608, -141, -1000, 17239, 2122, -1000, 1655,
	-145, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2032, 151, 439, 161, -1000, -1000,
	1960, 1243, 1085, 160, 431, 373, 369, 649, -146, 1973,
	60640, 8276, -1000, -1000, -1000, -15, -1000, -1000, 59176, -1000,
	2302, 1340, 618, -1000, 1262, -1000, -1000, -1000, 42604, -1000,
	2401, 2400, -1000, 1256, -1000, -1000, 1123, 2041, 1165, 146,
	15179, -1000, -1000, 10526, 403, 42604, 1243, 160, -1000, 1589,
	403, 2407, -1000, 63, 31506, -1000, 2610, 32012, 15179, 15179,
	1317, 2404, 159, 2404, 42604, 2404, -1000, -1000, 158, 1855,
	151, -1000, 2390, -1000, -1000, 15179, 1282, 1965, -1000, -1000,
	-1000, -1000, -1000, 725, 27963, -1000, 693, -1000, 42604, 1111,
	275, 42604, -1000, -1000, 57, 55, 53, -1000, -1000, 42604,
	1886, 1860, 29988, -1000, -1000, -1000, -148, -1000, -1000, -1000,
	42604, -152, -1000, 57224, -1000, 1540, 2106, -1000, -1000, 16209,
	-134, 10526, 559, 1668, 42604, 42604, 1807, 6932, 1811, 2103,
	2608, 2608, 2608, 2608, 25939, 2315, 25433, -1000, -1000, 10526,
	-1000, -1000, -1000, -1000, -1000, 26951, -1000, 2032, 42604, -1000,
	665, 1409, -1000, -1000, 22336, 1317, 1655, 1085, 1960, 1742,
	-1000, 421, 418, 2401, 1273, 149, -1000, 1136, -1000, -1000,
	1324, 148, 836, -1000, -1000, 2548, -1000, -1000, 1508, -1000,
	-1000, 2547, 674, -1000, 1248, -1000, 2047, 2046, 1842, -1000,
	-1000, -1000, -1000, 1311, 4275, -1000, -1000, 403, 845, 1742,
	42604, -1000, -1000, -1000, 147, -156, -1000, -159, -1000, 2586,
	-160, -166, 1963, 42604, 1963, 137, 1963, 23348, 320, -1000,
	-1000, 1855, -1000, 4022, 146, -1000, 15179, 42604, -1000, 42604,
	-1000, -1000, 670, -1000, -1000, -1000, -1000, 260, 2102, 2101,
	220, 2546, -167, -1000, 42604, 2020, 1710, -1000, -1000, 19300,
	-1000, 1720, 15179, -1000, -1000, -1000, -1000, 1784, 1851, -1000,
	-1000, 1781, 527, 1801, -1000, -1000, -1000, -1000, -200, -1000,
	24927, -200, -1000, -1000, -187, -1000, -1000, 665, -1000, -1000,
	1438, -189, -1000, 583, 2390, 15179, 2032, 1960, 1655, 1085,
	-1000, -1000, -1000, 2434, 145, 21830, -1000, 1150, 15179, -1000,
	-1000, -1000, 42604, 1339, 649, 42604, -1000, -1000, 1844, -1000,
	1846, 1482, 1482, 978, 757, -1000, 42604, 844, 403, 50,
	-1000, 2607, -1000, 32012, -1000, -1000, 2159, -1000, -193, -1000,
	1177, 2122, 48, -1000, 1870, 320, -1000, -1000, 6932, 1111,
	1111, 42604, 42604, 42604, 42604, -1000, -1000, 42604, -1000, -1000,
	2020, -1000, 16724, 16724, 2309, -1000, 16724, -1000, 1666, 143,
	-153, -1000, 2545, -1000, 29988, -1000, -1000, 1828, 42604, 1934,
	141, -1000, -1000, -200, -1000, -1000, 26951, -1000, -1000, 1684,
	1681, -1000, 22336, 42604, 42604, 1468, 665, 1655, 2032, 1960,
	2400, 21830, -195, 31506, 270, -1000, -1000, 919, 2401, -1000,
	-1000, 1465, -1000, -1000, 2331, -1000, -1000, -1000, 403, 42604,
	-1000, -1000, -1000, -1000, 140, 1479, -1000, 1479, 2041, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1111, 1994, 186, 185,
	-1000, -1000, 559, 559, -1000, 559, 1717, 42098, 15179, 10526,
	-201, 1530, -199, -1000, 15179, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2390, -1000, 2032, 665, 1655, 665, -203, -1000,
	1273, 139, -1000, 2302, -1000, -1000, 137, 137, -1000, 403,
	15179, -1000, 1479, -1000, 2363, 42604, 42604, 42604, 42604, -216,
	-1000, 56736, 1675, -1000, -1000, 1925, 1850, -221, 42604, 665,
	-1000, 2032, 2122, -1000, 21830, 2434, 10014, 1323, -1000, -1000,
	-1000, -223, 1479, 2384, -1000, -1000, -1000, -229, 1847, 42098,
	1708, 802, 2605, -1000, -1000, -1000, 1828, -1000, -1000, -1000,
	665, -1000, -1000, 2400, -234, -1000, -1000, -1000, -1000, -1000,
	1150, -1000, 2363, -1000, 47, 2031, 15179, -1000, -1000, -1000,
	-1000, -1000, -1000, 1622, -1000, -1000, 1642, 1671, 1671, 2592,
	1791, 1526, -1000, 665, -1000, 10014, 31506, 1959, -1000, 1623,
	6932, -1000, -1000, 1560, 1588, 1638, 1642, 1847, -1000, 136,
	42604, 1925, 2122, -1000, 135, 42604, -1000, 1847, 1563, 1559,
	-1000, 1587, -1000, 1586, 1577, 1574, 1560, -1000, 42098, 1715,
	-1000, -1000, 10014, -1000, -1000, 2029, 2027, 2026, -1000, -1000,
	1579, -1000, 1575, -1000, 1847, -237, 130, -241, 1626, 1557,
	1555, -1000, -1000, -1000, -1000, 42098, -1000, 1847, -1000, 1552,
	1550, -255, 2021, -1000, -1000, -1000, 1571, -1000,
}

var yyPgo = [...]int16{
	0, 3011, 3010, 2222, 150, 0, 2, 4142, 3008, 253,
	209, 245, 116, 500, 257, 3006, 237, 261, 2137, 2979,
	2882, 122, 3005, 2999, 2999, 2996, 252, 212, 186, 2993,
	160, 2992, 2990, 146, 2989, 2988, 266, 28, 4528, 452,
	1568, 13, 2985, 2981, 2980, 2978, 2977, 229, 2976, 193,
	2975, 2974, 2973, 236, 162, 220, 230, 2972, 259, 225,
	291, 149, 628, 5293, 2970, 248, 137, 147, 250, 2964,
	2963, 2957, 2956, 2955, 2954, 2953, 2950, 2949, 2947, 156,
	173, 180, 196, 269, 128, 119, 282, 2946, 2945, 2944,
	4141, 67, 2942, 106, 2941, 232, 234, 153, 195, 219,
	351, 272, 2938, 2933, 2932, 2931, 2930, 144, 140, 2927,
	2926, 2924, 2915, 26, 40, 2914, 2913, 184, 190, 224,
	2910, 228, 158, 10, 37, 157, 117, 2909, 2908, 2907,
	2905, 21, 71, 23, 2904, 2903, 54, 36, 2900, 242,
	2900, 2900, 2900, 2900, 2899, 217, 2898, 2897, 2896, 115,
	2895, 2892, 2889, 74, 2889, 51, 63, 2888, 42, 233,
	238, 134, 2887, 254, 46, 206, 2352, 191, 2885, 265,
	243, 249, 231, 235, 7, 2885, 151, 362, 2881, 2879,
	2878, 2878, 264, 222, 185, 197, 131, 138, 2877, 268,
	2876, 260, 2875, 2870, 2869, 2867, 227, 91, 68, 2866,
	182, 2865, 86, 2863, 2857, 85, 226, 24, 48, 2853,
	39, 88, 34, 72, 2850, 64, 223, 1, 19, 12,
	2848, 188, 2842, 25, 2841, 11, 3, 2838, 4, 16,
	6, 15, 2837, 2836, 132, 2833, 70, 2831, 189, 152,
	172, 2830, 92, 2827, 55, 47, 110, 2826, 2821, 2817,
	159, 33, 2815, 102, 2814, 143, 213, 2794, 2793, 2792,
	22, 44, 107, 56, 62, 38, 27, 79, 59, 2791,
	2790, 29, 83, 2787, 163, 32, 17, 60, 202, 97,
	2786, 20, 30, 31, 267, 89, 251, 247, 2785, 41,
	200, 258, 2784, 2782, 256, 90, 255, 45, 165, 2781,
	164, 2779, 43, 2778, 73, 2778, 142, 57, 49, 2773,
	50, 166, 2773, 98, 127, 2772, 210, 1447, 5428, 2768,
	112, 2766, 271, 81, 2765, 168, 133, 2764, 239, 240,
	2762, 2760, 135, 129, 148, 2759, 124, 2757, 2749, 2748,
	2747, 2746, 2744, 2742, 2741, 2738, 2736, 2731, 2727, 2725,
	2723, 2720, 2719, 2716, 2715, 2702, 2700, 2696, 2694, 2693,
	2691, 179, 171, 2690, 2689, 2688, 244, 241, 199, 208,
	262, 174, 169, 216, 2686, 2679, 114, 2678, 2677, 2676,
	161, 2674, 2668, 175, 66, 2666, 194, 176, 105, 2665,
	1711, 218, 2664, 2663, 2663, 2662, 9, 263, 2658, 183,
	181, 84, 214, 2657, 87, 2656, 2654, 215, 2653, 2652,
	61, 2650, 2649, 178, 211, 2647, 2646, 2644, 2643, 2642,
	2641, 5, 82, 18, 8, 2638, 2626, 35, 2625, 2624,
	246, 204, 2623, 2622, 2621, 2621, 2620, 2359, 2619, 167,
	14, 2618, 2618,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 17, 17, 282, 282, 317, 317,
	317, 24, 24, 25, 25, 26, 26, 27, 27, 37,
	37, 37, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 12, 12, 13, 13, 318, 318, 23,
	23, 15, 15, 435, 435, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 14, 14, 16, 16, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 41, 41, 41,
	41, 41, 41, 60, 62, 61, 61, 61, 42, 42,
	55, 55, 59, 59, 58, 58, 58, 58, 56, 56,
	43, 197, 396, 396, 86, 86, 86, 86, 86, 86,
	53, 53, 54, 54, 54, 44, 45, 45, 48, 48,
	47, 46, 46, 49, 49, 49, 52, 52, 50, 50,
	51, 84, 84, 67, 68, 68, 68, 68, 68, 63,
	63, 63, 65, 66, 80, 80, 81, 81, 69, 69,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 76, 76, 72, 72, 64, 64, 64, 64, 64,
	64, 73, 74, 77, 78, 75, 75, 75, 75, 82,
	82, 82, 83, 83, 71, 71, 90, 90, 92, 92,
	93, 93, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 91, 91, 85, 87, 88, 89,
	96, 96, 95, 95, 97, 97, 98, 100, 100, 99,
	99, 101, 101, 101, 101, 168, 168, 167, 167, 170,
	170, 170, 170, 171, 171, 172, 172, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 320, 320,
	321, 321, 321, 322, 322, 322, 183, 183, 183, 183,
	183, 183, 184, 184, 184, 184, 185, 185, 186, 186,
	187, 187, 187, 188, 188, 189, 189, 191, 192, 192,
	192, 193, 193, 193, 194, 194, 194, 195, 195, 174,
	174, 175, 121, 121, 121, 144, 177, 177, 176, 176,
	176, 176, 178, 178, 179, 179, 180, 180, 181, 181,
	182, 182, 196, 196, 205, 205, 201, 201, 202, 203,
	203, 204, 204, 401, 199, 199, 198, 198, 200, 211,
	211, 213, 213, 212, 212, 212, 212, 214, 214, 215,
	215, 206, 206, 207, 207, 208, 208, 208, 209, 209,
	210, 210, 210, 210, 210, 216, 221, 220, 220, 224,
	224, 222, 222, 223, 226, 226, 227, 227, 227, 227,
	227, 227, 227, 227, 228, 228, 228, 228, 225, 225,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 230,
	230, 230, 230, 230, 231, 231, 232, 232, 233, 233,
	217, 217, 218, 218, 218, 218, 218, 218, 219, 219,
	102, 319, 319, 112, 112, 112, 112, 112, 133, 133,
	113, 113, 117, 103, 114, 114, 119, 119, 118, 115,
	115, 104, 190, 190, 105, 116, 116, 106, 106, 138,
	138, 139, 139, 145, 145, 145, 146, 146, 147, 147,
	149, 149, 150, 150, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 151,
	151, 156, 157, 157, 157, 157, 157, 157, 152, 152,
	158, 164, 164, 164, 164, 159, 159, 159, 159, 161,
	161, 294, 294, 294, 294, 294, 294, 294, 294, 293,
	293, 293, 292, 292, 292, 292, 292, 163, 163, 437,
	437, 162, 162, 436, 436, 384, 384, 140, 140, 141,
	141, 142, 142, 143, 143, 125, 125, 125, 125, 125,
	134, 134, 135, 135, 126, 126, 128, 129, 130, 130,
	130, 130, 130, 123, 120, 120, 120, 127, 127, 127,
	154, 154, 155, 155, 131, 131, 131, 132, 132, 124,
	124, 136, 136, 136, 137, 137, 137, 122, 122, 107,
	107, 107, 107, 107, 107, 296, 296, 296, 296, 296,
	296, 296, 296, 234, 234, 235, 235, 238, 238, 238,
	241, 249, 249, 249, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 298, 298, 299, 299, 300, 300,
	301, 301, 236, 236, 237, 237, 242, 242, 243, 243,
	244, 244, 244, 244, 245, 248, 248, 302, 302, 303,
	303, 304, 10, 32, 239, 253, 253, 254, 254, 254,
	254, 257, 257, 257, 257, 260, 260, 260, 306, 306,
	309, 309, 311, 311, 311, 311, 307, 307, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 438, 438, 28, 28, 28, 305,
	305, 308, 308, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 240, 240, 256, 256, 256, 256, 256, 256,
	256, 258, 258, 247, 247, 246, 246, 262, 262, 261,
	261, 261, 261, 266, 266, 266, 266, 266, 263, 264,
	265, 265, 265, 265, 265, 267, 267, 268, 268, 269,
	270, 270, 271, 271, 271, 297, 297, 275, 275, 275,
	275, 276, 276, 277, 277, 278, 108, 108, 259, 259,
	279, 279, 281, 281, 280, 280, 283, 283, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 284,
	284, 289, 289, 285, 285, 11, 388, 388, 388, 388,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 287, 287, 287, 288, 290, 290, 439, 439, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 335, 335, 335, 390, 390, 390, 393, 393, 393,
	393, 392, 392, 394, 394, 336, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 36,
	328, 330, 57, 57, 57, 57, 329, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 251, 251, 252, 252, 252, 252, 252, 252,
	272, 273, 273, 274, 274, 274, 274, 331, 331, 331,
	331, 397, 397, 398, 398, 399, 399, 399, 400, 400,
	400, 400, 400, 402, 402, 402, 402, 402, 403, 79,
	79, 79, 404, 404, 405, 405, 407, 407, 407, 407,
	407, 409, 409, 406, 406, 410, 410, 410, 334, 428,
	428, 411, 411, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	395, 395, 332, 332, 412, 412, 412, 414, 414, 413,
	413, 413, 413, 413, 419, 419, 420, 420, 422, 417,
	417, 418, 418, 425, 415, 415, 441, 441, 416, 416,
	423, 423, 440, 440, 421, 421, 421, 424, 424, 424,
	424, 426, 426, 333, 333, 333, 333, 153, 153, 427,
	427, 427, 427, 339, 339, 339, 339, 340, 341, 341,
	341, 341, 341, 341, 341, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 344, 344, 361, 361, 442, 442, 345, 345, 346,
	346, 362, 362, 364, 364, 364, 364, 347, 363, 363,
	365, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 378, 378, 351, 352, 352, 368,
	368, 368, 368, 367, 367, 366, 366, 373, 373, 353,
	353, 354, 354, 354, 369, 369, 370, 370, 371, 371,
	355, 355, 355, 355, 356, 356, 357, 358, 358, 372,
	372, 379, 379, 379, 379, 380, 380, 387, 381, 382,
	382, 383, 343, 343, 343, 343, 343, 359, 359, 360,
	360, 385, 385, 386, 386, 337, 337, 338, 324, 324,
	325, 323, 323, 323, 326, 326, 327, 327, 327, 327,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 389, 389, 389, 389, 166, 166, 169, 169, 160,
	160, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	432, 432, 432, 165, 165, 9, 9, 9, 9, 434,
	434, 430, 430, 430, 431, 431, 431, 431, 431, 433,
	433, 433, 433, 295, 295, 295, 295, 295, 295, 313,
	313, 29, 29, 30, 31, 31, 33, 33, 33, 33,
	34, 34, 35, 35, 35, 35, 314, 315, 315, 316,
	316, 349, 349, 350, 377, 377, 377, 377, 374, 374,
	376, 375, 375,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 2, 3,
	0, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 2, 4, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 3, 5, 3, 3, 2, 6, 7, 6,
	7, 3, 4, 4, 6, 5, 7, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 1, 1, 2, 3, 5, 6, 8, 6, 6,
	1, 3, 1, 3, 3, 5, 1, 0, 1, 2,
	4, 2, 0, 3, 3, 2, 1, 3, 4, 3,
	5, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 3, 0, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 3, 3,
	2, 4, 1, 5, 2, 5, 2, 5, 2, 3,
	3, 0, 1, 0, 3, 0, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 0, 0, 0,
	0, 1, 1, 3, 1, 1, 1, 3, 3, 1,
	2, 6, 6, 2, 1, 1, 0, 1, 3, 3,
	2, 1, 1, 2, 0, 1, 3, 2, 2, 3,
	1, 4, 2, 3, 2, 3, 2, 3, 1, 1,
	2, 2, 4, 1, 2, 3, 3, 4, 5, 4,
	5, 4, 2, 2, 2, 1, 1, 0, 5, 2,
	2, 2, 3, 1, 0, 1, 3, 9, 1, 2,
	0, 7, 7, 0, 10, 6, 0, 4, 5, 2,
	0, 1, 2, 4, 0, 1, 1, 0, 5, 2,
	4, 1, 2, 0, 1, 0, 1, 5, 1, 0,
	2, 0, 2, 6, 2, 0, 1, 3, 2, 4,
	0, 1, 3, 2, 1, 0, 1, 3, 3, 2,
	0, 2, 2, 2, 3, 3, 4, 1, 3, 3,
	2, 7, 12, 1, 3, 2, 3, 3, 1, 2,
	2, 2, 2, 1, 2, 13, 2, 2, 0, 2,
	0, 1, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 3, 3, 6, 0, 3, 0,
	2, 3, 2, 3, 4, 4, 3, 3, 0, 5,
	2, 5, 2, 0, 4, 2, 1, 0, 1, 0,
	1, 3, 3, 6, 7, 5, 7, 9, 2, 0,
	7, 1, 3, 1, 4, 4, 7, 2, 1, 1,
	1, 3, 2, 8, 1, 3, 3, 5, 2, 1,
	3, 7, 2, 0, 10, 1, 2, 9, 11, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 3, 0,
	1, 3, 2, 0, 1, 1, 3, 3, 1, 1,
	3, 3, 3, 3, 4, 4, 3, 3, 2, 1,
	3, 2, 1, 1, 1, 1, 3, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 2, 2, 1, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	0, 2, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 4, 4, 4, 5, 5,
	2, 5, 3, 5, 2, 0, 3, 1, 2, 5,
	5, 8, 3, 4, 8, 5, 0, 4, 3, 0,
	1, 3, 1, 3, 2, 2, 4, 4, 5, 2,
	0, 1, 1, 0, 2, 2, 0, 2, 0, 13,
	16, 12, 15, 14, 17, 1, 1, 2, 2, 2,
	2, 1, 0, 1, 0, 1, 3, 1, 1, 1,
	3, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 0, 2, 2,
	1, 0, 3, 0, 1, 3, 1, 1, 2, 4,
	6, 6, 10, 1, 2, 1, 3, 4, 0, 1,
	3, 2, 1, 1, 6, 2, 0, 3, 1, 1,
	2, 1, 2, 2, 2, 2, 3, 0, 1, 2,
	1, 2, 1, 3, 2, 3, 1, 2, 2, 2,
	1, 2, 3, 1, 2, 2, 2, 2, 3, 3,
	3, 1, 3, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 0, 2, 1, 4, 4, 5, 2, 5,
	5, 7, 3, 1, 5, 9, 3, 9, 4, 11,
	10, 2, 0, 1, 3, 3, 6, 4, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 3, 3, 4, 0, 1, 0, 6,
	1, 3, 3, 3, 5, 2, 0, 3, 4, 4,
	0, 2, 0, 4, 0, 3, 16, 19, 1, 0,
	2, 0, 4, 0, 1, 3, 2, 0, 4, 6,
	4, 6, 4, 4, 6, 4, 6, 5, 7, 5,
	7, 4, 6, 10, 13, 10, 13, 11, 14, 1,
	3, 1, 0, 1, 3, 1, 1, 1, 1, 1,
	2, 5, 3, 6, 4, 6, 6, 9, 5, 7,
	6, 6, 5, 5, 5, 5, 9, 4, 5, 7,
	6, 4, 8, 4, 2, 4, 3, 6, 4, 3,
	3, 3, 2, 2, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 4, 4, 3, 2, 3, 2, 2,
	3, 4, 3, 2, 2, 3, 4, 4, 4, 5,
	1, 4, 4, 4, 3, 3, 2, 1, 0, 6,
	4, 6, 4, 6, 8, 4, 6, 4, 6, 5,
	7, 2, 3, 3, 2, 5, 1, 1, 2, 3,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 3, 3, 3, 3, 2,
	2, 2, 3, 5, 5, 5, 2, 6, 6, 6,
	6, 6, 8, 8, 6, 6, 7, 9, 9, 8,
	10, 6, 6, 6, 6, 6, 6, 6, 8, 6,
	8, 6, 8, 7, 9, 6, 8, 7, 9, 8,
	10, 8, 10, 9, 11, 8, 10, 9, 11, 8,
	8, 7, 6, 6, 6, 6, 8, 8, 8, 8,
	6, 9, 0, 2, 2, 1, 2, 2, 2, 2,
	3, 1, 3, 3, 1, 5, 3, 9, 12, 7,
	7, 3, 2, 1, 3, 1, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	4, 5, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 5, 1, 4, 0, 2, 3,
	0, 1, 1, 4, 5, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 2,
	2, 1, 17, 21, 1, 1, 2, 1, 3, 1,
	1, 1, 3, 1, 2, 0, 1, 2, 4, 1,
	1, 1, 1, 1, 3, 0, 1, 0, 1, 1,
	4, 0, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 2, 0, 9, 11, 12, 14, 3, 0, 3,
	4, 4, 0, 6, 4, 9, 7, 6, 4, 6,
	6, 5, 7, 9, 6, 6, 5, 4, 4, 3,
	6, 6, 6, 6, 4, 7, 5, 8, 7, 8,
	6, 5, 8, 1, 0, 1, 0, 4, 6, 5,
	8, 2, 0, 2, 2, 2, 1, 5, 2, 0,
	2, 6, 6, 6, 10, 6, 6, 6, 9, 9,
	6, 6, 9, 6, 1, 1, 7, 7, 6, 2,
	2, 2, 2, 1, 2, 1, 0, 1, 2, 10,
	13, 5, 4, 4, 2, 0, 2, 2, 1, 0,
	11, 14, 12, 15, 8, 11, 8, 7, 9, 1,
	1, 3, 3, 5, 6, 1, 3, 1, 3, 1,
	3, 3, 7, 9, 9, 8, 6, 1, 0, 1,
	3, 3, 1, 5, 3, 8, 11, 6, 1, 0,
	5, 2, 3, 0, 2, 0, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 1, 3, 1, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 11, 13, 5, 1, 2, 2, 1, 1, 3,
	5, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -97, -102, -103, -104, -105,
	-106, -107, -108, -109, -110, -111, -331, -332, -333, -337,
	-338, -339, -340, -341, -342, -343, -344, -345, -346, -347,
	-348, -351, -352, -353, -354, -355, -356, -357, -358, -349,
	-350, -335, -336, -99, -100, -188, 112, 26, 22, 27,
	395, 94, 402, -101, -187, 532, 63, 67, -195, 36,
	519, 87, 541, 97, 98, 99, 100, 532, -146, 116,
	-296, -259, -26, 33, 415, 262, 62, 465, 455, 226,
	277, 285, 423, 104, -324, 269, 454, 452, 58, 290,
	474, 472, 67, 308, 420, 481, 85, 285, 200, 226,
	237, 248, 262, 287, 71, -437, 62, 376, 386, 388,
	410, 415, 423, 444, 413, 461, 269, 407, 104, 450,
	439, 455, 465, 277, 385, -291, -294, -293, 465, 262,
	308, 104, 67, 420, 481, 85, 285, 226, 237, 439,
	455, 195, 269, 277, -437, 388, 415, 423, 376, 413,
	461, 85, -390, 58, 424, 458, -391, -389, -166, 56,
	218, 415, 348, 407, 489, -5, 4, -18, -19, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 22,
	202, 204, 205, 206, 55, 207, 208, 209, 211, 212,
	213, 89, 70, 214, 215, 216, 24, 217, 219, 220,
	221, 222, 223, 224, 124, 227, 228, 229, 230, 231,
	142, 232, 102, 233, 234, 235, 236, 237, 112, 238,
	155, 239, 121, 122, 91, 247, 248, 249, 250, 251,
	252, 254, 255, 99, 150, 151, 256, 90, 257, 258,
	259, 260, 261, 262, 177, 27, 263, 139, 265, 149,
	266, 268, 137, 42, 269, 271, 272, 273, 274, 275,
	276, 277, 278, 280, 282, 283, 92, 284, 154, 166,
	286, 287, 288, 289, 290, 292, 295, 296, 152, 297,
	298, 299, 28, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 313, 314, 315, 97, 316,
	318, 319, 146, 504, 320, 321, 322, 323, 93, 325,
	328, 329, 330, 333, 334, 335, 336, 337, 338, 106,
	85, 339, 100, 341, 342, 343, 344, 345, 346, 347,
	132, 349, 350, 351, 352, 353, 354, 355, 358, 111,
	359, 360, 32, 140, 123, 505, 506, 503, 145, 62,
	507, 508, 125, 502, 509, 103, 365, 366, 367, 368,
	369, 370, 371, 130, 372, 129, 374, 375, 376, 378,
	379, 380, 381, 383, 384, 385, 386, 387, 113, 388,
	153, 144, 389, 390, 391, 392, 84, 133, 394, 395,
	396, 397, 398, 399, 400, 34, 401, 402, 403, 35,
	404, 405, 406, 408, 409, 410, 411, 128, 413, 414,
	147, 416, 417, 88, 418, 419, 420, 421, 422, 423,
	94, 426, 428, 429, 430, 431, 432, 108, 434, 435,
	436, 437, 438, 439, 114, 115, 440, 441, 442, 148,
	443, 444, 446, 447, 105, 449, 450, 109, 452, 453,
	454, 455, 456, 459, 461, 463, 464, 465, 466, 467,
	468, 469, 143, 470, 50, 473, 474, 475, 98, 476,
	477, 478, 479, 156, 184, 480, 481, 482, 483, 484,
	486, 169, 487, 141, 488, 499, 500, 57, 37, 174,
	170, 190, 180, 179, 225, 189, 188, 29, 279, 176,
	293, 294, 501, 187, 172, 186, 167, 161, 163, 164,
	160, 162, 157, 165, 159, 127, 158, 326, 340, 182,
	183, 356, 357, 361, 171, 362, 363, 377, 178, 175,
	412, 427, 173, 445, 185, 460, 462, 87, 181, 490,
	491, 492, 493, 494, 134, 495, 496, 497, 498, 126,
	-393, -392, 56, 458, 424, -166, 21, 218, 58, 348,
	407, 415, 489, -101, -99, -100, -187, -179, -180, 21,
	41, -320, -318, -321, -5, 66, 424, 458, 56, 542,
	-189, 84, -191, -7, -5, -189, 532, -3, 73, -322,
	-320, 64, 73, -98, -97, -318, 67, 481, 84, 420,
	308, 287, 386, 461, 118, 200, 34, -17, -5, 28,
	-14, -5, -91, -93, -5, 11, -94, 535, 536, 537,
	538, 539, 540, 526, 527, 528, 18, 19, 20, -14,
	88, -14, 28, -7, 28, 247, 67, -7, 28, 337,
	85, 461, 454, 452, 454, 452, -320, 28, 21, -318,
	28, 21, -318, 28, -318, 28, 481, 67, 247, -329,
	-396, -63, -5, 4, -18, -20, 210, 116, 226, 25,
	81, 243, 117, 79, 44, 76, 52, 53, 75, 77,
	46, 82, 54, 80, 364, 78, 48, 451, 119, -14,
	-14, -7, -14, -328, -396, -11, -388, -9, 242, 246,
	425, 4, -18, -19, -20, 322, 222, 280, -7, 28,
	-328, -7, -328, -7, -7, -7, -7, -7, 461, -11,
	-11, 337, -7, -14, 88, -14, -7, 28, -16, -14,
	28, -12, -7, -7, 28, -163, 28, -67, -68, -69,
	-70, -76, -72, -75, -63, 187, 172, 173, 174, 175,
	176, 177, 188, 189, 171, 190, -77, -78, -73, -74,
	185, 56, 4, -18, 170, -64, 179, 180, 181, 182,
	183, -163, 28, 25, 337, 481, 247, 67, 88, 341,
	461, 322, 481, -390, 424, -390, 220, 210, -430, 432,
	-431, 319, 390, 253, 31, 64, 61, 528, 534, 57,
	-62, 7, -62, -432, -62, 40, -165, -9, -62, 507,
	57, 319, 210, 533, 533, -168, -167, -170, -38, 537,
	-40, 535, 536, 31, -90, -42, -41, 13, 532, -44,
	-43, -100, 29, 135, -50, -51, 294, 11, 62, -5,
	-60, 6, -62, 49, 43, 47, 38, -86, 412, 12,
	-396, -167, 74, 537, -55, -58, 534, 530, -318, 532,
	532, 542, -189, -23, 532, -84, -38, -319, -318, 94,
	-5, 23, -322, -322, 533, -153, 532, -318, 28, -318,
	481, -318, 28, -27, 25, -396, -396, -7, 461, -396,
	-296, 474, 210, -326, 31, -384, 23, -80, 534, -314,
	532, 534, -314, 23, 369, 258, 453, 232, -314, 64,
	31, -28, 36, 519, 31, 141, -318, 28, -369, 465,
	31, 131, 28, 481, -7, -284, -287, 399, -286, 208,
	257, 197, 22, 27, 478, 94, 224, 265, 259, 310,
	355, 123, 31, 366, 402, 401, 154, -30, 508, 29,
	45, -284, -288, 399, 208, 29, 45, -284, 399, -307,
	-310, 355, 23, 214, 91, 306, 336, 339, 343, 365,
	420, 437, 403, 474, 29, -284, 399, 29, -318, 28,
	21, -320, 28, 141, 399, -36, 532, -55, 399, 399,
	399, 399, -290, 27, 94, 197, 478, 399, -36, 399,
	-7, -14, -14, 74, 29, 399, 399, 399, 399, 399,
	-370, -30, 480, 399, 74, 74, -7, 399, 399, 131,
	399, 399, 369, 258, 453, 232, 399, 197, 27, 98,
	-378, 197, 27, 29, 542, -317, 24, 35, 29, 542,
	-317, 74, 29, 542, -317, 29, -81, -80, 532, -71,
	532, 178, -81, -81, -81, 532, -82, 519, 520, 532,
	-82, -83, 184, 532, -83, -83, 179, 180, -83, -317,
	29, -16, 28, 131, 28, 141, 369, 258, 453, 232,
	-27, 220, 23, -165, 40, 542, -431, -62, 328, 66,
	488, 253, 121, -169, 40, -160, -164, -159, 49, 43,
	74, -165, 6, 535, 536, -61, -60, -169, 40, -5,
	-429, -62, 4, -159, 40, 58, 49, 43, 74, 505,
	-434, 261, 235, 328, -182, 73, 542, 14, 535, 536,
	537, 538, 539, 540, 526, 527, 528, 18, 19, 20,
	30, 33, 52, 53, 54, 46, 517, 44, 39, 55,
	-90, 37, 45, 48, 23, -8, 62, 4, -22, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 21, 201,
	22, 202, 203, 120, 511, 95, 204, 205, 206, 60,
	207, 208, 209, 210, 211, 212, 213, 174, 116, 170,
	190, 512, 89, 70, 214, 215, 216, 24, 217, 38,
	513, 218, 219, 220, 514, 221, 222, 223, 224, 225,
	226, 515, 124, 227, 228, 229, 230, 231, 25, 142,
	232, 102, 233, 118, 234, 235, 236, 237, 112, 238,
	81, 155, 239, 121, 240, 241, 242, 243, 244, 245,
	246, 122, 91, 247, 248, 250, 189, 188, 251, 40,
	252, 253, 254, 255, 99, 150, 151, 256, 90, 96,
	257, 258, 259, 260, 41, 110, 261, 262, 177, 27,
	263, 264, 139, 265, 149, 266, 267, 268, 137, 42,
	269, 271, 272, 273, 274, 29, 275, 276, 277, 278,
	279, 43, 280, 283, 92, 176, 284, 154, 285, 166,
	286, 117, 79, 287, 288, 289, 290, 292, 293, 294,
	295, 296, 152, 297, 299, 28, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	76, 501, 314, 315, 97, 316, 187, 172, 186, 318,
	319, 75, 167, 161, 163, 164, 160, 162, 157, 165,
	159, 127, 158, 146, 504, 320, 321, 322, 323, 93,
	324, 327, 325, 326, 77, 328, 329, 330, 58, 331,
	332, 333, 334, 335, 336, 337, 338, 106, 85, 339,
	100, 340, 341, 343, 344, 346, 347, 348, 182, 82,
	183, 132, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 31, 111, 359, 360, 47, 361, 32, 171,
	140, 123, 505, 506, 503, 145, 66, 507, 508, 125,
	502, 362, 80, 363, 103, 365, 366, 367, 368, 369,
	370, 371, 130, 372, 129, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	113, 388, 153, 144, 389, 390, 175, 391, 392, 84,
	133, 393, 394, 395, 396, 397, 398, 399, 400, 34,
	401, 402, 403, 35, 404, 405, 406, 78, 407, 408,
	409, 410, 411, 412, 128, 413, 414, 147, 415, 416,
	417, 88, 419, 63, 420, 421, 422, 423, 424, 425,
	94, 427, 426, 428, 429, 430, 431, 173, 432, 433,
	108, 434, 435, 436, 437, 438, 439, 114, 115, 440,
	441, 442, 148, 443, 444, 445, 446, 59, 447, 105,
	448, 67, 449, 451, 450, 109, 452, 453, 454, 455,
	107, 456, 56, 185, 457, 458, 459, 460, 461, 462,
	49, 463, 464, 465, 466, 467, 468, 469, 143, 470,
	472, 50, 473, 474, 475, 98, 104, 83, 476, 477,
	478, 479, 156, 87, 181, 191, 119, 480, 481, 482,
	483, 51, 484, 487, 141, 488, 489, 490, 491, 492,
	493, 494, 134, 495, 496, 497, 498, 126, 500, 57,
	-38, -38, -38, -38, -56, -38, -84, -100, 87, -55,
	-100, -100, -49, 530, 532, 532, -55, -45, -38, -87,
	532, 532, -182, 532, -58, -65, 537, -6, 4, -18,
	-19, -20, -21, 21, 203, 120, 30, 511, 135, 23,
	95, 60, 512, 38, 513, 514, 39, 515, 118, 26,
	240, 241, 242, 244, 245, 246, 40, 253, 96, 41,
	110, 264, 267, 270, 43, 281, 131, 285, 64, 291,
	71, 72, 45, 312, 317, 73, 324, 327, 68, 331,
	332, 31, 47, 69, 74, 66, 33, 510, 373, 382,
	393, 101, 63, 425, 433, 59, 448, 67, 107, 61,
	457, 49, 471, 472, 104, 83, 191, 51, 65, 485,
	36, -38, -59, -318, -84, -191, 23, -12, 542, 533,
	30, 33, 52, 46, 44, 39, 55, 37, 45, 48,
	62, -112, -97, 103, 532, 40, 23, -114, -119, -118,
	532, -5, -5, -190, 83, 83, 61, -138, 64, 61,
	-13, -5, 532, 123, 371, 31, -153, -318, -361, -307,
	355, 31, -17, 28, -5, -397, 532, -397, -412, 212,
	199, 316, -7, -379, -381, 532, 481, 84, -388, -327,
	-107, -108, -332, -333, 26, 29, -67, 534, -65, -315,
	-316, -6, -91, 532, 268, 389, -14, -14, -14, -14,
	-14, 29, -362, 29, -7, 532, 371, 31, -371, -370,
	-62, 29, -372, -388, 104, 31, -325, 28, -318, 74,
	542, 61, -439, 118, 515, 371, 371, -239, 28, 515,
	-240, -5, 118, -256, 514, 472, 382, 285, 271, -439,
	118, -439, 118, 118, 169, 336, 474, 195, 450, -272,
	532, 74, 461, 202, 401, 413, 412, 461, 413, 412,
	-318, 310, 154, -14, 123, 61, -272, 299, 412, 532,
	-320, 450, 61, 371, -318, 450, 61, -310, 91, 339,
	343, -68, -159, -438, 70, -159, -159, 70, 347, -28,
	-28, -318, 61, -439, -318, -284, 399, 29, 45, -284,
	399, 29, -7, 61, 533, 61, 61, 61, 61, 118,
	40, 31, 118, 40, 31, -385, 118, -386, 514, 31,
	118, 61, 61, 399, 83, 83, -318, -7, 61, 61,
	61, 61, 61, -30, -62, 47, 61, -318, -318, 399,
	-377, 265, 259, 61, 61, -372, 61, 61, -14, -14,
	-14, -14, 61, 209, 156, 156, 156, -363, -292, -291,
	200, 513, 262, 287, 62, 386, 410, 459, 465, -294,
	248, 407, 444, 450, 308, -16, -14, -12, -7, -14,
	-7, -67, -163, -81, -84, -60, -60, 56, 56, -60,
	532, -60, -83, -83, -163, -317, 29, -372, 29, -318,
	458, -431, -433, 390, 400, 422, 542, -60, 6, -60,
	6, -171, 64, -318, -170, -67, -38, -38, -38, -38,
	-38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
	47, 31, -38, 46, 44, 37, 45, 48, -38, -14,
	56, 58, -38, -96, 59, 60, -95, -100, 532, 61,
	-6, -58, 533, 542, -84, -52, 531, -49, -84, -91,
	-48, -47, 51, -88, -84, 533, 533, -53, 191, 21,
	41, -54, -38, -66, -63, -171, -84, 531, 543, 533,
	533, -192, 85, 31, 533, -38, -120, 74, -133, 104,
	105, -113, -117, -5, 87, -5, -171, 542, 528, -115,
	-118, -56, -121, 65, -172, -173, -320, -100, 86, -183,
	532, -196, -206, -216, -197, 128, 126, 127, -5, -86,
	-173, -139, 113, -139, 542, 533, -234, -235, -238, -239,
	-241, -240, 46, -14, 123, 29, -283, 36, 532, 29,
	74, 31, 405, -404, -405, -407, 23, 322, 459, 485,
	-408, 216, 442, 301, 435, 483, 278, 419, 325, 31,
	238, 128, 446, -395, 367, 94, -336, -398, 533, -399,
	-400, -402, -66, -79, 45, 362, 501, 191, -63, -67,
	427, -404, 405, -414, -413, 97, 99, 98, 463, 123,
	199, -314, 537, -380, 510, -382, -387, -383, -400, 4,
	-318, 481, -326, -296, -26, -17, -5, -253, -65, 533,
	542, 528, -199, -198, -200, -5, 532, -314, -314, -314,
	-314, -314, -14, -364, 415, 480, 64, 24, -7, -366,
	-367, -368, 296, 355, 479, -234, 123, 29, 285, -7,
	423, 29, 23, 31, -153, -6, -286, -7, -7, -7,
	-318, -318, 31, -239, 28, -67, -7, 532, -260, -278,
	32, 83, 504, 504, -279, 83, -5, -60, -7, 28,
	-5, 28, -7, -7, 506, 224, 341, -7, -273, -274,
	-6, -7, -7, 21, 104, 461, 413, 461, 413, -7,
	328, -7, 21, 104, -7, 328, -318, 412, -388, -35,
	111, 79, 40, 83, 328, -31, -33, -304, 94, 197,
	27, -10, -6, -284, -287, 399, -7, -7, -318, -284,
	399, -7, -7, -159, -14, -14, -159, -159, -284, 399,
	-307, -7, -7, -284, 399, 61, -439, -318, 450, 61,
	-439, -320, 399, -366, -367, -7, -7, -7, -7, -7,
	-7, 47, -7, 28, -38, 47, -7, 532, 47, -7,
	-7, -11, 61, -7, -7, 399, 74, -7, -7, -7,
	-7, -7, -7, 399, 399, 61, 401, 202, -11, -11,
	423, -7, -7, 399, 399, 399, 399, -7, -7, -62,
	-25, 28, -62, -365, 61, -7, -14, -329, 532, -67,
	-328, -330, 222, 280, -91, -328, -328, 131, -67, -317,
	-317, -317, 74, -317, 533, 533, 533, 57, 57, 533,
	-84, 533, -317, -16, 423, 131, -323, 36, -430, 469,
	230, 390, -160, -174, 65, -172, 47, 42, -38, -38,
	-96, 59, -95, 61, 42, 57, -39, -40, 535, 536,
	-39, -84, -38, -56, -38, 531, 531, 542, 533, 533,
	-46, -47, 264, -38, -89, 533, -85, 542, -54, -53,
	-53, 16, 17, -174, 533, -59, -38, 532, 85, -122,
	101, 102, 156, 533, 542, -56, -121, -119, -38, 533,
	542, -122, -38, 121, 542, 81, -184, 75, 82, 79,
	77, 78, 76, -177, -176, 23, -5, -177, -100, -196,
	-206, -216, -100, -183, -173, -177, -177, -177, -205, 519,
	64, 532, 532, -55, 74, -145, -62, 114, 115, -145,
	-5, 533, 542, -318, -236, 532, -318, -318, 23, -272,
	-13, -318, -320, 29, -403, 67, 47, -79, -63, -410,
	-334, 213, 404, -407, -409, -62, -165, -406, 131, 74,
	419, 255, 318, 325, -159, -159, -14, -5, -391, 424,
	458, 533, 542, 40, 528, -66, -79, -402, -79, 362,
	-80, -63, -410, 74, 33, 123, -414, 533, 533, 510,
	542, 70, 533, 542, 528, -153, -318, 210, -326, -254,
	118, -255, -257, 39, 31, 47, 472, 382, 514, 40,
	393, 289, 253, 312, -316, -295, -79, -21, -92, -159,
	-62, 356, -93, 62, 535, 536, 533, 542, -67, -359,
	-360, -62, -314, 64, -7, -165, -165, -28, -302, 508,
	-368, -373, -7, 296, 479, -373, 533, -318, -318, 247,
	-369, -7, 131, -97, 29, -297, 83, 274, 51, 61,
	61, -244, 131, 40, -27, 283, 29, 31, -301, -300,
	440, -256, 271, -38, 532, -251, 41, 31, 308, 532,
	-278, 532, 532, -7, -290, 27, 94, 402, 197, -309,
	-162, -30, -311, 403, 94, -251, 29, -317, 29, -317,
	-34, -5, 40, 533, 542, 528, 534, -7, -7, -7,
	-7, 419, 419, 328, 308, 419, 533, 542, -304, -304,
	-10, -32, -62, 61, -439, 118, 94, 365, 61, 94,
	365, 61, 61, 61, -439, -7, -7, -284, 399, -7,
	-7, -7, -284, 399, 61, -30, 61, -317, 29, -386,
	-38, -251, -7, 399, 399, 61, -318, 61, 61, -7,
	-7, 61, 61, 61, 61, 61, 61, -62, 31, -165,
	-67, -14, -14, -57, 532, -67, -14, -82, -82, 533,
	-317, -7, -372, 247, 355, -38, -38, 42, 42, -39,
	-39, -38, -38, -38, 30, 14, 535, 536, 537, 538,
	539, 540, 526, 527, 528, 18, 19, 20, -39, -39,
	30, 533, 42, 533, -49, 267, -38, 107, 533, 191,
	-54, -85, -85, 542, -85, -38, -38, 531, -98, -167,
	-127, 532, 74, -97, -97, 103, -117, -122, 528, -118,
	123, -173, 75, 75, -173, -184, 75, -185, 80, -185,
	-185, -5, 532, -177, -177, -177, -177, 533, 125, 532,
	-40, 134, -221, -38, -38, -28, -147, -436, 83, -267,
	311, -238, -249, -268, -269, 371, -237, -242, -243, -240,
	-5, -236, 532, 123, 371, -97, 533, -361, -279, -7,
	-404, 532, 74, 207, -38, 542, 542, 465, 47, 255,
	318, -399, -38, -38, -79, -79, 539, -80, -318, -413,
	-13, 74, 70, -387, -380, -383, 4, -295, -283, 532,
	-388, -7, -14, 253, 47, -260, 504, 532, -39, -318,
	-306, 202, 70, 254, 300, 532, -200, -211, 39, 533,
	542, -14, -362, 532, -80, -267, -236, 532, 371, 141,
	-371, -302, -372, -323, -325, -283, -7, -440, 287, 386,
	-374, -376, -5, -7, -7, 87, -239, 29, -299, -298,
	231, -5, 40, 533, -13, -252, 31, 253, 312, 355,
	41, -7, -13, -251, -13, -247, -246, -131, -5, -197,
	532, 31, 276, 299, 247, -310, 289, 31, 276, 439,
	-272, -300, -298, -272, 289, -311, 94, 465, -28, 439,
	-5, -7, -274, -295, -6, 419, -7, -33, -7, -7,
	-7, 450, 70, -7, 450, 70, -7, -7, -7, -7,
	61, 61, -439, 94, 365, 61, 61, -439, -7, -7,
	-7, 533, 61, 61, -7, 399, -7, -7, -30, -7,
	-7, -7, -7, -7, -62, 212, 199, 29, 23, 83,
	83, -67, 356, 322, -317, 423, 247, -38, -38, 30,
	30, 42, -38, -67, -39, -39, -39, -39, -39, -39,
	-39, -39, -39, -39, -39, -39, -38, -38, -38, -54,
	533, 533, 533, 533, 110, -155, -131, 118, -133, -38,
	-144, -7, -173, -173, -186, 83, 74, 75, -173, 532,
	-12, -176, -201, -202, -197, -212, 130, 532, 542, -232,
	-231, 516, -116, -125, -134, -135, 51, -149, -150, 532,
	-28, 151, -268, 532, 305, 272, -297, 70, 533, 542,
	-253, 36, -244, -234, -14, 123, -427, 36, -283, 532,
	74, -410, -204, -401, -66, -63, 47, -428, -62, 131,
	-67, 314, 465, 539, -419, 394, -318, -380, 533, 23,
	-13, -326, -255, 31, -313, 36, -313, -38, -153, 23,
	40, -91, -14, -62, -303, -304, 423, -244, -234, 123,
	-7, 285, 423, 23, -276, 450, -396, 274, 30, 45,
	36, 45, 64, -239, -302, -5, 40, -251, 533, 253,
	477, 300, 254, 310, 533, 533, 533, 542, 36, -132,
	-124, 39, -132, -38, 47, 28, 28, -306, 47, 23,
	-161, -61, 40, 535, 536, -306, -67, -159, -161, -317,
	-317, 528, 61, 61, -7, -285, -388, -7, -285, 61,
	-7, -7, -7, 450, 70, -7, -7, -7, -317, -251,
	-7, -7, 61, -317, -62, -62, -67, -7, -7, 533,
	542, 542, -7, -7, -38, -38, -38, -85, -193, 88,
	98, 111, 533, 542, -7, 156, -186, 532, -38, -173,
	-12, 533, 533, 542, -203, 23, 124, -40, -213, 70,
	-214, -215, -39, 40, -38, 167, -122, -125, -126, 30,
	-126, 106, 31, -148, 116, 117, 150, 47, 155, 152,
	153, 42, 154, 149, -151, -156, -6, -149, -62, -297,
	-15, -318, -250, 228, 231, 234, 252, 299, 289, 309,
	439, 440, 21, -250, -37, 36, 169, -5, -242, 508,
	-268, 533, -236, -318, 514, 217, 58, 23, -155, -320,
	542, 533, -79, 314, 267, -411, -4, -334, 465, 465,
	-415, 131, -420, -422, -417, 349, 503, -426, 64, 533,
	-97, 533, -277, 83, -314, -277, 533, -261, 338, 299,
	532, 533, 533, 542, -7, 423, 533, -318, -302, 247,
	-7, -97, -7, 532, -440, -376, 532, 532, 532, 532,
	-253, -262, 304, -262, 393, -262, -246, -91, 62, -282,
	-14, -14, 533, 29, 29, 532, 23, -211, -295, -7,
	-7, -289, 360, 94, 542, -289, 94, -7, 61, -7,
	-285, 61, -7, 533, -67, 356, -67, 533, -194, 91,
	90, 89, 94, -174, -131, -97, -12, 533, -205, -202,
	532, -207, -208, -5, -213, 70, -40, 133, 156, 542,
	533, 23, -39, -220, 23, 149, 107, -38, 107, 106,
	-384, -384, -384, -384, 153, 31, 47, -62, 533, 542,
	-157, -164, -159, 537, 40, 532, -174, -37, 542, 533,
	-275, 74, -272, 506, 532, -253, -297, -267, -268, -236,
	507, 514, 514, -97, 533, -279, -401, -404, 541, -67,
	-423, 51, -441, 263, -422, -418, 67, 412, -251, -318,
	-427, -283, 308, -258, 355, -266, -263, -264, 74, 79,
	370, 430, -308, 532, -38, -304, -302, -7, -267, -236,
	141, -302, -323, 533, -396, -375, 7, -248, -245, -9,
	-84, -84, -313, 532, -313, -318, -313, 532, -136, 95,
	96, -272, -132, -38, 299, -29, 83, 450, -388, 450,
	-7, -289, 94, -7, 533, 533, 533, -13, 92, 92,
	-114, 533, -198, 533, 542, -67, 131, -213, -215, 542,
	-6, -224, 130, -5, -7, -128, -129, 110, 98, 99,
	-130, 110, 97, 70, -62, -62, -62, -62, -13, 537,
	47, -13, 537, -156, -152, -158, -164, -275, -318, -276,
	229, -270, -271, -5, -197, 532, -37, -268, -297, -244,
	507, 507, -427, -281, 304, 532, -410, 274, 532, -416,
	412, 438, -384, 131, 23, 450, 310, -264, 74, -263,
	74, 98, 99, -307, 533, -302, 423, -244, -7, 532,
	533, 542, 533, 542, -60, 533, 533, -277, -13, -277,
	-153, -277, -91, -137, 518, -136, 533, -308, -38, -7,
	-7, 450, 94, 70, 70, -174, -178, 23, 533, -208,
	-209, -210, 4, 40, 31, 47, 129, 125, -40, 124,
	-222, -223, -221, 111, 94, 111, -123, 103, 532, 40,
	87, 108, 109, -13, 537, 533, 542, -276, 27, 99,
	381, 533, 542, -124, -124, -38, -275, -297, -37, -268,
	-260, 532, -155, -440, -38, -425, -5, 263, -97, -7,
	-265, 355, 35, 24, 94, -265, 533, 441, -7, 423,
	-302, 533, 7, -245, 61, -251, 533, -251, -261, -174,
	533, 92, 93, -137, -289, -289, -7, -5, -13, -13,
	-5, -210, -39, -39, 47, -39, -212, 532, 542, 23,
	-114, -133, -113, 87, 532, -158, 128, 128, -271, -282,
	-14, -282, 533, -276, -37, -275, -297, -283, -280, -131,
	533, -396, 533, 412, -427, 196, 47, 40, -302, -7,
	532, -266, -251, -289, 61, 83, 94, 94, 124, -217,
	-218, -5, 132, -223, -6, 156, 533, -84, -124, -275,
	-276, -37, -276, 533, 542, -281, 532, -423, -153, -153,
	-302, -84, -251, -41, -5, -5, -5, -207, 533, 542,
	131, -67, -233, 129, -123, -123, 103, 533, -282, -276,
	-275, -174, -131, -260, -421, -424, -60, 6, -62, -6,
	274, 533, 40, 533, -225, -226, 40, -227, 137, 47,
	49, 43, 50, 139, -218, 125, -219, -231, 29, 129,
	7, -133, -276, -283, 533, 542, -440, -41, 533, 74,
	-38, 135, 140, -229, 169, 36, -219, -219, 7, 124,
	23, 156, -276, -424, -396, 83, 137, -230, 146, 145,
	141, 135, 141, 135, 142, 143, -229, -225, 532, -7,
	-123, -174, 532, -5, -228, -226, 144, 144, 141, 141,
	135, 141, 135, 141, -230, -217, 124, -421, 74, 74,
	74, 141, 141, -228, 533, 532, 533, 139, 137, 147,
	147, -217, -226, 148, 148, 533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 1254, 1255, 0, 1487, -2, 1550, 1550,
	0, 0, 0, 1259, 1313, 0, 1345, 0, 1264, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1615, 1616, 0, 0,
	-2, 1788, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1549, 0, 0, 0, 0, 0,
	1930, 0, 1926, 1927, 1928, 0, 0, 1932, 1933, 1934,
	0, 0, 0, 1533, 0, 1536, 1537, 1538, 1539, 1540,
	1541, 0, 1911, 243, 354, 388, 1916, 2270, 0, 471,
	127, 344, -2, 335, 421, 2285, 62, 63, 64, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 333, 334, 336, 337, 338, 339, 340, 341, 342,
	343, 345, 346, 347, 348, 349, 350, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 422, 423, 424, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	1925, 1917, 471, 388, 354, 1921, 1922, 127, 243, 261,
	335, 344, 421, 1260, 0, 0, 0, 1266, 0, 1344,
	1346, 1263, 1288, 1289, 77, 0, 354, 388, 471, 0,
	1310, 318, 1315, 80, 72, 1311, 0, 2, 0, 0,
	1293, 0, 0, 0, 1256, 2128, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, -2, 0, -2, 212,
	1556, 94, 0, 1244, 0, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 2149,
	0, 0, 212, 1718, 212, 0, 0, 2215, 212, 0,
	0, 0, 1617, 1618, 1619, 1620, 0, 212, 0, 0,
	212, 0, 0, 212, 0, 212, 0, 0, 0, 0,
	0, 1142, 0, -2, -2, 1181, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 0,
	0, 0, 0, 0, 0, 0, 1825, 1826, 1827, 1828,
	1829, 2305, 2306, 2307, 2308, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 212, 50, 96,
	212, 50, 73, 0, 212, 50, 212, 1547, 1173, 1174,
	1175, 1176, 1177, 1178, 1187, 1190, 1191, 1192, 1193, 1194,
	1225, 174, 1187, 1187, 1187, 1200, 1201, 1202, 1203, 1204,
	1221, 1221, 1179, 1180, 1223, 1212, 1223, 1223, 1207, 0,
	1223, 50, 212, 0, 0, 1929, 0, 1931, 0, 1531,
	1532, 1535, 58, 1912, 354, 1913, 129, 0, 1914, 0,
	2311, 0, 0, 2317, 0, 0, 0, 0, 0, 0,
	2273, 1124, 2274, 2275, 2300, 2301, 2276, 2303, 2304, 0,
	1918, 0, 1920, 1257, 1258, 1351, 1265, 1267, 1271, 1272,
	1041, 0, 0, 0, 0, 1103, 1104, 1138, 0, 1107,
	1108, 1109, 434, 0, 1114, 1115, 438, 1226, 281, 1128,
	1117, 1118, 1119, 1120, 1121, 1122, 1157, 1247, 467, 1123,
	0, 1351, 0, 1290, 78, 1130, 0, 1133, 1291, 0,
	0, 0, 1312, 0, 0, 0, 1171, 0, 1451, 0,
	1294, 0, 1473, 0, 0, 0, 0, 0, 212, 2128,
	0, 2164, 212, 45, 57, 0, 0, 0, 0, 0,
	0, 1621, 0, 2134, 0, 0, 1555, 95, 0, 2147,
	0, 0, 2148, 0, 0, 0, 0, 0, 2154, 0,
	0, 2172, 1716, 1717, 0, 0, 0, 212, 2219, 0,
	0, 0, 0, 0, 0, 1798, 1811, 1898, 1819, 0,
	0, 0, 1898, 1898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1890, 0, 0,
	0, 1800, 1802, 0, 0, 0, 0, 1803, 0, 2167,
	1696, 0, 0, 0, 1700, 1715, 1703, 0, 0, 0,
	0, 1718, -2, 1713, 0, 1805, 1898, 0, 0, 212,
	0, 0, 212, 0, 0, 1946, 0, 1143, 0, 0,
	0, 0, 2138, 0, 0, 0, 0, 0, 1940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2212, 2213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2179,
	1550, 2194, 2195, 0, 0, 1900, 48, 49, 0, 0,
	1902, 0, 0, 0, 1905, 0, 1188, 1187, 0, 1195,
	0, 1196, 1197, 1198, 1199, 0, 1216, 0, 0, 0,
	1218, 1214, 1222, 0, 1205, 1206, 1223, 1223, 1210, 1907,
	0, 50, 212, 0, 0, 1534, 1935, 1936, 1937, 1938,
	0, 0, 0, 2277, 2278, 0, 2313, 2280, 0, 2315,
	2316, 2318, 2271, 2281, 2283, 2287, 2289, 2290, 1521, 1522,
	1523, 1524, 1525, 0, 0, 1528, 1125, 2282, 2284, 2286,
	2272, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299,
	2279, 2309, 2310, 1919, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 858, 776, 1061, 1063, 803, 0, 750, 643, 611,
	0, -2, 755, 945, 0, 1270, 855, 70, 71, 589,
	590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 605, 606, 607, 608, 609, 610,
	612, 613, 614, 615, 616, 617, 618, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 751, 752, 753, 754,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 856, 857, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1042, 1043, 1059, 1076, 1105, 1171, 0, 1109, 475, 1110,
	1111, 1112, 1113, 0, 0, 0, -2, 0, 1156, 1248,
	0, 0, 1274, 0, 1131, 1134, 1135, 1182, 65, 66,
	67, 68, 69, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 1132, 0, 0, 0, 1316, 1320, 0, 0, 1327,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 1586, 1453, 0, 0, 0, 0, 1274, 1464, 0,
	0, 1138, 1295, 1334, 0, 0, 1482, 1482, 1479, 1480,
	0, 75, 1624, 0, 0, 0, 1797, 0, 2161, 2163,
	0, 0, 0, 212, 44, 2043, 0, 2043, 0, 2084,
	2085, 0, 0, 0, 2146, 0, 0, 0, 2265, 2264,
	2266, 2267, 2268, 2269, -2, 45, 1676, 0, 1184, 0,
	2347, 2349, 1245, 1365, 0, 0, 0, 0, 0, 0,
	2156, 0, 2169, 0, 2206, 1624, 0, 0, 0, 2218,
	2214, 0, 0, 2229, 2230, 0, 0, 212, 2128, 0,
	0, 0, 0, 0, 1897, 0, 0, 1830, 212, 0,
	1854, 0, 0, 1733, 0, 1687, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 1862, 1863, 0, 0, 1883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1876, 0, 0, 1878, 1879, 0, 1884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1697, 1701, 1706,
	1707, 1698, 1699, 0, 1714, 1704, 1705, 0, 0, 0,
	0, 0, 0, 0, 0, 1807, 1898, 0, 0, 1809,
	1898, 0, 2206, 0, 1939, 0, 0, 0, 0, 0,
	1896, 0, 0, 0, 0, 2141, 0, 2252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2211, 2216, 2217, 0, 0, 0, 0,
	2353, 2354, 2357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 2177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1542,
	1543, 1544, 1545, 1546, 1930, 50, 97, 50, 74, 50,
	0, 1548, 50, 1189, 0, 0, 0, 0, 0, 0,
	0, 0, 1208, 1209, 50, 1909, 0, 0, 0, 2263,
	0, 2312, 2314, 0, 0, 2322, 0, 1126, 1526, 1127,
	1527, 1330, 0, 1350, 1268, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, -2, -2, -2, -2, -2, -2, 1057, 1058,
	1060, 0, -2, 0, 0, 1250, 0, 0, -2, 1072,
	0, 1074, 1075, 0, 0, 1251, 1081, 1252, 0, 0,
	1269, 1139, 1138, 0, 0, 0, 1165, 1166, 0, 0,
	1162, 1158, 0, 1249, 0, 1169, 1144, 1246, 0, 0,
	0, 1150, 1152, 0, -2, 1330, 0, 1136, 1133, 1292,
	1328, 0, 1318, 0, 79, 1172, 1608, 0, 0, 1458,
	1459, 0, 1460, 1138, 1457, 1452, 1334, 0, 0, 0,
	1469, 1468, 1608, 0, 1472, 1275, 1337, 1337, 0, 1280,
	0, 1337, 1337, 1337, 1355, 340, 487, 452, 77, 1141,
	0, 0, 1481, 0, 0, 2127, 0, 1623, 1625, 1627,
	1628, 1629, 0, 1653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2057, 2042, 2044, 0, 0, 0, 2049,
	2050, 0, 2065, 2066, 2067, 2068, 0, 0, 2073, 0,
	0, 0, 0, 2078, 0, 0, 2081, 0, 2022, 2023,
	2025, 0, 0, 2032, 2033, 2034, 2035, 2037, -2, 2039,
	0, 2057, 0, 0, 2087, 2089, 2090, 2091, 2093, 2086,
	0, 2145, 0, 0, 0, 0, 2235, 2239, 2237, 1179,
	2128, 0, 2133, 0, 0, 0, -2, 2137, 1185, 2346,
	0, 0, 0, 1364, 1366, 0, 2248, 2160, 2150, 2151,
	2152, 2153, 0, 2171, 0, 0, 0, 2176, 1718, 1668,
	2205, 2203, 0, 0, 0, 0, 0, 0, 0, 2215,
	0, 0, 0, 0, 1776, 0, 1820, 1967, 0, 0,
	0, 58, 0, 1832, 212, 1651, 0, 0, 0, 2002,
	0, 0, 0, 0, 0, 0, 1552, 0, 2002, 212,
	50, 212, 50, 1856, 1859, 1861, 0, 1882, 0, 2011,
	2014, 1860, 1864, 1867, 1868, 0, 0, 0, 0, 1872,
	0, 1869, 1870, 1871, 1875, 0, 1877, 0, 1880, 1885,
	2342, 2343, 2344, 0, 0, 0, 2334, 2336, 355, 103,
	175, 0, 1672, 1799, 1812, 1898, 0, 1975, 1894, 1801,
	0, 0, 1969, 1702, 1708, 1709, 1710, 1712, 1804, 0,
	2168, 1971, 0, 1806, 1898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1947, 1948, 1949, 1950, 1951,
	0, 2139, 50, 212, 1895, 2140, 0, 0, 2002, 2144,
	1954, 1955, 0, 0, 0, 0, 0, 1961, 1962, 1963,
	1964, 1965, 1966, 0, 0, 0, 2355, 2356, 1992, 1993,
	0, 1994, 1995, 0, 0, 0, 0, 2000, 0, 0,
	0, 0, 2246, 2178, 0, 2181, 2182, 2183, 0, 2185,
	2186, 2187, 131, 193, 0, 2190, 2191, 0, 2193, 1899,
	1901, 1903, 0, 1906, 1186, 1224, 1221, 1219, 1220, 1221,
	0, 1211, 1908, 50, 0, 0, 2257, 0, 1915, 2319,
	2320, 2321, 2288, 1261, 0, 1273, 1062, 0, -2, -2,
	0, 0, 1082, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, -2, 1106, 1172, 1163, 1164, 0, 1116, 1227,
	0, 1159, 0, 0, 1140, 1168, 0, 0, 1246, 1246,
	1246, 0, 0, 1262, 1347, 0, 1132, 0, 1319, 1450,
	0, 1589, 0, 0, 0, 1462, 1608, 1465, 1466, 0,
	0, 1471, 1332, 152, 0, 0, 0, 0, 0, 1307,
	1307, 1307, 1305, 1277, 1336, 0, 1341, 1278, 1337, 1337,
	1337, 1337, 1337, 1280, 0, 1282, 1284, 1286, 1352, 0,
	0, 0, 0, -2, 0, 1718, 1483, 1484, 1485, -2,
	76, 1766, 0, 1633, 1768, 0, 1653, 0, 0, 1796,
	0, 2164, 1791, 0, 2043, 0, 0, 2038, 1187, 2019,
	2055, 0, 0, 2045, 2046, 2051, 2047, 2048, 0, 0,
	0, 2071, 2072, 2074, 2075, 2076, 2077, 2079, 2080, 354,
	388, 2021, 0, 0, 0, 0, 2031, 0, 2030, 2036,
	1187, 0, 2020, 0, 0, 0, 0, 2231, 2232, 0,
	0, 0, 2238, 0, 0, 1797, 0, 0, 2136, 1675,
	0, 1678, 1679, 0, 0, 1724, 1687, 0, 0, 0,
	0, 0, 1681, 0, 2348, 2350, 2323, 2324, 2325, 2326,
	2327, 2328, 1228, 281, 1232, 1233, 2158, 0, 1370, 0,
	2247, 2249, 2155, 0, 2173, 2174, 2175, 2172, 2196, 0,
	2204, 2199, 2207, 2200, 2202, 2201, 1766, 1653, 0, 0,
	2219, 1668, 0, 2263, 0, 1797, 0, 0, 0, 0,
	0, 1891, 0, 1663, 1892, 1893, 0, 0, 1647, 1650,
	0, 1732, 1791, 0, 0, 1736, 1685, 0, 0, 0,
	2002, 0, 0, 1790, 1834, 0, 0, 0, 0, 1847,
	0, 1853, 1690, -2, 0, 1855, 0, 1851, 0, 1858,
	1881, 2340, 2341, 2010, 0, 0, 0, 1865, 1873, 1866,
	1874, 1886, 1887, 0, 0, 1888, 2333, 0, 2337, 2338,
	2339, 1671, 1673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1973, 0, 1808, 1898, 0,
	1977, 0, 1810, 1898, 0, 2197, 0, 2142, 0, 2251,
	0, 2254, 1956, 0, 0, 0, 0, 0, 0, 1991,
	0, 0, 0, 0, 0, 0, 0, 2242, 0, 2180,
	0, 0, 0, 1941, 0, 0, 50, 1215, 1217, 1213,
	1910, 2227, 0, 2261, 0, 1329, -2, 0, 0, 0,
	0, -2, -2, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 1090,
	0, 1253, 0, 1170, 1167, 1155, 1161, 0, 1145, 0,
	1151, 0, 0, 0, 0, 1153, 1154, 1137, 0, 1607,
	0, 0, 0, 1454, 1455, 0, 1461, 1463, 0, 1470,
	0, 1276, 0, 0, 0, 0, 0, 1302, 1306, 1303,
	1304, 1339, 0, 1279, 1283, 1285, 1287, 1296, 1354, 0,
	0, 482, 0, 1437, 0, 1493, 1718, 0, 1553, 1768,
	0, 1626, 1630, 1776, 1767, 0, 0, 1654, 1656, 1657,
	1676, 0, 1624, 0, 0, 2132, 1797, 2162, 0, 0,
	2057, 0, 0, 2060, 2058, 0, 0, 0, 0, 2069,
	2070, 2024, 2026, 2027, 2028, 2029, 0, 0, 2095, 2088,
	2092, 0, 0, 2236, 0, 2240, 0, 2241, 0, 0,
	2265, 0, 1680, 1682, 1723, 2330, 2330, 0, 1728, 2128,
	0, 1688, 0, 1683, 1684, 0, 1367, 1368, 0, 2159,
	0, 2157, 2170, 0, 2208, 0, 0, 1624, 0, 0,
	0, 2224, 0, 2255, 0, 1782, 1775, 0, 2112, 2113,
	0, 2358, 0, 1979, 1985, 0, 1831, 0, 1668, 1646,
	0, 1648, 1649, 2002, 0, 2003, 0, 2005, 0, 0,
	1686, 1785, 0, 1738, 0, 0, 1743, 0, 1600, 1600,
	0, 0, 1838, 1848, 1551, 1694, 0, 0, 0, 0,
	1842, 1844, 1845, 1843, 0, 1691, 0, 0, 0, 0,
	50, 50, 2012, 2013, 2016, 1889, 2345, 2335, 1968, 0,
	0, 0, 0, 1976, 0, 0, 1970, 1981, 1972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1953, 1952,
	50, 2002, 0, 0, 1959, 0, 1989, 1990, 2226, 1996,
	1997, 1998, 1999, 50, 2245, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 1904, 0, 2262, -2, -2, 0,
	0, 0, -2, 1088, 1091, 1092, 1093, 1094, 1095, 1096,
	-2, -2, -2, -2, -2, -2, -2, -2, 1160, 1246,
	1146, 1148, 1149, 1323, 0, 0, 1592, 0, 0, 1467,
	1333, 1335, 1297, 0, 1299, 0, 0, 0, 1301, 0,
	0, 1281, 0, 1356, 1360, 0, 0, 0, 0, 1396,
	1436, 0, 1608, 1475, 1575, 1575, 0, 1477, 1490, 0,
	1493, 0, 1776, 0, 0, 0, 61, 0, 1652, 0,
	1658, 0, 1768, 0, 1653, 0, 2123, 0, 0, 0,
	0, 2017, 0, 1361, 0, 1183, 0, -2, 2052, 0,
	2053, 2063, 2040, 0, 2105, 0, 2122, 0, 2233, 0,
	0, 2135, 1677, 0, 1784, 0, 1784, 0, 1752, 0,
	1689, 0, 1369, 2250, 0, 1669, 0, 0, 0, 0,
	1668, 0, 0, 0, 2260, 0, 0, 0, 0, 0,
	0, 0, 0, 1833, 1676, 1644, 1645, 1734, 1748, 2004,
	2008, 2006, 2007, 2009, 1748, 0, 1748, 0, 0, 1594,
	47, 0, 1595, 0, 1835, 0, 0, 1695, 1836, 0,
	1840, 1529, 1530, 0, 0, 0, 1370, 1693, 1841, 1850,
	1857, 0, 0, 0, 1822, 0, 1823, 1822, 0, 0,
	1983, 1974, 0, 0, 0, 1987, 1978, 0, 2143, 2253,
	1957, 1958, 0, 2001, 2243, 2244, 0, 2188, 2189, 1942,
	0, 0, 2192, 2228, -2, -2, -2, 0, 1326, 0,
	0, 1585, 1330, 0, 1588, 0, 1298, 0, 1309, 1300,
	0, 1340, 1355, 0, 1358, 0, 0, 1373, 0, 121,
	0, 1377, 0, 0, 1398, 1435, 1474, 1476, 0, 0,
	0, 1570, 0, 1492, 1494, 1495, 1556, 1556, 1498, 1499,
	1556, 1556, 0, 0, 0, 1509, 1517, 1330, 1488, 61,
	0, 81, 1631, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1632, 1780, 0, 0, 0, 1655, 1676,
	1776, 1766, 1768, 1653, 0, 0, 0, 0, 0, 1791,
	0, 2043, 1363, 2064, 2056, 0, 2061, 2062, 0, 2041,
	2111, 2107, 2094, 2096, 0, 2099, 2100, 2002, 0, 2234,
	2132, 1797, 1725, 0, 2329, 1726, 1742, 1757, 0, 1722,
	0, 1229, 1667, 0, 1668, 0, 1766, 1653, 2209, 0,
	1668, 2263, 1781, 0, 0, 2359, 0, 0, 0, 0,
	1674, 2330, 0, 2330, 0, 2330, 1744, 1745, 281, 1603,
	46, 1599, 1600, 1839, 1849, 0, 0, 2332, 2015, 1980,
	1986, 1813, 1821, 0, 0, 1815, 0, 1982, 0, 1822,
	0, 0, 1960, 2184, 0, 0, 0, 1147, 1317, 0,
	0, 0, 0, 1587, 1593, 1456, 0, 1338, 1353, 1357,
	0, 0, 1383, 0, 1374, 0, 1375, 1371, 1372, 0,
	0, 0, 1380, 1400, 0, 0, 0, 1574, 0, 1572,
	0, 0, 0, 0, 0, 0, 0, 1508, 1491, 0,
	1511, 1512, 1513, 1514, 1515, 0, 1478, 1780, 0, 1765,
	1782, 0, 59, 60, 0, 1659, 61, 1768, 1776, 0,
	2129, 0, 0, 2132, 1793, 0, 1362, 2057, 2059, 2054,
	0, 0, 0, 2106, 2097, 1556, 2101, 2102, 0, 2121,
	2124, 0, 0, 1727, 0, 1729, 1753, 1754, 0, 1749,
	1750, 1751, 1730, 0, 0, 1670, 2220, 1668, 0, 0,
	0, 2225, 2256, 2351, 0, 0, 2361, 0, 1665, 0,
	0, 0, 1784, 0, 1784, 2128, 1784, 0, 1606, 1601,
	1602, 1603, 1596, 0, 1722, 1852, 0, 0, 1824, 0,
	1984, 1817, 0, 1988, 1943, 1945, 1944, 0, 0, 0,
	1330, 1343, 0, 1381, 0, 1385, 0, 1376, 1378, 0,
	1379, 0, 0, 1397, 1434, 1565, 1566, 0, 0, 1577,
	1567, 0, 0, 0, 1496, 1497, 1500, 1501, 1502, 1503,
	0, 1506, 1507, 1510, 0, 1518, 1520, 1782, 82, 1611,
	0, 0, 1770, 1600, 1600, 0, 1780, 1776, 61, 1768,
	2130, 2131, 2125, 1687, 0, 0, 2018, 0, 0, 2104,
	2108, 2109, 0, 0, 0, 0, 1741, 1755, 0, 1756,
	0, 0, 0, 0, 0, 2222, 0, 0, 1668, 0,
	2360, 0, 1660, 0, 1664, 1661, 0, 2002, 0, 2002,
	1752, 1330, 0, 1597, 0, 1606, 1837, 1846, 2331, 1822,
	1822, 0, 0, 0, 0, 1584, 1308, 0, 1359, 1384,
	1387, 1388, 0, 0, 0, 1393, 0, 1386, 0, 0,
	1399, 1401, 0, 1568, 0, 1569, 1578, 0, 0, 0,
	0, 1571, 1573, 1504, 1505, 1516, 0, 1609, 1777, 0,
	0, 1769, 0, 47, 47, 0, 1782, 61, 1780, 1776,
	1797, 0, 0, 0, 0, 2098, 2103, 0, 2132, 1783,
	1758, 0, 1761, 1762, 0, 1759, 1721, 1731, 1668, 0,
	2210, 2352, 2362, 1666, 0, 1735, 1747, 1737, 1757, 2002,
	1746, 1604, 1605, 1598, 1814, 1816, 1822, 0, 0, 0,
	1342, 1389, 1390, 1391, 1392, 1394, 0, 0, 0, 0,
	1576, 0, 0, 1582, 0, 1519, 1778, 1779, 1771, 1772,
	46, 1773, 1600, 1613, 1780, 1782, 61, 1782, 0, 1794,
	1793, 0, 2110, 2111, 2126, 1760, 2128, 2128, 2221, 1668,
	0, 2002, 1740, 1818, 0, 0, 0, 0, 0, 0,
	1440, 0, -2, 1402, 1403, 0, 0, 0, 47, 1782,
	1612, 1780, 1330, 1792, 0, 1687, 2116, 0, 1763, 1764,
	2223, 0, 1739, 0, 1325, 1321, 1322, 0, 1419, 0,
	0, 1449, 0, 1438, 1579, 1580, 0, 1583, 1774, 1610,
	1782, 1786, 1795, 1797, 0, 2114, 2117, 2118, 2119, 2120,
	0, 1662, 0, 1382, 0, 0, 0, 1405, 1406, 1407,
	1408, 1409, 1410, 1413, 1441, 1442, 1428, 1449, 1449, 0,
	0, 0, 1614, 1782, 2082, 0, 0, 0, 1395, 0,
	1404, 1411, 1412, 1433, 0, 0, 1428, 1419, 1448, 0,
	0, 0, 1330, 2115, 0, 0, 1418, 1417, 0, 0,
	1420, 0, 1422, 0, 0, 0, 1433, 1445, 0, 0,
	1581, 1787, 2116, 1324, 1443, 0, 1430, 1432, 1421, 1423,
	0, 1426, 0, 1427, 1417, 0, 0, 0, 0, 0,
	0, 1424, 1425, 1444, 1446, 0, 2083, 1414, 1415, 0,
	0, 0, 0, 1429, 1431, 1447, 0, 1416,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:479
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:494
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:502
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:517
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:529
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:532
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:533
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:535
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:539
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:542
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:543
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:546
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:547
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:548
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:550
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:551
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:552
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:556
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:557
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:558
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:562
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = nil
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:599
		{
			yyVAL.str = ""
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.list = yyDollar[1].list
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:604
		{
			yyVAL.list = nil
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:610
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:614
		{
			yyVAL.ival = 1
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:615
		{
			yyVAL.ival = 0
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:619
		{
			yyVAL.ival = 1
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:620
		{
			yyVAL.ival = 0
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:624
		{
			yyVAL.ival = 1
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:625
		{
			yyVAL.ival = 0
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.bval = true
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:630
		{
			yyVAL.bval = false
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:634
		{
			yyVAL.list = yyDollar[2].list
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:635
		{
			yyVAL.list = nil
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:636
		{
			yyVAL.list = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.str = yyDollar[1].str
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.str = yyDollar[1].str
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.str = yyDollar[1].str
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.str = yyDollar[1].str
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.str = yyDollar[1].str
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.str = yyDollar[1].str
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.str = yyDollar[1].str
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.str = yyDollar[1].str
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.str = yyDollar[1].str
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:671
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:684
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:699
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:728
		{
			yyVAL.list = yyDollar[2].list
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:729
		{
			yyVAL.list = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:738
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:751
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:757
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:763
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:769
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:775
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:782
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:789
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:795
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:814
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:830
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "abort"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "absent"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "absolute"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "access"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "action"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "add"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "admin"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "after"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "aggregate"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "also"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "alter"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "always"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "asensitive"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "assertion"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "assignment"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "at"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "atomic"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "attach"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "attribute"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "backward"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "before"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "begin"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "breadth"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "by"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "cache"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "call"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "called"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "cascade"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "cascaded"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "catalog"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "chain"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "characteristics"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "checkpoint"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "class"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "close"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "cluster"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "columns"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "comment"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "comments"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "commit"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "committed"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "compression"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "conditional"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "configuration"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "conflict"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "connection"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "constraints"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "content"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "continue"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "conversion"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "copy"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "cost"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "csv"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "cube"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "current"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "cursor"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "cycle"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "data"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "database"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "day"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "deallocate"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "declare"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "defaults"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "deferred"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "definer"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "delete"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "delimiter"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "delimiters"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "depends"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "depth"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "detach"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "dictionary"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "disable"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "discard"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "document"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "domain"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "double"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "drop"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "each"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "empty"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "enable"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "encoding"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "encrypted"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "enum"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "error"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "escape"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "event"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "exclude"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "excluding"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "exclusive"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "execute"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "explain"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "expression"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "extension"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "external"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "family"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "filter"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "finalize"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "first"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "following"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "force"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "format"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "forward"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "function"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "functions"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "generated"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "global"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "granted"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "groups"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "handler"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "header"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "hold"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "hour"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "identity"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "if"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "immediate"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "immutable"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "implicit"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "import"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "include"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "including"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "increment"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "indent"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "index"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "indexes"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "inherit"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "inherits"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "inline"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "input"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "insensitive"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "insert"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "instead"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "invoker"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "isolation"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "keep"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "key"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "keys"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "label"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "language"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "large"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "last"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "leakproof"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "level"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "listen"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "load"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "local"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "location"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "lock"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "locked"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "logged"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "mapping"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "match"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "matched"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "materialized"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "maxvalue"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "merge"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "method"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "minute"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "minvalue"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "mode"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "month"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "move"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "name"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "names"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "nested"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "new"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "next"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "nfc"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "nfd"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "nfkc"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "nfkd"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "no"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "normalized"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "nothing"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "notify"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "nowait"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "nulls"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "object"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "of"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "off"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "oids"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "old"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "omit"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "operator"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "option"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "options"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "ordinality"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "others"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "over"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "overriding"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "owned"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "owner"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "parallel"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "parameter"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "parser"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "partial"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "partition"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "passing"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "password"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "path"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "plan"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "plans"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "policy"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "preceding"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "prepare"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "prepared"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "preserve"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "prior"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "privileges"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "procedural"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "procedure"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "procedures"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "program"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "publication"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "quote"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "quotes"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "range"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "read"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "reassign"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "recheck"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "recursive"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "ref"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "referencing"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "refresh"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "reindex"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "relative"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "release"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "rename"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "repeatable"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "replace"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "replica"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "reset"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "restart"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "restrict"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "return"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "returns"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "revoke"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "role"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "rollback"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "rollup"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "routine"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "routines"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "rows"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "rule"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "savepoint"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "scalar"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "schema"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "schemas"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "scroll"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "search"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "second"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "security"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "sequence"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "sequences"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "serializable"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "server"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "session"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "set"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "sets"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "share"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "show"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "simple"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "skip"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "snapshot"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "source"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "sql"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "stable"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "standalone"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "start"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "statement"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "statistics"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "stdin"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "stdout"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "storage"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "stored"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "strict"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "string"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "strip"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "subscription"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "support"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "sysid"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "system"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "tables"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "tablespace"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "target"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "temp"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "template"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "temporary"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "text"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "ties"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "transaction"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "transform"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "trigger"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "truncate"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "trusted"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "type"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "types"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "uescape"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "unbounded"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "uncommitted"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "unconditional"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "unencrypted"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "unknown"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "unlisten"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "unlogged"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "until"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "update"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "vacuum"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "valid"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "validate"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "validator"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "value"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "varying"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "version"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "view"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "views"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "volatile"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "whitespace"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "within"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "without"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "work"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "wrapper"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "write"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "xml"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "year"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "yes"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "zone"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "between"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "bigint"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "bit"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "boolean"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "char"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "character"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "coalesce"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "dec"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "decimal"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "exists"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "extract"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "float"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "greatest"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "grouping"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "inout"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "int"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "integer"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "interval"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "json"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "json_array"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "json_arrayagg"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "json_exists"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "json_object"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "json_objectagg"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "json_query"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "json_scalar"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "json_serialize"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "json_table"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "json_value"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "least"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "merge_action"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "national"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "nchar"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "none"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "normalize"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "nullif"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "numeric"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "out"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "overlay"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "position"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "precision"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "real"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "row"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "setof"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "smallint"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "substring"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "time"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "timestamp"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "treat"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "trim"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "values"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "varchar"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "xmlattributes"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "xmlconcat"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "xmlelement"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "xmlexists"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "xmlforest"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "xmlparse"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "xmlpi"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "xmlroot"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "xmlserialize"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "xmltable"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "authorization"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "binary"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "collation"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "concurrently"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "cross"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "current_schema"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "freeze"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "full"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "ilike"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "inner"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "is"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "isnull"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "join"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "left"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "like"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "natural"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "notnull"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "outer"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "overlaps"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "right"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "similar"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "tablesample"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "verbose"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "all"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "analyse"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "analyze"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "and"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "any"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "array"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "as"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "asc"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "asymmetric"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "both"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "case"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "cast"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "check"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "collate"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "column"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "constraint"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "create"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "current_catalog"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "current_date"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "current_role"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "current_time"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "current_timestamp"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "current_user"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "default"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "deferrable"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "desc"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "distinct"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "do"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "else"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "end"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "except"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "false"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "fetch"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "for"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "foreign"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "from"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "grant"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "group"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "having"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "in"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "initially"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "intersect"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "into"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "lateral"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "leading"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "limit"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "localtime"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "localtimestamp"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "not"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "null"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "offset"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "on"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "only"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "or"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "order"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "placing"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "primary"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "references"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "returning"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "select"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "session_user"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "some"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "symmetric"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "system_user"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "table"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "then"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "to"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "trailing"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "true"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "union"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "unique"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "user"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "using"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "variadic"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "when"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "where"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "window"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "with"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "abort"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "absent"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "absolute"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "access"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "action"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "add"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "admin"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "after"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "aggregate"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "all"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "also"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "alter"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "always"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "analyse"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "analyze"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "and"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "any"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "asc"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "asensitive"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "assertion"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "assignment"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "asymmetric"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "at"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "atomic"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "attach"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "attribute"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "authorization"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "backward"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "before"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "begin"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "between"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "bigint"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "binary"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "bit"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "boolean"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "both"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "breadth"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "by"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "cache"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "call"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "called"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "cascade"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "cascaded"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "case"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "cast"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "catalog"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "chain"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "characteristics"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "check"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "checkpoint"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "class"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "close"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "cluster"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "coalesce"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "collate"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "collation"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "column"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "columns"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "comment"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "comments"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "commit"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "committed"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "compression"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "concurrently"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "conditional"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "configuration"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "conflict"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "connection"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "constraint"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "constraints"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "content"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "continue"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "conversion"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "copy"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "cost"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "cross"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "csv"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "cube"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "current"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "current_catalog"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "current_date"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "current_role"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "current_schema"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "current_time"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "current_timestamp"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "current_user"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "cursor"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "cycle"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "data"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "database"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "deallocate"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "dec"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "decimal"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "declare"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "default"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "defaults"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "deferrable"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "deferred"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "definer"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "delete"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "delimiter"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "delimiters"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "depends"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "depth"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "desc"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "detach"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "dictionary"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "disable"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "discard"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "distinct"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "do"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "document"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "domain"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "double"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "drop"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "each"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "else"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "empty"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "enable"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "encoding"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "encrypted"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "end"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "enum"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "error"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "escape"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "event"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "exclude"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "excluding"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "exclusive"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "execute"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "exists"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "explain"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "expression"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "extension"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "external"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "extract"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "false"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "family"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "finalize"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "first"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "float"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "following"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "force"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "foreign"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "format"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "forward"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "freeze"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "full"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "function"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "functions"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "generated"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "global"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "granted"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "greatest"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "grouping"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "groups"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "handler"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "header"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "hold"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "identity"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "if"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "ilike"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "immediate"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "immutable"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "implicit"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "import"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "in"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "include"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "including"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "increment"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "indent"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "index"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "indexes"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "inherit"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "inherits"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "initially"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "inline"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "inner"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "inout"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "input"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "insensitive"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "insert"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "instead"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "int"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "integer"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "interval"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "invoker"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "is"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "isolation"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "join"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "json"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "json_array"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "json_arrayagg"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "json_exists"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "json_object"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "json_objectagg"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "json_query"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "json_scalar"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "json_serialize"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "json_table"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "json_value"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "keep"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "key"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "keys"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "label"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "language"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "large"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "last"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "lateral"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "leading"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "leakproof"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "least"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "left"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "level"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "like"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "listen"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "load"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "local"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "localtime"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "localtimestamp"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "location"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "lock"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "locked"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "logged"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "mapping"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "match"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "matched"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "materialized"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "maxvalue"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "merge"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "merge_action"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "method"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "minvalue"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "mode"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "move"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "name"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "names"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "national"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "natural"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "nchar"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "nested"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "new"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "next"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "nfc"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "nfd"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "nfkc"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "nfkd"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "no"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "none"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "normalize"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "normalized"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "not"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "nothing"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "notify"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "nowait"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "null"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "nullif"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "nulls"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "numeric"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "object"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "of"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "off"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "oids"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "old"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "omit"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "only"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "operator"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "option"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "options"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "or"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "ordinality"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "others"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "out"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "outer"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "overlay"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "overriding"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "owned"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "owner"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "parallel"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "parameter"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "parser"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "partial"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "partition"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "passing"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "password"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "path"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "placing"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "plan"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "plans"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "policy"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "position"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "preceding"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "prepare"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "prepared"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "preserve"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "primary"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "prior"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "privileges"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "procedural"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "procedure"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "procedures"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "program"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "publication"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "quote"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "quotes"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "range"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "read"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "real"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "reassign"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "recheck"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "recursive"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "ref"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "references"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "referencing"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "refresh"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "reindex"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "relative"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "release"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "rename"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "repeatable"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "replace"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "replica"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "reset"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "restart"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "restrict"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "return"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "returns"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "revoke"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "right"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "role"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "rollback"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "rollup"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "routine"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "routines"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "row"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "rows"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "rule"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "savepoint"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "scalar"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "schema"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "schemas"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "scroll"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "search"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "security"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "select"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "sequence"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "sequences"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "serializable"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "server"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "session"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "session_user"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "set"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "setof"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "sets"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "share"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "show"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "similar"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "simple"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "skip"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "smallint"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "snapshot"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "some"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "source"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "sql"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "stable"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "standalone"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "start"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "statement"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "statistics"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "stdin"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "stdout"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "storage"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "stored"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "strict"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "string"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "strip"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "subscription"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "substring"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "support"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "symmetric"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "sysid"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "system"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "system_user"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "table"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "tables"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "tablesample"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "tablespace"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "target"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "temp"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "template"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "temporary"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "text"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "then"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "ties"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "time"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "timestamp"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "trailing"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "transaction"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "transform"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "treat"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "trigger"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "trim"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "true"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "truncate"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "trusted"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "type"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "types"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "uescape"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "unbounded"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "uncommitted"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "unconditional"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "unencrypted"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "unique"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "unknown"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "unlisten"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "unlogged"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "until"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "update"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "user"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "using"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "vacuum"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "valid"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "validate"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "validator"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "value"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "values"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "varchar"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "variadic"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "verbose"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "version"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "view"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "views"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "volatile"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "when"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "whitespace"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "work"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "wrapper"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "write"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "xml"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "xmlattributes"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "xmlconcat"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "xmlelement"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "xmlexists"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "xmlforest"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "xmlparse"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "xmlpi"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "xmlroot"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "xmlserialize"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "xmltable"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "yes"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "zone"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1846
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1851
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1860
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1865
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1870
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1875
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1880
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1885
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1890
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1895
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1900
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1905
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1910
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1915
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1948
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1953
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1961
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1966
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1974
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1979
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1987
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1992
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2000
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].list
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1073:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2008
		{
			// Create timezone function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2014
		{
			// Create timezone function call with no argument
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2028
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1078:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2033
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1079:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2038
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1080:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2043
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2048
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2053
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2058
		{
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2063
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2071
		{
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2076
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2085
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2087
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2091
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2096
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2101
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2106
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2111
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2116
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2121
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2126
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2131
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2136
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2141
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2146
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2151
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2156
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2162
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2163
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2165
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2174
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2182
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2183
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2185
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2189
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2194
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2198
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2202
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2206
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2212
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2218
		{
			// TODO: Fix GROUPING function implementation
			// Current implementation is simplified and needs proper expr_list handling
			// The expr_list should be properly converted to NodeList and assigned to Args
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     nil, // We'll need to convert expr_list properly
			}
			yyVAL.node = grouping
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2232
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2236
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2240
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2244
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2248
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2252
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2257
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2260
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2263
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2264
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2265
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2270
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2274
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2284
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2288
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2294
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2295
		{
			yyVAL.node = nil
		}
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2299
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2303
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2307
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2311
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2316
		{
			yyVAL.list = nil
		}
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2318
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2330
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2339
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2343
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2347
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2358
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2362
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2368
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1147:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2374
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2382
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2388
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2396
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2400
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2407
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2411
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2415
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2422
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2427
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2428
		{
			yyVAL.node = nil
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2432
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2434
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2442
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2449
		{
			yyVAL.node = nil
		}
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2458
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2462
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2467
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2469
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2477
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2481
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2489
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2493
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2502
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2507
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2508
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2510
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2511
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2514
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2515
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2516
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2522
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2530
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2537
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2541
		{
			yyVAL.list = nil
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2547
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2553
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2564
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2568
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2572
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2576
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2580
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2588
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2592
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2596
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2600
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2604
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2610
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2614
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2624
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2630
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2638
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2646
		{
			yyVAL.str = "varchar"
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2650
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2658
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2666
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2676
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2687
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2701
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2713
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2725
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2735
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2745
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2755
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2766
		{
			yyVAL.ival = 1
		}
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2767
		{
			yyVAL.ival = 0
		}
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.ival = 0
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2771
		{
			yyVAL.ival = 1
		}
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.ival = 0
		}
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2776
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2786
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2797
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2804
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2808
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2813
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2814
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2817
		{
			yyVAL.str = "+"
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2818
		{
			yyVAL.str = "-"
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2819
		{
			yyVAL.str = "*"
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2820
		{
			yyVAL.str = "/"
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2821
		{
			yyVAL.str = "%"
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2822
		{
			yyVAL.str = "^"
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2823
		{
			yyVAL.str = "<"
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2824
		{
			yyVAL.str = ">"
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2825
		{
			yyVAL.str = "="
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2826
		{
			yyVAL.str = "<="
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.str = ">="
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2828
		{
			yyVAL.str = "<>"
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2836
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2844
		{
			yyVAL.list = nil
		}
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2847
		{
			yyVAL.node = nil
		}
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2850
		{
			yyVAL.node = nil
		}
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2853
		{
			yyVAL.node = nil
		}
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2856
		{
			yyVAL.ival = 0
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2857
		{
			yyVAL.ival = 0
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2861
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2866
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2881
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2882
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2886
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2891
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2892
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2900
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2902
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2916
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2928
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2940
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2950
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2961
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2962
		{
			yyVAL.list = nil
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2966
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2967
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2972
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2976
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2981
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2986
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2997
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2998
		{
			yyVAL.list = nil
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3002
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3003
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3012
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3020
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3031
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3042
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3046
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3052
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3060
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3069
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3077
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3086
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3094
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3106
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3112
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3119
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3125
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3131
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3141
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3145
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3151
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3168
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3172
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3181
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3207
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3233
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3241
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3251
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3252
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3253
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3254
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3259
		{
			yyVAL.ival = 1
		}
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3260
		{
			yyVAL.ival = 0
		}
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3270
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3281
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3292
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3296
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3300
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3306
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3307
		{
			yyVAL.with = nil
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3312
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3316
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1317:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3324
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3353
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3354
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3359
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3365
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3371
		{
			yyVAL.node = nil
		}
	case 1324:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3378
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1325:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3387
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.node = nil
		}
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3406
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3414
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.node = nil
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3433
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3441
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3443
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3447
		{
			yyVAL.node = nil
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3451
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3459
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3460
		{
			yyVAL.alias = nil
		}
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3465
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3470
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3474
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3479
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3487
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3491
		{
			yyVAL.alias = nil
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.ival = 1
		}
	case 1345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.ival = 0
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3504
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3509
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3510
		{
			yyVAL.list = nil
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3520
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3523
		{
			yyVAL.into = nil
		}
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3534
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3543
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3553
		{
			yyVAL.ival = 1
		}
	case 1355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3554
		{
			yyVAL.ival = 0
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3560
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3564
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3571
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3581
		{
			yyVAL.list = nil
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3591
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3595
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3607
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3620
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3621
		{
			yyVAL.list = nil
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3631
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3640
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3651
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3656
		{
			yyVAL.node = nil
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3661
		{
			yyVAL.str = "BY REF"
		}
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3662
		{
			yyVAL.str = "BY VALUE"
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3672
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3676
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3680
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3692
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3700
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3705
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1381:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3714
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1382:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3722
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3733
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3737
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3746
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3751
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3756
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3766
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3770
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3779
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3787
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3791
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1395:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3808
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3832
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3844
		{
			yyVAL.node = nil
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3849
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3850
		{
			yyVAL.node = nil
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3854
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3855
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3860
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3868
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3876
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3887
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3888
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3889
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3891
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3892
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3893
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3894
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3899
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3903
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3907
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3911
		{
			yyVAL.node = nil
		}
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3916
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3917
		{
			yyVAL.node = nil
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3922
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3923
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3924
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3925
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3926
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3927
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3929
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3935
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3936
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3937
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3938
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3939
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3945
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3965
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3976
		{
			yyVAL.node = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3981
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3982
		{
			yyVAL.node = nil
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3992
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4001
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4010
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4024
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4038
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4049
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1447:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4058
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4069
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4070
		{
			yyVAL.node = nil
		}
	case 1450:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4086
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4098
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4102
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4111
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4117
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4124
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1456:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4131
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4139
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4148
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4149
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4154
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4158
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4166
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4178
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4195
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4206
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4212
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4232
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4238
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4239
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4249
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4261
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4265
		{
			yyVAL.list = nil
		}
	case 1474:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4280
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4297
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4301
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1477:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4312
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1478:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4336
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4372
		{
			yyVAL.ival = 1
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.ival = 0
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4377
		{
			yyVAL.ival = 1
		}
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4378
		{
			yyVAL.ival = 0
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4382
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4383
		{
			yyVAL.str = ""
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4384
		{
			yyVAL.str = ""
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4389
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4392
		{
			yyVAL.node = nil
		}
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4397
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4400
		{
			yyVAL.node = nil
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4404
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4405
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4410
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4418
		{
			yyVAL.list = nil
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4425
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4429
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4433
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4437
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4441
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4445
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4449
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4453
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4461
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4465
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4469
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4473
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4477
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4481
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4489
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4493
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4510
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.node = nil
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4516
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4520
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4530
		{
			yyVAL.str = "true"
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4531
		{
			yyVAL.str = "false"
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4532
		{
			yyVAL.str = "on"
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4533
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4537
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4538
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4540
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4545
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4549
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4550
		{
			yyVAL.node = nil
		}
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4554
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4555
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4556
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4557
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4558
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4559
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4560
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4561
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4565
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4566
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4567
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4571
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4572
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4573
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4574
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4575
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4580
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4585
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4597
		{
			yyVAL.ival = 1
		}
	case 1552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4598
		{
			yyVAL.ival = 0
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4614
		{
			yyVAL.node = nil
		}
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4616
		{
			yyVAL.node = nil
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4624
		{
			yyVAL.ival = 1
		}
	case 1558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4625
		{
			yyVAL.ival = 0
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4629
		{
			yyVAL.ival = 1
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4630
		{
			yyVAL.ival = 0
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4634
		{
			yyVAL.ival = 1
		}
	case 1562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4635
		{
			yyVAL.ival = 0
		}
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4639
		{
			yyVAL.ival = 1
		}
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4640
		{
			yyVAL.ival = 0
		}
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4649
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4655
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4661
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4667
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4673
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4681
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4682
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4686
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4687
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4691
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4692
		{
			yyVAL.node = nil
		}
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4697
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4712
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4721
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4728
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4735
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4748
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4761
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4770
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4785
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4795
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4803
		{
			yyVAL.onconflict = nil
		}
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4814
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4823
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.node = nil
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4845
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4852
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4856
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4868
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4873
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4881
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4892
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4906
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4907
		{
			yyVAL.list = nil
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4911
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4912
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4913
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4917
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4918
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4919
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4924
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4928
		{
			yyVAL.list = nil
		}
	case 1609:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4949
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1610:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4965
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1611:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4982
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1612:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:4998
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1613:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5015
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1614:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5032
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5050
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5051
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5057
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5061
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.list = nil
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5072
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5079
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5080
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5081
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5086
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5093
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5097
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5101
		{
			yyVAL.ival = 0
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5107
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5108
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5109
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5110
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5112
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5113
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5114
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5121
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5122
		{
			yyVAL.str = "default"
		}
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5126
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5127
		{
			yyVAL.str = ""
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5131
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5132
		{
			yyVAL.str = "default"
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5136
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5137
		{
			yyVAL.str = ""
		}
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5142
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5143
		{
			yyVAL.list = nil
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5148
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5154
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5161
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5162
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5167
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5173
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5184
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5213
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1662:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5222
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5232
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5241
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5248
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5252
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5260
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5261
		{
			yyVAL.list = nil
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5270
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5278
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5284
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5289
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5294
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5306
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5311
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5318
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5323
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5324
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5326
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5339
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5344
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5349
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5354
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5362
		{
			yyVAL.bval = true
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5363
		{
			yyVAL.bval = false
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5364
		{
			yyVAL.bval = true
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5368
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5369
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5376
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5381
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5385
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5389
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5399
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5405
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5406
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5411
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5415
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5419
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5423
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5431
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5435
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5443
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5447
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5459
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5463
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5471
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5477
		{
		}
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5478
		{
		}
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5482
		{
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5483
		{
		}
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5484
		{
		}
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5489
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.bval = false
		}
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5500
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5501
		{
			yyVAL.list = nil
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5506
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5510
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5514
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5523
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5529
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5535
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5541
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5558
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1731:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5565
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5575
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5580
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1734:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5585
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1735:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5593
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5604
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1737:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5615
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5625
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1739:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5636
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1740:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5657
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5671
		{
			yyVAL.bval = true
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5672
		{
			yyVAL.bval = false
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5678
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5684
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5692
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1746:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5697
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5705
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.list = nil
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5716
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5720
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5724
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5728
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5735
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5745
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5755
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5762
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5769
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5784
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5797
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5804
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5811
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5818
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5825
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5832
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5841
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5842
		{
			yyVAL.list = nil
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5846
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5847
		{
			yyVAL.partspec = nil
		}
	case 1769:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5852
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5860
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5865
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5873
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5880
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5887
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5896
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5897
		{
			yyVAL.str = ""
		}
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5901
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5902
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5903
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5904
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5908
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5909
		{
			yyVAL.str = ""
		}
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5913
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5914
		{
			yyVAL.str = ""
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1786:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5931
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1787:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5946
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5962
		{
			yyVAL.bval = true
		}
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5963
		{
			yyVAL.bval = false
		}
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5967
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5968
		{
			yyVAL.str = "btree"
		}
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5972
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5973
		{
			yyVAL.list = nil
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5978
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5983
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5991
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5992
		{
			yyVAL.list = nil
		}
	case 1798:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6004
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6010
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6017
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1801:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6023
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1802:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6030
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6039
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1804:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6045
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1805:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6052
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1806:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6058
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6065
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1808:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6071
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1809:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6078
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1810:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6084
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1811:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6091
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1812:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6100
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1813:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6110
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1814:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6117
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1815:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6125
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1816:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6132
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1817:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6140
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1818:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6147
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6163
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6171
		{
			yyVAL.bval = true
		}
	case 1822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6172
		{
			yyVAL.bval = false
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6177
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6182
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6190
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6221
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6244
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6251
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6258
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6269
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1831:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6276
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6283
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1833:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6290
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1835:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6302
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1836:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6307
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1837:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6312
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6317
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1839:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6322
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1840:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1841:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6334
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6341
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6346
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1844:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6351
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1845:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6356
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1846:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6361
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1847:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6371
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6376
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1849:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6383
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1850:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6390
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6398
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1852:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6409
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6419
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6424
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6429
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6440
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1857:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6445
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6453
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6461
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6466
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6471
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6476
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6481
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6486
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6491
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6496
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6501
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6506
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6511
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6516
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6521
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6526
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1873:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6531
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1874:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6536
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6541
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6546
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6551
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6556
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6562
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6567
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1881:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6574
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6579
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6584
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6589
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6594
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1886:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1887:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6604
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1888:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6609
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1889:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6614
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6618
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6626
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1892:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6634
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1893:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6641
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6652
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6661
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6662
		{
			yyVAL.node = nil
		}
	case 1897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6666
		{
		}
	case 1898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6667
		{
		}
	case 1899:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6678
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6691
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1901:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6704
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1902:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6717
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1903:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6730
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1904:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6745
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1905:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6760
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1906:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6773
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1907:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6786
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1908:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6799
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1909:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6812
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1910:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6825
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6841
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6847
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6853
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6862
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6866
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6869
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6873
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6875
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6879
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6883
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6894
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6900
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6901
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6905
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6910
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6911
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6912
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6913
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6914
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6915
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6916
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6917
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6918
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6919
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6920
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6921
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6922
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6935
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6940
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6954
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6966
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 1943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6971
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 1944:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6973
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 1945:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6975
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6979
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1947:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6993
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1948:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7004
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1949:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7015
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1950:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7026
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1951:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7037
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1952:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7048
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1953:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7060
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1954:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7071
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1955:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7082
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1956:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7093
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1957:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7104
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1958:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7121
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1959:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7138
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1960:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7150
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1961:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7162
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1962:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7173
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1963:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7184
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1964:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7195
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1965:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7206
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1966:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7217
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1967:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7228
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1968:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7239
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1969:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7250
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1970:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7261
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1971:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7272
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1972:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7283
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1973:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7294
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1974:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7305
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1975:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7316
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1976:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7327
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1977:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7338
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1978:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7349
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1979:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7360
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1980:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7373
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1981:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7386
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1982:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7399
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1983:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7412
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1984:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7425
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1985:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7438
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1986:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7450
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1987:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7462
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1988:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7475
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1989:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7488
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1990:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7500
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1991:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7512
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1992:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7523
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1993:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7534
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1994:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7545
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1995:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7556
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1996:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7567
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1997:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7578
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1998:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7589
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1999:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7600
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2000:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7611
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2001:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7622
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7648
		{
			yyVAL.ival = 0
		}
	case 2003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7650
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7664
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7665
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7666
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7667
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7668
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7669
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7673
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7678
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7683
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7691
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7695
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2015:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7699
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7703
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2017:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7717
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2018:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7731
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2019:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7747
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2020:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7762
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2021:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7777
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7778
		{
			yyVAL.list = nil
		}
	case 2023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7783
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7787
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7795
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7799
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7804
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7812
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7821
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7830
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7839
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7848
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7859
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7860
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7861
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7862
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7863
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7867
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7871
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2040:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7873
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2041:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7883
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7895
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2043:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7896
		{
			yyVAL.list = nil
		}
	case 2044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7901
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7907
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7915
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7919
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7923
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7927
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7931
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7938
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7944
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7954
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2054:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7960
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7968
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2056:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7972
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2057:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7984
		{
			yyVAL.node = nil
		}
	case 2058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7991
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8000
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8010
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8016
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8017
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2063:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8022
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2064:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8026
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8030
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8034
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8038
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8042
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8046
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8050
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8054
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8058
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8062
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8066
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8070
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8074
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8078
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8082
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8086
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8093
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8097
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2082:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8113
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2083:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8145
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8176
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8177
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8178
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8183
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8185
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8225
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8232
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8239
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8246
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8253
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8262
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8263
		{
			yyVAL.list = nil
		}
	case 2096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8267
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8272
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8280
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8291
		{
			yyVAL.bval = true
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8292
		{
			yyVAL.bval = false
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8296
		{
			yyVAL.bval = true
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8297
		{
			yyVAL.bval = false
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8301
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8306
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8310
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8322
		{
			yyVAL.bval = true
		}
	case 2109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8323
		{
			yyVAL.bval = false
		}
	case 2110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8327
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8328
		{
			yyVAL.node = nil
		}
	case 2114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8337
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8342
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8346
		{
			yyVAL.list = nil
		}
	case 2117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8351
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8354
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8355
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8356
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8360
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8361
		{
			yyVAL.rangevar = nil
		}
	case 2123:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8374
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2124:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8390
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2125:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8406
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2126:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8422
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8439
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8440
		{
			yyVAL.list = nil
		}
	case 2129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8444
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8445
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8446
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8447
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8458
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8465
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2135:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8472
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8479
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8495
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8513
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8519
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8524
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8529
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8535
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2143:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8543
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8551
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8566
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8582
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8588
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8593
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8598
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8604
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8609
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8614
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8619
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8624
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2155:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8629
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8634
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8639
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8644
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2159:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8655
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8660
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8674
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2162:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8679
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8686
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8687
		{
			yyVAL.list = nil
		}
	case 2165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8690
		{
		}
	case 2166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8691
		{
		}
	case 2167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8702
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8706
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8719
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2170:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8724
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8732
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8741
		{
			yyVAL.list = nil
		}
	case 2173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8748
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8752
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8756
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8761
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8774
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8782
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8791
		{
			yyVAL.list = nil
		}
	case 2180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8798
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8811
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8815
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8819
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2184:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8823
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8830
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8834
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8838
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8842
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8851
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8860
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8864
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8868
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8873
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8878
		{
			yyVAL.ival = 1
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8879
		{
			yyVAL.ival = 0
		}
	case 2196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8889
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8895
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8899
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8905
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8906
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8907
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8908
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8912
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8913
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8917
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8918
		{
			yyVAL.list = nil
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8922
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8923
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2209:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8940
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2210:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:8945
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8951
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8955
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8959
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8965
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8966
		{
			yyVAL.str = ""
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8970
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8971
		{
			yyVAL.str = ""
		}
	case 2218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8975
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8976
		{
			yyVAL.str = ""
		}
	case 2220:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8989
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2221:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8995
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2222:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9001
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2223:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9007
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2224:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9019
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2225:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9023
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9029
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9035
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2228:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9039
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9045
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9046
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9051
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9057
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9063
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9069
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9083
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9087
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9095
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9102
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9109
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9113
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9121
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9128
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9136
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9145
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9154
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9162
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9178
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9180
		{
			yyVAL.list = nil
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9185
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9187
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9192
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9201
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9206
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9217
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9237
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2256:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9245
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9256
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9262
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9263
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9268
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9280
		{
			yyVAL.bval = true
		}
	case 2262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9281
		{
			yyVAL.bval = false
		}
	case 2263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9282
		{
			yyVAL.bval = true
		}
	case 2264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9287
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9296
		{
			yyVAL.list = nil
		}
	case 2270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9307
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9309
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9313
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9318
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9323
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9328
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9336
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9341
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9346
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9350
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9361
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9369
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9373
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9377
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9381
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9388
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9392
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9399
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9405
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9412
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9413
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9417
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9418
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9419
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9420
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9421
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9422
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9423
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9424
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9425
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9429
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9430
		{
			yyVAL.str = "default"
		}
	case 2302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9431
		{
			yyVAL.str = ""
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9435
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9436
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9441
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9442
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9443
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9447
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9448
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9453
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9459
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9464
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9472
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9476
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9480
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9484
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9488
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9494
		{
			yyVAL.str = "read uncommitted"
		}
	case 2320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9495
		{
			yyVAL.str = "read committed"
		}
	case 2321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9496
		{
			yyVAL.str = "repeatable read"
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9497
		{
			yyVAL.str = "serializable"
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9501
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9502
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9503
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9506
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9507
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9508
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9512
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9513
		{
			yyVAL.list = nil
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9517
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9518
		{
			yyVAL.node = nil
		}
	case 2333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9522
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9527
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9532
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9540
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9544
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9550
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9556
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9562
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9563
		{
			yyVAL.str = ""
		}
	case 2342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9567
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9568
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9569
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9570
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9574
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9579
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9584
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9591
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9592
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2351:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9603
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2352:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9607
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9613
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9619
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9620
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9621
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9622
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9627
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9632
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9640
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9647
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9652
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	}
	goto yystack /* stack new state and value */
}
