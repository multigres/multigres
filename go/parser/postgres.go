// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const WHEN = 57392
const IS = 57393
const ISNULL = 57394
const NOTNULL = 57395
const AT = 57396
const TIME = 57397
const ZONE = 57398
const LOCAL = 57399
const SYMMETRIC = 57400
const ASYMMETRIC = 57401
const TO = 57402
const OPERATOR = 57403
const SELECT = 57404
const FROM = 57405
const WHERE = 57406
const ONLY = 57407
const TABLE = 57408
const LIMIT = 57409
const OFFSET = 57410
const ORDER_P = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const SET = 57435
const BIT = 57436
const NUMERIC = 57437
const INTEGER = 57438
const SMALLINT = 57439
const BIGINT = 57440
const REAL = 57441
const FLOAT_P = 57442
const DOUBLE_P = 57443
const PRECISION = 57444
const CHARACTER = 57445
const CHAR_P = 57446
const VARCHAR = 57447
const NATIONAL = 57448
const NCHAR = 57449
const VARYING = 57450
const TIMESTAMP = 57451
const INTERVAL = 57452
const INT_P = 57453
const DECIMAL_P = 57454
const DEC = 57455
const BOOLEAN_P = 57456
const VARIADIC = 57457
const FORMAT_LA = 57458
const NOT_LA = 57459
const NULLS_LA = 57460
const WITH_LA = 57461
const WITHOUT_LA = 57462
const MODE_TYPE_NAME = 57463
const MODE_PLPGSQL_EXPR = 57464
const MODE_PLPGSQL_ASSIGN1 = 57465
const MODE_PLPGSQL_ASSIGN2 = 57466
const MODE_PLPGSQL_ASSIGN3 = 57467
const UNION = 57468
const EXCEPT = 57469
const INTERSECT = 57470
const UMINUS = 57471

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"SET",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'|'",
	"'#'",
	"'&'",
	"';'",
	"','",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:1956

// Helper functions for converting between grammar types and AST types

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 74,
	16, 182,
	17, 182,
	145, 182,
	-2, 148,
	-1, 152,
	145, 162,
	-2, 149,
	-1, 158,
	144, 154,
	147, 154,
	-2, 42,
	-1, 214,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 80,
	-1, 215,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 81,
	-1, 216,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 82,
	-1, 217,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 83,
	-1, 218,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 84,
	-1, 219,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 85,
	-1, 224,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 93,
	-1, 230,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 97,
	-1, 272,
	145, 161,
	-2, 186,
	-1, 320,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 95,
	-1, 321,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 99,
	-1, 336,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 112,
	-1, 388,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 94,
	-1, 393,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 114,
	-1, 394,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 98,
	-1, 396,
	144, 31,
	-2, 28,
	-1, 397,
	144, 32,
	-2, 29,
	-1, 398,
	144, 33,
	-2, 30,
	-1, 455,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 96,
	-1, 456,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 100,
	-1, 460,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 106,
	-1, 468,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 126,
	-1, 469,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 127,
	-1, 470,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 128,
	-1, 471,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 129,
	-1, 472,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 130,
	-1, 473,
	18, 0,
	19, 0,
	20, 0,
	129, 0,
	130, 0,
	131, 0,
	-2, 131,
	-1, 474,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 108,
	-1, 475,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 113,
	-1, 494,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 107,
	-1, 495,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 109,
	-1, 496,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	117, 0,
	-2, 115,
}

const yyPrivate = 57344

const yyLast = 2087

var yyAct = [...]int16{
	83, 50, 483, 167, 513, 341, 175, 366, 305, 377,
	103, 87, 62, 32, 5, 32, 32, 288, 358, 369,
	68, 245, 310, 438, 88, 74, 6, 33, 94, 292,
	294, 32, 285, 162, 265, 290, 7, 19, 29, 295,
	51, 51, 149, 236, 239, 171, 20, 276, 429, 32,
	506, 269, 153, 7, 92, 95, 29, 95, 480, 282,
	31, 138, 517, 282, 479, 282, 512, 401, 505, 306,
	307, 411, 412, 413, 51, 169, 14, 34, 493, 169,
	478, 169, 447, 458, 417, 140, 169, 477, 139, 349,
	306, 307, 454, 32, 282, 308, 374, 283, 32, 45,
	32, 75, 11, 32, 168, 44, 12, 32, 169, 164,
	169, 278, 452, 170, 449, 448, 304, 501, 158, 445,
	182, 30, 160, 29, 420, 51, 43, 16, 51, 338,
	32, 277, 29, 56, 200, 55, 138, 374, 296, 488,
	36, 35, 291, 443, 37, 38, 39, 40, 41, 42,
	297, 296, 32, 384, 32, 232, 10, 352, 240, 15,
	140, 312, 296, 139, 299, 157, 155, 272, 274, 151,
	102, 98, 53, 32, 330, 339, 327, 247, 243, 262,
	31, 160, 408, 409, 410, 10, 402, 403, 404, 405,
	406, 407, 425, 532, 531, 519, 17, 34, 29, 91,
	356, 293, 273, 342, 72, 99, 107, 108, 309, 46,
	401, 311, 14, 306, 307, 315, 316, 300, 516, 45,
	401, 301, 302, 303, 59, 44, 313, 314, 378, 515,
	317, 508, 129, 49, 510, 509, 499, 353, 11, 541,
	105, 30, 12, 518, 518, 518, 43, 130, 439, 331,
	331, 335, 11, 486, 73, 434, 12, 433, 281, 529,
	36, 35, 291, 16, 37, 38, 39, 40, 41, 42,
	106, 322, 328, 324, 90, 521, 286, 16, 272, 272,
	272, 93, 530, 32, 354, 520, 172, 337, 325, 136,
	32, 32, 241, 27, 32, 15, 323, 238, 138, 237,
	238, 451, 344, 345, 450, 329, 348, 376, 51, 365,
	350, 373, 280, 382, 381, 368, 368, 318, 343, 29,
	19, 293, 140, 372, 96, 139, 375, 370, 397, 371,
	156, 114, 174, 165, 407, 331, 331, 539, 386, 387,
	32, 404, 405, 406, 407, 331, 331, 223, 523, 423,
	424, 426, 140, 395, 272, 398, 152, 32, 166, 401,
	32, 419, 84, 222, 242, 247, 243, 431, 32, 57,
	13, 32, 32, 507, 432, 138, 233, 435, 234, 436,
	346, 347, 29, 23, 446, 29, 440, 441, 7, 66,
	444, 163, 89, 442, 422, 453, 368, 368, 289, 140,
	173, 379, 139, 25, 498, 279, 380, 9, 461, 22,
	383, 26, 334, 182, 385, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 200, 437, 364,
	362, 363, 361, 272, 32, 32, 72, 272, 32, 108,
	24, 21, 401, 522, 32, 168, 32, 489, 3, 28,
	131, 481, 482, 490, 287, 487, 58, 430, 491, 29,
	29, 492, 8, 29, 129, 249, 54, 47, 246, 51,
	340, 368, 18, 476, 76, 85, 263, 422, 154, 130,
	84, 81, 497, 52, 298, 500, 73, 32, 195, 32,
	168, 194, 504, 197, 131, 196, 271, 391, 392, 202,
	181, 180, 32, 168, 503, 511, 179, 414, 415, 32,
	178, 535, 29, 177, 51, 80, 100, 534, 176, 32,
	32, 32, 32, 77, 32, 526, 527, 51, 86, 71,
	67, 32, 32, 32, 514, 131, 131, 131, 131, 101,
	131, 141, 32, 231, 524, 525, 514, 514, 4, 528,
	533, 131, 2, 1, 0, 0, 536, 537, 538, 0,
	540, 402, 403, 404, 405, 406, 407, 542, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 0,
	0, 0, 60, 60, 0, 0, 0, 0, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 0, 0, 131, 359, 364, 362, 363, 361,
	131, 357, 360, 0, 104, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 146, 147, 148, 0, 0,
	0, 150, 485, 359, 364, 362, 363, 361, 401, 357,
	360, 484, 411, 412, 413, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 457, 0, 161, 0, 227, 104,
	0, 0, 0, 0, 131, 226, 228, 225, 60, 229,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 0, 0, 0, 224, 0, 230,
	0, 0, 235, 0, 72, 0, 0, 108, 0, 0,
	131, 131, 0, 0, 0, 0, 72, 0, 0, 108,
	0, 0, 0, 118, 119, 120, 131, 0, 104, 0,
	0, 0, 129, 0, 0, 121, 0, 0, 122, 0,
	284, 131, 132, 0, 129, 131, 0, 130, 0, 128,
	133, 126, 0, 134, 73, 0, 123, 124, 125, 130,
	0, 0, 0, 408, 409, 410, 73, 402, 403, 404,
	405, 406, 407, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 131, 131, 0, 401, 0, 31, 131,
	411, 412, 413, 0, 0, 0, 320, 321, 0, 0,
	0, 0, 416, 0, 401, 34, 0, 367, 411, 412,
	413, 104, 336, 0, 0, 0, 0, 131, 131, 0,
	400, 0, 127, 0, 0, 0, 0, 45, 111, 112,
	113, 114, 0, 44, 115, 116, 117, 0, 109, 110,
	111, 112, 113, 114, 0, 131, 131, 351, 0, 0,
	131, 0, 0, 275, 43, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 131, 131, 0, 104, 36, 35,
	0, 0, 37, 38, 39, 40, 41, 42, 0, 0,
	0, 0, 0, 0, 131, 131, 131, 0, 72, 0,
	388, 108, 131, 0, 0, 0, 393, 394, 0, 0,
	399, 408, 409, 410, 0, 402, 403, 404, 405, 406,
	407, 0, 0, 0, 0, 0, 129, 427, 428, 408,
	409, 410, 0, 402, 403, 404, 405, 406, 407, 0,
	56, 130, 0, 0, 0, 0, 72, 0, 73, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 137,
	455, 456, 0, 0, 129, 0, 72, 459, 0, 108,
	0, 460, 0, 118, 119, 120, 34, 144, 135, 130,
	0, 142, 143, 0, 0, 121, 73, 474, 122, 475,
	0, 0, 132, 0, 129, 0, 0, 0, 45, 128,
	133, 126, 0, 134, 44, 0, 123, 124, 125, 130,
	109, 110, 111, 112, 113, 114, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 494, 495,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 0,
	0, 0, 0, 0, 0, 0, 502, 0, 109, 110,
	111, 112, 113, 114, 0, 0, 31, 72, 0, 0,
	108, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 34, 115, 116, 117, 0, 109, 110,
	111, 112, 113, 114, 72, 129, 0, 108, 418, 0,
	0, 118, 119, 120, 0, 45, 0, 0, 0, 0,
	130, 44, 0, 121, 0, 0, 122, 73, 0, 0,
	132, 0, 129, 0, 0, 0, 0, 128, 133, 126,
	0, 134, 43, 0, 123, 124, 125, 130, 0, 0,
	0, 0, 0, 0, 73, 0, 36, 35, 0, 0,
	37, 38, 39, 40, 41, 42, 0, 0, 82, 0,
	76, 85, 0, 0, 0, 72, 84, 69, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 109,
	110, 111, 112, 113, 114, 268, 0, 79, 0, 0,
	127, 80, 0, 78, 0, 0, 0, 97, 0, 0,
	0, 0, 115, 116, 117, 73, 109, 110, 111, 112,
	113, 114, 0, 82, 43, 76, 85, 0, 0, 244,
	72, 84, 69, 0, 0, 0, 0, 0, 36, 35,
	34, 0, 37, 38, 39, 40, 41, 42, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 80, 0, 78, 266,
	0, 0, 0, 0, 82, 0, 76, 85, 0, 0,
	73, 72, 84, 69, 0, 0, 0, 63, 64, 43,
	0, 34, 0, 0, 0, 72, 0, 0, 108, 70,
	264, 65, 0, 36, 35, 0, 0, 37, 38, 39,
	40, 41, 42, 79, 0, 0, 0, 80, 0, 78,
	0, 132, 0, 129, 0, 0, 0, 0, 128, 133,
	126, 73, 134, 0, 421, 0, 0, 0, 130, 0,
	43, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 63, 64, 36, 35, 0, 0, 37, 38,
	39, 40, 41, 42, 70, 0, 0, 82, 0, 76,
	85, 0, 0, 0, 72, 84, 69, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 127, 0, 63, 64, 61, 79, 0, 0, 0,
	80, 0, 78, 0, 0, 70, 0, 109, 110, 111,
	112, 113, 114, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 35, 0,
	31, 37, 38, 39, 40, 41, 42, 248, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 34, 0, 0,
	0, 0, 72, 0, 0, 108, 0, 0, 0, 118,
	119, 120, 0, 0, 82, 0, 76, 85, 0, 45,
	0, 121, 84, 69, 122, 44, 63, 64, 132, 0,
	129, 34, 0, 0, 0, 128, 133, 126, 70, 134,
	0, 0, 123, 124, 125, 130, 43, 0, 0, 0,
	0, 0, 73, 79, 0, 0, 0, 80, 0, 78,
	36, 35, 0, 0, 37, 38, 39, 40, 41, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 35, 0, 0, 37, 38,
	39, 40, 41, 42, 0, 256, 257, 258, 127, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 0, 0,
	115, 116, 117, 0, 109, 110, 111, 112, 113, 114,
	72, 0, 0, 108, 0, 0, 0, 118, 119, 120,
	0, 0, 0, 332, 333, 0, 0, 72, 0, 121,
	108, 0, 0, 0, 0, 70, 132, 0, 129, 0,
	0, 0, 0, 128, 133, 126, 0, 134, 0, 0,
	123, 124, 125, 130, 72, 129, 0, 108, 390, 0,
	73, 118, 119, 120, 0, 0, 0, 0, 0, 0,
	130, 72, 0, 0, 108, 0, 0, 73, 0, 0,
	132, 72, 129, 0, 108, 0, 0, 128, 133, 126,
	0, 134, 0, 0, 123, 124, 125, 130, 0, 129,
	0, 0, 389, 31, 73, 0, 0, 0, 0, 129,
	0, 0, 326, 0, 130, 72, 127, 0, 108, 0,
	34, 73, 0, 0, 130, 0, 0, 0, 115, 116,
	117, 73, 109, 110, 111, 112, 113, 114, 0, 0,
	0, 0, 45, 129, 0, 0, 319, 0, 44, 109,
	110, 111, 112, 113, 114, 0, 0, 0, 130, 0,
	127, 0, 0, 0, 0, 73, 0, 0, 0, 43,
	0, 0, 115, 116, 117, 0, 109, 110, 111, 112,
	113, 114, 82, 36, 35, 0, 0, 37, 38, 39,
	40, 41, 42, 109, 110, 111, 112, 113, 114, 34,
	0, 0, 0, 109, 110, 111, 112, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 199, 159, 0, 0, 109, 110, 111,
	112, 113, 114, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 35, 0, 0, 37, 38, 39, 40,
	41, 42, 201, 192, 184, 185, 186, 187, 188, 189,
	137, 203, 204, 205, 206, 207, 0, 198, 0, 183,
	190, 191, 193, 396, 0, 0, 0, 34, 144, 0,
	0, 0, 142, 143, 31, 0, 0, 0, 0, 0,
	34, 144, 0, 0, 0, 142, 143, 31, 0, 45,
	0, 34, 0, 367, 0, 44, 0, 0, 0, 0,
	0, 0, 45, 0, 34, 0, 0, 0, 44, 0,
	0, 0, 0, 45, 0, 0, 43, 0, 0, 44,
	0, 0, 0, 0, 0, 31, 45, 0, 0, 43,
	36, 35, 44, 0, 37, 38, 39, 40, 41, 42,
	43, 0, 34, 36, 35, 0, 0, 37, 38, 39,
	40, 41, 42, 43, 36, 35, 0, 0, 37, 38,
	39, 40, 41, 42, 45, 0, 0, 36, 35, 0,
	44, 37, 38, 39, 40, 41, 42, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 43, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 35, 0, 0, 37,
	38, 39, 40, 41, 42, 0, 45, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 35, 0,
	0, 37, 38, 39, 40, 41, 42,
}

var yyPact = [...]int16{
	40, -1000, 54, -1000, -1000, -1000, -1000, -1000, -1000, 190,
	40, 362, 1941, 66, 1993, 1903, 27, 40, -1000, -11,
	-13, 1270, 1270, -1000, -1000, 200, -1000, 64, -1000, -90,
	1062, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 26, 62, 1903, -1000,
	25, -1000, 62, 1363, -1000, -1000, -1000, 197, 63, -1000,
	955, -1000, -1000, 1363, 1363, 1363, 1363, -1000, -1000, -1000,
	1363, -1000, -1000, 24, -92, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 21, -1000, -1000, 197,
	20, -1000, 1689, -92, -1000, 1363, -1000, 1903, 1363, 1903,
	62, 335, 1903, -33, 1461, 223, 1903, 1270, 1768, 1363,
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
	1363, 1363, 1363, 316, -1000, -1000, 1363, 631, 1363, 1903,
	321, 1363, 241, 13, 232, 1866, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 877, 877, 1633, 1461, -92,
	1083, 1446, -92, 1689, -1000, 1154, 223, 1363, -1000, -1000,
	-1000, 705, -102, -15, -35, -1000, 227, -49, -1000, 1363,
	-1000, 212, 56, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6, -1000, -1000, -1000, -1000, -1000, 19, 115,
	17, 17, 17, -1000, -1000, -1000, -1000, -1000, -29, -50,
	-1000, 103, 16, 103, 103, -1000, 112, 103, 693, 693,
	193, 193, 193, 425, 1284, 1284, 1284, 1284, 1284, 1284,
	1633, 1589, -1000, 270, 1694, 1363, 1363, 238, 13, 228,
	1660, -1000, 32, 249, -1000, 1461, 1480, 1480, -1000, -1000,
	1363, 1363, -1000, -1000, -1000, -17, -1000, 31, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 60, 1363, 1363, 1363, -1000,
	1461, 364, -1000, 212, -57, -1000, 1363, -1000, -1000, 12,
	-1000, 152, 1903, -1000, 1461, -1000, 1363, 57, 540, 1890,
	1890, 11, -1000, 176, -1000, -7, 1363, 1866, -1000, 350,
	-1000, -1000, -1000, -1000, 350, -1000, 259, 258, 350, -1000,
	8, -1000, 350, -1000, -1000, 103, 103, -1000, -1000, 1363,
	1650, 1606, 1480, 1480, -1000, 1363, 1363, 1879, -48, 1363,
	790, -1000, 1480, 1480, 772, -62, 1056, -92, -1000, 1446,
	-1000, -22, 1219, -1000, 49, 49, 1363, 1363, -1000, -1000,
	-100, 1461, 40, -1000, -1000, 1461, 56, 182, 180, 56,
	353, 168, 168, 168, -1000, -1000, -1000, 1903, -2, -1000,
	1890, 784, -27, 540, 1866, -1000, -64, -1000, -1000, -31,
	-32, 248, 245, -34, 1363, -54, -1000, -1000, 877, 1363,
	1363, 634, 53, 925, 877, -1000, -1000, -1000, -1000, 1461,
	1363, 1768, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
	1480, 1480, 1480, 1480, 428, 428, 1363, -1000, 1363, -1000,
	-1000, 1363, -1000, -59, -66, 1363, -82, 1461, 1461, -1000,
	-88, -1000, 540, 56, 56, 568, 178, 56, -1000, -1000,
	-1000, -1000, -6, 1903, -1000, 1890, -1000, -1000, -1000, 94,
	-1000, -1000, 94, -68, -1000, 877, 877, 1363, 1363, 1363,
	877, -1000, 206, 206, 196, 196, 196, 345, 428, 428,
	428, 428, 428, 428, 877, 877, -1000, -1000, -1000, -1000,
	148, 540, 568, -1000, -28, 1363, 56, 540, 1903, -78,
	-1000, -1000, -1000, -1000, 877, 877, 877, -96, 140, 145,
	-1000, 1903, 1461, 540, -80, -1000, -1000, -1000, 1903, 137,
	126, -84, -1000, 102, -1000, 215, 205, 325, 1903, 1903,
	1903, 1903, -1000, 1903, -1000, 199, 101, 100, -1000, 468,
	1903, 1903, 1903, 297, -1000, -1000, -1000, -1000, -1000, 468,
	156, 1903, -1000,
}

var yyPgo = [...]int16{
	0, 553, 552, 448, 548, 25, 228, 1, 3, 4,
	293, 543, 543, 543, 543, 0, 27, 24, 541, 541,
	539, 539, 539, 539, 539, 539, 539, 539, 570, 174,
	12, 20, 530, 529, 528, 34, 51, 281, 42, 28,
	33, 101, 528, 523, 6, 518, 513, 510, 506, 501,
	500, 11, 499, 9, 496, 495, 493, 491, 488, 39,
	30, 8, 22, 484, 10, 5, 481, 478, 476, 470,
	389, 21, 468, 465, 44, 43, 14, 457, 26, 35,
	462, 456, 369, 224, 45, 454, 17, 398, 449, 32,
	449, 7, 19, 443, 441, 440, 409, 240, 29, 18,
	23, 2, 409, 407, 407, 467, 233, 405, 404, 373,
	370,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 4, 4, 14, 14, 19,
	19, 21, 21, 21, 22, 22, 23, 23, 24, 24,
	25, 25, 26, 26, 27, 27, 27, 27, 5, 5,
	5, 6, 6, 6, 6, 6, 7, 8, 8, 9,
	9, 10, 10, 10, 20, 20, 12, 12, 11, 11,
	11, 13, 13, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 16, 17, 18, 18, 18,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 30, 30, 30, 30, 30, 31, 31, 31,
	31, 31, 31, 41, 43, 42, 42, 42, 32, 32,
	37, 37, 40, 40, 39, 39, 39, 39, 38, 38,
	33, 34, 34, 66, 66, 66, 66, 66, 66, 35,
	35, 36, 36, 36, 64, 64, 44, 45, 45, 45,
	45, 45, 51, 51, 51, 53, 54, 59, 59, 60,
	60, 46, 46, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 48, 48, 49, 49, 52, 52,
	52, 52, 52, 52, 55, 56, 57, 58, 50, 50,
	50, 50, 61, 61, 61, 62, 62, 63, 63, 70,
	70, 72, 72, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 71, 71, 65, 67, 68,
	69, 75, 75, 74, 76, 76, 77, 79, 79, 78,
	78, 80, 80, 80, 80, 82, 82, 81, 81, 83,
	83, 83, 83, 84, 84, 85, 85, 86, 86, 86,
	86, 86, 87, 87, 88, 88, 88, 98, 98, 98,
	98, 98, 98, 99, 99, 99, 99, 100, 100, 101,
	101, 102, 103, 103, 103, 104, 104, 105, 105, 106,
	107, 107, 107, 108, 108, 108, 109, 109, 109, 110,
	110, 89, 89, 90, 92, 92, 91, 91, 91, 91,
	93, 93, 94, 94, 95, 95, 96, 96, 97, 97,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 2, 0, 3, 0, 2, 0,
	1, 0, 2, 0, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 2, 3, 0, 1, 3, 1, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	2, 4, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 3, 5, 3, 3, 2, 6, 7, 6, 7,
	3, 4, 4, 6, 5, 7, 1, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 1, 2, 3, 5, 6, 8, 6, 6, 1,
	3, 1, 3, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 3, 3,
	0, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 2, 4, 1, 5, 2, 5, 2,
	5, 2, 3, 3, 0, 1, 0, 3, 0, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 0, 0,
	0, 0, 1, 3, 1, 1, 1, 3, 3, 1,
	2, 6, 6, 2, 1, 1, 0, 1, 3, 3,
	2, 1, 1, 2, 0, 1, 3, 2, 2, 3,
	1, 4, 1, 1, 2, 2, 4, 3, 4, 5,
	4, 5, 4, 2, 2, 2, 1, 1, 0, 5,
	2, 4, 2, 2, 3, 1, 0, 1, 3, 9,
	1, 2, 0, 7, 7, 0, 10, 6, 0, 4,
	5, 2, 0, 1, 1, 0, 5, 2, 4, 1,
	2, 0, 1, 0, 1, 5, 1, 0, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -76, -78, -79, -80, -103,
	145, 62, 66, -110, 36, 119, 87, 142, -80, -78,
	-79, -94, -96, 21, -95, 41, -87, -10, -88, -5,
	65, 4, -15, -16, 21, 85, 84, 88, 89, 90,
	91, 92, 93, 70, 49, 43, 143, -105, 84, -106,
	-7, -5, -105, 145, -3, 146, 146, -82, -81, -83,
	-28, 135, -30, 133, 134, 31, -70, -32, -31, 13,
	145, -33, 11, 61, -5, -41, 6, -43, 49, 43,
	47, -66, 4, -15, 12, 7, -34, -51, -17, -82,
	74, 135, 144, -37, -39, 147, -10, 145, 145, 143,
	-105, -20, 145, -64, -28, -97, 73, 143, 14, 133,
	134, 135, 136, 137, 138, 129, 130, 131, 18, 19,
	20, 30, 33, 51, 52, 53, 46, 117, 44, 39,
	54, -70, 37, 45, 48, 23, -6, 4, -15, -16,
	-17, -18, 26, 27, 22, -28, -28, -28, -28, -38,
	-28, 145, -37, 144, -67, 145, -97, 145, -5, 135,
	-39, -28, -40, -10, -64, -106, 23, -8, -7, 143,
	146, -84, 63, -10, -83, -44, -45, -46, -47, -48,
	-49, -50, -51, 111, 96, 97, 98, 99, 100, 101,
	112, 113, 95, 114, -57, -58, -55, -56, 109, 55,
	-5, 94, -52, 103, 104, 105, 106, 107, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, 47, 31, -28, 46, 44, 37, 45, 48,
	-28, -11, -5, 55, 57, -28, -75, 58, 59, -74,
	145, 60, -6, -39, 146, -71, -72, -5, 11, -73,
	133, 134, 135, 136, 137, 138, 129, 130, 131, 18,
	19, 20, -5, -68, 146, -35, 115, 21, 41, -36,
	-28, -54, -51, -84, -64, 148, 149, 146, 146, -107,
	85, 31, 143, 146, -28, -89, 64, -85, -86, -87,
	-79, 86, -98, 145, -60, -59, 145, 144, -63, 145,
	102, -60, -60, -60, 145, -61, 119, 120, 145, -61,
	-62, 108, 145, -62, -62, 103, 104, -62, 47, 42,
	-28, -28, -75, 58, -74, 60, 42, 144, -59, 56,
	-29, -30, 133, 134, -29, -64, -28, -38, 146, 144,
	-69, -65, 143, -36, -35, -35, 16, 17, -89, 146,
	-40, -28, 145, 85, -7, -28, 143, 81, -99, 75,
	82, 79, 77, 78, 76, -92, -91, 23, -5, -92,
	-79, -79, -98, -86, 144, -60, -64, -53, -6, -41,
	-41, 55, 55, -41, 145, -41, -62, -62, -28, 42,
	42, -29, -29, -28, -28, -5, 4, -15, -16, -28,
	30, 14, 133, 134, 135, 136, 137, 138, 129, 130,
	131, 18, 19, 20, -29, -29, 30, 146, 42, -71,
	146, 115, -36, -65, -65, 143, -65, -28, -28, 148,
	-77, -76, -86, 75, 75, -86, -99, 75, -100, 80,
	-100, -100, -5, 145, -92, 146, -53, 146, 146, 146,
	56, 56, 146, -64, 146, -28, -28, 30, 30, 42,
	-28, -44, -29, -29, -29, -29, -29, -29, -29, -29,
	-29, -29, -29, -29, -28, -28, -36, 146, 146, 146,
	146, -86, -86, -101, 83, 74, 75, -86, 145, -8,
	-91, -61, -61, 146, -28, -28, -28, -65, -108, 88,
	-101, 145, -28, -86, -8, 146, 146, -109, 91, 90,
	89, -8, 146, -9, -5, 92, 92, 146, 143, 93,
	70, 70, -93, 23, -5, -5, -9, -9, -5, 60,
	83, 93, 93, -31, 49, 43, -5, -5, -5, 40,
	-31, 83, -5,
}

var yyDef = [...]int16{
	6, -2, 1, 3, 4, 5, 254, 255, 259, 0,
	0, 333, 0, 264, 0, 0, 0, 6, 260, 0,
	0, 266, 266, 332, 336, 334, 263, 282, 283, 41,
	0, 28, 29, 30, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 0, 302, 55, 307,
	45, 36, 303, 0, 2, 257, 258, 339, 265, 267,
	271, 272, 70, 0, 0, 0, 0, 132, 133, 158,
	0, 136, 229, 0, -2, 137, 138, 139, 63, 64,
	142, 248, 28, 29, 143, 144, 0, 161, 184, 339,
	0, 284, 0, 43, 150, 153, 285, 0, 0, 0,
	304, 0, 0, 0, 174, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 92, 0, 0, 0, 0,
	0, 0, 251, 0, 0, 0, 270, 31, 32, 33,
	34, 35, 67, 68, 69, 71, 72, 88, 105, 134,
	0, 0, -2, 0, 249, 0, 274, 0, -2, 155,
	151, 152, 0, 0, 0, 308, 312, 0, 37, 0,
	319, 322, 0, 338, 268, 73, 176, 177, 178, 179,
	180, 181, 190, 193, 194, 195, 196, 197, 228, 0,
	190, 190, 190, 203, 204, 205, 206, 207, 224, 224,
	182, 226, 215, 226, 226, 210, 0, 226, 74, 75,
	76, 77, 78, 79, -2, -2, -2, -2, -2, -2,
	86, 87, 89, 0, -2, 0, 0, 251, 0, 0,
	-2, 101, 48, 0, 103, 104, 0, 0, 252, 110,
	0, 0, 269, 159, 158, 0, 245, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 154, 250, 163, 247, 0, 53, 0, 169,
	171, 0, -2, 322, 0, 156, 153, 286, 320, 0,
	310, 0, 0, 44, 175, 261, 0, 273, 275, 325,
	325, 0, 280, 0, 191, 190, 0, 0, 198, 0,
	199, 200, 201, 202, 0, 219, 0, 0, 0, 221,
	217, 225, 0, 208, 209, 226, 226, 213, 91, 0,
	-2, -2, 0, 0, 111, 0, 0, 0, 50, 0,
	0, 116, 0, 0, 0, 0, -2, 135, 230, 0,
	160, 0, 0, 247, 247, 247, 0, 0, 262, 335,
	0, 152, 0, 311, 38, 321, 0, 0, 0, 0,
	0, 298, 298, 298, 296, 277, 324, 0, 329, 278,
	325, 325, 280, 0, 0, 192, 0, 187, 185, 0,
	0, 0, 0, 0, 0, 0, 211, 212, -2, 0,
	0, 0, 0, -2, -2, 49, -2, -2, -2, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 0, 253, 0, 246,
	164, 0, 170, 0, 0, 0, 0, 172, 173, 157,
	0, 256, 276, 0, 0, 0, 0, 0, 293, 297,
	294, 295, 327, 0, 279, 287, 188, 189, 227, 224,
	222, 223, 224, 0, 214, -2, -2, 0, 0, 0,
	-2, 117, 120, 121, 122, 123, 124, 125, -2, -2,
	-2, -2, -2, -2, -2, -2, 247, 165, 167, 168,
	315, 288, 0, 290, 0, 0, 0, 292, 0, 0,
	281, 218, 220, 216, -2, -2, -2, 0, 318, 0,
	289, 0, 300, 291, 0, 328, 166, 309, 0, 0,
	0, 0, 326, 0, 39, 0, 0, 331, 0, 0,
	0, 0, 299, 0, 40, 0, 0, 0, 330, 0,
	0, 0, 0, 0, 140, 141, 317, 313, 314, 0,
	0, 0, 316,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 140, 3, 137, 141, 3,
	145, 146, 135, 133, 143, 134, 144, 136, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 149, 142,
	129, 131, 130, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 147, 3, 148, 138, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 139,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 132,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:191
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:206
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:214
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:229
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:240
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:242
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:253
		{
			yyVAL.str = yyDollar[1].str
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:254
		{
			yyVAL.str = ""
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:258
		{
			yyVAL.node = yyDollar[1].node
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:259
		{
			yyVAL.node = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:263
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:264
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:265
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:269
		{
			yyVAL.ival = 1
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:270
		{
			yyVAL.ival = 0
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:274
		{
			yyVAL.ival = 1
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:275
		{
			yyVAL.ival = 0
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:279
		{
			yyVAL.ival = 1
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:280
		{
			yyVAL.ival = 0
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:284
		{
			yyVAL.ival = 1
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:285
		{
			yyVAL.ival = 0
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:289
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:290
		{
			yyVAL.node = nil
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:294
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:295
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:296
		{
			yyVAL.node = nil
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:297
		{
			yyVAL.node = nil
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:306
		{
			yyVAL.str = yyDollar[1].str
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:308
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:312
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:313
		{
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:314
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:315
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:316
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:320
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:325
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:329
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:338
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:342
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:351
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:358
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
				Inh:        true, // inheritance enabled by default
			}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:366
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:395
		{
			yyVAL.node = yyDollar[2].node
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:396
		{
			yyVAL.node = nil
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:401
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:405
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:414
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:418
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:422
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.node = nodes
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:434
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:438
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:452
		{
			yyVAL.str = "all"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:453
		{
			yyVAL.str = "materialized"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:454
		{
			yyVAL.str = "recursive"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:455
		{
			yyVAL.str = "search"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:456
		{
			yyVAL.str = "breadth"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:457
		{
			yyVAL.str = "depth"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:458
		{
			yyVAL.str = "cycle"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:459
		{
			yyVAL.str = "first"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:460
		{
			yyVAL.str = "set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:461
		{
			yyVAL.str = "by"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:462
		{
			yyVAL.str = "true"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:463
		{
			yyVAL.str = "false"
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:468
		{
			yyVAL.str = yyDollar[1].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:473
		{
			yyVAL.str = yyDollar[1].str
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:478
		{
			yyVAL.str = "create"
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:479
		{
			yyVAL.str = "drop"
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:480
		{
			yyVAL.str = "alter"
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:495
		{
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:497
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:502
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:507
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:511
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:516
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:521
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:526
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:531
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:536
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:541
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:546
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:551
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:556
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:561
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:566
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:571
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:575
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:579
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:583
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:587
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:591
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:595
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:599
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:604
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:612
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 96:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:617
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:625
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:630
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:638
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:643
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:651
		{
			// Convert any_name (which returns a NodeList of strings) to []string
			nodeList := yyDollar[3].node.(*ast.NodeList)
			names := make([]string, len(nodeList.Items))
			for i, node := range nodeList.Items {
				names[i] = node.(*ast.String).SVal
			}
			collateClause := ast.NewCollateClause(names)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:663
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:669
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:675
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:679
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:683
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 107:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:688
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:693
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 109:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:698
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:703
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:708
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:713
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:718
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:726
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:731
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.node = yyDollar[1].node
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:742
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:746
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:751
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:756
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:761
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:766
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:771
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:776
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:781
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:786
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:791
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:796
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:801
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:806
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:811
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.node = yyDollar[1].node
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.node = yyDollar[1].node
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:820
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:829
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.node = yyDollar[1].node
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = yyDollar[1].str
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:874
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:875
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:884
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:898
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.node = yyDollar[1].node
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:905
		{
			yyVAL.node = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:909
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:913
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:917
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:921
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:926
		{
			yyVAL.list = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:928
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:940
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:952
		{
			// Create function name from ColId + indirection
			result := []*ast.String{ast.NewString(yyDollar[1].str)}
			for _, node := range yyDollar[2].list.Items {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:965
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:969
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:975
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 166:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:981
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:989
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:995
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1007
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.node = yyDollar[1].node
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1033
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.node = yyDollar[1].node
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.node = yyDollar[1].node
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.node = yyDollar[1].node
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.node = yyDollar[1].node
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.node = yyDollar[1].node
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.node = yyDollar[1].node
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = yyDollar[1].str
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = yyDollar[1].str
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = yyDollar[1].str
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = yyDollar[1].str
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = yyDollar[1].str
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1070
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.list = nil
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1087
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1093
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list.Items {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.node = yyDollar[2].node
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.node = yyDollar[1].node
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.node = yyDollar[1].node
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.node = yyDollar[1].node
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.node = yyDollar[1].node
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1172
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1180
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "varchar"
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1192
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1200
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1208
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.node = ast.NewTypeName([]string{yyDollar[1].str})
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// Note: In full implementation, would set typmods to list with 1
			}
			yyVAL.node = typeName
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1235
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1247
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1259
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1269
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1279
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1289
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.ival = 1
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.ival = 0
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.ival = 0
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.ival = 1
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.ival = 0
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1310
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = yyDollar[1].str
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "+"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "-"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "*"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "/"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "%"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "^"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "<"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = ">"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "="
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "<="
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = ">="
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "<>"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.list = nil
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.node = nil
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.node = nil
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.node = nil
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.ival = 0
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.ival = 0
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.node = yyDollar[2].node
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1418
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			yyVAL.stmt = selectStmt
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1432
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1442
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1452
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].node)
			yyVAL.stmt = selectStmt
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.list = yyDollar[1].list
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.list = nil
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1479
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1488
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.list = yyDollar[2].list
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.list = nil
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1515
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1524
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1532
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].node != nil {
				alias = yyDollar[2].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1543
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].node != nil {
				alias = yyDollar[3].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.node = yyDollar[1].node
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1558
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].node.(*ast.Alias)
			yyVAL.node = joinExpr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.node = yyDollar[1].node
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1580
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1586
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1592
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1613
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1622
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1648
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1674
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1682
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.ival = 1
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.ival = 0
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1711
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].node
			var aliasNode ast.Node = nil
			if yyDollar[5].node != nil {
				aliasNode = yyDollar[5].node
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.node = yyDollar[2].node
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.node = yyDollar[3].node
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.node = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.node = yyDollar[1].node
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.node = nil
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1764
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:1772
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].node != nil {
				cte.Aliascolnames = yyDollar[2].node.(*ast.NodeList)
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1807
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1813
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.node = nil
		}
	case 316:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:1826
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1835
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.node = nil
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1854
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].node.(*ast.NodeList)
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1862
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].node.(*ast.NodeList)
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.node = yyDollar[2].node
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.node = nil
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.node = yyDollar[1].node
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.node = yyDollar[1].node
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.node = nil
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1895
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1904
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1917
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = alias
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.node = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.ival = 1
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.ival = 0
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.list = yyDollar[4].node.(*ast.NodeList)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.list = yyDollar[1].list
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.list = nil
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
