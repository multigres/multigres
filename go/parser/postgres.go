// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:34
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     *ast.NodeList

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:9147

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 28,
	541, 28,
	-2, 1299,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	67, 1607,
	84, 1607,
	85, 2174,
	308, 1774,
	481, 1607,
	-2, 41,
	-1, 47,
	1, 28,
	541, 28,
	-2, 1299,
	-1, 70,
	85, 2173,
	-2, 1606,
	-1, 140,
	61, 246,
	64, 246,
	528, 246,
	534, 246,
	-2, 2217,
	-1, 583,
	84, 1607,
	481, 1607,
	-2, 40,
	-1, 585,
	210, 29,
	-2, 2180,
	-1, 632,
	16, 1164,
	17, 1164,
	532, 1164,
	-2, 47,
	-1, 633,
	16, 1165,
	17, 1165,
	532, 1165,
	-2, 48,
	-1, 1077,
	1, 604,
	26, 604,
	36, 604,
	64, 604,
	65, 604,
	73, 604,
	74, 604,
	101, 604,
	533, 604,
	541, 604,
	542, 604,
	-2, 1235,
	-1, 1542,
	532, 1128,
	-2, 1114,
	-1, 1706,
	118, 41,
	308, 1774,
	461, 41,
	-2, 1607,
	-1, 1745,
	532, 1776,
	-2, 170,
	-1, 1888,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1036,
	-1, 1889,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1037,
	-1, 1890,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1038,
	-1, 1891,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1039,
	-1, 1892,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1040,
	-1, 1893,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1041,
	-1, 1898,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1049,
	-1, 1904,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1053,
	-1, 1940,
	532, 1127,
	-2, 1168,
	-1, 2043,
	40, 1172,
	510, 1172,
	528, 1172,
	533, 1172,
	542, 1172,
	-2, 1168,
	-1, 2070,
	210, 29,
	-2, 2180,
	-1, 2253,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1051,
	-1, 2254,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1055,
	-1, 2267,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1068,
	-1, 2338,
	532, 1128,
	-2, 63,
	-1, 2344,
	151, 1539,
	-2, 1474,
	-1, 2486,
	6, 1703,
	12, 1703,
	535, 1703,
	536, 1703,
	-2, 1677,
	-1, 2568,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1050,
	-1, 2573,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1070,
	-1, 2574,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1054,
	-1, 2780,
	6, 1703,
	12, 1703,
	535, 1703,
	536, 1703,
	-2, 1696,
	-1, 2838,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1052,
	-1, 2839,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1056,
	-1, 2843,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1062,
	-1, 2851,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1082,
	-1, 2852,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1083,
	-1, 2853,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1084,
	-1, 2854,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1085,
	-1, 2855,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1086,
	-1, 2856,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1087,
	-1, 2857,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1064,
	-1, 2858,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1069,
	-1, 2928,
	541, 28,
	-2, 1299,
	-1, 3038,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1063,
	-1, 3039,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1065,
	-1, 3040,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1071,
	-1, 3566,
	7, 1424,
	-2, 247,
}

const yyPrivate = 57344

const yyLast = 55626

var yyAct = [...]int16{
	562, 3618, 3563, 3677, 3607, 3660, 3453, 3617, 816, 1954,
	3646, 3608, 2002, 792, 3480, 2248, 2891, 3564, 3273, 2044,
	3384, 3629, 2102, 831, 3171, 3448, 3214, 3288, 1663, 3373,
	2979, 3108, 2468, 2450, 2151, 3188, 2886, 143, 143, 2956,
	1022, 3366, 2917, 552, 3420, 634, 1957, 3438, 3151, 3300,
	552, 666, 2866, 3215, 552, 2867, 2761, 3295, 3312, 589,
	585, 588, 591, 588, 3489, 588, 3289, 3089, 3290, 2657,
	1980, 2363, 2454, 552, 552, 552, 552, 3062, 3065, 631,
	588, 588, 2077, 588, 631, 2241, 1756, 629, 3146, 631,
	3137, 631, 663, 2653, 2008, 2884, 2978, 663, 2108, 663,
	2924, 588, 2333, 588, 1939, 588, 2349, 859, 3017, 3163,
	665, 698, 2364, 841, 3253, 2945, 590, 2720, 2875, 2752,
	2031, 27, 4, 863, 2661, 2071, 3096, 704, 704, 1997,
	673, 2038, 143, 143, 3072, 2429, 2898, 1031, 2156, 2989,
	1558, 1995, 2281, 673, 673, 2713, 2415, 1705, 18, 1704,
	17, 544, 39, 705, 857, 1703, 12, 1702, 11, 2894,
	2647, 1992, 1937, 5, 2319, 2294, 2058, 2150, 27, 2485,
	2462, 2123, 1724, 2735, 2078, 2049, 2034, 3449, 974, 2629,
	2394, 2063, 1994, 2062, 2311, 1958, 1665, 673, 782, 2061,
	571, 756, 1810, 773, 1971, 18, 821, 17, 1538, 39,
	984, 2155, 1972, 12, 928, 11, 898, 2103, 1740, 1712,
	2048, 847, 2010, 134, 2036, 1027, 572, 923, 1979, 2340,
	1975, 1664, 1638, 1968, 1530, 1933, 1978, 28, 1927, 1909,
	1729, 1970, 1912, 1021, 754, 877, 1551, 1977, 695, 664,
	879, 584, 783, 57, 702, 549, 989, 1987, 1877, 1687,
	1019, 560, 568, 1050, 2403, 921, 55, 558, 964, 38,
	567, 964, 964, 760, 3561, 3708, 3560, 3699, 542, 965,
	3697, 3637, 965, 965, 3592, 615, 3638, 2402, 3616, 3592,
	3638, 3614, 3600, 3591, 3577, 1878, 2404, 3335, 3570, 3546,
	1644, 1644, 3592, 3578, 876, 3502, 3468, 2299, 3047, 541,
	3462, 1944, 3435, 563, 1990, 3469, 2249, 3429, 3412, 3463,
	33, 2441, 3411, 3410, 32, 34, 3407, 3413, 2433, 2322,
	3334, 1644, 1644, 3332, 44, 3408, 3267, 3326, 803, 3335,
	1963, 1053, 967, 3252, 3241, 3047, 803, 688, 689, 1053,
	3223, 3210, 3251, 3242, 1990, 806, 3524, 3340, 2271, 3222,
	967, 41, 1051, 738, 1653, 42, 1651, 772, 3193, 2272,
	3145, 1650, 1654, 1649, 1651, 1655, 2889, 2842, 3190, 1990,
	1052, 1727, 1652, 2723, 146, 46, 3143, 3125, 2679, 1656,
	1652, 3056, 36, 3055, 3046, 2404, 3124, 1656, 2975, 2974,
	3057, 2678, 967, 3047, 2270, 2605, 808, 2976, 1990, 2973,
	31, 2580, 2581, 2582, 2583, 1644, 3271, 2967, 1990, 2577,
	2939, 2909, 2670, 2587, 2588, 2589, 1990, 2593, 3224, 2404,
	2910, 1990, 2563, 2509, 2496, 2406, 1644, 2385, 2304, 2298,
	2289, 1644, 2510, 2497, 2407, 2280, 2386, 2305, 2299, 1644,
	813, 2309, 2273, 2441, 1644, 2347, 2282, 803, 1919, 2231,
	1053, 1644, 1056, 1057, 1058, 1059, 2073, 1991, 1644, 672,
	1950, 1946, 1645, 1872, 827, 2074, 1990, 557, 44, 967,
	1644, 1644, 672, 672, 976, 1651, 1709, 47, 2594, 2583,
	1059, 2689, 1676, 1709, 819, 759, 815, 976, 2934, 862,
	1028, 1652, 2980, 862, 2667, 41, 815, 823, 1656, 42,
	780, 822, 823, 2498, 1709, 976, 822, 1709, 1679, 2499,
	865, 764, 2577, 3641, 2991, 803, 672, 3506, 1053, 46,
	3200, 3155, 1063, 1064, 1065, 1053, 985, 986, 3153, 985,
	986, 696, 3115, 44, 1646, 766, 768, 770, 774, 987,
	2614, 1653, 983, 1651, 2864, 2863, 805, 805, 1650, 1654,
	1649, 757, 1655, 2862, 552, 2861, 1648, 1069, 1070, 1652,
	41, 1716, 3456, 2722, 42, 805, 1656, 552, 2639, 836,
	552, 552, 1053, 2600, 2440, 552, 552, 2105, 2401, 631,
	631, 2346, 2274, 631, 46, 2238, 2236, 849, 850, 2233,
	2232, 853, 587, 1945, 606, 1797, 608, 1651, 867, 840,
	2617, 2447, 1539, 762, 40, 803, 761, 780, 1053, 3457,
	779, 658, 659, 1652, 661, 1751, 3698, 873, 3675, 3671,
	842, 3580, 758, 3554, 3530, 3454, 552, 552, 3523, 54,
	3478, 3296, 691, 1651, 693, 3389, 2570, 3386, 1757, 3311,
	3307, 1754, 2350, 3257, 3213, 3177, 3162, 3160, 3159, 1652,
	3158, 864, 803, 2900, 3051, 1053, 1656, 2920, 2904, 1063,
	1064, 1065, 2888, 2880, 803, 2718, 2710, 1053, 2702, 2674,
	2641, 1646, 2634, 2475, 1647, 2474, 588, 588, 1653, 2467,
	1651, 2337, 1717, 35, 2336, 1650, 1654, 1649, 2292, 1655,
	37, 1914, 1651, 1648, 1069, 1070, 1652, 2193, 2101, 2080,
	2004, 2577, 2609, 1656, 1539, 2587, 2588, 2589, 1652, 1541,
	564, 1858, 1990, 1776, 1990, 1656, 1697, 2841, 1688, 1549,
	1547, 1546, 1540, 40, 991, 976, 978, 922, 830, 826,
	866, 3013, 872, 2577, 2408, 817, 2620, 2587, 2588, 2589,
	2387, 588, 2668, 2075, 1964, 2334, 1053, 985, 986, 2840,
	3120, 2648, 1812, 3421, 1749, 1990, 1680, 2815, 1747, 803,
	3265, 3154, 1053, 1963, 3264, 1035, 1063, 1064, 1065, 861,
	820, 1651, 568, 568, 1011, 3191, 962, 1812, 1646, 971,
	967, 1647, 1752, 1963, 2516, 1653, 3631, 1651, 805, 805,
	805, 805, 1650, 1654, 1649, 805, 1655, 2810, 3113, 673,
	1648, 1069, 1070, 1652, 541, 773, 3191, 45, 673, 673,
	1656, 2963, 2526, 805, 773, 773, 3191, 828, 1532, 3382,
	40, 1052, 3381, 3263, 805, 1715, 552, 805, 1728, 917,
	838, 839, 3139, 775, 1072, 2119, 1667, 2177, 1668, 1809,
	854, 2518, 2173, 1677, 1785, 3256, 2709, 552, 1686, 2107,
	1640, 2106, 1054, 1055, 1056, 1057, 1058, 1059, 2066, 875,
	1054, 1055, 1056, 1057, 1058, 1059, 591, 846, 1557, 588,
	588, 588, 588, 748, 588, 1015, 552, 741, 2944, 1708,
	574, 1699, 625, 1738, 3133, 1730, 3632, 2423, 2245, 3132,
	2933, 552, 975, 588, 2419, 2786, 1755, 576, 980, 981,
	982, 552, 673, 2666, 2680, 1766, 1765, 552, 1557, 3119,
	1557, 552, 852, 902, 552, 2968, 908, 1678, 911, 934,
	1753, 2584, 2585, 2586, 746, 1714, 687, 1866, 2957, 988,
	2578, 2579, 2580, 2581, 2582, 2583, 2050, 2052, 2051, 2577,
	552, 2132, 1643, 2587, 2588, 2589, 1012, 581, 552, 552,
	3428, 45, 3396, 3323, 1764, 588, 588, 588, 588, 1682,
	1006, 1553, 588, 588, 40, 2130, 614, 1700, 613, 1009,
	588, 1054, 1055, 1056, 1057, 1058, 1059, 805, 1757, 999,
	992, 993, 1773, 823, 996, 3321, 3140, 822, 3025, 2131,
	2577, 1849, 3497, 704, 2587, 2588, 2589, 1658, 2613, 2803,
	1852, 1553, 612, 1713, 611, 2800, 2592, 552, 2463, 2992,
	2993, 2176, 1737, 2129, 1033, 1535, 45, 1550, 704, 1029,
	1030, 1072, 542, 1542, 1734, 2788, 2472, 1782, 1778, 40,
	1060, 1061, 1062, 2578, 2579, 2580, 2581, 2582, 2583, 1054,
	1055, 1056, 1057, 1058, 1059, 52, 1054, 1055, 1056, 1057,
	1058, 1059, 552, 805, 3455, 805, 805, 805, 805, 805,
	805, 805, 805, 805, 805, 805, 805, 805, 805, 864,
	763, 1548, 805, 1881, 805, 588, 764, 805, 1845, 1641,
	3391, 1023, 1023, 755, 1039, 864, 2577, 58, 3292, 1684,
	2587, 2588, 2589, 1054, 1055, 1056, 1057, 1058, 1059, 1710,
	1689, 2794, 2576, 1777, 2508, 2465, 3392, 864, 1032, 1032,
	2505, 1032, 68, 803, 1746, 1748, 1053, 2118, 2504, 1744,
	1550, 2374, 3279, 68, 3549, 2141, 1557, 2244, 672, 1054,
	1055, 1056, 1057, 1058, 1059, 2365, 2425, 672, 672, 2969,
	1775, 1651, 2824, 1786, 2569, 2785, 2546, 2936, 960, 2545,
	774, 1731, 1013, 2219, 1851, 1731, 3166, 1652, 1072, 774,
	774, 2218, 1037, 2217, 1656, 2769, 581, 1060, 1061, 1062,
	1005, 2216, 957, 2763, 3548, 2246, 1054, 1055, 1056, 1057,
	1058, 1059, 1806, 2478, 1760, 760, 2210, 2209, 1054, 1055,
	1056, 1057, 1058, 1059, 2201, 871, 1003, 1556, 955, 2180,
	1843, 1829, 1816, 1867, 953, 952, 3118, 937, 938, 1788,
	951, 1731, 1792, 2584, 2585, 2586, 1743, 950, 1850, 1916,
	946, 869, 2578, 2579, 2580, 2581, 2582, 2583, 2388, 2421,
	945, 672, 944, 2771, 2649, 1811, 943, 1556, 1731, 1556,
	2424, 1860, 1861, 1862, 942, 2584, 2585, 2586, 582, 803,
	2479, 1731, 1053, 929, 2578, 2579, 2580, 2581, 2582, 2583,
	1811, 803, 941, 935, 1053, 1072, 1731, 1054, 1055, 1056,
	1057, 1058, 1059, 2892, 1060, 1061, 1062, 1651, 1698, 933,
	2259, 3538, 1731, 1054, 1055, 1056, 1057, 1058, 1059, 1651,
	580, 1731, 2252, 1652, 575, 1880, 1731, 1016, 1731, 926,
	1656, 2769, 2053, 925, 924, 1652, 1742, 1002, 803, 954,
	920, 1053, 1656, 2659, 2769, 1063, 1064, 1065, 959, 2420,
	930, 1780, 1733, 1732, 1853, 3189, 2366, 1646, 3481, 1854,
	1647, 2812, 868, 1857, 1653, 578, 1651, 1859, 2418, 2393,
	3287, 1650, 1654, 1649, 69, 1655, 2417, 2423, 1741, 1648,
	1069, 1070, 1652, 2481, 2419, 69, 2770, 2522, 1869, 1656,
	2519, 2422, 2565, 3465, 3004, 2120, 760, 745, 1870, 2771,
	3152, 2506, 2742, 2736, 2996, 1873, 1875, 2148, 803, 3293,
	2139, 1053, 2771, 1761, 2134, 1063, 1064, 1065, 3492, 2760,
	1871, 1004, 1049, 956, 1763, 1762, 2742, 1014, 2377, 3491,
	1718, 1719, 1720, 1721, 1653, 1722, 1651, 759, 747, 674,
	777, 1650, 1654, 1649, 2682, 1655, 870, 2375, 2764, 1648,
	1069, 1070, 1652, 931, 1770, 2414, 3127, 3482, 2932, 1656,
	1038, 2762, 1028, 767, 579, 3466, 2654, 3397, 815, 3294,
	2972, 3285, 2507, 1759, 1692, 2471, 577, 1769, 2773, 2906,
	3385, 2584, 2585, 2586, 2486, 1556, 3164, 1691, 3493, 3318,
	2578, 2579, 2580, 2581, 2582, 2583, 1040, 3280, 1774, 1043,
	2566, 2783, 3394, 757, 675, 1042, 2971, 2683, 2774, 3613,
	2376, 2775, 2905, 848, 1041, 2776, 1834, 1835, 1836, 1837,
	2716, 3388, 2770, 1928, 1844, 2597, 3486, 2772, 3276, 2707,
	1044, 1847, 2584, 2585, 2586, 2770, 67, 2777, 66, 580,
	1017, 2578, 2579, 2580, 2581, 2582, 2583, 67, 2837, 66,
	958, 743, 2970, 1048, 3371, 44, 71, 626, 855, 1661,
	2736, 753, 676, 753, 1838, 2411, 2717, 856, 2834, 855,
	805, 805, 591, 1007, 758, 2780, 2715, 805, 805, 1047,
	805, 2833, 41, 778, 2676, 2055, 42, 3551, 2480, 2486,
	2426, 1693, 2778, 1920, 1924, 990, 994, 995, 979, 3648,
	1930, 3069, 3220, 1942, 3654, 3569, 46, 3109, 3049, 2779,
	2762, 2765, 2463, 2297, 2773, 1842, 755, 1841, 759, 2902,
	3228, 3707, 1659, 3706, 2743, 3221, 2425, 2773, 2584, 2585,
	2586, 1925, 2813, 1768, 2757, 3680, 1905, 2578, 2579, 2580,
	2581, 2582, 2583, 1803, 2774, 3703, 2781, 2775, 2743, 2427,
	3238, 2776, 2997, 3679, 3702, 927, 2998, 2774, 2523, 1840,
	2775, 2520, 3695, 2772, 2776, 3694, 3239, 1054, 1055, 1056,
	1057, 1058, 1059, 2777, 3682, 805, 2772, 805, 805, 3685,
	805, 805, 588, 2744, 757, 3686, 2777, 3662, 3661, 3683,
	3664, 1959, 3666, 1961, 899, 3684, 3663, 1667, 3665, 3667,
	3668, 1984, 1984, 3681, 1757, 1001, 919, 2744, 2714, 1738,
	588, 2780, 1839, 3619, 3710, 3701, 3624, 3700, 3659, 2421,
	3622, 3135, 3623, 3625, 2780, 130, 2745, 2930, 2778, 552,
	2424, 742, 3647, 2456, 932, 2706, 2277, 627, 2070, 3644,
	3110, 2778, 2372, 2887, 3645, 2779, 2079, 3467, 3343, 3490,
	2745, 3439, 3632, 3596, 588, 758, 3533, 1917, 2779, 3532,
	3653, 3628, 1550, 552, 552, 3444, 2640, 1738, 1923, 1550,
	3689, 2458, 3237, 3562, 3446, 3060, 2916, 2110, 3441, 2114,
	2622, 1535, 2781, 2399, 2054, 1557, 2000, 3440, 2099, 1771,
	1018, 767, 2868, 1804, 3442, 2781, 1813, 1750, 1988, 552,
	3044, 3452, 1803, 1054, 1055, 1056, 1057, 1058, 1059, 2420,
	3621, 552, 3626, 3045, 2046, 1054, 1055, 1056, 1057, 1058,
	1059, 552, 3450, 2037, 2455, 552, 3353, 1941, 2865, 1801,
	3349, 3350, 2037, 1557, 3231, 3106, 3076, 805, 3229, 3352,
	3232, 3496, 3348, 3457, 1072, 3085, 3458, 3459, 673, 2056,
	3081, 2422, 1557, 1060, 1061, 1062, 786, 749, 751, 3599,
	3423, 3652, 1054, 1055, 1056, 1057, 1058, 1059, 1955, 1956,
	2089, 2081, 2082, 2083, 2084, 2085, 3443, 2296, 1553, 2758,
	1805, 2295, 3403, 1966, 3402, 2067, 1802, 3451, 2897, 805,
	3205, 673, 3402, 3403, 2487, 588, 1986, 662, 2342, 2343,
	2035, 835, 2759, 3313, 3314, 3330, 673, 673, 2097, 1984,
	3329, 3075, 2237, 2142, 1072, 3507, 3508, 3202, 542, 3078,
	3079, 3043, 1967, 1060, 1061, 1062, 2124, 3066, 3204, 3203,
	805, 805, 1054, 1055, 1056, 1057, 1058, 1059, 2295, 744,
	805, 805, 1962, 692, 607, 805, 805, 3457, 673, 3529,
	805, 1989, 3087, 3080, 773, 3083, 3084, 3086, 3082, 805,
	41, 1045, 2731, 2146, 42, 805, 805, 805, 2266, 48,
	49, 50, 51, 1960, 2293, 805, 2072, 610, 129, 2069,
	2068, 3658, 2104, 145, 46, 1949, 679, 2288, 681, 3558,
	2451, 1029, 1030, 3147, 1667, 805, 3320, 2109, 2090, 2652,
	805, 1818, 2145, 2321, 2321, 631, 2147, 1984, 2321, 2321,
	2321, 3559, 1817, 1671, 33, 1670, 2630, 2878, 32, 34,
	2625, 2345, 2628, 2317, 2315, 2316, 2314, 2179, 44, 552,
	2398, 552, 552, 2105, 2144, 1677, 552, 2624, 45, 1948,
	3709, 3693, 3097, 2158, 3692, 3098, 2398, 3691, 3099, 3642,
	2174, 1660, 3254, 3291, 2178, 41, 3401, 3399, 588, 42,
	2381, 143, 633, 2921, 2675, 2373, 3100, 633, 671, 2229,
	2202, 2694, 633, 2005, 633, 1953, 1758, 969, 948, 46,
	947, 671, 671, 939, 818, 2197, 36, 2397, 673, 1051,
	570, 730, 730, 566, 773, 3431, 3430, 552, 3354, 3218,
	2212, 2213, 2157, 3102, 31, 3026, 2163, 3003, 3000, 2167,
	2908, 2804, 2171, 3101, 1556, 2801, 2695, 2405, 2249, 2958,
	2354, 1969, 2111, 3103, 3142, 671, 2335, 2283, 2959, 2442,
	1878, 2243, 805, 2240, 1675, 569, 2247, 1674, 3499, 3520,
	2250, 1985, 1985, 3198, 2260, 3195, 3034, 2960, 2396, 3021,
	1557, 2494, 2339, 2312, 2317, 2315, 2316, 2314, 3015, 2310,
	2313, 2255, 1556, 3014, 2306, 2257, 2822, 2821, 2814, 2361,
	2809, 2389, 542, 2268, 2557, 2488, 2556, 672, 2555, 2554,
	2553, 1556, 2552, 2550, 2549, 2276, 2547, 2538, 2537, 2525,
	2235, 2284, 2285, 2524, 1917, 2521, 2453, 2290, 2390, 2392,
	2452, 2329, 2258, 2877, 2312, 2317, 2315, 2316, 2314, 2409,
	2310, 2313, 2876, 1905, 2300, 2302, 2301, 2511, 2512, 2211,
	672, 1023, 2436, 2326, 805, 797, 29, 2328, 1557, 1557,
	1557, 2325, 2338, 552, 542, 672, 672, 2430, 2356, 2344,
	2446, 1999, 2324, 1713, 2256, 1911, 2431, 2198, 1032, 1915,
	1910, 1911, 2367, 3104, 3105, 2412, 1833, 2543, 2370, 3128,
	588, 1832, 1831, 1830, 1826, 1825, 543, 2222, 1824, 2225,
	1823, 1822, 1821, 29, 2382, 1815, 1814, 672, 29, 1800,
	805, 2448, 2391, 805, 1799, 2086, 805, 805, 1798, 805,
	805, 805, 1796, 1783, 805, 805, 2400, 1779, 1772, 774,
	2312, 2317, 2315, 2316, 2314, 1672, 2310, 2313, 805, 1906,
	1856, 1907, 2234, 805, 2428, 776, 765, 805, 805, 1855,
	3274, 1928, 2318, 3, 1901, 3361, 805, 2330, 2331, 2332,
	1959, 1900, 1902, 1899, 3553, 1903, 1667, 2457, 2707, 2464,
	1984, 3552, 2987, 1984, 2473, 2477, 1897, 2484, 2983, 1985,
	2927, 2633, 2681, 2360, 2321, 2321, 2321, 2321, 2321, 2251,
	2194, 2191, 1896, 2187, 1791, 907, 901, 805, 805, 2470,
	805, 565, 547, 2746, 2378, 2379, 767, 3615, 1738, 2469,
	1807, 2664, 2951, 2980, 807, 767, 2513, 35, 136, 1806,
	815, 2721, 548, 2003, 37, 2918, 2366, 805, 2946, 2242,
	964, 1032, 1032, 2977, 2912, 85, 58, 2104, 583, 771,
	2559, 965, 2460, 2096, 2341, 2541, 2341, 672, 805, 805,
	2517, 810, 2088, 2006, 1681, 811, 533, 809, 552, 874,
	1677, 68, 858, 2527, 3073, 61, 3176, 3175, 2369, 774,
	122, 2835, 2733, 2540, 2491, 1985, 2489, 1985, 588, 2459,
	2449, 1032, 2701, 2357, 805, 552, 2603, 2604, 2606, 2001,
	1864, 1794, 1790, 1723, 2561, 1012, 1707, 2562, 998, 973,
	970, 966, 2079, 2708, 961, 2602, 940, 913, 588, 1556,
	552, 910, 906, 2673, 900, 2671, 572, 673, 2665, 2985,
	1738, 2615, 2616, 2727, 2737, 1917, 2984, 2619, 1677, 2224,
	2530, 2596, 2434, 1677, 2535, 1677, 2754, 2445, 1706, 848,
	2663, 45, 740, 2610, 2611, 2618, 3525, 2355, 3434, 3395,
	2789, 2037, 2621, 860, 40, 2631, 2632, 1917, 2627, 633,
	633, 3183, 3121, 3059, 2623, 2988, 2749, 2626, 2955, 2037,
	2037, 2950, 2940, 2353, 2087, 2644, 1008, 2669, 633, 1662,
	1642, 2687, 2703, 2688, 815, 2436, 3651, 1556, 1556, 1556,
	2655, 2753, 633, 633, 2725, 1550, 633, 2286, 2287, 3633,
	2430, 1876, 1874, 1557, 2700, 1557, 2755, 815, 815, 2431,
	767, 2699, 2515, 3275, 2999, 2651, 1557, 1046, 1868, 2380,
	769, 1036, 2928, 2684, 3141, 3484, 2766, 2782, 2035, 64,
	805, 805, 2697, 1851, 2692, 3136, 2690, 805, 2935, 805,
	805, 805, 805, 805, 805, 805, 805, 805, 805, 805,
	805, 2698, 3278, 805, 2696, 805, 3138, 2844, 3390, 3134,
	805, 2732, 805, 1690, 3129, 60, 805, 2368, 2015, 2371,
	2009, 2358, 2032, 2028, 2754, 2436, 2719, 528, 529, 135,
	2558, 805, 2726, 1808, 2060, 1984, 1984, 2869, 1696, 1984,
	2430, 1695, 2444, 69, 2792, 2443, 2124, 25, 2793, 2431,
	2321, 24, 631, 2635, 2636, 2637, 2638, 2787, 23, 22,
	2767, 21, 2784, 2768, 20, 19, 26, 16, 1701, 65,
	551, 833, 1711, 2482, 3404, 3304, 2962, 1738, 588, 2791,
	2461, 2734, 105, 106, 104, 903, 3544, 2122, 2796, 3372,
	2658, 56, 3286, 2919, 2755, 2416, 2413, 2741, 2656, 3299,
	2751, 2907, 2662, 1996, 2660, 552, 1993, 3595, 2890, 3620,
	2931, 3342, 3447, 1677, 3226, 3064, 3437, 671, 2923, 3058,
	2883, 805, 2885, 2076, 43, 3201, 671, 671, 3042, 591,
	1947, 1669, 588, 2903, 30, 546, 545, 3433, 781, 2483,
	3243, 3365, 3088, 2899, 1738, 3077, 2650, 2964, 2913, 53,
	2871, 633, 633, 633, 633, 2922, 2881, 1673, 633, 2896,
	1985, 2895, 3351, 1985, 1032, 3347, 3346, 805, 59, 2612,
	1952, 2560, 2811, 2893, 2860, 1965, 633, 2816, 2602, 1657,
	15, 14, 2966, 13, 10, 9, 1555, 633, 2952, 2925,
	633, 8, 7, 6, 1873, 1875, 672, 593, 2432, 2279,
	2911, 1929, 1545, 724, 723, 67, 708, 66, 63, 710,
	2037, 726, 790, 725, 2882, 2434, 3008, 709, 62, 977,
	671, 2901, 707, 730, 706, 71, 1555, 70, 1555, 2873,
	2874, 732, 1921, 2879, 801, 2947, 2949, 800, 2914, 1926,
	2275, 1543, 795, 796, 791, 628, 2143, 2493, 2514, 2149,
	3319, 805, 805, 805, 1032, 2223, 829, 673, 1084, 3094,
	673, 2943, 2981, 3031, 1081, 2, 1, 0, 2942, 0,
	0, 0, 2938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1556, 0, 1556, 2961, 0, 0, 805, 1984,
	0, 0, 2693, 0, 0, 1556, 0, 0, 805, 805,
	805, 0, 0, 0, 0, 2434, 0, 0, 0, 0,
	0, 0, 0, 2990, 0, 552, 0, 0, 2986, 3111,
	0, 2664, 3018, 3020, 0, 3018, 1985, 552, 0, 0,
	0, 2754, 552, 2994, 0, 730, 2990, 730, 3010, 3007,
	633, 0, 0, 0, 0, 0, 0, 3093, 0, 0,
	3005, 3006, 0, 0, 0, 0, 1557, 0, 0, 2705,
	2740, 0, 730, 0, 2832, 2748, 0, 2750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3122, 0, 0, 0, 2754, 591, 2724,
	588, 588, 0, 3114, 0, 0, 0, 0, 0, 0,
	1533, 2755, 3054, 3050, 1536, 1537, 0, 0, 0, 0,
	0, 0, 0, 3041, 588, 588, 633, 730, 633, 633,
	633, 633, 633, 633, 633, 633, 633, 633, 633, 633,
	633, 633, 3116, 0, 963, 633, 0, 633, 0, 29,
	633, 3074, 2753, 3107, 1555, 3112, 3149, 3169, 3091, 3090,
	2663, 3131, 0, 0, 0, 0, 0, 2755, 2754, 27,
	0, 3130, 0, 3071, 1985, 3192, 0, 3126, 631, 3070,
	0, 3216, 3206, 805, 0, 1985, 1985, 0, 805, 1985,
	3148, 0, 673, 3053, 805, 2929, 18, 0, 17, 0,
	39, 0, 1985, 3165, 12, 3167, 11, 0, 3161, 2995,
	0, 0, 0, 0, 3001, 3002, 3168, 0, 0, 0,
	0, 0, 0, 3207, 3144, 0, 3009, 3249, 0, 0,
	0, 1032, 0, 0, 0, 0, 1032, 0, 2755, 3156,
	2954, 1032, 1032, 0, 3123, 3250, 3184, 0, 2885, 0,
	2436, 3244, 0, 1032, 1032, 3197, 673, 3018, 0, 3217,
	0, 0, 773, 552, 0, 2430, 0, 0, 3259, 3185,
	0, 0, 3272, 3212, 2431, 805, 0, 0, 3284, 3211,
	805, 805, 0, 3209, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 699, 3281, 0, 672, 0, 805, 672,
	0, 0, 0, 3302, 3303, 2941, 3261, 3283, 3233, 3234,
	0, 0, 3235, 3236, 0, 0, 3255, 3305, 0, 2915,
	0, 0, 0, 1677, 673, 0, 1667, 0, 1557, 3260,
	3301, 0, 0, 3208, 2079, 0, 0, 0, 561, 561,
	3270, 0, 3268, 805, 3262, 3269, 0, 3277, 3344, 2925,
	3036, 3037, 3325, 0, 3331, 0, 3336, 673, 1677, 3258,
	1677, 0, 3298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 2953, 0, 660, 0, 0, 3374, 3315,
	0, 677, 0, 680, 0, 682, 683, 684, 685, 686,
	1557, 3316, 0, 690, 1913, 1556, 0, 0, 0, 3306,
	700, 3308, 0, 3310, 0, 3266, 0, 0, 1557, 3367,
	0, 3377, 0, 3370, 673, 3379, 3333, 3338, 0, 3092,
	773, 3339, 3322, 0, 0, 0, 0, 0, 1677, 3383,
	3364, 0, 591, 0, 0, 0, 0, 0, 3178, 1985,
	0, 805, 0, 0, 3181, 3182, 0, 0, 3375, 0,
	3378, 0, 0, 0, 0, 3380, 3216, 0, 1873, 1875,
	0, 805, 3387, 0, 805, 1032, 0, 3432, 0, 0,
	0, 1032, 1032, 3405, 0, 0, 0, 3400, 3398, 1032,
	0, 1985, 1677, 3341, 0, 3368, 0, 0, 0, 0,
	0, 3419, 0, 0, 3422, 0, 3424, 805, 0, 0,
	0, 3090, 0, 0, 0, 0, 3393, 2754, 0, 3436,
	805, 0, 0, 0, 3485, 3414, 0, 3416, 0, 3418,
	0, 672, 0, 0, 0, 3470, 3471, 3477, 3464, 3245,
	2434, 3475, 3474, 0, 0, 0, 0, 1985, 0, 0,
	630, 0, 0, 3417, 0, 0, 0, 0, 0, 0,
	3513, 1677, 1677, 0, 3505, 3516, 1032, 0, 0, 3479,
	805, 805, 0, 0, 805, 0, 0, 3501, 3500, 3503,
	3476, 0, 1667, 0, 673, 0, 1959, 2755, 3498, 1557,
	3301, 3495, 3510, 3511, 3527, 672, 3504, 3509, 3494, 0,
	3374, 588, 588, 0, 0, 0, 0, 0, 0, 2754,
	3526, 631, 3522, 0, 3240, 3517, 0, 774, 1985, 3547,
	3543, 0, 3473, 633, 633, 3535, 3537, 0, 1985, 3534,
	633, 633, 3528, 633, 3367, 3531, 3540, 0, 0, 673,
	3542, 3172, 3173, 3539, 0, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 3565, 805, 0, 0, 711, 711,
	3550, 805, 3555, 672, 3545, 3179, 3180, 1556, 3556, 0,
	3375, 0, 0, 0, 0, 0, 0, 0, 3557, 2755,
	3567, 0, 0, 0, 3571, 805, 0, 0, 0, 3487,
	3587, 3588, 3589, 3216, 0, 0, 672, 3579, 3581, 3572,
	0, 1557, 3586, 588, 3575, 0, 3597, 3598, 3584, 2754,
	0, 3574, 0, 3576, 0, 3594, 0, 1076, 3585, 3590,
	3541, 0, 3604, 3565, 0, 0, 0, 3601, 633, 1556,
	633, 633, 3606, 633, 633, 0, 0, 0, 0, 3634,
	3627, 3630, 0, 3602, 0, 0, 0, 1556, 2769, 3636,
	805, 0, 0, 672, 633, 633, 1557, 0, 3639, 3640,
	3355, 3356, 3357, 3358, 3605, 1076, 0, 0, 0, 0,
	631, 0, 730, 3635, 0, 774, 0, 3409, 3657, 2755,
	3656, 730, 3649, 3650, 0, 3573, 0, 0, 3670, 3676,
	3669, 3673, 3678, 1555, 3568, 0, 3582, 3583, 0, 0,
	0, 3674, 3565, 0, 3688, 3687, 3655, 0, 0, 0,
	3690, 0, 0, 0, 1557, 3328, 2771, 0, 0, 3678,
	3603, 3696, 730, 0, 0, 0, 0, 0, 1985, 3565,
	0, 3704, 3705, 0, 0, 0, 0, 0, 0, 883,
	0, 1555, 0, 0, 884, 0, 0, 0, 893, 3612,
	3359, 1557, 3362, 968, 0, 0, 671, 972, 0, 0,
	1555, 803, 0, 561, 1053, 0, 2262, 2262, 1063, 1064,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1646, 0, 0, 1647, 851, 0, 0, 1653, 0, 1651,
	633, 0, 0, 997, 1650, 1654, 1649, 0, 1655, 671,
	0, 0, 1648, 1069, 1070, 1652, 0, 3612, 0, 0,
	0, 886, 1656, 672, 671, 671, 0, 0, 1556, 0,
	3415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2261, 2265, 2770,
	892, 0, 633, 0, 3612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 1985, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 0, 672, 0,
	0, 897, 0, 0, 3460, 0, 0, 0, 936, 0,
	1913, 0, 0, 633, 633, 0, 543, 0, 0, 0,
	774, 949, 0, 633, 633, 0, 1973, 1973, 633, 633,
	0, 0, 0, 633, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 882, 0, 0, 0, 633, 633,
	633, 0, 0, 0, 0, 880, 0, 0, 633, 0,
	1556, 2773, 0, 0, 0, 0, 0, 0, 0, 0,
	1985, 887, 0, 3514, 3515, 0, 0, 0, 633, 1985,
	0, 0, 0, 633, 0, 0, 3609, 0, 633, 0,
	633, 2774, 0, 0, 2775, 0, 0, 0, 2776, 0,
	0, 0, 0, 0, 881, 0, 889, 0, 0, 0,
	2772, 0, 888, 0, 0, 1556, 110, 0, 0, 0,
	2777, 730, 0, 0, 0, 0, 671, 0, 0, 0,
	0, 0, 0, 832, 113, 0, 0, 3611, 0, 0,
	0, 0, 0, 0, 3609, 0, 0, 0, 0, 0,
	730, 730, 0, 0, 0, 0, 0, 890, 2780, 730,
	0, 561, 3536, 3536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1556, 0, 2778, 0, 0, 0, 1985,
	0, 3609, 0, 0, 1863, 0, 1694, 0, 1555, 730,
	0, 0, 2779, 730, 0, 3611, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 0, 0, 0,
	1556, 0, 0, 894, 0, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2781,
	0, 0, 3611, 0, 1973, 0, 0, 0, 0, 0,
	0, 0, 2262, 2262, 119, 0, 2159, 0, 896, 895,
	2262, 2262, 0, 1795, 803, 0, 0, 1053, 1913, 0,
	0, 1063, 1064, 1065, 3536, 0, 1555, 1555, 1555, 0,
	1533, 0, 0, 1646, 1820, 115, 1647, 0, 0, 0,
	1653, 0, 1651, 0, 0, 0, 116, 1650, 1654, 1649,
	0, 1655, 0, 0, 0, 1648, 1069, 1070, 1652, 0,
	0, 1846, 0, 0, 1848, 1656, 0, 633, 0, 0,
	0, 108, 0, 2571, 2572, 0, 0, 0, 120, 0,
	0, 2590, 2591, 2642, 0, 885, 121, 0, 0, 0,
	2323, 0, 2327, 0, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 109, 0, 0,
	0, 0, 0, 633, 0, 0, 633, 0, 0, 633,
	633, 0, 633, 633, 633, 0, 0, 633, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 633, 1072, 0, 0,
	633, 633, 0, 0, 0, 0, 1060, 1061, 1062, 633,
	2262, 0, 0, 3406, 0, 1054, 1055, 1056, 1057, 1058,
	1059, 0, 0, 633, 0, 126, 633, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 123, 0, 0,
	711, 550, 0, 29, 0, 0, 0, 0, 0, 0,
	633, 633, 0, 633, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 124, 0, 0, 0, 0, 111,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 0,
	633, 2711, 0, 0, 0, 0, 0, 0, 117, 1076,
	1076, 1076, 1076, 0, 1076, 573, 0, 0, 0, 0,
	730, 633, 633, 730, 118, 730, 0, 1076, 0, 0,
	128, 0, 0, 0, 107, 618, 621, 623, 730, 730,
	0, 0, 730, 0, 0, 671, 0, 0, 0, 883,
	112, 0, 0, 0, 884, 0, 0, 633, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 711, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2262, 2262, 2262, 2262, 2262,
	2262, 2262, 2262, 2262, 2262, 2262, 2262, 0, 0, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1555, 730, 1555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1555, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 711, 0, 2845, 2846, 2847, 2848,
	2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 29, 0,
	0, 0, 0, 29, 29, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 0, 1973, 0, 0, 1973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 784,
	784, 0, 0, 633, 633, 0, 0, 0, 0, 0,
	633, 730, 633, 633, 633, 633, 633, 633, 633, 633,
	633, 633, 633, 633, 882, 0, 633, 0, 633, 29,
	0, 0, 0, 633, 0, 633, 0, 0, 0, 633,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 887, 0, 0, 633, 0, 0, 0, 633, 633,
	0, 0, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 889, 0, 0, 1060,
	1061, 1062, 888, 0, 0, 0, 3174, 0, 1054, 1055,
	1056, 1057, 1058, 1059, 0, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 1076, 1076, 1076, 1076,
	1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 0,
	0, 1076, 891, 0, 0, 0, 0, 1076, 0, 803,
	633, 1076, 1053, 894, 3061, 2262, 1063, 1064, 1065, 0,
	0, 3227, 0, 730, 0, 0, 0, 0, 1646, 0,
	0, 1647, 0, 0, 0, 1653, 0, 1651, 0, 0,
	730, 1076, 1650, 1654, 1649, 0, 1655, 0, 896, 895,
	1648, 1069, 1070, 1652, 1076, 671, 0, 0, 671, 0,
	1656, 1526, 1527, 1528, 1529, 0, 0, 0, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1544, 0, 0, 0,
	0, 0, 0, 0, 633, 633, 633, 1637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1973, 1973, 0, 0, 1973, 885, 0, 0, 0, 0,
	0, 633, 633, 0, 0, 824, 0, 0, 0, 0,
	0, 633, 633, 633, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 1555, 899, 843, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2226, 0,
	2227, 0, 2228, 0, 633, 2230, 0, 0, 0, 730,
	0, 0, 0, 883, 0, 0, 0, 2239, 884, 3219,
	0, 0, 893, 0, 2262, 0, 0, 0, 0, 0,
	0, 0, 2091, 2092, 2093, 0, 0, 914, 0, 0,
	0, 0, 0, 2100, 0, 0, 0, 0, 0, 0,
	0, 2112, 0, 2116, 2117, 0, 0, 0, 0, 2121,
	633, 0, 2125, 2126, 0, 0, 2133, 0, 2135, 2138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2160, 2161, 0, 886, 2165, 2166, 0, 2169,
	2170, 0, 0, 0, 0, 3225, 0, 730, 1940, 0,
	2181, 0, 2182, 2183, 2184, 2185, 2186, 0, 0, 2188,
	671, 0, 0, 2192, 892, 0, 0, 2195, 2196, 0,
	0, 2199, 2200, 1076, 0, 2203, 2204, 2205, 2206, 2207,
	2208, 633, 0, 0, 0, 0, 2214, 2215, 0, 0,
	0, 633, 2220, 2221, 0, 897, 633, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 784, 633, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 0, 0, 671, 1898, 0, 1904, 0, 2262,
	1908, 0, 0, 0, 0, 0, 1076, 1076, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 905,
	1076, 0, 1076, 0, 1973, 0, 0, 0, 730, 0,
	0, 1076, 0, 0, 0, 887, 730, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 2011, 0, 0, 1076, 1639, 633, 2043,
	1076, 2024, 671, 633, 633, 0, 1555, 0, 2043, 0,
	889, 0, 0, 0, 29, 0, 888, 0, 1683, 0,
	0, 633, 0, 0, 0, 0, 29, 0, 0, 2490,
	0, 2492, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 29, 0, 0, 0, 0, 0, 1726, 0, 711,
	0, 0, 0, 0, 0, 0, 0, 3445, 0, 0,
	730, 890, 1767, 0, 2030, 0, 633, 0, 1555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1781, 0,
	0, 0, 1784, 0, 0, 1787, 1555, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 0, 2026, 0,
	0, 633, 0, 2539, 0, 1072, 891, 0, 0, 0,
	0, 1819, 0, 0, 1060, 1061, 1062, 894, 0, 1827,
	1828, 0, 0, 1054, 1055, 1056, 1057, 1058, 1059, 0,
	0, 0, 0, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 896, 895, 0, 2564, 2262, 2262, 0, 1076,
	2262, 0, 0, 0, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 2476, 0, 0, 0, 0, 1865, 0,
	0, 0, 0, 0, 633, 0, 2016, 633, 0, 0,
	0, 0, 0, 2500, 2501, 2502, 2503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 29, 2025, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 0, 1879, 0, 0, 0, 3518, 3519, 885,
	633, 3521, 0, 633, 0, 1076, 0, 2528, 2529, 0,
	2532, 2533, 2534, 0, 0, 1940, 1940, 1940, 2021, 0,
	0, 0, 671, 0, 0, 0, 0, 1555, 0, 899,
	1076, 1076, 2544, 0, 0, 0, 1076, 1076, 1076, 0,
	0, 2018, 0, 0, 0, 2551, 0, 0, 0, 0,
	0, 0, 0, 633, 633, 0, 0, 633, 0, 0,
	0, 1076, 2012, 0, 0, 2023, 0, 0, 0, 0,
	1076, 1076, 0, 0, 0, 0, 0, 671, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 2362, 0,
	0, 0, 633, 0, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2029, 1076, 1076,
	0, 0, 0, 0, 0, 0, 0, 2043, 2362, 0,
	0, 0, 0, 0, 0, 0, 2395, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 1555,
	1076, 0, 37, 0, 633, 2047, 0, 0, 1076, 1076,
	0, 0, 0, 0, 0, 0, 2362, 0, 0, 2022,
	711, 0, 0, 0, 0, 0, 0, 883, 633, 0,
	0, 0, 884, 0, 0, 2019, 893, 0, 0, 730,
	0, 1938, 2017, 0, 0, 0, 2027, 0, 0, 0,
	0, 2672, 633, 0, 1555, 883, 0, 0, 0, 2013,
	884, 0, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 2020, 1053, 2014, 0, 0, 1063, 1064,
	1065, 0, 0, 633, 0, 0, 0, 0, 0, 886,
	1646, 0, 0, 1647, 0, 2836, 0, 1653, 2704, 1651,
	0, 29, 1555, 633, 1650, 1654, 1649, 0, 1655, 0,
	0, 0, 1648, 1069, 1070, 1652, 0, 886, 892, 0,
	0, 0, 1656, 0, 0, 0, 0, 0, 1951, 0,
	1894, 1895, 0, 1898, 1904, 2728, 2729, 2730, 0, 1555,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 897,
	0, 1076, 1076, 0, 0, 2747, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 1076, 1076, 0, 0, 2790, 0, 897, 0, 0,
	0, 0, 0, 1076, 883, 0, 0, 0, 0, 884,
	0, 2795, 882, 893, 0, 0, 0, 0, 0, 0,
	2797, 2798, 2799, 880, 0, 2802, 0, 0, 2805, 2806,
	2807, 2808, 0, 1940, 0, 0, 0, 0, 0, 887,
	882, 2817, 2818, 0, 2819, 0, 0, 0, 0, 0,
	0, 2823, 0, 2825, 2826, 0, 2827, 2828, 2829, 2830,
	2831, 0, 0, 0, 0, 0, 0, 887, 0, 0,
	0, 0, 881, 0, 889, 0, 886, 0, 0, 883,
	888, 1076, 0, 0, 884, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 889, 0, 0, 892, 0, 0, 888, 0,
	2190, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 2872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 2043, 0, 0,
	2362, 0, 2362, 0, 3011, 3012, 0, 0, 0, 0,
	0, 886, 0, 890, 0, 2043, 2043, 0, 0, 2362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 1076, 1076, 1076, 3030, 0, 0, 0, 0, 882,
	892, 894, 0, 0, 0, 1076, 3035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 1076, 0, 2253, 2254, 0, 887, 0, 0, 894,
	0, 897, 0, 0, 878, 0, 896, 895, 0, 2267,
	0, 0, 0, 2269, 0, 0, 0, 0, 0, 0,
	0, 0, 2278, 0, 0, 0, 0, 0, 1938, 1938,
	1938, 889, 2536, 803, 896, 895, 1053, 888, 2291, 2362,
	1063, 1064, 1065, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 1646, 0, 0, 1647, 0, 0, 2303, 1653,
	0, 1651, 0, 2307, 0, 0, 1650, 1654, 1649, 0,
	1655, 887, 0, 2897, 1648, 1069, 1070, 1652, 0, 0,
	0, 0, 890, 885, 1656, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3016, 0, 0, 3019, 0, 0,
	2065, 0, 0, 3022, 3023, 3024, 889, 0, 3027, 3028,
	3029, 885, 888, 899, 0, 3032, 3033, 803, 711, 0,
	1053, 0, 0, 0, 1063, 1064, 1065, 891, 0, 0,
	0, 0, 0, 0, 2094, 2095, 1646, 0, 894, 1647,
	0, 899, 1940, 1653, 0, 1651, 1940, 0, 0, 0,
	1650, 1654, 1649, 1076, 1655, 0, 0, 890, 1648, 1069,
	1070, 1652, 3048, 0, 0, 0, 0, 0, 1656, 0,
	2140, 2531, 0, 896, 895, 0, 0, 0, 0, 0,
	0, 0, 2162, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 2175, 0, 0, 2466, 1060, 1061, 1062, 0,
	0, 0, 891, 3150, 0, 1054, 1055, 1056, 1057, 1058,
	1059, 0, 0, 894, 0, 2926, 0, 0, 0, 803,
	1076, 711, 1053, 0, 0, 0, 1063, 1064, 1065, 0,
	0, 0, 0, 0, 0, 0, 2043, 0, 1646, 0,
	1076, 1647, 0, 0, 0, 1653, 2172, 1651, 896, 895,
	885, 3157, 1650, 1654, 1649, 0, 1655, 0, 0, 0,
	1648, 1069, 1070, 1652, 0, 0, 0, 0, 0, 0,
	1656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 2542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3186, 3187,
	711, 0, 0, 0, 0, 3194, 0, 0, 0, 3196,
	0, 0, 0, 0, 0, 885, 0, 711, 3199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2567, 0, 0, 2568, 0, 1076, 0,
	0, 0, 2573, 2574, 2575, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2598, 0, 0, 0, 0, 1938, 0, 0, 803,
	2607, 2608, 1053, 0, 0, 0, 1063, 1064, 1065, 784,
	0, 0, 0, 0, 0, 1076, 0, 0, 1646, 0,
	2348, 1647, 2351, 2352, 0, 1653, 1076, 1651, 0, 0,
	0, 0, 1650, 1654, 1649, 0, 1655, 0, 0, 0,
	1648, 1069, 1070, 1652, 0, 0, 0, 0, 0, 0,
	1656, 2645, 0, 2646, 0, 0, 803, 0, 0, 1053,
	0, 0, 0, 1063, 1064, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1646, 0, 0, 1647, 0,
	2677, 0, 1653, 0, 1651, 0, 2362, 0, 2410, 1650,
	1654, 1649, 0, 1655, 0, 0, 0, 1648, 1069, 1070,
	1652, 2685, 2686, 0, 0, 0, 0, 1656, 0, 3324,
	0, 0, 3327, 803, 0, 0, 1053, 0, 0, 0,
	1063, 1064, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1646, 0, 0, 1647, 0, 0, 0, 1653,
	0, 1651, 3345, 0, 0, 0, 1650, 1654, 1649, 0,
	1655, 0, 2599, 0, 1648, 1069, 1070, 1652, 0, 1072,
	0, 0, 0, 0, 1656, 0, 0, 0, 1060, 1061,
	1062, 0, 0, 0, 2362, 0, 0, 1054, 1055, 1056,
	1057, 1058, 1059, 0, 0, 803, 1076, 0, 1053, 0,
	0, 0, 1063, 1064, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1646, 0, 0, 1647, 0, 0,
	0, 1653, 0, 1651, 0, 0, 0, 0, 1650, 1654,
	1649, 0, 1655, 0, 2548, 0, 1648, 1069, 1070, 1652,
	0, 0, 0, 0, 0, 3426, 1656, 3427, 0, 0,
	0, 0, 2892, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 1061, 1062, 0, 0, 0, 0, 0,
	0, 1054, 1055, 1056, 1057, 1058, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2838, 2839, 2926, 0, 0, 0, 0,
	2843, 0, 0, 711, 0, 803, 0, 0, 1053, 0,
	0, 0, 1063, 1064, 1065, 0, 2857, 0, 2858, 0,
	3488, 0, 0, 2859, 1646, 1938, 0, 1647, 0, 1938,
	0, 1653, 0, 1651, 0, 0, 0, 0, 1650, 1654,
	1649, 0, 1655, 0, 2870, 0, 1648, 1069, 1070, 1652,
	0, 0, 3512, 0, 0, 1072, 1656, 0, 0, 0,
	803, 0, 0, 1053, 1060, 1061, 1062, 1063, 1064, 1065,
	0, 2820, 0, 1054, 1055, 1056, 1057, 1058, 1059, 1646,
	0, 0, 1647, 0, 0, 0, 1653, 711, 1651, 0,
	0, 0, 0, 1650, 1654, 1649, 0, 1655, 0, 0,
	0, 1648, 1069, 1070, 1652, 0, 0, 0, 0, 0,
	0, 1656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2691,
	0, 0, 0, 0, 2948, 0, 0, 0, 0, 883,
	0, 0, 0, 0, 884, 0, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 2712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2982, 1726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 0, 884, 0,
	0, 886, 893, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 1061, 1062, 0, 0, 0,
	0, 2739, 0, 1054, 1055, 1056, 1057, 1058, 1059, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3038, 3039, 3040, 0, 0, 0,
	0, 897, 1072, 0, 0, 886, 0, 3672, 0, 0,
	0, 1060, 1061, 1062, 0, 0, 0, 0, 0, 0,
	1054, 1055, 1056, 1057, 1058, 1059, 0, 0, 0, 0,
	0, 3052, 883, 0, 892, 0, 0, 884, 0, 0,
	0, 893, 0, 3068, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 897, 0, 0, 1060, 1061,
	1062, 887, 0, 0, 0, 2595, 0, 1054, 1055, 1056,
	1057, 1058, 1059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 0, 884, 0,
	0, 0, 893, 0, 886, 0, 889, 0, 882, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1072, 0, 892, 0, 887, 0, 0, 0, 0,
	1060, 1061, 1062, 0, 0, 1943, 0, 0, 0, 1054,
	1055, 1056, 1057, 1058, 1059, 0, 2937, 890, 0, 0,
	0, 0, 0, 0, 897, 886, 711, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 897, 883, 3230, 0, 2011,
	0, 884, 0, 0, 887, 893, 0, 2024, 0, 0,
	0, 1072, 0, 0, 0, 0, 2168, 0, 896, 895,
	1060, 1061, 1062, 0, 0, 0, 0, 1918, 0, 1054,
	1055, 1056, 1057, 1058, 1059, 0, 891, 0, 882, 889,
	0, 0, 0, 0, 883, 888, 0, 894, 0, 884,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 1072, 0, 886, 0,
	2030, 0, 0, 0, 0, 1060, 1061, 1062, 3297, 0,
	2164, 0, 896, 895, 1054, 1055, 1056, 1057, 1058, 1059,
	890, 0, 0, 0, 0, 885, 0, 892, 0, 0,
	889, 3317, 0, 0, 2026, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 897, 0,
	0, 0, 0, 0, 0, 891, 3095, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 894, 0, 3117, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 897, 0, 0, 1793,
	0, 896, 895, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 2016, 0, 0, 0, 891, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 2025, 0, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 888,
	1789, 0, 896, 895, 3425, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 2021, 0, 0, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 2645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2018, 0, 0,
	0, 889, 0, 0, 890, 0, 0, 888, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2012, 0,
	3472, 2023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3483, 0, 0, 0, 0, 0, 885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 2029, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 3282, 896, 895, 891, 37, 0,
	0, 2007, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 2022, 0, 0, 3309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2019, 0, 0, 0, 0, 0, 0, 2017, 0,
	0, 909, 2027, 896, 895, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2645, 0,
	0, 0, 885, 0, 0, 0, 0, 0, 0, 2020,
	0, 2014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 3369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1554, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3643, 1559, 157, 1565, 174, 638, 1575,
	223, 260, 475, 1562, 1607, 320, 1612, 373, 377, 1636,
	466, 1569, 1572, 1582, 1585, 231, 1590, 643, 1598, 649,
	1608, 655, 1627, 442, 1633, 645, 646, 651, 162, 556,
	465, 536, 1621, 1567, 1625, 327, 1618, 1594, 1634, 1611,
	1623, 1604, 1609, 170, 1596, 1597, 1601, 1610, 647, 644,
	648, 654, 642, 652, 639, 650, 1631, 364, 298, 0,
	515, 391, 169, 215, 202, 244, 286, 398, 1566, 1584,
	276, 446, 211, 300, 1617, 190, 333, 1630, 422, 297,
	1624, 405, 425, 1586, 317, 196, 356, 412, 413, 636,
	641, 1574, 657, 1561, 200, 201, 322, 182, 330, 527,
	493, 385, 343, 341, 1592, 308, 365, 522, 1564, 0,
	230, 0, 225, 321, 461, 188, 440, 359, 326, 280,
	388, 417, 227, 212, 213, 256, 358, 246, 198, 451,
	490, 494, 492, 488, 485, 489, 486, 487, 491, 247,
	484, 0, 459, 468, 502, 482, 510, 467, 507, 477,
	222, 506, 471, 470, 516, 497, 498, 452, 512, 483,
	481, 474, 473, 469, 1632, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 1560, 159, 160, 161,
	163, 164, 165, 635, 166, 167, 168, 171, 172, 173,
	175, 535, 176, 177, 178, 179, 180, 181, 472, 637,
	183, 184, 185, 186, 187, 189, 191, 192, 193, 194,
	195, 197, 199, 1576, 1577, 1578, 640, 1579, 1580, 1581,
	203, 204, 205, 206, 207, 208, 1583, 209, 210, 214,
	216, 217, 218, 219, 220, 221, 224, 1587, 226, 228,
	1588, 229, 232, 1589, 233, 234, 235, 236, 237, 238,
	239, 240, 476, 241, 1591, 242, 243, 245, 1593, 248,
	249, 250, 251, 252, 1595, 253, 478, 479, 254, 255,
	257, 258, 259, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 1599, 273, 274, 275, 277,
	1600, 278, 279, 282, 283, 284, 285, 1602, 287, 495,
	1603, 288, 289, 290, 1605, 1606, 291, 292, 293, 294,
	295, 296, 299, 496, 301, 302, 303, 304, 305, 306,
	307, 537, 309, 310, 311, 312, 313, 314, 315, 499,
	500, 316, 318, 319, 501, 503, 504, 653, 334, 335,
	336, 337, 338, 339, 340, 342, 1614, 344, 345, 346,
	505, 347, 348, 349, 350, 1615, 351, 352, 353, 354,
	355, 357, 360, 361, 362, 363, 1616, 366, 367, 368,
	369, 370, 371, 372, 374, 375, 376, 378, 379, 380,
	538, 381, 382, 383, 384, 508, 386, 387, 539, 389,
	390, 392, 393, 394, 395, 396, 397, 554, 1619, 399,
	509, 400, 401, 402, 403, 404, 1620, 406, 407, 408,
	409, 410, 411, 414, 415, 416, 418, 419, 511, 420,
	421, 1622, 423, 424, 656, 426, 427, 428, 429, 430,
	1626, 555, 431, 513, 432, 514, 433, 434, 435, 436,
	437, 438, 439, 441, 1628, 1629, 443, 444, 445, 447,
	448, 449, 450, 453, 454, 455, 456, 457, 1635, 458,
	460, 462, 540, 517, 518, 519, 520, 521, 523, 524,
	525, 526, 463, 464, 480, 331, 325, 281, 323, 324,
	328, 329, 332, 1613, 1563, 1568, 1570, 1571, 1573, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 803, 0, 0, 1053, 0, 0,
	1552, 1063, 1064, 1065, 1094, 1096, 1080, 1123, 1144, 0,
	1195, 1241, 1211, 1066, 1328, 1334, 1067, 1395, 1399, 0,
	1077, 1125, 1074, 1175, 1190, 1205, 1217, 1073, 1078, 1071,
	1332, 1079, 1476, 1487, 1507, 1068, 1069, 1070, 1075, 1468,
	1525, 1294, 1453, 1105, 0, 1082, 1419, 0, 0, 1342,
	1457, 0, 0, 1119, 0, 0, 0, 0, 1267, 1256,
	1290, 1403, 1228, 1348, 1156, 1315, 1493, 1385, 1304, 0,
	1499, 1417, 1118, 1184, 1168, 1220, 1285, 1426, 1101, 1185,
	1260, 1491, 1180, 1306, 0, 1147, 1350, 1492, 1455, 1303,
	1466, 1436, 1461, 1191, 1329, 1154, 1376, 1443, 1444, 1114,
	1227, 1149, 1502, 1099, 1159, 1167, 1337, 1138, 1345, 1523,
	1277, 1410, 1360, 1358, 0, 1317, 1386, 1518, 0, 0,
	1204, 0, 1198, 1336, 1510, 1145, 1484, 1379, 1341, 1279,
	1413, 1448, 1200, 1181, 1182, 1238, 1378, 1223, 1157, 1498,
	1274, 1278, 1276, 1272, 1269, 1273, 1270, 1271, 1275, 1225,
	1268, 0, 0, 1115, 1335, 1263, 1433, 1113, 1382, 1221,
	1194, 0, 0, 0, 1500, 1314, 1316, 0, 1469, 1264,
	1262, 1173, 1172, 1116, 1501, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1095, 1097, 1098, 1102, 1103, 1104,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1120, 1121, 1122,
	1124, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136,
	1139, 1140, 1141, 1142, 1143, 1146, 1148, 1150, 1151, 1152,
	1153, 1155, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1169, 1170, 0, 1171, 1174, 1176, 1177, 1178, 1179, 1183,
	1186, 1187, 1188, 1189, 1192, 1193, 1196, 1197, 1199, 1201,
	1202, 1203, 1206, 0, 1207, 1208, 1209, 1210, 1212, 1213,
	1214, 1215, 1216, 1218, 0, 0, 1219, 1222, 1224, 1226,
	1229, 1230, 1231, 1232, 0, 1233, 1234, 1235, 1236, 1237,
	1239, 0, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1258, 1259, 1261,
	0, 1265, 1266, 1281, 1282, 1283, 1284, 1286, 1288, 1289,
	1287, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300,
	1301, 1302, 1305, 1307, 1308, 0, 1309, 1310, 0, 1311,
	1312, 1313, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1330, 1331, 1333, 1347, 1349, 0, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1359, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1377, 1380, 1381, 1383, 1384, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1396, 1397, 1398, 1400, 1401, 1402,
	1404, 1405, 1406, 1407, 1408, 1409, 1411, 1412, 1414, 1415,
	1416, 0, 1418, 1420, 1421, 1422, 1423, 1424, 1425, 1428,
	1427, 1429, 1430, 1431, 1432, 1434, 1435, 1437, 1438, 1439,
	1440, 1441, 1442, 1445, 1446, 1447, 1449, 1450, 1451, 1452,
	1454, 1456, 1458, 1460, 1459, 1462, 1463, 1464, 1465, 1467,
	1470, 1471, 1472, 1473, 1474, 1475, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1485, 0, 1486, 1488, 1489, 1490, 1494,
	1495, 1496, 1497, 1503, 1504, 1505, 1506, 1508, 0, 0,
	1509, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1519, 1520,
	1521, 1522, 0, 1524, 1257, 1346, 1340, 1280, 1338, 1339,
	1343, 1344, 0, 0, 1100, 1117, 1126, 1130, 1137, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	1061, 1062, 0, 0, 0, 0, 0, 0, 1054, 1055,
	1056, 1057, 1058, 1059, 1554, 0, 3610, 767, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 1559, 157, 1565, 174, 638, 1575, 223, 260, 475,
	1562, 1607, 320, 1612, 373, 377, 1636, 466, 1569, 1572,
	1582, 1585, 231, 1590, 643, 1598, 649, 1608, 655, 1627,
	442, 1633, 645, 646, 651, 162, 556, 465, 536, 1621,
	1567, 1625, 327, 1618, 1594, 1634, 1611, 1623, 1604, 1609,
	170, 1596, 1597, 1601, 1610, 647, 644, 648, 654, 642,
	652, 639, 650, 1631, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 1566, 1584, 276, 446, 211,
	300, 1617, 190, 333, 1630, 422, 297, 1624, 405, 425,
	1586, 317, 196, 356, 412, 413, 636, 641, 1574, 657,
	1561, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 1592, 308, 365, 522, 1564, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 1632, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 1560, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	1576, 1577, 1578, 640, 1579, 1580, 1581, 203, 204, 205,
	206, 207, 208, 1583, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 1587, 226, 228, 1588, 229, 232,
	1589, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 1591, 242, 243, 245, 1593, 248, 249, 250, 251,
	252, 1595, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 1599, 273, 274, 275, 277, 1600, 278, 279,
	282, 283, 284, 285, 1602, 287, 495, 1603, 288, 289,
	290, 1605, 1606, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 1614, 344, 345, 346, 505, 347, 348,
	349, 350, 1615, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 1616, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 1619, 399, 509, 400, 401,
	402, 403, 404, 1620, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 1622, 423,
	424, 656, 426, 427, 428, 429, 430, 1626, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 1628, 1629, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 1635, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	1613, 1563, 1568, 1570, 1571, 1573, 1554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1559, 157, 1565, 174, 638, 1575, 223,
	260, 475, 1562, 1607, 320, 1612, 373, 377, 1636, 466,
	1569, 1572, 1582, 1585, 231, 1590, 643, 1598, 649, 1608,
	655, 1627, 442, 1633, 645, 646, 651, 162, 556, 465,
	536, 1621, 1567, 1625, 327, 1618, 1594, 1634, 1611, 1623,
	1604, 1609, 170, 1596, 1597, 1601, 1610, 647, 644, 648,
	654, 642, 652, 639, 650, 1631, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 1566, 1584, 276,
	446, 211, 300, 1617, 190, 333, 1630, 422, 297, 1624,
	405, 425, 1586, 317, 196, 356, 412, 413, 636, 641,
	1574, 657, 1561, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 1592, 308, 365, 522, 1564, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 1632, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 1560, 159, 160, 161, 163,
	164, 165, 635, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 637, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 1576, 1577, 1578, 640, 1579, 1580, 1581, 203,
	204, 205, 206, 207, 208, 1583, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 1587, 226, 228, 1588,
	229, 232, 1589, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 1591, 242, 243, 245, 1593, 248, 249,
	250, 251, 252, 1595, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 1599, 273, 274, 275, 277, 1600,
	278, 279, 282, 283, 284, 285, 1602, 287, 495, 1603,
	288, 289, 290, 1605, 1606, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 653, 334, 335, 336,
	337, 338, 339, 340, 342, 1614, 344, 345, 346, 505,
	347, 348, 349, 350, 1615, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 1616, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 1619, 399, 509,
	400, 401, 402, 403, 404, 1620, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	1622, 423, 424, 656, 426, 427, 428, 429, 430, 1626,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 1628, 1629, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 1635, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 1613, 1563, 1568, 1570, 1571, 1573, 1554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1559, 157, 1565, 174, 638,
	1575, 2154, 260, 475, 1562, 1607, 320, 1612, 373, 377,
	1636, 466, 1569, 1572, 1582, 1585, 231, 1590, 643, 1598,
	649, 1608, 655, 1627, 442, 1633, 645, 646, 651, 162,
	556, 465, 536, 1621, 1567, 1625, 327, 1618, 1594, 1634,
	1611, 1623, 1604, 1609, 170, 1596, 1597, 1601, 1610, 647,
	644, 648, 654, 642, 652, 639, 650, 1631, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 2152, 1566,
	1584, 276, 446, 211, 300, 1617, 190, 333, 1630, 422,
	297, 1624, 405, 425, 1586, 317, 196, 356, 412, 413,
	636, 641, 1574, 657, 1561, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 1592, 308, 365, 522, 1564,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 1632, 147, 148, 149, 150,
	151, 2153, 153, 154, 155, 156, 158, 1560, 159, 160,
	161, 163, 164, 165, 635, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	637, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 1576, 1577, 1578, 640, 1579, 1580,
	1581, 203, 204, 205, 206, 207, 208, 1583, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 1587, 226,
	228, 1588, 229, 232, 1589, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 1591, 242, 243, 245, 1593,
	248, 249, 250, 251, 252, 1595, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 1599, 273, 274, 275,
	277, 1600, 278, 279, 282, 283, 284, 285, 1602, 287,
	495, 1603, 288, 289, 290, 1605, 1606, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 653, 334,
	335, 336, 337, 338, 339, 340, 342, 1614, 344, 345,
	346, 505, 347, 348, 349, 350, 1615, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 1616, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 1619,
	399, 509, 400, 401, 402, 403, 404, 1620, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 1622, 423, 424, 656, 426, 427, 428, 429,
	430, 1626, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 1628, 1629, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 1635,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 1613, 1563, 1568, 1570, 1571, 1573,
	729, 0, 1028, 767, 0, 0, 0, 592, 815, 0,
	0, 0, 0, 0, 603, 604, 605, 1559, 157, 1565,
	174, 638, 1575, 223, 260, 0, 1562, 1607, 320, 1612,
	373, 377, 1636, 0, 1569, 1572, 1582, 1585, 231, 1590,
	643, 1598, 649, 1608, 655, 1627, 442, 1633, 645, 646,
	651, 162, 728, 465, 536, 1621, 1567, 1625, 2437, 1618,
	1594, 1634, 1611, 1623, 1604, 1609, 170, 1596, 1597, 1601,
	1610, 647, 644, 648, 654, 642, 652, 639, 650, 1631,
	364, 298, 0, 0, 391, 169, 215, 202, 244, 286,
	398, 1566, 1584, 276, 446, 211, 300, 1617, 190, 333,
	1630, 422, 297, 1624, 405, 425, 1586, 317, 196, 356,
	412, 413, 636, 641, 1574, 657, 1561, 200, 201, 322,
	182, 330, 0, 0, 385, 343, 341, 1592, 308, 365,
	0, 1564, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 0, 459, 731, 721, 713, 714,
	715, 716, 717, 718, 0, 733, 734, 735, 736, 737,
	452, 727, 0, 712, 719, 720, 722, 1632, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 1560,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 0, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 1576, 1577, 1578, 640,
	1579, 1580, 1581, 203, 204, 205, 206, 207, 208, 1583,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	1587, 226, 228, 1588, 229, 232, 1589, 233, 234, 235,
	236, 237, 238, 239, 240, 0, 241, 1591, 242, 243,
	245, 1593, 248, 249, 250, 251, 252, 1595, 253, 0,
	0, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 1599, 273,
	274, 275, 277, 1600, 278, 279, 282, 283, 284, 285,
	1602, 287, 0, 1603, 288, 289, 290, 1605, 1606, 291,
	292, 293, 294, 295, 296, 299, 0, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 2435, 0, 316, 318, 319, 0, 0, 0,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 1614,
	344, 345, 346, 0, 347, 348, 349, 350, 1615, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 1616,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 0, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 1619, 399, 2045, 400, 401, 402, 403, 404, 1620,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 0, 420, 421, 1622, 423, 424, 656, 426, 427,
	428, 429, 430, 1626, 555, 431, 0, 432, 0, 433,
	434, 435, 436, 437, 438, 439, 441, 1628, 1629, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 1635, 458, 460, 462, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 463, 464, 0, 331, 325,
	281, 323, 324, 328, 329, 332, 1613, 1563, 1568, 1570,
	1571, 1573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 601, 602, 0, 0, 0, 0, 0,
	0, 2438, 2439, 596, 597, 598, 599, 632, 0, 807,
	767, 0, 0, 0, 803, 815, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 174, 638, 0,
	223, 260, 798, 0, 789, 320, 0, 373, 377, 44,
	466, 812, 0, 0, 0, 231, 810, 643, 0, 649,
	811, 655, 809, 442, 0, 645, 646, 651, 162, 556,
	465, 536, 0, 0, 0, 804, 41, 0, 0, 0,
	42, 0, 0, 170, 0, 0, 0, 0, 647, 644,
	648, 654, 642, 652, 639, 650, 0, 364, 298, 0,
	1534, 391, 169, 215, 202, 244, 286, 398, 0, 0,
	276, 446, 211, 300, 0, 190, 333, 0, 422, 297,
	0, 405, 425, 0, 317, 196, 356, 412, 413, 636,
	641, 0, 657, 0, 200, 201, 322, 182, 330, 527,
	493, 385, 343, 341, 0, 308, 365, 522, 799, 0,
	230, 0, 225, 321, 461, 188, 440, 359, 326, 280,
	388, 417, 227, 212, 213, 256, 358, 246, 198, 451,
	490, 494, 492, 488, 485, 489, 486, 487, 491, 247,
	484, 0, 459, 468, 502, 482, 510, 467, 507, 477,
	222, 506, 471, 470, 516, 497, 498, 452, 512, 483,
	481, 474, 473, 469, 0, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 0, 159, 160, 161,
	163, 164, 165, 635, 166, 167, 168, 171, 172, 173,
	175, 535, 176, 177, 178, 179, 180, 181, 472, 637,
	183, 184, 185, 186, 187, 189, 191, 192, 193, 194,
	195, 197, 199, 0, 0, 0, 640, 0, 0, 0,
	203, 204, 205, 206, 207, 208, 0, 209, 210, 214,
	216, 217, 218, 219, 220, 221, 224, 0, 226, 228,
	0, 229, 232, 0, 233, 234, 235, 236, 237, 238,
	239, 240, 476, 241, 0, 242, 243, 245, 0, 248,
	249, 250, 251, 252, 0, 253, 478, 802, 254, 255,
	257, 258, 259, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 0, 273, 274, 275, 277,
	0, 278, 279, 282, 283, 284, 285, 0, 287, 495,
	0, 288, 289, 290, 0, 0, 291, 292, 293, 294,
	295, 296, 299, 496, 301, 302, 303, 304, 305, 306,
	307, 537, 309, 310, 311, 312, 313, 314, 315, 499,
	500, 316, 318, 319, 501, 503, 504, 653, 334, 335,
	336, 337, 338, 339, 340, 342, 0, 344, 345, 346,
	505, 347, 348, 349, 350, 0, 351, 352, 353, 354,
	355, 357, 360, 361, 362, 363, 0, 366, 367, 368,
	369, 370, 371, 372, 374, 375, 376, 378, 379, 380,
	538, 381, 382, 383, 384, 814, 386, 387, 539, 389,
	390, 392, 393, 394, 395, 396, 397, 554, 0, 399,
	509, 400, 401, 402, 403, 404, 0, 406, 407, 408,
	409, 410, 411, 414, 415, 416, 418, 419, 511, 420,
	421, 0, 423, 424, 656, 426, 427, 428, 429, 430,
	0, 555, 431, 513, 432, 514, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 0, 443, 444, 445, 447,
	448, 449, 450, 453, 454, 455, 456, 457, 0, 458,
	460, 462, 540, 517, 518, 519, 520, 521, 523, 524,
	525, 526, 463, 464, 480, 331, 325, 281, 323, 324,
	328, 329, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 632, 0, 807, 767, 0, 0, 0,
	803, 815, 793, 0, 0, 794, 0, 0, 787, 788,
	1935, 157, 0, 174, 638, 0, 223, 260, 798, 0,
	789, 320, 0, 373, 377, 0, 466, 812, 0, 0,
	1936, 231, 810, 643, 0, 649, 811, 655, 809, 442,
	0, 645, 646, 651, 162, 556, 465, 536, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 647, 644, 648, 654, 642, 652,
	639, 650, 0, 364, 298, 0, 515, 391, 169, 215,
	202, 244, 286, 398, 0, 0, 276, 446, 211, 300,
	0, 190, 333, 0, 422, 297, 0, 405, 425, 0,
	317, 196, 356, 412, 413, 636, 641, 0, 657, 0,
	200, 201, 322, 182, 330, 527, 493, 385, 343, 341,
	0, 308, 365, 522, 799, 0, 230, 0, 225, 321,
	461, 188, 440, 359, 326, 280, 388, 417, 227, 212,
	213, 256, 358, 246, 198, 451, 490, 494, 492, 488,
	485, 489, 486, 487, 491, 247, 484, 0, 459, 468,
	502, 482, 510, 467, 507, 477, 222, 506, 471, 470,
	516, 497, 498, 452, 512, 483, 481, 474, 473, 469,
	1934, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 158, 0, 159, 160, 161, 163, 164, 165, 635,
	166, 167, 168, 171, 172, 173, 175, 535, 176, 177,
	178, 179, 180, 181, 472, 637, 183, 184, 185, 186,
	187, 189, 191, 192, 193, 194, 195, 197, 199, 0,
	0, 0, 640, 0, 0, 0, 203, 204, 205, 206,
	207, 208, 0, 209, 210, 214, 216, 217, 218, 219,
	220, 221, 224, 0, 226, 228, 0, 229, 232, 0,
	233, 234, 235, 236, 237, 238, 239, 240, 476, 241,
	0, 242, 243, 245, 0, 248, 249, 250, 251, 252,
	0, 253, 478, 802, 254, 255, 257, 258, 259, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 0, 273, 274, 275, 277, 0, 278, 279, 282,
	283, 284, 285, 0, 287, 495, 0, 288, 289, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 299, 496,
	301, 302, 303, 304, 305, 306, 307, 537, 309, 310,
	311, 312, 313, 314, 315, 499, 500, 316, 318, 319,
	501, 503, 504, 653, 334, 335, 336, 337, 338, 339,
	340, 342, 0, 344, 345, 346, 505, 347, 348, 349,
	350, 0, 351, 352, 353, 354, 355, 357, 360, 361,
	362, 363, 0, 366, 367, 368, 369, 370, 371, 372,
	374, 375, 376, 378, 379, 380, 538, 381, 382, 383,
	384, 814, 386, 387, 539, 389, 390, 392, 393, 394,
	395, 396, 397, 554, 0, 399, 509, 400, 401, 402,
	403, 404, 0, 406, 407, 408, 409, 410, 411, 414,
	415, 416, 418, 419, 511, 420, 421, 0, 423, 424,
	656, 426, 427, 428, 429, 430, 0, 555, 431, 513,
	432, 514, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 0, 443, 444, 445, 447, 448, 449, 450, 453,
	454, 455, 456, 457, 0, 458, 460, 462, 540, 517,
	518, 519, 520, 521, 523, 524, 525, 526, 463, 464,
	480, 331, 325, 281, 323, 324, 328, 329, 332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 632, 0,
	807, 767, 0, 0, 0, 803, 815, 793, 0, 0,
	0, 794, 1932, 0, 787, 788, 157, 0, 174, 638,
	0, 223, 260, 798, 0, 789, 320, 0, 373, 377,
	0, 466, 812, 0, 0, 0, 231, 810, 643, 0,
	649, 811, 655, 809, 442, 0, 645, 646, 651, 162,
	556, 465, 536, 0, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 647,
	644, 648, 654, 642, 652, 639, 650, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	636, 641, 0, 657, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 799,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 635, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	637, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 640, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 802, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 653, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 814, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 656, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 632, 0, 807, 767, 0, 0,
	0, 803, 815, 793, 0, 0, 794, 0, 0, 787,
	788, 785, 157, 0, 174, 638, 0, 223, 260, 798,
	0, 789, 320, 0, 373, 377, 0, 466, 812, 0,
	0, 0, 231, 810, 643, 0, 649, 811, 655, 809,
	442, 0, 645, 646, 651, 162, 556, 465, 536, 0,
	0, 0, 804, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 799, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 802, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 814, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	0, 807, 767, 0, 0, 0, 803, 815, 793, 0,
	1539, 1922, 794, 0, 0, 787, 788, 157, 0, 174,
	638, 0, 223, 260, 798, 0, 789, 320, 0, 373,
	377, 0, 466, 812, 0, 0, 0, 231, 810, 643,
	0, 649, 811, 655, 809, 442, 0, 645, 646, 651,
	162, 556, 465, 536, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	647, 644, 648, 654, 642, 652, 639, 650, 0, 364,
	298, 0, 515, 391, 169, 215, 202, 244, 286, 398,
	0, 0, 276, 446, 211, 300, 0, 190, 333, 0,
	422, 297, 0, 405, 425, 0, 317, 196, 356, 412,
	413, 636, 641, 0, 657, 0, 200, 201, 322, 182,
	330, 527, 493, 385, 343, 341, 0, 308, 365, 522,
	799, 0, 230, 0, 225, 321, 461, 188, 440, 359,
	326, 280, 388, 417, 227, 212, 213, 256, 358, 246,
	198, 451, 490, 494, 492, 488, 485, 489, 486, 487,
	491, 247, 484, 0, 459, 468, 502, 482, 510, 467,
	507, 477, 222, 506, 471, 470, 516, 497, 498, 452,
	512, 483, 481, 474, 473, 469, 2601, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 158, 0, 159,
	160, 161, 163, 164, 165, 635, 166, 167, 168, 171,
	172, 173, 175, 535, 176, 177, 178, 179, 180, 181,
	472, 637, 183, 184, 185, 186, 187, 189, 191, 192,
	193, 194, 195, 197, 199, 0, 0, 0, 640, 0,
	0, 0, 203, 204, 205, 206, 207, 208, 0, 209,
	210, 214, 216, 217, 218, 219, 220, 221, 224, 0,
	226, 228, 0, 229, 232, 0, 233, 234, 235, 236,
	237, 238, 239, 240, 476, 241, 0, 242, 243, 245,
	0, 248, 249, 250, 251, 252, 0, 253, 478, 802,
	254, 255, 257, 258, 259, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 0, 273, 274,
	275, 277, 0, 278, 279, 282, 283, 284, 285, 0,
	287, 495, 0, 288, 289, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 299, 496, 301, 302, 303, 304,
	305, 306, 307, 537, 309, 310, 311, 312, 313, 314,
	315, 499, 500, 316, 318, 319, 501, 503, 504, 653,
	334, 335, 336, 337, 338, 339, 340, 342, 0, 344,
	345, 346, 505, 347, 348, 349, 350, 0, 351, 352,
	353, 354, 355, 357, 360, 361, 362, 363, 0, 366,
	367, 368, 369, 370, 371, 372, 374, 375, 376, 378,
	379, 380, 538, 381, 382, 383, 384, 814, 386, 387,
	539, 389, 390, 392, 393, 394, 395, 396, 397, 554,
	0, 399, 509, 400, 401, 402, 403, 404, 0, 406,
	407, 408, 409, 410, 411, 414, 415, 416, 418, 419,
	511, 420, 421, 0, 423, 424, 656, 426, 427, 428,
	429, 430, 0, 555, 431, 513, 432, 514, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 0, 443, 444,
	445, 447, 448, 449, 450, 453, 454, 455, 456, 457,
	0, 458, 460, 462, 540, 517, 518, 519, 520, 521,
	523, 524, 525, 526, 463, 464, 480, 331, 325, 281,
	323, 324, 328, 329, 332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 632, 0, 807, 767, 0, 0,
	0, 803, 815, 793, 0, 0, 0, 794, 0, 0,
	787, 788, 157, 0, 174, 638, 0, 223, 260, 798,
	0, 789, 320, 0, 373, 377, 0, 466, 812, 0,
	0, 0, 231, 810, 643, 0, 649, 811, 655, 809,
	442, 0, 645, 646, 651, 162, 556, 465, 536, 0,
	0, 0, 804, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 799, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 802, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 814, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	0, 807, 767, 0, 0, 0, 803, 815, 793, 0,
	0, 0, 794, 1931, 0, 787, 788, 157, 0, 174,
	638, 0, 223, 260, 798, 0, 789, 320, 0, 373,
	377, 0, 466, 812, 0, 0, 0, 231, 810, 643,
	0, 649, 811, 655, 809, 442, 0, 645, 646, 651,
	162, 556, 465, 536, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	647, 644, 648, 654, 642, 652, 639, 650, 0, 364,
	298, 0, 515, 391, 169, 215, 202, 244, 286, 398,
	0, 0, 276, 446, 211, 300, 0, 190, 333, 0,
	422, 297, 0, 405, 425, 0, 317, 196, 356, 412,
	413, 636, 641, 0, 657, 0, 200, 201, 322, 182,
	330, 527, 493, 385, 343, 341, 0, 308, 365, 522,
	799, 0, 230, 0, 225, 321, 461, 188, 440, 359,
	326, 280, 388, 417, 227, 212, 213, 256, 358, 246,
	198, 451, 490, 494, 492, 488, 485, 489, 486, 487,
	491, 247, 484, 0, 459, 468, 502, 482, 510, 467,
	507, 477, 222, 506, 471, 470, 516, 497, 498, 452,
	512, 483, 481, 474, 473, 469, 0, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 158, 0, 159,
	160, 161, 163, 164, 165, 635, 166, 167, 168, 171,
	172, 173, 175, 535, 176, 177, 178, 179, 180, 181,
	472, 637, 183, 184, 185, 186, 187, 189, 191, 192,
	193, 194, 195, 197, 199, 0, 0, 0, 640, 0,
	0, 0, 203, 204, 205, 206, 207, 208, 0, 209,
	210, 214, 216, 217, 218, 219, 220, 221, 224, 0,
	226, 228, 0, 229, 232, 0, 233, 234, 235, 236,
	237, 238, 239, 240, 476, 241, 0, 242, 243, 245,
	0, 248, 249, 250, 251, 252, 0, 253, 478, 802,
	254, 255, 257, 258, 259, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 0, 273, 274,
	275, 277, 0, 278, 279, 282, 283, 284, 285, 0,
	287, 495, 0, 288, 289, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 299, 496, 301, 302, 303, 304,
	305, 306, 307, 537, 309, 310, 311, 312, 313, 314,
	315, 499, 500, 316, 318, 319, 501, 503, 504, 653,
	334, 335, 336, 337, 338, 339, 340, 342, 0, 344,
	345, 346, 505, 347, 348, 349, 350, 0, 351, 352,
	353, 354, 355, 357, 360, 361, 362, 363, 0, 366,
	367, 368, 369, 370, 371, 372, 374, 375, 376, 378,
	379, 380, 538, 381, 382, 383, 384, 814, 386, 387,
	539, 389, 390, 392, 393, 394, 395, 396, 397, 554,
	0, 399, 509, 400, 401, 402, 403, 404, 0, 406,
	407, 408, 409, 410, 411, 414, 415, 416, 418, 419,
	511, 420, 421, 0, 423, 424, 656, 426, 427, 428,
	429, 430, 0, 555, 431, 513, 432, 514, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 0, 443, 444,
	445, 447, 448, 449, 450, 453, 454, 455, 456, 457,
	0, 458, 460, 462, 540, 517, 518, 519, 520, 521,
	523, 524, 525, 526, 463, 464, 480, 331, 325, 281,
	323, 324, 328, 329, 332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 632, 0, 807, 767, 0, 0,
	0, 803, 815, 793, 0, 0, 0, 794, 0, 0,
	787, 788, 157, 0, 174, 638, 0, 223, 260, 798,
	0, 789, 320, 0, 373, 377, 0, 466, 812, 0,
	0, 0, 231, 810, 643, 0, 649, 811, 655, 809,
	442, 0, 645, 646, 651, 162, 556, 465, 536, 0,
	0, 0, 804, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 2308, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 799, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 802, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 814, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 632,
	0, 807, 767, 0, 0, 0, 0, 815, 793, 0,
	0, 0, 794, 0, 0, 787, 788, 157, 0, 174,
	638, 0, 223, 260, 798, 0, 0, 320, 0, 373,
	377, 0, 466, 812, 0, 3067, 0, 231, 810, 643,
	0, 649, 811, 655, 809, 442, 0, 645, 646, 651,
	162, 556, 465, 536, 0, 0, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	647, 644, 648, 654, 642, 652, 639, 650, 0, 364,
	298, 0, 515, 391, 169, 215, 202, 244, 286, 398,
	0, 0, 276, 446, 211, 300, 0, 190, 333, 0,
	422, 297, 0, 405, 425, 0, 317, 196, 356, 412,
	413, 636, 641, 0, 657, 0, 200, 201, 322, 182,
	330, 527, 493, 385, 343, 341, 0, 308, 365, 522,
	799, 0, 230, 0, 225, 321, 461, 188, 440, 359,
	326, 280, 388, 417, 227, 212, 213, 256, 358, 246,
	198, 451, 490, 494, 492, 488, 485, 489, 486, 487,
	491, 247, 484, 0, 459, 468, 502, 482, 510, 467,
	507, 477, 222, 506, 471, 470, 516, 497, 498, 452,
	512, 483, 481, 474, 473, 469, 0, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 158, 0, 159,
	160, 161, 163, 164, 165, 635, 166, 167, 168, 171,
	172, 173, 175, 535, 176, 177, 178, 179, 180, 181,
	472, 637, 183, 184, 185, 186, 187, 189, 191, 192,
	193, 194, 195, 197, 199, 0, 0, 0, 640, 0,
	0, 0, 203, 204, 205, 206, 207, 208, 0, 209,
	210, 214, 216, 217, 218, 219, 220, 221, 224, 0,
	226, 228, 0, 229, 232, 0, 233, 234, 235, 236,
	237, 238, 239, 240, 476, 241, 0, 242, 243, 245,
	0, 248, 249, 250, 251, 252, 0, 253, 478, 802,
	254, 255, 257, 258, 259, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 0, 273, 274,
	275, 277, 0, 278, 279, 282, 283, 284, 285, 0,
	287, 495, 0, 288, 289, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 299, 496, 301, 302, 303, 304,
	305, 306, 307, 537, 309, 310, 311, 312, 313, 314,
	315, 499, 500, 316, 318, 319, 501, 503, 504, 653,
	334, 335, 336, 337, 338, 339, 340, 342, 0, 344,
	345, 346, 505, 347, 348, 349, 350, 0, 351, 352,
	353, 354, 355, 357, 360, 361, 362, 363, 0, 366,
	367, 368, 369, 370, 371, 372, 374, 375, 376, 378,
	379, 380, 538, 381, 382, 383, 384, 814, 386, 387,
	539, 389, 390, 392, 393, 394, 395, 396, 397, 554,
	0, 399, 509, 400, 401, 402, 403, 404, 0, 406,
	407, 408, 409, 410, 411, 414, 415, 416, 418, 419,
	511, 420, 421, 0, 423, 424, 656, 426, 427, 428,
	429, 430, 0, 555, 431, 513, 432, 514, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 0, 443, 444,
	445, 447, 448, 449, 450, 453, 454, 455, 456, 457,
	0, 458, 460, 462, 540, 517, 518, 519, 520, 521,
	523, 524, 525, 526, 463, 464, 480, 331, 325, 281,
	323, 324, 328, 329, 332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 632, 0, 807, 767, 0, 0,
	0, 0, 815, 793, 0, 0, 0, 794, 0, 0,
	2263, 2264, 157, 0, 174, 638, 0, 223, 260, 798,
	0, 0, 320, 0, 373, 377, 0, 466, 812, 0,
	0, 0, 231, 810, 643, 0, 649, 811, 655, 809,
	442, 0, 645, 646, 651, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 799, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 802, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 814, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 1028, 767, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 794, 0, 0, 2263, 2264, 157, 0, 174,
	638, 0, 223, 260, 475, 0, 0, 320, 0, 373,
	377, 0, 466, 0, 0, 3247, 0, 231, 1025, 643,
	0, 649, 0, 655, 1024, 442, 0, 645, 646, 651,
	162, 556, 465, 536, 0, 0, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 1026,
	647, 644, 648, 654, 642, 652, 639, 650, 0, 364,
	298, 0, 515, 391, 169, 215, 202, 244, 286, 398,
	0, 0, 276, 446, 211, 300, 0, 190, 333, 0,
	422, 297, 0, 405, 425, 0, 317, 196, 356, 412,
	413, 636, 641, 0, 657, 0, 200, 201, 322, 182,
	330, 527, 493, 385, 343, 341, 0, 308, 365, 522,
	0, 0, 230, 0, 225, 321, 461, 188, 440, 359,
	326, 280, 388, 417, 227, 212, 213, 256, 358, 246,
	198, 451, 490, 494, 492, 488, 485, 489, 486, 487,
	491, 247, 484, 0, 459, 468, 502, 482, 510, 467,
	507, 477, 222, 506, 471, 470, 516, 497, 498, 452,
	512, 483, 481, 474, 473, 469, 0, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 158, 0, 159,
	160, 161, 163, 164, 165, 635, 166, 167, 168, 171,
	172, 173, 175, 535, 176, 177, 178, 179, 180, 181,
	472, 637, 183, 184, 185, 186, 187, 189, 191, 192,
	193, 194, 195, 197, 199, 0, 0, 0, 640, 0,
	0, 0, 203, 204, 205, 206, 207, 208, 0, 209,
	210, 214, 216, 217, 218, 219, 220, 221, 224, 0,
	226, 228, 0, 229, 232, 0, 233, 234, 235, 236,
	237, 238, 239, 240, 476, 241, 0, 242, 243, 245,
	0, 248, 249, 250, 251, 252, 0, 253, 478, 479,
	254, 255, 257, 258, 259, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 0, 273, 274,
	275, 277, 0, 278, 279, 282, 283, 284, 285, 0,
	287, 495, 0, 288, 289, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 299, 496, 301, 302, 303, 304,
	305, 306, 307, 537, 309, 310, 311, 312, 313, 314,
	315, 499, 500, 316, 318, 319, 501, 503, 504, 653,
	334, 335, 336, 337, 338, 339, 340, 342, 0, 344,
	345, 346, 505, 347, 348, 349, 350, 0, 351, 352,
	353, 354, 355, 357, 360, 361, 362, 363, 0, 366,
	367, 368, 369, 370, 371, 372, 374, 375, 376, 378,
	379, 380, 538, 381, 382, 383, 384, 508, 386, 387,
	539, 389, 390, 392, 393, 394, 395, 396, 397, 554,
	0, 399, 509, 400, 401, 402, 403, 404, 0, 406,
	407, 408, 409, 410, 411, 414, 415, 416, 418, 419,
	511, 420, 421, 0, 423, 424, 656, 426, 427, 428,
	429, 430, 0, 555, 431, 513, 432, 514, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 0, 443, 444,
	445, 447, 448, 449, 450, 453, 454, 455, 456, 457,
	0, 458, 460, 462, 540, 517, 518, 519, 520, 521,
	523, 524, 525, 526, 463, 464, 480, 331, 325, 281,
	323, 324, 328, 329, 332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 1028, 767, 0,
	0, 0, 0, 815, 0, 0, 0, 3248, 0, 0,
	1029, 1030, 3246, 157, 0, 174, 638, 0, 223, 260,
	475, 0, 0, 320, 0, 373, 377, 0, 466, 0,
	0, 1034, 0, 231, 1025, 643, 0, 649, 0, 655,
	1024, 442, 0, 645, 646, 651, 162, 556, 465, 536,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 1026, 647, 644, 648, 654,
	642, 652, 639, 650, 0, 364, 298, 0, 515, 391,
	169, 215, 202, 244, 286, 398, 0, 0, 276, 446,
	211, 300, 0, 190, 333, 0, 422, 297, 0, 405,
	425, 0, 317, 196, 356, 412, 413, 636, 641, 0,
	657, 0, 200, 201, 322, 182, 330, 527, 493, 385,
	343, 341, 0, 308, 365, 522, 0, 0, 230, 0,
	225, 321, 461, 188, 440, 359, 326, 280, 388, 417,
	227, 212, 213, 256, 358, 246, 198, 451, 490, 494,
	492, 488, 485, 489, 486, 487, 491, 247, 484, 0,
	459, 468, 502, 482, 510, 467, 507, 477, 222, 506,
	471, 470, 516, 497, 498, 452, 512, 483, 481, 474,
	473, 469, 0, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 158, 0, 159, 160, 161, 163, 164,
	165, 635, 166, 167, 168, 171, 172, 173, 175, 535,
	176, 177, 178, 179, 180, 181, 472, 637, 183, 184,
	185, 186, 187, 189, 191, 192, 193, 194, 195, 197,
	199, 0, 0, 0, 640, 0, 0, 0, 203, 204,
	205, 206, 207, 208, 0, 209, 210, 214, 216, 217,
	218, 219, 220, 221, 224, 0, 226, 228, 0, 229,
	232, 0, 233, 234, 235, 236, 237, 238, 239, 240,
	476, 241, 0, 242, 243, 245, 0, 248, 249, 250,
	251, 252, 0, 253, 478, 479, 254, 255, 257, 258,
	259, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 0, 273, 274, 275, 277, 0, 278,
	279, 282, 283, 284, 285, 0, 287, 495, 0, 288,
	289, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	299, 496, 301, 302, 303, 304, 305, 306, 307, 537,
	309, 310, 311, 312, 313, 314, 315, 499, 500, 316,
	318, 319, 501, 503, 504, 653, 334, 335, 336, 337,
	338, 339, 340, 342, 0, 344, 345, 346, 505, 347,
	348, 349, 350, 0, 351, 352, 353, 354, 355, 357,
	360, 361, 362, 363, 0, 366, 367, 368, 369, 370,
	371, 372, 374, 375, 376, 378, 379, 380, 538, 381,
	382, 383, 384, 508, 386, 387, 539, 389, 390, 392,
	393, 394, 395, 396, 397, 554, 0, 399, 509, 400,
	401, 402, 403, 404, 0, 406, 407, 408, 409, 410,
	411, 414, 415, 416, 418, 419, 511, 420, 421, 0,
	423, 424, 656, 426, 427, 428, 429, 430, 0, 555,
	431, 513, 432, 514, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 0, 443, 444, 445, 447, 448, 449,
	450, 453, 454, 455, 456, 457, 0, 458, 460, 462,
	540, 517, 518, 519, 520, 521, 523, 524, 525, 526,
	463, 464, 480, 331, 325, 281, 323, 324, 328, 329,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 0, 1028, 767, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 1029, 1030, 157, 0,
	174, 638, 0, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 1020, 0, 231, 1025,
	643, 0, 649, 0, 655, 1024, 442, 0, 645, 646,
	651, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	1026, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 1028, 767, 0,
	0, 0, 0, 815, 0, 0, 0, 0, 0, 0,
	0, 1029, 1030, 157, 0, 174, 638, 0, 223, 260,
	475, 0, 0, 320, 0, 373, 377, 0, 466, 0,
	0, 0, 0, 231, 1025, 643, 0, 649, 0, 655,
	1024, 442, 0, 645, 646, 651, 162, 556, 465, 536,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 1026, 647, 644, 648, 654,
	642, 652, 639, 650, 0, 364, 298, 0, 515, 391,
	169, 215, 202, 244, 286, 398, 0, 0, 276, 446,
	211, 300, 0, 190, 333, 0, 422, 297, 0, 405,
	425, 0, 317, 196, 356, 412, 413, 636, 641, 0,
	657, 0, 200, 201, 322, 182, 330, 527, 493, 385,
	343, 341, 0, 308, 365, 522, 0, 0, 230, 0,
	225, 321, 461, 188, 440, 359, 326, 280, 388, 417,
	227, 212, 213, 256, 358, 246, 198, 451, 490, 494,
	492, 488, 485, 489, 486, 487, 491, 247, 484, 0,
	459, 468, 502, 482, 510, 467, 507, 477, 222, 506,
	471, 470, 516, 497, 498, 452, 512, 483, 481, 474,
	473, 469, 0, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 158, 0, 159, 160, 161, 163, 164,
	165, 635, 166, 167, 168, 171, 172, 173, 175, 535,
	176, 177, 178, 179, 180, 181, 472, 637, 183, 184,
	185, 186, 187, 189, 191, 192, 193, 194, 195, 197,
	199, 0, 0, 0, 640, 0, 0, 0, 203, 204,
	205, 206, 207, 208, 0, 209, 210, 214, 216, 217,
	218, 219, 220, 221, 224, 0, 226, 228, 0, 229,
	232, 0, 233, 234, 235, 236, 237, 238, 239, 240,
	476, 241, 0, 242, 243, 245, 0, 248, 249, 250,
	251, 252, 0, 253, 478, 479, 254, 255, 257, 258,
	259, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 0, 273, 274, 275, 277, 0, 278,
	279, 282, 283, 284, 285, 0, 287, 495, 0, 288,
	289, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	299, 496, 301, 302, 303, 304, 305, 306, 307, 537,
	309, 310, 311, 312, 313, 314, 315, 499, 500, 316,
	318, 319, 501, 503, 504, 653, 334, 335, 336, 337,
	338, 339, 340, 342, 0, 344, 345, 346, 505, 347,
	348, 349, 350, 0, 351, 352, 353, 354, 355, 357,
	360, 361, 362, 363, 0, 366, 367, 368, 369, 370,
	371, 372, 374, 375, 376, 378, 379, 380, 538, 381,
	382, 383, 384, 508, 386, 387, 539, 389, 390, 392,
	393, 394, 395, 396, 397, 554, 0, 399, 509, 400,
	401, 402, 403, 404, 0, 406, 407, 408, 409, 410,
	411, 414, 415, 416, 418, 419, 511, 420, 421, 0,
	423, 424, 656, 426, 427, 428, 429, 430, 0, 555,
	431, 513, 432, 514, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 0, 443, 444, 445, 447, 448, 449,
	450, 453, 454, 455, 456, 457, 0, 458, 460, 462,
	540, 517, 518, 519, 520, 521, 523, 524, 525, 526,
	463, 464, 480, 331, 325, 281, 323, 324, 328, 329,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 807, 767, 0, 0, 0, 0, 815, 793,
	0, 0, 0, 0, 0, 0, 1029, 1030, 157, 0,
	174, 638, 0, 223, 260, 798, 0, 0, 320, 0,
	373, 377, 0, 466, 812, 0, 0, 0, 231, 810,
	643, 0, 649, 811, 655, 809, 442, 0, 645, 646,
	651, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 799, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	802, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 814, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 632, 0, 807, 767,
	0, 0, 0, 0, 815, 793, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 638, 794, 223,
	260, 798, 0, 0, 320, 0, 373, 377, 0, 466,
	812, 0, 0, 0, 231, 810, 643, 0, 649, 811,
	655, 809, 442, 0, 645, 646, 651, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 3063, 0, 0, 0, 0, 647, 644, 648,
	654, 642, 652, 639, 650, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 636, 641,
	0, 657, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 799, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 635, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 637, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 640, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 802, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 653, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 814, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 656, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 632, 0, 807, 767, 0, 0, 0, 0,
	815, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 638, 794, 223, 260, 798, 0, 0,
	320, 0, 373, 377, 0, 466, 812, 0, 0, 0,
	231, 810, 643, 0, 649, 811, 655, 809, 442, 0,
	645, 646, 651, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 647, 644, 648, 654, 642, 652, 639,
	650, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 636, 641, 0, 657, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 2643, 799, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 635, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 637, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 640, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 802, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 653, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	814, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 656,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 638,
	794, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	44, 466, 0, 0, 0, 0, 231, 0, 643, 0,
	649, 0, 655, 0, 442, 0, 645, 646, 651, 162,
	556, 465, 536, 0, 0, 0, 327, 41, 0, 0,
	553, 42, 0, 0, 170, 0, 0, 0, 0, 647,
	644, 648, 654, 642, 652, 639, 650, 0, 364, 298,
	1974, 1534, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	636, 641, 0, 657, 0, 200, 201, 322, 182, 330,
	1982, 1983, 1981, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 635, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	637, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 640, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 653, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 656, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 632, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 638, 1976, 223, 260, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 643, 0, 649, 0, 655, 0,
	442, 0, 645, 646, 651, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 553, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 1974, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 1982, 1983, 1981, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	632, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 638, 1976, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	643, 0, 649, 0, 655, 0, 442, 0, 645, 646,
	651, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 638, 2756, 223,
	260, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 643, 0, 649, 0,
	655, 0, 442, 0, 645, 646, 651, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 647, 644, 648,
	654, 642, 652, 639, 650, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 636, 641,
	0, 657, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 635, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 637, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 640, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 653, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 656, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 632, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 638, 3376, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 643, 0, 649, 0, 655, 0, 442, 0,
	645, 646, 651, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 647, 644, 648, 654, 642, 652, 639,
	650, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 636, 641, 0, 657, 0, 200,
	201, 322, 182, 330, 1982, 1983, 1981, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 635, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 637, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 640, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 653, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 656,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	0, 0, 603, 604, 605, 0, 157, 0, 174, 0,
	40, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 601, 602, 0, 0, 0, 0, 0, 144, 594,
	595, 596, 597, 598, 599, 592, 0, 0, 0, 0,
	0, 0, 603, 604, 605, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 3170, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 0, 0,
	600, 601, 602, 0, 0, 0, 0, 0, 0, 594,
	595, 596, 597, 598, 599, 157, 0, 174, 0, 0,
	223, 260, 475, 0, 0, 320, 0, 373, 377, 0,
	466, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 162, 556,
	465, 536, 0, 0, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 364, 298, 0,
	515, 391, 169, 215, 202, 244, 286, 398, 0, 0,
	276, 446, 211, 300, 0, 190, 333, 0, 422, 297,
	0, 405, 425, 0, 317, 196, 356, 412, 413, 0,
	0, 0, 0, 0, 200, 201, 322, 182, 330, 527,
	493, 385, 343, 341, 0, 308, 365, 522, 0, 0,
	230, 0, 225, 321, 461, 188, 440, 359, 326, 280,
	388, 417, 227, 212, 213, 256, 358, 246, 198, 451,
	490, 494, 492, 488, 485, 489, 486, 487, 491, 247,
	484, 0, 459, 468, 502, 482, 510, 467, 507, 477,
	222, 506, 471, 470, 516, 497, 498, 452, 512, 483,
	481, 474, 473, 469, 0, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 0, 159, 160, 161,
	163, 164, 165, 0, 166, 167, 168, 171, 172, 173,
	175, 535, 176, 177, 178, 179, 180, 181, 472, 0,
	183, 184, 185, 186, 187, 189, 191, 192, 193, 194,
	195, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	203, 204, 205, 206, 207, 208, 0, 209, 210, 214,
	216, 217, 218, 219, 220, 221, 224, 0, 226, 228,
	0, 229, 232, 0, 233, 234, 235, 236, 237, 238,
	239, 240, 476, 241, 0, 242, 243, 245, 0, 248,
	249, 250, 251, 252, 0, 253, 478, 479, 254, 255,
	257, 258, 259, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 0, 273, 274, 275, 277,
	0, 278, 279, 282, 283, 284, 285, 0, 287, 495,
	0, 288, 289, 290, 0, 0, 291, 292, 293, 294,
	295, 296, 299, 496, 301, 302, 303, 304, 305, 306,
	307, 537, 309, 310, 311, 312, 313, 314, 315, 499,
	500, 316, 318, 319, 501, 503, 504, 0, 334, 335,
	336, 337, 338, 339, 340, 342, 0, 344, 345, 346,
	505, 347, 348, 349, 350, 0, 351, 352, 353, 354,
	355, 357, 360, 361, 362, 363, 0, 366, 367, 368,
	369, 370, 371, 372, 374, 375, 376, 378, 379, 380,
	538, 381, 382, 383, 384, 508, 386, 387, 539, 389,
	390, 392, 393, 394, 395, 396, 397, 554, 0, 399,
	509, 400, 401, 402, 403, 404, 0, 406, 407, 408,
	409, 410, 411, 414, 415, 416, 418, 419, 511, 420,
	421, 0, 423, 424, 0, 426, 427, 428, 429, 430,
	0, 555, 431, 513, 432, 514, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 0, 443, 444, 445, 447,
	448, 449, 450, 453, 454, 455, 456, 457, 0, 458,
	460, 462, 540, 517, 518, 519, 520, 521, 523, 524,
	525, 526, 463, 464, 480, 331, 325, 281, 323, 324,
	328, 329, 332, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 174, 0, 0, 223, 260, 475, 0,
	3461, 320, 0, 373, 377, 0, 466, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 0, 0, 162, 556, 465, 536, 0, 0,
	0, 327, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 298, 0, 515, 391, 169, 215,
	202, 244, 286, 398, 0, 0, 276, 446, 211, 300,
	0, 190, 333, 0, 422, 297, 0, 405, 425, 0,
	317, 196, 356, 412, 413, 0, 0, 0, 0, 0,
	200, 201, 322, 182, 330, 527, 493, 385, 343, 341,
	0, 308, 365, 522, 0, 0, 230, 0, 225, 321,
	461, 188, 440, 359, 326, 280, 388, 417, 227, 212,
	213, 256, 358, 246, 198, 451, 490, 494, 492, 488,
	485, 489, 486, 487, 491, 247, 484, 0, 459, 468,
	502, 482, 510, 467, 507, 477, 222, 506, 471, 470,
	516, 497, 498, 452, 512, 483, 481, 474, 473, 469,
	0, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 158, 0, 159, 160, 161, 163, 164, 165, 0,
	166, 167, 168, 171, 172, 173, 175, 535, 176, 177,
	178, 179, 180, 181, 472, 0, 183, 184, 185, 186,
	187, 189, 191, 192, 193, 194, 195, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 203, 204, 205, 206,
	207, 208, 0, 209, 210, 214, 216, 217, 218, 219,
	220, 221, 224, 0, 226, 228, 0, 229, 232, 0,
	233, 234, 235, 236, 237, 238, 239, 240, 476, 241,
	0, 242, 243, 245, 0, 248, 249, 250, 251, 252,
	0, 253, 478, 479, 254, 255, 257, 258, 259, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 0, 273, 274, 275, 277, 0, 278, 279, 282,
	283, 284, 285, 0, 287, 495, 0, 288, 289, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 299, 496,
	301, 302, 303, 304, 305, 306, 307, 537, 309, 310,
	311, 312, 313, 314, 315, 499, 500, 316, 318, 319,
	501, 503, 504, 0, 334, 335, 336, 337, 338, 339,
	340, 342, 0, 344, 345, 346, 505, 347, 348, 349,
	350, 0, 351, 352, 353, 354, 355, 357, 360, 361,
	362, 363, 0, 366, 367, 368, 369, 370, 371, 372,
	374, 375, 376, 378, 379, 380, 538, 381, 382, 383,
	384, 508, 386, 387, 539, 389, 390, 392, 393, 394,
	395, 396, 397, 554, 0, 399, 509, 400, 401, 402,
	403, 404, 0, 406, 407, 408, 409, 410, 411, 414,
	415, 416, 418, 419, 511, 420, 421, 0, 423, 424,
	0, 426, 427, 428, 429, 430, 0, 555, 431, 513,
	432, 514, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 0, 443, 444, 445, 447, 448, 449, 450, 453,
	454, 455, 456, 457, 0, 458, 460, 462, 540, 517,
	518, 519, 520, 521, 523, 524, 525, 526, 463, 464,
	480, 331, 325, 281, 323, 324, 328, 329, 332, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 174,
	0, 0, 223, 260, 475, 0, 3363, 320, 0, 373,
	377, 0, 466, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 0, 0,
	162, 556, 465, 536, 0, 0, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	298, 0, 515, 391, 169, 215, 202, 244, 286, 398,
	0, 0, 276, 446, 211, 300, 0, 190, 333, 0,
	422, 297, 0, 405, 425, 0, 317, 196, 356, 412,
	413, 0, 0, 0, 0, 0, 200, 201, 322, 182,
	330, 527, 493, 385, 343, 341, 0, 308, 365, 522,
	0, 0, 230, 0, 225, 321, 461, 188, 440, 359,
	326, 280, 388, 417, 227, 212, 213, 256, 358, 246,
	198, 451, 490, 494, 492, 488, 485, 489, 486, 487,
	491, 247, 484, 0, 459, 468, 502, 482, 510, 467,
	507, 477, 222, 506, 471, 470, 516, 497, 498, 452,
	512, 483, 481, 474, 473, 469, 0, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 158, 0, 159,
	160, 161, 163, 164, 165, 0, 166, 167, 168, 171,
	172, 173, 175, 535, 176, 177, 178, 179, 180, 181,
	472, 0, 183, 184, 185, 186, 187, 189, 191, 192,
	193, 194, 195, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 203, 204, 205, 206, 207, 208, 0, 209,
	210, 214, 216, 217, 218, 219, 220, 221, 224, 0,
	226, 228, 0, 229, 232, 0, 233, 234, 235, 236,
	237, 238, 239, 240, 476, 241, 0, 242, 243, 245,
	0, 248, 249, 250, 251, 252, 0, 253, 478, 479,
	254, 255, 257, 258, 259, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 0, 273, 274,
	275, 277, 0, 278, 279, 282, 283, 284, 285, 0,
	287, 495, 0, 288, 289, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 299, 496, 301, 302, 303, 304,
	305, 306, 307, 537, 309, 310, 311, 312, 313, 314,
	315, 499, 500, 316, 318, 319, 501, 503, 504, 0,
	334, 335, 336, 337, 338, 339, 340, 342, 0, 344,
	345, 346, 505, 347, 348, 349, 350, 0, 351, 352,
	353, 354, 355, 357, 360, 361, 362, 363, 0, 366,
	367, 368, 369, 370, 371, 372, 374, 375, 376, 378,
	379, 380, 538, 381, 382, 383, 384, 508, 386, 387,
	539, 389, 390, 392, 393, 394, 395, 396, 397, 554,
	0, 399, 509, 400, 401, 402, 403, 404, 0, 406,
	407, 408, 409, 410, 411, 414, 415, 416, 418, 419,
	511, 420, 421, 0, 423, 424, 0, 426, 427, 428,
	429, 430, 0, 555, 431, 513, 432, 514, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 0, 443, 444,
	445, 447, 448, 449, 450, 453, 454, 455, 456, 457,
	0, 458, 460, 462, 540, 517, 518, 519, 520, 521,
	523, 524, 525, 526, 463, 464, 480, 331, 325, 281,
	323, 324, 328, 329, 332, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 174, 0, 0, 223, 260,
	475, 0, 3360, 320, 0, 373, 377, 44, 466, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 162, 556, 465, 536,
	0, 0, 0, 327, 41, 0, 0, 0, 42, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 298, 0, 1534, 391,
	169, 215, 202, 244, 286, 398, 0, 0, 276, 446,
	211, 300, 0, 190, 333, 0, 422, 297, 0, 405,
	425, 0, 317, 196, 356, 412, 413, 0, 0, 0,
	0, 0, 200, 201, 322, 182, 330, 527, 493, 385,
	343, 341, 0, 308, 365, 522, 0, 0, 230, 0,
	225, 321, 461, 188, 440, 359, 326, 280, 388, 417,
	227, 212, 213, 256, 358, 246, 198, 451, 490, 494,
	492, 488, 485, 489, 486, 487, 491, 247, 484, 0,
	459, 468, 502, 482, 510, 467, 507, 477, 222, 506,
	471, 470, 516, 497, 498, 452, 512, 483, 481, 474,
	473, 469, 0, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 158, 0, 159, 160, 161, 163, 164,
	165, 0, 166, 167, 168, 171, 172, 173, 175, 535,
	176, 177, 178, 179, 180, 181, 472, 0, 183, 184,
	185, 186, 187, 189, 191, 192, 193, 194, 195, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 203, 204,
	205, 206, 207, 208, 0, 209, 210, 214, 216, 217,
	218, 219, 220, 221, 224, 0, 226, 228, 0, 229,
	232, 0, 233, 234, 235, 236, 237, 238, 239, 240,
	476, 241, 0, 242, 243, 245, 0, 248, 249, 250,
	251, 252, 0, 253, 478, 479, 254, 255, 257, 258,
	259, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 0, 273, 274, 275, 277, 0, 278,
	279, 282, 283, 284, 285, 0, 287, 495, 0, 288,
	289, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	299, 496, 301, 302, 303, 304, 305, 306, 307, 537,
	309, 310, 311, 312, 313, 314, 315, 499, 500, 316,
	318, 319, 501, 503, 504, 0, 334, 335, 336, 337,
	338, 339, 340, 342, 0, 344, 345, 346, 505, 347,
	348, 349, 350, 0, 351, 352, 353, 354, 355, 357,
	360, 361, 362, 363, 0, 366, 367, 368, 369, 370,
	371, 372, 374, 375, 376, 378, 379, 380, 538, 381,
	382, 383, 384, 508, 386, 387, 539, 389, 390, 392,
	393, 394, 395, 396, 397, 554, 0, 399, 509, 400,
	401, 402, 403, 404, 0, 406, 407, 408, 409, 410,
	411, 414, 415, 416, 418, 419, 511, 420, 421, 0,
	423, 424, 0, 426, 427, 428, 429, 430, 0, 555,
	431, 513, 432, 514, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 0, 443, 444, 445, 447, 448, 449,
	450, 453, 454, 455, 456, 457, 0, 458, 460, 462,
	540, 517, 518, 519, 520, 521, 523, 524, 525, 526,
	463, 464, 480, 331, 325, 281, 323, 324, 328, 329,
	332, 670, 0, 0, 767, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 174, 638, 40, 223, 260, 475, 0, 0, 320,
	0, 373, 377, 0, 466, 0, 0, 0, 0, 231,
	1025, 643, 0, 649, 0, 655, 1024, 442, 0, 645,
	646, 651, 162, 556, 465, 536, 0, 0, 0, 327,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 1026, 647, 644, 648, 654, 642, 652, 639, 650,
	0, 364, 298, 0, 515, 391, 169, 215, 202, 244,
	286, 398, 0, 0, 276, 446, 211, 300, 0, 190,
	333, 0, 422, 297, 0, 405, 425, 0, 317, 196,
	356, 412, 413, 636, 641, 0, 657, 0, 200, 201,
	322, 182, 330, 527, 493, 385, 343, 341, 0, 308,
	365, 522, 0, 0, 230, 0, 225, 321, 461, 188,
	440, 359, 326, 280, 388, 417, 227, 212, 213, 256,
	358, 246, 198, 451, 490, 494, 492, 488, 485, 489,
	486, 487, 491, 247, 484, 0, 459, 468, 502, 482,
	510, 467, 507, 477, 222, 506, 471, 470, 516, 497,
	498, 452, 512, 483, 481, 474, 473, 469, 0, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 158,
	0, 159, 160, 161, 163, 164, 165, 635, 166, 167,
	168, 171, 172, 173, 175, 535, 176, 177, 178, 179,
	180, 181, 472, 637, 183, 184, 185, 186, 187, 189,
	191, 192, 193, 194, 195, 197, 199, 0, 0, 0,
	640, 0, 0, 0, 203, 204, 205, 206, 207, 208,
	0, 209, 210, 214, 216, 217, 218, 219, 220, 221,
	224, 0, 226, 228, 0, 229, 232, 0, 233, 234,
	235, 236, 237, 238, 239, 240, 476, 241, 0, 242,
	243, 245, 0, 248, 249, 250, 251, 252, 0, 253,
	478, 479, 254, 255, 257, 258, 259, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 0,
	273, 274, 275, 277, 0, 278, 279, 282, 283, 284,
	285, 0, 287, 495, 0, 288, 289, 290, 0, 0,
	291, 292, 293, 294, 295, 296, 299, 496, 301, 302,
	303, 304, 305, 306, 307, 537, 309, 310, 311, 312,
	313, 314, 315, 499, 500, 316, 318, 319, 501, 503,
	504, 653, 334, 335, 336, 337, 338, 339, 340, 342,
	0, 344, 345, 346, 505, 347, 348, 349, 350, 0,
	351, 352, 353, 354, 355, 357, 360, 361, 362, 363,
	0, 366, 367, 368, 369, 370, 371, 372, 374, 375,
	376, 378, 379, 380, 538, 381, 382, 383, 384, 508,
	386, 387, 539, 389, 390, 392, 393, 394, 395, 396,
	397, 554, 0, 399, 509, 400, 401, 402, 403, 404,
	0, 406, 407, 408, 409, 410, 411, 414, 415, 416,
	418, 419, 511, 420, 421, 0, 423, 424, 656, 426,
	427, 428, 429, 430, 0, 555, 431, 513, 432, 514,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 0,
	443, 444, 445, 447, 448, 449, 450, 453, 454, 455,
	456, 457, 0, 458, 460, 462, 540, 517, 518, 519,
	520, 521, 523, 524, 525, 526, 463, 464, 480, 331,
	325, 281, 323, 324, 328, 329, 332, 670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 174, 638, 0,
	223, 260, 475, 0, 0, 320, 0, 373, 377, 0,
	466, 0, 0, 0, 0, 231, 0, 643, 0, 649,
	0, 655, 0, 442, 0, 645, 646, 651, 162, 556,
	465, 536, 0, 0, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 647, 644,
	648, 654, 642, 652, 639, 650, 0, 364, 298, 0,
	515, 391, 169, 215, 202, 244, 286, 398, 0, 0,
	276, 446, 211, 300, 0, 190, 333, 0, 422, 297,
	0, 405, 425, 0, 317, 196, 356, 412, 413, 636,
	641, 0, 657, 0, 200, 201, 322, 182, 330, 527,
	493, 385, 343, 341, 0, 308, 365, 522, 0, 0,
	230, 0, 225, 321, 461, 188, 440, 359, 326, 280,
	388, 417, 227, 212, 213, 256, 358, 246, 198, 451,
	490, 494, 492, 488, 485, 489, 486, 487, 491, 247,
	484, 0, 459, 468, 502, 482, 510, 467, 507, 477,
	222, 506, 471, 470, 516, 497, 498, 452, 512, 483,
	481, 474, 473, 469, 0, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 0, 159, 160, 161,
	163, 164, 165, 635, 166, 167, 168, 171, 172, 173,
	175, 535, 176, 177, 178, 179, 180, 181, 472, 637,
	183, 184, 185, 186, 187, 189, 191, 192, 193, 194,
	195, 197, 199, 0, 0, 667, 640, 0, 0, 668,
	203, 204, 205, 206, 207, 208, 0, 209, 210, 214,
	216, 217, 218, 219, 220, 221, 224, 0, 226, 228,
	0, 229, 232, 0, 233, 234, 235, 236, 237, 238,
	239, 240, 476, 241, 0, 242, 243, 245, 0, 248,
	249, 250, 251, 252, 0, 253, 478, 479, 254, 255,
	257, 258, 259, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 0, 273, 274, 275, 277,
	0, 278, 279, 282, 283, 284, 285, 0, 287, 495,
	0, 288, 289, 290, 0, 0, 291, 292, 293, 294,
	295, 296, 299, 496, 301, 302, 303, 304, 305, 306,
	307, 537, 309, 310, 311, 312, 313, 314, 315, 499,
	500, 316, 318, 319, 501, 503, 504, 653, 334, 335,
	336, 337, 338, 339, 340, 342, 0, 344, 345, 346,
	505, 347, 348, 349, 350, 0, 351, 352, 353, 354,
	355, 357, 360, 361, 362, 363, 0, 366, 367, 368,
	369, 370, 371, 372, 374, 375, 376, 378, 379, 380,
	538, 381, 382, 383, 384, 508, 386, 387, 539, 389,
	390, 392, 393, 394, 395, 396, 397, 554, 669, 399,
	509, 400, 401, 402, 403, 404, 0, 406, 407, 408,
	409, 410, 411, 414, 415, 416, 418, 419, 511, 420,
	421, 0, 423, 424, 656, 426, 427, 428, 429, 430,
	0, 555, 431, 513, 432, 514, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 0, 443, 444, 445, 447,
	448, 449, 450, 453, 454, 455, 456, 457, 0, 458,
	460, 462, 540, 517, 518, 519, 520, 521, 523, 524,
	525, 526, 463, 464, 480, 331, 325, 281, 323, 324,
	328, 329, 332, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 2320, 174, 0, 0, 223, 260, 475, 0,
	0, 320, 0, 373, 377, 0, 466, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 0, 0, 162, 556, 465, 536, 0, 0,
	0, 327, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 298, 0, 515, 391, 169, 215,
	202, 244, 286, 398, 0, 0, 276, 446, 211, 300,
	0, 190, 333, 0, 422, 297, 0, 405, 425, 0,
	317, 196, 356, 412, 413, 0, 0, 0, 0, 0,
	200, 201, 322, 182, 330, 527, 493, 385, 343, 341,
	0, 308, 365, 522, 0, 0, 230, 0, 225, 321,
	461, 188, 440, 359, 326, 280, 388, 417, 227, 212,
	213, 256, 358, 246, 198, 451, 490, 494, 492, 488,
	485, 489, 486, 487, 491, 247, 484, 0, 459, 468,
	502, 482, 510, 467, 507, 477, 222, 506, 471, 470,
	516, 497, 498, 452, 512, 483, 481, 474, 473, 469,
	0, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 158, 0, 159, 160, 161, 163, 164, 165, 0,
	166, 167, 168, 171, 172, 173, 175, 535, 176, 177,
	178, 179, 180, 181, 472, 0, 183, 184, 185, 186,
	187, 189, 191, 192, 193, 194, 195, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 203, 204, 205, 206,
	207, 208, 0, 209, 210, 214, 216, 217, 218, 219,
	220, 221, 224, 0, 226, 228, 0, 229, 232, 0,
	233, 234, 235, 236, 237, 238, 239, 240, 476, 241,
	0, 242, 243, 245, 0, 248, 249, 250, 251, 252,
	0, 253, 478, 479, 254, 255, 257, 258, 259, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 0, 273, 274, 275, 277, 0, 278, 279, 282,
	283, 284, 285, 0, 287, 495, 0, 288, 289, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 299, 496,
	301, 302, 303, 304, 305, 306, 307, 537, 309, 310,
	311, 312, 313, 314, 315, 499, 500, 316, 318, 319,
	501, 503, 504, 0, 334, 335, 336, 337, 338, 339,
	340, 342, 0, 344, 345, 346, 505, 347, 348, 349,
	350, 0, 351, 352, 353, 354, 355, 357, 360, 361,
	362, 363, 0, 366, 367, 368, 369, 370, 371, 372,
	374, 375, 376, 378, 379, 380, 538, 381, 382, 383,
	384, 508, 386, 387, 539, 389, 390, 392, 393, 394,
	395, 396, 397, 554, 0, 399, 509, 400, 401, 402,
	403, 404, 0, 406, 407, 408, 409, 410, 411, 414,
	415, 416, 418, 419, 511, 420, 421, 0, 423, 424,
	0, 426, 427, 428, 429, 430, 0, 555, 431, 513,
	432, 514, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 0, 443, 444, 445, 447, 448, 449, 450, 453,
	454, 455, 456, 457, 0, 458, 460, 462, 540, 517,
	518, 519, 520, 521, 523, 524, 525, 526, 463, 464,
	480, 331, 325, 281, 323, 324, 328, 329, 332, 0,
	670, 0, 0, 767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 638, 780, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 1010, 0, 231, 0,
	643, 0, 649, 0, 655, 0, 442, 0, 645, 646,
	651, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	260, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 670, 0, 0, 767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 638, 1666, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 643, 0, 649, 0, 655, 0, 442, 0,
	645, 646, 651, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 647, 644, 648, 654, 642, 652, 639,
	650, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 636, 641, 0, 657, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 635, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 637, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 640, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 653, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 656,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 632, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 638, 825, 223, 260, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 643, 0, 649, 0, 655, 0,
	442, 0, 645, 646, 651, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 638, 0, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	643, 0, 649, 0, 655, 0, 442, 0, 645, 646,
	651, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 2064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 638, 0, 223,
	260, 0, 0, 0, 320, 0, 373, 377, 0, 0,
	0, 0, 0, 0, 231, 0, 643, 2039, 649, 0,
	655, 0, 442, 0, 645, 646, 651, 162, 728, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 647, 644, 648,
	654, 642, 652, 639, 650, 0, 364, 298, 0, 0,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 636, 641,
	0, 657, 0, 200, 201, 322, 182, 330, 0, 0,
	385, 343, 341, 0, 308, 365, 0, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 0,
	0, 459, 731, 721, 713, 714, 715, 716, 717, 718,
	0, 733, 734, 735, 736, 737, 452, 727, 0, 712,
	719, 720, 722, 2042, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 635, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 0, 637, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 640, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 0, 0, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 0, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 0, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 0, 0,
	316, 318, 319, 0, 2040, 0, 653, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 0,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 0, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 2045,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 0, 420, 421,
	0, 423, 424, 656, 426, 427, 428, 429, 430, 0,
	555, 431, 0, 432, 0, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 0, 0, 0, 144, 0, 0, 0, 0,
	0, 463, 464, 2041, 331, 325, 281, 323, 324, 328,
	329, 332, 2059, 157, 0, 174, 0, 0, 223, 1735,
	475, 0, 0, 320, 0, 373, 377, 0, 466, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 0, 2057,
	0, 442, 0, 0, 0, 0, 162, 556, 465, 536,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 298, 0, 515, 391,
	169, 215, 202, 244, 286, 398, 0, 0, 276, 446,
	211, 300, 0, 190, 333, 0, 422, 297, 0, 405,
	425, 0, 317, 196, 356, 412, 413, 0, 0, 1739,
	0, 0, 200, 201, 322, 182, 330, 527, 493, 385,
	343, 341, 0, 308, 365, 522, 0, 0, 230, 0,
	225, 321, 461, 188, 440, 359, 326, 280, 388, 417,
	227, 212, 213, 256, 358, 246, 198, 451, 490, 494,
	492, 488, 485, 489, 486, 487, 491, 247, 484, 0,
	459, 468, 502, 482, 510, 467, 507, 477, 222, 506,
	471, 470, 516, 497, 498, 452, 512, 483, 481, 474,
	473, 469, 0, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 158, 0, 159, 160, 161, 163, 164,
	165, 0, 166, 167, 168, 171, 172, 173, 175, 535,
	176, 177, 178, 179, 180, 181, 472, 0, 183, 184,
	185, 186, 187, 189, 191, 192, 193, 194, 195, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 203, 204,
	205, 206, 207, 208, 0, 209, 210, 214, 216, 217,
	218, 219, 220, 221, 224, 0, 226, 228, 0, 229,
	232, 0, 1745, 234, 235, 236, 237, 238, 239, 240,
	476, 241, 0, 242, 243, 245, 1744, 248, 249, 250,
	251, 252, 0, 253, 478, 479, 254, 255, 257, 258,
	259, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 0, 273, 274, 275, 277, 0, 278,
	279, 282, 283, 284, 285, 0, 287, 495, 0, 288,
	289, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	299, 496, 301, 302, 303, 304, 305, 306, 307, 537,
	309, 310, 311, 312, 313, 314, 315, 499, 500, 316,
	318, 319, 501, 503, 504, 0, 334, 335, 336, 337,
	338, 339, 340, 342, 0, 344, 345, 346, 505, 347,
	348, 349, 350, 1743, 351, 352, 353, 354, 355, 357,
	360, 361, 362, 363, 0, 366, 367, 368, 369, 370,
	371, 372, 374, 375, 376, 378, 379, 380, 538, 381,
	382, 383, 384, 508, 386, 387, 539, 389, 390, 392,
	393, 394, 395, 396, 397, 554, 0, 399, 509, 400,
	401, 402, 403, 404, 0, 406, 407, 408, 409, 410,
	411, 414, 415, 416, 418, 419, 511, 420, 421, 0,
	423, 424, 0, 426, 427, 428, 429, 430, 0, 555,
	431, 513, 432, 514, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 1742, 443, 444, 445, 447, 448, 449,
	450, 453, 454, 455, 456, 457, 0, 458, 460, 462,
	540, 517, 518, 519, 520, 521, 523, 524, 525, 526,
	463, 464, 480, 331, 325, 281, 323, 324, 328, 329,
	332, 144, 0, 0, 0, 1741, 1736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 174, 0, 0, 223, 260, 475, 0, 0, 320,
	0, 373, 377, 0, 466, 0, 0, 0, 0, 231,
	0, 0, 0, 1998, 0, 0, 0, 442, 0, 0,
	0, 0, 162, 556, 465, 536, 0, 0, 0, 327,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 298, 0, 515, 391, 169, 215, 202, 244,
	286, 398, 0, 0, 276, 446, 211, 300, 0, 190,
	333, 0, 422, 297, 0, 405, 425, 0, 317, 196,
	356, 412, 413, 0, 0, 1739, 0, 0, 200, 201,
	322, 182, 330, 527, 493, 385, 343, 341, 0, 308,
	365, 522, 0, 0, 230, 0, 225, 321, 461, 188,
	440, 359, 326, 280, 388, 417, 227, 212, 213, 256,
	358, 246, 198, 451, 490, 494, 492, 488, 485, 489,
	486, 487, 491, 247, 484, 0, 459, 468, 502, 482,
	510, 467, 507, 477, 222, 506, 471, 470, 516, 497,
	498, 452, 512, 483, 481, 474, 473, 469, 0, 147,
	148, 149, 150, 151, 152, 153, 154, 155, 156, 158,
	0, 159, 160, 161, 163, 164, 165, 0, 166, 167,
	168, 171, 172, 173, 175, 535, 176, 177, 178, 179,
	180, 181, 472, 0, 183, 184, 185, 186, 187, 189,
	191, 192, 193, 194, 195, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 203, 204, 205, 206, 207, 208,
	0, 209, 210, 214, 216, 217, 218, 219, 220, 221,
	224, 0, 226, 228, 0, 229, 232, 0, 1745, 234,
	235, 236, 237, 238, 239, 240, 476, 241, 0, 242,
	243, 245, 1744, 248, 249, 250, 251, 252, 0, 253,
	478, 479, 254, 255, 257, 258, 259, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 0,
	273, 274, 275, 277, 0, 278, 279, 282, 283, 284,
	285, 0, 287, 495, 0, 288, 289, 290, 0, 0,
	291, 292, 293, 294, 295, 296, 299, 496, 301, 302,
	303, 304, 305, 306, 307, 537, 309, 310, 311, 312,
	313, 314, 315, 499, 500, 316, 318, 319, 501, 503,
	504, 0, 334, 335, 336, 337, 338, 339, 340, 342,
	0, 344, 345, 346, 505, 347, 348, 349, 350, 1743,
	351, 352, 353, 354, 355, 357, 360, 361, 362, 363,
	0, 366, 367, 368, 369, 370, 371, 372, 374, 375,
	376, 378, 379, 380, 538, 381, 382, 383, 384, 508,
	386, 387, 539, 389, 390, 392, 393, 394, 395, 396,
	397, 554, 0, 399, 509, 400, 401, 402, 403, 404,
	0, 406, 407, 408, 409, 410, 411, 414, 415, 416,
	418, 419, 511, 420, 421, 0, 423, 424, 0, 426,
	427, 428, 429, 430, 0, 555, 431, 513, 432, 514,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 1742,
	443, 444, 445, 447, 448, 449, 450, 453, 454, 455,
	456, 457, 0, 458, 460, 462, 540, 517, 518, 519,
	520, 521, 523, 524, 525, 526, 463, 464, 480, 331,
	325, 281, 323, 324, 328, 329, 332, 144, 0, 0,
	0, 1741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 174, 0, 0,
	223, 260, 475, 0, 0, 320, 0, 373, 377, 0,
	466, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 162, 556,
	465, 536, 0, 0, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 364, 298, 0,
	515, 391, 169, 215, 202, 244, 286, 398, 0, 0,
	276, 446, 211, 300, 0, 190, 333, 0, 422, 297,
	0, 405, 425, 0, 317, 196, 356, 412, 413, 0,
	0, 1739, 0, 0, 200, 201, 322, 182, 330, 527,
	493, 385, 343, 341, 0, 308, 365, 522, 0, 0,
	230, 0, 225, 321, 461, 188, 440, 359, 326, 280,
	388, 417, 227, 212, 213, 256, 358, 246, 198, 451,
	490, 494, 492, 488, 485, 489, 486, 487, 491, 247,
	484, 0, 459, 468, 502, 482, 510, 467, 507, 477,
	222, 506, 471, 470, 516, 497, 498, 452, 512, 483,
	481, 474, 473, 469, 0, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 0, 159, 160, 161,
	163, 164, 165, 0, 166, 167, 168, 171, 172, 173,
	175, 535, 176, 177, 178, 179, 180, 181, 472, 0,
	183, 184, 185, 186, 187, 189, 191, 192, 193, 194,
	195, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	203, 204, 205, 206, 207, 208, 0, 209, 210, 214,
	216, 217, 218, 219, 220, 221, 224, 0, 226, 228,
	0, 229, 232, 0, 1745, 234, 235, 236, 237, 238,
	239, 240, 476, 241, 0, 242, 243, 245, 1744, 248,
	249, 250, 251, 252, 0, 253, 478, 479, 254, 255,
	257, 258, 259, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 0, 273, 274, 275, 277,
	0, 278, 279, 282, 283, 284, 285, 0, 287, 495,
	0, 288, 289, 290, 0, 0, 291, 292, 293, 294,
	295, 296, 299, 496, 301, 302, 303, 304, 305, 306,
	307, 537, 309, 310, 311, 312, 313, 314, 315, 499,
	500, 316, 318, 319, 501, 503, 504, 0, 334, 335,
	336, 337, 338, 339, 340, 342, 0, 344, 345, 346,
	505, 347, 348, 349, 350, 1743, 351, 352, 353, 354,
	355, 357, 360, 361, 362, 363, 0, 366, 367, 368,
	369, 370, 371, 372, 374, 375, 376, 378, 379, 380,
	538, 381, 382, 383, 384, 508, 386, 387, 539, 389,
	390, 392, 393, 394, 395, 396, 397, 554, 0, 399,
	509, 400, 401, 402, 403, 404, 0, 406, 407, 408,
	409, 410, 411, 414, 415, 416, 418, 419, 511, 420,
	421, 0, 423, 424, 0, 426, 427, 428, 429, 430,
	0, 555, 431, 513, 432, 514, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 1742, 443, 444, 445, 447,
	448, 449, 450, 453, 454, 455, 456, 457, 0, 458,
	460, 462, 540, 517, 518, 519, 520, 521, 523, 524,
	525, 526, 463, 464, 480, 331, 325, 281, 323, 324,
	328, 329, 332, 729, 0, 0, 0, 1741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 174, 638, 0, 223, 260, 0, 0,
	0, 320, 0, 373, 377, 0, 0, 0, 0, 0,
	0, 231, 0, 643, 2039, 649, 0, 655, 0, 442,
	0, 645, 646, 651, 162, 728, 465, 536, 0, 0,
	0, 327, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 647, 644, 648, 654, 642, 652,
	639, 650, 0, 364, 298, 0, 0, 391, 169, 215,
	202, 244, 286, 398, 0, 0, 276, 446, 211, 300,
	0, 190, 333, 0, 422, 297, 0, 405, 425, 0,
	317, 196, 356, 412, 413, 636, 641, 0, 657, 0,
	200, 201, 322, 182, 330, 0, 0, 385, 343, 341,
	0, 308, 365, 0, 0, 0, 230, 0, 225, 321,
	461, 188, 440, 359, 326, 280, 388, 417, 227, 212,
	213, 256, 358, 246, 198, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 0, 0, 459, 731,
	721, 713, 714, 715, 716, 717, 718, 0, 733, 734,
	735, 736, 737, 452, 727, 0, 712, 719, 720, 722,
	2042, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 158, 0, 159, 160, 161, 163, 164, 165, 635,
	166, 167, 168, 171, 172, 173, 175, 535, 176, 177,
	178, 179, 180, 181, 0, 637, 183, 184, 185, 186,
	187, 189, 191, 192, 193, 194, 195, 197, 199, 0,
	0, 0, 640, 0, 0, 0, 203, 204, 205, 206,
	207, 208, 0, 209, 210, 214, 216, 217, 218, 219,
	220, 221, 224, 0, 226, 228, 0, 229, 232, 0,
	233, 234, 235, 236, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 245, 0, 248, 249, 250, 251, 252,
	0, 253, 0, 0, 254, 255, 257, 258, 259, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 0, 273, 274, 275, 277, 0, 278, 279, 282,
	283, 284, 285, 0, 287, 0, 0, 288, 289, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 299, 0,
	301, 302, 303, 304, 305, 306, 307, 537, 309, 310,
	311, 312, 313, 314, 315, 0, 0, 316, 318, 319,
	0, 2040, 0, 653, 334, 335, 336, 337, 338, 339,
	340, 342, 0, 344, 345, 346, 0, 347, 348, 349,
	350, 0, 351, 352, 353, 354, 355, 357, 360, 361,
	362, 363, 0, 366, 367, 368, 369, 370, 371, 372,
	374, 375, 376, 378, 379, 380, 538, 381, 382, 383,
	384, 0, 386, 387, 539, 389, 390, 392, 393, 394,
	395, 396, 397, 554, 0, 399, 2045, 400, 401, 402,
	403, 404, 0, 406, 407, 408, 409, 410, 411, 414,
	415, 416, 418, 419, 0, 420, 421, 0, 423, 424,
	656, 426, 427, 428, 429, 430, 0, 555, 431, 0,
	432, 0, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 0, 443, 444, 445, 447, 448, 449, 450, 453,
	454, 455, 456, 457, 0, 458, 460, 462, 540, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 463, 464,
	2041, 331, 325, 281, 323, 324, 328, 329, 332, 2136,
	157, 0, 174, 0, 0, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 2033, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 2137, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2127, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 2128, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 617, 157, 0, 174, 0, 0, 223, 616, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 553, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 0, 0, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 553, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	260, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 2965, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 2320, 174, 0, 0, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 2738, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 0, 0, 223, 260, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	2495, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 0, 0, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	918, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 553, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	157, 0, 174, 0, 0, 223, 915, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	137, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 753, 166, 167, 168, 171, 172,
	173, 175, 138, 176, 752, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 140, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 141, 381, 382, 383, 384, 508, 386, 387, 139,
	389, 390, 392, 393, 394, 395, 396, 397, 750, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 133, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 142, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 157, 0, 174, 0, 0, 223, 619, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 534, 157, 0,
	174, 0, 0, 223, 260, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 530, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	532, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 531, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	260, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 3566, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 0, 0, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	137, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 138, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 140, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 141, 381, 382, 383, 384, 508, 386, 387, 139,
	389, 390, 392, 393, 394, 395, 396, 397, 2383, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 2384, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 142, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 0, 0, 223, 2189, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 0, 0, 223, 2115, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	2113, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 0, 0, 223, 2098, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 1725, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 0, 0, 223, 1685, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 0, 0, 223, 1000, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	844, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 837, 174, 0, 0, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 0, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	137, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 138, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 140, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 141, 381, 382, 383, 384, 508, 386, 387, 139,
	389, 390, 392, 393, 394, 395, 396, 397, 750, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 133, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 142, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 0, 0, 223, 701, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 0, 0, 223, 697, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	694, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 0, 0, 223, 678, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 624, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	556, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 508, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 555, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 0, 0, 223, 622, 475,
	0, 0, 320, 0, 373, 377, 0, 466, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 162, 556, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 298, 0, 515, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 0, 0, 0, 0,
	0, 200, 201, 322, 182, 330, 527, 493, 385, 343,
	341, 0, 308, 365, 522, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 490, 494, 492,
	488, 485, 489, 486, 487, 491, 247, 484, 0, 459,
	468, 502, 482, 510, 467, 507, 477, 222, 506, 471,
	470, 516, 497, 498, 452, 512, 483, 481, 474, 473,
	469, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	0, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 472, 0, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 476,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 478, 479, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 495, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	496, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 499, 500, 316, 318,
	319, 501, 503, 504, 0, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 505, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 508, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 509, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 511, 420, 421, 0, 423,
	424, 0, 426, 427, 428, 429, 430, 0, 555, 431,
	513, 432, 514, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	517, 518, 519, 520, 521, 523, 524, 525, 526, 463,
	464, 480, 331, 325, 281, 323, 324, 328, 329, 332,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	174, 0, 0, 223, 609, 475, 0, 0, 320, 0,
	373, 377, 0, 466, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 162, 556, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 298, 0, 515, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 0, 0, 0, 0, 0, 200, 201, 322,
	182, 330, 527, 493, 385, 343, 341, 0, 308, 365,
	522, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 490, 494, 492, 488, 485, 489, 486,
	487, 491, 247, 484, 0, 459, 468, 502, 482, 510,
	467, 507, 477, 222, 506, 471, 470, 516, 497, 498,
	452, 512, 483, 481, 474, 473, 469, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 0, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 472, 0, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 476, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 478,
	479, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 495, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 496, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 499, 500, 316, 318, 319, 501, 503, 504,
	0, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 505, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 508, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 509, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 511, 420, 421, 0, 423, 424, 0, 426, 427,
	428, 429, 430, 0, 555, 431, 513, 432, 514, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 517, 518, 519, 520,
	521, 523, 524, 525, 526, 463, 464, 480, 331, 325,
	281, 323, 324, 328, 329, 332, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 174, 0, 0, 223,
	586, 475, 0, 0, 320, 0, 373, 377, 0, 466,
	0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 162, 556, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 298, 0, 515,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 0, 0,
	0, 0, 0, 200, 201, 322, 182, 330, 527, 493,
	385, 343, 341, 0, 308, 365, 522, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 490,
	494, 492, 488, 485, 489, 486, 487, 491, 247, 484,
	0, 459, 468, 502, 482, 510, 467, 507, 477, 222,
	506, 471, 470, 516, 497, 498, 452, 512, 483, 481,
	474, 473, 469, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 0, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 472, 0, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 476, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 478, 479, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 495, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 496, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 499, 500,
	316, 318, 319, 501, 503, 504, 0, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 505,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 508, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 509,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 511, 420, 421,
	0, 423, 424, 0, 426, 427, 428, 429, 430, 0,
	555, 431, 513, 432, 514, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 463, 464, 480, 331, 325, 281, 323, 324, 328,
	329, 332, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 174, 0, 0, 223, 260, 475, 0, 0,
	320, 0, 373, 377, 0, 466, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 162, 556, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 298, 0, 515, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 0, 0, 0, 0, 0, 200,
	201, 322, 182, 330, 527, 493, 385, 343, 341, 0,
	308, 365, 522, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 490, 494, 492, 488, 485,
	489, 486, 487, 491, 247, 484, 0, 459, 468, 502,
	482, 510, 467, 507, 477, 222, 506, 471, 470, 516,
	497, 498, 452, 512, 483, 481, 474, 473, 469, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 0, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 472, 0, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 476, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 478, 479, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 495, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 496, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 499, 500, 316, 318, 319, 501,
	503, 504, 0, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 505, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	508, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 509, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 511, 420, 421, 0, 423, 424, 0,
	426, 427, 428, 429, 430, 0, 555, 431, 513, 432,
	514, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 517, 518,
	519, 520, 521, 523, 524, 525, 526, 463, 464, 480,
	331, 325, 281, 323, 324, 328, 329, 332, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 174, 0,
	0, 223, 260, 475, 0, 0, 320, 0, 373, 377,
	0, 466, 0, 0, 0, 0, 231, 0, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 162,
	137, 465, 131, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 298,
	0, 515, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	0, 0, 0, 0, 0, 200, 201, 322, 182, 330,
	527, 493, 385, 343, 341, 0, 308, 365, 522, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 490, 494, 492, 488, 485, 489, 486, 487, 491,
	247, 484, 0, 459, 468, 502, 482, 510, 467, 507,
	477, 222, 506, 471, 470, 516, 497, 498, 452, 512,
	483, 481, 474, 473, 469, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 0, 166, 167, 168, 171, 172,
	173, 175, 138, 176, 177, 178, 179, 180, 181, 472,
	0, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 476, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 478, 479, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	495, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 496, 301, 302, 303, 304, 305,
	306, 307, 140, 309, 310, 311, 312, 313, 314, 315,
	499, 500, 316, 318, 319, 501, 503, 504, 0, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 505, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 141, 381, 382, 383, 384, 508, 386, 387, 139,
	389, 390, 392, 393, 394, 395, 396, 397, 132, 0,
	399, 509, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 511,
	420, 421, 0, 423, 424, 0, 426, 427, 428, 429,
	430, 0, 133, 431, 513, 432, 514, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 142, 517, 518, 519, 520, 521, 523,
	524, 525, 526, 463, 464, 480, 331, 325, 281, 323,
	324, 328, 329, 332, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 174, 638, 0, 223, 260, 0,
	0, 0, 320, 0, 373, 377, 0, 0, 0, 0,
	0, 0, 231, 0, 643, 2039, 649, 0, 655, 0,
	442, 0, 645, 646, 651, 162, 728, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 0, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 0, 0, 385, 343,
	341, 0, 308, 365, 0, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 459,
	731, 721, 713, 714, 715, 716, 717, 718, 0, 733,
	734, 735, 736, 737, 452, 727, 0, 712, 719, 720,
	722, 2042, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 0, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 0, 0, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 0, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	0, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 0, 0, 316, 318,
	319, 0, 2040, 0, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 0, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 0, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 2045, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 0, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	0, 432, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	0, 0, 729, 0, 0, 0, 0, 0, 0, 463,
	464, 2041, 331, 325, 281, 323, 324, 328, 329, 332,
	157, 0, 174, 638, 0, 223, 260, 0, 0, 0,
	320, 0, 373, 377, 0, 0, 0, 0, 0, 0,
	231, 0, 643, 0, 649, 2360, 655, 0, 442, 0,
	645, 646, 651, 162, 728, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 2359, 0, 0, 170, 0,
	0, 0, 0, 647, 644, 648, 654, 642, 652, 639,
	650, 0, 364, 298, 0, 0, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 636, 641, 0, 657, 0, 200,
	201, 322, 182, 330, 0, 0, 385, 343, 341, 0,
	308, 365, 0, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 0, 0, 459, 731, 721,
	713, 714, 715, 716, 717, 718, 0, 733, 734, 735,
	736, 737, 452, 727, 0, 712, 719, 720, 722, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 635, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 0, 637, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 640, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 0, 0, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 0, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 0, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 0, 0, 316, 318, 319, 0,
	0, 0, 653, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 0, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	0, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 2045, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 0, 420, 421, 0, 423, 424, 656,
	426, 427, 428, 429, 430, 0, 555, 431, 0, 432,
	0, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 0, 0,
	729, 0, 0, 0, 0, 0, 0, 463, 464, 0,
	331, 325, 281, 323, 324, 328, 329, 332, 157, 0,
	174, 638, 0, 223, 260, 0, 0, 0, 320, 0,
	373, 377, 0, 0, 0, 0, 0, 0, 231, 0,
	643, 0, 649, 0, 655, 0, 442, 0, 645, 646,
	651, 162, 728, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 0, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 0, 0, 385, 343, 341, 3593, 308, 365,
	0, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 0, 459, 731, 721, 713, 714,
	715, 716, 717, 718, 0, 733, 734, 735, 736, 737,
	452, 727, 0, 712, 719, 720, 722, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 0, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 0,
	0, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 0, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 0, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 0, 0, 316, 318, 319, 0, 0, 0,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 0, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 0, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 0, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 0, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 0, 432, 0, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 463, 464, 0, 331, 325,
	281, 323, 324, 328, 329, 332, 157, 0, 174, 638,
	0, 223, 260, 0, 0, 0, 320, 0, 373, 377,
	0, 0, 0, 0, 0, 0, 231, 0, 643, 0,
	649, 0, 655, 0, 442, 0, 645, 646, 651, 162,
	728, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 647,
	644, 648, 654, 642, 652, 639, 650, 0, 364, 298,
	0, 0, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	636, 641, 0, 657, 0, 200, 201, 322, 182, 330,
	0, 0, 385, 343, 341, 3337, 308, 365, 0, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 459, 731, 721, 713, 714, 715, 716,
	717, 718, 0, 733, 734, 735, 736, 737, 452, 727,
	0, 712, 719, 720, 722, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 635, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 0,
	637, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 640, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 0, 0, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	0, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 0, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	0, 0, 316, 318, 319, 0, 0, 0, 653, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 0, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 0, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 0, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 0,
	420, 421, 0, 423, 424, 656, 426, 427, 428, 429,
	430, 0, 555, 431, 0, 432, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 463, 464, 0, 331, 325, 281, 323,
	324, 328, 329, 332, 157, 0, 174, 638, 0, 223,
	260, 0, 0, 0, 320, 0, 373, 377, 0, 0,
	0, 0, 0, 0, 231, 0, 643, 0, 649, 0,
	655, 0, 442, 0, 645, 646, 651, 162, 728, 465,
	536, 0, 0, 0, 327, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 647, 644, 648,
	654, 642, 652, 639, 650, 0, 364, 298, 0, 0,
	391, 169, 215, 202, 244, 286, 398, 0, 0, 276,
	446, 211, 300, 0, 190, 333, 0, 422, 297, 0,
	405, 425, 0, 317, 196, 356, 412, 413, 636, 641,
	0, 657, 0, 200, 201, 322, 182, 330, 0, 0,
	385, 343, 341, 0, 308, 365, 0, 0, 0, 230,
	0, 225, 321, 461, 188, 440, 359, 326, 280, 388,
	417, 227, 212, 213, 256, 358, 246, 198, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 0,
	0, 459, 731, 721, 713, 714, 715, 716, 717, 718,
	0, 733, 734, 735, 736, 737, 452, 727, 0, 712,
	719, 720, 722, 0, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 158, 0, 159, 160, 161, 163,
	164, 165, 635, 166, 167, 168, 171, 172, 173, 175,
	535, 176, 177, 178, 179, 180, 181, 0, 637, 183,
	184, 185, 186, 187, 189, 191, 192, 193, 194, 195,
	197, 199, 0, 0, 0, 640, 0, 0, 0, 203,
	204, 205, 206, 207, 208, 0, 209, 210, 214, 216,
	217, 218, 219, 220, 221, 224, 0, 226, 228, 0,
	229, 232, 0, 233, 234, 235, 236, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 245, 0, 248, 249,
	250, 251, 252, 0, 253, 0, 0, 254, 255, 257,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 0, 273, 274, 275, 277, 0,
	278, 279, 282, 283, 284, 285, 0, 287, 0, 0,
	288, 289, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 299, 0, 301, 302, 303, 304, 305, 306, 307,
	537, 309, 310, 311, 312, 313, 314, 315, 0, 0,
	316, 318, 319, 0, 0, 0, 653, 334, 335, 336,
	337, 338, 339, 340, 342, 0, 344, 345, 346, 0,
	347, 348, 349, 350, 0, 351, 352, 353, 354, 355,
	357, 360, 361, 362, 363, 0, 366, 367, 368, 369,
	370, 371, 372, 374, 375, 376, 378, 379, 380, 538,
	381, 382, 383, 384, 0, 386, 387, 539, 389, 390,
	392, 393, 394, 395, 396, 397, 554, 0, 399, 2045,
	400, 401, 402, 403, 404, 0, 406, 407, 408, 409,
	410, 411, 414, 415, 416, 418, 419, 0, 420, 421,
	0, 423, 424, 656, 426, 427, 428, 429, 430, 0,
	555, 431, 0, 432, 0, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 0, 443, 444, 445, 447, 448,
	449, 450, 453, 454, 455, 456, 457, 0, 458, 460,
	462, 540, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 463, 464, 0, 331, 325, 281, 323, 324, 328,
	329, 332, 157, 0, 174, 638, 0, 223, 260, 0,
	0, 0, 320, 0, 373, 377, 0, 0, 0, 0,
	0, 0, 231, 0, 643, 0, 649, 0, 655, 0,
	442, 0, 645, 646, 651, 162, 728, 465, 536, 0,
	0, 0, 327, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 647, 644, 648, 654, 642,
	652, 639, 650, 0, 364, 298, 0, 0, 391, 169,
	215, 202, 244, 286, 398, 0, 0, 276, 446, 211,
	300, 0, 190, 333, 0, 422, 297, 0, 405, 425,
	0, 317, 196, 356, 412, 413, 636, 641, 0, 657,
	0, 200, 201, 322, 182, 330, 0, 0, 385, 343,
	341, 0, 308, 365, 0, 0, 0, 230, 0, 225,
	321, 461, 188, 440, 359, 326, 280, 388, 417, 227,
	212, 213, 256, 358, 246, 198, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 0, 0, 459,
	731, 721, 713, 714, 715, 716, 717, 718, 0, 733,
	734, 735, 736, 737, 452, 727, 0, 712, 719, 720,
	722, 0, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 158, 0, 159, 160, 161, 163, 164, 165,
	635, 166, 167, 168, 171, 172, 173, 175, 535, 176,
	177, 178, 179, 180, 181, 0, 637, 183, 184, 185,
	186, 187, 189, 191, 192, 193, 194, 195, 197, 199,
	0, 0, 0, 640, 0, 0, 0, 203, 204, 205,
	206, 207, 208, 0, 209, 210, 214, 216, 217, 218,
	219, 220, 221, 224, 0, 226, 228, 0, 229, 232,
	0, 233, 234, 235, 236, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 245, 0, 248, 249, 250, 251,
	252, 0, 253, 0, 0, 254, 255, 257, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 0, 273, 274, 275, 277, 0, 278, 279,
	282, 283, 284, 285, 0, 287, 0, 0, 288, 289,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 299,
	0, 301, 302, 303, 304, 305, 306, 307, 537, 309,
	310, 311, 312, 313, 314, 315, 0, 0, 316, 318,
	319, 0, 0, 0, 653, 334, 335, 336, 337, 338,
	339, 340, 342, 0, 344, 345, 346, 0, 347, 348,
	349, 350, 0, 351, 352, 353, 354, 355, 357, 360,
	361, 362, 363, 0, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 378, 379, 380, 538, 381, 382,
	383, 384, 0, 386, 387, 539, 389, 390, 392, 393,
	394, 395, 396, 397, 554, 0, 399, 0, 400, 401,
	402, 403, 404, 0, 406, 407, 408, 409, 410, 411,
	414, 415, 416, 418, 419, 0, 420, 421, 0, 423,
	424, 656, 426, 427, 428, 429, 430, 0, 555, 431,
	0, 432, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 0, 443, 444, 445, 447, 448, 449, 450,
	453, 454, 455, 456, 457, 0, 458, 460, 462, 540,
	0, 0, 729, 0, 0, 0, 0, 0, 0, 463,
	464, 0, 331, 325, 281, 323, 324, 328, 329, 332,
	157, 0, 174, 638, 0, 223, 739, 0, 0, 0,
	320, 0, 373, 377, 0, 0, 0, 0, 0, 0,
	231, 0, 643, 0, 649, 0, 655, 0, 442, 0,
	645, 646, 651, 162, 728, 465, 536, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 647, 644, 648, 654, 642, 652, 639,
	650, 0, 364, 298, 0, 0, 391, 169, 215, 202,
	244, 286, 398, 0, 0, 276, 446, 211, 300, 0,
	190, 333, 0, 422, 297, 0, 405, 425, 0, 317,
	196, 356, 412, 413, 636, 641, 0, 657, 0, 200,
	201, 322, 182, 330, 0, 0, 385, 343, 341, 0,
	308, 365, 0, 0, 0, 230, 0, 225, 321, 461,
	188, 440, 359, 326, 280, 388, 417, 227, 212, 213,
	256, 358, 246, 198, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 247, 0, 0, 459, 731, 721,
	713, 714, 715, 716, 717, 718, 0, 733, 734, 735,
	736, 737, 452, 727, 0, 712, 719, 720, 722, 0,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	158, 0, 159, 160, 161, 163, 164, 165, 635, 166,
	167, 168, 171, 172, 173, 175, 535, 176, 177, 178,
	179, 180, 181, 0, 637, 183, 184, 185, 186, 187,
	189, 191, 192, 193, 194, 195, 197, 199, 0, 0,
	0, 640, 0, 0, 0, 203, 204, 205, 206, 207,
	208, 0, 209, 210, 214, 216, 217, 218, 219, 220,
	221, 224, 0, 226, 228, 0, 229, 232, 0, 233,
	234, 235, 236, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 245, 0, 248, 249, 250, 251, 252, 0,
	253, 0, 0, 254, 255, 257, 258, 259, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	0, 273, 274, 275, 277, 0, 278, 279, 282, 283,
	284, 285, 0, 287, 0, 0, 288, 289, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 299, 0, 301,
	302, 303, 304, 305, 306, 307, 537, 309, 310, 311,
	312, 313, 314, 315, 0, 0, 316, 318, 319, 0,
	0, 0, 653, 334, 335, 336, 337, 338, 339, 340,
	342, 0, 344, 345, 346, 0, 347, 348, 349, 350,
	0, 351, 352, 353, 354, 355, 357, 360, 361, 362,
	363, 0, 366, 367, 368, 369, 370, 371, 372, 374,
	375, 376, 378, 379, 380, 538, 381, 382, 383, 384,
	0, 386, 387, 539, 389, 390, 392, 393, 394, 395,
	396, 397, 554, 0, 399, 0, 400, 401, 402, 403,
	404, 0, 406, 407, 408, 409, 410, 411, 414, 415,
	416, 418, 419, 0, 420, 421, 0, 423, 424, 656,
	426, 427, 428, 429, 430, 0, 555, 431, 0, 432,
	0, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	0, 443, 444, 445, 447, 448, 449, 450, 453, 454,
	455, 456, 457, 0, 458, 460, 462, 540, 0, 0,
	729, 0, 0, 0, 0, 0, 0, 463, 464, 0,
	331, 325, 281, 323, 324, 328, 329, 332, 157, 0,
	174, 638, 0, 223, 703, 0, 0, 0, 320, 0,
	373, 377, 0, 0, 0, 0, 0, 0, 231, 0,
	643, 0, 649, 0, 655, 0, 442, 0, 645, 646,
	651, 162, 728, 465, 536, 0, 0, 0, 327, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 647, 644, 648, 654, 642, 652, 639, 650, 0,
	364, 298, 0, 0, 391, 169, 215, 202, 244, 286,
	398, 0, 0, 276, 446, 211, 300, 0, 190, 333,
	0, 422, 297, 0, 405, 425, 0, 317, 196, 356,
	412, 413, 636, 641, 0, 657, 0, 200, 201, 322,
	182, 330, 0, 0, 385, 343, 341, 0, 308, 365,
	0, 0, 0, 230, 0, 225, 321, 461, 188, 440,
	359, 326, 280, 388, 417, 227, 212, 213, 256, 358,
	246, 198, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 0, 459, 731, 721, 713, 714,
	715, 716, 717, 718, 0, 733, 734, 735, 736, 737,
	452, 727, 0, 712, 719, 720, 722, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 158, 0,
	159, 160, 161, 163, 164, 165, 635, 166, 167, 168,
	171, 172, 173, 175, 535, 176, 177, 178, 179, 180,
	181, 0, 637, 183, 184, 185, 186, 187, 189, 191,
	192, 193, 194, 195, 197, 199, 0, 0, 0, 640,
	0, 0, 0, 203, 204, 205, 206, 207, 208, 0,
	209, 210, 214, 216, 217, 218, 219, 220, 221, 224,
	0, 226, 228, 0, 229, 232, 0, 233, 234, 235,
	236, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	245, 0, 248, 249, 250, 251, 252, 0, 253, 0,
	0, 254, 255, 257, 258, 259, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 0, 273,
	274, 275, 277, 0, 278, 279, 282, 283, 284, 285,
	0, 287, 0, 0, 288, 289, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 299, 0, 301, 302, 303,
	304, 305, 306, 307, 537, 309, 310, 311, 312, 313,
	314, 315, 0, 0, 316, 318, 319, 0, 0, 0,
	653, 334, 335, 336, 337, 338, 339, 340, 342, 0,
	344, 345, 346, 0, 347, 348, 349, 350, 0, 351,
	352, 353, 354, 355, 357, 360, 361, 362, 363, 0,
	366, 367, 368, 369, 370, 371, 372, 374, 375, 376,
	378, 379, 380, 538, 381, 382, 383, 384, 0, 386,
	387, 539, 389, 390, 392, 393, 394, 395, 396, 397,
	554, 0, 399, 0, 400, 401, 402, 403, 404, 0,
	406, 407, 408, 409, 410, 411, 414, 415, 416, 418,
	419, 0, 420, 421, 0, 423, 424, 656, 426, 427,
	428, 429, 430, 0, 555, 431, 0, 432, 0, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 0, 443,
	444, 445, 447, 448, 449, 450, 453, 454, 455, 456,
	457, 0, 458, 460, 462, 540, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 463, 464, 0, 331, 325,
	281, 323, 324, 328, 329, 332, 157, 0, 174, 638,
	0, 223, 260, 0, 0, 0, 320, 0, 373, 377,
	0, 0, 0, 0, 0, 0, 231, 0, 643, 0,
	649, 0, 655, 0, 442, 0, 645, 646, 651, 162,
	0, 465, 536, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 647,
	644, 648, 654, 642, 652, 639, 650, 0, 364, 298,
	0, 0, 391, 169, 215, 202, 244, 286, 398, 0,
	0, 276, 446, 211, 300, 0, 190, 333, 0, 422,
	297, 0, 405, 425, 0, 317, 196, 356, 412, 413,
	636, 641, 0, 657, 0, 200, 201, 322, 182, 330,
	0, 0, 385, 343, 341, 0, 308, 365, 0, 0,
	0, 230, 0, 225, 321, 461, 188, 440, 359, 326,
	280, 388, 417, 227, 212, 213, 256, 358, 246, 198,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 452, 0,
	0, 0, 0, 0, 0, 0, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 158, 0, 159, 160,
	161, 163, 164, 165, 635, 166, 167, 168, 171, 172,
	173, 175, 535, 176, 177, 178, 179, 180, 181, 0,
	637, 183, 184, 185, 186, 187, 189, 191, 192, 193,
	194, 195, 197, 199, 0, 0, 0, 640, 0, 0,
	0, 203, 204, 205, 206, 207, 208, 0, 209, 210,
	214, 216, 217, 218, 219, 220, 221, 224, 0, 226,
	228, 0, 229, 232, 0, 233, 234, 235, 236, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 245, 0,
	248, 249, 250, 251, 252, 0, 253, 0, 0, 254,
	255, 257, 258, 259, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 0, 273, 274, 275,
	277, 0, 278, 279, 282, 283, 284, 285, 0, 287,
	0, 0, 288, 289, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 299, 0, 301, 302, 303, 304, 305,
	306, 307, 537, 309, 310, 311, 312, 313, 314, 315,
	0, 0, 316, 318, 319, 0, 0, 0, 653, 334,
	335, 336, 337, 338, 339, 340, 342, 0, 344, 345,
	346, 0, 347, 348, 349, 350, 0, 351, 352, 353,
	354, 355, 357, 360, 361, 362, 363, 0, 366, 367,
	368, 369, 370, 371, 372, 374, 375, 376, 378, 379,
	380, 538, 381, 382, 383, 384, 0, 386, 387, 539,
	389, 390, 392, 393, 394, 395, 396, 397, 554, 0,
	399, 0, 400, 401, 402, 403, 404, 0, 406, 407,
	408, 409, 410, 411, 414, 415, 416, 418, 419, 0,
	420, 421, 0, 423, 424, 656, 426, 427, 428, 429,
	430, 0, 555, 431, 0, 432, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 0, 443, 444, 445,
	447, 448, 449, 450, 453, 454, 455, 456, 457, 0,
	458, 460, 462, 540, 0, 0, 86, 0, 0, 0,
	0, 72, 0, 463, 464, 84, 331, 325, 281, 323,
	324, 328, 329, 332, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	88, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 90, 0, 0, 94, 0, 91,
	0, 0, 0, 0, 74, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75,
}

var yyPact = [...]int32{
	288, -1000, -64, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1842, 513, 2343, 55144, 3889, 1863, 50304, 38666, -1000, 1867,
	432, 2321, 33606, -75, 49798, 39678, 178, 288, 1990, 33606,
	2041, 1987, 432, 39678, -1000, 813, 1138, 1048, 2344, 49292,
	39678, 21964, 39678, 1826, 48786, 1862, -1000, -1000, 550, 514,
	-1000, -1000, 33100, 38160, 48280, 47774, 401, 1460, 28580, 39678,
	39678, 39678, 39678, 28580, 25543, 1087, 1252, 47268, 28580, 39678,
	28580, 39678, 39678, 39678, 39678, 39678, 465, 25543, 25543, 39678,
	39678, 1825, 39678, -1000, 46762, 46256, 45750, 54226, 53738, 2457,
	-1000, -1000, -1000, 396, 1454, -1000, -1000, -1000, 1821, 1026,
	463, -1000, 1086, -1000, -1000, -1000, -1000, -1000, -1000, 392,
	-1000, 45244, 37654, 1154, -1000, -1000, 542, 2229, 2543, 2543,
	2339, 27568, 326, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2228, 1091, 1343, -23, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 77, 74, 1867, 11734, 11734, -1000, 1980, -1000,
	-53, -1000, -28, 28074, -1000, -1000, -1000, 197, -78, 39678,
	-1000, 196, -1000, -78, 13795, -1000, 39678, 1777, 44738, 33606,
	33606, 66, -1000, 88, 44232, 39678, 386, 2454, 28580, 28580,
	39678, 451, 28580, 1065, 1327, -1000, 2371, 2470, -41, 119,
	-1000, -24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 575, 963, 553, 2368,
	378, -1000, -1000, -1000, -1000, 5485, 2425, 2291, 4861, 2423,
	2290, 7072, 2422, 7024, 2418, 37148, 36642, 1535, 911, 195,
	-1000, -28, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 905, 904,
	900, 1226, 880, 195, 864, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 39678, 39678, 39678, 1979, 2417, 863,
	845, 837, 833, 831, 821, 1976, 1974, 39678, 818, 811,
	806, 805, 940, 1121, 2415, 234, -1000, 2412, 238, -1000,
	1973, 2411, 237, 2410, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -45, -1000, -1000, -1000, -1000, -1000, 194, 1390, 193,
	193, 193, -1000, -1000, -1000, -1000, -1000, 10, 7, -1000,
	-1000, 1381, 192, 1381, 1381, -1000, 1387, 1381, 237, 2409,
	43726, -1000, 1534, -1000, 938, -1000, -1000, -1000, 2454, -1000,
	1323, -1000, 2493, 26556, 232, 2543, -1000, 1069, 809, -1000,
	1257, 1639, 16886, 16371, 39678, 1426, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1288, -1000, 1064, -1000, -1000,
	-1000, 1986, -172, -1000, 8093, -1000, -1000, 13795, 13795, 13795,
	13795, -1000, -1000, -1000, 10703, -1000, -1000, -28, 191, 72,
	-1000, -1000, 190, -1000, 177, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, 13795, -1000, 189, -1000, 188, 279, 187, -1000,
	-28, -1000, 7573, 13795, -1000, 39678, 13795, 39678, -78, 2497,
	39678, -71, 6599, 1489, 2496, 27062, -1000, 39678, 1902, 1900,
	2214, 2043, 39678, 385, 2363, 88, 39678, 43220, -1000, 186,
	186, 1245, 39678, 184, 797, -1000, 25543, 2452, 2407, 53250,
	-1000, -30, 9142, -1000, 9142, 21964, -1000, 293, 39678, 39678,
	39678, 39678, -1000, 39678, 2404, 42714, -171, -1000, 767, -1000,
	952, 951, 30081, 640, 636, 1649, 446, 1972, 982, 493,
	39678, 1293, 39678, 1636, 2207, 106, 1169, 728, -1000, 181,
	33606, 578, -171, -1000, 2206, 950, 39678, 577, -171, 2202,
	39678, -171, 783, 39678, 6891, 2403, 2289, 6830, 2402, 39678,
	2201, -1000, 62, -28, 2197, 2193, 2188, 1738, -1000, 1732,
	2319, 721, 1648, 2185, -1000, 2184, 803, 1899, 1888, 39678,
	39678, 2181, 2180, 2179, 2177, 2174, 2173, 39678, 39678, 802,
	2172, 2171, 2170, 2165, 39678, 39678, 39678, 39678, 1473, 1431,
	1429, 39678, 39678, -1000, -1000, -1000, 39678, 39678, -1000, 39678,
	39678, 53250, -1000, 53250, -1000, -27, 13795, -1000, 2512, -1000,
	-1000, -1000, -1000, 2512, -1000, 2233, 2224, 2512, -1000, 179,
	-1000, 2512, -1000, -1000, 1381, 1381, -1000, -1000, 53250, 234,
	2401, -1000, -1000, -1000, -1000, -1000, 39678, 2493, 469, -1000,
	-1000, 1335, -1000, -1000, 968, -1000, -1000, -1000, -1000, -79,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2536,
	2535, -1000, -1000, -79, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2036, 39678, 11734, 53250, 13795, 13795, 13795, 13795, 13795, 13795,
	13795, 13795, 13795, 13795, 13795, 13795, 13795, 13795, 2285, -1000,
	-1000, 13795, 2257, 13795, 39678, 2223, 13795, 2161, 159, 2158,
	9142, -1000, 177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 511, 511, 1367, 558,
	-28, 6544, -94, -33, 178, -28, -1000, -1000, -1000, 12250,
	13795, 21964, -28, 2240, 6599, -1000, 13280, 11219, 2036, 13795,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6434, -242, 60,
	-72, -1000, 1924, -73, 13795, -1000, 13795, 13795, 2285, 13795,
	13795, 39678, 2223, 2161, 159, 2158, 177, 1971, -1000, 1734,
	24531, 1856, 39678, 221, -1000, 216, 39678, -1000, -1000, 2026,
	19940, 19940, 1655, 1655, -1000, -1000, -76, -1000, 30587, 39678,
	1633, 2400, 2327, 168, 1969, 2362, -1000, 7026, 31599, 5080,
	839, -1000, -1000, 1631, 1356, 119, -1000, 29592, 39678, 377,
	-1000, -1000, -1000, -1000, -1000, -1000, 1054, 39678, -1000, 9142,
	-1000, -77, -1000, 215, -1000, 39678, 167, 119, 119, 119,
	119, 119, -1000, 39678, 2491, 2361, 88, 4347, 39678, 39678,
	39678, -1000, 39678, 39678, -1000, 2352, 42208, -1000, 53250, 39678,
	-1000, 166, 1920, 347, 345, 1884, 36136, 39678, 41702, 41196,
	39678, 611, -1000, -1000, 1024, 39678, -1000, 9142, 39678, 32594,
	552, 528, 39678, 1056, 32088, 39678, 1052, -1000, 39678, 713,
	-1000, -1000, 25543, -1000, 1893, 1049, 9654, 3687, 39678, 39678,
	39678, 6731, 39678, 39678, 6667, 39678, 39678, 5727, -171, 781,
	39678, 561, -171, 776, 33606, 800, 39678, -1000, 39678, 39678,
	39678, 39678, 39678, -1000, 2286, 40690, 13795, 2284, -1000, 39678,
	-1000, 165, 2283, 39678, 39678, 25543, 2156, 39678, 39678, 795,
	1966, 39678, 39678, 39678, 39678, 39678, 39678, 788, 787, 2128,
	25543, 25543, 39678, 39678, 772, 764, 762, 754, 39678, 39678,
	2543, 2441, 2543, 234, -1000, 238, -1000, 2346, 1965, -1000,
	237, -1000, -84, 57, 56, 2225, 2103, 53, 13795, 52,
	-1000, -1000, 237, -1000, 39678, 2333, 1335, -1000, -1000, 658,
	785, -1000, 17401, -1000, -1000, -1000, -1000, 2023, 19940, -1000,
	-1000, -1000, -85, -85, -60, -60, -60, -1000, 317, 317,
	317, 317, 317, 317, 1367, 504, -1000, 2282, 1250, 13795,
	13795, 2155, 159, 2111, 1238, -1000, 2057, -1000, 558, 15340,
	15340, -1000, -1000, -1000, 10703, 13795, -1000, -1000, -1000, 13795,
	-137, -183, -1000, -1000, -91, 49, 1442, -1000, 13795, -1000,
	-98, -1000, -1000, -96, 13795, 13795, 13795, -1000, 6599, 2521,
	-1000, 2023, -103, -1000, 13795, -1000, -1000, 156, -1000, 1859,
	-1000, 6599, 1750, 1745, 1427, -1000, -1000, -104, -1000, -1000,
	-1000, -1000, 2026, 27062, 13795, -105, -1000, -28, 1750, 14310,
	-101, 2195, 34618, 34618, 21458, -1000, 19434, 34618, 34618, 34618,
	226, 2032, 152, 149, -28, -1000, 2048, 1754, -1000, 1754,
	39678, -1000, 48, -97, -1000, -1000, -1000, -1000, 39678, 110,
	39678, 39678, 2490, 106, 39678, 33606, 2394, 51298, 922, 5080,
	-1000, 2543, 27568, 1581, -1000, -1000, 1961, -1000, -1000, -1000,
	-1000, 702, 1162, -1000, 1073, 484, 484, 39678, -1000, 39678,
	40184, -1000, -106, -1000, -1000, 700, 52762, 50810, -1000, 977,
	-1000, -1000, -1000, -45, -1000, 54714, 922, 2276, 1983, -1000,
	-1000, -1000, 1630, -1000, -1000, 839, -1000, 45, -256, 2017,
	-108, -1000, -1000, -1000, 206, 88, 39678, 2452, 829, 1325,
	-1000, 1307, -1000, -1000, 9142, 10166, 41, -99, -1000, 53250,
	2543, -1000, -1000, -1000, -1000, -1000, 537, 432, 2391, 1877,
	-1000, -1000, 2109, 2105, 1663, 1458, 2390, -1000, 2351, 568,
	834, 13795, 147, -1000, 2308, 1137, 494, 143, 141, 39678,
	1156, 1770, -1000, 2387, 2346, 2385, 2346, -1000, -1000, -1000,
	35630, -1000, -109, -1000, -25, -1000, -1000, -1000, -1000, 39678,
	39678, 39678, 39678, -1000, 699, -1000, -1000, -1000, -1000, 691,
	-1000, 1043, -1000, -1000, -1000, -1000, -1000, 1134, 685, -110,
	-1000, -1000, 9142, 9142, 9142, 2543, -1000, -171, -1000, 723,
	1266, -1000, -1000, -171, 2104, 1263, -1000, -171, 2102, -1000,
	2098, -171, 751, 39678, 39678, 5652, 39678, 39678, 39678, 5513,
	2097, -1000, -1000, -1000, -1000, -1000, 2096, -1000, 2346, 2384,
	6599, -1000, 746, 13795, -1000, -1000, -1000, -1000, 39678, 750,
	747, 2095, 39678, -1000, -1000, -1000, -1000, -1000, -1000, 2093,
	2092, 39678, -1000, -1000, -1000, -1000, 2091, 2089, 2088, 2087,
	-1000, 2085, 2083, 2543, 2349, -1000, -1000, -1000, -1000, 39678,
	-1000, -1000, -1000, 228, -1000, -1000, 228, -111, -1000, -1000,
	234, -1000, 1115, 232, -1000, -1000, -1000, -1000, -1000, 13795,
	-101, -1000, 13795, 1102, 594, 15340, 15340, -1000, 13795, 13795,
	13795, 1072, -1000, 15340, 15340, 976, -116, 436, -28, 6362,
	-1000, -1000, 174, -1000, -1000, 1228, -1000, 13795, 6305, -1000,
	-1000, 40, 12765, -1000, -147, -147, 13795, 13795, -1000, -1000,
	171, 6599, 432, -1000, -1000, 11734, 466, 432, 497, 39678,
	-28, 1750, -1000, 6599, 208, 39678, -1000, 6599, 1627, 19940,
	1932, 1915, 19940, 1917, 1906, 1906, 1906, -1000, -1000, -1000,
	39678, 140, -1000, 34618, 34618, 34618, 34618, 26049, 35, 2195,
	-1000, -1000, -1000, -1000, 1611, 138, 18928, 13795, -28, 13795,
	715, -1000, -1000, -1000, 1886, -1000, 1125, 30587, -1000, 942,
	31093, 110, 371, 432, -1000, -121, 1884, 39678, 5080, 137,
	1960, -1000, -45, -1000, -1000, 1347, 13795, -1000, -1000, -151,
	-1000, -164, 439, 2275, 1159, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1321, 651, -1000, 50810, 13795, 13795, 52762,
	-1000, 52762, -1000, -1000, -58, -41, -1000, 39678, 839, 39678,
	1967, -1000, -1000, 2016, 50810, 50810, -1000, 2547, 10166, 2327,
	136, 25543, 2452, -1000, 39678, -1000, -1000, 39678, 1452, -1000,
	2345, 342, 134, 15340, 39678, 1476, -1000, 1236, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 133, 2536, 2535,
	-1000, 39678, 2322, 30, -169, -1000, -1000, 39678, 2333, 39678,
	2327, 39678, 39678, 39678, -1000, 1845, -1000, -1000, -1000, 39678,
	2383, 1299, -1000, 35124, -1000, 1884, 6248, 39678, 1365, -1000,
	2302, 39678, 39678, -1000, 39678, 20446, -1000, -1000, 1573, 1142,
	106, 1182, 1051, 430, -1000, -1000, 715, 586, 1365, 39678,
	-1000, 39678, -1000, -1000, -1000, -1000, -1000, 9142, 10166, 9142,
	-1000, -1000, -1000, -1000, -1000, -1000, 682, 39678, -1000, -1000,
	9654, -1000, -1000, -1000, -1000, -1000, 39678, 39678, 39678, 555,
	2015, 39678, 549, 2011, 39678, 39678, 39678, 39678, -1000, 2079,
	-171, 736, 1237, -1000, 2077, -171, 696, 39678, 39678, -1000,
	39678, -1000, 6088, 1365, -1000, 2076, 2075, 39678, 743, 39678,
	39678, -1000, 39678, 39678, 39678, 39678, 39678, 2543, 1339, 2382,
	2346, -1000, -1000, -1000, -1000, -1000, 1271, 6599, 653, 13795,
	13795, 719, 687, 325, 653, 732, 13795, 53250, 15340, 15340,
	15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340, 15340,
	498, 498, 13795, -1000, 13795, -1000, -1000, -1000, 6599, 13795,
	-1000, 13795, -1000, 22, 20, 13795, 12, 6599, 6599, -1000,
	11, -172, 1688, 20446, 1644, -1000, -1000, 1734, -1000, -1000,
	13795, -1000, 39678, 2195, 19940, 19940, 2099, 1912, 19940, -1000,
	-1000, -1000, -1000, 131, 39678, -1000, -1000, -1000, -1000, 34618,
	-1000, 28580, 1583, 130, -176, 5986, 5902, 121, -1000, -1000,
	715, 1438, -1000, 942, 126, -1000, 1177, 1877, -1000, 2010,
	-122, -1000, -1000, -1000, 2338, 1663, 30587, 39678, 1623, 2329,
	2327, 125, 1959, 922, 54714, 2273, -1000, 6599, 2543, 1566,
	53250, 1114, -1000, -1000, -1000, 6599, 6599, -1000, -1000, 425,
	-51, 753, -1000, -198, 39678, 50810, -1000, -123, -1000, 206,
	-1000, 2489, 39678, -1000, 847, -1000, -1000, -1000, 2332, 2332,
	13795, 925, 88, 2488, -1000, 2312, -1000, -1000, 21964, -1000,
	-1000, 39678, -1000, 2543, -1000, -1000, 2485, 478, -1000, -1000,
	-1000, 2053, -1000, 39678, 303, -1000, 34112, -1000, -1000, -1000,
	-126, -1000, 662, -1000, 1222, 1130, -1000, -1000, -134, 1365,
	-144, -145, -1000, 2337, 453, 2314, 13795, 2271, 2438, 2431,
	-1000, -1000, 1476, 2265, 2482, 474, -1000, -1000, -1000, 53250,
	484, -1000, 1283, 2008, -1000, 484, 484, 2007, 1017, 715,
	715, -1000, -1000, 1476, -1000, 1291, 53250, 484, 474, 2346,
	2346, -1000, -1000, 203, -1000, -1000, -1000, -1000, 2072, 2067,
	39678, 25543, -1000, 39678, 25543, -1000, -1000, -1000, 2058, 39678,
	39678, 39678, 538, 2005, 39678, 39678, 39678, -1000, -1000, 2346,
	-1000, 39678, 39678, -1000, 2055, -1000, -1000, -1000, -1000, -1000,
	-1000, 2346, -1000, 2543, 2543, -1000, -1000, -1000, 653, 653,
	13795, 13795, 13795, 653, -1000, -136, -136, -61, -61, -61,
	-1000, 498, 498, 498, 498, 498, 498, 653, 653, 6599,
	-1000, -1000, -1000, -1000, 1803, 1672, -149, -1000, 39678, 1422,
	6599, -1000, -1000, -1000, 2099, -1000, 122, 13795, 19940, -1000,
	39678, -150, -1000, -152, -1000, 2480, 1621, 18422, 14825, 13795,
	-1000, -1000, 1404, 1807, -1000, 2374, 2374, 1775, -1000, 1773,
	9142, 121, 2543, 1877, 39678, 1784, 1784, 1541, 39678, -1000,
	31093, 1307, 290, 942, -1, 110, 39678, -1000, 692, 2479,
	20446, 33606, -1000, -156, -1000, 52762, -1000, 1112, 1962, -1000,
	424, -1000, -1000, -1000, 419, 1560, 483, 2030, -157, -1000,
	432, -173, 2452, -1000, 2261, 1880, 119, 1880, 5550, 1032,
	229, -1000, -12, -1000, -1000, 432, -1000, 39678, 118, 116,
	115, -1000, -1000, 114, -1000, -1000, 1365, 1152, -1000, -1000,
	-1000, -1000, -1000, 1152, 763, 1152, 20446, 22494, -1000, 39678,
	39678, -1000, 4083, -1000, 2378, 2377, -1000, -1000, 113, -1000,
	-1000, -1000, 2512, 2512, -1000, -1000, -1000, -1000, -1000, 484,
	-1000, -1000, -1000, 39678, 39678, 484, 484, 2478, 2322, -1000,
	-1000, -1000, -1000, 10166, 39678, 39678, 965, 274, -1000, 965,
	264, 39678, -1000, -1000, 2054, 39678, 25543, -1000, -1000, 2052,
	-1000, 1365, -1000, -1000, 39678, -1000, -1000, -1000, 653, 653,
	653, -13, 1796, 1809, 1766, -1000, 2023, 20446, -1000, 432,
	-1000, 39678, 6599, -1000, -192, -1000, 226, 28580, -1000, 112,
	39678, 1999, 17916, 1439, -193, -1000, 395, 15340, 4698, 1441,
	-1000, -1000, 1701, 13795, 1697, -1000, 1704, -1000, -1000, -1000,
	2470, 2470, -1000, -1000, 2470, 2470, 1589, 2543, -199, -1000,
	15855, 2023, -1000, 1541, -200, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1948, 106,
	339, 111, -1000, -1000, 1877, 1125, 942, 110, 316, 250,
	246, 432, -207, 1884, 54714, 5080, -1000, -1000, -1000, -135,
	-1000, -1000, 53250, -1000, 2239, 1235, 483, -1000, 1055, -1000,
	-1000, -1000, 39678, -1000, 2329, 2327, -1000, 1133, -1000, -1000,
	985, 1949, 1009, 99, 13795, -1000, 2333, -1000, 29086, 13795,
	13795, 1307, 9142, 2332, 108, 2332, 39678, 2332, -1000, -1000,
	107, 1778, 106, -1000, 2314, -1000, -1000, 13795, -1000, -1000,
	-1000, -1000, -1000, 1160, 1883, -1000, -1000, -1000, -1000, -1000,
	535, 25543, -1000, 503, -1000, 39678, 965, 233, 39678, -1000,
	-1000, -1000, 39678, 1788, 1783, 27062, -1000, -1000, -1000, -210,
	-1000, -1000, -1000, 39678, -213, -1000, 52274, -1000, 1439, 1999,
	-1000, -1000, 14825, -195, 9142, 925, 1588, 39678, 39678, 1702,
	6599, 1699, 1998, 2543, 2543, 2543, 2543, 24025, 2248, 23519,
	-1000, -1000, 9142, -1000, -1000, -1000, -1000, -1000, 25037, -1000,
	1948, 39678, -1000, 478, 1295, -1000, -1000, 20952, 1307, 1541,
	942, 1877, 1663, -1000, 315, 312, 2329, 1146, 105, -1000,
	922, -1000, -1000, 1217, 103, 668, -1000, -1000, 2470, -1000,
	-1000, 1341, -1000, -1000, 2466, 502, -1000, 1127, -1000, 1953,
	1952, 1764, -1000, -1000, -1000, -1000, 3595, 3720, -1000, -217,
	-1000, 2512, -220, -221, -225, -1000, 1880, 39678, 1880, 88,
	1880, 21964, 235, -1000, -1000, 1778, -1000, 1297, 99, -1000,
	13795, 39678, -1000, 39678, -1000, -1000, 500, -1000, 213, 1996,
	1995, 241, 2465, -231, -1000, 39678, 1717, 1610, -1000, -1000,
	17916, -1000, 1620, 13795, -1000, -1000, -1000, -1000, 1681, 1763,
	-1000, -1000, 1660, 522, 1708, -1000, -1000, -1000, -1000, -198,
	-1000, 23013, -198, -1000, -1000, -233, -1000, -1000, 478, -1000,
	-1000, 1336, -237, -1000, 453, 2314, 13795, 1948, 1877, 1541,
	942, -1000, -1000, -1000, 2345, 98, 20446, -1000, 1041, 13795,
	-1000, -1000, -1000, 39678, 1233, 432, 39678, -1000, -1000, 1753,
	-1000, 1756, 1364, 1364, 1278, -1000, 551, -1000, 29086, -1000,
	-1000, 2047, -1000, 9142, -1000, -238, -1000, 1032, 2023, -16,
	-1000, 1793, 235, -1000, -1000, 6599, 965, 965, 39678, 39678,
	39678, 39678, -1000, -1000, 39678, -1000, -1000, 1717, -1000, 15340,
	15340, 2062, -1000, 15340, -1000, 1583, 96, -196, -1000, 2463,
	-1000, 27062, -1000, -1000, 1734, 39678, 1832, 92, -1000, -1000,
	-198, -1000, -1000, 25037, -1000, -1000, 1601, 1598, -1000, 20952,
	39678, 39678, 748, 478, 1541, 1948, 1877, 2327, 20446, -244,
	28580, -1000, -1000, 641, -1000, -1000, 712, 2329, -1000, -1000,
	1361, -1000, -1000, 2264, -1000, -1000, -1000, -1000, -1000, 91,
	-1000, 1365, -1000, 1365, 1949, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 965, 1898, 172, 170, -1000, -1000, 925, 925,
	-1000, 925, 1619, 39172, 13795, 9142, -212, 1419, -245, -1000,
	13795, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2314, -1000,
	1948, 478, 1541, 478, -249, -1000, 1146, 89, -1000, 2239,
	-1000, -1000, 88, 88, 13795, -1000, 1365, -1000, 2348, 39678,
	39678, 39678, 39678, -250, -1000, 51786, 1594, -1000, -1000, 1830,
	1726, -251, 39678, 478, -1000, 1948, 2023, -1000, 20446, 2345,
	8630, 1205, -1000, -1000, -252, 1365, 2307, -1000, -1000, -1000,
	-255, 1643, 39172, 1606, 757, 2532, -1000, -1000, -1000, 1734,
	-1000, -1000, -1000, 478, -1000, -1000, 2327, -262, -1000, -1000,
	-1000, -1000, -1000, 1041, -1000, 2348, -1000, -20, 1945, 13795,
	-1000, -1000, -1000, -1000, -1000, -1000, 1574, -1000, -1000, 1533,
	1593, 1593, 2519, 1707, 1418, -1000, 478, -1000, 8630, 28580,
	1868, -1000, 1551, 6599, -1000, -1000, 1512, 1525, 1527, 1533,
	1643, -1000, 87, 39678, 1830, 2023, -1000, 86, 39678, -1000,
	1643, 1479, 1461, -1000, 1532, -1000, 1503, 1524, 1514, 1512,
	-1000, 39172, 1616, -1000, -1000, 8630, -1000, -1000, 1943, 1940,
	1937, -1000, -1000, 1494, -1000, 1491, -1000, 1643, -263, 84,
	-266, 1548, 1477, 1468, -1000, -1000, -1000, -1000, 39172, -1000,
	1643, -1000, 1445, 1443, -268, 1936, -1000, -1000, -1000, 1547,
	-1000,
}

var yyPgo = [...]int16{
	0, 2856, 2855, 2293, 122, 0, 138, 3173, 2854, 51,
	201, 239, 111, 482, 531, 2849, 238, 241, 1953, 374,
	45, 140, 2848, 2846, 2846, 2845, 243, 211, 160, 2840,
	206, 2839, 2838, 167, 2837, 2836, 255, 31, 1867, 2835,
	3973, 1897, 1826, 13, 2834, 2833, 2832, 2831, 2830, 228,
	2829, 198, 2827, 2824, 2822, 225, 162, 217, 224, 196,
	222, 345, 137, 396, 3420, 2821, 236, 104, 19, 153,
	2814, 2812, 2809, 2807, 2803, 2801, 2799, 2796, 2794, 2793,
	131, 180, 178, 200, 246, 23, 142, 440, 2792, 2791,
	2789, 2802, 59, 2788, 116, 2787, 232, 229, 163, 190,
	227, 2195, 259, 2783, 2782, 2781, 2775, 2774, 157, 155,
	2773, 2771, 2770, 2769, 46, 28, 2765, 2763, 185, 186,
	221, 2760, 223, 165, 6, 30, 159, 134, 2759, 2756,
	2755, 2752, 55, 96, 9, 2751, 2749, 58, 44, 2747,
	247, 2747, 2747, 2747, 2747, 2740, 219, 2739, 2736, 2735,
	136, 2733, 2732, 2731, 113, 2731, 52, 67, 2730, 41,
	318, 233, 139, 2729, 244, 40, 215, 2358, 188, 2728,
	250, 242, 248, 231, 194, 15, 2728, 164, 319, 2727,
	2726, 2725, 2725, 253, 220, 184, 179, 118, 151, 2724,
	257, 2721, 251, 2720, 2718, 2715, 2714, 237, 70, 82,
	2713, 174, 2710, 95, 2709, 2708, 102, 226, 26, 53,
	2706, 47, 117, 36, 77, 2705, 78, 218, 2, 17,
	21, 2704, 177, 2702, 25, 2701, 7, 1, 2699, 3,
	10, 5, 16, 2698, 2697, 161, 2696, 106, 2694, 182,
	141, 129, 2693, 124, 2692, 72, 49, 119, 2690, 2689,
	2688, 126, 32, 2687, 125, 2686, 146, 208, 2685, 2682,
	2681, 22, 48, 109, 66, 68, 64, 27, 93, 69,
	2680, 2679, 29, 86, 2677, 171, 114, 39, 88, 207,
	98, 2676, 20, 24, 12, 294, 108, 240, 235, 2675,
	35, 204, 2674, 2674, 2673, 2672, 135, 256, 33, 173,
	2671, 170, 2670, 2666, 2665, 34, 2665, 145, 2664, 57,
	2663, 56, 169, 2663, 115, 123, 2662, 209, 3024, 4281,
	2661, 202, 2660, 260, 85, 2659, 172, 154, 2658, 2657,
	149, 147, 112, 2656, 120, 2655, 2654, 2651, 2649, 2648,
	2641, 2637, 2635, 2632, 2631, 166, 2628, 2624, 183, 107,
	2623, 192, 189, 110, 2619, 1695, 213, 2618, 2617, 2617,
	2613, 8, 249, 2612, 176, 181, 100, 214, 2611, 94,
	2610, 2609, 212, 2608, 2607, 71, 2604, 2603, 175, 210,
	2599, 2598, 2596, 2592, 2578, 2575, 4, 90, 18, 11,
	2565, 2564, 42, 2562, 2561, 234, 191, 2560, 2558, 2557,
	2557, 2555, 2375, 2554, 230, 14, 2553,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 17,
	17, 283, 283, 318, 318, 318, 24, 24, 25, 25,
	26, 26, 27, 27, 37, 37, 37, 5, 5, 5,
	6, 6, 6, 6, 6, 8, 8, 7, 12, 12,
	13, 13, 319, 319, 23, 23, 15, 15, 400, 400,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 14,
	14, 16, 16, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 43, 43, 61, 63,
	62, 62, 62, 44, 44, 57, 57, 60, 60, 59,
	59, 59, 59, 58, 58, 45, 198, 361, 361, 87,
	87, 87, 87, 87, 87, 55, 55, 56, 56, 56,
	46, 47, 47, 50, 50, 49, 48, 48, 51, 51,
	51, 54, 54, 52, 52, 53, 85, 85, 68, 69,
	69, 69, 69, 69, 64, 64, 64, 66, 67, 81,
	81, 82, 82, 70, 70, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 77, 77, 73, 73,
	65, 65, 65, 65, 65, 65, 74, 75, 78, 79,
	76, 76, 76, 76, 83, 83, 83, 84, 84, 72,
	72, 91, 91, 93, 93, 94, 94, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 92,
	92, 86, 88, 89, 90, 97, 97, 96, 96, 98,
	98, 99, 101, 101, 100, 100, 102, 102, 102, 102,
	169, 169, 168, 168, 171, 171, 171, 171, 172, 172,
	173, 173, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 321, 321, 322, 322, 322, 323, 323,
	323, 184, 184, 184, 184, 184, 184, 185, 185, 185,
	185, 186, 186, 187, 187, 188, 188, 188, 189, 189,
	190, 190, 192, 193, 193, 193, 194, 194, 194, 195,
	195, 195, 196, 196, 175, 175, 176, 122, 122, 122,
	145, 178, 178, 177, 177, 177, 177, 179, 179, 180,
	180, 181, 181, 182, 182, 183, 183, 197, 197, 206,
	206, 202, 202, 203, 204, 204, 205, 205, 366, 200,
	200, 199, 199, 201, 212, 212, 214, 214, 213, 213,
	213, 213, 215, 215, 216, 216, 207, 207, 208, 208,
	209, 209, 209, 210, 210, 211, 211, 211, 211, 211,
	217, 222, 221, 221, 225, 225, 223, 223, 224, 227,
	227, 228, 228, 228, 228, 228, 228, 228, 228, 229,
	229, 229, 229, 226, 226, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 231, 231, 231, 231, 231, 232,
	232, 233, 233, 234, 234, 218, 218, 219, 219, 219,
	219, 219, 219, 220, 220, 103, 320, 320, 113, 113,
	113, 113, 113, 134, 134, 114, 114, 118, 104, 115,
	115, 120, 120, 119, 116, 116, 105, 191, 191, 106,
	117, 117, 107, 107, 139, 139, 140, 140, 146, 146,
	146, 147, 147, 148, 148, 150, 150, 151, 151, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 152, 152, 157, 158, 158, 158,
	158, 158, 158, 153, 153, 159, 165, 165, 165, 165,
	160, 160, 160, 160, 162, 162, 295, 295, 295, 295,
	295, 295, 295, 295, 294, 294, 294, 293, 293, 293,
	293, 293, 164, 164, 402, 402, 163, 163, 401, 401,
	349, 349, 141, 141, 142, 142, 143, 143, 144, 144,
	126, 126, 126, 126, 126, 135, 135, 136, 136, 127,
	127, 129, 130, 131, 131, 131, 131, 131, 124, 121,
	121, 121, 128, 128, 128, 155, 155, 156, 156, 132,
	132, 132, 133, 133, 125, 125, 137, 137, 137, 138,
	138, 138, 123, 123, 108, 108, 108, 108, 108, 108,
	297, 297, 297, 297, 297, 297, 297, 297, 235, 235,
	236, 236, 239, 239, 239, 242, 250, 250, 250, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 299,
	299, 300, 300, 301, 301, 302, 302, 237, 237, 238,
	238, 243, 243, 244, 244, 245, 245, 245, 245, 246,
	249, 249, 303, 303, 304, 304, 305, 10, 32, 240,
	254, 254, 255, 255, 255, 255, 258, 258, 258, 258,
	261, 261, 261, 307, 307, 310, 310, 312, 312, 312,
	312, 308, 308, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 403,
	403, 28, 28, 28, 306, 306, 309, 309, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 241, 241, 257,
	257, 257, 257, 257, 257, 257, 259, 259, 248, 248,
	247, 247, 263, 263, 262, 262, 262, 262, 267, 267,
	267, 267, 267, 264, 265, 266, 266, 266, 266, 266,
	268, 268, 269, 269, 270, 271, 271, 272, 272, 272,
	298, 298, 276, 276, 276, 276, 277, 277, 278, 278,
	279, 109, 109, 260, 260, 280, 280, 282, 282, 281,
	281, 284, 284, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 285, 285, 290, 290, 286, 286,
	11, 353, 353, 353, 353, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 288, 288, 288, 289,
	291, 291, 404, 404, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 333, 333, 333, 355,
	355, 355, 358, 358, 358, 358, 357, 357, 359, 359,
	334, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 293, 293, 293, 293, 293, 36,
	38, 39, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 252, 252, 253,
	253, 253, 253, 253, 253, 273, 274, 274, 275, 275,
	275, 275, 329, 329, 329, 329, 362, 362, 363, 363,
	364, 364, 364, 365, 365, 365, 365, 365, 367, 367,
	367, 367, 367, 368, 80, 80, 80, 369, 369, 370,
	370, 372, 372, 372, 372, 372, 374, 374, 371, 371,
	375, 375, 375, 332, 393, 393, 376, 376, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 360, 360, 330, 330, 377,
	377, 377, 379, 379, 378, 378, 378, 378, 378, 384,
	384, 385, 385, 387, 382, 382, 383, 383, 390, 380,
	380, 406, 406, 381, 381, 388, 388, 405, 405, 386,
	386, 386, 389, 389, 389, 389, 391, 391, 331, 331,
	331, 331, 154, 154, 392, 392, 392, 392, 337, 337,
	337, 337, 338, 339, 339, 339, 339, 339, 339, 339,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 344, 344, 344, 344,
	345, 345, 352, 346, 347, 347, 348, 341, 341, 341,
	341, 341, 342, 342, 343, 343, 350, 350, 351, 351,
	335, 335, 336, 325, 325, 326, 324, 324, 324, 327,
	327, 328, 328, 328, 328, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 354, 354, 354, 354,
	167, 167, 170, 170, 161, 161, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 397, 397, 397, 166, 166,
	9, 9, 9, 9, 399, 399, 395, 395, 395, 396,
	396, 396, 396, 396, 398, 398, 398, 398, 296, 296,
	296, 296, 296, 296, 314, 314, 29, 29, 30, 31,
	31, 33, 33, 33, 33, 34, 34, 35, 35, 35,
	35, 315, 316, 316, 317, 317,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 2, 0, 3, 0,
	2, 0, 1, 0, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 2, 3, 0, 1, 3, 1, 0,
	3, 3, 4, 4, 4, 4, 3, 2, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 2, 4, 2, 3,
	5, 4, 6, 3, 5, 4, 6, 3, 5, 3,
	3, 2, 6, 7, 6, 7, 3, 4, 4, 6,
	5, 7, 1, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	2, 4, 1, 1, 1, 2, 2, 2, 2, 1,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 0, 2,
	2, 3, 5, 0, 2, 4, 1, 1, 2, 3,
	5, 6, 8, 6, 6, 1, 3, 1, 3, 3,
	5, 1, 0, 1, 2, 4, 2, 0, 3, 3,
	2, 1, 3, 4, 3, 5, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 3, 0, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 2, 4, 1, 5, 2,
	5, 2, 5, 2, 3, 3, 0, 1, 0, 3,
	0, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 0, 0, 0, 0, 1, 1, 3, 1,
	1, 1, 3, 3, 1, 2, 6, 6, 2, 1,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 2, 3, 1, 4, 2, 3, 2,
	3, 2, 3, 1, 1, 2, 2, 4, 1, 2,
	3, 3, 4, 5, 4, 5, 4, 2, 2, 2,
	1, 1, 0, 5, 2, 2, 2, 3, 1, 0,
	1, 3, 9, 1, 2, 0, 7, 7, 0, 10,
	6, 0, 4, 5, 2, 0, 1, 2, 4, 0,
	1, 1, 0, 5, 2, 4, 1, 2, 0, 1,
	0, 1, 5, 1, 0, 2, 0, 2, 6, 2,
	0, 1, 3, 2, 4, 0, 1, 3, 2, 1,
	0, 1, 3, 3, 2, 0, 2, 2, 2, 3,
	3, 4, 1, 3, 3, 2, 7, 12, 1, 3,
	2, 3, 3, 1, 2, 2, 2, 2, 1, 2,
	13, 2, 2, 0, 2, 0, 1, 3, 3, 2,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 6, 0, 3, 0, 2, 3, 2, 3, 4,
	4, 3, 3, 0, 5, 2, 5, 2, 0, 4,
	2, 1, 0, 1, 0, 1, 3, 3, 6, 7,
	5, 7, 9, 2, 0, 7, 1, 3, 1, 4,
	4, 7, 2, 1, 1, 1, 3, 2, 8, 1,
	3, 3, 5, 2, 1, 3, 7, 2, 0, 10,
	1, 2, 9, 11, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 3, 0, 1, 3, 2, 0, 1,
	1, 3, 3, 1, 1, 3, 3, 3, 3, 4,
	4, 3, 3, 2, 1, 3, 2, 1, 1, 1,
	1, 3, 0, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 0, 2, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	4, 4, 4, 5, 5, 2, 5, 3, 5, 2,
	0, 3, 1, 2, 5, 5, 8, 3, 4, 8,
	5, 0, 4, 3, 0, 1, 3, 1, 3, 2,
	2, 4, 4, 5, 2, 0, 1, 1, 0, 2,
	2, 0, 2, 0, 13, 16, 12, 15, 14, 17,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 3, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 0, 2, 2, 1, 0, 3, 0, 1,
	3, 1, 1, 2, 4, 6, 6, 10, 1, 2,
	1, 3, 4, 0, 1, 3, 2, 1, 1, 6,
	2, 0, 3, 1, 1, 2, 1, 2, 2, 2,
	2, 3, 0, 1, 2, 1, 2, 1, 3, 2,
	3, 1, 2, 2, 2, 1, 2, 3, 1, 2,
	2, 2, 2, 3, 3, 3, 1, 3, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 0, 2, 1,
	4, 4, 5, 2, 5, 5, 7, 3, 1, 5,
	9, 3, 9, 4, 11, 10, 2, 0, 1, 3,
	3, 6, 4, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 3, 3,
	4, 0, 1, 0, 6, 1, 3, 3, 3, 5,
	2, 0, 3, 4, 4, 0, 2, 0, 4, 0,
	3, 16, 19, 1, 0, 2, 0, 4, 0, 1,
	3, 2, 0, 4, 6, 4, 6, 4, 4, 6,
	4, 6, 5, 7, 5, 7, 4, 6, 10, 13,
	10, 13, 11, 14, 1, 3, 1, 0, 1, 3,
	1, 1, 1, 1, 1, 2, 5, 3, 6, 4,
	6, 6, 9, 5, 7, 6, 6, 5, 5, 5,
	5, 9, 4, 5, 7, 6, 4, 8, 4, 2,
	4, 3, 6, 4, 3, 3, 3, 2, 2, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 4, 4,
	3, 2, 3, 2, 2, 3, 4, 3, 2, 2,
	3, 4, 4, 4, 5, 1, 4, 4, 4, 3,
	3, 2, 1, 0, 6, 4, 6, 4, 6, 8,
	4, 6, 4, 6, 5, 7, 2, 3, 3, 2,
	5, 1, 1, 2, 3, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 2, 6, 6, 6, 6, 6, 8, 8, 6,
	6, 7, 9, 9, 8, 10, 6, 6, 6, 6,
	6, 6, 6, 8, 6, 8, 6, 8, 7, 9,
	6, 8, 7, 9, 8, 10, 8, 10, 9, 11,
	8, 10, 9, 11, 8, 8, 7, 6, 6, 6,
	6, 8, 8, 8, 8, 6, 9, 0, 2, 2,
	1, 2, 2, 2, 2, 3, 1, 3, 3, 1,
	5, 3, 9, 12, 7, 7, 3, 2, 1, 3,
	1, 3, 3, 3, 3, 2, 2, 1, 1, 1,
	1, 2, 1, 1, 1, 4, 5, 1, 0, 1,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 5,
	1, 4, 0, 2, 3, 0, 1, 1, 4, 5,
	1, 1, 1, 1, 3, 3, 2, 2, 1, 2,
	2, 2, 2, 1, 2, 2, 1, 17, 21, 1,
	1, 2, 1, 3, 1, 1, 1, 3, 1, 2,
	0, 1, 2, 4, 1, 1, 1, 1, 1, 3,
	0, 1, 0, 1, 1, 4, 0, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 2, 0, 9, 11,
	12, 14, 3, 0, 3, 4, 4, 0, 6, 4,
	9, 7, 6, 4, 6, 6, 5, 7, 9, 6,
	6, 5, 4, 4, 3, 6, 6, 6, 6, 4,
	7, 5, 8, 7, 8, 6, 3, 3, 5, 6,
	1, 3, 1, 3, 1, 3, 3, 7, 9, 9,
	8, 6, 1, 0, 1, 3, 3, 1, 5, 3,
	8, 11, 6, 1, 0, 5, 2, 3, 0, 2,
	0, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 2, 0, 2, 0, 4, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -98, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -329, -330, -331, -335,
	-336, -337, -338, -339, -340, -341, -333, -334, -100, -101,
	-189, 112, 26, 22, 27, 395, 94, 402, -102, -188,
	532, 63, 67, -196, 36, 519, 87, 541, 97, 98,
	99, 100, 532, -147, 116, -297, -260, -26, 33, 415,
	262, 62, 465, 455, 226, -325, 454, 452, 58, 290,
	474, 472, 67, 308, 420, 481, 85, 285, 200, 226,
	237, 248, 262, 287, 71, -402, 62, 376, 386, 388,
	410, 415, 423, 444, 413, 461, 269, 407, 104, 450,
	439, 455, 465, 385, -292, -295, -294, 465, 262, 308,
	67, 420, 481, 85, 285, 226, 237, 439, 455, 195,
	269, 277, -402, 388, 415, 423, 376, 413, 461, 85,
	-355, 58, 424, 458, -356, -354, -167, 56, 218, 415,
	348, 407, 489, -5, 4, -18, -19, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 22, 202, 204,
	205, 206, 55, 207, 208, 209, 211, 212, 213, 89,
	70, 214, 215, 216, 24, 217, 219, 220, 221, 222,
	223, 224, 124, 227, 228, 229, 230, 231, 142, 232,
	102, 233, 234, 235, 236, 237, 112, 238, 155, 239,
	121, 122, 91, 247, 248, 249, 250, 251, 252, 254,
	255, 99, 150, 151, 256, 90, 257, 258, 259, 260,
	261, 262, 177, 27, 263, 139, 265, 149, 266, 268,
	137, 42, 269, 271, 272, 273, 274, 275, 276, 277,
	278, 280, 282, 283, 92, 284, 154, 166, 286, 287,
	288, 289, 290, 292, 295, 296, 152, 297, 298, 299,
	28, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 313, 314, 315, 97, 316, 318, 319,
	146, 504, 320, 321, 322, 323, 93, 325, 328, 329,
	330, 333, 334, 335, 336, 337, 338, 106, 85, 339,
	100, 341, 342, 343, 344, 345, 346, 347, 132, 349,
	350, 351, 352, 353, 354, 355, 358, 111, 359, 360,
	32, 140, 123, 505, 506, 503, 145, 62, 507, 508,
	125, 502, 509, 103, 365, 366, 367, 368, 369, 370,
	371, 130, 372, 129, 374, 375, 376, 378, 379, 380,
	381, 383, 384, 385, 386, 387, 113, 388, 153, 144,
	389, 390, 391, 392, 84, 133, 394, 395, 396, 397,
	398, 399, 400, 34, 401, 402, 403, 35, 404, 405,
	406, 408, 409, 410, 411, 128, 413, 414, 147, 416,
	417, 88, 418, 419, 420, 421, 422, 423, 94, 426,
	428, 429, 430, 431, 432, 108, 434, 435, 436, 437,
	438, 439, 114, 115, 440, 441, 442, 148, 443, 444,
	446, 447, 105, 449, 450, 109, 452, 453, 454, 455,
	456, 459, 461, 463, 464, 465, 466, 467, 468, 469,
	143, 470, 50, 473, 474, 475, 98, 476, 477, 478,
	479, 156, 184, 480, 481, 482, 483, 484, 486, 169,
	487, 141, 488, 499, 500, 57, 37, 174, 170, 190,
	180, 179, 225, 189, 188, 29, 279, 176, 293, 294,
	501, 187, 172, 186, 167, 161, 163, 164, 160, 162,
	157, 165, 159, 127, 158, 326, 340, 182, 183, 356,
	357, 361, 171, 362, 363, 377, 178, 175, 412, 427,
	173, 445, 185, 460, 462, 87, 181, 490, 491, 492,
	493, 494, 134, 495, 496, 497, 498, 126, -358, -357,
	56, 458, 424, -167, 21, 218, 58, 348, 407, 415,
	489, -102, -100, -101, -188, -180, -181, 21, 41, -321,
	-319, -322, -5, 66, 424, 458, 56, 542, -190, 84,
	-192, -7, -5, -190, 532, -3, 73, -323, -321, 64,
	73, -99, -98, -319, 67, 481, 84, 308, 287, 386,
	461, 118, 200, 34, -17, -5, 28, -14, -5, -92,
	-94, -5, 11, -95, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, -14, 88, -14, 28,
	85, 454, 452, 454, 452, -321, 28, 21, -319, 28,
	21, -319, 28, -319, 28, 481, 67, 247, -39, -361,
	-64, -5, 4, -18, -20, 210, 116, 226, 25, 81,
	243, 117, 79, 44, 76, 52, 53, 75, 77, 46,
	82, 54, 80, 364, 78, 48, 451, 119, -14, -14,
	-7, -14, -38, -361, -11, -353, -9, 242, 246, 425,
	4, -18, -19, -20, 322, 222, 280, -7, 28, -38,
	-7, -38, -7, -7, -7, -7, -7, 461, -11, -11,
	-7, -14, 88, -14, 28, -16, -14, 28, -12, -7,
	-7, 28, -164, 28, -68, -69, -70, -71, -77, -73,
	-76, -64, 187, 172, 173, 174, 175, 176, 177, 188,
	189, 171, 190, -78, -79, -74, -75, 185, 56, 4,
	-18, 170, -65, 179, 180, 181, 182, 183, -164, 28,
	25, 481, 247, 67, 88, 341, 461, 322, 481, -355,
	424, -355, 220, 210, -395, 432, -396, 319, 390, 253,
	31, 64, 61, 528, 534, 57, -63, 7, -63, -397,
	-63, 40, -166, -9, -63, 507, 57, 319, 210, 533,
	533, -169, -168, -171, -40, 537, -42, 535, 536, 31,
	-91, -44, -43, 13, 532, -46, -45, -101, 29, 135,
	-52, -53, 294, 11, 62, -5, -61, 6, -63, 49,
	43, 47, 38, -87, 412, 12, -361, -168, 74, 537,
	-57, -59, 534, 530, -319, 532, 532, 542, -190, -23,
	532, -85, -40, -320, -319, 94, -5, 23, -323, -323,
	533, -154, 532, -319, 28, -319, 481, -27, 25, -361,
	-361, -7, 461, -361, -297, 474, 210, -327, 31, -349,
	23, -81, 534, -315, 532, 534, -315, 23, 369, 258,
	453, 232, -315, 64, 31, 481, -285, -288, 399, -287,
	208, 257, 197, 22, 27, 478, 94, 224, 265, 259,
	310, 355, 123, 31, 366, 402, 401, 154, -30, 508,
	29, 45, -285, -289, 399, 208, 29, 45, -285, 399,
	29, -285, 399, 29, -319, 28, 21, -321, 28, 141,
	399, -36, 532, -57, 399, 399, 399, 399, -291, 27,
	94, 197, 478, 399, -36, 399, -7, -14, -14, 74,
	29, 399, 399, 399, 399, 399, 399, 74, 74, -7,
	399, 399, 399, 399, 369, 258, 453, 232, 399, 197,
	27, 29, 542, -318, 24, 35, 29, 542, -318, 74,
	29, 542, -318, 29, -82, -81, 532, -72, 532, 178,
	-82, -82, -82, 532, -83, 519, 520, 532, -83, -84,
	184, 532, -84, -84, 179, 180, -84, -318, 29, -16,
	28, 141, 369, 258, 453, 232, -27, 220, 23, -166,
	40, 542, -396, -63, 328, 66, 488, 253, 121, -170,
	40, -161, -165, -160, 49, 43, 74, -166, 6, 535,
	536, -62, -61, -170, 40, -5, -394, -63, 4, -160,
	40, 58, 49, 43, 74, 505, -399, 261, 235, 328,
	-183, 73, 542, 14, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, 30, 33, 52, 53,
	54, 46, 517, 44, 39, 55, -91, 37, 45, 48,
	23, -8, 62, 4, -22, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 21, 201, 22, 202, 203, 120,
	511, 95, 204, 205, 206, 60, 207, 208, 209, 210,
	211, 212, 213, 174, 116, 170, 190, 512, 89, 70,
	214, 215, 216, 24, 217, 38, 513, 218, 219, 220,
	514, 221, 222, 223, 224, 225, 226, 515, 124, 227,
	228, 229, 230, 231, 25, 142, 232, 102, 233, 118,
	234, 235, 236, 237, 112, 238, 81, 155, 239, 121,
	240, 241, 242, 243, 244, 245, 246, 122, 91, 247,
	248, 250, 189, 188, 251, 40, 252, 253, 254, 255,
	99, 150, 151, 256, 90, 96, 257, 258, 259, 260,
	41, 110, 261, 262, 177, 27, 263, 264, 139, 265,
	149, 266, 267, 268, 137, 42, 269, 271, 272, 273,
	274, 29, 275, 276, 277, 278, 279, 43, 280, 283,
	92, 176, 284, 154, 285, 166, 286, 117, 79, 287,
	288, 289, 290, 292, 293, 294, 295, 296, 152, 297,
	299, 28, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 76, 501, 314, 315,
	97, 316, 187, 172, 186, 318, 319, 75, 167, 161,
	163, 164, 160, 162, 157, 165, 159, 127, 158, 146,
	504, 320, 321, 322, 323, 93, 324, 327, 325, 326,
	77, 328, 329, 330, 58, 331, 332, 333, 334, 335,
	336, 337, 338, 106, 85, 339, 100, 340, 341, 343,
	344, 346, 347, 348, 182, 82, 183, 132, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 31, 111,
	359, 360, 47, 361, 32, 171, 140, 123, 505, 506,
	503, 145, 66, 507, 508, 125, 502, 362, 80, 363,
	103, 365, 366, 367, 368, 369, 370, 371, 130, 372,
	129, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 387, 113, 388, 153, 144,
	389, 390, 175, 391, 392, 84, 133, 393, 394, 395,
	396, 397, 398, 399, 400, 34, 401, 402, 403, 35,
	404, 405, 406, 78, 407, 408, 409, 410, 411, 412,
	128, 413, 414, 147, 415, 416, 417, 88, 419, 63,
	420, 421, 422, 423, 424, 425, 94, 427, 426, 428,
	429, 430, 431, 173, 432, 433, 108, 434, 435, 436,
	437, 438, 439, 114, 115, 440, 441, 442, 148, 443,
	444, 445, 446, 59, 447, 105, 448, 67, 449, 451,
	450, 109, 452, 453, 454, 455, 107, 456, 56, 185,
	457, 458, 459, 460, 461, 462, 49, 463, 464, 465,
	466, 467, 468, 469, 143, 470, 472, 50, 473, 474,
	475, 98, 104, 83, 476, 477, 478, 479, 156, 87,
	181, 191, 119, 480, 481, 482, 483, 51, 484, 487,
	141, 488, 489, 490, 491, 492, 493, 494, 134, 495,
	496, 497, 498, 126, 500, 57, -40, -40, -40, -40,
	-58, -40, -85, -101, 87, -57, -101, -101, -51, 530,
	532, 532, -57, -47, -40, -88, 532, 532, -183, 532,
	-59, -66, 537, -6, 4, -18, -19, -20, -21, 21,
	203, 120, 30, 511, 135, 23, 95, 60, 512, 38,
	513, 514, 39, 515, 118, 26, 240, 241, 242, 244,
	245, 246, 40, 253, 96, 41, 110, 264, 267, 270,
	43, 281, 131, 285, 64, 291, 71, 72, 45, 312,
	317, 73, 324, 327, 68, 331, 332, 31, 47, 69,
	74, 66, 33, 510, 373, 382, 393, 101, 63, 425,
	433, 59, 448, 67, 107, 61, 457, 49, 471, 472,
	104, 83, 191, 51, 65, 485, 36, -40, -60, -319,
	-85, -192, 23, -12, 542, 533, 30, 33, 52, 46,
	44, 39, 55, 37, 45, 48, 62, -113, -98, 103,
	532, 40, 23, -115, -120, -119, 532, -5, -5, -191,
	83, 83, 61, -139, 64, 61, -13, -5, 532, 123,
	371, 31, -154, -319, -17, 28, -5, -362, 532, -362,
	-377, 212, 199, 316, -7, -344, -346, 532, 481, 84,
	-353, -328, -108, -109, -330, -331, 26, 29, -68, 534,
	-66, -316, -317, -6, -92, 532, 268, 389, -14, -14,
	-14, -14, -14, 29, -326, 28, -319, 542, 61, -404,
	118, 515, 371, 371, -240, 28, 515, -241, -5, 118,
	-257, 514, 472, 382, 285, 271, -404, 118, -404, 118,
	118, 169, 336, 474, 195, 450, -273, 532, 74, 461,
	202, 401, 413, 412, 461, 413, 412, -319, 310, 154,
	-14, 123, 61, -273, 299, 412, 532, -321, 450, 61,
	371, -319, 450, 61, -319, 61, -404, -319, -285, 399,
	29, 45, -285, 399, 29, -7, 61, 533, 61, 61,
	61, 61, 118, 40, 31, 118, 40, 31, -350, 118,
	-351, 514, 31, 118, 61, 61, 399, 83, 83, -319,
	-7, 61, 61, 61, 61, 61, 61, -319, -319, 399,
	61, 61, 61, 61, -14, -14, -14, -14, 61, 209,
	156, 156, 156, -16, -14, -12, -7, -14, -7, -68,
	-164, -82, -85, -61, -61, 56, 56, -61, 532, -61,
	-84, -84, -164, -318, 29, -319, 458, -396, -398, 390,
	400, 422, 542, -61, 6, -61, 6, -172, 64, -319,
	-171, -68, -40, -40, -40, -40, -40, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, 47, 31, -40, 46,
	44, 37, 45, 48, -40, -14, 56, 58, -40, -97,
	59, 60, -96, -101, 532, 61, -6, -59, 533, 542,
	-85, -54, 531, -51, -85, -92, -50, -49, 51, -89,
	-85, 533, 533, -55, 191, 21, 41, -56, -40, -67,
	-64, -172, -85, 531, 543, 533, 533, -193, 85, 31,
	533, -40, -121, 74, -134, 104, 105, -114, -118, -5,
	87, -5, -172, 542, 528, -116, -119, -58, -122, 65,
	-173, -174, -321, -101, 86, -184, 532, -197, -207, -217,
	-198, 128, 126, 127, -5, -87, -174, -140, 113, -140,
	542, 533, -235, -236, -239, -240, -242, -241, 46, -14,
	123, 29, -284, 36, 532, 74, 31, 405, -369, -370,
	-372, 23, 322, 459, 485, -373, 216, 442, 301, 435,
	483, 278, 419, 325, 31, 238, 128, 446, -360, 367,
	94, -334, -363, 533, -364, -365, -367, -67, -80, 45,
	362, 501, 191, -64, -68, 427, -369, 405, -379, -378,
	97, 99, 98, 463, 123, 199, -315, 537, -345, 510,
	-347, -352, -348, -365, 4, -319, 481, -327, -26, -17,
	-5, -254, -66, 533, 542, 528, -200, -199, -201, -5,
	532, -315, -315, -315, -315, -315, -14, 23, 31, -154,
	-287, -7, -7, -7, -319, -319, 31, -240, 28, -68,
	-7, 532, -261, -279, 32, 83, 504, 504, -280, 83,
	-5, -61, -7, 28, -5, 28, -7, -7, 506, 224,
	341, -7, -274, -275, -6, -7, -7, 21, 104, 461,
	413, 461, 413, -7, 328, -7, 21, 104, -7, 328,
	-319, 412, -353, -35, 111, 79, 40, 83, 328, -31,
	-33, -305, 94, 197, 27, -10, -6, -285, -288, 399,
	-7, -7, -319, -285, 399, -7, -7, -285, 399, -7,
	-7, -285, 399, 61, -404, -319, 450, 61, -404, -321,
	399, -7, -7, -7, -7, -7, -7, 47, -7, 28,
	-40, 47, -7, 532, 47, -7, -7, -11, 61, -7,
	-7, 399, 74, -7, -7, -7, -7, -7, -7, 399,
	399, 61, -11, -11, -7, -7, 399, 399, 399, 399,
	-7, -7, -63, -25, 28, -63, -318, -318, -318, 74,
	-318, 533, 533, 533, 57, 57, 533, -85, 533, -318,
	-16, -324, 36, -395, 469, 230, 390, -161, -175, 65,
	-173, 47, 42, -40, -40, -97, 59, -96, 61, 42,
	57, -41, -42, 535, 536, -41, -85, -40, -58, -40,
	531, 531, 542, 533, 533, -48, -49, 264, -40, -90,
	533, -86, 542, -56, -55, -55, 16, 17, -175, 533,
	-60, -40, 532, 85, -123, 101, 102, 156, 533, 542,
	-58, -122, -120, -40, 533, 542, -123, -40, 121, 542,
	81, -185, 75, 82, 79, 77, 78, 76, -178, -177,
	23, -5, -178, -101, -197, -207, -217, -101, -184, -174,
	-178, -178, -178, -206, 519, 64, 532, 532, -57, 74,
	-146, -63, 114, 115, -146, -5, 533, 542, -319, -237,
	532, -319, -319, 23, -273, -13, -321, 29, -368, 67,
	47, -80, -64, -375, -332, 213, 404, -372, -374, -63,
	-166, -371, 131, 74, 419, 255, 318, 325, -160, -160,
	-14, -5, -356, 424, 458, 533, 542, 40, 528, -67,
	-80, -367, -80, 362, -81, -64, -375, 74, 33, 123,
	-379, 533, 533, 510, 542, 70, 533, 542, 528, -154,
	-319, 210, -327, -255, 118, -256, -258, 39, 31, 47,
	472, 382, 514, 40, 393, 289, 253, 312, -317, -296,
	-80, -21, -93, -160, -63, 356, -94, 62, 535, 536,
	533, 542, -68, -342, -343, -63, -315, 64, -98, 29,
	-298, 83, 61, 61, -245, 131, 40, -27, 283, 29,
	31, -302, -301, 440, -257, 271, -40, 532, -252, 41,
	31, 308, 532, -279, 532, 532, -7, -291, 27, 94,
	402, 197, -310, -163, -30, -312, 403, 94, -252, 29,
	-318, 29, -318, -34, -5, 40, 533, 542, 528, 534,
	-7, -7, -7, -7, 419, 419, 328, 308, 419, 533,
	542, -305, -305, -10, -32, -63, 61, -404, 118, 94,
	365, 61, 94, 365, 61, 61, 61, -404, -7, -7,
	-285, 399, -7, -7, -7, -285, 399, 61, 61, -318,
	29, -351, -40, -252, -7, 399, 399, 61, -319, 61,
	61, -7, 61, 61, 61, 61, 61, 61, -63, 31,
	-14, -83, -83, 533, -318, 247, 355, -40, -40, 42,
	42, -41, -41, -40, -40, -40, 30, 14, 535, 536,
	537, 538, 539, 540, 526, 527, 528, 18, 19, 20,
	-41, -41, 30, 533, 42, 533, -51, 267, -40, 107,
	533, 191, -56, -86, -86, 542, -86, -40, -40, 531,
	-99, -168, -128, 532, 74, -98, -98, 103, -118, -123,
	528, -119, 123, -174, 75, 75, -174, -185, 75, -186,
	80, -186, -186, -5, 532, -178, -178, -178, -178, 533,
	125, 532, -42, 134, -222, -40, -40, -28, 36, 519,
	-148, -401, 83, -268, 311, -239, -250, -269, -270, 371,
	-238, -243, -244, -241, -5, -237, 532, 123, 371, -98,
	533, -280, -7, -369, 532, 74, 207, -40, 542, 542,
	465, 47, 255, 318, -364, -40, -40, -80, -80, 539,
	-81, -319, -378, -13, 74, 70, -352, -345, -348, 4,
	-296, -284, 532, -353, -7, -14, 253, 47, -261, 504,
	532, -41, -319, -307, 202, 70, 254, 300, 532, -201,
	-212, 39, 533, 542, -14, -324, -326, -284, -7, -7,
	-7, 87, -240, 29, -300, -299, 231, -5, 40, 533,
	-13, -253, 31, 253, 312, 355, 41, -7, -13, -252,
	-13, -248, -247, -132, -5, -198, 532, 31, 276, 299,
	247, -311, 289, 31, 276, 439, -273, -301, -299, 23,
	214, 91, 355, 306, 336, 339, 343, 365, 420, 437,
	403, 474, -273, 289, -312, 94, 465, -28, 439, -5,
	-7, -275, -296, -6, 419, -7, -33, -7, -7, -7,
	450, 70, -7, 450, 70, -7, -7, -7, -7, 61,
	61, -404, 94, 365, 61, 61, -404, -7, -7, -7,
	533, 61, 61, -7, 399, -7, -7, -7, -7, -7,
	-7, -7, -63, 212, 199, 29, -318, 247, -40, -40,
	30, 30, 42, -40, -68, -41, -41, -41, -41, -41,
	-41, -41, -41, -41, -41, -41, -41, -40, -40, -40,
	-56, 533, 533, 533, 533, 110, -156, -132, 118, -134,
	-40, -145, -7, -174, -174, -187, 83, 74, 75, -174,
	532, -12, -177, -202, -203, -198, -213, 130, 532, 542,
	-233, -232, 516, -117, -126, -135, -136, 51, -150, -151,
	532, -28, 151, -269, 532, 305, 272, -298, 70, 533,
	542, -254, 36, -245, -235, -14, 123, -392, 36, -284,
	532, 74, -375, -205, -366, -67, -64, 47, -393, -63,
	131, -68, 314, 465, 539, -384, 394, -319, -345, 533,
	23, -13, -327, -256, 31, -314, 36, -314, -40, -154,
	23, 40, -92, -14, -63, 23, -277, 450, 36, 45,
	64, -240, -303, 508, -5, 40, -252, 533, 253, 477,
	300, 254, 310, 533, 533, 533, 542, 36, -133, -125,
	39, -133, -40, 47, 28, 28, -307, 47, 23, -162,
	-62, 40, 535, 536, -69, -160, 91, 339, 343, -403,
	70, -160, -160, 70, 347, -28, -28, -307, -68, -160,
	-162, -318, -318, 528, 61, 61, -7, -286, -353, -7,
	-286, 61, -7, -7, -7, 450, 70, -7, -7, -7,
	-318, -252, -7, -7, 61, -318, -63, -63, -40, -40,
	-40, -86, -194, 88, 98, 111, 533, 542, -7, 156,
	-187, 532, -40, -174, -12, 533, 533, 542, -204, 23,
	124, -42, -214, 70, -215, -216, -41, 40, -40, 167,
	-123, -126, -127, 30, -127, 106, 31, -149, 116, 117,
	150, 47, 155, 152, 153, 42, 154, 149, -152, -157,
	-6, -150, -63, -298, -15, -319, -251, 228, 231, 234,
	252, 299, 289, 309, 439, 440, 21, -251, -37, 36,
	169, -5, -243, 508, -269, 533, -237, -319, 514, 217,
	58, 23, -156, -321, 542, 533, -80, 314, 267, -376,
	-4, -332, 465, 465, -380, 131, -385, -387, -382, 349,
	503, -391, 64, 533, -98, 533, -278, 83, -315, -278,
	533, -262, 338, 299, 532, 533, -98, -7, 532, 532,
	532, -254, 532, -263, 304, -263, 393, -263, -247, -92,
	62, -283, -14, -14, 533, 29, 29, 532, -160, -14,
	-14, -160, -160, 23, -212, -296, -7, -7, -290, 360,
	94, 542, -290, 94, -7, 61, -7, -286, 61, -7,
	533, -195, 91, 90, 89, 94, -175, -132, -98, -12,
	533, -206, -203, 532, -208, -209, -5, -214, 70, -42,
	133, 156, 542, 533, 23, -41, -221, 23, 149, 107,
	-40, 107, 106, -349, -349, -349, -349, 153, 31, 47,
	-63, 533, 542, -158, -165, -160, 537, 40, 532, -175,
	-37, 542, 533, -276, 74, -273, 506, 532, -254, -298,
	-268, -269, -237, 507, 514, 514, -98, 533, -280, -366,
	-369, 541, -68, -388, 51, -406, 263, -387, -383, 67,
	412, -252, -319, -392, -284, 308, -259, 355, -267, -264,
	-265, 74, 79, 370, 430, -309, 532, -40, -324, -249,
	-246, -9, -85, -85, -304, -305, -314, 532, -314, -319,
	-314, 532, -137, 95, 96, -273, -133, -40, 299, -29,
	83, 450, -353, 450, -7, -290, 94, -7, -13, 92,
	92, -115, 533, -199, 533, 542, -68, 131, -214, -216,
	542, -6, -225, 130, -5, -7, -129, -130, 110, 98,
	99, -131, 110, 97, 70, -63, -63, -63, -63, -13,
	537, 47, -13, 537, -157, -153, -159, -165, -276, -319,
	-277, 229, -271, -272, -5, -198, 532, -37, -269, -298,
	-245, 507, 507, -392, -282, 304, 532, -375, 274, 532,
	-381, 412, 438, -349, 131, 23, 450, 310, -265, 74,
	-264, 74, 98, 99, -308, -311, 533, 533, 542, -61,
	533, 533, 533, 542, -278, -13, -278, -154, -278, -92,
	-138, 518, -137, 533, -309, -40, -7, -7, 450, 94,
	70, 70, -175, -179, 23, 533, -209, -210, -211, 4,
	40, 31, 47, 129, 125, -42, 124, -223, -224, -222,
	111, 94, 111, -124, 103, 532, 40, 87, 108, 109,
	-13, 537, 533, 542, -277, 27, 99, 381, 533, 542,
	-125, -125, -40, -276, -298, -37, -269, -261, 532, -156,
	-405, 287, 386, -40, -390, -5, 263, -98, -7, -266,
	355, 35, 24, 94, -266, -311, 533, 441, -246, 61,
	-305, -252, 533, -252, -262, -175, 533, 92, 93, -138,
	-290, -290, -7, -5, -13, -13, -5, -211, -41, -41,
	47, -41, -213, 532, 542, 23, -115, -134, -114, 87,
	532, -159, 128, 128, -272, -283, -14, -283, 533, -277,
	-37, -276, -298, -284, -281, -132, 533, -361, 533, 412,
	-392, 196, 47, 40, 532, -267, -252, -290, 61, 83,
	94, 94, 124, -218, -219, -5, 132, -224, -6, 156,
	533, -85, -125, -276, -277, -37, -277, 533, 542, -282,
	532, -388, -154, -154, -85, -252, -43, -5, -5, -5,
	-208, 533, 542, 131, -68, -234, 129, -124, -124, 103,
	533, -283, -277, -276, -175, -132, -261, -386, -389, -61,
	6, -63, -6, 274, 533, 40, 533, -226, -227, 40,
	-228, 137, 47, 49, 43, 50, 139, -219, 125, -220,
	-232, 29, 129, 7, -134, -277, -284, 533, 542, -405,
	-43, 533, 74, -40, 135, 140, -230, 169, 36, -220,
	-220, 7, 124, 23, 156, -277, -389, -361, 83, 137,
	-231, 146, 145, 141, 135, 141, 135, 142, 143, -230,
	-226, 532, -7, -124, -175, 532, -5, -229, -227, 144,
	144, 141, 141, 135, 141, 135, 141, -231, -218, 124,
	-386, 74, 74, 74, 141, 141, -229, 533, 532, 533,
	139, 137, 147, 147, -218, -227, 148, 148, 533, 74,
	137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 1239, 1240,
	0, 1472, -2, 1535, 1535, 0, 0, 0, 1244, 1298,
	0, 1330, 0, 1249, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 30,
	0, 0, 0, 0, 0, 0, 1600, 1601, 0, 0,
	-2, 1773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 0, 0, 0, 1915,
	1911, 1912, 1913, 0, 0, 1917, 1918, 1919, 0, 0,
	0, 1518, 0, 1521, 1522, 1523, 1524, 1525, 1526, 0,
	1896, 228, 339, 373, 1901, 2185, 0, 456, 112, 329,
	-2, 320, 406, 2200, 47, 48, 49, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 229, 230, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 321, 322, 323, 324, 325, 326, 327, 328, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	372, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 404, 405, 407, 408, 409, 410, 411, 412, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 1910, 1902,
	456, 373, 339, 1906, 1907, 112, 228, 246, 320, 329,
	406, 1245, 0, 0, 0, 1251, 0, 1329, 1331, 1248,
	1273, 1274, 62, 0, 339, 373, 456, 0, 1295, 303,
	1300, 65, 57, 1296, 0, 2, 0, 0, 1278, 0,
	0, 0, 1241, 2113, 0, 0, 0, 43, 0, 0,
	0, 0, 0, -2, 0, -2, 197, 1541, 79, 0,
	1229, 0, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 2134, 0, 0, 197,
	0, 1602, 1603, 1604, 1605, 0, 197, 0, 0, 197,
	0, 0, 197, 0, 197, 0, 0, 0, 0, 0,
	1127, 0, -2, -2, 1166, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 0, 0,
	0, 0, 0, 0, 0, 1810, 1811, 1812, 1813, 1814,
	2220, 2221, 2222, 2223, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 35, 81, 197, 35, 58,
	0, 197, 35, 197, 1532, 1158, 1159, 1160, 1161, 1162,
	1163, 1172, 1175, 1176, 1177, 1178, 1179, 1210, 159, 1172,
	1172, 1172, 1185, 1186, 1187, 1188, 1189, 1206, 1206, 1164,
	1165, 1208, 1197, 1208, 1208, 1192, 0, 1208, 35, 197,
	0, 1914, 0, 1916, 0, 1516, 1517, 1520, 43, 1897,
	339, 1898, 114, 0, 1899, 0, 2226, 0, 0, 2232,
	0, 0, 0, 0, 0, 0, 2188, 1109, 2189, 2190,
	2215, 2216, 2191, 2218, 2219, 0, 1903, 0, 1905, 1242,
	1243, 1336, 1250, 1252, 1256, 1257, 1026, 0, 0, 0,
	0, 1088, 1089, 1123, 0, 1092, 1093, 1094, 419, 0,
	1099, 1100, 423, 1211, 266, 1113, 1102, 1103, 1104, 1105,
	1106, 1107, 1142, 1232, 452, 1108, 0, 1336, 0, 1275,
	63, 1115, 0, 1118, 1276, 0, 0, 0, 1297, 0,
	0, 0, 1156, 0, 1436, 0, 1279, 0, 1458, 0,
	0, 0, 0, 0, 197, 2113, 0, 30, 42, 0,
	0, 0, 0, 0, 0, 1606, 0, 2119, 0, 0,
	1540, 80, 0, 2132, 0, 0, 2133, 0, 0, 0,
	0, 0, 2139, 0, 0, 0, 1783, 1796, 1883, 1804,
	0, 0, 0, 1883, 1883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1875, 0,
	0, 0, 1785, 1787, 0, 0, 0, 0, 1788, 0,
	0, 1790, 1883, 0, 0, 197, 0, 0, 197, 0,
	0, 1931, 0, 1128, 0, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 1930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1885, 33, 34, 0, 0, 1887, 0,
	0, 0, 1890, 0, 1173, 1172, 0, 1180, 0, 1181,
	1182, 1183, 1184, 0, 1201, 0, 0, 0, 1203, 1199,
	1207, 0, 1190, 1191, 1208, 1208, 1195, 1892, 0, 35,
	197, 1519, 1920, 1921, 1922, 1923, 0, 0, 0, 2192,
	2193, 0, 2228, 2195, 0, 2230, 2231, 2233, 2186, 2196,
	2198, 2202, 2204, 2205, 1506, 1507, 1508, 1509, 1510, 0,
	0, 1513, 1110, 2197, 2199, 2201, 2187, 2206, 2207, 2208,
	2209, 2210, 2211, 2212, 2213, 2214, 2194, 2224, 2225, 1904,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 843, 761, 1046,
	1048, 788, 0, 735, 628, 596, 0, -2, 740, 930,
	0, 1255, 840, 55, 56, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	590, 591, 592, 593, 594, 595, 597, 598, 599, 600,
	601, 602, 603, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 736, 737, 738, 739, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 841, 842, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1044, 1061,
	1090, 1156, 0, 1094, 460, 1095, 1096, 1097, 1098, 0,
	0, 0, -2, 0, 1141, 1233, 0, 0, 1259, 0,
	1116, 1119, 1120, 1167, 50, 51, 52, 53, 54, 496,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 1117, 0, 0,
	0, 1301, 1305, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 1235, 0, 0, 0, 1571, 1438, 0,
	0, 0, 0, 1259, 1449, 0, 0, 1123, 1280, 1319,
	0, 0, 1467, 1467, 1464, 1465, 0, 60, 1609, 0,
	0, 0, 1782, 0, 0, 197, 29, 2028, 0, 2028,
	0, 2069, 2070, 0, 0, 0, 2131, 0, 0, 0,
	2180, 2179, 2181, 2182, 2183, 2184, -2, 30, 1661, 0,
	1169, 0, 2262, 2264, 1230, 1350, 0, 0, 0, 0,
	0, 0, 2141, 0, 0, 197, 2113, 0, 0, 0,
	0, 1882, 0, 0, 1815, 197, 0, 1839, 0, 0,
	1718, 0, 1672, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 1847, 1848, 0, 0, 1868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1861, 0, 0,
	1863, 1864, 0, 1869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1792, 1883,
	0, 0, 1794, 1883, 0, 0, 0, 1929, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 2126, 0,
	2167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 35, 82, 35, 59, 35, 0, 1533,
	35, 1174, 0, 0, 0, 0, 0, 0, 0, 0,
	1193, 1194, 35, 1894, 0, 2178, 0, 2227, 2229, 0,
	0, 2237, 0, 1111, 1511, 1112, 1512, 1315, 0, 1335,
	1253, 1029, 1030, 1031, 1032, 1033, 1034, 1035, -2, -2,
	-2, -2, -2, -2, 1042, 1043, 1045, 0, -2, 0,
	0, 1235, 0, 0, -2, 1057, 0, 1059, 1060, 0,
	0, 1236, 1066, 1237, 0, 0, 1254, 1124, 1123, 0,
	0, 0, 1150, 1151, 0, 0, 1147, 1143, 0, 1234,
	0, 1154, 1129, 1231, 0, 0, 0, 1135, 1137, 0,
	-2, 1315, 0, 1121, 1118, 1277, 1313, 0, 1303, 0,
	64, 1157, 1593, 0, 0, 1443, 1444, 0, 1445, 1123,
	1442, 1437, 1319, 0, 0, 0, 1454, 1453, 1593, 0,
	1457, 1260, 1322, 1322, 0, 1265, 0, 1322, 1322, 1322,
	1340, 325, 472, 437, 62, 1126, 0, 0, 1466, 0,
	0, 2112, 0, 1608, 1610, 1612, 1613, 1614, 0, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 2042, 2027,
	2029, 0, 0, 0, 2034, 2035, 0, 2050, 2051, 2052,
	2053, 0, 0, 2058, 0, 0, 0, 0, 2063, 0,
	0, 2066, 0, 2007, 2008, 2010, 0, 0, 2017, 2018,
	2019, 2020, 2022, -2, 2024, 0, 2042, 0, 0, 2072,
	2074, 2075, 2076, 2078, 2071, 0, 2130, 0, 0, 0,
	0, 2150, 2154, 2152, 1164, 2113, 0, 2118, 0, 0,
	-2, 2122, 1170, 2261, 0, 0, 0, 1349, 1351, 0,
	2163, 2145, 2135, 2136, 2137, 2138, 0, 0, 0, 1761,
	1805, 1952, 0, 0, 0, 43, 0, 1817, 197, 1636,
	0, 0, 0, 1987, 0, 0, 0, 0, 0, 0,
	1537, 0, 1987, 197, 35, 197, 35, 1841, 1844, 1846,
	0, 1867, 0, 1996, 1999, 1845, 1849, 1852, 1853, 0,
	0, 0, 0, 1857, 0, 1854, 1855, 1856, 1860, 0,
	1862, 0, 1865, 1870, 2257, 2258, 2259, 0, 0, 0,
	2249, 2251, 340, 88, 160, 0, 1657, 1784, 1797, 1883,
	0, 1960, 1879, 1786, 0, 0, 1954, 1789, 0, 1956,
	0, 1791, 1883, 0, 0, 0, 0, 0, 0, 0,
	0, 1932, 1933, 1934, 1935, 1936, 0, 2124, 35, 197,
	1880, 2125, 0, 0, 1987, 2129, 1939, 1940, 0, 0,
	0, 0, 0, 1946, 1947, 1948, 1949, 1950, 1951, 0,
	0, 0, 1977, 1978, 1979, 1980, 0, 0, 0, 0,
	1985, 0, 0, 0, 0, 2161, 1884, 1886, 1888, 0,
	1891, 1171, 1209, 1206, 1204, 1205, 1206, 0, 1196, 1893,
	35, 2172, 0, 1900, 2234, 2235, 2236, 2203, 1246, 0,
	1258, 1047, 0, -2, -2, 0, 0, 1067, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, -2, 1091, 1157,
	1148, 1149, 0, 1101, 1212, 0, 1144, 0, 0, 1125,
	1153, 0, 0, 1231, 1231, 1231, 0, 0, 1247, 1332,
	0, 1117, 0, 1304, 1435, 0, 1574, 0, 0, 0,
	1447, 1593, 1450, 1451, 0, 0, 1456, 1317, 137, 0,
	0, 0, 0, 0, 1292, 1292, 1292, 1290, 1262, 1321,
	0, 1326, 1263, 1322, 1322, 1322, 1322, 1322, 1265, 0,
	1267, 1269, 1271, 1337, 0, 0, 0, 0, -2, 0,
	1703, 1468, 1469, 1470, -2, 61, 1751, 0, 1618, 1753,
	0, 1638, 0, 0, 1781, 0, 1776, 0, 2028, 0,
	0, 2023, 1172, 2004, 2040, 0, 0, 2030, 2031, 2036,
	2032, 2033, 0, 0, 0, 2056, 2057, 2059, 2060, 2061,
	2062, 2064, 2065, 339, 373, 2006, 0, 0, 0, 0,
	2016, 0, 2015, 2021, 1172, 0, 2005, 0, 0, 0,
	0, 2146, 2147, 0, 0, 0, 2153, 0, 0, 1782,
	0, 0, 2121, 1660, 0, 1663, 1664, 0, 0, 1709,
	1672, 0, 0, 0, 0, 0, 1666, 0, 2263, 2265,
	2238, 2239, 2240, 2241, 2242, 2243, 1213, 266, 1217, 1218,
	2143, 0, 1355, 0, 2162, 2164, 2140, 0, 2178, 0,
	1782, 0, 0, 0, 1876, 0, 1648, 1877, 1878, 0,
	0, 1632, 1635, 0, 1717, 1776, 0, 0, 1721, 1670,
	0, 0, 0, 1987, 0, 0, 1775, 1819, 0, 0,
	0, 0, 1832, 0, 1838, 1675, -2, 0, 1840, 0,
	1836, 0, 1843, 1866, 2255, 2256, 1995, 0, 0, 0,
	1850, 1858, 1851, 1859, 1871, 1872, 0, 0, 1873, 2248,
	0, 2252, 2253, 2254, 1656, 1658, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1958, 0,
	1793, 1883, 0, 1962, 0, 1795, 1883, 0, 0, 2127,
	0, 2166, 0, 2169, 1941, 0, 0, 0, 0, 0,
	0, 1976, 0, 0, 0, 0, 0, 0, 2157, 0,
	35, 1200, 1202, 1198, 1895, 2176, 0, 1314, -2, 0,
	0, 0, 0, -2, -2, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 1075, 0, 1238, 0, 1155, 1152, 1140, 1146, 0,
	1130, 0, 1136, 0, 0, 0, 0, 1138, 1139, 1122,
	0, 1592, 0, 0, 0, 1439, 1440, 0, 1446, 1448,
	0, 1455, 0, 1261, 0, 0, 0, 0, 0, 1287,
	1291, 1288, 1289, 1324, 0, 1264, 1268, 1270, 1272, 1281,
	1339, 0, 0, 467, 0, 1422, 0, 1478, 1701, 1702,
	1703, 0, 1538, 1753, 0, 1611, 1615, 1761, 1752, 0,
	0, 1639, 1641, 1642, 1661, 0, 1609, 0, 0, 2117,
	1782, 0, 0, 2042, 0, 0, 2045, 2043, 0, 0,
	0, 0, 2054, 2055, 2009, 2011, 2012, 2013, 2014, 0,
	0, 2080, 2073, 2077, 0, 0, 2151, 0, 2155, 0,
	2156, 0, 0, 2180, 0, 1665, 1667, 1708, 2245, 2245,
	0, 1713, 2113, 0, 1673, 0, 1668, 1669, 0, 1352,
	1353, 0, 2144, 0, 2142, 2170, 0, 1767, 1760, 1964,
	1970, 0, 1816, 0, 1653, 1631, 0, 1633, 1634, 1987,
	0, 1988, 0, 1990, 0, 0, 1671, 1770, 0, 1723,
	0, 0, 1728, 0, 1585, 1585, 0, 0, 1823, 1833,
	1536, 1679, 0, 0, 0, 0, 1827, 1829, 1830, 0,
	0, 1685, 0, 1700, 1688, 0, 0, 0, 0, 1703,
	-2, 1698, 1828, 0, 1676, 0, 0, 0, 0, 35,
	35, 1997, 1998, 2001, 1874, 2260, 2250, 1953, 0, 0,
	0, 0, 1961, 0, 0, 1955, 1966, 1957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1938, 1937, 35,
	1987, 0, 0, 1944, 0, 1974, 1975, 1981, 1982, 1983,
	1984, 35, 2160, 0, 0, 38, 1889, 2177, -2, -2,
	0, 0, 0, -2, 1073, 1076, 1077, 1078, 1079, 1080,
	1081, -2, -2, -2, -2, -2, -2, -2, -2, 1145,
	1231, 1131, 1133, 1134, 1308, 0, 0, 1577, 0, 0,
	1452, 1318, 1320, 1282, 0, 1284, 0, 0, 0, 1286,
	0, 0, 1266, 0, 1341, 1345, 0, 0, 0, 0,
	1381, 1421, 0, 1593, 1460, 1560, 1560, 0, 1462, 1475,
	0, 1478, 0, 1761, 0, 0, 0, 46, 0, 1637,
	0, 1643, 0, 1753, 0, 1638, 0, 2108, 0, 0,
	0, 0, 2002, 0, 1346, 0, 1168, 0, -2, 2037,
	0, 2038, 2048, 2025, 0, 2090, 0, 2107, 0, 2148,
	0, 0, 2120, 1662, 0, 1769, 0, 1769, 0, 1737,
	0, 1674, 0, 1354, 2165, 0, 2175, 0, 0, 0,
	0, 1818, 1661, 0, 1629, 1630, 1719, 1733, 1989, 1993,
	1991, 1992, 1994, 1733, 0, 1733, 0, 0, 1579, 32,
	0, 1580, 0, 1820, 0, 0, 1680, 1821, 0, 1825,
	1514, 1515, 0, 0, 1683, 1684, 1686, 1691, 1692, 0,
	1699, 1689, 1690, 0, 0, 0, 0, 0, 1355, 1678,
	1826, 1835, 1842, 0, 0, 0, 1807, 0, 1808, 1807,
	0, 0, 1968, 1959, 0, 0, 0, 1972, 1963, 0,
	2128, 2168, 1942, 1943, 0, 1986, 2158, 2159, -2, -2,
	-2, 0, 1311, 0, 0, 1570, 1315, 0, 1573, 0,
	1283, 0, 1294, 1285, 0, 1325, 1340, 0, 1343, 0,
	0, 1358, 0, 106, 0, 1362, 0, 0, 1383, 1420,
	1459, 1461, 0, 0, 0, 1555, 0, 1477, 1479, 1480,
	1541, 1541, 1483, 1484, 1541, 1541, 0, 0, 0, 1494,
	1502, 1315, 1473, 46, 0, 66, 1616, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1617, 1765, 0,
	0, 0, 1640, 1661, 1761, 1751, 1753, 1638, 0, 0,
	0, 0, 0, 1776, 0, 2028, 1348, 2049, 2041, 0,
	2046, 2047, 0, 2026, 2096, 2092, 2079, 2081, 0, 2084,
	2085, 1987, 0, 2149, 2117, 1782, 1710, 0, 2244, 1711,
	1727, 1742, 0, 1707, 0, 1214, 2178, 1766, 0, 0,
	0, 1659, 0, 2245, 0, 2245, 0, 2245, 1729, 1730,
	266, 1588, 31, 1584, 1585, 1824, 1834, 0, 1687, 1693,
	1694, 1695, 1697, 0, 2247, 2000, 1965, 1971, 1798, 1806,
	0, 0, 1800, 0, 1967, 0, 1807, 0, 0, 1945,
	1132, 1302, 0, 0, 0, 0, 1572, 1578, 1441, 0,
	1323, 1338, 1342, 0, 0, 1368, 0, 1359, 0, 1360,
	1356, 1357, 0, 0, 0, 1365, 1385, 0, 0, 0,
	1559, 0, 1557, 0, 0, 0, 0, 0, 0, 0,
	1493, 1476, 0, 1496, 1497, 1498, 1499, 1500, 0, 1463,
	1765, 0, 1750, 1767, 0, 44, 45, 0, 1644, 46,
	1753, 1761, 0, 2114, 0, 0, 2117, 1778, 0, 1347,
	2042, 2044, 2039, 0, 0, 0, 2091, 2082, 1541, 2086,
	2087, 0, 2106, 2109, 0, 0, 1712, 0, 1714, 1738,
	1739, 0, 1734, 1735, 1736, 1715, 0, 0, 2171, 0,
	1650, 0, 0, 0, 0, 1654, 1769, 0, 1769, 2113,
	1769, 0, 1591, 1586, 1587, 1588, 1581, 0, 1707, 1837,
	0, 0, 1809, 0, 1969, 1802, 0, 1973, 0, 0,
	0, 1315, 1328, 0, 1366, 0, 1370, 0, 1361, 1363,
	0, 1364, 0, 0, 1382, 1419, 1550, 1551, 0, 0,
	1562, 1552, 0, 0, 0, 1481, 1482, 1485, 1486, 1487,
	1488, 0, 1491, 1492, 1495, 0, 1503, 1505, 1767, 67,
	1596, 0, 0, 1755, 1585, 1585, 0, 1765, 1761, 46,
	1753, 2115, 2116, 2110, 1672, 0, 0, 2003, 0, 0,
	2089, 2093, 2094, 0, 0, 0, 0, 1726, 1740, 0,
	1741, 0, 0, 0, 0, 1681, 0, 1645, 0, 1649,
	1646, 0, 1652, 0, 1987, 0, 1987, 1737, 1315, 0,
	1582, 0, 1591, 1822, 1831, 2246, 1807, 1807, 0, 0,
	0, 0, 1569, 1293, 0, 1344, 1369, 1372, 1373, 0,
	0, 0, 1378, 0, 1371, 0, 0, 1384, 1386, 0,
	1553, 0, 1554, 1563, 0, 0, 0, 0, 1556, 1558,
	1489, 1490, 1501, 0, 1594, 1762, 0, 0, 1754, 0,
	32, 32, 0, 1767, 46, 1765, 1761, 1782, 0, 0,
	0, 2097, 2098, 0, 2083, 2088, 0, 2117, 1768, 1743,
	0, 1746, 1747, 0, 1744, 1682, 1706, 1716, 1651, 0,
	1655, 1720, 1732, 1722, 1742, 1987, 1731, 1589, 1590, 1583,
	1799, 1801, 1807, 0, 0, 0, 1327, 1374, 1375, 1376,
	1377, 1379, 0, 0, 0, 0, 1561, 0, 0, 1567,
	0, 1504, 1763, 1764, 1756, 1757, 31, 1758, 1585, 1598,
	1765, 1767, 46, 1767, 0, 1779, 1778, 0, 2095, 2096,
	2111, 1745, 2113, 2113, 0, 1987, 1725, 1803, 0, 0,
	0, 0, 0, 0, 1425, 0, -2, 1387, 1388, 0,
	0, 0, 32, 1767, 1597, 1765, 1315, 1777, 0, 1672,
	2101, 0, 1748, 1749, 0, 1724, 0, 1310, 1306, 1307,
	0, 1404, 0, 0, 1434, 0, 1423, 1564, 1565, 0,
	1568, 1759, 1595, 1767, 1771, 1780, 1782, 0, 2099, 2102,
	2103, 2104, 2105, 0, 1647, 0, 1367, 0, 0, 0,
	1390, 1391, 1392, 1393, 1394, 1395, 1398, 1426, 1427, 1413,
	1434, 1434, 0, 0, 0, 1599, 1767, 2067, 0, 0,
	0, 1380, 0, 1389, 1396, 1397, 1418, 0, 0, 1413,
	1404, 1433, 0, 0, 0, 1315, 2100, 0, 0, 1403,
	1402, 0, 0, 1405, 0, 1407, 0, 0, 0, 1418,
	1430, 0, 0, 1566, 1772, 2101, 1309, 1428, 0, 1415,
	1417, 1406, 1408, 0, 1411, 0, 1412, 1402, 0, 0,
	0, 0, 0, 0, 1409, 1410, 1429, 1431, 0, 2068,
	1399, 1400, 0, 0, 0, 0, 1414, 1416, 1432, 0,
	1401,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:460
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:475
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:483
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:498
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:509
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:510
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:511
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:512
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:513
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:514
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:515
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:516
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:517
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:518
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:519
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:520
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:521
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:522
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:523
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:524
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:525
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:527
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:529
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:533
		{
			yyVAL.stmt = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:545
		{
			yyVAL.str = ""
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.list = yyDollar[1].list
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:550
		{
			yyVAL.list = nil
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:555
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:556
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:560
		{
			yyVAL.ival = 1
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:561
		{
			yyVAL.ival = 0
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:565
		{
			yyVAL.ival = 1
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:566
		{
			yyVAL.ival = 0
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:570
		{
			yyVAL.ival = 1
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:571
		{
			yyVAL.ival = 0
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.bval = true
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:576
		{
			yyVAL.bval = false
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:580
		{
			yyVAL.list = yyDollar[2].list
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:581
		{
			yyVAL.list = nil
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:582
		{
			yyVAL.list = nil
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.str = yyDollar[1].str
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.str = yyDollar[1].str
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.str = yyDollar[1].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.str = yyDollar[1].str
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.str = yyDollar[1].str
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.str = yyDollar[1].str
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.str = yyDollar[1].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.str = yyDollar[1].str
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.str = yyDollar[1].str
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.str = yyDollar[1].str
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:617
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:630
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:645
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:674
		{
			yyVAL.list = yyDollar[2].list
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:675
		{
			yyVAL.list = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:684
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:697
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:703
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:709
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:715
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:721
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:728
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:735
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:741
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:760
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:776
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:786
		{
			yyVAL.str = "abort"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.str = "absent"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.str = "absolute"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:789
		{
			yyVAL.str = "access"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.str = "action"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.str = "add"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.str = "admin"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.str = "after"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = "aggregate"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = "also"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = "alter"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = "always"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:798
		{
			yyVAL.str = "asensitive"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.str = "assertion"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = "assignment"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = "at"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.str = "atomic"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.str = "attach"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = "attribute"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.str = "backward"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:806
		{
			yyVAL.str = "before"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = "begin"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = "breadth"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = "by"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = "cache"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = "call"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.str = "called"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.str = "cascade"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = "cascaded"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = "catalog"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = "chain"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = "characteristics"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = "checkpoint"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.str = "class"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = "close"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = "cluster"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = "columns"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.str = "comment"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.str = "comments"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = "commit"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = "committed"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = "compression"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = "conditional"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = "configuration"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = "conflict"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:831
		{
			yyVAL.str = "connection"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = "constraints"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = "content"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = "continue"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:835
		{
			yyVAL.str = "conversion"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.str = "copy"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = "cost"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = "csv"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = "cube"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "current"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "cursor"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "cycle"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "data"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "database"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "day"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "deallocate"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "declare"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "defaults"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "deferred"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "definer"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "delete"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "delimiter"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "delimiters"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "depends"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "depth"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "detach"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "dictionary"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "disable"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "discard"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "document"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "domain"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "double"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "drop"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "each"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "empty"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "enable"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "encoding"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "encrypted"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "enum"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "error"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "escape"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "event"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "exclude"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "excluding"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "exclusive"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "execute"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "explain"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "expression"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "extension"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "external"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "family"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "filter"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "finalize"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "first"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "following"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "force"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "format"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "forward"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "function"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "functions"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "generated"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "global"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "granted"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "groups"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "handler"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "header"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "hold"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "hour"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "identity"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "if"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "immediate"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "immutable"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "implicit"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "import"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "include"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "including"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "increment"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "indent"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "index"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "indexes"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "inherit"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "inherits"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "inline"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "input"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "insensitive"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "insert"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "instead"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "invoker"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "isolation"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "keep"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "key"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "keys"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "label"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "language"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "large"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "last"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "leakproof"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "level"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "listen"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "load"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "local"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "location"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "lock"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "locked"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "logged"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "mapping"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "match"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "matched"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "materialized"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "maxvalue"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "merge"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "method"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "minute"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "minvalue"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "mode"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "month"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "move"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "name"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "names"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "nested"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "new"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "next"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "nfc"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "nfd"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "nfkc"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "nfkd"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "no"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "normalized"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "nothing"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "notify"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "nowait"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "nulls"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "object"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "of"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "off"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "oids"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "old"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "omit"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "operator"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "option"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "options"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "ordinality"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "others"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "over"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "overriding"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "owned"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "owner"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "parallel"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "parameter"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "parser"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "partial"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "partition"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "passing"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "password"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "path"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "plan"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "plans"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "policy"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "preceding"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "prepare"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "prepared"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "preserve"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "prior"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "privileges"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "procedural"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "procedure"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "procedures"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "program"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "publication"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "quote"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "quotes"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "range"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "read"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "reassign"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "recheck"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "recursive"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "ref"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "referencing"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "refresh"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "reindex"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "relative"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "release"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "rename"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "repeatable"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "replace"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "replica"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "reset"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "restart"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "restrict"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "return"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "returns"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "revoke"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "role"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "rollback"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "rollup"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "routine"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "routines"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "rows"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "rule"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "savepoint"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "scalar"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "schema"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "schemas"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "scroll"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "search"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "second"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "security"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "sequence"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "sequences"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "serializable"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "server"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "session"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "set"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "sets"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "share"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "show"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "simple"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "skip"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "snapshot"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "source"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "sql"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "stable"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "standalone"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "start"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "statement"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "statistics"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "stdin"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "stdout"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "storage"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "stored"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "strict"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "string"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "strip"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "subscription"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "support"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "sysid"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "system"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "tables"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "tablespace"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "target"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "temp"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "template"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "temporary"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "text"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "ties"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "transaction"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "transform"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "trigger"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "truncate"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "trusted"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "type"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "types"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "uescape"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "unbounded"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "uncommitted"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "unconditional"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "unencrypted"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "unknown"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "unlisten"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "unlogged"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "until"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "update"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "vacuum"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "valid"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "validate"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "validator"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "value"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "varying"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "version"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "view"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "views"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "volatile"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "whitespace"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "within"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "without"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "work"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "wrapper"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "write"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "xml"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "year"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "yes"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "zone"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "between"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "bigint"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "bit"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "boolean"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "char"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "character"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "coalesce"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "dec"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "decimal"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "exists"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "extract"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "float"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "greatest"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "grouping"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "inout"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "int"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "integer"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "interval"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "json"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "json_array"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "json_arrayagg"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "json_exists"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "json_object"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "json_objectagg"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "json_query"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "json_scalar"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "json_serialize"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "json_table"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "json_value"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "least"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "merge_action"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "national"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "nchar"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "none"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "normalize"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "nullif"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "numeric"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "out"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "overlay"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "position"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "precision"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "real"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "row"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "setof"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "smallint"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "substring"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "time"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "timestamp"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "treat"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "trim"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "values"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "varchar"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "xmlattributes"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "xmlconcat"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "xmlelement"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "xmlexists"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "xmlforest"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "xmlparse"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "xmlpi"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "xmlroot"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "xmlserialize"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "xmltable"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "authorization"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "binary"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "collation"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "concurrently"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "cross"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "current_schema"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "freeze"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "full"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "ilike"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "inner"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "is"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "isnull"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "join"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "left"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "like"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "natural"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "notnull"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "outer"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "overlaps"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "right"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "similar"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "tablesample"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "verbose"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "all"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "analyse"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "analyze"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "and"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "any"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "array"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "as"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "asc"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "asymmetric"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "both"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "case"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "cast"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "check"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "collate"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "column"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "constraint"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "create"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "current_catalog"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "current_date"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "current_role"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "current_time"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "current_timestamp"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "current_user"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "default"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "deferrable"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "desc"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "distinct"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "do"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "else"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "end"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "except"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "false"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "fetch"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "for"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "foreign"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "from"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "grant"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "group"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "having"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "in"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "initially"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "intersect"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "into"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "lateral"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "leading"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "limit"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "localtime"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "localtimestamp"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "not"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "null"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "offset"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "on"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "only"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "or"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "order"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "placing"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "primary"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "references"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "returning"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "select"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "session_user"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "some"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "symmetric"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "system_user"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "table"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "then"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "to"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "trailing"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "true"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "union"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "unique"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "user"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "using"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "variadic"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "when"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "where"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "window"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "with"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "abort"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "absent"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "absolute"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "access"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "action"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "add"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "admin"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "after"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "aggregate"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "all"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "also"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "alter"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "always"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "analyse"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "analyze"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "and"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "any"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "asc"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "asensitive"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "assertion"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "assignment"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "asymmetric"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "at"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "atomic"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "attach"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "attribute"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "authorization"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "backward"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "before"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "begin"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "between"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "bigint"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "binary"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "bit"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "boolean"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "both"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "breadth"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "by"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "cache"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "call"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "called"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "cascade"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "cascaded"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "case"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "cast"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "catalog"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "chain"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "characteristics"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "check"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "checkpoint"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "class"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "close"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "cluster"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "coalesce"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "collate"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "collation"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "column"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "columns"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "comment"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "comments"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "commit"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "committed"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "compression"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "concurrently"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "conditional"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "configuration"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "conflict"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "connection"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "constraint"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "constraints"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "content"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "continue"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "conversion"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "copy"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "cost"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "cross"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "csv"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "cube"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "current"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "current_catalog"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "current_date"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "current_role"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "current_schema"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "current_time"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "current_timestamp"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "current_user"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "cursor"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "cycle"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "data"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "database"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "deallocate"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "dec"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "decimal"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "declare"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "default"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "defaults"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "deferrable"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "deferred"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "definer"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "delete"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "delimiter"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "delimiters"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "depends"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "depth"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "desc"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "detach"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "dictionary"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "disable"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "discard"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "distinct"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "do"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "document"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "domain"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "double"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "drop"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "each"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "else"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "empty"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "enable"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "encoding"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "encrypted"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "end"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "enum"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "error"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "escape"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "event"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "exclude"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "excluding"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "exclusive"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "execute"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "exists"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "explain"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "expression"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "extension"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "external"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "extract"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "false"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "family"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "finalize"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "first"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "float"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "following"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "force"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "foreign"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "format"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "forward"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "freeze"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "full"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "function"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "functions"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "generated"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "global"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "granted"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "greatest"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "grouping"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "groups"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "handler"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "header"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "hold"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "identity"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "if"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "ilike"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "immediate"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "immutable"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "implicit"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "import"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "in"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "include"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "including"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "increment"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "indent"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "index"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "indexes"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "inherit"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "inherits"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "initially"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "inline"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "inner"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "inout"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "input"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "insensitive"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "insert"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "instead"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "int"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "integer"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "interval"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "invoker"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "is"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "isolation"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "join"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "json"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "json_array"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "json_arrayagg"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "json_exists"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "json_object"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "json_objectagg"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "json_query"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "json_scalar"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "json_serialize"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "json_table"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "json_value"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "keep"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "key"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "keys"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "label"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "language"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "large"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "last"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "lateral"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "leading"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "leakproof"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "least"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "left"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "level"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "like"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "listen"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "load"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "local"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "localtime"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "localtimestamp"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "location"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "lock"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "locked"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "logged"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "mapping"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "match"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "matched"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "materialized"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "maxvalue"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "merge"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "merge_action"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "method"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "minvalue"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "mode"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "move"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "name"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "names"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "national"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "natural"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "nchar"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "nested"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "new"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "next"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "nfc"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "nfd"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "nfkc"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "nfkd"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "no"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "none"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "normalize"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "normalized"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "not"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "nothing"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "notify"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "nowait"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "null"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "nullif"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "nulls"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "numeric"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "object"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "of"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "off"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "oids"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "old"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "omit"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "only"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "operator"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "option"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "options"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "or"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "ordinality"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "others"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "out"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "outer"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "overlay"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "overriding"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "owned"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "owner"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "parallel"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "parameter"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "parser"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "partial"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "partition"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "passing"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "password"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "path"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "placing"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "plan"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "plans"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "policy"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "position"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "preceding"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "prepare"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "prepared"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "preserve"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "primary"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "prior"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "privileges"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "procedural"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "procedure"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "procedures"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "program"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "publication"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "quote"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "quotes"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "range"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "read"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "real"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "reassign"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "recheck"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "recursive"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "ref"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "references"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "referencing"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "refresh"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "reindex"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "relative"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "release"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "rename"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "repeatable"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "replace"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "replica"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "reset"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "restart"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "restrict"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "return"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "returns"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "revoke"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "right"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "role"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "rollback"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "rollup"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "routine"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "routines"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "row"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "rows"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "rule"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "savepoint"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "scalar"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "schema"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "schemas"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "scroll"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "search"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "security"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "select"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "sequence"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "sequences"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "serializable"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "server"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "session"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "session_user"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "set"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "setof"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "sets"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "share"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "show"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "similar"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "simple"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "skip"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "smallint"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "snapshot"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "some"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "source"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "sql"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "stable"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "standalone"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "start"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "statement"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "statistics"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "stdin"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "stdout"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "storage"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "stored"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "strict"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "string"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "strip"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "subscription"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "substring"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "support"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "symmetric"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "sysid"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "system"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "system_user"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "table"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "tables"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "tablesample"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "tablespace"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "target"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "temp"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "template"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "temporary"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "text"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "then"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "ties"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "time"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "timestamp"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "trailing"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "transaction"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "transform"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "treat"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "trigger"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "trim"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "true"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "truncate"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "trusted"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "type"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "types"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "uescape"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "unbounded"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "uncommitted"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "unconditional"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "unencrypted"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "unique"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "unknown"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "unlisten"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "unlogged"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "until"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "update"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "user"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "using"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "vacuum"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "valid"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "validate"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "validator"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "value"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "values"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "varchar"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "variadic"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "verbose"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "version"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "view"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "views"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "volatile"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "when"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "whitespace"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "work"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "wrapper"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "write"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "xml"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "xmlattributes"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "xmlconcat"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "xmlelement"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "xmlexists"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "xmlforest"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "xmlparse"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "xmlpi"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "xmlroot"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "xmlserialize"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "xmltable"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "yes"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "zone"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1792
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1797
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1806
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1811
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1816
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1821
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1826
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1831
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1836
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1841
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1846
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1851
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1856
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1861
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1047:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1894
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1050:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1899
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1907
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1052:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1912
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1920
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1054:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1925
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1933
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1056:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1938
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1946
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].list
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1058:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1954
		{
			// Create timezone function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1960
		{
			// Create timezone function call with no argument
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1062:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1974
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1063:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1979
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1064:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1984
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1065:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1989
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1994
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1999
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2004
		{
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2009
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2017
		{
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2022
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2037
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2042
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2047
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2052
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2057
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2062
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2067
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2072
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2077
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2082
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2087
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2092
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2097
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2102
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2108
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2109
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2111
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1091:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2120
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2128
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2129
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2131
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2135
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2140
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2144
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2148
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2152
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2158
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2164
		{
			// TODO: Fix GROUPING function implementation
			// Current implementation is simplified and needs proper expr_list handling
			// The expr_list should be properly converted to NodeList and assigned to Args
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     nil, // We'll need to convert expr_list properly
			}
			yyVAL.node = grouping
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2178
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2182
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2186
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2190
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2194
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2198
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2203
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2206
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2209
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2210
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2211
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2216
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2220
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2230
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2234
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2240
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2241
		{
			yyVAL.node = nil
		}
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2245
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2249
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2253
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2257
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2262
		{
			yyVAL.list = nil
		}
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2264
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2276
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2285
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2289
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2293
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2304
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2308
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2314
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1132:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2320
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2328
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2334
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2342
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2346
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2353
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2357
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2361
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2368
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2373
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2374
		{
			yyVAL.node = nil
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2378
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2380
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2388
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2394
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2395
		{
			yyVAL.node = nil
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2400
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2404
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2408
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2413
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2415
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2422
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2423
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2427
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2439
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2453
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2456
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2457
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2460
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2461
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2462
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2468
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2472
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2476
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2487
		{
			yyVAL.list = nil
		}
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2493
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2499
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2510
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2514
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2518
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2522
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2530
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2534
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2538
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2542
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2550
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2556
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2560
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2566
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2570
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2576
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2584
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2592
		{
			yyVAL.str = "varchar"
		}
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2596
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2604
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2612
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2622
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2633
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2647
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2659
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1200:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2671
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2681
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2691
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2701
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2712
		{
			yyVAL.ival = 1
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2713
		{
			yyVAL.ival = 0
		}
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2714
		{
			yyVAL.ival = 0
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2717
		{
			yyVAL.ival = 1
		}
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2718
		{
			yyVAL.ival = 0
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2722
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2732
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2739
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2750
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2754
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2763
		{
			yyVAL.str = "+"
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2764
		{
			yyVAL.str = "-"
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2765
		{
			yyVAL.str = "*"
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2766
		{
			yyVAL.str = "/"
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2767
		{
			yyVAL.str = "%"
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.str = "^"
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2769
		{
			yyVAL.str = "<"
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2770
		{
			yyVAL.str = ">"
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2771
		{
			yyVAL.str = "="
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.str = "<="
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.str = ">="
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2774
		{
			yyVAL.str = "<>"
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2782
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2790
		{
			yyVAL.list = nil
		}
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.node = nil
		}
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2796
		{
			yyVAL.node = nil
		}
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2799
		{
			yyVAL.node = nil
		}
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2802
		{
			yyVAL.ival = 0
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.ival = 0
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2807
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2812
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2828
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2837
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2838
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2846
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2848
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2862
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2874
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2886
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2896
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2907
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2908
		{
			yyVAL.list = nil
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2912
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2913
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2918
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2922
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2927
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2932
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2943
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2944
		{
			yyVAL.list = nil
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2948
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2949
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2958
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2966
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2977
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2988
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2992
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2998
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3006
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3015
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3023
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3032
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3040
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3052
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3058
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3065
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3071
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3077
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3087
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3091
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3097
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3114
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3118
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3127
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3153
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3179
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3187
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3197
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3198
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3199
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3200
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3205
		{
			yyVAL.ival = 1
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3206
		{
			yyVAL.ival = 0
		}
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3216
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3227
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3238
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3242
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3246
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3252
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3253
		{
			yyVAL.with = nil
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3258
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3262
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3270
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3298
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3299
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3300
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1306:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3305
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3311
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3317
		{
			yyVAL.node = nil
		}
	case 1309:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3324
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3333
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3341
		{
			yyVAL.node = nil
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3352
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3360
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3374
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3375
		{
			yyVAL.node = nil
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3379
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3389
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3393
		{
			yyVAL.node = nil
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3397
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3405
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.alias = nil
		}
	case 1323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3411
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3416
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3420
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3433
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3437
		{
			yyVAL.alias = nil
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.ival = 1
		}
	case 1330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.ival = 0
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3450
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3451
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3455
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3456
		{
			yyVAL.list = nil
		}
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3466
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3469
		{
			yyVAL.into = nil
		}
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3480
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3489
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.ival = 1
		}
	case 1340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.ival = 0
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3510
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3517
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3526
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3527
		{
			yyVAL.list = nil
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3537
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3541
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3553
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3566
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3567
		{
			yyVAL.list = nil
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3573
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3577
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3586
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3597
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3602
		{
			yyVAL.node = nil
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3607
		{
			yyVAL.str = "BY REF"
		}
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3608
		{
			yyVAL.str = "BY VALUE"
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3614
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3634
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3638
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3646
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3651
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1366:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3660
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1367:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3668
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3683
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3692
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3697
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3702
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3712
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3716
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3729
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3733
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3737
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1380:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3754
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3778
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3789
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3790
		{
			yyVAL.node = nil
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3796
		{
			yyVAL.node = nil
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3800
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3801
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3806
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3814
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3822
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3833
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3834
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3835
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3837
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3838
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3840
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3845
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3849
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3853
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.node = nil
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3862
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3863
		{
			yyVAL.node = nil
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3868
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3869
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3870
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3871
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3872
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3873
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3874
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3875
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3876
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3881
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3882
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3883
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3884
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3891
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3911
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3921
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3922
		{
			yyVAL.node = nil
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3927
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.node = nil
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3934
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3938
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3947
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3956
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1429:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3970
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3984
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1431:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3995
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1432:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4004
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4015
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.node = nil
		}
	case 1435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4032
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4044
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4048
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4057
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4063
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4070
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1441:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4077
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4085
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4094
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4095
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4100
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4104
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4112
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1448:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4124
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4137
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4141
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4152
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4158
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4178
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4184
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4185
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1456:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4195
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4207
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4211
		{
			yyVAL.list = nil
		}
	case 1459:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4226
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4243
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4247
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1462:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4258
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1463:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4282
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4318
		{
			yyVAL.ival = 1
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4319
		{
			yyVAL.ival = 0
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4323
		{
			yyVAL.ival = 1
		}
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4324
		{
			yyVAL.ival = 0
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4328
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4329
		{
			yyVAL.str = ""
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4330
		{
			yyVAL.str = ""
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4335
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4338
		{
			yyVAL.node = nil
		}
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4343
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4346
		{
			yyVAL.node = nil
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4350
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4351
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4356
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.list = nil
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4371
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4375
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4379
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4383
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4387
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4391
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4395
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4399
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4403
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4407
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4411
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4415
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4419
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4423
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4427
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4435
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4439
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4446
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4452
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4453
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4454
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4455
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4456
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.node = nil
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4462
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4466
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4472
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4476
		{
			yyVAL.str = "true"
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4477
		{
			yyVAL.str = "false"
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4478
		{
			yyVAL.str = "on"
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4479
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4483
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4484
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4486
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4491
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4495
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4496
		{
			yyVAL.node = nil
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4501
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4502
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4503
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4504
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4505
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4511
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4517
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4518
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4519
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4520
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4521
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4531
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4543
		{
			yyVAL.ival = 1
		}
	case 1537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4544
		{
			yyVAL.ival = 0
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4560
		{
			yyVAL.node = nil
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4562
		{
			yyVAL.node = nil
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4570
		{
			yyVAL.ival = 1
		}
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4571
		{
			yyVAL.ival = 0
		}
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4575
		{
			yyVAL.ival = 1
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4576
		{
			yyVAL.ival = 0
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4580
		{
			yyVAL.ival = 1
		}
	case 1547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4581
		{
			yyVAL.ival = 0
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4585
		{
			yyVAL.ival = 1
		}
	case 1549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4586
		{
			yyVAL.ival = 0
		}
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4595
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4601
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4607
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4613
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4619
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4627
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4628
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4632
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4633
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4637
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4638
		{
			yyVAL.node = nil
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4643
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4658
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4667
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4674
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4681
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4694
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4707
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4716
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1569:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4731
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4741
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4749
		{
			yyVAL.onconflict = nil
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4760
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4769
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4776
		{
			yyVAL.node = nil
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4787
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4791
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4798
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4802
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4809
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4814
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4819
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4827
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4838
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4852
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4853
		{
			yyVAL.list = nil
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4857
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4858
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4859
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4864
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4865
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4874
		{
			yyVAL.list = nil
		}
	case 1594:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4895
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1595:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4911
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1596:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4928
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1597:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:4944
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1598:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:4961
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1599:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:4978
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4996
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4997
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4998
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4999
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5000
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5002
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5003
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5007
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5008
		{
			yyVAL.list = nil
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5013
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5018
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5025
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5026
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5027
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5039
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5043
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5047
		{
			yyVAL.ival = 0
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5057
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5058
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5059
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5061
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5068
		{
			yyVAL.str = "default"
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5072
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5073
		{
			yyVAL.str = ""
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5077
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5078
		{
			yyVAL.str = "default"
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.str = ""
		}
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5088
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5089
		{
			yyVAL.list = nil
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5094
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5100
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5107
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5108
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5113
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5119
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5130
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5159
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1647:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5168
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5178
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5187
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5194
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5198
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5206
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.list = nil
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5216
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5224
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5230
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5235
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5240
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5252
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5257
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5264
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5269
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5270
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5272
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5285
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5290
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5295
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5300
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5308
		{
			yyVAL.bval = true
		}
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5309
		{
			yyVAL.bval = false
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5310
		{
			yyVAL.bval = true
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5314
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5315
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5320
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5322
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5327
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5335
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5345
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5351
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5352
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5357
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5361
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5365
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5369
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5373
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5377
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5381
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5385
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5389
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5393
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5397
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5401
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5405
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5409
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5413
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5417
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5423
		{
		}
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5424
		{
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5428
		{
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5429
		{
		}
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5430
		{
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5435
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.bval = false
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5447
		{
			yyVAL.list = nil
		}
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5452
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5460
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5469
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5475
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5481
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5487
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5504
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1716:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5511
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5521
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5526
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5531
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1720:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5539
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5550
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1722:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5561
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5571
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1724:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5582
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1725:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5603
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.bval = true
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.bval = false
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5624
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5630
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5638
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5643
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5651
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5655
		{
			yyVAL.list = nil
		}
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5662
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5666
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5670
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5681
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5691
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5701
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5708
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5715
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5730
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5743
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5750
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5757
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5764
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5771
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5778
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5787
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5788
		{
			yyVAL.list = nil
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5792
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5793
		{
			yyVAL.partspec = nil
		}
	case 1754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5798
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5806
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5811
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5819
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5826
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5833
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5842
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5843
		{
			yyVAL.str = ""
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5847
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5848
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5849
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5850
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5854
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5855
		{
			yyVAL.str = ""
		}
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5859
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5860
		{
			yyVAL.str = ""
		}
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5864
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1771:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5877
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1772:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5892
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5908
		{
			yyVAL.bval = true
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5909
		{
			yyVAL.bval = false
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5913
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5914
		{
			yyVAL.str = "btree"
		}
	case 1777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5919
		{
			yyVAL.list = nil
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5924
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5929
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5937
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5938
		{
			yyVAL.list = nil
		}
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5950
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1784:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5956
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5963
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1786:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5969
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5976
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5985
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1789:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5991
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5998
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1791:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6004
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1792:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6011
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1793:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6017
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6024
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1795:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6030
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6037
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1797:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6046
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1798:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6056
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1799:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6063
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1800:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6071
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1801:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6078
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1802:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6086
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1803:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6093
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6109
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6117
		{
			yyVAL.bval = true
		}
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.bval = false
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6123
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6128
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6136
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6167
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6190
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6197
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6204
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6215
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1816:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6222
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6229
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1818:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6236
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1819:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6243
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1820:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6248
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1821:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6253
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1822:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6258
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1823:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6263
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1824:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6268
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1825:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6275
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1826:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6280
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1827:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6287
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1828:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1829:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1830:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6302
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1831:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6307
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1832:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6317
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1833:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6322
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1834:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6329
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1835:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6336
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6344
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1837:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6355
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6365
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6370
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6375
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6386
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1842:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6391
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6399
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6407
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6412
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6417
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6422
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6427
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6432
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6437
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6442
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6447
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6452
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6457
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6462
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6467
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6472
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6477
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6482
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6487
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6492
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6497
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6502
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6508
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6513
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6520
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6525
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6530
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6535
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6540
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6545
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6550
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1873:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6555
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1874:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6560
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6564
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6572
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6580
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6587
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6598
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6607
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6608
		{
			yyVAL.node = nil
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6612
		{
		}
	case 1883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6613
		{
		}
	case 1884:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6624
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6637
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1886:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6650
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1887:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6663
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1888:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6676
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1889:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6691
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6706
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1891:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6719
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1892:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6732
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1893:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6745
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6758
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1895:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6771
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6787
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6793
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6799
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6808
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1900:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6819
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6825
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6829
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6836
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6840
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6846
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6847
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6851
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6856
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6857
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6858
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6859
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6860
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6861
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6862
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6863
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6864
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6865
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6866
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6867
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6868
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6878
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6879
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6880
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6881
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6882
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6895
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6900
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.node = objWithArgs
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6914
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.node = objWithArgs
		}
	case 1932:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6928
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1933:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6939
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1934:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6950
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1935:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6961
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1936:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6972
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1937:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6983
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1938:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6995
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1939:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7006
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7017
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1941:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7028
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1942:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7039
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1943:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7056
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1944:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7073
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1945:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7085
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1946:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7097
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1947:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7108
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1948:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7119
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].node,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1949:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7130
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1950:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7141
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1951:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7152
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1952:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7163
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1953:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7174
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1954:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7185
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1955:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7196
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1956:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7207
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1957:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7218
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1958:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7229
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1959:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7240
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1960:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7251
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1961:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7262
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1962:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7273
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1963:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7284
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1964:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7295
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1965:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7308
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1966:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7321
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1967:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7334
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1968:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7347
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1969:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7360
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1970:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7373
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1971:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7385
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1972:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7397
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1973:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7410
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1974:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7423
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1975:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7435
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1976:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7447
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1977:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7458
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1978:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7469
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1979:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7480
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1980:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7491
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1981:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7502
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1982:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7513
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1983:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7524
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1984:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7535
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1985:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7546
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1986:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7557
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1987:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7583
		{
			yyVAL.ival = 0
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7585
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 1989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7599
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 1990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7600
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7601
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 1992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7602
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 1993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7603
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 1994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7604
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 1995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7608
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7613
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 1997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7618
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7626
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7630
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2000:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7634
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2001:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7638
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2002:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7652
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2003:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7666
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2004:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7682
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2005:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7697
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7712
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7713
		{
			yyVAL.list = nil
		}
	case 2008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7718
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7722
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7730
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7734
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7739
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7747
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7756
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7765
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7774
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7783
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7794
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7795
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7796
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7797
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7798
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7802
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7806
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2025:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7808
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2026:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7818
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7830
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7831
		{
			yyVAL.list = nil
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7836
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7842
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7850
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7854
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7858
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7862
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7866
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7873
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7879
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7889
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2039:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7895
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7903
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2041:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7907
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7919
		{
			yyVAL.node = nil
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7926
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7935
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7945
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7951
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7952
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2048:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7957
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2049:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7961
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7965
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7969
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7973
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7977
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7981
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7985
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2056:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7989
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2057:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7993
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7997
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8001
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8009
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8013
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8017
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8021
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8028
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8032
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2067:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8048
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2068:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8080
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8111
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8112
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8113
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8118
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8120
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8160
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8167
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8174
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8181
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8188
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8197
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2080:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8198
		{
			yyVAL.list = nil
		}
	case 2081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8202
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8207
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2083:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8215
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8226
		{
			yyVAL.bval = true
		}
	case 2085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8227
		{
			yyVAL.bval = false
		}
	case 2086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8231
		{
			yyVAL.bval = true
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8232
		{
			yyVAL.bval = false
		}
	case 2088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8236
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8241
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8245
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8257
		{
			yyVAL.bval = true
		}
	case 2094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8258
		{
			yyVAL.bval = false
		}
	case 2095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8262
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8263
		{
			yyVAL.node = nil
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8272
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8277
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8281
		{
			yyVAL.list = nil
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8286
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8289
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8290
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8291
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8295
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8296
		{
			yyVAL.rangevar = nil
		}
	case 2108:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8309
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2109:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8325
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2110:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8341
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2111:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8357
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8374
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8375
		{
			yyVAL.list = nil
		}
	case 2114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8379
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8380
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8381
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8382
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8393
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8400
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2120:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8407
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8414
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8430
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8448
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8454
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8459
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8464
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8470
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2128:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8478
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8486
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8501
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8517
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8523
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8528
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8533
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8539
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8544
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8549
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8554
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8559
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2140:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8564
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8569
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2142:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8574
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2143:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8579
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2144:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8590
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8595
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8603
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8609
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8615
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8621
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8635
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8639
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8647
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8654
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8661
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8665
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8673
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2157:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8680
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2158:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8688
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2159:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8697
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8706
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8714
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8730
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8732
		{
			yyVAL.list = nil
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8737
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8739
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8744
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8753
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8758
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8769
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2170:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8789
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2171:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8797
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8808
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8814
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8815
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8820
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8832
		{
			yyVAL.bval = true
		}
	case 2177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.bval = false
		}
	case 2178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8834
		{
			yyVAL.bval = true
		}
	case 2179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8839
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8848
		{
			yyVAL.list = nil
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8859
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8861
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8865
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8870
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8875
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8880
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8888
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8893
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8898
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8902
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8913
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8921
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8925
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8929
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8933
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8940
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8944
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8951
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8957
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8964
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8965
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8969
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8970
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8971
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8972
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8973
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8974
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8975
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8976
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8977
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8981
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8982
		{
			yyVAL.str = "default"
		}
	case 2217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8983
		{
			yyVAL.str = ""
		}
	case 2218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8987
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8988
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8992
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8993
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8995
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8999
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9000
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9005
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9011
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9016
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9024
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9028
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9032
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9036
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9040
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9046
		{
			yyVAL.str = "read uncommitted"
		}
	case 2235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9047
		{
			yyVAL.str = "read committed"
		}
	case 2236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9048
		{
			yyVAL.str = "repeatable read"
		}
	case 2237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9049
		{
			yyVAL.str = "serializable"
		}
	case 2238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9053
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9054
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9055
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9058
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9059
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9060
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9064
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9065
		{
			yyVAL.list = nil
		}
	case 2246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9069
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9070
		{
			yyVAL.node = nil
		}
	case 2248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9074
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9079
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9084
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9092
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9096
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9102
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9108
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9114
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9115
		{
			yyVAL.str = ""
		}
	case 2257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9119
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9120
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9121
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9122
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9126
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9131
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9136
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9143
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9144
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
