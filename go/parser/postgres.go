// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package parser

import __yyfmt__ "fmt"

//line postgres.y:24

import (
	"fmt"
	"github.com/multigres/multigres/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// ImportQual - Private struct for the result of import_qualification production
// Matches PostgreSQL's ImportQual from gram.y
type ImportQual struct {
	typ        ast.ImportForeignSchemaType
	tableNames *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:72
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into                *ast.IntoClause
	onconflict          *ast.OnConflictClause
	windef              *ast.WindowDef
	createStmt          *ast.CreateStmt
	createAsStmt        *ast.CreateTableAsStmt
	createAssertionStmt *ast.CreateAssertionStmt
	ruleStmt            *ast.RuleStmt
	indexStmt           *ast.IndexStmt
	alterStmt           *ast.AlterTableStmt
	dropStmt            *ast.DropStmt
	columnDef           *ast.ColumnDef
	constraint          *ast.Constraint
	indexElem           *ast.IndexElem
	alterCmd            *ast.AlterTableCmd
	with                *ast.WithClause
	rangevar            *ast.RangeVar
	objType             ast.ObjectType
	dropBehav           ast.DropBehavior
	setquant            ast.SetQuantifier
	typnam              *ast.TypeName
	partspec            *ast.PartitionSpec
	partboundspec       *ast.PartitionBoundSpec
	oncommit            ast.OnCommitAction
	defelt              *ast.DefElem
	target              *ast.ResTarget            // For select targets, insert columns
	alias               *ast.Alias                // For table and column aliases
	jtype               ast.JoinType              // For join type specifications
	jexpr               *ast.JoinExpr             // For joined table expressions
	keyaction           *ast.KeyAction            // For foreign key actions
	keyactions          *ast.KeyActions           // For foreign key action sets
	funparam            *ast.FunctionParameter    // For function parameters
	funparammode        ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt            *ast.VariableSetStmt      // For SET/RESET statements
	rolespec            *ast.RoleSpec
	objwithargs         *ast.ObjectWithArgs
	statelem            *ast.StatsElem
	accesspriv          *ast.AccessPriv             // For privilege specifications
	privtarget          *PrivTarget                 // For privilege target specifications
	vacrel              *ast.VacuumRelation         // For vacuum relation specifications
	importqual          *ImportQual                 // For import qualification specifications
	importqualtype      ast.ImportForeignSchemaType // For import qualification type

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ASSERTION = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ASSERTION",
	"ANALYSE",
	"ASENSITIVE",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:15604

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 130,
	540, 130,
	-2, 1637,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	1, 1551,
	26, 1551,
	36, 1551,
	74, 1551,
	100, 1551,
	532, 1551,
	540, 1551,
	-2, 1555,
	-1, 136,
	67, 1965,
	84, 1965,
	85, 2713,
	236, 2898,
	307, 2132,
	419, 1965,
	480, 1965,
	-2, 143,
	-1, 177,
	68, 1554,
	69, 1554,
	130, 1554,
	269, 1554,
	280, 1554,
	316, 1554,
	470, 1554,
	509, 1554,
	-2, 1556,
	-1, 189,
	1, 130,
	540, 130,
	-2, 1637,
	-1, 233,
	85, 2712,
	-2, 1964,
	-1, 325,
	61, 351,
	64, 351,
	527, 351,
	533, 351,
	-2, 2754,
	-1, 768,
	85, 2713,
	-2, 1965,
	-1, 794,
	1, 354,
	540, 354,
	-2, 3227,
	-1, 795,
	1, 395,
	540, 395,
	-2, 3227,
	-1, 796,
	1, 286,
	540, 286,
	-2, 3227,
	-1, 797,
	1, 328,
	540, 328,
	-2, 3227,
	-1, 802,
	1, 290,
	540, 290,
	-2, 3227,
	-1, 803,
	1, 207,
	540, 207,
	-2, 3227,
	-1, 837,
	7, 1467,
	16, 1467,
	17, 1467,
	531, 1467,
	-2, 149,
	-1, 838,
	7, 1468,
	16, 1468,
	17, 1468,
	531, 1468,
	-2, 150,
	-1, 863,
	68, 1540,
	69, 1540,
	130, 1540,
	280, 1540,
	-2, 1557,
	-1, 869,
	68, 1541,
	69, 1541,
	130, 1541,
	280, 1541,
	-2, 1560,
	-1, 927,
	84, 1965,
	480, 1965,
	-2, 142,
	-1, 929,
	209, 131,
	-2, 2719,
	-1, 1016,
	531, 1469,
	-2, 3177,
	-1, 1037,
	93, 3034,
	398, 2168,
	401, 3034,
	-2, 2061,
	-1, 1041,
	93, 3034,
	398, 2168,
	401, 3034,
	-2, 2061,
	-1, 1123,
	531, 2061,
	-2, 2560,
	-1, 1224,
	74, 159,
	-2, 165,
	-1, 1308,
	68, 1540,
	69, 1540,
	130, 1540,
	280, 1540,
	-2, 1561,
	-1, 1362,
	7, 1258,
	531, 1258,
	-2, 532,
	-1, 1377,
	7, 583,
	16, 583,
	17, 583,
	531, 583,
	-2, 1306,
	-1, 1399,
	7, 1512,
	-2, 533,
	-1, 1407,
	7, 1482,
	-2, 516,
	-1, 1408,
	7, 1517,
	531, 1517,
	-2, 517,
	-1, 1409,
	7, 1489,
	-2, 518,
	-1, 1410,
	7, 1517,
	531, 1517,
	-2, 519,
	-1, 1411,
	7, 1517,
	531, 1517,
	-2, 520,
	-1, 1412,
	7, 1476,
	-2, 522,
	-1, 1413,
	7, 1476,
	-2, 523,
	-1, 1414,
	7, 1519,
	-2, 526,
	-1, 1415,
	7, 1479,
	-2, 530,
	-1, 1416,
	7, 1480,
	-2, 531,
	-1, 1418,
	7, 1517,
	531, 1517,
	-2, 547,
	-1, 1419,
	7, 1476,
	-2, 551,
	-1, 1420,
	7, 1483,
	-2, 556,
	-1, 1421,
	7, 1481,
	-2, 559,
	-1, 1422,
	7, 1515,
	-2, 561,
	-1, 1423,
	7, 1515,
	-2, 562,
	-1, 1424,
	7, 1500,
	531, 1500,
	-2, 566,
	-1, 1581,
	6, 2061,
	12, 2061,
	534, 2061,
	535, 2061,
	-2, 2054,
	-1, 1658,
	531, 1393,
	-2, 3179,
	-1, 1981,
	16, 1471,
	17, 1471,
	-2, 1392,
	-1, 2093,
	127, 2996,
	411, 2996,
	-2, 1131,
	-1, 2127,
	21, 1430,
	432, 1430,
	510, 1430,
	-2, 893,
	-1, 2129,
	21, 1432,
	432, 1432,
	510, 1432,
	-2, 840,
	-1, 2134,
	1, 709,
	26, 709,
	36, 709,
	64, 709,
	65, 709,
	68, 709,
	69, 709,
	71, 709,
	72, 709,
	73, 709,
	74, 709,
	100, 709,
	130, 709,
	269, 709,
	280, 709,
	316, 709,
	470, 709,
	484, 709,
	509, 709,
	515, 709,
	532, 709,
	540, 709,
	541, 709,
	-2, 1546,
	-1, 2139,
	21, 1524,
	432, 1524,
	510, 1524,
	-2, 1520,
	-1, 2596,
	68, 1555,
	69, 1555,
	130, 1555,
	269, 1555,
	280, 1555,
	316, 1555,
	470, 1555,
	509, 1555,
	-2, 1227,
	-1, 2605,
	7, 1393,
	531, 1393,
	-2, 1276,
	-1, 2735,
	117, 143,
	307, 2132,
	460, 143,
	-2, 1965,
	-1, 2788,
	536, 165,
	-2, 2550,
	-1, 2824,
	531, 2134,
	-2, 275,
	-1, 2903,
	40, 1476,
	134, 1476,
	509, 1476,
	527, 1476,
	529, 1476,
	532, 1476,
	541, 1476,
	-2, 1471,
	-1, 3120,
	531, 2061,
	-2, 2561,
	-1, 3263,
	36, 3001,
	66, 3001,
	-2, 557,
	-1, 3264,
	36, 3002,
	66, 3002,
	-2, 430,
	-1, 3270,
	127, 2999,
	411, 2999,
	-2, 1240,
	-1, 3271,
	127, 3000,
	411, 3000,
	-2, 1241,
	-1, 3287,
	1, 475,
	26, 475,
	36, 475,
	64, 475,
	65, 475,
	68, 475,
	69, 475,
	71, 475,
	72, 475,
	74, 475,
	100, 475,
	130, 475,
	269, 475,
	280, 475,
	316, 475,
	470, 475,
	484, 475,
	509, 475,
	515, 475,
	529, 475,
	532, 475,
	533, 475,
	540, 475,
	-2, 174,
	-1, 3288,
	1, 473,
	26, 473,
	36, 473,
	64, 473,
	65, 473,
	68, 473,
	69, 473,
	71, 473,
	72, 473,
	74, 473,
	100, 473,
	130, 473,
	269, 473,
	280, 473,
	316, 473,
	470, 473,
	484, 473,
	509, 473,
	515, 473,
	529, 473,
	532, 473,
	533, 473,
	540, 473,
	-2, 174,
	-1, 3291,
	1, 492,
	26, 492,
	36, 492,
	64, 492,
	65, 492,
	68, 492,
	69, 492,
	71, 492,
	72, 492,
	74, 492,
	100, 492,
	130, 492,
	269, 492,
	280, 492,
	316, 492,
	470, 492,
	484, 492,
	509, 492,
	515, 492,
	529, 492,
	532, 492,
	533, 492,
	540, 492,
	-2, 174,
	-1, 3305,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1144,
	-1, 3306,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1145,
	-1, 3307,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1146,
	-1, 3308,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1147,
	-1, 3309,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1148,
	-1, 3310,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1149,
	-1, 3314,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 3320,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1160,
	-1, 3365,
	363, 1420,
	-2, 1423,
	-1, 3444,
	68, 1555,
	69, 1555,
	130, 1555,
	269, 1555,
	280, 1555,
	316, 1555,
	470, 1555,
	509, 1555,
	-2, 1227,
	-1, 3562,
	209, 131,
	-2, 2719,
	-1, 3636,
	536, 166,
	-2, 2550,
	-1, 3749,
	507, 2635,
	-2, 2628,
	-1, 4080,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1158,
	-1, 4081,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1162,
	-1, 4087,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1164,
	-1, 4122,
	363, 1419,
	-2, 1422,
	-1, 4260,
	75, 1659,
	76, 1659,
	77, 1659,
	78, 1659,
	79, 1659,
	81, 1659,
	82, 1659,
	-2, 1555,
	-1, 4274,
	531, 1393,
	-2, 166,
	-1, 4280,
	150, 1899,
	-2, 1834,
	-1, 4469,
	6, 2061,
	12, 2061,
	534, 2061,
	535, 2061,
	-2, 2035,
	-1, 4706,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1157,
	-1, 4709,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1166,
	-1, 4712,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1161,
	-1, 4717,
	52, 0,
	53, 0,
	54, 0,
	-2, 1179,
	-1, 4724,
	21, 1429,
	432, 1429,
	510, 1429,
	-2, 1521,
	-1, 4728,
	363, 1421,
	-2, 1424,
	-1, 4759,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1209,
	-1, 4760,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1210,
	-1, 4761,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1211,
	-1, 4762,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1212,
	-1, 4763,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1213,
	-1, 4764,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1214,
	-1, 5198,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1159,
	-1, 5199,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1163,
	-1, 5203,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1165,
	-1, 5204,
	52, 0,
	53, 0,
	54, 0,
	-2, 1180,
	-1, 5207,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1181,
	-1, 5208,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1183,
	-1, 5331,
	540, 130,
	-2, 1637,
	-1, 5499,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1167,
	-1, 5500,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1182,
	-1, 5501,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1184,
	-1, 5509,
	52, 0,
	-2, 1217,
	-1, 5768,
	52, 0,
	-2, 1218,
	-1, 5955,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 515,
	-1, 6181,
	532, 2708,
	540, 2708,
	-2, 1637,
	-1, 6270,
	540, 1551,
	-2, 1555,
	-1, 6304,
	7, 1784,
	-2, 352,
	-1, 6319,
	532, 2708,
	540, 2708,
	-2, 1637,
	-1, 6332,
	7, 1512,
	-2, 533,
}

const yyPrivate = 57344

const yyLast = 120100

var yyAct = [...]int16{
	740, 5783, 6301, 6354, 5528, 5965, 5784, 6149, 5773, 5312,
	6355, 6371, 1327, 4143, 4067, 4948, 3402, 6302, 3521, 134,
	1115, 113, 3467, 980, 864, 3708, 6272, 874, 179, 5802,
	4287, 2701, 5321, 2591, 5854, 5954, 4453, 6015, 6032, 5875,
	4201, 6020, 4377, 761, 9, 1851, 5265, 5404, 2685, 6137,
	3470, 3206, 5661, 5751, 6192, 5904, 5072, 6273, 5803, 4065,
	5264, 6105, 5752, 4867, 4858, 4131, 6088, 5749, 3506, 3279,
	132, 3493, 3972, 1024, 5882, 2707, 5877, 3516, 5733, 5590,
	4439, 4304, 5876, 1569, 5567, 966, 5526, 5256, 5953, 5657,
	5132, 3571, 5927, 1052, 4635, 1874, 3483, 3961, 5684, 5403,
	760, 8, 2808, 4854, 3703, 3667, 5639, 4284, 4269, 1252,
	5286, 3528, 3427, 759, 7, 1980, 3167, 1484, 5328, 1109,
	4922, 5078, 5693, 5073, 4380, 5001, 4354, 5095, 4952, 3512,
	3563, 1655, 78, 762, 10, 3485, 1877, 4305, 5596, 1207,
	155, 1990, 4, 328, 328, 4862, 5296, 766, 22, 732,
	737, 5272, 749, 753, 4788, 765, 21, 328, 5573, 2734,
	20, 2733, 19, 767, 109, 1354, 763, 105, 817, 818,
	820, 5495, 3856, 1522, 764, 23, 1302, 836, 4915, 3625,
	5292, 179, 741, 2732, 13, 882, 3510, 4559, 1479, 4227,
	2898, 1062, 4340, 4252, 2731, 12, 882, 2101, 5191, 3973,
	882, 1461, 5174, 3988, 3955, 4357, 929, 3702, 933, 938,
	933, 3956, 933, 2892, 1552, 3811, 4468, 179, 933, 3652,
	4447, 4985, 2763, 933, 4424, 3626, 179, 2772, 2767, 2757,
	1745, 3538, 3765, 9, 2706, 3508, 3551, 882, 882, 882,
	882, 2800, 910, 792, 836, 933, 933, 3542, 933, 1017,
	4263, 872, 938, 4244, 1017, 1313, 1017, 2895, 3471, 4695,
	3572, 906, 4255, 3484, 2687, 4142, 933, 4099, 933, 1014,
	3377, 4210, 2600, 933, 1027, 3330, 1029, 3428, 3246, 1771,
	938, 1978, 934, 1017, 1017, 1017, 836, 1342, 4828, 3157,
	8, 2894, 1876, 755, 4466, 896, 1258, 2933, 1781, 909,
	3707, 824, 3589, 7, 1627, 2743, 2819, 3663, 1466, 758,
	6, 2785, 908, 1438, 1507, 3541, 328, 328, 882, 3530,
	879, 78, 4276, 10, 1856, 3488, 3492, 1899, 3491, 155,
	3490, 903, 911, 2593, 2686, 750, 3481, 22, 4135, 3374,
	3370, 3331, 833, 1332, 133, 21, 881, 3417, 1481, 20,
	2102, 19, 2141, 109, 1287, 3340, 105, 3337, 2090, 2070,
	3269, 1213, 1918, 1897, 23, 3259, 1762, 1122, 1850, 3601,
	1735, 1023, 993, 13, 895, 1769, 3588, 3810, 964, 1559,
	3587, 319, 3436, 2896, 12, 928, 1531, 5568, 1983, 1534,
	3503, 1355, 203, 800, 800, 1288, 201, 3284, 3400, 1867,
	2615, 1323, 1314, 2073, 2091, 789, 272, 2071, 811, 1263,
	1215, 754, 1168, 1203, 3176, 1113, 1120, 1107, 1059, 1759,
	2939, 3015, 2784, 1618, 1612, 2771, 3535, 4358, 226, 2713,
	1600, 887, 2106, 2074, 1615, 177, 1295, 1297, 1296, 744,
	1848, 1660, 2072, 772, 2764, 304, 902, 830, 885, 713,
	806, 806, 321, 274, 1153, 320, 892, 863, 178, 1488,
	2109, 1709, 900, 5734, 1951, 894, 5737, 1202, 5734, 1749,
	2139, 1749, 6423, 2109, 826, 4212, 1786, 1634, 868, 6421,
	1750, 6339, 1750, 1571, 2904, 2662, 6298, 1338, 6380, 4068,
	4159, 5012, 1749, 5681, 4169, 4170, 4171, 133, 2662, 6,
	2928, 5200, 1749, 1750, 1749, 6297, 5202, 1749, 907, 1749,
	4045, 3168, 4136, 1750, 2663, 1750, 3756, 6419, 1750, 1749,
	1750, 2672, 1338, 871, 873, 4159, 6339, 6379, 4173, 6126,
	1750, 5925, 3253, 133, 4159, 1949, 6380, 2139, 4175, 3755,
	2109, 5527, 133, 1235, 2121, 2122, 2123, 3476, 3757, 2109,
	1573, 1530, 3130, 6367, 2139, 6364, 2664, 2109, 3169, 2665,
	6347, 937, 5987, 2670, 2660, 2662, 742, 752, 6338, 2660,
	2667, 2671, 2666, 4175, 2668, 6313, 5447, 6339, 2669, 2132,
	2133, 2663, 2662, 250, 6314, 4713, 2139, 4637, 2672, 2109,
	5715, 1862, 1524, 1742, 823, 3169, 717, 3169, 2663, 809,
	1524, 781, 6275, 1186, 937, 2672, 987, 988, 4415, 775,
	6306, 1008, 1356, 6288, 2662, 870, 6265, 4708, 5713, 4232,
	4213, 3996, 5947, 6274, 6223, 5548, 2139, 1865, 1018, 2109,
	2663, 1952, 937, 2660, 6222, 6209, 889, 2672, 869, 6161,
	6158, 1036, 1039, 2660, 3171, 1866, 6134, 6095, 6162, 6159,
	2139, 1167, 2670, 2109, 2662, 4366, 3142, 4137, 6094, 2667,
	2671, 2666, 6093, 2668, 3285, 6073, 6072, 3142, 2107, 4118,
	2663, 3142, 3171, 1572, 2660, 2660, 6069, 2672, 2662, 6067,
	4119, 4707, 5986, 899, 1752, 6070, 1198, 1747, 6068, 2139,
	4986, 5987, 2109, 1155, 2663, 1100, 2121, 2122, 2123, 1116,
	1118, 2672, 2109, 5984, 5983, 5963, 5009, 5962, 2664, 5848,
	5833, 2665, 2660, 1752, 4198, 2670, 2660, 2662, 5548, 1845,
	5823, 4242, 2667, 2671, 2666, 5806, 2668, 2662, 4117, 5824,
	2669, 2132, 2133, 2663, 5805, 5013, 5798, 1181, 5797, 2660,
	2672, 5666, 5655, 2663, 5629, 4366, 5561, 1752, 5011, 897,
	5667, 3171, 5991, 5628, 5560, 5562, 868, 2660, 5559, 5557,
	1061, 1061, 5547, 4366, 5947, 1574, 3169, 4366, 1752, 5945,
	1947, 5548, 1089, 882, 5516, 5776, 1826, 1190, 1192, 1193,
	5514, 1195, 1224, 2660, 179, 1195, 3277, 5480, 3245, 5515,
	5439, 5400, 5399, 5451, 5398, 1575, 4626, 4010, 1576, 3757,
	5401, 3171, 1577, 3171, 5392, 5290, 5307, 5210, 4636, 4162,
	4163, 4164, 4165, 3171, 2708, 5308, 2660, 5188, 2108, 5248,
	898, 5152, 5060, 4877, 1578, 882, 2660, 882, 872, 4790,
	1947, 3757, 3171, 2798, 4925, 4779, 4886, 4722, 4791, 2139,
	4625, 4617, 2109, 1206, 4780, 1826, 2660, 4649, 4885, 4626,
	2660, 4727, 4595, 4690, 4553, 4485, 1206, 2139, 4640, 1206,
	2109, 4552, 1581, 4552, 4486, 4435, 1206, 2662, 4366, 1206,
	4086, 4323, 4314, 4237, 4436, 4282, 1341, 1341, 4231, 1579,
	4324, 4315, 4238, 2663, 882, 2662, 4224, 4232, 5279, 4221,
	2672, 1341, 4220, 4219, 1309, 2660, 1580, 2139, 5014, 4448,
	2109, 2663, 882, 939, 1453, 882, 882, 4205, 2672, 4045,
	950, 951, 952, 4197, 882, 882, 4045, 882, 1168, 836,
	836, 4195, 4198, 836, 6318, 2662, 4194, 1845, 4079, 4193,
	2660, 4192, 6319, 1582, 3171, 2660, 933, 933, 2660, 1187,
	2660, 2663, 4122, 4120, 1458, 5735, 3980, 1811, 2672, 3633,
	5735, 2660, 2660, 3171, 4064, 2114, 2115, 2116, 2117, 3816,
	1259, 882, 1259, 3357, 3257, 3476, 3991, 3933, 1752, 4211,
	4416, 3137, 1444, 1752, 3047, 3171, 2660, 3171, 1436, 1826,
	2112, 2113, 2114, 2115, 2116, 2117, 4636, 933, 1747, 1913,
	3814, 2810, 1257, 2112, 2113, 2114, 2115, 2116, 2117, 3815,
	4165, 4166, 4167, 4168, 882, 882, 4207, 328, 328, 1818,
	4160, 4161, 4162, 4163, 4164, 4165, 1826, 5852, 3801, 1811,
	884, 1805, 933, 933, 1756, 1431, 1752, 3802, 189, 1240,
	1241, 1947, 1826, 1245, 1248, 2117, 1826, 1234, 1826, 809,
	903, 903, 2128, 1305, 1306, 4160, 4161, 4162, 4163, 4164,
	4165, 2118, 2119, 2120, 4160, 4161, 4162, 4163, 4164, 4165,
	2112, 2113, 2114, 2115, 2116, 2117, 1826, 3858, 4139, 2112,
	2113, 2114, 2115, 2116, 2117, 1567, 6420, 2112, 2113, 2114,
	2115, 2116, 2117, 1187, 3565, 4416, 806, 806, 1742, 4813,
	806, 806, 4636, 3566, 809, 1250, 1251, 1752, 1187, 3460,
	133, 873, 1158, 933, 2740, 3633, 933, 933, 1752, 2112,
	2113, 2114, 2115, 2116, 2117, 3456, 3204, 3173, 3172, 809,
	3143, 1743, 1744, 1260, 2660, 2660, 3171, 3171, 2661, 3142,
	1924, 2128, 1429, 1917, 1915, 6412, 2108, 2660, 1912, 1906,
	1591, 3476, 1906, 1906, 1617, 3981, 1905, 1906, 1308, 2112,
	2113, 2114, 2115, 2116, 2117, 1906, 1773, 1285, 1487, 1487,
	1766, 1859, 1055, 1187, 1492, 1209, 1486, 1158, 1201, 5405,
	1157, 1160, 3865, 2112, 2113, 2114, 2115, 2116, 2117, 1773,
	1872, 2740, 1773, 1174, 2740, 1176, 882, 1178, 749, 5062,
	1898, 1445, 1898, 1175, 2128, 4437, 1796, 882, 6386, 1200,
	1773, 4438, 2740, 2118, 2119, 2120, 823, 4530, 1311, 1767,
	4153, 1310, 2112, 2113, 2114, 2115, 2116, 2117, 871, 4154,
	5951, 4872, 2112, 2113, 2114, 2115, 2116, 2117, 179, 1290,
	6230, 809, 1311, 1289, 1261, 1290, 1168, 1432, 1212, 1289,
	1249, 1217, 6213, 6204, 1168, 1168, 1691, 2699, 1221, 5977,
	1908, 1232, 2749, 1768, 1341, 1761, 1765, 1290, 5952, 1191,
	3664, 1289, 933, 933, 805, 6152, 1129, 836, 1017, 938,
	5895, 5928, 1017, 1017, 5785, 5778, 809, 1284, 5741, 5670,
	5646, 1270, 5617, 804, 5523, 1246, 5520, 1341, 1959, 5506,
	1168, 1341, 1965, 1966, 1520, 4872, 5663, 5505, 1291, 1341,
	5494, 1341, 2699, 1974, 1772, 5492, 1502, 1292, 1341, 805,
	870, 6153, 5262, 1512, 5255, 1985, 5252, 5238, 5233, 1341,
	1341, 1341, 1341, 1341, 1476, 5225, 2602, 6150, 804, 1770,
	1341, 5224, 5214, 869, 3420, 1437, 1528, 1529, 806, 1237,
	1238, 1239, 5173, 186, 1242, 1243, 1244, 1247, 5143, 5093,
	5092, 1455, 1456, 5091, 1341, 1782, 1783, 4924, 4840, 1777,
	1778, 1779, 2112, 2113, 2114, 2115, 2116, 2117, 1780, 1168,
	183, 1475, 1658, 2750, 184, 4803, 1782, 1783, 4933, 4802,
	2112, 2113, 2114, 2115, 2116, 2117, 1708, 1785, 1960, 1784,
	1714, 4786, 4776, 188, 1637, 4775, 4774, 4730, 4724, 4683,
	872, 4682, 4681, 4634, 4614, 4428, 4385, 1676, 2803, 1686,
	1764, 4372, 4365, 1493, 2803, 1499, 4281, 947, 948, 949,
	2112, 2113, 2114, 2115, 2116, 2117, 941, 942, 943, 944,
	945, 946, 4215, 4208, 2806, 882, 1341, 4188, 4180, 4179,
	2806, 1638, 4158, 1763, 3866, 4156, 806, 806, 4155, 806,
	4151, 1445, 1835, 2689, 1638, 2690, 1638, 1596, 4149, 1595,
	717, 4148, 1594, 4147, 882, 4146, 4124, 2712, 4121, 4873,
	1526, 4040, 1820, 3940, 3938, 1840, 1690, 3864, 1741, 1931,
	3935, 1932, 1933, 1934, 3934, 3924, 1937, 1938, 1939, 1900,
	1738, 1942, 806, 938, 2704, 2700, 933, 933, 933, 933,
	1711, 933, 3754, 1715, 1716, 1673, 186, 1683, 3455, 3448,
	3243, 823, 1494, 1985, 882, 2744, 2748, 1896, 183, 882,
	3350, 2761, 184, 2601, 2788, 180, 3046, 2968, 1500, 5664,
	1914, 1457, 3000, 183, 1921, 1922, 1923, 184, 2817, 4932,
	823, 188, 1199, 4873, 133, 882, 4812, 933, 1556, 823,
	2700, 1565, 1188, 1584, 774, 882, 188, 1132, 1134, 774,
	771, 807, 808, 186, 882, 186, 2747, 1191, 1159, 2683,
	6408, 6404, 1789, 1790, 1160, 2804, 1793, 1191, 6316, 1432,
	200, 2804, 6282, 6252, 882, 6247, 1852, 1852, 882, 1864,
	183, 6240, 183, 6171, 184, 186, 184, 6104, 186, 4133,
	1857, 5883, 6066, 6037, 6034, 5950, 5949, 2810, 1971, 5913,
	1489, 5909, 1904, 188, 328, 188, 1743, 1744, 4285, 1253,
	5835, 937, 183, 5801, 5729, 183, 184, 1894, 5728, 184,
	6049, 2681, 1909, 1159, 1958, 5727, 328, 6179, 809, 1160,
	3351, 807, 808, 3045, 2969, 188, 871, 5707, 188, 871,
	871, 2857, 2845, 933, 1911, 2958, 5346, 186, 5691, 1290,
	5056, 4816, 5690, 1289, 5689, 169, 5679, 2816, 5676, 1875,
	5298, 882, 1669, 2596, 5555, 328, 1489, 2598, 2599, 2788,
	2788, 2788, 2760, 1982, 183, 328, 5552, 2597, 184, 2807,
	2849, 5517, 1778, 1777, 5324, 2807, 2605, 5302, 5289, 1779,
	1189, 5281, 5278, 5097, 4871, 882, 882, 188, 4455, 4971,
	4928, 2698, 4692, 2805, 4912, 4902, 4899, 2897, 4882, 2805,
	4845, 1785, 4843, 4835, 2813, 933, 933, 933, 933, 933,
	6366, 2075, 2603, 2083, 2082, 4627, 4458, 4457, 870, 4452,
	2674, 870, 870, 2104, 1439, 2645, 4273, 933, 933, 1956,
	1957, 4272, 2105, 807, 808, 933, 6151, 4225, 4058, 4130,
	2680, 2098, 4112, 2862, 2099, 2100, 4110, 3342, 3965, 3897,
	3789, 2810, 3661, 2897, 1341, 1489, 3574, 2810, 3523, 3348,
	2825, 2827, 3382, 3376, 1935, 1936, 180, 3119, 1338, 1940,
	1941, 4159, 1943, 1944, 133, 4169, 4170, 4171, 807, 808,
	5807, 3097, 3089, 2848, 2775, 2723, 938, 938, 2714, 2654,
	1773, 1775, 1017, 1017, 2652, 1017, 2651, 1017, 2650, 836,
	836, 3026, 3027, 2649, 2648, 187, 2647, 2874, 1982, 4173,
	2646, 2644, 3113, 2643, 2642, 5319, 882, 2641, 180, 4175,
	3072, 1617, 2640, 1617, 2639, 937, 882, 1617, 1617, 2638,
	2637, 2636, 2710, 2635, 2634, 2633, 2632, 2631, 2630, 2629,
	806, 2628, 2653, 2627, 806, 806, 2626, 2625, 2657, 2624,
	2789, 2623, 3140, 2622, 2621, 2620, 2741, 2618, 1489, 882,
	882, 2617, 1017, 1017, 1017, 169, 933, 1790, 1789, 3158,
	2604, 2602, 933, 1969, 3520, 1793, 1898, 890, 1895, 2715,
	1798, 179, 749, 2721, 749, 2994, 2737, 1788, 1669, 1657,
	768, 882, 1601, 882, 882, 2961, 882, 910, 882, 2745,
	186, 882, 882, 1435, 2712, 3109, 1286, 1184, 985, 2870,
	2871, 783, 5142, 179, 4684, 4612, 4611, 2601, 806, 806,
	3923, 3080, 3021, 3081, 4316, 5383, 4325, 183, 882, 4819,
	4554, 184, 3567, 3477, 2796, 2797, 2921, 1338, 5734, 2725,
	4159, 1482, 933, 933, 4169, 4170, 4171, 780, 2880, 2739,
	188, 4270, 773, 4066, 909, 5624, 1341, 1341, 1341, 3153,
	2803, 1782, 1783, 6373, 2792, 3161, 180, 908, 187, 5054,
	4144, 4174, 1206, 3248, 3249, 1489, 198, 5048, 4173, 3244,
	2863, 180, 756, 181, 2866, 2867, 2806, 911, 4175, 1482,
	5846, 2828, 770, 4492, 4505, 3145, 3146, 2943, 1710, 3177,
	1489, 2935, 3743, 2826, 3737, 2789, 2789, 2789, 5845, 2803,
	1338, 1250, 1251, 4159, 5350, 3139, 2915, 4169, 4170, 4171,
	2919, 2935, 2873, 4348, 2803, 187, 868, 187, 5456, 5201,
	4344, 3084, 3090, 3123, 1982, 2806, 2943, 1514, 6181, 4141,
	2682, 2940, 3375, 3092, 2610, 6090, 2943, 4378, 3093, 4494,
	2806, 4173, 3096, 2607, 5611, 2799, 3098, 187, 2955, 2956,
	187, 4175, 6374, 3205, 3175, 1553, 2803, 182, 1341, 6030,
	180, 3346, 6029, 180, 2976, 1341, 1341, 1571, 882, 4653,
	2940, 2982, 2983, 2984, 2987, 4652, 867, 2932, 882, 1341,
	2940, 933, 2806, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
	1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 5844,
	1341, 2801, 3647, 5623, 161, 3141, 3022, 5483, 2981, 187,
	2877, 4605, 1197, 2883, 3016, 3052, 3019, 2804, 3051, 1170,
	3023, 3024, 180, 866, 2971, 2999, 3920, 165, 937, 937,
	2078, 4450, 3005, 3347, 1573, 4870, 4911, 5641, 3666, 2078,
	3665, 1766, 3255, 6290, 5379, 2823, 1447, 3079, 192, 3198,
	3199, 3082, 5772, 907, 3200, 3201, 3117, 3202, 3203, 2803,
	2614, 5496, 5240, 731, 1338, 5239, 2804, 4159, 3557, 913,
	2728, 4169, 4170, 4171, 4461, 1513, 3590, 191, 1463, 1692,
	1143, 2804, 1136, 4721, 3101, 2806, 915, 133, 1003, 1693,
	1767, 768, 4793, 3170, 3110, 1440, 5050, 4382, 3114, 5652,
	3115, 186, 3116, 3585, 3276, 4173, 3118, 3776, 2909, 5868,
	4402, 3078, 1689, 1061, 4719, 4175, 4335, 4718, 5635, 133,
	5440, 729, 5127, 2804, 5061, 5022, 806, 3247, 183, 3463,
	4887, 2807, 184, 915, 1768, 3591, 1508, 1765, 3099, 3100,
	4462, 192, 2822, 3584, 3185, 4507, 1471, 3187, 139, 2803,
	1061, 188, 4364, 3104, 5393, 2805, 2780, 1572, 3135, 1141,
	4503, 4350, 3111, 2803, 1035, 3590, 976, 3149, 3150, 3151,
	191, 5187, 4166, 4167, 4168, 2806, 921, 865, 6226, 3193,
	2807, 4160, 4161, 4162, 4163, 4164, 4165, 3179, 3178, 2806,
	3180, 5642, 3684, 1693, 3186, 2807, 3682, 5771, 2659, 192,
	231, 1628, 4495, 4833, 2805, 727, 231, 3543, 3545, 3544,
	1770, 2838, 2837, 2810, 4687, 5313, 868, 6087, 4075, 2805,
	4074, 1553, 1338, 5651, 3591, 4159, 2804, 6225, 191, 4169,
	4170, 4171, 2821, 3631, 4073, 3750, 4072, 2807, 6050, 5922,
	3683, 4720, 4448, 4464, 3681, 5921, 5433, 3233, 1338, 1574,
	3235, 4159, 3270, 3270, 4346, 4169, 4170, 4171, 5380, 3592,
	2836, 2805, 2810, 4173, 1823, 4349, 3231, 1629, 3747, 5038,
	5034, 1834, 187, 4175, 2820, 784, 3742, 2810, 2802, 1575,
	4383, 1836, 1576, 2855, 3646, 757, 1577, 2079, 2850, 4173,
	2802, 1764, 992, 6199, 991, 2803, 2079, 1832, 2708, 4175,
	5622, 4317, 5024, 2803, 3390, 3745, 4574, 823, 1578, 990,
	5735, 989, 2802, 1483, 5521, 161, 2804, 1156, 5134, 2810,
	2802, 2806, 3230, 1893, 3232, 1338, 3272, 3266, 4159, 2806,
	2804, 2077, 4169, 4170, 4171, 1902, 2802, 2802, 165, 4144,
	2807, 4166, 4167, 4168, 4345, 2802, 1581, 2802, 3592, 3341,
	4160, 4161, 4162, 4163, 4164, 4165, 6363, 6091, 5074, 3031,
	2080, 1483, 3258, 1579, 2805, 2802, 6039, 6362, 3462, 2080,
	1630, 5648, 3345, 2934, 5647, 3256, 4175, 5879, 5394, 3283,
	1580, 3294, 3282, 3030, 3274, 4007, 4347, 3209, 4005, 3147,
	6202, 6063, 6040, 2934, 204, 3739, 5669, 2676, 2802, 5368,
	5362, 900, 1770, 2832, 5149, 4632, 3959, 2677, 1831, 2875,
	3852, 3598, 5027, 1728, 4166, 4167, 4168, 1582, 4484, 231,
	3197, 916, 2810, 4160, 4161, 4162, 4163, 4164, 4165, 2678,
	2807, 232, 4651, 3164, 1498, 4481, 2081, 232, 4480, 1726,
	2951, 5135, 1620, 5081, 2807, 2081, 5138, 3926, 4463, 4469,
	3344, 5136, 5069, 3610, 2805, 3275, 4647, 4646, 1945, 139,
	1496, 6228, 2804, 4008, 3295, 3212, 2727, 1448, 2805, 3929,
	2804, 4645, 1341, 1341, 938, 1341, 6198, 2929, 1341, 5133,
	4644, 4643, 914, 4583, 4581, 4578, 2928, 4576, 1341, 1341,
	4422, 3927, 1833, 3582, 3366, 1341, 5137, 1341, 1341, 1341,
	1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 3911, 1341,
	3074, 1341, 2810, 1341, 1341, 1341, 1341, 1341, 1341, 920,
	1341, 1341, 1341, 3062, 2911, 1341, 2810, 4306, 2907, 914,
	3434, 1341, 3165, 933, 2595, 1341, 1341, 1341, 1341, 1632,
	4006, 2858, 6289, 4004, 2889, 1770, 1145, 3363, 3393, 2809,
	1725, 5860, 3613, 3472, 1553, 3474, 3166, 3847, 3583, 2689,
	6268, 5021, 6227, 3497, 3497, 3148, 3163, 1770, 6110, 3509,
	933, 1495, 1626, 3546, 3693, 2847, 2807, 5606, 4166, 4167,
	4168, 4396, 5075, 187, 2807, 3441, 1622, 4160, 4161, 4162,
	4163, 4164, 4165, 230, 3162, 229, 180, 3394, 882, 230,
	2805, 229, 2833, 6133, 3210, 1229, 4545, 3562, 2805, 4343,
	3268, 3913, 5098, 2835, 2834, 1477, 3067, 4342, 4348, 3573,
	3211, 233, 899, 872, 3017, 4344, 1006, 933, 787, 1639,
	1718, 2817, 3874, 3841, 1727, 3819, 1985, 3875, 2965, 3869,
	2656, 3395, 1230, 3152, 3392, 3154, 1341, 4549, 3159, 3160,
	232, 1631, 3627, 933, 3013, 1497, 3863, 882, 2810, 1688,
	3012, 2857, 2831, 1712, 1707, 1659, 2810, 5880, 6089, 5336,
	1621, 2964, 3618, 3842, 788, 5696, 3616, 3464, 3639, 3004,
	3003, 3611, 882, 882, 3002, 271, 2817, 1049, 897, 4400,
	3637, 3638, 1687, 6109, 4399, 4339, 3669, 3540, 3673, 3593,
	2897, 3068, 4860, 3871, 1926, 785, 3653, 786, 5764, 2897,
	1925, 882, 3610, 4550, 3607, 1603, 4949, 3396, 4307, 1722,
	5614, 1607, 5216, 3628, 882, 3662, 1736, 5881, 3498, 3498,
	2853, 1731, 1598, 2812, 2811, 5076, 4166, 4167, 4168, 933,
	933, 5051, 1666, 3069, 3361, 4160, 4161, 4162, 4163, 4164,
	4165, 1517, 882, 3605, 4500, 312, 3846, 882, 3609, 898,
	4496, 3011, 4166, 4167, 4168, 900, 2590, 3764, 3368, 4715,
	1623, 4160, 4161, 4162, 4163, 4164, 4165, 4009, 3383, 3384,
	3385, 3386, 3207, 5597, 3437, 1231, 5598, 6108, 3558, 5599,
	4098, 5615, 3634, 1928, 3009, 5540, 4630, 1732, 3391, 1341,
	3432, 1156, 5874, 2738, 3426, 3352, 3873, 5600, 2088, 2869,
	3925, 3613, 230, 328, 229, 4950, 4548, 3498, 3729, 4003,
	3606, 2597, 6195, 3479, 1442, 3648, 937, 3502, 3632, 5662,
	4351, 1140, 234, 6194, 1477, 979, 3778, 4587, 4586, 4166,
	4167, 4168, 3539, 5541, 5602, 1228, 3367, 4992, 4160, 4161,
	4162, 4163, 4164, 4165, 5601, 4992, 4585, 4060, 3444, 3355,
	2930, 3065, 3349, 1982, 5603, 3812, 4350, 2777, 4482, 921,
	4469, 1982, 3657, 2954, 3700, 5765, 1168, 2859, 4546, 1680,
	3691, 3686, 3759, 3519, 3372, 3341, 3404, 1624, 328, 4352,
	1625, 6196, 3746, 3480, 3267, 5861, 873, 3442, 3411, 1916,
	1730, 5131, 1720, 1927, 4631, 3603, 3486, 3486, 4027, 3430,
	1870, 4544, 1446, 3573, 3912, 3884, 4395, 133, 3608, 3949,
	3891, 3453, 3452, 933, 836, 3612, 3554, 1017, 938, 1017,
	1017, 823, 143, 2726, 1007, 1717, 749, 749, 1719, 1142,
	3611, 3812, 1020, 1930, 3868, 1678, 6042, 3899, 2859, 3903,
	3904, 922, 1226, 3475, 3500, 3500, 3505, 3760, 3762, 4346,
	1443, 3862, 828, 5206, 3126, 3127, 3128, 1761, 1341, 5763,
	4349, 5205, 3817, 3607, 933, 3872, 3066, 933, 3091, 933,
	1219, 3799, 2952, 3670, 1172, 4551, 899, 1604, 6045, 866,
	3738, 1723, 3561, 1608, 5604, 5605, 3744, 5067, 3560, 3564,
	4539, 5343, 3559, 2916, 1599, 1929, 4855, 6051, 3870, 2841,
	5397, 2841, 5052, 3636, 1667, 5786, 1605, 3609, 4547, 3624,
	1602, 3777, 806, 2718, 1721, 4501, 1606, 5872, 806, 806,
	3380, 4497, 4483, 4454, 6033, 1699, 2717, 1597, 918, 1317,
	917, 5304, 1898, 3500, 3800, 2953, 3837, 3900, 1679, 4345,
	5694, 3549, 897, 5918, 882, 3215, 3443, 3445, 3642, 3447,
	3214, 3449, 3450, 3451, 3989, 5902, 2089, 3942, 4993, 1734,
	2846, 4002, 4001, 5616, 5303, 4414, 4993, 4332, 806, 3606,
	3575, 3576, 3577, 3578, 3579, 3332, 3333, 3334, 3335, 5019,
	3169, 4347, 5156, 1168, 5079, 5396, 6398, 933, 933, 5006,
	6397, 1695, 1729, 6044, 933, 933, 3710, 4918, 2925, 836,
	1017, 5367, 1017, 1017, 3604, 6047, 1341, 3993, 3908, 3909,
	1843, 1341, 1341, 898, 1341, 2860, 6046, 4994, 1341, 2861,
	4036, 3857, 4038, 4039, 3749, 4994, 1341, 919, 3748, 5381,
	2719, 5395, 4043, 4044, 4046, 3596, 314, 313, 1341, 3640,
	1467, 3761, 6193, 4919, 3602, 2616, 3497, 1298, 1298, 1300,
	1103, 5901, 3722, 882, 923, 2840, 1844, 2840, 3725, 3726,
	4995, 5886, 3659, 3881, 5459, 3499, 3499, 3608, 4995, 1298,
	1300, 5047, 4564, 4563, 3612, 4538, 1341, 1341, 806, 4498,
	2139, 5373, 1341, 2109, 2943, 6360, 2860, 2121, 2122, 2123,
	2861, 4409, 6036, 4661, 1698, 4660, 872, 6106, 1341, 1341,
	924, 3803, 920, 1341, 4732, 926, 2670, 1681, 2662, 938,
	1294, 3133, 1341, 2667, 2671, 2666, 6177, 2668, 1341, 5857,
	5228, 2669, 2132, 2133, 2663, 3371, 4570, 3740, 3921, 3922,
	1696, 2672, 1341, 2990, 4767, 832, 4132, 3932, 1869, 2979,
	1677, 2948, 4069, 1341, 4766, 3849, 2852, 1449, 3843, 3623,
	3018, 4123, 3849, 3848, 3499, 4909, 1701, 1138, 5673, 3851,
	5150, 3709, 1700, 1004, 1868, 960, 3717, 1341, 1341, 1341,
	937, 5009, 4388, 872, 986, 1341, 1341, 1341, 3887, 1525,
	1341, 3896, 4111, 3885, 3727, 806, 4986, 3970, 3734, 5314,
	2918, 1341, 1150, 2673, 5124, 4336, 1150, 1478, 1220, 3038,
	1173, 3043, 1838, 806, 3041, 3044, 3042, 5123, 5080, 1146,
	1148, 3498, 4196, 1341, 3049, 4883, 4917, 3548, 4203, 6277,
	4212, 1736, 3928, 3930, 3931, 4136, 3889, 1662, 4223, 3958,
	3, 1787, 1662, 5007, 1791, 1792, 1776, 2689, 1341, 5775,
	4288, 4746, 1236, 1341, 4062, 3957, 4254, 4254, 836, 4973,
	3497, 4266, 4254, 4254, 3044, 3867, 5008, 3042, 5223, 1299,
	1299, 4100, 6393, 1703, 6305, 3969, 3968, 3195, 791, 5964,
	3967, 5244, 5550, 5522, 882, 4230, 882, 4138, 4103, 882,
	5300, 1299, 6328, 4104, 1898, 882, 882, 4042, 6327, 6293,
	4105, 6292, 1697, 3040, 5245, 3992, 1694, 4443, 1739, 4102,
	3898, 6117, 1737, 5820, 6116, 3998, 3906, 1571, 190, 4056,
	4056, 3999, 3134, 4408, 5967, 5966, 6122, 6120, 882, 5821,
	872, 5969, 6123, 6121, 5372, 1852, 5971, 5968, 1702, 6234,
	6233, 1110, 5970, 5972, 5973, 6119, 1137, 4127, 6118, 5229,
	5781, 5892, 1005, 3979, 959, 5782, 3039, 4916, 4333, 4070,
	4071, 4934, 2744, 4076, 3976, 882, 882, 1830, 1593, 4095,
	4908, 1504, 6125, 4768, 6124, 4213, 4035, 4037, 3155, 2596,
	4137, 5774, 4289, 4049, 1573, 1968, 4052, 4293, 1168, 1050,
	1277, 4974, 4318, 3272, 4053, 4296, 6329, 3971, 4061, 3486,
	1341, 4063, 5586, 4101, 2788, 3888, 1661, 5582, 4410, 3196,
	5976, 1661, 3083, 1760, 4441, 793, 793, 5120, 1825, 4433,
	5118, 1524, 5928, 3498, 4202, 3498, 5739, 5637, 1511, 5333,
	891, 4299, 1341, 3341, 5819, 4096, 4421, 5140, 4423, 1168,
	1168, 4239, 810, 5116, 4412, 4085, 4083, 3500, 4391, 4313,
	193, 4000, 5530, 3960, 4264, 5535, 2596, 4109, 3905, 5533,
	4115, 5534, 5536, 726, 4406, 728, 730, 3568, 1294, 2795,
	2619, 937, 2076, 1967, 1903, 5579, 5580, 4214, 4471, 4356,
	4126, 1901, 4129, 4216, 1807, 1713, 1474, 4384, 4303, 1283,
	4292, 4033, 4034, 5257, 6374, 4106, 4107, 6343, 5839, 6138,
	5838, 6370, 6392, 6143, 4440, 4844, 6416, 1572, 5588, 5581,
	6300, 5584, 5585, 5587, 5583, 1523, 5117, 6145, 4251, 5119,
	1824, 4337, 5565, 4262, 4267, 4268, 6140, 5365, 4355, 273,
	1510, 5317, 4185, 4186, 4187, 6139, 4821, 4321, 3594, 3323,
	3547, 3515, 6141, 2843, 4206, 2097, 1847, 3184, 5532, 3327,
	5537, 3325, 2926, 2923, 774, 3322, 5266, 3324, 3326, 2936,
	1341, 2925, 2829, 823, 4176, 4177, 4178, 1211, 3504, 2597,
	1571, 6148, 6146, 5864, 5545, 4419, 4233, 5998, 5999, 4487,
	4488, 4235, 4234, 2857, 4259, 4261, 4258, 5546, 4257, 5997,
	5263, 882, 6154, 6155, 6002, 2128, 5813, 4537, 4280, 1574,
	4218, 4256, 6391, 4260, 2118, 2119, 2120, 6001, 5811, 2924,
	5814, 5577, 6153, 2112, 2113, 2114, 2115, 2116, 2117, 4308,
	1194, 4297, 4274, 6142, 4957, 806, 2963, 4311, 6346, 1575,
	3468, 3469, 1576, 4426, 4322, 4229, 1577, 1573, 2927, 3438,
	4228, 3698, 4353, 2897, 2897, 6056, 3355, 6057, 2708, 3500,
	4051, 3500, 5981, 5295, 4467, 194, 195, 196, 1578, 3836,
	4392, 4379, 3838, 3839, 6056, 6057, 4958, 6147, 3499, 4278,
	4279, 1748, 933, 933, 3336, 3280, 3281, 5791, 4374, 4375,
	3697, 4597, 4389, 4327, 3699, 5576, 4470, 1620, 2897, 933,
	4063, 4693, 4694, 4209, 4404, 5544, 1581, 3861, 1452, 4959,
	4960, 4961, 4228, 5980, 5788, 4376, 3358, 3362, 1139, 3364,
	1046, 3696, 954, 1579, 4418, 4420, 4330, 4328, 4329, 1611,
	4528, 6153, 4529, 4493, 194, 195, 196, 197, 133, 4226,
	1580, 5790, 5789, 4523, 4442, 6251, 882, 4449, 3422, 3423,
	3424, 3425, 4527, 4456, 4460, 4981, 3473, 4506, 974, 1168,
	2789, 3158, 4642, 311, 3459, 6399, 6295, 3517, 2592, 3454,
	1572, 5658, 5920, 3668, 3659, 882, 4829, 1582, 3328, 4531,
	4560, 5357, 5130, 5129, 4853, 4623, 1613, 4489, 6296, 4621,
	4565, 4021, 4566, 4567, 4020, 4013, 4014, 4015, 4016, 4017,
	4018, 4019, 1919, 3107, 933, 3105, 4025, 4026, 2967, 2966,
	2746, 2693, 1982, 2692, 5275, 4320, 4824, 3977, 3458, 3664,
	4371, 4823, 1341, 4868, 6294, 3090, 1341, 5878, 6232, 4526,
	6231, 4320, 4379, 4827, 4250, 4248, 4249, 4247, 4367, 1341,
	4541, 1622, 6055, 6053, 5978, 5011, 5779, 5744, 5325, 1341,
	5103, 882, 882, 4966, 4800, 4799, 4894, 882, 4741, 1341,
	1341, 4740, 1574, 1341, 1341, 1341, 4535, 1341, 3332, 3333,
	3334, 3335, 4319, 4604, 4603, 3329, 4511, 3994, 1341, 3918,
	3499, 1259, 3499, 3830, 4648, 3824, 3820, 3798, 3796, 3715,
	4655, 1341, 1575, 1341, 3553, 1576, 3525, 3466, 3227, 1577,
	3226, 2949, 4691, 4245, 4250, 4248, 4249, 4247, 1341, 4243,
	4246, 2708, 2830, 2781, 4737, 1341, 2776, 1970, 1920, 1341,
	1341, 1578, 1754, 1705, 1704, 1621, 1670, 5274, 4245, 4250,
	4248, 4249, 4247, 1341, 4243, 4246, 5273, 1518, 1341, 1430,
	1196, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
	1341, 1341, 1341, 1341, 1185, 1341, 827, 5482, 2107, 1581,
	905, 872, 1341, 1341, 1341, 901, 4596, 5192, 4696, 4629,
	1341, 3373, 1341, 6218, 6128, 6127, 1579, 6003, 5242, 1341,
	5504, 5434, 5306, 1341, 5193, 5039, 5035, 4745, 1341, 4525,
	3990, 4613, 1341, 1580, 3758, 2868, 2865, 1307, 4598, 1144,
	1341, 1341, 1341, 1127, 1300, 4782, 4401, 2922, 825, 1341,
	3804, 1910, 3254, 3472, 4615, 4686, 4068, 4616, 4055, 2689,
	4425, 1350, 3482, 3497, 4134, 1623, 3497, 5384, 5341, 2697,
	1582, 5340, 2696, 179, 4834, 6321, 5385, 4254, 4266, 4254,
	4254, 4254, 4633, 1445, 6098, 4685, 4841, 5644, 4054, 910,
	4641, 805, 5510, 1341, 1341, 5386, 1341, 5475, 1610, 5382,
	5227, 5165, 4714, 2817, 4271, 4152, 4865, 4656, 4097, 3964,
	804, 3285, 3174, 4512, 904, 6320, 6207, 893, 4519, 5720,
	4555, 4557, 5717, 5474, 5458, 5427, 5422, 1614, 1341, 5421,
	4659, 1609, 5082, 5071, 143, 5070, 5068, 1341, 1341, 5053,
	882, 5046, 1898, 4680, 4955, 806, 909, 4042, 1179, 4898,
	4275, 4245, 4250, 4248, 4249, 4247, 882, 4243, 4246, 908,
	4589, 4588, 4584, 933, 133, 4582, 4580, 4579, 4577, 1341,
	882, 4575, 4901, 4569, 4568, 4558, 4532, 4524, 4522, 911,
	4504, 4502, 1624, 4499, 4716, 1625, 4431, 3573, 4430, 4429,
	4084, 3339, 4078, 933, 4700, 4701, 4702, 4703, 4082, 4910,
	3966, 3914, 4599, 3893, 3845, 3844, 3806, 3805, 3338, 3339,
	4602, 4869, 4729, 3321, 4866, 3144, 3088, 3087, 3086, 3085,
	3048, 3032, 3029, 4739, 4875, 4879, 882, 3028, 3498, 4735,
	4953, 3498, 4744, 4881, 3025, 4864, 3497, 3627, 834, 3020,
	3014, 3006, 2998, 4968, 4818, 4946, 2995, 2993, 4619, 2992,
	4750, 2897, 3939, 4936, 2991, 2989, 2986, 2985, 2980, 2978,
	2975, 2970, 2962, 2947, 4947, 2817, 2938, 2937, 2914, 4987,
	2913, 4264, 4897, 1898, 2596, 2912, 1898, 4900, 1898, 5003,
	2910, 2908, 3653, 2906, 4980, 4677, 2890, 4356, 2888, 2856,
	2093, 4710, 4711, 5025, 4794, 4796, 4781, 2851, 4795, 2844,
	2694, 3937, 3936, 4808, 4810, 1009, 1218, 4809, 3628, 4930,
	1015, 4817, 1171, 4998, 4931, 1015, 3297, 1015, 3298, 1161,
	4826, 3095, 4944, 4820, 3094, 5002, 4822, 5490, 4837, 4825,
	5183, 3355, 4963, 5172, 4669, 5170, 4355, 5168, 4856, 4836,
	5167, 4838, 4839, 4679, 1015, 1015, 1015, 1009, 4427, 4678,
	5004, 4676, 4675, 4878, 4674, 907, 4673, 4830, 4831, 4962,
	4814, 4815, 4672, 4671, 4670, 4666, 5010, 4888, 4753, 4754,
	4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764,
	4765, 4895, 4769, 4664, 4979, 5015, 5018, 4028, 4892, 133,
	3229, 3228, 3223, 3539, 133, 133, 3318, 3222, 3812, 4356,
	3221, 3498, 3498, 3316, 3319, 3315, 3486, 3317, 3220, 3486,
	3219, 5374, 3218, 4797, 5126, 3217, 3216, 4801, 5855, 3371,
	4059, 4972, 6279, 823, 6244, 4876, 4927, 823, 6010, 6278,
	4909, 5412, 4935, 806, 4929, 823, 5408, 823, 5254, 5253,
	4937, 5220, 5219, 4540, 3498, 4850, 3797, 4921, 4355, 3355,
	3790, 4982, 4942, 4945, 3500, 4748, 3786, 3500, 3782, 133,
	2950, 2897, 4964, 4012, 4752, 4114, 4967, 5176, 4970, 4893,
	1250, 1251, 3986, 1303, 3985, 4398, 4978, 2997, 3984, 882,
	3983, 3982, 3635, 2882, 1710, 1564, 1555, 823, 877, 4773,
	1982, 6365, 5405, 1304, 5356, 3989, 235, 4108, 4063, 4923,
	4742, 4743, 5020, 5016, 5017, 6383, 4113, 3354, 878, 806,
	6382, 1341, 927, 938, 5029, 5139, 5087, 3353, 3522, 5322,
	1166, 882, 882, 882, 882, 5186, 3962, 1749, 1341, 1341,
	1524, 5866, 5865, 5096, 1341, 1341, 5402, 5310, 1750, 2592,
	5347, 1341, 1341, 4591, 4445, 806, 3997, 3656, 1341, 3615,
	3526, 2770, 4092, 2762, 4090, 1341, 4913, 2709, 4088, 5059,
	4089, 4091, 2702, 1521, 1509, 5086, 1341, 5105, 1503, 1501,
	1480, 6229, 5154, 4798, 4190, 5049, 5574, 893, 5706, 3486,
	5088, 5705, 5055, 5656, 5464, 5125, 5190, 4983, 5083, 4658,
	4593, 4534, 4474, 4472, 5166, 4444, 4405, 4300, 3599, 3595,
	4990, 1341, 3524, 4997, 3518, 4999, 3124, 3108, 5104, 1341,
	4063, 3106, 1341, 3103, 1341, 2886, 2881, 2782, 2766, 2758,
	4606, 2756, 2736, 1829, 1828, 3857, 1827, 3500, 3500, 1822,
	1821, 3090, 1819, 5003, 1816, 4848, 1814, 1812, 5023, 1809,
	1341, 1806, 1799, 1795, 3497, 3497, 4668, 1758, 3497, 1755,
	1751, 1746, 5148, 1724, 836, 1671, 5155, 1587, 5147, 5267,
	1583, 4254, 806, 3573, 5284, 1563, 836, 1554, 5410, 4920,
	3500, 5409, 3880, 5163, 1104, 3499, 2735, 3336, 3499, 1467,
	4292, 1102, 806, 6131, 6060, 4639, 6048, 1485, 5946, 5685,
	4393, 4394, 3509, 933, 5177, 5178, 5179, 5180, 5181, 5182,
	4403, 5184, 5185, 5777, 5004, 5708, 5625, 5288, 5564, 5413,
	5369, 5355, 5344, 5258, 5259, 882, 5323, 5128, 4874, 882,
	4295, 4029, 3943, 1898, 3621, 3614, 1839, 4063, 2794, 2724,
	2703, 2684, 2658, 1341, 1873, 3250, 3251, 5287, 809, 5301,
	3071, 3070, 2920, 4057, 933, 823, 809, 809, 806, 809,
	6390, 6375, 6205, 2817, 5282, 5283, 5305, 5898, 3619, 4896,
	5315, 4413, 5241, 5222, 5856, 2864, 5354, 5311, 4852, 836,
	1359, 4093, 1358, 1351, 2675, 1164, 5370, 1753, 1860, 5331,
	5643, 1757, 6175, 5326, 5638, 5335, 5859, 3627, 5640, 6038,
	5636, 2716, 1341, 5320, 5632, 4309, 5085, 4312, 3498, 3529,
	4301, 3536, 5089, 1653, 2817, 712, 2931, 5389, 3550, 3498,
	3498, 2722, 5650, 3498, 5649, 5342, 5309, 5885, 5329, 5260,
	5339, 5364, 1794, 5077, 3622, 3818, 1341, 5261, 4954, 1804,
	4956, 3498, 5363, 1808, 4411, 1810, 925, 3620, 1813, 1516,
	1815, 3010, 1817, 5897, 4951, 1842, 5391, 5388, 3499, 3499,
	1151, 1619, 1616, 5361, 5280, 3892, 3581, 3050, 3628, 4369,
	4368, 3332, 3333, 3334, 3335, 937, 129, 128, 4094, 127,
	126, 125, 124, 123, 122, 121, 56, 55, 54, 53,
	52, 51, 50, 49, 48, 5269, 76, 75, 5157, 74,
	73, 3499, 72, 71, 70, 69, 68, 67, 66, 65,
	64, 63, 62, 61, 5351, 5352, 4561, 5270, 5271, 60,
	59, 5276, 58, 57, 5348, 47, 46, 45, 1341, 5349,
	44, 43, 5442, 42, 5406, 5010, 41, 40, 39, 38,
	37, 35, 34, 33, 32, 31, 36, 30, 29, 933,
	28, 27, 5218, 26, 3132, 3131, 829, 5221, 1282, 3063,
	4650, 3987, 3498, 1740, 782, 1227, 1225, 1907, 1204, 1214,
	3064, 749, 5375, 3600, 120, 119, 5377, 118, 117, 95,
	94, 93, 92, 91, 90, 89, 88, 87, 86, 85,
	1468, 1469, 84, 5, 1472, 83, 98, 3486, 3486, 100,
	5387, 3486, 99, 97, 96, 82, 81, 5251, 80, 4607,
	4608, 79, 77, 18, 5318, 17, 4326, 5414, 1733, 2730,
	5411, 6271, 6178, 1341, 216, 6043, 1450, 5418, 5415, 2742,
	5299, 1341, 1341, 1341, 3500, 3286, 4465, 5360, 4446, 4984,
	1557, 6263, 3651, 6019, 4859, 3500, 3500, 202, 133, 3500,
	5873, 4341, 4338, 4991, 4857, 5903, 5000, 1341, 1341, 4863,
	5345, 1341, 1341, 1341, 3511, 4861, 3507, 3500, 5484, 6342,
	5503, 5531, 4140, 3435, 3440, 3857, 5525, 5809, 5566, 6136,
	5327, 5563, 5285, 3570, 185, 3857, 5787, 3260, 1341, 5543,
	3457, 2691, 876, 4657, 875, 5529, 6130, 1312, 5825, 6014,
	5589, 5297, 5578, 4851, 199, 1341, 3497, 1183, 3194, 1233,
	769, 3183, 5284, 1210, 2695, 5294, 5293, 6000, 5996, 5995,
	1341, 1341, 4811, 3465, 5291, 3478, 2679, 116, 115, 114,
	112, 330, 806, 882, 111, 110, 108, 5609, 107, 4865,
	106, 806, 806, 104, 103, 102, 101, 25, 882, 24,
	16, 15, 14, 5476, 5591, 5003, 882, 11, 5757, 5755,
	5756, 5754, 3343, 940, 2136, 3273, 5608, 1301, 2096, 1293,
	5762, 4736, 5215, 5748, 2613, 6132, 4832, 2817, 1066, 1067,
	1774, 1064, 1094, 5645, 1668, 5247, 4792, 5539, 3500, 179,
	4783, 3403, 5448, 5449, 3399, 3388, 882, 5452, 5453, 3410,
	5498, 5235, 5334, 5558, 4953, 9, 5612, 3359, 1336, 5594,
	1017, 1335, 3369, 933, 4125, 5626, 5491, 2611, 5677, 1330,
	1331, 1326, 2087, 4688, 2084, 3978, 5004, 3156, 5518, 2959,
	5683, 1656, 5003, 938, 3695, 933, 933, 4432, 4490, 5672,
	3701, 5919, 3879, 2143, 1950, 3208, 5620, 1948, 821, 1256,
	3389, 2138, 2, 5551, 5618, 3499, 1, 0, 5701, 0,
	0, 0, 8, 5542, 0, 0, 3499, 3499, 4864, 5595,
	3499, 3498, 5659, 5607, 0, 7, 5592, 4725, 5002, 938,
	1017, 5417, 0, 5575, 5610, 0, 0, 0, 3499, 0,
	0, 5627, 5169, 78, 5171, 10, 0, 0, 5653, 5634,
	5724, 155, 5572, 5004, 5633, 5712, 5699, 5714, 838, 22,
	5686, 5571, 0, 0, 0, 0, 0, 21, 0, 0,
	3498, 20, 0, 19, 0, 109, 0, 5750, 105, 1341,
	0, 0, 5678, 5680, 0, 1341, 23, 5416, 1009, 1015,
	5688, 1341, 0, 1015, 1015, 13, 1341, 971, 1341, 5692,
	5630, 5695, 5722, 5697, 4777, 4356, 12, 5698, 0, 971,
	971, 1341, 5158, 5159, 5160, 5161, 5162, 5709, 0, 5554,
	5736, 5738, 0, 0, 0, 838, 0, 5742, 5743, 5003,
	838, 971, 0, 0, 0, 838, 1341, 838, 0, 0,
	0, 5450, 5792, 836, 971, 971, 5804, 3498, 5723, 0,
	1341, 5721, 0, 5726, 4355, 1341, 0, 1092, 1092, 3499,
	0, 0, 0, 0, 838, 838, 838, 838, 0, 0,
	5740, 971, 971, 971, 0, 5793, 0, 0, 0, 0,
	0, 5746, 0, 0, 0, 0, 0, 5831, 0, 0,
	0, 0, 5469, 5470, 0, 5509, 0, 0, 0, 3486,
	5004, 0, 0, 0, 0, 5832, 0, 0, 971, 0,
	5770, 0, 0, 0, 5287, 0, 0, 5826, 0, 5524,
	0, 6, 5538, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 5654, 0, 0, 882, 0, 0,
	0, 0, 4938, 4939, 0, 1341, 0, 3500, 0, 0,
	5799, 806, 5834, 5800, 5870, 133, 0, 1168, 836, 5675,
	5862, 0, 3497, 5841, 0, 0, 0, 5869, 133, 0,
	5837, 1341, 1341, 0, 0, 0, 0, 882, 3102, 5815,
	5816, 0, 0, 5817, 5818, 0, 0, 0, 1341, 0,
	0, 5888, 0, 133, 3498, 0, 3500, 5893, 0, 0,
	0, 5840, 0, 0, 0, 3122, 0, 5842, 3498, 0,
	1341, 5843, 0, 5849, 933, 0, 4063, 933, 933, 933,
	0, 5851, 5836, 0, 5329, 5858, 0, 5850, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 1341,
	0, 0, 0, 0, 1341, 1341, 1341, 0, 1341, 4367,
	5924, 5914, 5887, 5894, 5890, 5905, 5867, 1341, 5899, 5891,
	0, 0, 5900, 0, 0, 0, 0, 3378, 5943, 1898,
	0, 0, 2689, 3500, 0, 0, 0, 0, 3405, 0,
	0, 937, 3573, 5975, 5916, 5915, 1341, 0, 0, 0,
	3431, 5994, 0, 3378, 0, 0, 5929, 0, 0, 0,
	1898, 5930, 1898, 5931, 5932, 0, 0, 5934, 0, 872,
	5935, 0, 0, 5992, 0, 5942, 6021, 5940, 0, 0,
	5982, 0, 0, 0, 6018, 0, 0, 3498, 0, 0,
	5591, 0, 3213, 5959, 5960, 0, 0, 0, 0, 0,
	5794, 0, 0, 5974, 0, 0, 0, 5908, 6024, 5910,
	0, 5912, 0, 0, 0, 0, 6016, 0, 0, 806,
	6031, 0, 0, 0, 0, 0, 0, 933, 3499, 0,
	5990, 0, 0, 5985, 133, 0, 6017, 5993, 5768, 0,
	0, 0, 0, 0, 6013, 6025, 0, 6022, 0, 0,
	1898, 0, 0, 0, 938, 0, 1168, 0, 0, 6026,
	0, 1341, 0, 6027, 0, 0, 0, 0, 0, 0,
	0, 0, 6062, 6035, 0, 5847, 0, 3499, 0, 0,
	3500, 6028, 0, 6077, 0, 0, 5750, 0, 1341, 0,
	1341, 1341, 0, 6052, 3500, 0, 1341, 5808, 0, 6058,
	6054, 0, 0, 0, 0, 5486, 5487, 6115, 5488, 133,
	5489, 0, 6064, 0, 6080, 0, 0, 6041, 0, 0,
	0, 0, 0, 0, 0, 6081, 0, 6079, 5804, 0,
	0, 6107, 1341, 6083, 0, 0, 6092, 6129, 6074, 0,
	6076, 3498, 6078, 0, 0, 5460, 5461, 0, 5463, 0,
	6101, 1898, 6100, 6099, 3499, 6097, 0, 0, 0, 5827,
	0, 6113, 6114, 0, 1341, 3486, 0, 6160, 0, 0,
	0, 0, 0, 0, 0, 5003, 0, 0, 1341, 0,
	0, 0, 6176, 0, 0, 0, 6135, 1017, 1017, 0,
	2817, 0, 6173, 1015, 1015, 0, 1015, 6168, 1015, 971,
	1009, 1009, 0, 6187, 0, 6186, 6170, 6188, 6189, 6163,
	6164, 179, 971, 3500, 0, 971, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 971, 0, 6185, 6166, 0,
	0, 0, 6169, 6212, 1017, 6172, 0, 0, 933, 0,
	0, 6180, 2596, 6167, 0, 1341, 5004, 0, 6203, 0,
	0, 6208, 6197, 6210, 6219, 5236, 5979, 6200, 5315, 0,
	5853, 0, 0, 1015, 1015, 1015, 6206, 6236, 1898, 1898,
	6211, 6235, 6239, 0, 971, 0, 0, 6215, 6216, 1341,
	1341, 6214, 2857, 1341, 6184, 0, 0, 6008, 2689, 6011,
	0, 0, 3472, 0, 0, 0, 5905, 6183, 6224, 0,
	0, 3499, 0, 6021, 933, 933, 0, 5556, 0, 0,
	5556, 6221, 5003, 6249, 836, 3499, 6258, 838, 838, 0,
	0, 0, 0, 0, 0, 6246, 6241, 6255, 6256, 6262,
	0, 0, 838, 6071, 0, 0, 6248, 6253, 6259, 0,
	3498, 6187, 6250, 6186, 6254, 6016, 0, 0, 0, 179,
	1875, 0, 1875, 1875, 0, 0, 0, 0, 6264, 933,
	838, 838, 5376, 6276, 838, 6185, 0, 3500, 0, 0,
	1341, 0, 6260, 0, 6022, 0, 0, 6075, 0, 0,
	0, 1341, 0, 5004, 6280, 1168, 0, 6261, 6303, 6284,
	0, 6283, 6269, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 6291, 937, 0, 0, 6285,
	6310, 0, 6312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 6184, 1341, 0, 0, 0, 1092, 5747, 5988,
	0, 0, 6311, 0, 3499, 6183, 836, 6333, 6334, 6335,
	0, 5804, 5424, 6317, 6315, 6308, 5426, 0, 6330, 933,
	6322, 6323, 0, 6344, 6345, 5003, 0, 0, 0, 6349,
	6326, 0, 0, 6309, 6324, 0, 0, 6351, 3498, 0,
	6337, 0, 6348, 0, 0, 0, 0, 3498, 6156, 6187,
	6303, 6186, 6359, 6368, 0, 5529, 6361, 179, 0, 6353,
	0, 0, 0, 6182, 0, 6372, 0, 6369, 6190, 0,
	6377, 6352, 0, 6185, 0, 1092, 836, 1341, 0, 6376,
	0, 0, 6378, 0, 0, 6350, 6381, 0, 6384, 0,
	6387, 0, 836, 6385, 6388, 6389, 5004, 133, 6394, 0,
	0, 6395, 133, 6401, 6403, 0, 5529, 6402, 1017, 1017,
	6411, 6406, 0, 6413, 0, 6303, 6359, 6415, 6414, 6407,
	6400, 0, 6417, 0, 0, 0, 6418, 0, 6409, 6410,
	6184, 6303, 0, 6422, 0, 0, 3500, 0, 0, 971,
	0, 0, 0, 6183, 6359, 0, 0, 0, 0, 0,
	0, 5795, 0, 0, 0, 0, 971, 0, 3499, 0,
	0, 0, 971, 0, 0, 6237, 6238, 0, 0, 0,
	971, 971, 0, 0, 0, 0, 0, 0, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 0, 0,
	3498, 0, 0, 0, 0, 0, 1092, 2664, 971, 0,
	2665, 6182, 0, 0, 2670, 0, 2662, 1649, 0, 0,
	971, 2667, 2671, 2666, 0, 2668, 971, 3405, 3405, 2669,
	2132, 2133, 2663, 0, 2139, 0, 0, 2109, 0, 2672,
	0, 2121, 2122, 2123, 0, 6270, 6242, 6243, 0, 0,
	6245, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	2670, 0, 2662, 0, 0, 0, 0, 2667, 2671, 2666,
	0, 2668, 0, 0, 3500, 838, 0, 0, 2663, 1684,
	0, 0, 0, 3500, 0, 2672, 1092, 1092, 838, 838,
	0, 0, 0, 838, 838, 0, 3405, 3405, 3405, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 838, 0,
	0, 1987, 838, 1651, 0, 0, 0, 0, 0, 0,
	838, 0, 838, 0, 6356, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 838, 838, 838, 838, 0, 0, 0, 5938, 6182,
	0, 838, 2139, 0, 0, 2109, 0, 0, 0, 2121,
	2122, 2123, 0, 0, 0, 0, 0, 3499, 0, 0,
	0, 2664, 0, 0, 2665, 838, 0, 0, 2670, 0,
	2662, 0, 0, 133, 0, 2667, 2671, 2666, 6356, 2668,
	0, 0, 0, 2669, 2132, 2133, 2663, 0, 0, 0,
	0, 1640, 0, 2672, 0, 0, 0, 0, 0, 0,
	2139, 0, 0, 2109, 0, 0, 6356, 2121, 2122, 2123,
	0, 5719, 0, 1650, 0, 0, 3500, 0, 0, 2664,
	0, 0, 2665, 0, 0, 0, 2670, 0, 2662, 0,
	0, 0, 0, 2667, 2671, 2666, 0, 2668, 0, 0,
	292, 2669, 2132, 2133, 2663, 0, 0, 838, 0, 0,
	0, 2672, 0, 1646, 1538, 0, 0, 0, 295, 1539,
	0, 0, 0, 1547, 0, 0, 0, 0, 0, 0,
	0, 0, 3278, 0, 0, 0, 1643, 0, 0, 0,
	0, 0, 0, 3280, 3281, 3499, 1092, 0, 0, 0,
	971, 0, 0, 0, 3499, 0, 1092, 0, 6341, 1987,
	1648, 1987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	1069, 0, 971, 0, 0, 1562, 0, 0, 0, 971,
	1639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1685, 1654, 0, 0, 0, 0, 0, 0, 5766,
	0, 0, 0, 0, 1546, 0, 0, 0, 0, 0,
	5769, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 3238, 0, 1682, 0, 0, 143, 0, 0,
	1641, 0, 0, 1092, 0, 1551, 0, 0, 0, 0,
	0, 0, 0, 0, 1647, 0, 0, 0, 297, 0,
	5796, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	1644, 0, 0, 1092, 0, 0, 0, 1642, 0, 0,
	1278, 1652, 0, 0, 0, 0, 0, 0, 1537, 0,
	0, 0, 0, 0, 3237, 0, 0, 3499, 0, 0,
	0, 302, 0, 0, 834, 834, 0, 0, 0, 303,
	0, 0, 0, 0, 0, 1541, 0, 296, 1645, 3239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1276, 1092, 0, 2128, 3915, 0, 3916, 0, 3917, 0,
	1543, 3919, 2118, 2119, 2120, 3240, 1542, 0, 0, 0,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 4204, 0,
	0, 0, 0, 3941, 0, 0, 0, 0, 0, 0,
	0, 0, 3948, 0, 3950, 971, 3951, 3952, 3953, 2128,
	3954, 0, 0, 834, 0, 5906, 5907, 0, 2118, 2119,
	2120, 1544, 0, 0, 0, 0, 0, 2112, 2113, 2114,
	2115, 2116, 2117, 0, 0, 0, 0, 271, 3241, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 3242, 0, 0, 838, 1545, 306, 0, 3995,
	0, 0, 293, 0, 0, 307, 0, 1548, 0, 0,
	0, 0, 0, 2595, 0, 0, 0, 1092, 0, 0,
	1092, 299, 0, 0, 0, 0, 1280, 0, 0, 1092,
	0, 0, 1281, 838, 838, 0, 838, 300, 838, 0,
	838, 838, 1550, 1549, 0, 0, 971, 3236, 971, 971,
	971, 971, 0, 0, 0, 0, 0, 2128, 0, 0,
	0, 0, 0, 294, 0, 0, 2118, 2119, 2120, 0,
	0, 0, 0, 0, 0, 2112, 2113, 2114, 2115, 2116,
	2117, 0, 4191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3234, 0, 0,
	0, 0, 0, 838, 838, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2128, 0, 0, 0, 1540,
	0, 0, 0, 0, 2118, 2119, 2120, 0, 971, 0,
	0, 0, 0, 2112, 2113, 2114, 2115, 2116, 2117, 0,
	0, 0, 0, 2139, 0, 0, 2109, 0, 0, 1553,
	2121, 2122, 2123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2664, 0, 0, 2665, 0, 0, 0, 2670,
	0, 2662, 0, 3405, 3405, 0, 2667, 2671, 2666, 0,
	2668, 0, 0, 0, 2669, 2132, 2133, 2663, 0, 1092,
	0, 1092, 0, 0, 2672, 0, 0, 838, 838, 838,
	0, 1538, 0, 0, 6102, 6103, 1539, 0, 0, 0,
	1547, 0, 0, 0, 0, 1009, 0, 0, 1015, 0,
	1015, 1015, 0, 0, 0, 137, 0, 0, 0, 136,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405,
	3405, 3405, 3405, 0, 3405, 0, 183, 0, 0, 0,
	184, 0, 3712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 4787, 0, 0, 0, 142, 3378, 0, 0,
	0, 1546, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 175, 0, 135, 0, 838, 838, 0, 0,
	0, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	838, 1092, 1551, 0, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 838, 838, 838,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 1987,
	0, 0, 4846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1535, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	1009, 1015, 1541, 1015, 1015, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 6112, 0, 176, 0, 0,
	0, 0, 0, 159, 0, 164, 157, 0, 0, 173,
	0, 146, 0, 0, 0, 1536, 0, 1543, 3405, 1069,
	0, 0, 0, 1542, 0, 0, 0, 834, 0, 0,
	0, 0, 166, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 0, 0, 0, 0, 0, 5631,
	0, 0, 0, 0, 0, 0, 165, 153, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 1544, 0,
	0, 0, 0, 151, 0, 4473, 0, 4475, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 6307, 0, 6111,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 2139, 0, 0, 2109, 0, 0, 0, 2121, 2122,
	2123, 167, 170, 1545, 0, 0, 171, 6325, 0, 0,
	2664, 0, 0, 2665, 1548, 0, 0, 2670, 163, 2662,
	0, 0, 0, 0, 2667, 2671, 2666, 0, 2668, 0,
	0, 169, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 0, 0, 0, 0, 3711, 0, 1550,
	1549, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 139, 158, 0,
	149, 0, 0, 0, 143, 4533, 4307, 0, 152, 0,
	147, 0, 0, 0, 0, 1863, 148, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 1069, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 2128, 834,
	0, 834, 0, 0, 0, 0, 1540, 2118, 2119, 2120,
	0, 0, 0, 0, 0, 172, 2112, 2113, 2114, 2115,
	2116, 2117, 0, 0, 0, 168, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 1553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4592, 0, 0, 4594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 1069,
	0, 187, 0, 0, 0, 0, 0, 0, 1538, 0,
	0, 0, 0, 1539, 180, 0, 0, 1547, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4618, 0, 4620, 0, 4622, 0,
	1538, 0, 0, 0, 2139, 1539, 0, 2109, 0, 1547,
	0, 2121, 2122, 2123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2664, 0, 0, 2665, 0, 0, 1562,
	2670, 0, 2662, 0, 0, 0, 0, 2667, 2671, 2666,
	0, 4181, 0, 0, 0, 2669, 2132, 2133, 2663, 0,
	0, 0, 0, 838, 838, 2672, 838, 4182, 1546, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	838, 1533, 0, 0, 0, 0, 838, 0, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 838, 838, 1551,
	838, 0, 838, 0, 838, 838, 838, 838, 838, 838,
	1546, 838, 838, 838, 0, 0, 838, 0, 5243, 0,
	0, 0, 838, 0, 0, 0, 838, 838, 838, 838,
	4784, 0, 0, 4183, 0, 0, 0, 0, 0, 0,
	0, 1551, 1537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1560, 838, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 1541,
	0, 0, 0, 1649, 0, 0, 1092, 2941, 1069, 0,
	0, 0, 0, 0, 1537, 1092, 0, 0, 0, 0,
	0, 0, 4785, 0, 0, 1535, 0, 0, 0, 0,
	0, 0, 1987, 0, 1543, 0, 0, 0, 0, 0,
	1542, 1541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2942, 0, 838, 1987, 0,
	0, 0, 0, 838, 1536, 0, 1543, 0, 0, 0,
	0, 0, 1542, 0, 0, 1544, 1092, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 2128, 0, 0, 1651,
	0, 0, 1987, 0, 0, 2118, 2119, 2120, 0, 1092,
	0, 0, 0, 0, 2112, 2113, 2114, 2115, 2116, 2117,
	0, 0, 0, 0, 0, 1069, 0, 1544, 0, 0,
	1561, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	1987, 1548, 0, 1538, 0, 0, 0, 0, 1539, 0,
	0, 0, 1547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1545, 0, 1558, 0, 1550, 1549, 0, 0,
	0, 1069, 971, 1548, 0, 0, 0, 1640, 1092, 1092,
	0, 0, 0, 1069, 0, 0, 0, 1092, 0, 0,
	971, 0, 0, 0, 971, 0, 971, 0, 0, 1650,
	0, 0, 971, 0, 4521, 0, 1532, 0, 1550, 1549,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 1646,
	0, 0, 0, 1540, 971, 971, 0, 0, 0, 0,
	0, 1987, 971, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 1643, 0, 1551, 0, 0, 971, 0, 0,
	1069, 971, 1069, 1553, 971, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 1540, 1648, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 1537, 0, 1069,
	971, 0, 1069, 0, 971, 1553, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 1987, 1654, 0,
	971, 0, 0, 0, 1541, 838, 0, 1092, 838, 2128,
	838, 838, 0, 1092, 0, 0, 0, 0, 2118, 2119,
	2120, 0, 0, 0, 0, 0, 0, 2112, 2113, 2114,
	2115, 2116, 2117, 143, 0, 0, 1641, 0, 0, 1543,
	0, 0, 0, 0, 0, 1542, 0, 3405, 0, 838,
	1647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1644, 0, 0, 0,
	0, 0, 0, 1642, 137, 0, 0, 1652, 136, 138,
	0, 0, 971, 0, 0, 0, 0, 0, 186, 971,
	1544, 0, 0, 0, 1092, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3405,
	0, 0, 0, 0, 1645, 183, 0, 0, 0, 184,
	1987, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 834, 1545, 0, 834, 188, 0,
	0, 0, 0, 0, 0, 142, 1548, 0, 0, 0,
	3057, 1069, 0, 1069, 0, 292, 0, 0, 0, 0,
	0, 175, 5141, 135, 0, 0, 0, 0, 0, 1538,
	0, 181, 0, 295, 1539, 0, 5146, 0, 1547, 4520,
	0, 1550, 1549, 0, 0, 0, 0, 0, 1092, 1092,
	838, 838, 0, 838, 838, 0, 0, 838, 0, 0,
	0, 0, 838, 838, 0, 838, 0, 5164, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 2139,
	0, 0, 2109, 0, 0, 0, 2121, 2122, 2123, 838,
	0, 0, 0, 0, 0, 0, 0, 838, 2664, 0,
	4514, 2665, 0, 144, 0, 2670, 0, 2662, 0, 0,
	0, 0, 2667, 2671, 2666, 182, 2668, 0, 1540, 0,
	2669, 2132, 2133, 2663, 131, 0, 176, 838, 838, 1546,
	2672, 0, 159, 838, 164, 157, 0, 0, 173, 0,
	146, 0, 301, 0, 0, 0, 0, 3053, 1553, 838,
	838, 0, 0, 1069, 838, 0, 0, 0, 0, 0,
	1551, 166, 161, 838, 0, 0, 0, 834, 834, 838,
	0, 160, 0, 297, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 838, 298, 165, 153, 0, 0, 0,
	3405, 0, 162, 0, 838, 1278, 0, 0, 0, 0,
	0, 0, 151, 1537, 0, 0, 0, 0, 0, 3055,
	834, 0, 0, 0, 141, 0, 302, 0, 838, 838,
	838, 0, 0, 0, 303, 0, 838, 838, 838, 0,
	1541, 838, 296, 0, 3056, 0, 0, 0, 1987, 0,
	167, 170, 838, 0, 1987, 171, 0, 0, 0, 3405,
	1092, 0, 0, 0, 0, 1276, 0, 163, 0, 0,
	0, 0, 0, 0, 838, 1543, 0, 0, 0, 0,
	169, 1542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	150, 0, 0, 0, 838, 0, 0, 0, 0, 838,
	0, 838, 140, 0, 0, 0, 139, 158, 0, 149,
	0, 0, 0, 143, 0, 0, 1544, 152, 0, 147,
	0, 1092, 0, 0, 0, 148, 0, 0, 0, 0,
	174, 0, 271, 3058, 0, 305, 0, 0, 0, 1092,
	156, 0, 0, 0, 971, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 1279, 0, 0, 3059, 0, 0,
	0, 1545, 306, 0, 0, 0, 0, 293, 0, 0,
	307, 0, 1548, 0, 172, 0, 0, 0, 1987, 1092,
	0, 0, 0, 0, 168, 1092, 299, 154, 0, 0,
	0, 1280, 0, 0, 0, 971, 971, 1281, 0, 0,
	0, 0, 300, 0, 0, 4513, 3060, 1550, 1549, 0,
	0, 0, 3061, 0, 0, 971, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 294, 0,
	187, 0, 0, 0, 0, 0, 0, 5419, 5420, 0,
	0, 838, 0, 180, 0, 0, 0, 0, 0, 1538,
	0, 0, 0, 0, 1539, 0, 0, 0, 1547, 0,
	3054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 1056, 0, 5441, 0, 0, 0,
	0, 0, 0, 0, 1540, 3405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 1987, 1987, 1987, 0,
	3736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5465, 0, 0, 0, 0, 5468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1546,
	0, 0, 0, 0, 0, 5477, 5478, 5479, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 1092,
	1092, 1092, 0, 1092, 0, 834, 834, 0, 5485, 834,
	1551, 0, 0, 0, 2128, 5277, 0, 0, 0, 0,
	0, 0, 0, 2118, 2119, 2120, 0, 834, 0, 0,
	6336, 838, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 971, 0,
	0, 0, 0, 1537, 0, 739, 0, 1092, 1092, 0,
	0, 971, 0, 0, 0, 0, 790, 790, 790, 790,
	813, 814, 0, 0, 0, 0, 0, 0, 0, 0,
	1541, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 888, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 6144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 1543, 0, 957, 0, 961,
	0, 1542, 0, 0, 977, 978, 0, 0, 983, 984,
	5371, 0, 0, 0, 0, 971, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 1092, 834, 0,
	0, 1012, 0, 0, 971, 971, 971, 1025, 0, 1028,
	0, 1030, 1031, 1032, 1033, 1034, 1544, 0, 0, 1043,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 1092, 1111, 0, 1069, 0,
	0, 1123, 1125, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 1545, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 1548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 971, 0,
	0, 1538, 0, 0, 0, 0, 1539, 0, 3405, 3405,
	1547, 0, 3405, 0, 0, 3735, 0, 1550, 1549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 838, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 1562, 0, 0, 0, 0, 0, 0, 0,
	838, 838, 0, 0, 838, 838, 838, 0, 838, 0,
	0, 0, 0, 0, 1540, 0, 0, 0, 0, 838,
	0, 1546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1553, 0, 0, 0, 0, 838,
	1069, 1069, 1551, 0, 0, 0, 838, 0, 0, 1069,
	838, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 838, 0, 0, 0, 0, 838,
	0, 1092, 838, 838, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 1537, 838, 0, 0, 0,
	0, 0, 0, 838, 838, 838, 1092, 0, 0, 0,
	0, 838, 0, 838, 0, 0, 0, 0, 0, 0,
	838, 1987, 1541, 0, 838, 0, 0, 0, 0, 838,
	0, 0, 0, 838, 0, 0, 0, 834, 0, 0,
	0, 838, 838, 838, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 1538, 1543, 0, 0,
	0, 1539, 0, 1542, 838, 1547, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 0, 838, 838, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1544, 1069,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2885, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 1092, 838, 838,
	0, 1015, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 1545, 0, 0, 1546, 0, 971, 0,
	0, 0, 5939, 834, 1548, 5941, 0, 0, 5944, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1538, 0, 0, 1092, 1551, 1539, 0,
	0, 0, 1547, 0, 0, 0, 1069, 3718, 0, 1550,
	1549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 971, 0, 0, 0, 971, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1537, 0, 0, 0, 0, 0, 0, 838, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2879, 0, 0, 1541, 1987, 1092,
	1987, 0, 0, 0, 0, 0, 1223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 0, 790, 0,
	838, 0, 0, 1546, 0, 0, 0, 0, 0, 0,
	1069, 1069, 1543, 0, 0, 0, 0, 0, 1542, 0,
	1254, 0, 0, 0, 0, 0, 1553, 0, 1987, 0,
	834, 0, 0, 0, 1551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 2139, 0, 0, 2109,
	0, 0, 0, 2121, 2122, 2123, 0, 0, 0, 0,
	0, 0, 0, 1544, 0, 2664, 971, 1092, 2665, 0,
	0, 0, 2670, 0, 2662, 0, 0, 1537, 0, 2667,
	2671, 2666, 0, 2668, 0, 0, 0, 2669, 2132, 2133,
	2663, 888, 0, 0, 1987, 0, 1092, 2672, 0, 0,
	0, 0, 0, 0, 1541, 0, 0, 0, 1545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1548,
	0, 971, 0, 0, 0, 1470, 971, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	0, 0, 0, 0, 0, 1542, 0, 0, 0, 0,
	0, 0, 2884, 0, 1550, 1549, 0, 0, 0, 5896,
	0, 0, 0, 834, 0, 0, 0, 2139, 0, 0,
	2109, 0, 0, 0, 2121, 2122, 2123, 0, 971, 0,
	0, 1515, 0, 0, 1519, 0, 2664, 0, 0, 2665,
	1544, 1987, 0, 2670, 0, 2662, 0, 0, 0, 0,
	2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669, 2132,
	2133, 2663, 1069, 0, 0, 0, 0, 0, 2672, 0,
	0, 0, 0, 0, 0, 1663, 0, 0, 0, 0,
	0, 1540, 838, 0, 0, 1561, 0, 0, 0, 0,
	1706, 0, 0, 0, 0, 0, 1548, 0, 0, 838,
	838, 0, 0, 0, 0, 838, 838, 0, 0, 0,
	0, 1553, 838, 838, 0, 2139, 0, 0, 2109, 838,
	0, 0, 2121, 2122, 2123, 0, 838, 0, 0, 2878,
	0, 1550, 1549, 1069, 2664, 0, 0, 838, 0, 0,
	0, 2670, 0, 2662, 0, 0, 0, 0, 2667, 2671,
	2666, 1069, 2668, 0, 0, 0, 2669, 2132, 2133, 2663,
	0, 0, 0, 0, 0, 0, 2672, 834, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 838, 0, 838, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 1069, 0, 1092,
	1837, 0, 0, 0, 838, 0, 0, 0, 1540, 0,
	0, 838, 0, 6287, 0, 838, 838, 0, 0, 838,
	1131, 0, 0, 0, 0, 838, 2139, 0, 0, 2109,
	0, 0, 0, 2121, 2122, 2123, 0, 838, 1553, 0,
	0, 0, 0, 0, 0, 2664, 0, 0, 2665, 0,
	0, 0, 2670, 0, 2662, 0, 0, 0, 0, 2667,
	2671, 2666, 0, 2668, 0, 0, 0, 2669, 2132, 2133,
	2663, 0, 0, 0, 1092, 0, 0, 2672, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	790, 0, 790, 790, 790, 0, 0, 790, 790, 790,
	0, 0, 790, 0, 838, 0, 0, 0, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 1955, 0,
	1987, 0, 0, 0, 1963, 1964, 0, 2664, 0, 0,
	2665, 0, 0, 0, 2670, 0, 2662, 0, 0, 0,
	838, 2667, 2671, 2666, 0, 2668, 0, 971, 0, 2669,
	2132, 2133, 2663, 0, 0, 0, 0, 0, 838, 2672,
	0, 0, 0, 838, 0, 0, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 1015,
	0, 1069, 1069, 1069, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 2128, 0, 0, 0, 0, 0, 0, 0, 0,
	2118, 2119, 2120, 0, 1092, 0, 0, 6267, 0, 2112,
	2113, 2114, 2115, 2116, 2117, 1015, 1069, 971, 0, 0,
	0, 971, 0, 0, 0, 0, 965, 0, 0, 1069,
	1069, 0, 0, 0, 0, 0, 0, 0, 965, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 1092, 0,
	1019, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 1037, 1041, 0, 0, 0, 0, 838,
	0, 888, 0, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 6266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	1092, 1069, 2128, 0, 0, 0, 2720, 2139, 0, 1069,
	2109, 2118, 2119, 2120, 2121, 2122, 2123, 0, 6257, 0,
	2112, 2113, 2114, 2115, 2116, 2117, 2664, 0, 0, 2665,
	0, 0, 0, 2670, 0, 2662, 0, 971, 0, 2759,
	2667, 2671, 2666, 0, 2668, 0, 0, 1069, 2669, 2132,
	2133, 2663, 0, 0, 0, 0, 0, 0, 2672, 0,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 838, 838, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 838,
	2128, 0, 838, 838, 838, 0, 0, 6331, 0, 2118,
	2119, 2120, 0, 0, 0, 0, 0, 0, 2112, 2113,
	2114, 2115, 2116, 2117, 0, 0, 834, 0, 2887, 838,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 2139, 0, 0, 2109, 0, 838, 838, 2121, 2122,
	2123, 0, 0, 5810, 0, 0, 1092, 0, 0, 0,
	2664, 838, 838, 2665, 0, 0, 0, 2670, 0, 2662,
	1987, 0, 0, 0, 2667, 2671, 2666, 6331, 2668, 0,
	0, 0, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 6396, 0, 0, 838, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 2974, 0, 0, 1015,
	1015, 2128, 0, 0, 0, 0, 0, 0, 0, 0,
	2118, 2119, 2120, 0, 0, 0, 0, 6096, 0, 2112,
	2113, 2114, 2115, 2116, 2117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 1069, 1092, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3075, 1069, 0,
	3077, 0, 0, 2128, 0, 0, 0, 0, 0, 0,
	0, 0, 2118, 2119, 2120, 0, 971, 0, 0, 6082,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3112, 0, 971, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 3120, 3121, 0, 0,
	0, 0, 0, 0, 2139, 0, 0, 2109, 0, 0,
	838, 2121, 2122, 2123, 0, 0, 838, 0, 0, 0,
	0, 0, 838, 2664, 0, 0, 2665, 838, 0, 838,
	2670, 0, 2662, 0, 0, 0, 0, 2667, 2671, 2666,
	0, 2668, 838, 0, 0, 2669, 2132, 2133, 2663, 0,
	0, 0, 0, 0, 0, 2672, 0, 0, 0, 1069,
	838, 0, 0, 0, 0, 0, 0, 838, 0, 1069,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 3189, 0, 0, 3192, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 1069, 0,
	790, 790, 0, 0, 0, 790, 790, 0, 790, 790,
	0, 0, 0, 5767, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 2128, 0, 0, 0, 0, 0, 0, 0,
	0, 2118, 2119, 2120, 0, 0, 0, 0, 6059, 0,
	2112, 2113, 2114, 2115, 2116, 2117, 838, 0, 0, 1987,
	0, 1069, 0, 0, 0, 0, 0, 2139, 0, 838,
	2109, 0, 0, 838, 2121, 2122, 2123, 0, 0, 0,
	0, 971, 838, 838, 0, 0, 2664, 0, 0, 2665,
	0, 0, 0, 2670, 0, 2662, 0, 0, 0, 838,
	2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669, 2132,
	2133, 2663, 0, 0, 0, 0, 0, 1092, 2672, 1092,
	1092, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	838, 0, 0, 0, 0, 838, 838, 838, 0, 838,
	0, 0, 0, 0, 0, 0, 2128, 0, 838, 1987,
	0, 0, 0, 0, 0, 2118, 2119, 2120, 1069, 0,
	0, 0, 0, 0, 2112, 2113, 2114, 2115, 2116, 2117,
	0, 0, 0, 0, 0, 0, 1092, 838, 0, 1987,
	0, 0, 2139, 0, 0, 2109, 0, 0, 0, 2121,
	2122, 2123, 0, 0, 0, 0, 1987, 0, 0, 0,
	0, 2664, 971, 0, 2665, 0, 0, 838, 2670, 973,
	2662, 0, 0, 0, 0, 2667, 2671, 2666, 0, 2668,
	0, 973, 973, 2669, 2132, 2133, 2663, 0, 0, 0,
	0, 0, 0, 2672, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 973, 0, 0, 0, 1016, 0, 1016,
	0, 0, 0, 0, 0, 0, 973, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1016, 1016, 1016, 0,
	0, 0, 0, 973, 973, 973, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2139, 1538, 0, 2109, 0, 0,
	1539, 2121, 2122, 2123, 1547, 0, 0, 0, 0, 838,
	973, 838, 838, 2664, 0, 0, 2665, 838, 0, 0,
	2670, 0, 2662, 0, 0, 0, 0, 2667, 2671, 2666,
	0, 2668, 0, 0, 0, 2669, 2132, 2133, 2663, 0,
	0, 0, 0, 0, 0, 2672, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 2128,
	0, 0, 0, 0, 0, 0, 1586, 0, 2118, 2119,
	2120, 0, 0, 0, 0, 0, 0, 2112, 2113, 2114,
	2115, 2116, 2117, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1546, 838, 0, 0, 838,
	0, 1069, 0, 0, 0, 0, 0, 0, 838, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 838, 0, 0, 1537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1649,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1541, 0, 0, 0,
	838, 838, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 1543, 0, 838, 0, 838, 0, 1542, 0, 0,
	0, 1674, 2128, 0, 0, 0, 0, 0, 0, 0,
	0, 2118, 2119, 2120, 0, 0, 0, 0, 5730, 0,
	2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1651, 0, 0, 0, 0,
	0, 0, 1544, 0, 0, 0, 0, 0, 0, 2139,
	0, 838, 2109, 0, 0, 0, 2121, 2122, 2123, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 2664, 0,
	0, 2665, 0, 0, 838, 2670, 1069, 2662, 0, 1053,
	0, 0, 2667, 2671, 2666, 0, 2668, 1545, 0, 0,
	2669, 2132, 2133, 2663, 0, 0, 0, 0, 1548, 0,
	2672, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 1640, 0, 1092, 0, 0, 0, 2729,
	1069, 1585, 0, 1550, 1549, 0, 838, 2128, 1987, 0,
	0, 0, 0, 0, 0, 1650, 2118, 2119, 2120, 0,
	0, 0, 0, 5704, 0, 2112, 2113, 2114, 2115, 2116,
	2117, 2768, 0, 0, 0, 0, 0, 0, 2778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 1069, 0, 0, 1646, 0, 838, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 1987, 838, 0, 0, 0, 0, 1643, 0,
	1540, 3555, 0, 0, 973, 0, 0, 973, 0, 838,
	838, 0, 0, 0, 973, 0, 0, 973, 0, 0,
	1987, 3569, 1648, 0, 0, 0, 0, 0, 0, 0,
	1553, 0, 0, 3586, 0, 0, 0, 0, 0, 0,
	0, 3597, 0, 0, 0, 0, 0, 0, 0, 2128,
	0, 0, 1639, 0, 0, 0, 0, 0, 2118, 2119,
	2120, 0, 0, 1675, 1654, 5682, 973, 2112, 2113, 2114,
	2115, 2116, 2117, 0, 3643, 3644, 3645, 932, 0, 953,
	0, 955, 3649, 0, 3650, 0, 0, 975, 0, 0,
	0, 0, 982, 3660, 0, 0, 1672, 0, 0, 143,
	0, 3671, 1641, 3675, 3676, 3677, 3678, 0, 0, 3685,
	0, 3687, 3690, 0, 1010, 1011, 1647, 1013, 0, 0,
	0, 0, 331, 0, 0, 3713, 3714, 0, 1069, 0,
	3719, 3720, 1644, 3721, 0, 1044, 0, 1047, 0, 1642,
	0, 0, 0, 1652, 0, 0, 0, 0, 3731, 3732,
	3733, 0, 0, 0, 2768, 0, 0, 0, 0, 0,
	0, 0, 0, 3751, 3752, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	1645, 3767, 3768, 0, 0, 3770, 3771, 0, 3773, 0,
	0, 0, 3775, 0, 0, 0, 0, 0, 3780, 3781,
	0, 0, 3783, 0, 0, 3787, 0, 3788, 0, 0,
	0, 3791, 0, 3793, 0, 0, 0, 0, 0, 3794,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3807, 3808, 3809, 0, 0, 0, 0, 0, 0,
	3821, 0, 3822, 0, 0, 3825, 0, 0, 0, 0,
	0, 3827, 0, 3828, 0, 2768, 3831, 3125, 3833, 0,
	0, 0, 0, 3835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3850, 0, 0, 0, 0, 0, 0,
	3853, 0, 0, 0, 3855, 0, 3859, 0, 0, 0,
	0, 0, 0, 3876, 3877, 0, 0, 0, 0, 0,
	0, 3886, 0, 0, 0, 0, 3894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3907, 972, 0,
	0, 0, 0, 0, 2128, 0, 0, 0, 0, 0,
	972, 972, 0, 2118, 2119, 2120, 0, 0, 0, 0,
	5660, 973, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 973, 0,
	3944, 0, 3946, 0, 973, 972, 972, 0, 0, 0,
	0, 0, 973, 973, 0, 0, 0, 0, 0, 0,
	2139, 0, 0, 2109, 0, 0, 0, 2121, 2122, 2123,
	0, 0, 972, 972, 972, 0, 0, 0, 0, 2664,
	973, 0, 2665, 0, 0, 0, 2670, 0, 2662, 0,
	0, 0, 973, 2667, 2671, 2666, 0, 2668, 973, 0,
	0, 2669, 2132, 2133, 2663, 0, 0, 0, 0, 972,
	0, 2672, 0, 0, 0, 0, 2139, 0, 0, 2109,
	0, 0, 0, 2121, 2122, 2123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2664, 0, 0, 2665, 1069,
	0, 0, 2670, 0, 2662, 0, 0, 0, 0, 2667,
	2671, 2666, 0, 2668, 0, 0, 0, 2669, 2132, 2133,
	2663, 1016, 0, 0, 0, 1016, 1016, 2672, 0, 0,
	4032, 2139, 0, 0, 2109, 0, 0, 973, 2121, 2122,
	2123, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
	2664, 0, 0, 2665, 0, 0, 0, 2670, 0, 2662,
	0, 0, 0, 0, 2667, 2671, 2666, 0, 2668, 0,
	0, 0, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 0, 0, 0, 0, 2139, 0, 1069,
	2109, 1069, 1069, 0, 2121, 2122, 2123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2664, 0, 0, 2665,
	0, 0, 0, 2670, 0, 2662, 0, 0, 0, 0,
	2667, 2671, 2666, 0, 2668, 0, 0, 5295, 2669, 2132,
	2133, 2663, 0, 0, 0, 0, 0, 0, 2672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2664, 1069, 0,
	2665, 0, 0, 0, 2670, 0, 2662, 0, 0, 0,
	0, 2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669,
	2132, 2133, 2663, 2139, 0, 0, 2109, 0, 0, 2672,
	2121, 2122, 2123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2664, 0, 0, 2665, 0, 0, 0, 2670,
	0, 2662, 0, 0, 0, 0, 2667, 2671, 2666, 0,
	2668, 0, 973, 0, 2669, 2132, 2133, 2663, 0, 0,
	0, 1989, 0, 1989, 2672, 0, 0, 0, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 0, 0,
	0, 0, 0, 0, 973, 0, 5257, 2664, 0, 0,
	2665, 973, 0, 0, 2670, 0, 2662, 0, 0, 0,
	0, 2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669,
	2132, 2133, 2663, 0, 0, 0, 0, 0, 0, 2672,
	0, 5232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4290, 1441, 0, 4294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1490, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 0, 4331,
	0, 0, 0, 0, 0, 0, 0, 2664, 0, 0,
	2665, 0, 0, 0, 2670, 0, 2662, 0, 0, 0,
	0, 2667, 2671, 2666, 0, 2668, 1527, 4373, 0, 2669,
	2132, 2133, 2663, 0, 0, 4381, 0, 4381, 0, 2672,
	0, 0, 0, 4390, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 1665, 972, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 972, 0, 2128, 972, 0, 0, 0,
	0, 0, 0, 0, 2118, 2119, 2120, 0, 0, 0,
	0, 5519, 0, 2112, 2113, 2114, 2115, 2116, 2117, 0,
	0, 0, 0, 0, 0, 0, 0, 5231, 0, 0,
	0, 0, 0, 4459, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 972, 4476, 4477, 4478, 4479,
	0, 2128, 0, 0, 0, 0, 0, 0, 0, 0,
	2118, 2119, 2120, 0, 0, 1800, 1802, 5502, 0, 2112,
	2113, 2114, 2115, 2116, 2117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4508, 4509, 4510, 0, 2128, 4515, 4516, 4517,
	4518, 0, 0, 0, 0, 2118, 2119, 2120, 0, 0,
	0, 0, 5493, 0, 2112, 2113, 2114, 2115, 2116, 2117,
	0, 0, 0, 0, 0, 1016, 1016, 0, 1016, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	973, 973, 973, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 2128, 0, 0, 0, 0, 0, 0, 0,
	4542, 2118, 2119, 2120, 0, 0, 0, 0, 0, 0,
	2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1016, 1016, 1016, 0, 4571,
	0, 0, 0, 0, 0, 0, 0, 4573, 0, 0,
	0, 1953, 1954, 2128, 0, 0, 0, 0, 0, 0,
	973, 0, 2118, 2119, 2120, 0, 0, 1069, 0, 0,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2128, 0,
	0, 0, 0, 0, 0, 0, 0, 2118, 2119, 2120,
	0, 0, 0, 0, 5234, 0, 2112, 2113, 2114, 2115,
	2116, 2117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4624, 0, 0, 0, 0, 0,
	0, 0, 0, 2128, 4628, 0, 0, 0, 0, 0,
	0, 0, 2118, 2119, 2120, 0, 0, 0, 0, 0,
	972, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 972, 972, 0, 0, 3694, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4662, 4663, 0, 0, 0,
	0, 0, 4667, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 2128, 0, 0, 0, 972, 0, 0,
	0, 3753, 2118, 2119, 2120, 0, 0, 0, 0, 0,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 3769,
	0, 0, 0, 3772, 0, 3774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2751, 2752, 2753, 2754, 0,
	2755, 1989, 0, 0, 0, 0, 0, 0, 3792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 972, 0, 0, 0,
	0, 3813, 1988, 0, 0, 2139, 2842, 0, 2109, 3823,
	0, 0, 2121, 2122, 2123, 0, 3826, 0, 0, 0,
	3829, 0, 0, 3832, 2664, 0, 3834, 2665, 0, 0,
	0, 2670, 0, 2662, 0, 0, 5230, 3840, 2667, 2671,
	2666, 0, 2668, 0, 0, 965, 2669, 2132, 2133, 2663,
	0, 965, 0, 0, 0, 0, 2672, 0, 2139, 3854,
	0, 2109, 0, 3860, 0, 2121, 2122, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2664, 0, 3890,
	2665, 0, 0, 0, 2670, 0, 2662, 0, 0, 0,
	0, 2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669,
	2132, 2133, 2663, 0, 0, 0, 0, 0, 0, 2672,
	0, 5226, 2957, 0, 0, 2139, 0, 0, 2109, 0,
	0, 0, 2121, 2122, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2664, 0, 0, 2665, 0, 0,
	0, 2670, 0, 2662, 0, 0, 0, 0, 2667, 2671,
	2666, 0, 2668, 0, 0, 0, 2669, 2132, 2133, 2663,
	0, 3963, 0, 0, 0, 4880, 2672, 0, 0, 0,
	0, 0, 0, 0, 0, 3974, 0, 0, 0, 0,
	0, 0, 0, 0, 3033, 3034, 3035, 3036, 3037, 0,
	0, 972, 0, 0, 0, 0, 0, 4381, 0, 0,
	1988, 0, 1988, 2139, 4906, 3974, 2109, 3073, 0, 0,
	2121, 2122, 2123, 0, 3076, 0, 0, 0, 0, 0,
	0, 0, 2664, 972, 0, 2665, 0, 0, 0, 2670,
	972, 2662, 0, 0, 0, 0, 2667, 2671, 2666, 0,
	2668, 0, 0, 0, 2669, 2132, 2133, 2663, 0, 2139,
	0, 0, 2109, 0, 2672, 0, 2121, 2122, 2123, 1315,
	1315, 0, 0, 0, 0, 0, 0, 0, 2664, 0,
	0, 2665, 0, 0, 0, 2670, 0, 2662, 0, 4381,
	0, 0, 2667, 2671, 2666, 0, 2668, 0, 0, 0,
	2669, 2132, 2133, 2663, 0, 4976, 4977, 0, 0, 0,
	2672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5026,
	0, 0, 0, 0, 0, 0, 0, 0, 5028, 0,
	0, 0, 0, 0, 0, 0, 0, 5030, 5031, 5032,
	5033, 0, 0, 5036, 5037, 0, 0, 5040, 5041, 5042,
	5043, 5044, 5045, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5063, 0, 5064,
	3531, 0, 0, 5066, 0, 0, 0, 0, 1649, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3224, 3225, 5094, 0, 0, 972, 0, 5099, 5100,
	0, 0, 0, 5101, 5102, 0, 0, 0, 0, 0,
	5106, 5107, 5108, 5109, 0, 5111, 5112, 5113, 5114, 0,
	0, 0, 0, 5121, 0, 0, 0, 2139, 0, 0,
	2109, 0, 0, 0, 2121, 2122, 2123, 0, 0, 0,
	2942, 0, 0, 0, 0, 0, 2664, 0, 0, 2665,
	0, 0, 0, 2670, 0, 2662, 5144, 0, 5145, 0,
	2667, 2671, 2666, 0, 2668, 0, 0, 5151, 2669, 2132,
	2133, 2663, 0, 0, 1651, 0, 0, 0, 2672, 0,
	2128, 0, 0, 0, 0, 0, 0, 0, 0, 2118,
	2119, 2120, 0, 0, 0, 0, 0, 0, 2112, 2113,
	2114, 2115, 2116, 2117, 0, 0, 0, 972, 0, 972,
	972, 972, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2128, 1989, 0, 0, 0, 0, 1344,
	3296, 0, 2118, 2119, 2120, 0, 0, 0, 0, 0,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0,
	0, 0, 1640, 0, 0, 0, 0, 0, 0, 0,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1650, 0, 0, 0, 0, 972,
	2128, 0, 0, 0, 0, 0, 0, 0, 0, 2118,
	2119, 2120, 0, 0, 1989, 0, 5217, 0, 2112, 2113,
	2114, 2115, 2116, 2117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	1979, 0, 1989, 0, 2069, 0, 0, 1643, 0, 0,
	0, 0, 2085, 0, 2092, 0, 790, 0, 0, 0,
	0, 2103, 0, 0, 0, 0, 0, 0, 3532, 0,
	0, 1648, 2585, 2586, 2587, 2588, 2589, 0, 2128, 0,
	0, 0, 0, 2594, 973, 0, 0, 2118, 2119, 2120,
	0, 0, 0, 0, 5209, 0, 2112, 2113, 2114, 2115,
	2116, 2117, 973, 0, 0, 0, 973, 2612, 973, 0,
	822, 0, 0, 1654, 973, 831, 0, 0, 0, 0,
	0, 0, 0, 0, 2128, 0, 0, 0, 0, 0,
	0, 973, 0, 2118, 2119, 2120, 0, 0, 0, 0,
	5065, 973, 2112, 2113, 2114, 2115, 2116, 2117, 143, 0,
	0, 1641, 0, 0, 0, 0, 973, 973, 0, 0,
	0, 0, 0, 1989, 973, 1647, 0, 0, 0, 5366,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 973,
	0, 1644, 0, 973, 0, 0, 973, 0, 1642, 973,
	0, 0, 1652, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 3533, 0, 4543, 973, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	1988, 0, 973, 0, 0, 0, 973, 0, 0, 1645,
	0, 3534, 0, 0, 1649, 0, 0, 0, 0, 1989,
	0, 0, 973, 0, 0, 0, 4572, 0, 0, 0,
	1016, 0, 1016, 1016, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 1163, 1165, 1169, 0, 0, 5423,
	0, 0, 0, 5425, 0, 0, 0, 0, 0, 0,
	0, 5428, 5429, 5430, 5431, 5432, 0, 0, 5435, 5436,
	5437, 5438, 0, 0, 0, 0, 1635, 0, 0, 0,
	0, 0, 0, 5443, 5444, 0, 5446, 0, 0, 0,
	0, 0, 0, 0, 0, 4609, 5454, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	1651, 973, 2128, 0, 0, 0, 0, 0, 973, 0,
	0, 2118, 2119, 2120, 0, 0, 0, 0, 4989, 0,
	2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0, 0,
	0, 2768, 1989, 0, 5471, 5472, 5473, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 4638, 0, 0, 0,
	0, 0, 0, 0, 5481, 0, 0, 2139, 0, 0,
	2109, 4654, 0, 0, 2121, 2122, 2123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2664, 0, 0, 2665,
	0, 0, 0, 2670, 0, 2662, 0, 0, 1640, 0,
	2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669, 2132,
	2133, 2663, 0, 1016, 2139, 1016, 1016, 2109, 2672, 0,
	1650, 2121, 2122, 2123, 0, 0, 4807, 0, 0, 0,
	0, 0, 0, 2664, 0, 0, 2665, 0, 5507, 0,
	2670, 0, 2662, 0, 0, 0, 0, 2667, 2671, 2666,
	0, 2668, 0, 0, 0, 2669, 2132, 2133, 2663, 0,
	1646, 0, 0, 0, 0, 2672, 0, 0, 0, 0,
	0, 2139, 3296, 0, 2109, 0, 0, 0, 2121, 2122,
	2123, 5549, 0, 1643, 0, 0, 0, 0, 0, 0,
	2664, 0, 0, 2665, 0, 0, 0, 2670, 0, 2662,
	0, 0, 0, 0, 2667, 2671, 2666, 1648, 2668, 3514,
	0, 0, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 0, 0, 0, 0, 0, 5613, 0,
	0, 0, 0, 0, 5621, 0, 0, 1639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1636, 1654,
	0, 0, 0, 0, 0, 0, 0, 0, 4381, 0,
	0, 0, 0, 0, 0, 0, 3580, 0, 0, 0,
	0, 0, 5665, 0, 0, 0, 0, 5668, 0, 0,
	0, 1633, 0, 5674, 143, 0, 0, 1641, 0, 0,
	0, 0, 3630, 0, 0, 0, 0, 0, 0, 0,
	1989, 1647, 0, 0, 0, 0, 1989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1644, 0, 0,
	0, 0, 0, 0, 1642, 0, 0, 0, 1652, 0,
	0, 0, 0, 0, 0, 0, 5710, 5711, 0, 0,
	0, 0, 5716, 0, 0, 0, 0, 0, 5718, 1177,
	0, 1180, 0, 0, 0, 0, 0, 0, 1182, 0,
	0, 0, 0, 0, 0, 1645, 0, 0, 0, 0,
	0, 0, 0, 5731, 5732, 0, 0, 0, 3723, 3724,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5745, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 1979,
	1979, 1979, 0, 0, 0, 0, 0, 4905, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 1169, 0, 0, 0, 0, 973, 973, 0,
	0, 0, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 2768, 0, 0, 0, 0, 973, 973, 0,
	0, 0, 2139, 0, 0, 2109, 0, 973, 0, 2121,
	2122, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2664, 0, 1988, 2665, 0, 0, 0, 2670, 0,
	2662, 0, 0, 0, 0, 2667, 2671, 2666, 0, 2668,
	0, 0, 0, 2669, 2132, 2133, 2663, 0, 2585, 2586,
	0, 0, 0, 2672, 0, 0, 0, 0, 0, 1988,
	0, 0, 1315, 0, 0, 0, 3299, 3300, 3301, 3302,
	3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312,
	3313, 3314, 3895, 3320, 0, 0, 4381, 0, 0, 0,
	0, 0, 2128, 1988, 0, 0, 0, 4734, 1989, 1989,
	1989, 2118, 2119, 2120, 5889, 0, 0, 0, 4965, 0,
	2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5058, 0, 972, 0, 0,
	0, 1988, 0, 0, 0, 0, 3945, 0, 3947, 2128,
	0, 0, 0, 0, 0, 0, 0, 0, 2118, 2119,
	2120, 0, 5923, 0, 0, 5926, 0, 2112, 2113, 2114,
	2115, 2116, 2117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	5110, 0, 0, 0, 0, 5115, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 972, 2128, 972, 0, 0,
	973, 0, 0, 972, 0, 2118, 2119, 2120, 0, 0,
	0, 0, 4747, 973, 2112, 2113, 2114, 2115, 2116, 2117,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 3974, 0, 973,
	0, 0, 0, 0, 0, 972, 972, 0, 0, 0,
	0, 0, 1988, 972, 0, 0, 4022, 4024, 0, 0,
	0, 972, 0, 4030, 4031, 0, 0, 0, 972, 0,
	0, 0, 972, 0, 0, 972, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 972,
	1169, 0, 0, 0, 0, 0, 1846, 972, 1169, 1169,
	0, 1861, 0, 972, 0, 0, 973, 973, 973, 0,
	0, 972, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 6065, 1988, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 6085, 6086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 2139, 0, 0, 2109, 0, 0,
	0, 2121, 2122, 2123, 973, 0, 0, 0, 0, 0,
	973, 0, 0, 2664, 0, 0, 2665, 1946, 0, 0,
	2670, 0, 2662, 0, 0, 0, 0, 2667, 2671, 2666,
	0, 2668, 0, 972, 0, 2669, 2132, 2133, 2663, 0,
	972, 0, 0, 1169, 0, 2672, 0, 972, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2664, 0, 0,
	2665, 1988, 0, 0, 2670, 0, 2662, 972, 0, 0,
	0, 2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669,
	2132, 2133, 2663, 0, 0, 0, 0, 0, 0, 2672,
	0, 0, 0, 0, 0, 6191, 0, 0, 0, 0,
	2606, 2608, 2609, 0, 0, 0, 0, 0, 6201, 0,
	0, 0, 0, 0, 0, 0, 0, 2128, 0, 0,
	0, 0, 2139, 0, 0, 2109, 2118, 2119, 2120, 2121,
	2122, 2123, 6217, 0, 0, 2112, 2113, 2114, 2115, 2116,
	2117, 2664, 0, 0, 2665, 0, 0, 0, 2670, 0,
	2662, 0, 0, 0, 0, 2667, 2671, 2666, 0, 2668,
	0, 0, 0, 2669, 2132, 2133, 2663, 0, 0, 0,
	0, 1979, 0, 2672, 0, 0, 0, 0, 0, 0,
	0, 3379, 3381, 0, 0, 0, 0, 0, 3387, 0,
	3398, 3401, 0, 3412, 3413, 3418, 3421, 0, 0, 0,
	0, 0, 3429, 1989, 0, 0, 3433, 3439, 3381, 3381,
	3446, 3381, 0, 3381, 3381, 3381, 0, 0, 0, 0,
	0, 0, 0, 0, 3461, 0, 0, 0, 3312, 3313,
	3314, 3320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2139, 0, 0, 2109, 6281, 0, 0,
	2121, 2122, 2123, 0, 0, 4199, 0, 0, 2765, 0,
	0, 0, 2664, 0, 0, 2665, 0, 0, 0, 2670,
	0, 2662, 0, 0, 0, 2793, 2667, 2671, 2666, 0,
	2668, 5445, 0, 0, 2669, 2132, 2133, 2663, 0, 0,
	0, 0, 0, 5455, 2672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2139, 0,
	0, 2109, 0, 0, 0, 2121, 2122, 2123, 0, 1988,
	0, 0, 0, 0, 0, 1988, 0, 2664, 0, 0,
	2665, 0, 0, 0, 2670, 0, 2662, 0, 0, 3617,
	973, 2667, 2671, 2666, 0, 2668, 0, 0, 0, 2669,
	2132, 2133, 2663, 0, 0, 0, 0, 0, 0, 2672,
	0, 4189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3974, 0, 0, 2139,
	0, 0, 2109, 0, 0, 0, 2121, 2122, 2123, 0,
	0, 4184, 0, 0, 0, 973, 0, 0, 2664, 973,
	973, 2665, 0, 0, 0, 2670, 0, 2662, 0, 0,
	0, 0, 2667, 2671, 2666, 0, 2668, 0, 0, 0,
	2669, 2132, 2133, 2663, 0, 972, 0, 0, 0, 0,
	2672, 0, 0, 0, 0, 0, 0, 6405, 0, 0,
	1989, 0, 1989, 2996, 0, 0, 3001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2128,
	1989, 0, 3785, 0, 0, 0, 972, 972, 2118, 2119,
	2120, 0, 0, 0, 0, 4728, 972, 2112, 2113, 2114,
	2115, 2116, 2117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4600, 4601, 2128, 0, 0, 0, 0, 0, 0,
	0, 0, 2118, 2119, 2120, 0, 1989, 0, 4610, 4407,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2139, 973, 0, 2109, 0, 0, 973, 2121,
	2122, 2123, 0, 0, 0, 0, 0, 1988, 1988, 1988,
	0, 2664, 0, 0, 2665, 0, 0, 0, 2670, 0,
	2662, 0, 0, 3138, 0, 2667, 2671, 2666, 0, 2668,
	0, 0, 0, 2669, 2132, 2133, 2663, 2128, 0, 0,
	0, 0, 0, 2672, 0, 0, 2118, 2119, 2120, 0,
	973, 0, 0, 4217, 0, 2112, 2113, 2114, 2115, 2116,
	2117, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2139, 0, 0, 2109, 3974, 3974, 0, 2121, 2122,
	2123, 0, 0, 4150, 0, 0, 0, 0, 0, 972,
	2664, 0, 0, 2665, 0, 0, 0, 2670, 0, 2662,
	0, 0, 972, 0, 2667, 2671, 2666, 0, 2668, 0,
	0, 0, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2128, 0,
	0, 0, 0, 0, 0, 0, 0, 2118, 2119, 2120,
	0, 0, 0, 0, 0, 0, 2112, 2113, 2114, 2115,
	2116, 2117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 972, 972, 0, 1979,
	0, 0, 0, 2128, 4047, 4048, 0, 4050, 0, 0,
	0, 2092, 2118, 2119, 2120, 0, 0, 0, 0, 2594,
	0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0, 0,
	0, 2103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4080,
	4081, 0, 0, 972, 2128, 4087, 0, 0, 0, 972,
	0, 0, 0, 2118, 2119, 2120, 0, 0, 0, 0,
	835, 0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0,
	0, 2124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1989, 0, 0, 4128, 0, 0, 0, 0,
	0, 0, 0, 4157, 0, 0, 4145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3418, 3418,
	3418, 0, 4907, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4926, 0, 0, 0, 4222, 0, 0, 0,
	0, 0, 0, 0, 0, 2139, 0, 0, 2109, 0,
	0, 0, 2121, 2122, 2123, 0, 0, 2124, 0, 973,
	0, 4236, 0, 973, 2664, 0, 4240, 2665, 0, 0,
	0, 2670, 0, 2662, 0, 0, 0, 0, 2667, 2671,
	2666, 0, 2668, 0, 0, 0, 2669, 2132, 2133, 2663,
	0, 0, 0, 0, 973, 0, 2672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 2128, 0, 0,
	0, 0, 1988, 0, 0, 0, 2118, 2119, 2120, 0,
	0, 0, 0, 0, 0, 2112, 2113, 2114, 2115, 2116,
	2117, 2139, 0, 0, 2109, 0, 0, 0, 2121, 2122,
	2123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2664, 0, 0, 2665, 0, 0, 0, 2670, 0, 2662,
	0, 0, 0, 0, 2667, 2671, 2666, 0, 2668, 0,
	0, 0, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 0, 0, 0, 1361, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 1071, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 2128, 0, 0, 0,
	0, 0, 0, 4417, 0, 2118, 2119, 2120, 0, 0,
	0, 0, 0, 0, 2112, 2113, 2114, 2115, 2116, 2117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4451, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3531, 0,
	0, 0, 0, 0, 972, 0, 1649, 0, 972, 972,
	0, 2139, 0, 0, 2109, 0, 0, 0, 2121, 2122,
	2123, 0, 1989, 0, 0, 0, 0, 0, 0, 3974,
	2664, 0, 0, 2665, 0, 0, 0, 2670, 0, 2662,
	0, 0, 0, 0, 2667, 2671, 2666, 0, 2668, 1988,
	0, 1988, 2669, 2132, 2133, 2663, 0, 0, 0, 0,
	0, 0, 2672, 0, 0, 0, 0, 0, 2942, 0,
	0, 0, 0, 4536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2139,
	0, 0, 2109, 0, 0, 3397, 2121, 2122, 2123, 1988,
	0, 0, 1651, 1016, 0, 0, 0, 0, 2664, 0,
	0, 2665, 0, 0, 0, 2670, 0, 2662, 0, 0,
	0, 0, 2667, 2671, 2666, 0, 2668, 0, 0, 0,
	2669, 2132, 2133, 2663, 0, 0, 0, 972, 0, 0,
	2672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 1070, 1070, 0, 1988, 0, 0, 0, 0,
	0, 0, 0, 1016, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1640, 0, 972, 0, 0, 0, 0, 972, 973, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	2128, 0, 1646, 0, 0, 0, 0, 0, 0, 2118,
	2119, 2120, 1988, 0, 0, 3641, 3356, 0, 2112, 2113,
	2114, 2115, 2116, 2117, 0, 1643, 0, 0, 0, 0,
	0, 0, 0, 5358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2124, 3532, 0, 0, 1648,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1979, 0, 0, 0, 1979,
	0, 0, 0, 0, 0, 4144, 2128, 0, 0, 0,
	0, 1654, 0, 0, 0, 2118, 2119, 2120, 0, 0,
	0, 0, 4697, 0, 2112, 2113, 2114, 2115, 2116, 2117,
	0, 0, 4705, 4706, 0, 0, 4709, 0, 0, 0,
	4712, 0, 0, 0, 0, 0, 143, 0, 0, 3527,
	0, 4717, 0, 0, 0, 2124, 0, 0, 0, 0,
	1169, 1989, 0, 1647, 4723, 0, 0, 0, 0, 0,
	0, 2124, 0, 0, 0, 0, 0, 0, 2124, 1644,
	0, 4733, 0, 973, 1163, 0, 1642, 0, 4738, 2124,
	1652, 0, 3381, 3381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3533, 0, 0, 4749, 0, 0, 0,
	0, 4751, 0, 0, 0, 0, 0, 1163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1645, 1163, 3534,
	0, 0, 0, 0, 0, 4770, 4771, 4772, 0, 0,
	0, 0, 0, 0, 0, 4778, 0, 0, 5462, 0,
	0, 0, 3429, 0, 0, 0, 0, 0, 0, 0,
	0, 3379, 0, 0, 0, 3381, 0, 0, 0, 0,
	0, 1989, 0, 4804, 4805, 4806, 0, 0, 0, 0,
	3878, 0, 1315, 3882, 0, 0, 2128, 0, 0, 0,
	0, 0, 0, 0, 0, 2118, 2119, 2120, 0, 0,
	3252, 1989, 0, 0, 2112, 2113, 2114, 2115, 2116, 2117,
	0, 1988, 0, 0, 0, 0, 0, 0, 1989, 0,
	0, 0, 0, 0, 973, 0, 0, 3381, 0, 4849,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4884, 0, 0, 2128, 0, 0, 0, 0, 0,
	4889, 4890, 0, 2118, 2119, 2120, 1071, 1169, 0, 0,
	0, 0, 2112, 2113, 2114, 2115, 2116, 2117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 1071, 0, 4011, 4011, 4011, 4011,
	4011, 4011, 4011, 4011, 0, 972, 0, 0, 4011, 4011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5702, 5703, 0, 0, 0, 0,
	1016, 1016, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 0, 0, 1016, 0, 292,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 1071, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2124, 2124, 2124, 2124, 2124, 0, 1981, 0, 0,
	2124, 1988, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3408, 0, 301, 0, 0, 0,
	1070, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4277, 5189, 4277, 0, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 5198, 5199, 0, 0, 0, 0, 5203, 5204, 1278,
	0, 4310, 1169, 0, 5207, 5208, 0, 0, 0, 0,
	0, 5211, 0, 1265, 0, 0, 0, 0, 5213, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 303, 2103,
	0, 0, 0, 0, 0, 0, 296, 4359, 1267, 0,
	1989, 0, 0, 0, 4370, 0, 0, 972, 0, 0,
	0, 0, 0, 1169, 1169, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 1274, 5246, 4397, 5249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 972, 0,
	0, 0, 0, 0, 0, 1071, 0, 5936, 5937, 0,
	0, 0, 0, 5268, 1989, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1016, 1016, 0, 0, 0, 0, 308, 1084, 1084,
	0, 0, 1989, 0, 0, 0, 271, 1271, 0, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 1070, 0, 0, 0, 0, 0, 1279, 0,
	0, 1272, 0, 0, 309, 0, 306, 0, 0, 0,
	0, 293, 0, 0, 307, 0, 0, 4491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 1071, 0, 0, 1280, 5353, 0, 0, 0,
	0, 1281, 1425, 0, 972, 0, 300, 0, 0, 0,
	1273, 0, 310, 0, 0, 0, 1264, 0, 0, 0,
	0, 0, 2903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6061, 0, 0, 0,
	0, 0, 0, 0, 0, 5378, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 0, 1262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2903, 0,
	1988, 0, 0, 0, 0, 0, 0, 0, 0, 5407,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 1169, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 1071, 0, 1071,
	0, 5457, 0, 0, 0, 0, 0, 0, 0, 0,
	1988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 0, 1071,
	1988, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 1988, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 6220, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 5497, 235, 1083, 1083,
	0, 0, 0, 0, 5499, 5500, 5501, 0, 1070, 0,
	0, 0, 0, 0, 0, 231, 0, 0, 4011, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	5508, 0, 0, 0, 5511, 5512, 5513, 0, 0, 0,
	0, 0, 0, 982, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 3381, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 5553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5570, 0, 0, 0, 6286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	1071, 0, 0, 0, 4731, 0, 1981, 1981, 1981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2124, 2124, 2124, 2124, 2124,
	2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
	2124, 221, 0, 0, 0, 0, 2124, 0, 0, 217,
	0, 0, 0, 1070, 0, 1070, 0, 0, 0, 0,
	0, 0, 0, 3408, 3408, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1070, 972, 206, 1070, 0, 0, 0, 0,
	0, 0, 0, 0, 1070, 2124, 0, 2124, 207, 0,
	0, 0, 0, 2124, 0, 218, 0, 0, 0, 0,
	0, 972, 0, 212, 2124, 0, 0, 2124, 0, 0,
	4172, 213, 3408, 3408, 3408, 0, 232, 0, 2124, 2124,
	1071, 0, 0, 0, 2124, 0, 0, 2124, 0, 0,
	0, 0, 0, 0, 0, 2124, 0, 0, 0, 2124,
	0, 0, 0, 0, 0, 2124, 0, 0, 0, 0,
	0, 0, 2124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 2124, 1538, 1571,
	0, 0, 5753, 1539, 0, 0, 0, 1547, 0, 0,
	0, 0, 0, 0, 0, 4359, 0, 0, 0, 0,
	0, 3429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 5780, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 227, 0, 0, 1573, 0, 0, 3730,
	0, 205, 0, 0, 1070, 0, 1070, 0, 5812, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4940,
	4941, 0, 4943, 0, 0, 222, 0, 0, 1546, 0,
	224, 0, 0, 0, 0, 0, 219, 0, 230, 0,
	229, 210, 0, 0, 0, 0, 0, 0, 0, 4975,
	0, 209, 0, 0, 0, 0, 0, 4359, 234, 1551,
	233, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1988,
	0, 0, 0, 2124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5884, 225,
	0, 0, 1537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, 1572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	0, 5917, 0, 1988, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5933, 1543, 0, 0, 0, 0, 0,
	1542, 1988, 0, 0, 5090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 2594, 0, 0, 0, 0, 5958, 5958, 5958,
	0, 5961, 0, 0, 0, 0, 0, 0, 0, 5122,
	3381, 1574, 0, 0, 0, 1544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1575, 0, 0, 1576, 0, 0, 0, 1577, 0,
	0, 2124, 0, 0, 5153, 0, 0, 0, 0, 0,
	1570, 0, 0, 0, 0, 0, 0, 1084, 1084, 0,
	1578, 1548, 0, 1538, 1571, 0, 0, 0, 1539, 0,
	0, 0, 1547, 0, 4011, 0, 4011, 0, 0, 0,
	5175, 5175, 5175, 5175, 5175, 5175, 5175, 0, 5175, 5175,
	0, 0, 0, 0, 3728, 0, 1550, 1549, 1581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 1573, 1580, 0, 1568, 0, 0, 0, 0, 0,
	5212, 0, 0, 0, 6084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1546, 0, 0, 0, 0, 1981, 1582,
	0, 5753, 0, 1540, 0, 0, 0, 0, 0, 5958,
	0, 0, 0, 1068, 1068, 0, 0, 0, 1981, 0,
	1981, 0, 0, 0, 1551, 0, 0, 0, 0, 1086,
	1086, 0, 0, 1553, 1981, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 6165, 0, 0,
	0, 0, 0, 0, 1572, 0, 0, 0, 0, 0,
	0, 6174, 0, 0, 1541, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 2903, 0, 1084, 0, 0,
	0, 0, 0, 0, 2903, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 5332, 0, 1357, 0, 1543,
	0, 0, 0, 2124, 2124, 1542, 2124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 5753, 0,
	0, 0, 0, 0, 0, 5359, 2124, 2124, 0, 3408,
	3408, 0, 0, 2124, 0, 0, 1574, 0, 0, 0,
	1544, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 4172, 4172, 1084, 0, 0, 0, 0, 0,
	0, 0, 2124, 0, 0, 0, 1575, 0, 1071, 1576,
	0, 0, 0, 1577, 2124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1570, 0, 0, 0, 0,
	0, 2124, 0, 0, 0, 1578, 1548, 1083, 1083, 0,
	0, 0, 0, 0, 0, 0, 3408, 3408, 3408, 3408,
	3408, 3408, 3408, 3408, 3408, 3408, 3408, 3408, 3408, 0,
	3408, 0, 4172, 4172, 4172, 0, 0, 0, 0, 1566,
	0, 1550, 1549, 1581, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 5958, 0, 0, 2124, 2903, 3763, 0,
	1579, 0, 1084, 0, 6299, 0, 3766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1580, 2124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2124, 0, 279, 0, 2124, 0, 0, 292,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1582, 0, 0, 295, 1540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5466, 5467, 289, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 1553, 1084,
	1070, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1065, 0, 0, 4011, 4011, 0,
	4011, 0, 4011, 0, 0, 0, 0, 0, 1084, 0,
	1979, 1084, 0, 5175, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 3408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 1083, 0, 0,
	0, 1070, 1071, 0, 0, 0, 301, 1083, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 2124, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 1071, 0, 0, 0, 2124, 303, 0,
	5593, 0, 0, 0, 1083, 0, 296, 0, 282, 0,
	0, 0, 0, 1070, 1070, 0, 0, 0, 0, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2124, 4359, 0, 0, 288, 1071, 1071, 0,
	1083, 0, 0, 0, 0, 0, 1981, 308, 0, 0,
	0, 0, 1083, 0, 0, 0, 271, 283, 0, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 284, 0, 0, 309, 0, 306, 0, 0, 0,
	0, 293, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 287, 1070, 0, 0, 0, 300, 0, 1070, 0,
	280, 0, 310, 1068, 0, 0, 275, 0, 0, 1083,
	4011, 1083, 1084, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 1083, 0, 0, 278, 0, 0, 0, 0, 0,
	1083, 0, 0, 2124, 0, 0, 0, 0, 0, 0,
	0, 2124, 2124, 0, 0, 2124, 4172, 4172, 2124, 1070,
	0, 1068, 0, 2124, 0, 0, 0, 0, 0, 2124,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 2124,
	0, 0, 0, 0, 2124, 0, 0, 0, 5822, 1071,
	0, 1169, 0, 0, 0, 2124, 0, 2124, 0, 4172,
	4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172,
	4172, 4172, 0, 0, 0, 4172, 2124, 2124, 2124, 0,
	0, 0, 0, 0, 2124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2124, 2124, 2124, 1070, 1070, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3763, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2124, 0, 0, 1086, 0,
	1083, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3763, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	2124, 0, 0, 0, 0, 2124, 2124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4172,
	0, 0, 1068, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 6004, 6005, 6006, 6007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2903, 2903,
	3763, 0, 3763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 1065, 0, 2903, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 1071, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 1070, 0, 0, 0, 1086, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2124, 0, 0, 0, 0,
	0, 0, 0, 0, 2124, 2124, 0, 0, 1071, 2124,
	2124, 0, 0, 2124, 2124, 0, 1071, 2124, 0, 2124,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 1065, 3408, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 2124, 0, 1071, 2124, 0, 1084, 0, 1068,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 2124, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3408, 0, 0, 0, 0,
	0, 1085, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1065, 0, 1068, 0, 0, 0, 1169,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 1086, 0, 0, 1070, 1070, 1070, 1084, 1070, 0,
	1071, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 1981, 0, 0, 0, 1981, 0, 0, 2124,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	0, 0, 0, 0, 2124, 0, 0, 0, 0, 0,
	0, 0, 1070, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2124, 1068, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 1086, 0, 0, 0, 0, 0, 0, 1084,
	1084, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 1068, 0, 0, 1068, 0, 0, 0,
	0, 1071, 0, 2124, 0, 1068, 0, 0, 0, 1086,
	1071, 0, 1086, 0, 1070, 0, 6358, 0, 0, 0,
	0, 1086, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 2606, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 2124, 0, 2124, 2124, 2124, 0, 0,
	0, 1085, 0, 0, 2124, 4172, 3408, 2124, 2124, 2124,
	1070, 1085, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	6358, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2124,
	0, 0, 0, 0, 0, 0, 0, 0, 6358, 0,
	0, 0, 5212, 0, 4172, 3408, 2124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 1084, 0, 1070, 1083, 1085, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1065,
	0, 0, 0, 0, 0, 1068, 2903, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 3763, 0, 1085, 0,
	0, 1086, 0, 1086, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 1083, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1085, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2124,
	0, 1070, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 4172, 0, 0, 0, 0, 1084,
	1084, 0, 0, 1086, 0, 0, 2124, 0, 0, 1083,
	1083, 0, 0, 1085, 0, 1085, 0, 0, 1083, 0,
	0, 0, 0, 0, 1065, 0, 1065, 0, 0, 0,
	0, 3408, 0, 0, 4172, 0, 0, 0, 2124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1085, 2903, 0, 0, 0,
	0, 269, 0, 1065, 1085, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 251, 0, 3763, 0, 0, 236, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 240, 0, 0, 0,
	2124, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1070, 0, 263, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2124,
	0, 1070, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2124, 0, 0, 2124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 0, 0, 0, 1085, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 1070, 1065, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 0, 261,
	1084, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 248, 0, 0,
	2124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 237, 0,
	1084, 0, 0, 0, 0, 0, 1084, 0, 1071, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 1083,
	1083, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3408, 3408, 1085, 0, 3408, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 2124, 0, 0, 0, 0, 252, 0, 0, 0,
	2124, 0, 0, 0, 0, 271, 253, 0, 254, 0,
	0, 0, 0, 5330, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	255, 0, 0, 259, 0, 256, 0, 0, 0, 0,
	238, 0, 0, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 258, 0, 0, 0, 4172, 4172,
	264, 4172, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1084, 1084, 0, 1084, 2124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 1084,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 1070, 0, 0, 1071, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 1083, 996, 999, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 1071,
	1084, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 1070, 0, 1083, 0, 1086, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 1084, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1068, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	1086, 1086, 1084, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 1070,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1083, 1083, 1070, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 3763, 1083, 0, 0, 0, 0,
	0, 0, 1084, 0, 1070, 1070, 0, 0, 1083, 1083,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 1086,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 1084, 0,
	0, 1070, 0, 0, 0, 1065, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 1084, 0, 0,
	1086, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 1085, 0, 0, 0, 1216, 5330,
	0, 0, 1085, 0, 1065, 1065, 1071, 1222, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 1071, 1071,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 1433,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 1459,
	1462, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 1068, 1084, 1085, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 1065,
	0, 0, 1086, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 1588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 1086, 0, 1068, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1070, 0, 1070, 1070, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1068, 1068, 1083, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1086, 1086, 1086, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 1068, 1085, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1086,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 1065, 0, 0,
	0, 0, 0, 1068, 1085, 1084, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 1065, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2655, 1068, 0, 0, 1085, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 1071, 1065, 0, 1086, 0, 1084,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 2705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1084, 0, 0, 0, 0, 0, 1981, 0, 2774,
	0, 0, 0, 0, 2779, 0, 0, 1068, 0, 2791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	2839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2872,
	0, 0, 0, 2876, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1085, 1085, 0, 1085, 0,
	0, 0, 0, 0, 0, 1065, 1065, 1065, 1068, 1065,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1084, 0, 0,
	0, 0, 0, 1086, 0, 0, 2973, 0, 0, 1085,
	0, 0, 1068, 0, 2791, 2791, 2791, 0, 0, 0,
	1065, 0, 1085, 1085, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 1065, 1065, 0, 0, 0, 0, 0,
	3007, 3008, 1084, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1068, 0, 0, 0, 0, 0, 1086,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 3129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3136, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1083, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 1154, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3182, 1065, 1216, 1216,
	0, 1216, 0, 3188, 0, 0, 3190, 3191, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 1084, 0,
	0, 0, 0, 1068, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 1065, 1086,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1083, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 1084, 0,
	1084, 1084, 0, 3293, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	1083, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3654, 3655, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 3692, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 3741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 1068, 0, 1068, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 1086, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4077, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 4283,
	0, 4286, 0, 1065, 4291, 0, 0, 0, 0, 0,
	4298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4386, 4387, 1085, 0, 1085, 1085, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 1065, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 4562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4698, 4699, 0, 0,
	0, 0, 4704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 1065, 359, 843, 0, 407, 444, 0, 0, 0,
	504, 0, 557, 561, 0, 0, 0, 0, 0, 0,
	415, 0, 848, 0, 854, 0, 860, 0, 626, 0,
	850, 851, 856, 347, 0, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 0, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 0, 0, 569, 527, 525, 0, 492,
	549, 0, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 0, 4891, 0, 0, 0, 0,
	0, 0, 0, 431, 0, 0, 643, 0, 0, 0,
	0, 4903, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 636, 0, 0, 0, 4914, 0, 0, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 0, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	845, 2774, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 0, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	0, 0, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 0, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 0, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 0, 0, 500, 502, 503, 0, 0,
	0, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 0, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 0,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 0, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 0, 604, 605, 0, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 0, 616, 0,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 0, 0, 0,
	0, 0, 0, 0, 3182, 0, 647, 648, 0, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5194, 5195, 5196, 5197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2142, 0, 0, 0, 0,
	0, 0, 2139, 0, 0, 2109, 0, 0, 0, 2121,
	2122, 2123, 2153, 2155, 2137, 2182, 2203, 0, 2254, 2300,
	2270, 2125, 2387, 2393, 2126, 2454, 2458, 0, 2134, 2184,
	2110, 2234, 2249, 2264, 2276, 2129, 2135, 2127, 2391, 2130,
	2535, 2546, 2566, 2131, 2132, 2133, 2111, 2527, 2584, 2353,
	2512, 2164, 0, 2140, 2478, 0, 0, 2401, 2516, 0,
	0, 2178, 0, 0, 0, 0, 2326, 2315, 2349, 2462,
	2287, 2407, 2215, 2374, 2552, 2444, 2363, 2558, 2476, 2177,
	2243, 2227, 2279, 2344, 2485, 2160, 2244, 2319, 2550, 2239,
	2365, 0, 2206, 2409, 2551, 2514, 2362, 2525, 2495, 2520,
	2250, 2388, 2213, 2435, 2502, 2503, 2173, 2286, 2208, 2561,
	2158, 2218, 2226, 2396, 2197, 2404, 2582, 2336, 2469, 2419,
	2417, 0, 2376, 2445, 2577, 0, 0, 2263, 0, 2257,
	2395, 2569, 2204, 2543, 2438, 2400, 2338, 2472, 2507, 2259,
	2240, 2241, 2297, 2437, 2282, 2216, 2557, 2333, 2337, 2335,
	2331, 2328, 2332, 2329, 2330, 2334, 2284, 2327, 0, 0,
	2174, 2394, 2322, 2492, 2172, 2441, 2280, 2253, 0, 0,
	5337, 2559, 2373, 2375, 5338, 2528, 2323, 2321, 2232, 2231,
	2175, 2560, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2154, 2156, 2162, 2157, 2161, 2163, 2165, 2166, 2167,
	2168, 2169, 2170, 2171, 2179, 2180, 2181, 2183, 2186, 2187,
	2188, 2190, 2191, 2192, 2193, 2194, 2195, 2198, 2199, 2200,
	2201, 2202, 2205, 2207, 2209, 2210, 2211, 2212, 2214, 2217,
	2219, 2220, 2221, 2222, 2223, 2224, 2225, 2228, 2229, 0,
	2230, 2233, 2235, 2236, 2237, 2238, 2242, 2245, 2246, 2247,
	2248, 2251, 2252, 2255, 2256, 2258, 2260, 2261, 2262, 2265,
	0, 2266, 2267, 2268, 2269, 2271, 2272, 2273, 2274, 2275,
	2277, 0, 0, 2278, 2281, 2283, 2285, 2288, 2289, 2290,
	2291, 0, 2292, 2293, 2294, 2295, 2296, 2298, 0, 2299,
	2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310,
	2311, 2312, 2313, 2314, 2317, 2318, 2320, 0, 2324, 2325,
	2340, 2341, 2342, 2343, 2345, 2347, 2348, 2346, 2350, 2351,
	2352, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2364,
	2366, 2367, 0, 2368, 2369, 0, 2370, 2371, 2372, 2377,
	2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2389,
	2390, 2392, 2406, 2408, 0, 2410, 2411, 2412, 2413, 2414,
	2415, 2416, 2418, 2420, 2421, 2422, 2423, 2424, 2425, 2426,
	2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2436, 2439,
	2440, 2442, 2443, 2446, 2447, 2448, 2449, 2450, 2451, 2452,
	2453, 2455, 2456, 2457, 2459, 2460, 2461, 2463, 2464, 2465,
	2466, 2467, 2468, 2470, 2471, 2473, 2474, 2475, 0, 2477,
	2479, 2480, 2481, 2482, 2483, 2484, 2487, 2486, 2488, 2489,
	2490, 2491, 2493, 2494, 2496, 2497, 2498, 2499, 2500, 2501,
	2504, 2505, 2506, 2508, 2509, 2510, 2511, 2513, 2515, 2517,
	2519, 2518, 2521, 2522, 2523, 2524, 2526, 2529, 2530, 2531,
	2532, 2533, 2534, 2536, 2537, 2538, 2539, 2540, 2541, 2542,
	2544, 0, 2545, 2547, 2548, 2549, 2553, 2554, 2555, 2556,
	2562, 2563, 2564, 2565, 2567, 0, 0, 2568, 2570, 2571,
	2572, 2573, 2574, 2575, 2576, 2578, 2579, 2580, 2581, 0,
	2583, 2316, 2405, 2399, 2339, 2397, 2398, 2402, 2403, 0,
	0, 2159, 2176, 2185, 2189, 2196, 0, 2128, 0, 0,
	0, 0, 0, 0, 0, 0, 2118, 2119, 2120, 0,
	0, 0, 0, 0, 0, 2112, 2113, 2114, 2115, 2116,
	2117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5911, 1991, 342, 1997, 359, 843, 2007, 407,
	444, 659, 1994, 2039, 504, 2044, 557, 561, 2068, 650,
	2001, 2004, 2014, 2017, 415, 2022, 848, 2030, 854, 2040,
	860, 2059, 626, 2065, 850, 851, 856, 347, 735, 649,
	721, 2053, 1999, 2057, 511, 2050, 2026, 2066, 2043, 2055,
	2036, 2041, 355, 2028, 2029, 2033, 2042, 852, 849, 853,
	859, 847, 857, 844, 855, 2063, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 1998, 2016, 460, 630,
	395, 484, 2049, 375, 517, 2062, 606, 481, 2056, 589,
	609, 2018, 501, 380, 540, 596, 597, 841, 846, 2006,
	862, 1993, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 2024, 492, 549, 706, 1996, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 2064, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 1992, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 2008, 2009, 2010, 845, 2011, 2012, 2013, 387, 388,
	389, 390, 391, 392, 2015, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 2019, 410, 412, 2020, 413,
	416, 2021, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 2023, 426, 427, 429, 2025, 432, 433, 434,
	435, 436, 2027, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 2031, 457, 458, 459, 461, 2032, 462,
	463, 466, 467, 468, 469, 2034, 471, 679, 2035, 472,
	473, 474, 2037, 2038, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 2046, 528, 529, 530, 689, 531,
	532, 533, 534, 2047, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 2048, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 2051, 583, 693, 584,
	585, 586, 587, 588, 2052, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 2054,
	607, 608, 861, 610, 611, 612, 613, 614, 2058, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 2060, 2061, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 2067, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 2045, 1995, 2000, 2002, 2003, 2005, 0, 0, 0,
	0, 0, 1986, 0, 6357, 823, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 1984, 1991,
	342, 1997, 359, 843, 2007, 407, 444, 659, 1994, 2039,
	504, 2044, 557, 561, 2068, 650, 2001, 2004, 2014, 2017,
	415, 2022, 848, 2030, 854, 2040, 860, 2059, 626, 2065,
	850, 851, 856, 347, 735, 649, 721, 2053, 1999, 2057,
	511, 2050, 2026, 2066, 2043, 2055, 2036, 2041, 355, 2028,
	2029, 2033, 2042, 852, 849, 853, 859, 847, 857, 844,
	855, 2063, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 1998, 2016, 460, 630, 395, 484, 2049, 375,
	517, 2062, 606, 481, 2056, 589, 609, 2018, 501, 380,
	540, 596, 597, 841, 846, 2006, 862, 1993, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 2024, 492,
	549, 706, 1996, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 2064, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 1992, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 656, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 2008, 2009, 2010,
	845, 2011, 2012, 2013, 387, 388, 389, 390, 391, 392,
	2015, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 2019, 410, 412, 2020, 413, 416, 2021, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 425, 2023, 426,
	427, 429, 2025, 432, 433, 434, 435, 436, 2027, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 2031,
	457, 458, 459, 461, 2032, 462, 463, 466, 467, 468,
	469, 2034, 471, 679, 2035, 472, 473, 474, 2037, 2038,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	2046, 528, 529, 530, 689, 531, 532, 533, 534, 2047,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	2048, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 2051, 583, 693, 584, 585, 586, 587, 588,
	2052, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 2054, 607, 608, 861, 610,
	611, 612, 613, 614, 2058, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 2060, 2061,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 2067, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 2045, 1995, 2000,
	2002, 2003, 2005, 1986, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1991, 342, 1997, 359, 843, 2007, 407, 444, 659, 1994,
	2039, 504, 2044, 557, 561, 2068, 650, 2001, 2004, 2014,
	2017, 415, 2022, 848, 2030, 854, 2040, 860, 2059, 626,
	2065, 850, 851, 856, 347, 735, 649, 721, 2053, 1999,
	2057, 511, 2050, 2026, 2066, 2043, 2055, 2036, 2041, 355,
	2028, 2029, 2033, 2042, 852, 849, 853, 859, 847, 857,
	844, 855, 2063, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 1998, 2016, 460, 630, 395, 484, 2049,
	375, 517, 2062, 606, 481, 2056, 589, 609, 2018, 501,
	380, 540, 596, 597, 841, 846, 2006, 862, 1993, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 2024,
	492, 549, 706, 1996, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 2064,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 1992, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 842, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 2008, 2009,
	2010, 845, 2011, 2012, 2013, 387, 388, 389, 390, 391,
	392, 2015, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 2019, 410, 412, 2020, 413, 416, 2021, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 2023,
	426, 427, 429, 2025, 432, 433, 434, 435, 436, 2027,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	2031, 457, 458, 459, 461, 2032, 462, 463, 466, 467,
	468, 469, 2034, 471, 679, 2035, 472, 473, 474, 2037,
	2038, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 2046, 528, 529, 530, 689, 531, 532, 533, 534,
	2047, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 2048, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 2051, 583, 693, 584, 585, 586, 587,
	588, 2052, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 2054, 607, 608, 861,
	610, 611, 612, 613, 614, 2058, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 2060,
	2061, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 2067, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 2045, 1995,
	2000, 2002, 2003, 2005, 1091, 0, 1742, 823, 0, 0,
	0, 939, 809, 0, 0, 0, 0, 0, 950, 951,
	952, 1991, 342, 1997, 359, 843, 2007, 407, 444, 0,
	1994, 2039, 504, 2044, 557, 561, 2068, 0, 2001, 2004,
	2014, 2017, 415, 2022, 848, 2030, 854, 2040, 860, 2059,
	626, 2065, 850, 851, 856, 347, 1088, 649, 721, 2053,
	1999, 2057, 4361, 2050, 2026, 2066, 2043, 2055, 2036, 2041,
	355, 2028, 2029, 2033, 2042, 852, 849, 853, 859, 847,
	857, 844, 855, 2063, 548, 482, 0, 575, 354, 399,
	386, 428, 470, 582, 1998, 2016, 460, 630, 395, 484,
	2049, 375, 517, 2062, 606, 481, 2056, 589, 609, 2018,
	501, 380, 540, 596, 597, 841, 846, 2006, 862, 1993,
	384, 385, 506, 367, 514, 0, 0, 569, 527, 525,
	2024, 492, 549, 0, 1996, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 1090, 0, 643, 1093,
	1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095, 1096,
	1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080, 1082,
	2064, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 1992, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 0, 842, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 2008,
	2009, 2010, 845, 2011, 2012, 2013, 387, 388, 389, 390,
	391, 392, 2015, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 2019, 410, 412, 2020, 413, 416, 2021,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 425,
	2023, 426, 427, 429, 2025, 432, 433, 434, 435, 436,
	2027, 437, 0, 0, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 2031, 457, 458, 459, 461, 2032, 462, 463, 466,
	467, 468, 469, 2034, 471, 0, 2035, 472, 473, 474,
	2037, 2038, 475, 476, 477, 478, 479, 480, 483, 0,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 4360, 0, 500, 502, 503,
	0, 0, 0, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 2046, 528, 529, 530, 0, 531, 532, 533,
	534, 2047, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 2048, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 0, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 2051, 583, 2905, 584, 585, 586,
	587, 588, 2052, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 0, 604, 605, 2054, 607, 608,
	861, 610, 611, 612, 613, 614, 2058, 734, 615, 0,
	616, 0, 617, 618, 619, 620, 621, 622, 623, 625,
	2060, 2061, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 2067, 642, 644, 646, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 648,
	0, 515, 509, 465, 507, 508, 512, 513, 516, 2045,
	1995, 2000, 2002, 2003, 2005, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 948, 949, 0, 0,
	0, 0, 0, 0, 4362, 4363, 943, 944, 945, 946,
	1091, 0, 1742, 823, 0, 0, 0, 939, 809, 0,
	0, 0, 0, 0, 950, 951, 952, 1991, 342, 1997,
	359, 843, 2007, 407, 444, 0, 1994, 2039, 504, 2044,
	557, 561, 2068, 0, 2001, 2004, 2014, 2017, 415, 2022,
	848, 2030, 854, 2040, 860, 2059, 626, 2065, 850, 851,
	856, 347, 1088, 649, 721, 2053, 1999, 2057, 4361, 2050,
	2026, 2066, 2043, 2055, 2036, 2041, 355, 2028, 2029, 2033,
	2042, 852, 849, 853, 859, 847, 857, 844, 855, 2063,
	548, 482, 0, 575, 354, 399, 386, 428, 470, 582,
	1998, 2016, 460, 630, 395, 484, 2049, 375, 517, 2062,
	606, 481, 2056, 589, 609, 2018, 501, 380, 540, 596,
	597, 841, 846, 2006, 862, 1993, 384, 385, 506, 367,
	514, 0, 0, 569, 527, 525, 2024, 492, 549, 0,
	1996, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075,
	1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636,
	1087, 1089, 1072, 1079, 1080, 1082, 2064, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 1992,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	0, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 2008, 2009, 2010, 845, 2011,
	2012, 2013, 387, 388, 389, 390, 391, 392, 2015, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 2019,
	410, 412, 2020, 413, 416, 2021, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 425, 2023, 426, 427, 429,
	2025, 432, 433, 434, 435, 436, 2027, 437, 0, 0,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 2031, 457, 458,
	459, 461, 2032, 462, 463, 466, 467, 468, 469, 2034,
	471, 0, 2035, 472, 473, 474, 2037, 2038, 475, 476,
	477, 478, 479, 480, 483, 0, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 5084, 0, 500, 502, 503, 0, 0, 0, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 2046, 528,
	529, 530, 0, 531, 532, 533, 534, 2047, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 2048, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 0, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	2051, 583, 2905, 584, 585, 586, 587, 588, 2052, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	0, 604, 605, 2054, 607, 608, 861, 610, 611, 612,
	613, 614, 2058, 734, 615, 0, 616, 0, 617, 618,
	619, 620, 621, 622, 623, 625, 2060, 2061, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	2067, 642, 644, 646, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 648, 0, 515, 509, 465,
	507, 508, 512, 513, 516, 2045, 1995, 2000, 2002, 2003,
	2005, 0, 0, 0, 0, 0, 0, 0, 0, 1986,
	0, 947, 948, 949, 0, 0, 0, 0, 0, 0,
	4362, 4363, 943, 944, 945, 946, 1991, 342, 1997, 359,
	843, 2007, 3706, 444, 659, 1994, 2039, 504, 2044, 557,
	561, 2068, 650, 2001, 2004, 2014, 2017, 415, 2022, 848,
	2030, 854, 2040, 860, 2059, 626, 2065, 850, 851, 856,
	347, 735, 649, 721, 2053, 1999, 2057, 511, 2050, 2026,
	2066, 2043, 2055, 2036, 2041, 355, 2028, 2029, 2033, 2042,
	852, 849, 853, 859, 847, 857, 844, 855, 2063, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 3704, 1998,
	2016, 460, 630, 395, 484, 2049, 375, 517, 2062, 606,
	481, 2056, 589, 609, 2018, 501, 380, 540, 596, 597,
	841, 846, 2006, 862, 1993, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 2024, 492, 549, 706, 1996,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 2064, 332, 333, 334, 335,
	336, 3705, 338, 339, 340, 341, 343, 345, 1992, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 2008, 2009, 2010, 845, 2011, 2012,
	2013, 387, 388, 389, 390, 391, 392, 2015, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 2019, 410,
	412, 2020, 413, 416, 2021, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 2023, 426, 427, 429, 2025,
	432, 433, 434, 435, 436, 2027, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 2031, 457, 458, 459,
	461, 2032, 462, 463, 466, 467, 468, 469, 2034, 471,
	679, 2035, 472, 473, 474, 2037, 2038, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 2046, 528, 529,
	530, 689, 531, 532, 533, 534, 2047, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 2048, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 2051,
	583, 693, 584, 585, 586, 587, 588, 2052, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 2054, 607, 608, 861, 610, 611, 612, 613,
	614, 2058, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 2060, 2061, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 2067,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 2045, 1995, 2000, 2002, 2003, 2005,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 0, 0, 0, 0, 0, 1976, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 0, 650, 1353, 0, 1325, 1977, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 1975, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 0, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 1329, 1972, 0,
	1318, 1319, 1973, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 186, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 1205, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 187,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 1329, 5948, 0, 1318, 1319, 0, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 186, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 183,
	0, 0, 0, 184, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 1205, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 3438, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 187, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 1329, 0, 0,
	1318, 1319, 0, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 186, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 1205, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 187,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 1329, 0, 0, 1318, 1319, 0, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 0, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 0,
	3419, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 3415, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 3416, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 3414, 1378, 0,
	0, 0, 1322, 0, 837, 0, 1343, 823, 0, 1348,
	1349, 1338, 809, 1328, 0, 0, 0, 1329, 0, 0,
	1318, 1319, 342, 0, 359, 843, 0, 407, 444, 1333,
	0, 1321, 504, 0, 557, 561, 0, 650, 1353, 0,
	1325, 0, 415, 1346, 848, 0, 854, 1347, 860, 1345,
	626, 0, 850, 851, 856, 347, 1422, 649, 721, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1375, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1334, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1403, 1405, 1401, 1397,
	1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408,
	1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410,
	1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1387, 1365, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1376,
	1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1379, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1388, 1337, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1389, 0, 472, 473, 474,
	1369, 1370, 475, 476, 477, 478, 479, 480, 483, 1402,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1380, 500, 502, 503,
	1386, 687, 1381, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1382, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1340, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1373, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1383, 604, 605, 1374, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 1384,
	616, 1385, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1324, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1378, 0, 0, 0, 1322, 0, 0, 837,
	0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0,
	0, 1329, 0, 0, 1318, 1319, 1316, 342, 0, 359,
	843, 0, 407, 444, 1333, 0, 1321, 504, 0, 557,
	561, 0, 650, 1353, 0, 1325, 0, 415, 1346, 848,
	0, 854, 1347, 860, 1345, 626, 0, 850, 851, 856,
	347, 1422, 649, 721, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1375, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1334,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400,
	431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420,
	1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423,
	1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1387,
	1365, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368,
	1372, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1379, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1388, 1337, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1389, 0, 472, 473, 474, 1369, 1370, 475, 476, 477,
	478, 479, 480, 483, 1402, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1380, 500, 502, 503, 1386, 687, 1381, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1382, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1340, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1373,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1383,
	604, 605, 1374, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 1384, 616, 1385, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1324, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393,
	1395, 1396, 1406, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1378, 0, 0,
	0, 1322, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	1338, 809, 1328, 0, 2601, 3360, 1329, 0, 0, 1318,
	1319, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	1321, 504, 0, 557, 561, 0, 650, 1353, 0, 1325,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	3321, 1339, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	1340, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	1324, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 0, 0, 1322, 0, 837, 0, 1343,
	823, 0, 1348, 1349, 1338, 809, 1328, 0, 0, 0,
	1329, 0, 0, 1318, 1319, 342, 0, 359, 843, 0,
	407, 444, 1333, 0, 1321, 504, 0, 557, 561, 0,
	650, 1353, 0, 1325, 0, 415, 1346, 848, 0, 854,
	1347, 860, 1345, 626, 0, 850, 851, 856, 347, 1422,
	649, 721, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1375, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1334, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1403,
	1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399,
	0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078,
	690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415,
	1413, 1412, 1409, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1387, 1365, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1379, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1388, 1337, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1389, 0,
	472, 473, 474, 1369, 1370, 475, 476, 477, 478, 479,
	480, 483, 1402, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 1380,
	500, 502, 503, 1386, 687, 1381, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1382,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 1340, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1373, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1383, 604, 605,
	1374, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 1384, 616, 1385, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 1324, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396,
	1406, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1378, 0, 0, 0, 1322,
	0, 837, 0, 1343, 823, 0, 1348, 1349, 1338, 809,
	1328, 0, 0, 0, 1329, 4726, 0, 1318, 1319, 342,
	0, 359, 843, 0, 407, 444, 1333, 0, 1321, 504,
	0, 557, 561, 0, 650, 1353, 0, 1325, 0, 415,
	1346, 848, 0, 854, 1347, 860, 1345, 626, 0, 850,
	851, 856, 347, 1422, 649, 721, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	1375, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 1334, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364,
	1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421,
	1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418,
	636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 1387, 1365, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 1376, 1366, 1371, 1377,
	1367, 1368, 1372, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 1379, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 1388,
	1337, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 1389, 0, 472, 473, 474, 1369, 1370, 475,
	476, 477, 478, 479, 480, 483, 1402, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 1380, 500, 502, 503, 1386, 687, 1381,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 1382, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 1340, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 1373, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 1383, 604, 605, 1374, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 1384, 616, 1385, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 1324, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 1390, 1391, 1394,
	1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 1378,
	0, 0, 0, 1322, 0, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 0, 1329, 4689,
	0, 1318, 1319, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 0, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 0, 3419, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 837,
	0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0,
	0, 0, 1329, 0, 0, 1318, 1319, 342, 0, 359,
	843, 0, 407, 444, 1333, 0, 1321, 504, 0, 557,
	561, 0, 650, 1353, 0, 1325, 0, 415, 1346, 848,
	0, 854, 1347, 860, 1345, 626, 0, 850, 851, 856,
	347, 1422, 649, 721, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1375, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1334,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400,
	431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420,
	1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423,
	1362, 1415, 1413, 1412, 1409, 4041, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1387,
	1365, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368,
	1372, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1379, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1388, 1337, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1389, 0, 472, 473, 474, 1369, 1370, 475, 476, 477,
	478, 479, 480, 483, 1402, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1380, 500, 502, 503, 1386, 687, 1381, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1382, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1340, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1373,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1383,
	604, 605, 1374, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 1384, 616, 1385, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1324, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393,
	1395, 1396, 1406, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1378, 0, 0,
	0, 1322, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	1338, 809, 1328, 0, 0, 0, 1329, 0, 0, 1318,
	1319, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	1321, 504, 0, 557, 561, 0, 650, 1353, 0, 1325,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 3438,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	1340, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	1324, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 0, 0, 1322, 0, 837, 0, 1343,
	823, 0, 1348, 1349, 1338, 809, 1328, 0, 0, 0,
	1329, 0, 0, 1318, 1319, 342, 0, 359, 843, 0,
	407, 444, 1333, 0, 1321, 504, 0, 557, 561, 0,
	650, 1353, 0, 1325, 0, 415, 1346, 848, 0, 854,
	1347, 860, 1345, 626, 0, 850, 851, 856, 347, 1422,
	649, 721, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1375, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1334, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1403,
	1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399,
	0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078,
	690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415,
	1413, 1412, 1409, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1387, 1365, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1379, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1388, 1337, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1389, 0,
	472, 473, 474, 1369, 1370, 475, 476, 477, 478, 479,
	480, 483, 1402, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 1380,
	500, 502, 503, 1386, 687, 1381, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1382,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 1340, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1373, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1383, 604, 605,
	1374, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 1384, 616, 1385, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 1324, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396,
	1406, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1378, 0, 0, 0, 1322,
	0, 0, 837, 0, 1343, 823, 0, 1348, 1349, 1338,
	809, 1328, 0, 0, 1329, 3365, 0, 1318, 1319, 2086,
	342, 0, 359, 843, 0, 407, 444, 1333, 0, 1321,
	504, 0, 557, 561, 0, 650, 1353, 0, 1325, 0,
	415, 1346, 848, 0, 854, 1347, 860, 1345, 626, 0,
	850, 851, 856, 347, 1422, 649, 721, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1375, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1334, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363,
	1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416,
	1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417,
	1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1387, 1365, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1376, 1366, 1371,
	1377, 1367, 1368, 1372, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1379, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1388, 1337, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1389, 0, 472, 473, 474, 1369, 1370,
	475, 476, 477, 478, 479, 480, 483, 1402, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 1380, 500, 502, 503, 1386, 687,
	1381, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1382, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 1340,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1373, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1383, 604, 605, 1374, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 1384, 616, 1385,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 1324,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1390, 1391,
	1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1378, 0, 0, 0, 1322, 0, 837, 0, 1343, 823,
	0, 1348, 1349, 1338, 809, 1328, 0, 0, 0, 1329,
	0, 0, 1318, 1319, 342, 0, 359, 843, 0, 407,
	444, 1333, 0, 1321, 504, 0, 557, 561, 0, 650,
	1353, 0, 1325, 0, 415, 1346, 848, 0, 854, 1347,
	860, 1345, 626, 0, 850, 851, 856, 347, 1422, 649,
	721, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1375, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1334, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1403, 1405,
	1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0,
	643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690,
	1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413,
	1412, 1409, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1387, 1365, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1379, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1388, 1337, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1389, 0, 472,
	473, 474, 1369, 1370, 475, 476, 477, 478, 479, 480,
	483, 1402, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1380, 500,
	502, 503, 1386, 687, 1381, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1382, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 1340, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1373, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1383, 604, 605, 1374,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 1384, 616, 1385, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 1324, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1378, 0, 0, 0, 1322, 0,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 0, 1329, 0, 0, 1318, 1319, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 0, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 5957, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 5956, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 837, 0, 1343, 823, 0, 1348,
	1349, 1338, 809, 1328, 0, 0, 0, 1329, 0, 0,
	1318, 1319, 342, 0, 359, 843, 0, 407, 444, 1333,
	0, 1321, 504, 0, 557, 561, 0, 650, 1353, 0,
	1325, 0, 415, 1346, 848, 0, 854, 1347, 860, 1345,
	626, 0, 850, 851, 856, 347, 1422, 649, 721, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1375, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1334, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1403, 1405, 1401, 1397,
	1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408,
	1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410,
	1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1387, 1365, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 5759, 1376,
	1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1379, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1388, 5761, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1389, 0, 472, 473, 474,
	1369, 1370, 475, 476, 477, 478, 479, 480, 483, 1402,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1380, 500, 502, 503,
	1386, 687, 1381, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1382, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 5760, 567,
	568, 1340, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1373, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1383, 604, 605, 1374, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 1384,
	616, 1385, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1324, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1378, 0, 0, 0, 1322, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0, 0,
	0, 5758, 0, 0, 1318, 1319, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 1321, 504, 0, 557, 561,
	0, 5955, 1353, 0, 1325, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 5957, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 1340, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 5956, 623, 625, 0, 1324, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 0, 0,
	1322, 0, 837, 0, 1343, 823, 0, 1348, 1349, 1338,
	809, 1328, 0, 0, 0, 1329, 0, 0, 1318, 1319,
	342, 0, 359, 843, 0, 407, 444, 1333, 0, 1321,
	504, 0, 557, 561, 0, 650, 1353, 0, 1325, 0,
	415, 1346, 848, 0, 854, 1347, 860, 1345, 626, 0,
	850, 851, 856, 347, 1422, 649, 721, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1375, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1334, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363,
	1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416,
	1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417,
	1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1387, 1365, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1376, 1366, 1371,
	1377, 1367, 1368, 1372, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1379, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1388, 1337, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1389, 0, 472, 473, 474, 1369, 1370,
	475, 476, 477, 478, 479, 480, 483, 1402, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 5250, 683, 1380, 500, 502, 503, 1386, 687,
	1381, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1382, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 1340,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1373, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1383, 604, 605, 1374, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 1384, 616, 1385,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 1324,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1390, 1391,
	1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1378, 0, 0, 0, 1322, 0, 837, 0, 1343, 823,
	0, 1348, 1349, 1338, 809, 1328, 0, 0, 0, 1329,
	0, 0, 1318, 1319, 342, 0, 359, 843, 0, 407,
	444, 1333, 0, 1321, 504, 0, 557, 561, 0, 650,
	1353, 0, 1325, 0, 415, 1346, 848, 0, 854, 1347,
	860, 1345, 626, 0, 850, 851, 856, 347, 1422, 649,
	721, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1375, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1334, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1403, 1405,
	1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0,
	643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690,
	1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413,
	1412, 1409, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1387, 1365, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1379, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1388, 1337, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1389, 0, 472,
	473, 474, 1369, 1370, 475, 476, 477, 478, 479, 480,
	483, 1402, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1380, 500,
	502, 503, 1386, 687, 1381, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1382, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 1340, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1373, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1383, 604, 605, 1374,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 1384, 616, 1385, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 1324, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 5237, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1378, 0, 0, 0, 1322, 0,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 0, 1329, 0, 0, 1318, 1319, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 0, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 4241, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 837, 0, 3271, 823, 0, 1348,
	1349, 1338, 809, 1328, 0, 0, 0, 1329, 0, 0,
	1318, 1319, 342, 0, 359, 843, 0, 407, 444, 1333,
	0, 1321, 504, 0, 557, 561, 0, 650, 1353, 0,
	1325, 0, 415, 1346, 848, 0, 854, 1347, 860, 1345,
	626, 0, 850, 851, 856, 347, 1422, 649, 721, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1375, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1334, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1403, 1405, 1401, 1397,
	1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408,
	1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410,
	1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1387, 1365, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1376,
	1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1379, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1388, 1337, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1389, 0, 472, 473, 474,
	1369, 1370, 475, 476, 477, 478, 479, 480, 483, 1402,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1380, 500, 502, 503,
	1386, 687, 1381, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1382, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1340, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1373, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1383, 604, 605, 1374, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 1384,
	616, 1385, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1324, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1378, 0, 0, 0, 1322, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0, 0,
	0, 1329, 0, 0, 1318, 1319, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 1321, 504, 0, 557, 561,
	0, 650, 1353, 0, 1325, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 1340, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 1324, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 0, 0,
	1322, 0, 837, 0, 1343, 823, 0, 1348, 1349, 1338,
	809, 1328, 0, 0, 0, 1329, 0, 0, 2094, 2095,
	342, 0, 359, 843, 0, 407, 444, 1333, 0, 0,
	504, 0, 557, 561, 0, 650, 1353, 0, 5569, 0,
	415, 1346, 848, 0, 854, 1347, 860, 1345, 626, 0,
	850, 851, 856, 347, 1422, 649, 721, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1375, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1334, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363,
	1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416,
	1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417,
	1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1387, 1365, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1376, 1366, 1371,
	1377, 1367, 1368, 1372, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1379, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1388, 1337, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1389, 0, 472, 473, 474, 1369, 1370,
	475, 476, 477, 478, 479, 480, 483, 1402, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 1380, 500, 502, 503, 1386, 687,
	1381, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1382, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 3409,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1373, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1383, 604, 605, 1374, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 1384, 616, 1385,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1390, 1391,
	1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1378, 0, 0, 0, 0, 0, 837, 0, 1343, 823,
	0, 1348, 1349, 1338, 809, 1328, 0, 0, 0, 3265,
	0, 0, 3406, 3407, 342, 0, 359, 843, 0, 407,
	444, 1333, 0, 0, 504, 0, 557, 561, 0, 650,
	1353, 0, 0, 0, 415, 1346, 848, 0, 854, 1347,
	860, 1345, 626, 0, 850, 851, 856, 347, 1422, 649,
	721, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1375, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1334, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1403, 1405,
	1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0,
	643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690,
	1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413,
	1412, 1409, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1387, 1365, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1379, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1388, 1337, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1389, 0, 472,
	473, 474, 1369, 1370, 475, 476, 477, 478, 479, 480,
	483, 1402, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1380, 500,
	502, 503, 1386, 687, 1381, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1382, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 3409, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1373, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1383, 604, 605, 1374,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 1384, 616, 1385, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1378, 0, 0, 0, 0, 0,
	837, 0, 1343, 823, 0, 1348, 1349, 0, 809, 1328,
	0, 0, 0, 3265, 0, 0, 3406, 3407, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 0, 504, 0,
	557, 561, 0, 650, 1353, 0, 0, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 3264, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 3263, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 0, 0, 837, 0, 1343, 823, 0, 1348,
	1349, 1338, 809, 1328, 0, 0, 0, 3265, 0, 0,
	3261, 3262, 342, 0, 359, 843, 0, 407, 444, 1333,
	0, 1321, 504, 0, 557, 561, 0, 0, 1353, 0,
	1325, 0, 415, 1346, 0, 0, 0, 1347, 0, 1345,
	626, 0, 0, 0, 0, 347, 1422, 649, 721, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1375, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	5957, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1334, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1403, 1405, 1401, 1397,
	1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408,
	1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410,
	1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1387, 1365, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1376,
	1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1379, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1388, 1337, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1389, 0, 472, 473, 474,
	1369, 1370, 475, 476, 477, 478, 479, 480, 483, 1402,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1380, 500, 502, 503,
	1386, 687, 1381, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1382, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1340, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1373, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1383, 604, 605, 1374, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 1384,
	616, 1385, 617, 618, 619, 620, 621, 5956, 623, 625,
	0, 1324, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1378, 0, 0, 0, 0, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 0, 809, 1328, 0, 0,
	0, 1329, 0, 0, 1318, 1319, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 0, 504, 0, 557, 561,
	0, 650, 1353, 0, 0, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 3409, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 0, 809, 1328, 0, 0,
	0, 0, 0, 0, 0, 3265, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 0, 504, 0, 557, 561,
	0, 650, 1353, 0, 0, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 4847, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 3409, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 0, 809, 1328, 0, 0,
	0, 0, 0, 0, 0, 3265, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 0, 504, 0, 557, 561,
	0, 650, 1353, 0, 0, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 4789, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 3409, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 837, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 843, 3265, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 186, 650, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 183, 0, 0, 883, 184, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 1205, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 3495, 3496, 3494, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 3501, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 3487, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 970, 0, 1742, 823, 187, 0, 0,
	0, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	3489, 342, 0, 359, 843, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 5829,
	0, 415, 1854, 848, 0, 854, 0, 860, 1853, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 1855, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 842, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 845, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 679, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 689, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 0, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5830, 0, 0, 1743, 1744, 5828, 342, 0, 359, 843,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	883, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 3495,
	3496, 3494, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	3501, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 3487, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 837, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 843, 3489, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 3501, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 837, 0,
	0, 1378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 843,
	5005, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	3501, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 837, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 843, 6023, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 3501, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 837, 0,
	0, 1378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 843,
	3629, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 3495,
	3496, 3494, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	3501, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 970, 0,
	1742, 823, 0, 0, 0, 0, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 342, 0, 359, 843,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 1858, 0, 415, 1854, 848, 0,
	854, 0, 860, 1853, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 1855, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 845, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 1742, 823, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 1743, 1744,
	342, 0, 359, 843, 0, 407, 444, 659, 0, 0,
	504, 0, 557, 561, 0, 650, 0, 0, 1849, 0,
	415, 1854, 848, 0, 854, 0, 860, 1853, 626, 0,
	850, 851, 856, 347, 735, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 1855, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 656, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	845, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 679, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 689, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 0, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 1742, 823,
	0, 0, 0, 0, 809, 0, 0, 0, 0, 0,
	0, 0, 1743, 1744, 342, 0, 359, 843, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 1854, 848, 0, 854, 0,
	860, 1853, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 1855, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 823, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 0, 0, 0, 1743, 1744, 342, 0,
	359, 843, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 3779, 0, 415, 1854,
	848, 0, 854, 0, 860, 1853, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	1855, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 845, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	807, 808, 342, 0, 359, 843, 0, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 186, 650, 0, 0,
	0, 0, 415, 0, 848, 0, 854, 0, 860, 0,
	626, 0, 850, 851, 856, 347, 735, 649, 721, 0,
	0, 0, 511, 183, 0, 0, 0, 184, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 1205, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 181,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 182, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 842, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 845, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 837,
	0, 0, 0, 0, 0, 1208, 0, 0, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 359,
	843, 180, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 848,
	0, 854, 0, 860, 0, 626, 0, 850, 851, 856,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 845, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 329, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 950, 951,
	952, 0, 342, 0, 359, 0, 5725, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 0, 0, 0, 0, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 0,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 0, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	0, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 948, 949, 0, 0,
	0, 0, 0, 329, 941, 942, 943, 944, 945, 946,
	939, 0, 0, 0, 0, 0, 0, 950, 951, 952,
	0, 342, 0, 359, 0, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 347, 735, 649, 721, 0, 0,
	0, 5700, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 0, 0, 0, 0, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 0, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 0, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 679, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 0, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 689, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 0, 607, 608, 0,
	610, 611, 612, 613, 614, 0, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 947, 948, 949, 0, 0, 0,
	0, 0, 329, 941, 942, 943, 944, 945, 946, 939,
	0, 0, 0, 0, 0, 0, 950, 951, 952, 0,
	342, 0, 359, 0, 0, 407, 444, 659, 0, 0,
	504, 0, 557, 561, 0, 650, 0, 0, 0, 0,
	415, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 0, 0, 347, 735, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 0, 0, 0, 0, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 0, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 3901,
	365, 366, 656, 0, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	0, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 3902, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 679, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 0, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 689, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 0, 607, 608, 0, 610,
	611, 612, 613, 614, 0, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 948, 949, 0, 0, 0, 0,
	0, 329, 941, 942, 943, 944, 945, 946, 939, 0,
	0, 0, 0, 0, 0, 950, 951, 952, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 1961, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 1962, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 948, 949, 0, 0, 0, 0, 0,
	329, 941, 942, 943, 944, 945, 946, 939, 0, 0,
	0, 0, 0, 0, 950, 951, 952, 0, 342, 0,
	359, 0, 0, 407, 1108, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 1105, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 1106, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 947, 948, 949, 0, 0, 0, 0, 0, 329,
	941, 942, 943, 944, 945, 946, 939, 0, 0, 0,
	0, 0, 0, 950, 951, 952, 0, 342, 0, 359,
	0, 0, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	0, 0, 0, 0, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 0, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 1021, 365, 366, 656,
	0, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 1022, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 0, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 948, 949, 0, 0, 0, 0, 0, 329, 941,
	942, 943, 944, 945, 946, 939, 0, 0, 0, 0,
	0, 0, 950, 951, 952, 0, 342, 0, 359, 0,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 0,
	0, 0, 0, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 0, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 935, 365, 366, 656, 0,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 936, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 0, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 947,
	948, 949, 0, 0, 0, 0, 0, 0, 941, 942,
	943, 944, 945, 946, 342, 0, 359, 843, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1375, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1403, 1405,
	1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 3501, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1387, 1365, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1379, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1388, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1389, 0, 472,
	473, 474, 1369, 1370, 475, 476, 477, 478, 479, 480,
	483, 1402, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1380, 500,
	502, 503, 1386, 687, 1381, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1382, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1373, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1383, 604, 605, 1374,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 1384, 616, 1385, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 181, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	182, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 1208, 0, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 805, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 804, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 796, 797, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 798, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 803, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 802, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 794, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 795, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 799, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 1343, 823, 0, 1348, 1349, 0, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 808, 342, 0,
	359, 843, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 6332, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 845, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 6157, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 6012, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 6009, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 819, 504, 0, 557, 561, 186, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 1205, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	970, 0, 0, 823, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 843, 180, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 1854,
	848, 0, 854, 0, 860, 1853, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	1855, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 845, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 843, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 3975, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 967, 845, 0, 0, 968, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 969, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 843, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 2769,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 967, 845, 0,
	0, 968, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	969, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 883, 2786, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 2790, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 2787,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 342, 0,
	359, 843, 1489, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 967, 845, 0,
	0, 968, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 1040, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	969, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1038, 342, 0, 359, 843, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 967, 845, 0, 0, 968, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 969, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 843, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 967, 845, 0,
	0, 968, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	969, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 4253, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 1311, 407, 1135, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 967, 845,
	0, 0, 968, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 969, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	1133, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 967, 845, 0, 0, 968, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 969, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 1130, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 967, 845,
	0, 0, 968, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 1128, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 969, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 967, 845, 0, 0, 968, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 963, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 969, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 1841, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 2688, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 4842, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 4133, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 1434, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 1121, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	1119, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 1117, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	1114, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 3552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 444, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 848, 2899, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 1088, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074,
	1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099,
	636, 1087, 1089, 1072, 1079, 1080, 1082, 2902, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 2900, 0,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 2905, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 0, 0,
	1091, 0, 0, 0, 0, 647, 648, 2901, 515, 509,
	465, 507, 508, 512, 513, 516, 2893, 0, 342, 0,
	359, 843, 0, 407, 444, 0, 0, 0, 504, 0,
	557, 561, 0, 0, 0, 0, 0, 0, 415, 0,
	848, 2899, 854, 2891, 860, 0, 626, 0, 850, 851,
	856, 347, 1088, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 0, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 0, 0, 569, 527, 525, 0, 492, 549, 0,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075,
	1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636,
	1087, 1089, 1072, 1079, 1080, 1082, 2902, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	0, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 845, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 0, 0,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 0, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 0, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 0, 0, 500, 502, 503, 0, 2900, 0, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 0, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 0, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 2905, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	0, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 0, 616, 0, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 647, 648, 2901, 515, 509, 465,
	507, 508, 512, 513, 516, 2893, 342, 0, 359, 0,
	0, 407, 2814, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 0, 0,
	0, 0, 2891, 0, 626, 0, 0, 0, 0, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 0,
	0, 2818, 0, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 0, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 0,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 2824, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 0, 426, 427, 429, 2823, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 2822, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 0, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 2821, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 329, 0, 0, 0, 2820, 2815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 0, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 0, 0, 3513, 0, 0, 0, 626,
	0, 0, 0, 0, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 0, 0, 2818, 0, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 0, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 0, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 2824,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 0,
	426, 427, 429, 2823, 432, 433, 434, 435, 436, 0,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 679, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 0, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 689, 531, 532, 533, 534,
	2822, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 0, 607, 608, 0,
	610, 611, 612, 613, 614, 0, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	2821, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 329, 0,
	0, 0, 2820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 0,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 0,
	0, 2818, 0, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 0, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 0,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 2824, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 0, 426, 427, 429, 2823, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 2822, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 0, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 2821, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 1091, 0, 0, 0, 2820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 843, 0, 407, 444, 0, 0,
	0, 504, 0, 557, 561, 0, 0, 0, 0, 0,
	0, 415, 0, 848, 2899, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 1088, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 0, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 0, 0, 569, 527, 525, 0,
	492, 549, 0, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 1090, 0, 643, 1093, 1081,
	1073, 1074, 1075, 1076, 1077, 1078, 0, 1095, 1096, 1097,
	1098, 1099, 636, 1087, 1089, 1072, 1079, 1080, 1082, 2902,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 0, 842, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 845, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 0, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 0, 0, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 0, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 0, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 0, 0, 500, 502, 503, 0,
	2900, 0, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 0, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	0, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 2905, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 0, 604, 605, 0, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 0, 616,
	0, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 647, 648, 2901,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	342, 0, 359, 843, 0, 407, 444, 0, 0, 0,
	504, 0, 557, 561, 0, 0, 0, 0, 0, 0,
	415, 3537, 848, 2899, 854, 0, 860, 0, 626, 0,
	850, 851, 856, 347, 1088, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 0, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 0, 0, 569, 527, 525, 0, 492,
	549, 0, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 1090, 0, 643, 1093, 1081, 1073,
	1074, 1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098,
	1099, 636, 1087, 1089, 1072, 1079, 1080, 1082, 2902, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 0, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	845, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 0, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	0, 0, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 0, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 0, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 0, 0, 500, 502, 503, 0, 2900,
	0, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 0, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 0,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 2905, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 0, 604, 605, 0, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 0, 616, 0,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 647, 648, 2901, 515,
	509, 465, 507, 508, 512, 513, 516, 743, 748, 0,
	359, 0, 747, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	2960, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 745,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 3910, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 746, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 743, 748, 0, 359, 0, 747, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 745, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 751, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 746, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 748, 0,
	359, 0, 747, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 745,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 746, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2783, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 883, 2786, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 2790, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 2787,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1892, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 1878, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 1884, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 1885, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	1880, 432, 1881, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 1886, 1887, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 1888, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 1882, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 1883, 568, 692, 570, 571,
	1889, 573, 574, 576, 577, 1879, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 1890, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	1891, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 883, 2786, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 2790, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 2787,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	359, 0, 747, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 745,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 746, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3688, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 3689, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3679, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 3680,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 342, 0, 359, 0, 0, 407, 994,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 883, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 883, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 5390, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 4253,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 4988, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 4969, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 4265, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 4434, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 3289,
	0, 0, 0, 511, 0, 0, 0, 0, 3292, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	3290, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 3288, 611, 3287, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 3291, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1592,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 883, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1590, 342, 0,
	359, 0, 0, 407, 1589, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1255, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1152, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 322, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	1150, 351, 352, 353, 356, 357, 358, 360, 323, 361,
	1149, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 325, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 326, 565, 566,
	567, 568, 692, 570, 571, 324, 573, 574, 576, 577,
	578, 579, 580, 581, 1147, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 318, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 327,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 998, 342, 0,
	359, 0, 0, 407, 997, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 815,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 779, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 776, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 778, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 777, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 714, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 716,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 715, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 6304, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 4904,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 4023, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 3883,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 322, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 323, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 325, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 326, 565, 566, 567, 568, 692, 570, 571,
	324, 573, 574, 576, 577, 578, 579, 580, 581, 1147,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 318, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 327, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 322, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 323, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 325, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 326, 565, 566,
	567, 568, 692, 570, 571, 324, 573, 574, 576, 577,
	578, 579, 580, 581, 2945, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 2946, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 327,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 3784, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 3674,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 3672, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 3658,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 3181, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 322, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 323, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 325, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 326, 565, 566,
	567, 568, 692, 570, 571, 2988, 573, 574, 576, 577,
	578, 579, 580, 581, 2945, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 2946, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 327,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 322, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 323, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 325, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 326, 565, 566, 567, 568, 692, 570, 571,
	2977, 573, 574, 576, 577, 578, 579, 580, 581, 2945,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 2946, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 327, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 322, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 323, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 325, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 326, 565, 566,
	567, 568, 692, 570, 571, 2944, 573, 574, 576, 577,
	578, 579, 580, 581, 2945, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 2946, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 327,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 322, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 323, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 325, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 326, 565, 566, 567, 568, 692, 570, 571,
	324, 573, 574, 576, 577, 578, 579, 580, 581, 1147,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 2917, 0, 610, 611, 612,
	613, 614, 0, 318, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 327, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 2773,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 2711, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 1871, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1803, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1801,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1797, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1506,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1465, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1460,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 1454,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 0,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1126,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1124, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1112,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1058, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1054,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1051, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1045,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1026, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 1002,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 1000, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 981,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 962, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 958,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 956, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 930,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 738, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 736,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 322, 649, 315,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 323, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 317, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 325, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 326, 565, 566,
	567, 568, 692, 570, 571, 324, 573, 574, 576, 577,
	578, 579, 580, 581, 316, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 318, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 327,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 0, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	0, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 0, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 0, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 843, 0, 407, 444,
	0, 0, 0, 504, 0, 557, 561, 0, 0, 0,
	0, 0, 0, 415, 0, 848, 2899, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 1088, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 0, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 0, 0, 569, 527,
	525, 0, 492, 549, 0, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 1090, 0, 643,
	1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095,
	1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080,
	1082, 2902, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 0, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 845, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 0,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 0, 0, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 0, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	0, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 0, 0, 500, 502,
	503, 0, 2900, 0, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 0, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 0, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 2905, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 0, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	0, 616, 0, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 647,
	648, 2901, 515, 509, 465, 507, 508, 512, 513, 516,
	342, 0, 359, 843, 0, 407, 444, 0, 0, 0,
	504, 0, 557, 561, 0, 0, 0, 0, 0, 0,
	415, 0, 848, 0, 854, 2950, 860, 0, 626, 0,
	850, 851, 856, 347, 1088, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 4302, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 0, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 0, 0, 569, 527, 525, 0, 492,
	549, 0, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 1090, 0, 643, 1093, 1081, 1073,
	1074, 1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098,
	1099, 636, 1087, 1089, 1072, 1079, 1080, 1082, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 0, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	845, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 0, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	0, 0, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 0, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 0, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 0, 0, 500, 502, 503, 0, 0,
	0, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 0, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 0,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 2905, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 0, 604, 605, 0, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 0, 616, 0,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 515,
	509, 465, 507, 508, 512, 513, 516, 342, 0, 359,
	843, 0, 407, 444, 0, 0, 0, 504, 0, 557,
	561, 0, 0, 0, 0, 0, 0, 415, 0, 848,
	0, 854, 0, 860, 0, 626, 0, 850, 851, 856,
	347, 1088, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 0, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	0, 0, 569, 527, 525, 6340, 492, 549, 0, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076,
	1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087,
	1089, 1072, 1079, 1080, 1082, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 0,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 845, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 0, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 0, 0, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	0, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 0, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	0, 0, 500, 502, 503, 0, 0, 0, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 0, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 0, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 1063, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 0,
	604, 605, 0, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 0, 616, 0, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 647, 648, 0, 515, 509, 465, 507,
	508, 512, 513, 516, 342, 0, 359, 843, 0, 407,
	444, 0, 0, 0, 504, 0, 557, 561, 0, 0,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 1088, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 0, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 0, 0, 569,
	527, 525, 5989, 492, 549, 0, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 1090, 0,
	643, 1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0,
	1095, 1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079,
	1080, 1082, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 0, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	0, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 0, 0, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 0, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 0, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 0, 0, 500,
	502, 503, 0, 0, 0, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 0, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 0, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 1063, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 0, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 0, 616, 0, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 515, 509, 465, 507, 508, 512, 513,
	516, 342, 0, 359, 843, 0, 407, 444, 0, 0,
	0, 504, 0, 557, 561, 0, 0, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 1088, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 0, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 0, 0, 569, 527, 525, 0,
	492, 549, 0, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 1090, 0, 643, 1093, 1081,
	1073, 1074, 1075, 1076, 1077, 1078, 0, 1095, 1096, 1097,
	1098, 1099, 636, 1087, 1089, 1072, 1079, 1080, 1082, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 0, 842, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 845, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 0, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 0, 0, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 0, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 0, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 4556, 0, 500, 502, 503, 0,
	0, 0, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 0, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	0, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 1063, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 0, 604, 605, 0, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 0, 616,
	0, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 647, 648, 0,
	515, 509, 465, 507, 508, 512, 513, 516, 342, 0,
	359, 843, 0, 407, 444, 0, 0, 0, 504, 0,
	557, 561, 0, 0, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 1088, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 0, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 0, 0, 569, 527, 525, 0, 492, 549, 0,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075,
	1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636,
	1087, 1089, 1072, 1079, 1080, 1082, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	0, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 845, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 0, 0,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 0, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 0, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 2972, 0, 500, 502, 503, 0, 0, 0, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 0, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 0, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 1063, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	0, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 0, 616, 0, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 647, 648, 0, 515, 509, 465,
	507, 508, 512, 513, 516, 342, 0, 359, 843, 0,
	407, 444, 0, 0, 0, 504, 0, 557, 561, 0,
	0, 0, 0, 0, 0, 415, 0, 848, 0, 854,
	0, 860, 0, 626, 0, 850, 851, 856, 347, 1088,
	649, 721, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 0,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 0, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 0, 0,
	569, 527, 525, 0, 492, 549, 0, 0, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 1090,
	0, 643, 1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078,
	0, 1095, 1096, 1097, 1098, 1099, 636, 1087, 1089, 1072,
	1079, 1080, 1082, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 0, 842, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 0, 0, 0, 845, 0, 0, 0, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 0, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 0, 0, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 0, 0,
	472, 473, 474, 0, 0, 475, 476, 477, 478, 479,
	480, 483, 0, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 0, 0,
	500, 502, 503, 0, 0, 0, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 0,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 0, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 0, 583, 1063,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 0, 604, 605,
	0, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 0, 616, 0, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 0, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 647, 648, 0, 515, 509, 465, 507, 508, 512,
	513, 516, 342, 0, 359, 843, 0, 407, 444, 0,
	0, 0, 504, 0, 557, 561, 0, 0, 0, 0,
	0, 0, 415, 0, 848, 0, 854, 0, 860, 0,
	626, 0, 850, 851, 856, 347, 1088, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 0, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 0, 0, 569, 527, 525,
	0, 492, 549, 0, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 1090, 0, 643, 1093,
	1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095, 1096,
	1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080, 1082,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 0, 842, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 845, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 0, 0, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 0, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 0,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 0, 0, 500, 502, 503,
	0, 0, 0, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 0, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 0, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 2905, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 0, 604, 605, 0, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 0,
	616, 0, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 647, 648,
	0, 515, 509, 465, 507, 508, 512, 513, 516, 342,
	0, 359, 843, 0, 407, 1101, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 1088, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074,
	1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099,
	636, 1087, 1089, 1072, 1079, 1080, 1082, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 0, 0,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 1063, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 647, 648, 0, 515, 509,
	465, 507, 508, 512, 513, 516, 342, 0, 359, 843,
	0, 407, 1060, 0, 0, 0, 504, 0, 557, 561,
	0, 0, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	1088, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	0, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 0,
	0, 569, 527, 525, 0, 492, 549, 0, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076, 1077,
	1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087, 1089,
	1072, 1079, 1080, 1082, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 0, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 845, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 0, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 0, 0, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 0,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 0, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 0,
	0, 500, 502, 503, 0, 0, 0, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	0, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 0, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	1063, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 0, 604,
	605, 0, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 0, 616, 0, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 515, 509, 465, 507, 508,
	512, 513, 516, 342, 0, 359, 843, 0, 407, 444,
	0, 0, 0, 504, 0, 557, 561, 0, 0, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 1088, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 0, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 0, 0, 569, 527,
	525, 0, 492, 549, 0, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 1090, 0, 643,
	1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095,
	1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080,
	1082, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 0, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 845, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 0,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 0, 0, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 0, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	0, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 0, 0, 500, 502,
	503, 0, 0, 0, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 0, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 0, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 0, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 0, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	0, 616, 0, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	648, 0, 515, 509, 465, 507, 508, 512, 513, 516,
}

var yyPact = [...]int32{
	8402, -1000, 488, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1721, 1721, -1000, -1000, 3858, 1465, 17637, 20311, 18692, 3898,
	2521, 2993, 113711, 90986, 1721, 1878, 1872, 1814, 91996, 113206,
	112701, 76846, 76341, 1884, 1481, 1441, 90481, 1436, 1400, -1000,
	2384, 91996, 56702, 56702, 89976, 91996, 89471, 91996, 59236, 91996,
	4918, 4161, 4161, 4102, 2772, 3054, 69337, -1000, 1837, 1455,
	1470, -1000, -1000, 4647, 80886, 479, 112196, 91996, 1366, 8402,
	4727, -1000, -1000, 2864, 4112, 80886, 4230, 4107, 1470, 91996,
	-1000, 2132, 2863, 2882, 4658, 111691, 91996, 91996, 55174, 91996,
	3855, 111186, 110681, 3338, 110176, 65802, 3893, 91996, 1836, 91996,
	91996, 2625, 109671, 91996, 91996, 1397, 3178, 63276, 63276, -1000,
	-1000, 1988, 1971, -1000, -1000, -1000, 80381, 88966, 109166, 108661,
	1738, 3336, 2663, 69337, 91996, 91996, 91996, 91996, 69337, 63276,
	2751, 54645, 108156, 69337, 91996, 69337, 91996, 91996, 91996, 91996,
	91996, 1834, 62771, 62266, 91996, 107651, 3853, 91996, 91996, 2434,
	3480, -1000, 107146, 106641, 106136, 119104, 118617, 4836, 4826, 54116,
	4826, 105631, 71862, 71357, 70852, 70347, 105126, 104621, 4153, 65297,
	64792, 64287, -1000, -1000, -1000, 1732, 3330, -1000, -1000, -1000,
	3851, 2621, 1829, -1000, 2748, -1000, -1000, -1000, -1000, -1000,
	-1000, 1730, 4149, 2262, -1000, 94016, 88461, 87956, 2500, -1000,
	-1000, 1106, 4442, 4918, 4918, 4660, 67822, 1643, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4435, 2796, 3231, 638, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4727, 2864, 4727, 4918,
	4267, 4918, -1000, -1000, -1000, -1000, 91996, -1000, 4918, 1396,
	-1000, 4100, 542, 1169, -1000, 1046, 1046, 1046, 3746, 1046,
	4086, 1636, 622, 1036, -1000, 3666, 2195, 50990, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2278, 3681,
	56197, -1000, 91996, 56197, -1000, 638, 4429, 2792, 3229, -1000,
	56197, 91996, 2668, 56197, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 91996, 4226, 4226, 4226, 4226, 1107, 1107,
	4226, 4226, 1264, 1219, -1000, -1000, -1000, 4906, 4906, -1000,
	-1000, -1000, -1000, 1088, -1000, 87451, -1000, -1000, -1000, -1000,
	451, -1000, -1000, -1000, 80886, -1000, 80886, 16952, 3589, 3054,
	-1000, -1000, 67822, -1000, 1395, -1000, 706, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3220, 4632, 4632, 4632, 4147, 1837,
	-1000, -1000, 679, 676, 1455, 32030, 32030, -1000, 4085, -1000,
	489, -1000, 706, 68832, 1392, 437, 91996, -1000, 1213, 437,
	37172, -1000, -1000, 2736, -1000, 431, -1000, 2715, 2110, -1000,
	3135, 91996, 3835, 104116, 80886, 80886, 999, -1000, -1000, -1000,
	-1000, -1000, 1046, 103611, 91996, 1728, 103106, 4834, 69337, 69337,
	91996, 1816, 69337, 91996, 3586, 2431, -1000, 2272, 3228, -1000,
	4719, 1925, 4844, 626, 1244, 91996, 91996, -1000, 631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1489, 2333, 1464, 4718, 1925, 4717, 3461,
	102601, 1802, 4713, 3630, 1925, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1725, 1544, 91996, 2516, 4083, 91996,
	1213, 4712, -1000, 3615, 3187, 117643, 91996, 1925, 1925, -1000,
	-1000, -1000, -1000, 7828, 4818, 4621, 7786, 4816, 4620, 18301,
	4811, 11213, 4808, 86946, 86441, 3458, 91996, 85936, 2769, 1381,
	2752, 2758, 3913, 2304, 13933, 1378, -1000, 706, 2397, 3440,
	91996, 91996, 91996, 2779, 1377, 4072, 4806, 11388, 2982, 6466,
	2424, 1844, 3138, 4070, 4069, 91996, 2396, 1973, 4619, 2395,
	3585, 1973, 4619, 2667, 2756, 4804, 2312, 2834, 3445, -1000,
	1082, 4802, 447, -1000, 4801, 485, -1000, 4068, 4800, 483,
	4798, -1000, 3509, 119591, -1000, -1000, -1000, -1000, -1000, 912,
	-1000, 625, -1000, -1000, -1000, -1000, -1000, 1280, 3299, 1279,
	1279, 1279, -1000, -1000, -1000, -1000, -1000, 837, 858, -1000,
	-1000, -1000, -1000, 3288, 1376, 3288, 3288, -1000, 3296, 3288,
	483, 4794, 102096, 1369, 4793, 101591, 101086, 480, 4792, -1000,
	3584, 4683, 4790, 478, 4788, -1000, 478, 4787, 478, 4785,
	468, 4783, -1000, 1925, 4781, -1000, 4780, 63276, 3620, 235,
	4777, -1000, 235, 4775, 235, 4774, -1000, 3457, -1000, 2170,
	-1000, -1000, -1000, 4834, 63276, 91996, -1000, 3223, -1000, 4883,
	66307, 2997, -1000, 386, -1000, 431, 4918, 3656, 49448, 48934,
	91996, 587, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3144, -1000, 2713, -1000, -1000, -1000, -1000, -1000, -1000, 100581,
	-1000, -1000, -1000, 4891, 117643, 77856, 63276, 78866, 1367, 91996,
	-1000, 91996, -1000, -1000, -1000, -1000, 77856, 3581, 63276, 3574,
	2195, -1000, 614, -1000, 49962, 1366, -1000, -1000, -1000, 4164,
	3666, -1000, 606, -1000, 448, -1000, 1213, 602, -1000, 2702,
	-1000, 601, 3939, 4064, 706, 4834, 4834, 4834, -1000, -1000,
	-1000, -1000, 598, 2719, -1000, 91996, -1000, 91996, 91996, 91996,
	4226, 4226, 91996, 91996, 91996, 4226, 4226, 91996, 4226, 4226,
	-1000, -1000, -1000, 37172, -1000, -1000, -1000, 4918, 490, -1000,
	229, 91996, 91996, 91996, 117643, 117643, 69337, 69337, 53587, 91996,
	91996, 69337, 69337, 3573, 3476, 1362, -1000, -1000, -1000, -1000,
	-1000, -1000, 4063, 67822, -1000, -1000, 29456, 706, -1000, 26352,
	37172, 3241, 3568, 3572, 2072, 4155, 3219, -1000, 36658, 2847,
	41284, 3653, 1455, -1000, -1000, 1455, 1455, 37172, -1000, 3220,
	-1000, -1000, 4105, 277, -1000, 25391, -1000, -1000, 37172, 37172,
	37172, 37172, 37172, 2533, 4687, -1000, -1000, -1000, -1000, 31001,
	-1000, -1000, 706, 1255, 994, -1000, -1000, 1360, -1000, 1201,
	1359, 706, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1542, 4918, 1533, 37172, 1705, 3004, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1350, 1346, 3570, -1000, 1344, 1343, 1342,
	1340, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1338, 1336,
	1335, 1332, 1330, 1328, 1327, 1326, 1325, 1324, 1323, 1322,
	1320, 1319, 1318, 1313, 1311, 1306, 1303, 1302, 1300, 1214,
	1299, 1295, 1293, 1292, 1287, 1285, 1283, -1000, 3288, -1000,
	3288, 3288, 1279, 1279, 1280, -1000, -1000, 3296, 3288, 1279,
	-1000, -1000, 858, 837, -1000, -1000, -1000, -1000, -1000, 595,
	1278, -1000, 706, -1000, 91996, 37172, 91996, 437, 4889, 91996,
	596, 16278, -1000, 3215, 2864, -1000, 2138, -1000, -1000, -1000,
	1529, 4888, 66812, -1000, 91996, 3950, 3948, 4419, 4188, 1180,
	4711, 4887, 1046, 91996, 3524, 4706, 100076, -1000, 1277, 1277,
	2955, 91996, 1274, 4886, 117643, 2742, 2116, -1000, 63276, 4830,
	4773, 2568, -1000, -1000, 117643, -1000, 571, 27379, -1000, 27379,
	4636, 3947, 52000, -1000, 985, 91996, 91996, 91996, 91996, -1000,
	91996, 4772, -1000, 4770, 91996, 1151, 4702, 1740, 4918, 4769,
	61256, 4700, -1000, 99571, 1273, 4062, 2665, 63276, 91996, 1822,
	4059, 4768, -1000, 77351, 1244, 4918, 4885, 3569, -1000, -1000,
	292, -1000, 2014, 2265, -1000, 2494, 2493, 73344, 1906, 1894,
	3675, 4058, 2332, 1930, 91996, 2986, 91996, 3651, 4418, 1076,
	2902, 2294, -1000, 1272, 80886, 1969, 292, -1000, 4416, 3131,
	2490, 2986, 1240, 91996, 1964, 292, 4408, 3524, 2257, -1000,
	2988, 119591, 1082, -1000, 4146, -1000, 1082, 1082, 4145, 2593,
	1925, 1925, -1000, 91996, 292, 1981, 2125, 91996, 9641, 4767,
	4618, 9514, 4766, 91996, -1000, 1041, -1000, 4407, 2260, 4405,
	-1000, 72856, 4402, 2244, 4400, 1759, 4399, 2240, 4394, 4389,
	4387, 2568, -1000, 99066, 3205, -1000, 2568, -1000, -1000, 1429,
	-1000, 4159, -1000, -1000, -1000, -1000, 3722, -1000, 3751, 2576,
	1990, 3672, 4386, 4385, 7982, 98561, 4382, 3126, -1000, -1000,
	4047, 4593, -1000, -1000, -1000, -1000, 2152, 2858, -1000, 2679,
	1082, 1082, 91996, -1000, 91996, -1000, -1000, 75348, 706, 4381,
	3753, -1000, -1000, 2403, 3946, 3945, 1113, 4380, -1000, 117156,
	91996, 91996, 4379, 7982, 98056, 4378, 3124, 4377, 61761, 78361,
	78361, 4376, 4375, 7982, 97551, 4374, 3118, 4373, 4368, 4366,
	1578, -1000, 4365, 4610, 4361, 1145, 4918, 2427, 2423, 2422,
	-1000, -1000, 1244, 4360, 91996, 91996, 2526, 4359, -1000, 2661,
	3143, 2661, 4358, 61256, -1000, 2661, 2661, 4353, 1076, 1076,
	4346, 4341, 2075, 4340, 91996, 91996, 91996, 91996, 91996, 3378,
	3289, 3286, 1112, 433, 4339, -1000, 3246, -1000, 8438, 2239,
	2701, 2508, -1000, 4915, 4914, -1000, 91996, 91996, -1000, -1000,
	-1000, 91996, 91996, -1000, 91996, 91996, 117643, -1000, 117643, 1412,
	1414, 3508, -1000, 4906, 4338, -1000, 4337, 4336, 4335, -1000,
	1271, -1000, 648, 37172, -1000, 4906, -1000, -1000, -1000, -1000,
	4906, -1000, 4448, 4445, 4906, -1000, 1270, -1000, 4906, -1000,
	-1000, 3288, 3288, -1000, -1000, 117643, 447, 4764, 117643, -1000,
	3942, 4762, 3940, 4758, -1000, 52000, 52000, 117643, -1000, 91996,
	-1000, 69337, 69337, -1000, 69337, -1000, 69337, -1000, 69337, 69337,
	1256, 91996, 91996, 495, 61256, 4757, 63276, 63276, 63276, 63276,
	-1000, -1000, -1000, -1000, -1000, 91996, 491, 3283, 4883, 1831,
	-1000, -1000, -1000, -1000, -1000, 91996, -1000, -1000, 430, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 430, -1000, -1000,
	-1000, -1000, -1000, 1504, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 91996, -1000, 1470, 588, -1000, 4334, 386, 91996, 91996,
	2273, 69337, 69337, 69337, 91996, 91996, 91996, 3469, 91996, 91996,
	91996, 91996, 2276, 475, -1000, 91996, 586, -1000, -1000, 585,
	4228, 76846, 304, 78866, -1000, 2195, 56197, -1000, -1000, -1000,
	97046, 3658, 91996, 91996, -1000, 91996, -1000, 91996, -1000, 91996,
	91996, 91996, 91996, 91996, -1000, 3471, -1000, -1000, -1000, -1000,
	2134, -1000, -1000, -1000, -1000, 91996, 91996, -1000, -1000, -1000,
	91996, 91996, -1000, 91996, 91996, 584, -1000, 80886, 2553, 2323,
	4683, 2892, 2887, 4544, 4543, 4540, 4538, 4536, 4528, 4525,
	4520, 91996, 91996, 4046, 4044, 4519, 4518, 117643, 1082, 117643,
	6663, -1000, -1000, 978, 247, 37172, 37172, 37172, -1000, 16278,
	4899, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16200,
	-10, -1000, -1000, -1000, -1000, -1000, 2063, 4166, -1000, 1669,
	-1000, 2078, -1000, -1000, 423, 16278, -1000, 42826, -1000, -1000,
	-1000, 2613, 16278, -1000, 40770, 40770, 2155, 91996, 2803, -1000,
	2803, 245, -1000, 6679, 3241, 3568, 4227, 85431, 32030, 117643,
	91996, 4440, 37172, 37172, 37172, 37172, 37172, 37172, 37172, 37172,
	37172, 37172, 37172, 37172, 37172, 37172, 37172, 37172, 4539, 37172,
	4332, 3738, -1000, -1000, 4329, 1236, 2070, 27379, -1000, -1000,
	1248, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 535, 535, 688, 3309, 3309,
	1109, 1255, 4656, 706, 15934, 422, 700, 706, -1000, -1000,
	-1000, 32545, 37172, 52000, 36143, 706, -1000, 29456, -1000, 1923,
	4906, 4548, 16278, 3004, 4120, 1554, 1252, 37172, 37172, 1251,
	4906, 4906, 4906, 4906, 37172, 2430, 37172, 37172, 42312, 37172,
	37172, 31516, 37172, 37172, 37172, 37172, 37172, 2588, 37172, 3144,
	43854, 2584, 37172, 35629, 30486, 37172, 37172, 37172, 977, 37172,
	37172, 37172, 3144, 4227, 37172, 976, 583, -1000, 3953, 567,
	37172, -1000, 91996, 4440, 37172, 37172, 37172, 37172, 4332, 3738,
	4329, 1236, 1248, -1000, -1000, -1000, 2030, 2418, -1000, 4043,
	-1000, 3757, 59741, 3890, 91996, 600, -1000, 1426, 91996, -1000,
	-1000, 4177, 46404, 46404, 3686, 3686, -1000, -1000, 73849, 91996,
	3649, 3904, 4755, 1621, 4662, 1247, -1000, 3524, 2917, 4753,
	4042, 4699, -1000, 16175, 74859, 13477, 2241, -1000, -1000, 3648,
	3259, 1244, -1000, 72367, 4040, 2735, 91996, 91996, 1718, -1000,
	-1000, -1000, -1000, -1000, -1000, 2491, 91996, -1000, -1000, -1000,
	27379, -1000, 552, -1000, 1425, 3567, 91996, -1000, 91996, 1245,
	1244, 1244, 1244, 1244, 1244, -1000, 91996, 2209, 91996, 1911,
	73849, 3646, 4750, 2991, -1000, -1000, 91996, 2119, -1000, -1000,
	4749, 2838, 4882, 4698, 1046, 37172, 27379, 4931, -1000, 4881,
	3082, 47919, 91996, 1915, 564, -1000, 80886, 4617, 728, 1046,
	-1000, 489, -1000, 2421, 117643, 4918, 2838, 2838, 6722, 91996,
	91996, 91996, -1000, 1909, -1000, -1000, 2615, 91996, -1000, 91996,
	27379, 91996, 91996, -1000, 4696, 96541, -1000, 117643, 91996, -1000,
	1241, 3956, 1667, 1665, 3910, 84926, 91996, 96036, 95531, 91996,
	91996, 79876, 1914, 1910, 91996, 2684, 79371, 91996, 2683, -1000,
	91996, 2293, -1000, -1000, 63276, -1000, 3831, 2677, 28945, 7259,
	91996, 91996, 4035, 91996, 9279, 91996, 91996, -1000, 91996, -1000,
	-1000, -1000, -1000, -1000, 1082, -1000, -1000, -1000, 91996, 91996,
	1082, 1082, 17956, 91996, 91996, 91996, 8917, 292, 1963, 2111,
	3112, 91996, 1957, 292, 1961, 2021, 80886, 2000, 91996, 91996,
	63276, 970, 7, 4144, -1000, -1000, 118130, 114721, -1000, 2536,
	-1000, -1000, -1000, 625, -1000, 119591, 91996, 91996, 63276, -1000,
	91996, 91996, 63276, 91996, 63276, -1000, -1000, 91996, 1758, -1000,
	50476, -1000, -1000, 91996, 91996, -1000, 4591, 95026, 37172, 4589,
	91996, -1000, 91996, -1000, 1239, 4583, 91996, 63276, 91996, -1000,
	-1000, -1000, 94521, -1000, 84421, 3227, 2016, 63276, 4034, 4579,
	4033, 2857, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 486,
	-1000, -1000, 63276, 63276, 4326, 4325, 91996, 91996, 91996, 27379,
	63276, 458, 418, 2704, 4032, 91996, -1000, 84421, 63276, 4031,
	91996, -1000, 408, 408, 408, 63276, 91996, -1000, 84421, 63276,
	4029, 91996, 63276, 91996, -1000, 63276, -1000, -1000, 91996, -1000,
	91996, -1000, 4674, 91996, 91996, -1000, 63276, 2365, 2405, 4324,
	-1000, 4323, 2486, -1000, 63276, 2579, -1000, 94016, 91996, -1000,
	63276, 2118, 2579, -1000, -1000, 91996, -1000, -1000, 63276, 91996,
	1027, 91996, 63276, 3834, 2693, 1079, 2676, 2740, 91996, 91996,
	4918, 4824, 91996, 4918, 93511, 27379, 91996, 3439, 63276, 91996,
	4322, 91996, 91996, 69337, 1238, 117643, 69337, 53058, 69337, 69337,
	3558, 117643, 91996, -1000, -1000, 76846, 75836, 2224, 2638, 4320,
	-1000, -1000, 447, -1000, 485, -1000, 4683, 4025, -1000, 483,
	1626, 4906, 1412, 1411, 953, 2596, 2280, 2258, 2115, 4906,
	-1000, 435, 952, 948, 4425, 4424, 942, 37172, 941, -1000,
	-1000, 483, -1000, 91996, 4879, 91996, 91996, 91996, 91996, -1000,
	480, 2728, 4683, -1000, 478, 478, 478, -1000, 468, 3332,
	1925, -1000, -1000, 2114, 3553, -1000, 235, 235, 235, 4670,
	63276, 4225, 1237, 4319, -1000, 2864, -1000, 49962, 1923, 4906,
	-1000, -1000, 117643, -1000, 60751, 386, 386, 3454, 91996, 406,
	406, 406, 143, 146, 143, 1082, 405, 612, -1000, 143,
	143, 146, 4616, 4615, 4613, 4609, 4607, -1000, 27379, 4140,
	434, 91996, -1000, -1000, 60751, 4023, 398, 4683, 557, -1000,
	-1000, 4695, 1046, 91996, -1000, -1000, -1000, -1000, 3939, -1000,
	-1000, -1000, -1000, -1000, 3551, 2906, 2905, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2606, 2246,
	2243, 2496, -1000, -1000, -1000, -1000, 4596, 4596, 4596, 4596,
	4596, 4596, 4596, 4596, 3931, 3928, 93006, 91996, 4596, 4596,
	2717, 4515, 4878, 91996, 91996, 91996, 117643, 117643, 69337, 69337,
	3468, 69337, 69337, -1000, 939, 35115, -1000, 1537, -31, -31,
	37172, 37172, -1000, 37172, -1000, 3783, -1000, 37172, 2613, 4202,
	-1000, 4917, 4917, 1227, -1000, 31001, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2653, 386, 37172, 892, 1456,
	-1000, -1000, -1000, -1000, 4171, 46404, -1000, 4161, 4161, 1913,
	1897, 4161, 91996, -1000, -1000, -1000, -1000, 4315, -1000, 419,
	419, 496, 496, 496, -1000, 615, 615, 615, 615, 615,
	615, 688, 3309, 10014, 886, 37172, 37172, 4317, 4311, 1236,
	828, 37172, -1000, 4691, -1000, -1000, -1000, 4224, -1000, -1000,
	2563, 3465, -1000, -1000, -1000, -1000, 3384, 42312, 42312, -1000,
	-1000, -1000, 31001, 1235, -1000, -1000, -1000, -1000, 52000, -1000,
	1231, 37172, -1000, -1000, 4604, -1000, -1000, 37172, 198, 139,
	-1000, -1000, 411, 936, 410, -1000, 247, -1000, 934, 3314,
	-1000, 37172, 1554, 1228, -1000, 68327, 4179, 3418, 3362, 526,
	1550, 16020, 37172, 933, 931, 929, 926, 15590, 918, 4221,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 678, 916,
	913, 15491, 368, 910, 1946, -1000, 42312, 42312, 42312, 1227,
	907, 906, 7843, 15288, 34601, 34601, 34601, 905, 15217, 37172,
	216, 6621, 399, 397, 394, 389, 27379, 381, -1000, 15152,
	37172, 3525, 27379, 6457, 375, 465, 901, -1000, 117643, 526,
	428, 1475, 900, -1000, 706, 3465, 15031, 3769, -1000, 352,
	351, 348, 37172, 4171, 354, -1000, -1000, 1226, -1000, 3874,
	-1000, 16278, -1000, -1000, -1000, 3770, 3764, 3360, -1000, -1000,
	346, -1000, -1000, -1000, -1000, 4177, 66812, 37172, 341, -1000,
	706, 3770, 40256, 180, 4048, 81896, 81896, 48424, -1000, 45379,
	83411, 81896, 81896, 1453, 4220, 1220, 1215, 706, -1000, -1000,
	-1000, 1214, 4256, 3786, -1000, 3786, 884, 334, -1000, 117643,
	-1000, -1000, -1000, 91996, 1087, 91996, 3444, 91996, 91996, 4670,
	91996, 4877, 1076, 91996, 91996, 80886, 4748, 115208, 2445, 13477,
	-1000, 4918, 67822, 3549, -1000, -1000, 340, -1000, -1000, 1904,
	2445, 4018, -1000, -1000, -1000, 3645, -1000, -1000, 2241, -1000,
	339, -1000, 1419, 3850, 91996, 2912, 1046, 91996, 4830, 2179,
	2189, 3226, -1000, 2708, -1000, -1000, 27379, 27890, 1818, -1000,
	880, 327, -1000, 117643, 4918, -1000, -1000, -1000, -1000, -1000,
	1347, -1000, 91996, 67822, 67822, -1000, 1925, 1560, 1911, -1000,
	91996, 1932, 91996, 874, 91996, 91996, 3166, 1802, 91996, 3548,
	-1000, -1000, 4906, 63276, 63276, 2640, 4608, 2453, 2448, -1000,
	-1000, 4158, 1766, 63276, 1470, 4747, 3904, 14947, 3280, 4662,
	3544, 4937, 2910, -1000, -1000, 544, -1000, 706, -1000, 37172,
	1213, 4674, -1000, 78361, 1046, 2206, 728, 4175, 4175, 91996,
	873, 4308, -1000, -1000, 4307, 4305, -1000, -1000, 83916, -1000,
	-1000, 333, -1000, 668, 3604, 3255, 4746, -1000, 4693, 1933,
	1891, 37172, 1208, -1000, 2856, 1177, 1206, 1205, 91996, 2177,
	3823, -1000, 4744, 4683, 4743, 4683, -1000, -1000, -1000, -1000,
	-1000, 91996, 91996, 91996, 91996, -1000, 2150, -1000, -1000, -1000,
	-1000, 2147, -1000, 2671, -1000, -1000, -1000, -1000, -1000, 2855,
	2130, 323, -1000, -1000, 27379, 27379, 27379, 4918, -1000, 292,
	-1000, 1952, 1918, 2797, -1000, 3043, -1000, 292, 4302, 2791,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 292, 4300, 3524,
	1876, -1000, 4299, -1000, 292, 1953, 1861, 91996, 91996, 91996,
	4022, 8497, 91996, 91996, 91996, 91996, 8131, 4297, 1578, 1911,
	4296, -1000, -1000, -1000, -1000, -1000, 4139, 114721, 114721, 118130,
	-1000, 118130, -1000, 625, -1000, 669, 625, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4295, -1000, 4683, 4742, 16278, -1000, -1000, 2010, 37172,
	-1000, -1000, -1000, -1000, -1000, -1000, 3039, 2817, 4576, -1000,
	-1000, -1000, 114721, -1000, 235, 91996, 63276, 2643, 2750, -1000,
	322, -1000, 1423, -1000, -1000, 116669, 117643, 4294, 3917, 63276,
	91996, -1000, -1000, -1000, 3037, -1000, -1000, -1000, -1000, -1000,
	3036, -1000, -1000, -1000, -1000, -1000, 556, -1000, 556, 556,
	-1000, 4293, 4292, 3111, 91996, 63276, -1000, -1000, -1000, -1000,
	-1000, -1000, 91996, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1998, 4290, 2203, 4287, 2201, 4286, -1000, 4285, 2200,
	4284, 2199, 4281, 2650, 2632, 2631, -1000, 4280, 4279, 4918,
	4692, 4683, -1000, 4741, 4683, 320, -1000, -1000, 3238, 3237,
	-1000, 3818, -1000, 67822, -1000, -1000, -1000, 117643, -1000, -1000,
	-1000, 91996, 91996, -1000, -1000, 117643, -1000, -1000, 4020, 4019,
	1635, 91996, 63276, 63276, 63276, -1000, -1000, -1000, 91996, -1000,
	-1000, 1406, 1405, 4906, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 872, -1000, -1000, 1463, -1000, -1000, 1463, 309,
	-1000, -1000, 447, 117643, 4683, 3926, 4683, 3922, -1000, 91996,
	-1000, -1000, -1000, -1000, -1000, 308, -1000, -1000, 1204, 91996,
	61256, -1000, 2680, -1000, 2113, 80886, -1000, 431, -1000, -1000,
	871, -1000, 551, -1000, -1000, 63276, 91996, 143, 317, -1000,
	91996, 91996, 2197, 2196, 2187, 2173, 2172, 306, -1000, 2056,
	63276, -1000, -1000, 267, 77856, -1000, 63276, 4740, -1000, -1000,
	1470, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3063, 3061,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	91996, 91996, 4511, 91996, 4493, -1000, -1000, 91996, 4596, 117643,
	4492, 4491, 4490, 4484, 4482, 4480, 4479, 1082, 4477, 4471,
	-1000, 37172, -1000, 870, 869, 37172, 867, 16278, 16278, 1404,
	16278, -1000, -1000, 4199, -1000, 1889, -1000, -1000, 34087, 312,
	-1000, -1000, 1456, -1000, 1181, -1000, 3830, 4117, 37172, 180,
	91996, 91996, 4161, 4161, 4161, 4161, 91996, -1000, 37172, 37172,
	639, 575, 37172, 42312, 42312, -1000, 37172, 543, -1000, -1000,
	-1000, -1000, 4218, -1000, -1000, 2542, 3465, 37172, -1000, -1000,
	1776, 1773, -1000, -1000, -1000, -1000, 2341, 2183, 305, -1000,
	31001, 866, 33573, 310, -1000, 706, 14893, -1000, -1000, 1408,
	-1000, -1000, -1000, 865, 4918, 3078, -1000, 37172, 14521, -1000,
	1537, -1000, -1000, 114216, 37172, 3465, 4007, 4004, 37172, 37172,
	3413, 4137, -1000, -1000, 3315, 14210, -1000, -1000, -1000, -1000,
	117643, -1000, 37172, -1000, 2865, -1000, -1000, 37172, -1000, 117643,
	42312, 42312, 42312, 42312, 42312, 42312, 42312, 42312, 42312, 42312,
	42312, 42312, 42312, 3343, 42312, 1201, 520, 520, 520, -1000,
	-1000, 33059, 37172, 37172, 117643, 864, 863, 860, -1000, 37172,
	216, 37172, -1000, -1000, -1000, -1000, 303, -1000, 37172, 27379,
	7590, 859, 44874, 297, 1743, -1000, 3465, 37172, -1000, 1475,
	3769, 37172, 4001, 4000, 3769, -1000, 847, -1000, 843, 37172,
	37172, 37172, 14153, 4117, -1000, 1470, -1000, -1000, 32030, 1015,
	1470, 1559, 91996, 706, 3770, -1000, 16278, 1422, 91996, -1000,
	16278, 3644, 46404, 3966, 3961, 46404, 3978, 3916, 3916, 3916,
	-1000, 1883, -1000, 91996, 1192, -1000, 81896, 83411, 81896, 81896,
	63781, 826, 4048, -1000, -1000, 67317, 1191, -1000, -1000, -1000,
	3611, 1189, 44364, 37172, 706, 37172, 1925, -1000, -1000, -1000,
	3921, 2826, 73849, -1000, 2462, 74354, 1087, 3969, 1076, 1660,
	-1000, 1173, 4875, -1000, 1088, 1470, -1000, 291, 3524, 3910,
	91996, 13477, 1187, -1000, -1000, -1000, 3249, 37172, -1000, -1000,
	307, -1000, 295, 1796, -1000, 114721, 37172, 37172, -1000, 91996,
	2241, 91996, 4002, -1000, 4935, 27890, 4268, -1000, -1000, -1000,
	-1000, 1185, 91996, 4662, 1184, 92501, 63276, 4830, -1000, 91996,
	-1000, -1000, 91996, 3348, -1000, 4687, 1663, 1183, 42312, 91996,
	3386, -1000, 2984, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1181, 4915, 4914, 117643, -1000, 91996, 4640, 825, 293,
	-1000, -1000, 91996, -1000, -1000, -1000, -1000, -1000, 1179, -1000,
	-1000, 626, -1000, -1000, -1000, 2826, 1087, 1008, 3451, 1740,
	1560, 61256, -1000, 235, 235, 63276, 63276, -1000, -1000, 4918,
	4918, 1107, 4918, 235, 4670, 91996, 4662, -1000, 2560, 91996,
	-1000, 4263, 3833, -1000, 91996, 46404, 47919, 14106, 3999, -1000,
	-1000, 4175, 82906, 4175, -1000, 1178, -1000, 556, 3453, 4918,
	91996, 91996, -1000, -1000, -1000, -1000, 27379, 27890, 27379, -1000,
	3889, -1000, -1000, -1000, 91996, 4738, 3196, -1000, 82401, -1000,
	3910, 13546, 91996, 2954, 91996, 91996, -1000, 91996, 46909, -1000,
	-1000, 3198, 460, 1076, 2931, 2598, 1791, -1000, -1000, 1925,
	1994, 2954, 91996, -1000, 91996, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2124, 91996, -1000, -1000, 28945, -1000, -1000, -1000,
	-1000, -1000, 91996, 91996, 91996, 91996, 1951, 4136, 91996, 91996,
	1950, 4135, 91996, 91996, 91996, 91996, 91996, 91996, -1000, 4260,
	-1000, 3035, 292, 1936, 1812, 2778, -1000, 4258, -1000, 292,
	1928, 1246, 91996, -1000, 63276, 114721, -1000, 290, -1000, -1000,
	1790, 651, 91996, -1000, 91996, -1000, 13338, 2954, 91996, -1000,
	2814, -1000, -1000, -1000, 4255, 2168, 4254, 4252, 2426, 3162,
	2159, 4251, 27379, -1000, 28426, 821, 818, 817, 91996, 4677,
	1172, 235, 2344, 91996, 91996, -1000, -1000, -1000, 91996, 91996,
	3996, -1000, -1000, 1578, 1027, 91996, 91996, 91996, 91996, 63276,
	91996, 91996, 91996, 91996, 63276, 3543, 3616, 3619, 91996, 4918,
	3236, 4736, -1000, 91996, -1000, -1000, 1788, 3165, -1000, 4874,
	3920, 3919, 2710, 2161, 2161, 3537, 143, 235, 235, -1000,
	4683, -1000, -1000, 1402, -1000, -1000, -1000, -1000, -1000, 816,
	-1000, 91996, -1000, 91996, 4683, -1000, 3332, 3332, -1000, 2112,
	-1000, 3154, 91996, 289, 4918, 2929, 60751, 2932, -1000, 143,
	1082, 612, -1000, 91996, 91996, 91996, 91996, 91996, -1000, 27379,
	-1000, -1000, -1000, -1000, -1000, 4683, 4217, 304, 91996, -1000,
	-1000, -1000, 4468, 4465, 4596, 4463, 4596, 4461, -1000, 810,
	4600, 4600, 4600, 4600, 4600, 4600, 4600, 4458, 4600, 4600,
	1537, -1000, -1000, -1000, -1000, -1000, 1846, -1000, 285, -1000,
	37172, -1000, 52000, -1000, -1000, 4115, 4134, 16278, -1000, -1000,
	91996, 91996, 91996, 91996, -1000, 446, 846, 37172, 37172, 459,
	2019, 476, 846, 37172, 37172, -1000, -1000, 6503, 2782, 2774,
	37172, 37172, -1000, 13292, -1000, 275, -1000, 37172, -1000, -1000,
	4918, -1000, -1000, 16278, 37172, 800, 2482, -1000, 13204, 3769,
	4575, 4574, -1000, -1000, 3769, 37172, 3350, -1000, 799, 16278,
	793, 13147, -1000, 273, 273, 461, 461, 461, -1000, 511,
	511, 511, 511, 511, 511, 520, 4216, 3319, -1000, 2367,
	13094, 12497, 12407, 786, -1000, -1000, -1000, 216, 12352, -1000,
	39742, -1000, -1000, 785, 1712, 1709, -1000, 4128, 43854, 3379,
	-1000, 37172, 278, 39228, 3769, -1000, -1000, 784, -1000, 4572,
	4571, 782, -1000, -1000, 12307, 12307, 12307, 119591, 4115, 780,
	277, 3711, 46909, 3669, -1000, -1000, 3757, -1000, -1000, 37172,
	-1000, 91996, 4048, 46404, 46404, 4073, 3959, 46404, -1000, -1000,
	-1000, -1000, -1000, 69337, 1171, 91996, -1000, -1000, -1000, -1000,
	81896, 1170, 91996, 91996, -1000, 55692, 3525, 1167, 264, 12246,
	1139, 1925, 3370, -1000, 2462, 1166, -1000, 2900, 3904, -1000,
	4132, 274, -1000, -1000, -1000, 4681, 3604, 1896, 3201, -1000,
	-1000, 73849, 91996, 3639, 1562, 4670, 4663, 4662, -1000, 1163,
	3994, 2445, 24838, -1000, 16278, 4918, 3529, 117643, -1000, 16278,
	16278, 2406, -1000, 131, 91996, -1000, 1419, -1000, 91996, 4187,
	2819, 4869, 91996, 1125, 4689, -1000, 2003, -1000, -1000, -1000,
	4674, 4674, 37172, 2367, 1046, 4868, -1000, 4634, -1000, -1000,
	3918, -1000, -1000, 91996, -1000, 4918, -1000, 2209, 27379, 571,
	2108, 3604, 73849, 3635, 91996, 2957, -1000, 2107, 235, 235,
	-1000, -1000, -1000, -1000, -1000, 4867, 1896, 2954, 69337, -1000,
	-1000, 3291, -1000, 4546, 3917, 63276, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 180, -1000, -1000, 47919, -1000, -1000, -1000,
	-1000, 37172, -1000, 1888, 2983, 4215, -1000, -1000, -1000, -1000,
	1418, 4211, -1000, 91996, 1560, -1000, 81391, -1000, -1000, -1000,
	272, -1000, 2032, -1000, 2972, 2831, -1000, 262, 2954, 260,
	259, -1000, 4680, 1130, 4633, 37172, 4569, 4823, 4820, -1000,
	-1000, 3386, 4564, 4866, 1027, -1000, -1000, -1000, -1000, 3386,
	-1000, 3777, 117643, 1082, 1027, 4683, 4683, -1000, -1000, -1000,
	-1000, 4248, 4245, -1000, 91996, 63276, -1000, -1000, 91996, 63276,
	-1000, -1000, -1000, -1000, 4244, -1000, 91996, 91996, 91996, 91996,
	91996, 1927, 4131, 91996, 91996, 91996, 91996, -1000, -1000, 258,
	-1000, -1000, 1786, -1000, 4683, -1000, -1000, -1000, 91996, 91996,
	63276, 91996, 35, -1000, 4906, 4906, 117643, 252, -1000, 4906,
	4906, 91996, 63276, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1535, 37172, 4243, -1000,
	-1000, -1000, -1000, 3028, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 91996, 91996, 91996, 91996,
	4735, 4683, -1000, 4918, 4918, -1000, 4683, 117643, 117643, 91996,
	91996, 91996, 4242, -1000, -1000, -1000, -1000, -1000, -1000, 4213,
	76846, -1000, -1000, 4683, 4683, 4683, -1000, -1000, 255, 91996,
	-1000, 4104, -1000, -1000, -1000, -1000, 1631, -1000, 143, 143,
	143, 143, 143, -1000, -1000, 60751, 4683, 4596, 4596, -1000,
	4596, -1000, 4596, 4455, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4600, -1000, -1000, 773, -1000, -1000, 12190,
	768, 1707, 37172, 4632, -1000, -1000, -1000, -1000, 846, 846,
	37172, 37172, 37172, 846, 6503, -1000, -1000, 846, 846, -1000,
	-1000, 12135, -1000, 16278, -1000, 1537, 4130, -1000, 765, -1000,
	-1000, 757, 245, 91996, -1000, -1000, 37172, 42312, 4208, -1000,
	37172, 37172, 37172, -1000, -1000, 248, 242, 1160, -1000, -1000,
	-1000, -1000, 3379, 4128, -1000, -1000, 12079, 754, 2009, 16278,
	3358, 752, -1000, -1000, -1000, -1000, 3769, 37172, 3642, 3769,
	2619, 1707, 3838, 3707, 230, -1000, 91996, 3357, 16278, -1000,
	-1000, 4073, -1000, 1155, 37172, 46404, -1000, 1143, 91996, 227,
	-1000, 91996, 226, 222, 117643, 214, -1000, 4865, 3629, 41798,
	37172, 3832, -1000, 4726, 4726, 3810, -1000, 3590, 27379, 1139,
	4918, 3904, 91996, 2686, 2686, 3444, 91996, -1000, 74354, 2708,
	1567, 2462, -1000, 91996, 2823, 750, 1087, 91996, 4670, 91996,
	-1000, -1000, 1917, 4863, 46909, 80886, -1000, 212, -1000, 118130,
	-1000, 7283, -1000, 1784, -1000, 3527, 1819, 4203, 4171, 748,
	2071, 2068, 1875, 91996, 1470, 210, 73849, 4734, 4830, -1000,
	4563, 3908, 3908, 11518, 2622, 998, -1000, 91996, -1000, -1000,
	209, -1000, 91996, 2104, 747, 91996, 1560, 3152, 91996, 1470,
	-1000, 1137, 2560, 91996, 1135, 4677, 235, 429, 11223, 69337,
	4846, 4846, 91996, 27890, 1133, 1131, 1127, -1000, -1000, -1000,
	-1000, 2954, 2877, -1000, -1000, -1000, -1000, -1000, 2877, 2413,
	2877, 46909, 52529, -1000, 91996, 91996, -1000, 11101, -1000, 4732,
	4729, -1000, -1000, 1116, -1000, 4862, 4640, -1000, -1000, -1000,
	-1000, 91996, 91996, 2553, 525, 2553, 497, 91996, -1000, -1000,
	-1000, 4241, -1000, 91996, 63276, -1000, -1000, 4238, -1000, -1000,
	-1000, -1000, 2954, -1000, -1000, -1000, -1000, 2426, 52000, 51495,
	-1000, 3162, 1104, 1097, -1000, -1000, 1093, 10966, 91996, 91996,
	427, 432, 1922, 143, 3526, -1000, -1000, -1000, -1000, 4640,
	746, -1000, -1000, -1000, 60751, 60751, 3993, -1000, -1000, -1000,
	-1000, -1000, 91996, -1000, 267, -1000, -1000, -1000, -1000, -1000,
	4596, -1000, -1000, -1000, -1000, -1000, 91996, 16278, 38200, 846,
	846, 846, -1000, 2711, 37172, -1000, -1000, -1000, 10783, 2444,
	42312, 16278, 16278, 16278, -1000, 37172, -1000, 37172, -1000, -1000,
	-1000, 1828, -1000, -1000, 3443, 234, -1000, 4860, 743, 3992,
	37172, -1000, -1000, -1000, -1000, -1000, -1000, 3446, 3642, 742,
	-1000, 2839, -1000, 3844, 3873, 3814, -1000, 4171, 46909, -1000,
	1470, -1000, 91996, 16278, -1000, 37172, 206, -1000, 204, -1000,
	-1000, 1453, 55692, -1000, 1092, 91996, 193, -1000, 1777, 42312,
	10560, -1000, -1000, 3732, 37172, 3720, -1000, 3735, -1000, -1000,
	-1000, 4844, 4844, -1000, -1000, 4844, 4844, 3512, 4918, 188,
	-1000, 45889, 4171, -1000, 3444, 178, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3969, 1089,
	-1000, -1000, 3904, -1000, -1000, 3603, 3601, 2826, 2462, 1087,
	-1000, 1088, 1623, 1515, 1497, 1470, 177, 3910, 24838, 13477,
	-1000, -1000, 477, -1000, -1000, 117643, 4547, 3097, 1819, -1000,
	2614, -1000, -1000, -1000, 91996, 3694, -1000, 4676, 4675, -1000,
	-1000, 91996, 1761, -1000, 4663, 4662, 91996, -1000, 2850, -1000,
	2578, 3973, 2428, 1070, 37172, 3022, -1000, 27379, 1560, 91996,
	2826, 1087, -1000, 3441, 1560, 4670, 738, 69337, -1000, 4930,
	-1000, 46404, -1000, 4846, -1000, 2990, -1000, -1000, -1000, 69842,
	37172, 37172, 2708, 4674, 1080, 4674, 91996, 4674, -1000, -1000,
	1078, 3811, 1076, -1000, 4633, -1000, -1000, 37172, 2885, 3909,
	-1000, -1000, -1000, 1926, -1000, 1920, -1000, 91996, 2553, 438,
	91996, -1000, 1141, 3522, -1000, 117643, -1000, 117643, 117643, 37172,
	-1000, -1000, -1000, 91996, -1000, -1000, 91996, 91996, 91996, 91996,
	4683, -1000, 551, 445, 2161, 1560, 4683, -1000, 228, -1000,
	4845, 223, -1000, 16278, -1000, -1000, -1000, -1000, 29971, 1075,
	1074, 795, 726, 38714, 38714, 38714, 216, 37172, 2444, 175,
	173, -1000, 3354, 3410, 3427, 3432, 37172, 27379, -1000, 3504,
	16278, -1000, -1000, 717, 3990, -1000, -1000, -1000, 91996, 3842,
	3791, 66812, -1000, -1000, -1000, 172, 171, -1000, -1000, -1000,
	-1000, 91996, 150, -1000, 116182, 41798, 211, 27379, 2367, 3594,
	91996, 3710, 16278, 3728, 4127, 4918, 4918, 4918, 4918, 58731,
	4561, 58226, -1000, -1000, 27379, -1000, -1000, -1000, -1000, -1000,
	60246, -1000, 3969, -1000, 1896, 47414, 2708, 3444, -1000, -1000,
	2462, 3904, 3604, 4670, -1000, 1586, 1583, 4663, 2861, 1073,
	-1000, 2445, -1000, -1000, 3059, 1072, 2085, -1000, -1000, 4844,
	-1000, -1000, 2946, -1000, 2918, 2970, 2959, -1000, -1000, -1000,
	4843, 1099, 1919, -1000, 2828, -1000, 3989, 3988, 3797, -1000,
	-1000, -1000, -1000, 3524, 10426, 4841, 91996, -1000, -1000, 1560,
	2099, 3604, 91996, -1000, -1000, -1000, 1071, 147, -1000, 180,
	-1000, -1000, -1000, 144, -1000, 4906, 134, 133, 3908, 91996,
	3908, 1046, 3908, 52000, 1456, 3811, -1000, 10207, 1070, -1000,
	37172, 91996, 91996, -1000, -1000, 1898, -1000, 2407, 1978, 2407,
	130, 126, 115, 10125, 146, 146, 1922, -1000, 143, -1000,
	-1000, -1000, 4200, -1000, -1000, 91996, 1068, 38200, -1000, 37172,
	37172, 1066, -1000, 3067, -1000, 43340, 2540, 2287, 7212, 3067,
	3067, 16278, -1000, -1000, -1000, 3642, 3401, 3398, -1000, 3438,
	-1000, 3435, 3423, 3422, -1000, -1000, -1000, -1000, 3466, 436,
	4125, 4124, 424, 4840, 2334, 114, -1000, 91996, 3725, 3609,
	-1000, 43854, -1000, 3624, -1000, -1000, -1000, 3692, 3804, -1000,
	-1000, 3691, 1225, 3715, -1000, -1000, -1000, -1000, 131, -1000,
	57721, 131, -1000, -1000, 108, -1000, -1000, 1896, -1000, 107,
	-1000, 1130, 4633, 37172, 3969, 3904, 3444, 2462, -1000, -1000,
	-1000, -1000, 4687, 1062, 46909, -1000, 2560, 37172, -1000, -1000,
	-1000, 91996, 3094, 1527, -1000, -1000, 69337, 69337, 1470, 73849,
	91996, -1000, -1000, 3779, -1000, 3778, 2928, 2928, 2074, 1983,
	2426, -1000, -1000, 91996, 2098, 1560, 711, -1000, 4925, -1000,
	69842, -1000, -1000, 4235, -1000, 103, -1000, 2622, 4171, 710,
	-1000, 1456, -1000, -1000, 16278, 2553, 2553, 91996, -1000, -1000,
	-1000, 4123, -1000, 69337, -1000, -1000, -1000, 91996, 60751, -1000,
	-1000, -1000, 102, 92, 38200, -1000, 2237, 4721, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 698, 3976, 3974, -1000, -1000,
	3430, -1000, 3429, -1000, 3642, -1000, 91996, 91996, 91996, -1000,
	-1000, 91996, -1000, 1060, -1000, -1000, 3725, -1000, 42312, 42312,
	4557, -1000, 42312, -1000, 3525, 1054, -1000, 66812, -1000, -1000,
	3757, 91996, 3879, 1052, -1000, -1000, 131, -1000, -1000, 60246,
	-1000, -1000, 47414, 91996, 91996, 9916, 1896, 3444, 3969, 3904,
	4662, 46909, 84, 69337, 9795, -1000, -1000, 2279, -1000, -1000,
	-1000, 1307, -1000, -1000, -1000, -1000, -1000, 3789, 82, 61,
	4663, -1000, -1000, 3264, -1000, -1000, 4562, -1000, -1000, -1000,
	35, 1560, 91996, -1000, -1000, -1000, -1000, 1051, 2954, -1000,
	2954, 3973, -1000, -1000, -1000, -1000, -1000, 2553, 91996, -1000,
	-1000, 445, -1000, -1000, 81, 2261, -1000, -1000, 1672, 37686,
	-1000, 3385, 3383, -1000, -1000, 3970, 3925, 412, 393, -1000,
	37172, -1000, 2367, 2367, -1000, 2367, 3617, 91491, 6, 3349,
	78, -1000, 37172, -1000, -1000, -1000, -1000, 4633, -1000, 3969,
	1896, 3444, 1896, 43, -1000, 2861, 1047, -1000, 4547, 679,
	676, 392, -1000, -1000, 4234, 4191, -1000, -1000, 1046, 1046,
	-1000, 1560, 37172, -1000, 2954, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3381, 3375, 3490, 57216, 91996, 91996, 91996, 8558,
	91996, 36, -1000, 115695, 3599, 3865, 3756, 28, 91996, 1896,
	-1000, 3969, 4171, -1000, 46909, 4687, 26868, 3052, -1000, 1307,
	2064, 2053, -1000, -1000, -1000, 23, 2954, -1000, -1000, -1000,
	4631, 1199, -1000, -1000, -1000, -1000, -1000, 21, 3642, 91491,
	3607, 1954, 4924, -1000, -1000, -1000, 3757, -1000, -1000, -1000,
	1896, -1000, -1000, 4662, -5, -1000, -1000, -1000, -1000, -1000,
	2560, -1000, 4654, 4649, -1000, 57216, 37172, -1000, 666, -1000,
	-1000, 3443, 3596, 3596, 4923, 3709, 3347, -1000, 1896, -1000,
	26868, 69337, 2944, 2940, 3902, -31, -1000, 3410, 3443, 3642,
	-1000, 1040, 91996, 3865, 4171, -1000, 1039, 69337, 69337, 91996,
	603, 3642, 3410, -1000, 91491, 3613, -1000, -1000, 26868, -1000,
	-1000, -1000, 4918, -1000, 3642, -15, 545, -53, -1000, -1000,
	91491, -1000, -60, -1000,
}

var yyPgo = [...]int16{
	0, 5426, 5422, 3470, 142, 0, 25, 8964, 5421, 85,
	300, 378, 5420, 888, 327, 11559, 136, 93, 296, 385,
	5419, 5418, 5417, 5415, 51, 5414, 379, 5301, 11812, 10923,
	141, 5413, 313, 3290, 5412, 392, 308, 348, 5411, 214,
	5410, 5408, 172, 207, 5407, 289, 5404, 5401, 5399, 30,
	5397, 5395, 259, 176, 407, 442, 436, 438, 5394, 358,
	404, 360, 363, 365, 5392, 12483, 387, 3169, 12, 5391,
	5390, 612, 5389, 5387, 5384, 340, 5382, 272, 5381, 5378,
	5377, 5371, 16, 398, 416, 5369, 347, 5365, 5364, 5361,
	112, 5360, 5357, 5356, 5355, 281, 354, 333, 5354, 395,
	359, 287, 230, 13669, 15820, 5352, 388, 115, 484, 191,
	6533, 5351, 18557, 5350, 5349, 18546, 18183, 18167, 5348, 17402,
	17052, 190, 232, 279, 366, 375, 419, 298, 476, 1334,
	401, 24, 165, 400, 5346, 5345, 5344, 171, 5343, 5342,
	67, 65, 339, 5341, 5340, 88, 35, 61, 433, 403,
	5339, 5338, 437, 5337, 5335, 14515, 73, 205, 5334, 352,
	5333, 355, 357, 69, 59, 5332, 341, 275, 267, 53,
	278, 197, 62, 198, 350, 5331, 5330, 5329, 5328, 309,
	261, 70, 343, 458, 435, 113, 100, 43, 133, 5327,
	194, 183, 5322, 5321, 5320, 174, 5319, 5317, 5316, 5315,
	5314, 5313, 166, 5310, 5308, 5306, 163, 5305, 5304, 5300,
	21, 5299, 5298, 5297, 5296, 50, 48, 5295, 5294, 258,
	264, 277, 334, 5293, 336, 189, 7, 47, 180, 158,
	5292, 5289, 5288, 5287, 46, 99, 22, 5286, 5285, 5284,
	390, 5283, 443, 5281, 5280, 243, 322, 5279, 5278, 3482,
	543, 3508, 5277, 109, 201, 5274, 5273, 5272, 146, 5271,
	5270, 5269, 31, 60, 79, 5268, 37, 427, 368, 294,
	418, 45, 324, 452, 255, 5267, 440, 402, 397, 96,
	263, 14, 224, 193, 262, 5266, 250, 5264, 5262, 5262,
	432, 325, 253, 288, 151, 27, 19, 448, 5261, 431,
	5260, 5259, 5256, 5254, 330, 71, 91, 5253, 260, 5252,
	110, 5251, 5250, 108, 328, 29, 58, 5249, 49, 120,
	40, 154, 5248, 84, 326, 2, 17, 11, 5247, 541,
	5246, 86, 5244, 391, 270, 5243, 338, 271, 5242, 382,
	87, 4, 6, 5241, 1, 8, 5, 13, 265, 5239,
	68, 5236, 107, 5235, 235, 186, 129, 5234, 145, 5229,
	80, 55, 125, 5226, 5225, 5224, 138, 36, 5223, 130,
	5222, 192, 306, 5221, 5220, 5217, 33, 52, 122, 82,
	76, 54, 39, 103, 64, 5214, 5213, 41, 102, 5212,
	219, 63, 9, 89, 307, 105, 5211, 38, 23, 18,
	551, 1266, 389, 386, 5210, 304, 406, 409, 453, 3620,
	126, 396, 77, 221, 5209, 220, 5208, 42, 5207, 104,
	66, 178, 75, 74, 5206, 83, 216, 5205, 173, 459,
	5199, 305, 3901, 20675, 5196, 135, 346, 446, 97, 5195,
	5194, 227, 188, 5192, 5191, 5189, 57, 26, 20, 367,
	119, 477, 415, 417, 5188, 370, 5186, 5185, 5183, 161,
	159, 137, 5182, 131, 5181, 5181, 5181, 5178, 5176, 5175,
	5174, 5173, 5172, 5169, 411, 5166, 5165, 5163, 5162, 5159,
	5158, 5157, 5156, 5155, 5154, 5153, 5152, 5151, 5150, 5149,
	5148, 5147, 5145, 5144, 461, 456, 5143, 369, 5140, 467,
	361, 5139, 413, 5138, 139, 5137, 410, 362, 5136, 5135,
	5134, 374, 465, 425, 421, 5133, 182, 414, 72, 5131,
	90, 439, 10130, 199, 116, 94, 5130, 5129, 203, 797,
	5128, 202, 5126, 447, 292, 5125, 5124, 441, 155, 147,
	5123, 5121, 5120, 5118, 5117, 5116, 5115, 5114, 5113, 5112,
	5111, 5110, 5109, 5108, 5107, 5106, 5103, 5101, 5100, 5097,
	5096, 5095, 5093, 5092, 5090, 5089, 5083, 5082, 5081, 5080,
	5079, 5078, 5077, 5076, 5075, 5074, 5073, 5072, 5070, 5069,
	5067, 5066, 5064, 5063, 5062, 5061, 5060, 5059, 5058, 5057,
	5056, 5055, 5054, 5053, 5052, 5051, 5050, 5049, 5047, 5046,
	5040, 5039, 234, 229, 5037, 5036, 5035, 380, 376, 424,
	5032, 204, 302, 423, 211, 5031, 5031, 5030, 5025, 314,
	444, 222, 228, 124, 5024, 5023, 128, 5021, 5019, 5017,
	428, 5016, 445, 5014, 5010, 5008, 5005, 187, 127, 5004,
	98, 179, 422, 56, 5003, 5000, 225, 311, 123, 121,
	4997, 4995, 4994, 4992, 430, 213, 4991, 4988, 236, 117,
	4986, 297, 291, 455, 3133, 381, 449, 4985, 434, 4983,
	4241, 429, 4981, 231, 257, 118, 383, 4980, 111, 4979,
	4977, 319, 426, 215, 377, 4976, 4975, 81, 4974, 4971,
	247, 315, 4970, 4969, 4968, 4966, 4965, 4964, 3, 106,
	34, 10, 4962, 4960, 32, 4959, 4958, 295, 4955, 4954,
	399, 92, 95, 4953, 4952, 4950, 16086, 301, 4948, 4945,
	241, 4945, 15, 4944, 3548, 420, 4922, 78,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 19, 19, 398, 398, 432, 432, 432, 33, 33,
	34, 34, 35, 35, 36, 36, 49, 49, 49, 5,
	5, 5, 6, 6, 6, 6, 6, 8, 8, 7,
	13, 13, 14, 14, 62, 433, 433, 32, 32, 16,
	16, 18, 18, 717, 717, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 15, 15, 17, 17, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 713, 713, 713, 713, 713,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 101, 103, 102, 102, 102, 110, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 125, 125, 69, 69, 96, 96, 100,
	100, 99, 99, 99, 99, 97, 97, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	83, 83, 85, 85, 85, 85, 85, 86, 86, 86,
	87, 12, 12, 12, 12, 12, 12, 12, 12, 88,
	88, 89, 81, 90, 90, 221, 221, 91, 91, 91,
	92, 92, 92, 93, 93, 94, 94, 94, 94, 305,
	305, 305, 670, 670, 132, 132, 132, 132, 132, 132,
	132, 82, 82, 95, 95, 95, 72, 73, 73, 76,
	76, 75, 74, 74, 77, 77, 77, 80, 80, 130,
	130, 130, 78, 78, 79, 165, 165, 165, 158, 158,
	158, 158, 158, 158, 167, 167, 167, 167, 166, 166,
	166, 166, 166, 168, 168, 168, 168, 168, 129, 129,
	108, 108, 108, 108, 108, 108, 126, 126, 126, 109,
	109, 109, 109, 109, 109, 109, 109, 104, 104, 104,
	106, 107, 21, 122, 122, 123, 123, 111, 111, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	118, 118, 114, 114, 714, 714, 715, 715, 105, 105,
	105, 105, 105, 105, 115, 116, 119, 120, 117, 117,
	117, 117, 716, 127, 127, 127, 128, 128, 113, 113,
	155, 155, 157, 157, 159, 159, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 156, 156,
	131, 131, 136, 136, 133, 133, 162, 162, 161, 161,
	179, 179, 182, 182, 183, 183, 181, 181, 181, 181,
	181, 181, 181, 181, 148, 148, 149, 149, 150, 150,
	152, 153, 153, 153, 153, 151, 151, 154, 154, 154,
	184, 184, 184, 184, 184, 184, 184, 275, 275, 274,
	274, 277, 277, 277, 277, 278, 278, 279, 279, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 435, 435, 436, 436, 436, 437, 437, 437, 291,
	291, 291, 291, 291, 291, 292, 292, 292, 292, 293,
	293, 294, 294, 295, 295, 295, 296, 296, 297, 297,
	299, 300, 300, 300, 301, 301, 301, 302, 302, 302,
	303, 303, 281, 281, 224, 224, 224, 245, 284, 284,
	283, 283, 283, 283, 286, 286, 286, 286, 286, 285,
	285, 287, 287, 288, 288, 289, 289, 290, 290, 304,
	304, 313, 313, 309, 309, 310, 311, 311, 312, 312,
	675, 307, 307, 306, 306, 308, 319, 319, 321, 321,
	320, 320, 320, 320, 322, 322, 323, 323, 314, 314,
	315, 315, 316, 316, 316, 317, 317, 318, 318, 318,
	318, 318, 324, 329, 328, 328, 340, 340, 330, 330,
	331, 332, 332, 335, 335, 334, 334, 336, 336, 336,
	337, 337, 337, 338, 338, 333, 333, 339, 339, 342,
	342, 343, 343, 343, 343, 343, 343, 343, 343, 344,
	344, 344, 344, 341, 341, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 346, 346, 346, 346, 346, 347,
	347, 348, 348, 349, 349, 325, 325, 326, 326, 326,
	326, 326, 326, 327, 327, 185, 434, 434, 214, 214,
	214, 214, 214, 236, 236, 215, 215, 219, 186, 216,
	216, 222, 222, 220, 217, 217, 187, 298, 298, 188,
	218, 218, 189, 189, 239, 239, 240, 240, 246, 246,
	246, 255, 255, 256, 256, 258, 258, 259, 259, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 260, 260, 264, 265, 265, 265,
	265, 265, 265, 261, 261, 266, 271, 271, 271, 271,
	267, 267, 267, 267, 42, 42, 409, 409, 409, 409,
	409, 409, 409, 409, 408, 408, 408, 407, 407, 407,
	407, 407, 270, 270, 632, 632, 269, 269, 718, 718,
	659, 659, 241, 241, 242, 242, 243, 243, 244, 244,
	228, 228, 228, 228, 228, 237, 237, 238, 238, 229,
	229, 231, 232, 233, 233, 233, 233, 233, 226, 223,
	223, 223, 230, 230, 230, 263, 263, 234, 234, 234,
	235, 235, 227, 227, 163, 163, 163, 164, 164, 164,
	225, 225, 190, 190, 190, 190, 190, 190, 411, 411,
	411, 411, 411, 411, 411, 411, 350, 350, 351, 351,
	354, 354, 354, 357, 365, 365, 365, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 413, 413, 414,
	414, 415, 415, 416, 416, 352, 352, 353, 353, 358,
	358, 359, 359, 360, 360, 360, 360, 361, 364, 364,
	417, 417, 418, 418, 419, 10, 41, 355, 369, 369,
	370, 370, 370, 370, 373, 373, 373, 373, 376, 376,
	376, 421, 421, 424, 424, 426, 426, 426, 426, 422,
	422, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 719, 719, 37,
	37, 37, 420, 420, 423, 423, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 356, 356, 372, 372, 372,
	372, 372, 372, 372, 374, 374, 363, 363, 362, 362,
	378, 378, 377, 377, 377, 377, 382, 382, 382, 382,
	382, 379, 380, 381, 381, 381, 381, 381, 383, 383,
	384, 384, 385, 386, 386, 387, 387, 387, 412, 412,
	391, 391, 391, 391, 392, 392, 393, 393, 394, 191,
	191, 375, 375, 395, 395, 397, 397, 396, 396, 399,
	399, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 400, 400, 24, 24, 401, 401, 11, 522,
	522, 522, 522, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 403, 403, 403, 404, 405, 405,
	720, 720, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 546, 547, 547, 548, 548, 549,
	550, 550, 467, 467, 467, 467, 467, 467, 468, 468,
	469, 469, 462, 462, 462, 664, 664, 664, 667, 667,
	667, 667, 666, 666, 668, 668, 463, 464, 617, 617,
	618, 618, 466, 465, 616, 616, 721, 721, 470, 470,
	470, 470, 499, 499, 502, 503, 503, 503, 505, 505,
	505, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 471, 471, 475, 475, 500, 500, 501, 501, 506,
	504, 504, 472, 472, 472, 472, 472, 473, 473, 198,
	198, 198, 198, 198, 507, 507, 199, 199, 199, 508,
	508, 509, 509, 510, 510, 200, 201, 201, 201, 201,
	201, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 47, 47, 48, 48, 450, 98,
	98, 98, 98, 449, 84, 84, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 367, 367, 368, 368, 368, 368, 368, 368, 388,
	389, 389, 390, 390, 390, 390, 457, 457, 457, 457,
	671, 671, 672, 672, 673, 673, 673, 674, 674, 674,
	674, 674, 676, 676, 676, 676, 676, 677, 121, 121,
	121, 678, 678, 679, 679, 681, 681, 681, 681, 681,
	686, 686, 680, 680, 687, 687, 687, 461, 705, 705,
	688, 688, 669, 669, 459, 459, 689, 689, 689, 691,
	691, 690, 690, 690, 690, 690, 696, 696, 697, 697,
	699, 694, 694, 695, 695, 702, 692, 692, 723, 723,
	693, 693, 700, 700, 722, 722, 698, 698, 698, 701,
	701, 701, 701, 703, 703, 460, 460, 460, 460, 262,
	262, 704, 704, 704, 704, 540, 540, 540, 540, 541,
	542, 542, 542, 542, 611, 611, 614, 543, 543, 544,
	545, 551, 552, 552, 552, 552, 552, 552, 552, 553,
	553, 553, 553, 553, 553, 553, 553, 553, 553, 553,
	553, 553, 553, 553, 553, 557, 557, 602, 602, 558,
	558, 559, 559, 603, 603, 605, 605, 605, 605, 560,
	604, 604, 606, 561, 561, 561, 561, 561, 561, 561,
	561, 561, 561, 561, 561, 561, 582, 583, 583, 612,
	612, 612, 612, 608, 608, 607, 607, 623, 623, 584,
	584, 585, 585, 585, 619, 619, 620, 620, 621, 621,
	586, 586, 586, 586, 587, 535, 535, 536, 536, 588,
	588, 589, 590, 590, 622, 622, 654, 654, 654, 654,
	655, 655, 662, 656, 657, 657, 658, 556, 556, 556,
	556, 556, 600, 600, 601, 601, 660, 660, 661, 661,
	538, 538, 539, 196, 195, 195, 197, 443, 443, 443,
	444, 444, 446, 446, 446, 446, 446, 447, 447, 439,
	439, 439, 440, 440, 441, 438, 438, 438, 442, 442,
	445, 445, 445, 445, 665, 665, 665, 665, 665, 665,
	665, 665, 665, 665, 665, 663, 663, 663, 663, 273,
	273, 276, 276, 268, 268, 706, 706, 706, 706, 706,
	706, 706, 708, 708, 708, 272, 272, 9, 9, 9,
	9, 710, 710, 511, 511, 511, 707, 707, 707, 707,
	707, 709, 709, 709, 709, 512, 512, 410, 410, 410,
	410, 410, 410, 428, 428, 38, 38, 39, 40, 40,
	43, 43, 43, 43, 44, 44, 46, 46, 46, 46,
	429, 430, 430, 431, 431, 562, 562, 563, 627, 627,
	627, 627, 624, 624, 626, 625, 625, 564, 628, 628,
	565, 565, 566, 567, 629, 629, 633, 633, 634, 634,
	634, 634, 634, 635, 635, 636, 636, 637, 637, 638,
	638, 568, 639, 639, 569, 569, 570, 570, 641, 641,
	646, 646, 646, 571, 571, 571, 572, 572, 572, 572,
	642, 642, 647, 647, 647, 647, 647, 647, 647, 282,
	282, 573, 574, 574, 574, 574, 574, 574, 574, 574,
	574, 575, 575, 575, 640, 640, 640, 576, 650, 650,
	643, 643, 648, 648, 648, 648, 648, 630, 630, 711,
	711, 711, 712, 712, 577, 578, 578, 644, 644, 649,
	649, 579, 580, 645, 645, 645, 645, 581, 581, 631,
	631, 651, 651, 652, 652, 653, 653, 53, 53, 53,
	52, 52, 169, 169, 172, 172, 172, 172, 172, 175,
	176, 177, 178, 173, 173, 170, 171, 171, 174, 174,
	137, 137, 138, 138, 140, 142, 142, 142, 141, 143,
	143, 139, 139, 144, 144, 144, 144, 145, 145, 146,
	146, 146, 146, 146, 147, 147, 147, 147, 147, 55,
	55, 55, 55, 54, 54, 56, 56, 56, 56, 56,
	56, 57, 57, 58, 58, 59, 60, 60, 60, 61,
	61, 63, 63, 64, 64, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 477, 477, 724,
	724, 724, 495, 495, 495, 478, 484, 482, 479, 479,
	480, 480, 480, 480, 494, 494, 483, 481, 481, 481,
	481, 481, 481, 513, 513, 514, 514, 496, 496, 496,
	496, 496, 496, 497, 497, 497, 497, 497, 497, 497,
	497, 497, 537, 537, 485, 486, 486, 487, 487, 488,
	488, 489, 515, 515, 498, 498, 498, 527, 527, 527,
	520, 520, 520, 520, 520, 520, 516, 516, 516, 516,
	516, 517, 517, 521, 521, 521, 521, 521, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 518,
	518, 523, 523, 525, 525, 519, 519, 528, 526, 526,
	526, 524, 524, 50, 50, 45, 45, 51, 51, 134,
	135, 135, 458, 458, 458, 451, 451, 682, 682, 682,
	682, 682, 682, 682, 682, 682, 682, 682, 682, 682,
	682, 682, 682, 682, 684, 684, 683, 683, 683, 685,
	685, 685, 685, 685, 725, 725, 448, 448, 448, 448,
	452, 452, 453, 453, 554, 555, 454, 454, 455, 455,
	455, 455, 456, 456, 456, 456, 202, 247, 247, 247,
	247, 247, 247, 248, 248, 248, 203, 203, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 249, 249, 250, 250, 204, 204,
	205, 252, 252, 180, 180, 180, 180, 180, 206, 206,
	206, 253, 253, 254, 207, 207, 207, 207, 208, 209,
	209, 210, 20, 20, 211, 212, 22, 22, 23, 23,
	23, 23, 23, 23, 23, 23, 213, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 529, 529, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 530, 530, 531,
	531, 492, 532, 532, 533, 533, 493, 591, 591, 591,
	591, 591, 591, 591, 591, 591, 591, 591, 591, 591,
	591, 591, 591, 591, 591, 591, 591, 591, 591, 591,
	591, 591, 591, 591, 592, 592, 592, 592, 592, 592,
	592, 592, 592, 592, 592, 592, 592, 592, 592, 592,
	592, 592, 592, 592, 592, 592, 592, 592, 593, 594,
	594, 594, 594, 594, 594, 26, 26, 595, 596, 596,
	596, 596, 609, 609, 610, 610, 613, 613, 613, 615,
	615, 615, 615, 615, 615, 615, 726, 726, 597, 598,
	598, 598, 598, 598, 598, 727, 727, 599, 25, 25,
	25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 2, 3, 0, 1,
	3, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 3, 4, 4, 6, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 1, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 5, 6, 3,
	4, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 6,
	2, 3, 5, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 3, 1,
	5, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 6, 4, 4, 4, 4, 5, 7, 7, 9,
	4, 6, 5, 5, 7, 7, 4, 7, 4, 6,
	6, 4, 5, 4, 5, 3, 11, 8, 9, 8,
	1, 0, 5, 5, 3, 3, 5, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	5, 3, 4, 1, 3, 3, 1, 2, 2, 0,
	1, 2, 0, 2, 3, 3, 3, 4, 0, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	2, 3, 5, 6, 2, 3, 3, 4, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 0, 2, 3, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 2, 4, 1, 5, 2, 5, 2,
	5, 2, 1, 3, 3, 0, 1, 0, 3, 0,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 0, 5, 0, 5, 0, 0, 1, 1, 3,
	1, 1, 3, 3, 1, 1, 1, 2, 4, 4,
	2, 3, 5, 5, 1, 3, 1, 0, 1, 2,
	3, 2, 4, 2, 3, 2, 0, 1, 2, 0,
	9, 9, 2, 1, 4, 4, 4, 1, 0, 1,
	3, 3, 2, 1, 1, 2, 0, 1, 3, 2,
	3, 2, 3, 1, 4, 2, 3, 2, 3, 2,
	3, 1, 1, 2, 2, 4, 1, 2, 3, 3,
	4, 5, 4, 5, 4, 2, 2, 2, 1, 1,
	0, 5, 2, 2, 2, 3, 1, 0, 1, 3,
	9, 1, 2, 0, 7, 7, 0, 10, 6, 0,
	4, 5, 2, 0, 2, 4, 0, 1, 1, 0,
	5, 2, 4, 1, 1, 4, 5, 4, 0, 2,
	0, 1, 0, 1, 5, 1, 1, 2, 0, 2,
	6, 2, 0, 1, 3, 2, 4, 0, 1, 3,
	2, 1, 0, 1, 3, 3, 2, 0, 2, 2,
	2, 3, 3, 4, 1, 3, 3, 2, 7, 12,
	1, 3, 2, 3, 3, 1, 2, 2, 2, 2,
	1, 2, 13, 2, 2, 0, 2, 0, 1, 3,
	3, 1, 3, 1, 3, 3, 3, 3, 3, 0,
	3, 3, 0, 3, 0, 7, 7, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 6, 0, 3, 0, 2, 3, 2, 3, 4,
	4, 3, 3, 0, 5, 2, 5, 2, 0, 4,
	2, 1, 0, 1, 0, 1, 3, 3, 6, 7,
	5, 7, 9, 2, 0, 7, 1, 3, 1, 4,
	4, 7, 2, 1, 1, 1, 3, 2, 8, 1,
	3, 3, 5, 2, 1, 3, 7, 2, 0, 10,
	1, 2, 9, 11, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 3, 0, 1, 3, 2, 0, 1,
	1, 3, 3, 1, 1, 3, 3, 3, 3, 4,
	4, 3, 3, 2, 1, 3, 2, 1, 1, 1,
	1, 3, 0, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 0, 2, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	4, 4, 4, 5, 5, 2, 5, 3, 5, 2,
	0, 3, 1, 2, 5, 5, 8, 3, 4, 8,
	5, 0, 4, 3, 0, 1, 3, 2, 2, 4,
	4, 5, 2, 0, 1, 1, 0, 2, 2, 0,
	2, 0, 13, 16, 12, 15, 14, 17, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	0, 2, 2, 1, 0, 3, 0, 1, 3, 1,
	1, 2, 4, 6, 6, 10, 1, 2, 1, 3,
	4, 0, 1, 3, 2, 1, 1, 6, 2, 0,
	3, 1, 1, 2, 1, 2, 2, 2, 2, 3,
	0, 1, 2, 1, 2, 1, 3, 2, 3, 1,
	2, 2, 2, 1, 2, 3, 1, 2, 2, 2,
	2, 3, 3, 3, 1, 3, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 0, 2, 1, 4, 4,
	5, 2, 5, 5, 7, 3, 1, 5, 9, 3,
	9, 4, 11, 10, 2, 0, 1, 3, 3, 6,
	4, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 3, 3, 4, 0,
	1, 0, 6, 1, 3, 3, 3, 5, 2, 0,
	3, 4, 4, 0, 2, 0, 4, 0, 3, 16,
	19, 1, 0, 2, 0, 4, 0, 1, 3, 2,
	0, 4, 6, 4, 6, 4, 4, 6, 4, 6,
	5, 7, 5, 7, 4, 6, 10, 13, 10, 13,
	11, 14, 1, 3, 1, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 5, 3, 6, 4, 6, 6,
	9, 5, 7, 6, 6, 5, 5, 5, 5, 9,
	4, 5, 7, 6, 4, 8, 4, 2, 4, 3,
	6, 4, 3, 3, 3, 2, 2, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 4, 4, 3, 2,
	3, 2, 2, 3, 4, 3, 2, 2, 3, 4,
	4, 4, 5, 1, 4, 4, 4, 3, 3, 2,
	1, 0, 6, 4, 6, 4, 6, 8, 4, 6,
	4, 6, 5, 7, 9, 7, 9, 7, 9, 8,
	4, 6, 4, 6, 4, 6, 4, 6, 4, 6,
	4, 6, 2, 3, 3, 2, 5, 1, 1, 2,
	3, 2, 1, 1, 2, 1, 2, 4, 1, 1,
	1, 1, 10, 4, 1, 1, 1, 1, 2, 4,
	3, 5, 1, 3, 2, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 3, 5, 1, 0, 1, 3, 2,
	1, 1, 2, 3, 4, 3, 2, 4, 4, 6,
	4, 4, 2, 5, 2, 0, 5, 5, 5, 1,
	1, 1, 1, 3, 0, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	3, 3, 3, 3, 3, 2, 1, 3, 2, 3,
	5, 5, 5, 2, 1, 3, 6, 6, 6, 6,
	6, 8, 8, 6, 6, 7, 9, 9, 8, 10,
	6, 6, 6, 6, 6, 6, 6, 8, 6, 8,
	6, 8, 7, 9, 6, 8, 7, 9, 8, 10,
	8, 10, 9, 11, 8, 10, 9, 11, 8, 8,
	7, 6, 6, 6, 6, 8, 8, 8, 8, 6,
	9, 0, 2, 2, 1, 2, 2, 2, 2, 3,
	1, 3, 3, 1, 5, 3, 9, 12, 7, 7,
	3, 2, 1, 3, 1, 3, 3, 3, 3, 2,
	2, 1, 1, 1, 1, 2, 1, 1, 1, 4,
	5, 1, 0, 1, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 5, 1, 4, 0, 2, 3, 0,
	1, 1, 2, 1, 17, 21, 1, 1, 2, 1,
	3, 1, 1, 1, 3, 1, 2, 0, 1, 2,
	4, 1, 1, 1, 1, 1, 3, 0, 1, 0,
	1, 1, 4, 0, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 2, 0, 9, 11, 12, 14, 3,
	0, 3, 4, 4, 0, 6, 4, 9, 7, 5,
	3, 5, 7, 9, 1, 3, 1, 3, 5, 5,
	6, 6, 4, 6, 6, 5, 7, 9, 6, 6,
	5, 4, 4, 3, 6, 6, 6, 6, 4, 7,
	5, 8, 7, 8, 6, 5, 8, 1, 0, 4,
	6, 5, 8, 2, 0, 2, 2, 2, 1, 5,
	2, 0, 2, 6, 6, 6, 10, 6, 6, 6,
	9, 9, 6, 6, 9, 6, 7, 7, 6, 2,
	2, 2, 2, 1, 2, 1, 0, 1, 2, 10,
	13, 5, 4, 4, 2, 0, 2, 2, 1, 0,
	11, 14, 12, 15, 11, 4, 0, 2, 1, 8,
	11, 8, 7, 9, 1, 1, 3, 3, 5, 6,
	1, 3, 1, 3, 1, 3, 3, 7, 9, 9,
	8, 6, 1, 0, 1, 3, 3, 1, 5, 3,
	8, 11, 6, 8, 7, 10, 13, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 0, 1, 0, 5, 2, 3, 0, 2, 0,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 1, 3,
	1, 2, 2, 2, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3, 11, 13, 5, 1, 2,
	2, 1, 1, 3, 5, 1, 3, 7, 2, 0,
	5, 5, 10, 8, 2, 0, 2, 0, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 0, 5,
	0, 8, 1, 1, 8, 11, 6, 8, 1, 3,
	1, 1, 3, 4, 7, 6, 5, 5, 5, 5,
	1, 3, 4, 4, 4, 3, 4, 3, 1, 4,
	0, 8, 5, 5, 6, 7, 7, 7, 4, 4,
	5, 11, 10, 10, 2, 2, 0, 13, 2, 0,
	1, 3, 5, 5, 3, 6, 2, 1, 0, 2,
	4, 0, 1, 3, 6, 8, 8, 1, 3, 5,
	5, 10, 10, 11, 11, 5, 5, 6, 10, 1,
	0, 2, 0, 1, 0, 2, 2, 1, 1, 0,
	4, 0, 1, 3, 1, 1, 1, 1, 1, 2,
	4, 4, 5, 2, 0, 3, 1, 3, 4, 3,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 3, 3, 3, 0, 1, 4, 2,
	2, 2, 2, 2, 3, 2, 2, 3, 0, 2,
	2, 1, 1, 1, 0, 2, 4, 5, 6, 4,
	5, 2, 3, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 2,
	3, 2, 5, 4, 3, 3, 3, 3, 3, 1,
	1, 0, 2, 3, 0, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 0, 3, 6, 3, 5, 3,
	5, 3, 5, 2, 0, 2, 0, 1, 2, 2,
	2, 3, 3, 2, 2, 3, 3, 1, 1, 3,
	3, 2, 1, 1, 8, 8, 11, 5, 7, 6,
	9, 5, 2, 0, 3, 3, 3, 7, 7, 10,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	5, 1, 3, 2, 2, 2, 2, 2, 1, 2,
	2, 4, 3, 2, 2, 2, 2, 2, 2, 3,
	2, 2, 2, 2, 5, 5, 5, 5, 5, 1,
	3, 1, 2, 3, 0, 3, 1, 2, 1, 1,
	1, 3, 0, 1, 3, 1, 3, 1, 3, 6,
	4, 0, 5, 5, 5, 1, 2, 4, 5, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 2, 1, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 2,
	1, 3, 1, 3, 7, 4, 1, 3, 4, 6,
	4, 8, 1, 1, 1, 1, 7, 2, 2, 2,
	2, 3, 0, 2, 2, 0, 2, 2, 1, 2,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 4,
	4, 3, 4, 4, 1, 1, 1, 0, 2, 2,
	5, 3, 0, 1, 1, 1, 1, 1, 3, 9,
	12, 3, 0, 6, 2, 3, 2, 3, 2, 2,
	2, 3, 2, 0, 2, 5, 3, 0, 2, 2,
	2, 3, 1, 3, 1, 2, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 8, 9, 8, 6, 6,
	9, 9, 9, 7, 10, 1, 1, 8, 8, 8,
	8, 8, 8, 8, 9, 8, 8, 2, 0, 1,
	1, 2, 1, 2, 1, 2, 2, 6, 6, 6,
	6, 6, 6, 6, 9, 9, 6, 6, 6, 8,
	6, 8, 8, 8, 8, 6, 8, 6, 8, 7,
	9, 7, 9, 6, 6, 6, 6, 6, 6, 6,
	7, 7, 6, 9, 9, 6, 6, 6, 6, 6,
	6, 8, 8, 8, 6, 7, 6, 6, 7, 8,
	8, 8, 10, 9, 8, 1, 0, 5, 5, 4,
	6, 6, 1, 0, 1, 2, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 4, 11,
	11, 11, 13, 9, 11, 1, 1, 6, 2, 2,
	0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -477, -179, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, -457, -458, -459,
	-460, -538, -539, -195, -196, -197, -540, -541, -542, -543,
	-544, -546, -547, -548, -549, -550, -545, -551, -552, -553,
	-554, -555, -556, -557, -558, -559, -560, -561, -582, -583,
	-584, -585, -586, -587, -588, -589, -590, -562, -563, -564,
	-565, -566, -567, -568, -569, -570, -571, -572, -573, -574,
	-575, -576, -577, -578, -579, -580, -581, -462, -463, -464,
	-467, -468, -469, -476, -478, -479, -480, -481, -482, -483,
	-484, -485, -486, -487, -488, -489, -470, -471, -475, -472,
	-473, -198, -199, -200, -201, -202, -203, -204, -205, -206,
	-207, -208, -209, -210, -211, -212, -213, -490, -491, -492,
	-493, -591, -592, -593, -594, -595, -596, -597, -598, -599,
	266, 212, -181, -182, -296, 111, 26, 22, 27, 394,
	390, 302, 93, 401, 191, 436, 228, 407, 413, 397,
	378, 290, 405, 274, 475, -504, 428, 223, 395, 220,
	259, 250, 280, 345, 222, 273, 249, 328, 472, 358,
	329, 333, 462, 226, 418, 109, 214, -184, -183, -295,
	531, 119, 203, 63, 67, -303, 36, 518, 86, 540,
	-724, 486, 457, -724, 96, 97, 98, 99, 531, -255,
	115, -411, -375, -35, 33, 414, 247, 261, 62, 464,
	454, 225, 276, 284, 422, 103, -440, 202, 268, 449,
	375, 194, 438, 387, 443, 512, -630, 406, 71, 453,
	451, 58, 289, 473, 471, 40, 67, 307, 419, 480,
	85, 284, 104, 199, 225, 236, 247, 261, 286, 71,
	-632, 62, 375, 385, 387, 409, 414, 422, 443, 412,
	460, 268, 406, 103, 449, 438, 454, 464, 276, 40,
	322, 384, -406, -409, -408, 464, 261, 307, 512, 62,
	458, 443, 286, 385, 409, 199, 247, 449, 364, 103,
	406, 71, 67, 419, 480, 85, 284, 225, 236, 438,
	454, 194, 268, 276, -632, 387, 414, 422, 375, 412,
	460, 85, 364, 284, -664, 58, 423, 233, 457, -665,
	-663, -273, 56, 217, 414, 347, 406, 488, -5, 4,
	-27, -28, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 22, 201, 204, 202, 205, 55, 206, 207,
	208, 210, 211, 212, 88, 70, 213, 214, 215, 24,
	216, 218, 219, 220, 221, 222, 223, 123, 226, 227,
	228, 229, 230, 141, 231, 101, 232, 234, 235, 236,
	111, 237, 154, 238, 120, 121, 90, 246, 247, 248,
	249, 250, 251, 253, 254, 98, 149, 150, 255, 89,
	256, 257, 258, 259, 260, 261, 176, 27, 262, 138,
	264, 148, 265, 267, 136, 42, 268, 270, 271, 272,
	273, 274, 275, 276, 277, 279, 281, 282, 91, 283,
	153, 165, 285, 286, 287, 288, 289, 291, 294, 295,
	151, 296, 297, 298, 28, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 312, 313, 314,
	96, 315, 317, 318, 145, 503, 319, 320, 321, 322,
	92, 324, 327, 328, 329, 332, 333, 334, 335, 336,
	337, 105, 85, 338, 99, 340, 341, 342, 343, 344,
	345, 346, 131, 348, 349, 350, 351, 352, 353, 354,
	357, 110, 358, 359, 32, 139, 122, 504, 505, 502,
	144, 62, 506, 507, 124, 501, 508, 102, 364, 365,
	366, 367, 368, 369, 370, 129, 371, 128, 373, 374,
	375, 377, 378, 379, 380, 382, 383, 384, 385, 386,
	112, 387, 152, 143, 388, 389, 390, 391, 84, 132,
	393, 394, 395, 396, 397, 398, 399, 34, 400, 401,
	402, 35, 403, 404, 405, 407, 408, 409, 410, 127,
	412, 413, 146, 415, 416, 87, 417, 418, 419, 420,
	421, 422, 93, 425, 427, 428, 429, 430, 431, 107,
	433, 434, 435, 436, 437, 438, 113, 114, 439, 440,
	441, 147, 442, 443, 445, 446, 104, 448, 449, 108,
	451, 452, 453, 454, 455, 458, 460, 462, 463, 464,
	465, 466, 467, 468, 142, 469, 50, 472, 473, 474,
	97, 475, 476, 477, 478, 155, 183, 479, 480, 481,
	482, 483, 485, 168, 486, 140, 487, 498, 499, 57,
	37, 173, 169, 189, 179, 178, 224, 188, 187, 29,
	278, 175, 292, 293, 500, 186, 171, 185, 166, 160,
	162, 163, 159, 161, 156, 164, 158, 126, 157, 325,
	339, 181, 182, 355, 356, 360, 170, 361, 362, 376,
	177, 174, 411, 426, 172, 444, 184, 459, 461, 86,
	180, 489, 490, 491, 492, 493, 133, 494, 495, 496,
	497, 125, -667, -666, 56, 457, 423, -273, 21, 217,
	233, 58, 347, 406, 414, 488, -724, 457, -724, 379,
	-724, 379, -5, 423, 457, 56, 413, -5, 457, -7,
	-5, -516, -517, 21, -521, 63, 392, 26, 22, -5,
	-516, 290, -517, -5, -474, -504, 118, 531, -179, -185,
	-186, -187, -188, -202, -195, -538, -539, -206, 26, -244,
	531, 79, -242, 531, 118, -273, 56, 457, 423, 21,
	531, -242, -510, 531, 21, 451, 453, 374, 420, -245,
	-7, -251, -245, -249, 349, 382, 91, 92, 193, 396,
	-102, 21, 285, 210, 64, 45, -101, 534, 535, 12,
	-251, -245, 21, -7, -7, 378, 21, -5, -5, 536,
	-5, -21, -103, 7, -717, 67, -717, 74, 320, -532,
	-533, -103, 321, -132, -670, -104, -5, 4, -27, -29,
	209, 115, 225, 25, 81, 242, 116, 79, 44, 76,
	52, 53, 75, 77, 46, 82, 54, 80, 363, 78,
	48, 450, 118, -170, -131, 470, 316, 269, 509, -183,
	-184, -182, -181, -182, -295, -287, -288, 21, 41, -435,
	-433, -436, -5, 66, 541, -297, 84, -299, -7, -297,
	531, -3, -495, 30, -512, -511, -707, 318, 389, 252,
	31, 73, -437, -435, 64, 73, -180, -179, -185, -186,
	-187, -188, -433, 67, 480, 84, 419, 307, 286, 385,
	460, 117, 199, 412, 458, -631, 463, 34, -19, -5,
	28, -7, -15, -5, -156, 221, 279, -159, -5, 11,
	-160, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -15, 87, -15, 28, -7, 28, 246,
	67, -7, 28, 336, -11, -522, -9, 241, 245, 424,
	4, -27, -28, -29, 85, -15, 460, -7, -7, 340,
	-398, 28, -15, -7, -7, 531, 236, -11, -11, 453,
	451, 453, 451, -435, 28, 21, -433, 28, 21, -433,
	28, -433, 28, 480, 67, 246, 93, 401, -449, -670,
	-15, -15, -7, -15, -448, -670, -29, -5, -11, -522,
	321, 221, 279, -450, -156, -7, 28, -448, -7, -448,
	-7, -7, -7, -7, -7, 460, -11, -522, 21, -11,
	336, -522, 21, -7, -15, 28, 87, -15, -7, 383,
	139, 28, -17, -15, 28, -13, -7, -7, 28, -270,
	28, -108, -109, 426, -111, -112, -118, -114, -117, -110,
	-716, -104, 186, 171, 172, 173, 174, 175, 176, 187,
	188, 170, 189, -119, -120, -115, -116, 184, 56, 185,
	166, 4, -27, 169, -105, 178, 179, 180, 181, 182,
	-270, 28, 25, -33, 28, 221, 279, -453, 28, -450,
	-33, -7, 28, -452, 28, -448, -452, 28, -452, 28,
	-84, 28, -449, -7, 28, -7, 28, 70, 336, -401,
	28, -522, -401, 28, -401, 28, 480, 246, 67, 87,
	340, 460, 321, 480, 70, 414, -664, 423, -664, 219,
	209, -617, 21, -16, -433, -511, 431, 64, 61, 527,
	533, 57, -103, -103, -708, -103, 40, -272, -9, -103,
	506, 57, 318, 209, -495, -512, -495, -103, -495, 61,
	-103, -5, -103, -252, 531, 74, 61, 541, 383, 531,
	-262, 531, -262, -262, 104, -262, 74, 506, 64, 506,
	-242, -474, -499, -502, -503, 86, -9, -504, 515, -411,
	-241, 116, -499, -500, -501, -506, -433, -499, 57, 318,
	209, -499, -433, -7, -5, -508, 414, -509, 307, 67,
	104, 247, -499, -247, -245, -250, -249, -250, -250, -250,
	-102, -102, -250, -250, -250, -102, 21, -250, -102, 21,
	-101, -101, -253, 531, -7, 21, -20, 541, -18, -435,
	-18, -406, 514, -407, 464, 261, 199, 286, 62, 117,
	-408, 385, 409, 458, 322, 512, 307, -409, 247, 406,
	443, 449, -530, 130, -533, -272, 531, -96, -99, 533,
	529, -148, -55, -150, 130, -56, -57, -152, 68, 280,
	69, -153, -53, 21, 41, -53, -53, 70, -170, -131,
	532, 532, -275, -274, -277, -65, 536, -67, 534, 535,
	-155, 31, 516, -130, 471, 40, -69, -68, 13, 531,
	-72, -70, -182, 29, 134, -78, -79, 293, 11, 62,
	411, -5, -101, 6, -103, 49, 43, 47, 9, 10,
	-670, -713, -110, 38, -132, -333, -71, -112, -714, -715,
	-117, -716, 185, 161, 162, 225, 240, 243, 244, 330,
	331, 241, 245, 424, 447, 103, 239, 242, 512, 278,
	356, 362, 376, 444, 459, 461, 360, 224, 292, 325,
	490, 491, 493, 494, 492, 495, 496, 159, 160, 166,
	164, 158, 339, 156, 163, 157, 497, 173, 169, 189,
	179, 178, 188, 187, 175, 186, 171, 181, 182, 170,
	174, 172, 56, 184, 180, -119, -120, -115, -116, -274,
	74, 536, -96, -433, 531, 531, 541, -297, -32, 531,
	-129, -65, 218, 354, 541, -707, 327, 66, 487, 252,
	-434, -433, 93, -5, 23, -437, -437, 532, -262, -433,
	28, -254, -433, 480, -433, 28, -36, 25, -670, -670,
	-7, 460, -670, -7, 130, -632, -411, 473, 209, -442,
	31, -37, 36, 518, -659, 23, -122, 533, -429, 531,
	-15, -15, 533, -429, 23, 368, 257, 452, 231, -429,
	64, 31, -37, 31, 140, -433, 28, -619, 464, 31,
	130, 28, -37, 480, 513, -7, -628, 365, 74, -7,
	-32, 31, -428, 130, 36, 232, -108, -15, -37, -37,
	-400, -403, 398, 93, -402, 207, 256, 196, 22, 27,
	477, 223, 264, 258, 309, 354, 122, 31, 365, 401,
	400, 153, -39, 507, 29, 45, -400, -404, 398, -26,
	207, 354, 93, 29, 45, -400, 398, -422, 93, -425,
	354, 23, 213, 90, 305, 335, 338, 342, 364, 419,
	436, 402, 473, 29, -400, 398, 93, 29, -433, 28,
	21, -435, 28, 140, -663, -273, -666, 398, 93, 365,
	-654, 531, 398, 93, 365, 394, 398, 93, 365, 398,
	365, 36, -609, 93, 394, -668, -610, -463, -613, -615,
	4, 232, 148, 332, 449, 452, 398, -405, 27, 93,
	196, 477, 365, 398, -451, 93, 365, -26, -682, 354,
	215, 404, 441, 300, 434, 482, 277, 418, 324, 31,
	237, 127, 445, -669, 366, -463, -47, 531, -96, 398,
	-537, 196, 27, -7, -15, -15, 93, 365, -98, 531,
	74, 29, 398, -451, 93, 365, -26, 398, 93, 196,
	27, 365, 398, -451, 93, 365, -26, 398, 365, 398,
	-620, -39, 365, 479, 398, 93, 232, 394, 196, 27,
	264, 258, 430, 365, 74, 74, -7, 398, -37, -494,
	45, -494, 398, 130, -37, -494, -494, 398, 93, 401,
	365, 398, 93, 365, 29, 368, 257, 452, 231, 398,
	196, 27, 93, -454, 365, -455, 22, 97, -537, 93,
	-515, -267, 6, 534, 535, -102, 29, 541, -432, 24,
	35, 29, 541, -432, 74, 29, 541, -432, 29, -126,
	134, -109, -124, 531, 498, 344, 248, 297, 341, -125,
	417, -123, -122, 531, -113, 531, 177, -123, -123, -123,
	531, -127, 518, 519, 531, -127, -128, 183, 531, -128,
	-128, 178, 179, -128, -432, 29, -17, 28, 531, 29,
	-15, 28, -15, 28, -432, 541, 29, 130, -432, 29,
	-432, 541, 29, -432, 29, -432, 29, -432, 541, 29,
	-37, 29, 29, -401, 130, 28, 541, 29, 29, 29,
	140, 368, 257, 452, 231, -36, -401, -7, 219, 23,
	-272, 40, -618, 253, 299, 541, -103, 120, -276, 40,
	-268, -271, -267, 49, 43, 74, -272, -276, 40, -5,
	-706, -103, 4, -110, -267, 40, 58, -710, 260, 234,
	327, 413, -5, 23, -712, -108, -534, -16, 67, 419,
	284, 286, 385, 409, 247, 261, 321, 322, 367, 414,
	449, 464, 21, -401, -521, 531, -14, -62, -5, -14,
	-534, 130, -401, 130, -474, 532, 541, -505, -271, -267,
	67, -242, 532, 541, -32, 532, 327, 532, -507, 83,
	74, -36, -36, -36, 532, 121, 115, 314, 204, 416,
	354, -245, -245, -245, -245, -250, -250, -245, -245, -245,
	-250, -250, -245, -250, -250, -129, -103, 541, -22, 45,
	-25, 235, 402, -15, -15, -7, -108, -108, -449, -448,
	-450, 221, 279, -7, -7, -448, -448, 130, 139, 531,
	74, -272, 532, 536, -82, 190, 21, 41, -95, -65,
	-107, -104, -99, -106, 536, -6, 4, -27, -28, -29,
	-30, 21, 203, 119, 30, 510, 134, 23, 94, 60,
	511, 38, 512, 513, 39, 514, 117, 26, 239, 240,
	241, 243, 244, 245, 40, 252, 95, 41, 109, 263,
	266, 269, 43, 280, 130, 284, 64, 290, 71, 72,
	45, 311, 316, 73, 323, 326, 68, 330, 331, 31,
	47, 69, 74, 66, 33, 509, 372, 381, 392, 100,
	63, 424, 432, 59, 447, 67, 106, 61, 456, 49,
	470, 471, 103, 83, 190, 51, 65, 484, 36, -65,
	-100, -54, -55, -149, -148, -152, 130, 389, 97, 354,
	427, 503, -57, -56, -58, -65, 21, -64, 91, 349,
	-59, -60, -65, -67, 534, 535, -151, 122, -183, -183,
	-183, -171, -174, -65, -148, -55, -290, 73, 541, 14,
	39, 55, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -155, 30, 33, 46, 516, 44,
	48, 52, 53, 54, 37, 45, -158, 23, -8, 11,
	62, -159, 4, -31, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 21, 200, 22, 201, 203, 119, 510,
	94, 204, 202, 205, 60, 206, 207, 208, 209, 210,
	211, 212, 173, 115, 169, 189, 511, 88, 70, 213,
	214, 215, 24, 216, 38, 512, 217, 218, 219, 513,
	220, 221, 222, 223, 224, 225, 514, 123, 226, 227,
	228, 229, 230, 25, 141, 231, 101, 232, 117, 233,
	234, 235, 236, 111, 237, 81, 154, 238, 120, 239,
	240, 241, 242, 243, 244, 245, 121, 90, 246, 247,
	249, 188, 187, 250, 40, 251, 252, 253, 254, 98,
	149, 150, 255, 89, 95, 256, 257, 258, 259, 41,
	109, 260, 261, 176, 27, 262, 263, 138, 264, 148,
	265, 266, 267, 136, 42, 268, 270, 271, 272, 273,
	29, 274, 275, 276, 277, 278, 43, 279, 282, 91,
	175, 283, 153, 284, 165, 285, 116, 79, 286, 287,
	288, 289, 291, 292, 293, 294, 295, 151, 296, 298,
	28, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 76, 500, 313, 314, 96,
	315, 186, 171, 185, 317, 318, 75, 166, 160, 162,
	163, 159, 161, 156, 164, 158, 126, 157, 145, 503,
	319, 320, 321, 322, 92, 323, 326, 324, 325, 77,
	327, 328, 329, 58, 330, 331, 332, 333, 334, 335,
	336, 337, 105, 85, 338, 99, 339, 340, 342, 343,
	345, 346, 347, 181, 82, 182, 131, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 31, 110, 358,
	359, 47, 360, 32, 170, 139, 122, 504, 505, 502,
	144, 66, 506, 507, 124, 501, 361, 80, 362, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 174, 390, 391, 84, 132, 392, 393, 394, 395,
	396, 397, 398, 399, 34, 400, 401, 402, 35, 403,
	404, 405, 78, 406, 407, 408, 409, 410, 411, 127,
	412, 413, 146, 414, 415, 416, 87, 418, 63, 419,
	420, 421, 422, 423, 424, 93, 426, 425, 427, 428,
	429, 430, 172, 431, 432, 107, 433, 434, 435, 436,
	437, 438, 113, 114, 439, 440, 441, 147, 442, 443,
	444, 445, 59, 446, 104, 447, 67, 448, 450, 449,
	108, 451, 452, 453, 454, 106, 455, 56, 184, 456,
	457, 458, 459, 460, 461, 49, 462, 463, 464, 465,
	466, 467, 468, 142, 469, 471, 50, 472, 473, 474,
	97, 103, 83, 475, 476, 477, 478, 155, 86, 180,
	190, 118, 479, 480, 481, 482, 51, 483, 486, 140,
	487, 488, 489, 490, 491, 492, 493, 133, 494, 495,
	496, 497, 125, 499, 57, -65, -65, -65, -65, -65,
	363, -376, 32, -97, -65, -129, -182, -96, -182, -182,
	-77, 529, 531, 531, 531, -96, -103, 531, -103, -103,
	531, -73, -65, -136, 485, -133, 281, 531, 531, 130,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, -290, 531, -433, -129, -299, 23, -13,
	541, 532, 39, 55, 30, 33, 46, 44, 48, 52,
	37, 45, 62, 218, -707, -709, 389, 399, 421, -214,
	-179, 102, 531, 40, 23, -216, -222, -220, 531, -5,
	-5, -298, 83, 83, 61, -239, 64, 61, 531, 122,
	370, -262, 31, 23, -262, -433, -602, -422, 354, 31,
	-19, 28, -5, -671, 531, -671, -689, 211, 198, 315,
	-7, -654, -656, 531, 23, -108, 321, 480, 84, -522,
	-445, -190, -191, -459, -460, 26, 29, -609, 365, -108,
	533, -106, -430, -431, -6, -630, 83, -156, 531, 267,
	388, -15, -15, -15, -15, -15, 29, -603, 29, -7,
	531, 370, 31, -621, -620, -103, 29, -622, -522, 103,
	31, -513, -441, 28, -433, 531, 74, 332, -522, -433,
	464, 74, 29, 21, -642, -647, 67, 448, -5, -436,
	242, -433, -429, -103, 23, 130, -513, -513, 541, 61,
	-720, 117, 514, 168, 335, 473, 194, 449, -388, 414,
	531, 370, 370, -355, 28, 514, -356, -5, 117, -372,
	513, 471, 381, 284, 270, -720, 117, -720, 117, 117,
	74, 460, 201, 400, 412, 411, 460, 412, 411, -433,
	309, 153, -15, 122, 61, -388, 298, 411, 531, -435,
	449, 61, 255, 370, -433, 449, 61, -425, 414, 90,
	338, 342, -109, -267, -719, 70, -267, -267, 70, 346,
	-37, -37, -433, 61, -720, 414, -433, -400, 398, 93,
	-26, 29, 45, -400, 398, 93, 29, -7, 61, 414,
	61, 536, -655, 509, -662, -674, -676, -107, -121, 45,
	361, 500, 190, -104, -108, 426, 61, 414, 61, 479,
	61, 414, 61, 61, 61, -609, -664, 449, 225, -613,
	-726, 527, 68, 61, 117, 40, 31, 117, 40, 31,
	414, -660, 117, -661, 513, 31, 117, 61, 61, -725,
	-682, 35, 93, -665, 414, 423, 457, 61, 255, 74,
	47, 418, 254, 317, 324, -267, -267, -15, -5, -48,
	532, -674, 61, 103, 398, 365, 83, 83, 414, 531,
	61, -108, 355, -433, -7, 61, -725, 414, 61, 255,
	61, -429, -642, -642, -642, 61, 61, -725, 414, 61,
	255, 61, 61, 61, -39, 61, -103, 47, 61, -429,
	387, -103, 387, 387, 387, -429, 61, -433, -433, 398,
	-627, 365, 264, 258, 61, -514, -668, 93, 247, -668,
	61, -622, -514, -668, -668, 61, -388, -388, 61, 61,
	438, 414, 61, -15, -15, -15, -15, -15, 61, 208,
	155, 155, 208, 155, 208, 531, 414, 541, 61, 208,
	-604, -407, -406, 199, 512, 261, 286, 62, 385, 409,
	458, 464, 414, -527, -498, 290, 405, 45, 130, 365,
	6, 6, -17, -15, -13, -7, -15, -7, -108, -270,
	529, 529, -126, 134, -101, 61, 61, 61, 61, 531,
	-123, -129, -101, -101, 56, 56, -101, 531, -101, -128,
	-128, -270, -432, 29, -108, 83, 29, 83, 29, -450,
	-453, -108, -7, -448, -452, -452, -452, -449, -84, 531,
	-7, -7, -432, -622, 29, -522, -401, -401, -401, -433,
	61, -535, -536, 68, 269, 457, -433, 541, -103, 531,
	-5, -180, 541, 532, 61, -16, -16, 246, 422, -452,
	-452, -452, -13, -17, -13, 139, -50, -45, -5, -13,
	-13, -17, 448, 420, 287, 386, 410, -524, 36, 291,
	-14, 541, 532, 532, 64, -516, -517, -524, -517, -474,
	-502, 28, -433, -243, 119, -500, -506, -500, -433, -7,
	-433, -433, -7, -19, -248, 36, 168, 416, -245, -245,
	-245, -245, -245, -245, 532, -435, -24, 359, -23, 194,
	411, 427, 272, -432, 298, 298, 52, 52, 52, 52,
	52, 52, 52, 52, -15, -15, 74, 74, 52, 52,
	-108, -267, -108, -406, 514, -407, 464, 261, 199, 286,
	322, 385, 409, 532, -131, 541, -170, -95, -82, -82,
	16, 17, 530, 542, 66, 503, 427, 541, -60, -63,
	-67, 534, 535, 411, 127, 531, -63, 411, 127, -61,
	-101, 6, -61, -154, 359, 430, -16, 541, 83, -163,
	94, 95, -54, -149, -278, 64, -427, 453, 451, 58,
	289, 473, 67, -433, -277, -108, -15, 56, 58, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, 46, 44, 48, 37, 45,
	-65, 61, 47, 31, 49, 43, 50, 41, 260, 357,
	-167, -166, 350, 351, 352, 353, 166, -162, 59, 60,
	-161, -182, 531, -165, 510, 432, 21, -6, 531, -130,
	411, 531, -182, 41, 31, -99, 532, 541, -129, -80,
	530, -77, -129, -156, -129, 532, -82, -124, -101, -76,
	-75, 51, -133, 71, -142, 508, 531, -334, -67, -65,
	-329, -65, 531, -101, -101, -101, -101, -65, -87, -12,
	4, 498, 344, 248, 297, 341, 417, -103, -65, -88,
	-83, -65, -82, -89, -66, -67, 534, 535, -155, 411,
	-85, -83, -65, -65, 511, 326, 456, -86, -65, 64,
	-129, -65, -129, -129, -129, -129, 346, -90, -221, -65,
	-710, -67, 346, -65, -82, -335, -339, -334, 100, -65,
	-332, -181, -339, -329, -182, -329, -65, -329, 532, -329,
	-329, -329, -710, -278, -129, 532, 532, -300, 85, 31,
	532, -65, 468, 229, 389, -223, 74, -236, 103, 104,
	-215, -219, -5, 86, -5, -278, 541, 527, -217, -220,
	-97, -224, 65, -279, -280, -435, -182, 323, -291, 531,
	-304, -314, -324, -305, 127, 125, 126, -5, -132, -71,
	-333, 166, -280, -240, 112, -240, -350, -351, -354, -5,
	-355, -357, -356, 46, -15, 122, -412, 83, 29, -179,
	273, -399, 36, 531, 29, 74, 31, 404, -678, -679,
	-681, 23, 321, 458, 484, -682, -672, 532, -673, -674,
	-678, -691, -690, 96, 98, 97, 462, 122, 198, -429,
	-657, -658, 4, 74, 321, -7, -433, 480, -442, -411,
	-35, -19, -5, -369, -106, 532, 541, 527, 130, -7,
	-307, -306, -308, -5, 531, -429, -429, -429, -429, -429,
	-15, -605, 414, 479, 64, 24, -7, -607, -608, -612,
	295, 354, 478, -350, 122, 29, 284, -7, 422, 29,
	-496, -497, 446, 197, 406, 45, 371, 265, 469, 309,
	4, 232, 476, 103, 23, 31, -262, -65, -6, 7,
	-629, 23, -639, 307, 67, -641, -646, -5, -305, 531,
	-15, 448, -428, 541, -435, 45, -96, -262, -262, 387,
	-108, -103, -402, -7, -7, -7, 505, 223, 340, -7,
	-7, -389, -390, -6, -433, -433, 31, -355, 28, -108,
	-7, 531, -376, -394, 83, 503, 503, -395, 83, -5,
	-101, -7, 28, -5, 28, -7, -7, -7, -7, 21,
	103, 460, 412, 460, 412, -7, 327, -7, 21, 103,
	-7, 327, -433, 411, -522, -46, 110, 79, 40, 83,
	327, -40, -43, -419, 93, 196, 27, -10, -6, -400,
	-403, 398, 93, -7, -7, 74, -433, -400, 398, -7,
	-7, -7, -267, -15, -15, -267, -267, -400, 398, -422,
	93, -7, -7, -7, -400, 398, 93, 61, -720, 414,
	255, -433, 449, 61, -720, 414, -435, 398, -607, -608,
	365, -7, -7, -522, 532, 532, 509, 541, 70, -107,
	-121, -676, -121, -104, 361, -122, -104, -7, -7, -522,
	-7, -7, -522, -7, -522, -7, 479, -102, -271, 40,
	-7, -7, 47, -7, 28, -65, 47, -7, -7, 531,
	47, -7, -522, -7, -7, -522, 74, 47, 74, 254,
	317, 532, 541, -11, -401, 61, 61, -7, -7, -7,
	-684, -683, -6, -522, 532, 541, 541, 398, -636, 61,
	74, -7, -7, -522, 74, -7, -522, -7, -7, -522,
	74, -7, -522, -7, -522, -7, -13, -428, -13, -13,
	-522, 398, 398, -26, 61, 61, 400, 201, -11, -497,
	-7, -11, 422, -7, -522, -7, -42, -102, 40, -7,
	-522, 93, 398, 93, 398, 93, 365, -429, 398, 93,
	398, 93, 365, 196, 22, 27, -7, -7, -103, -34,
	28, -308, -103, 28, -5, -684, -7, -455, 196, 27,
	-522, -5, -606, 61, -7, -15, -449, 531, -108, -448,
	-450, 221, 279, -448, -448, 130, -108, -7, -516, -516,
	290, 414, 406, 103, 61, -432, -432, -432, 74, -432,
	530, -101, -101, 529, 532, 344, 297, 341, -125, 341,
	-125, -125, -101, 532, 532, 532, 57, 57, 532, -129,
	532, -432, -17, 23, -7, -15, -7, -15, -432, 321,
	-432, -432, -432, -432, -432, -611, -614, 153, -37, 422,
	130, -438, 36, -522, 64, 531, 61, -511, -268, -124,
	-101, -108, -518, -523, -522, 71, 140, -13, -51, -267,
	541, 533, 45, 45, 45, 45, 45, -519, -528, -6,
	70, 532, -62, -518, 74, -432, 64, 31, -500, -507,
	130, 296, 296, 343, 427, 272, 427, 272, 97, 411,
	-529, -103, 47, -529, -529, -529, -529, -529, -529, -529,
	83, 83, -15, 261, -15, -529, -529, 321, 52, 23,
	-15, -15, -7, -108, -108, -449, -448, 139, -448, -448,
	532, 190, -95, -131, -131, 541, -131, -65, -65, -100,
	-65, 97, -59, -63, 66, 36, -101, 6, 531, -129,
	334, -174, -157, -159, 62, -164, 517, -281, 65, -279,
	-717, -717, 453, 451, 453, 451, -717, -433, 57, 42,
	-65, -65, 61, -162, 59, -161, 42, -65, 47, 49,
	43, 50, 41, 260, 357, -167, -166, 64, 357, -168,
	36, 168, 155, 134, 139, 146, -66, -66, -129, -182,
	531, -156, 531, -129, 41, -97, -65, 530, 530, 541,
	532, 532, 532, -131, 532, -74, -75, 263, -65, -142,
	531, -141, -5, 531, 65, -336, 47, 192, 155, 542,
	-338, 509, -348, -347, 515, -65, 532, 532, 532, 532,
	23, 532, 64, 532, 541, 532, 532, 372, 532, 14,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -155, 52, 45, 62, -66, -66, -66, 532,
	532, 48, 64, 130, 23, -86, -86, -86, 532, 64,
	-129, 541, 532, 532, 532, 532, -6, 532, 541, 23,
	-65, -320, 129, -6, 541, 532, -336, 541, 532, -108,
	-337, 541, 47, 192, -348, 532, -168, 532, -339, 541,
	541, 541, -65, -281, 532, 531, 85, -225, 100, 101,
	155, 532, 541, -97, -224, -222, -65, 532, 541, -225,
	-65, 120, 541, 81, -292, 75, 82, 79, 77, 78,
	76, -284, -283, 23, -5, -284, -182, -304, -314, -324,
	-182, -291, -280, -286, -283, 23, -5, -284, -284, -313,
	518, 64, 531, 531, -96, 74, -246, -103, 113, 114,
	-246, 532, 541, -433, -352, 531, -433, -49, 36, 168,
	-7, -433, -254, -438, -7, 23, -388, -14, -433, -435,
	29, -677, 67, -121, -687, -461, 212, 403, -681, -686,
	-103, -272, -680, 130, 532, 541, 40, 527, -687, 74,
	33, 122, -691, 532, 541, 527, -456, 63, 97, 98,
	96, -7, 295, -262, -433, 67, 209, -442, -370, 117,
	-371, -373, 39, 31, 47, 471, 381, 513, 40, 392,
	288, 252, 311, -431, -410, -121, -30, -157, -267, -103,
	355, 62, 534, 535, 464, 532, 541, -108, -600, -601,
	-103, -429, 64, -7, -272, -272, -37, -417, 507, -612,
	-623, -7, 295, 478, -623, 532, -433, -433, 246, -619,
	-7, 130, -101, -401, -401, 406, 71, -103, 47, 371,
	371, 68, 474, -401, -179, 29, -412, 532, 273, 51,
	-399, -633, 130, 4, 295, 64, 541, -65, -32, -428,
	-647, -262, 414, -262, -282, 65, -282, -13, 532, 61,
	61, 61, -44, -5, 40, 532, 541, 527, 533, -360,
	130, 40, -36, 282, 29, 31, -416, -415, 439, -372,
	270, -65, 531, -367, 307, 531, -394, 531, 531, -7,
	-405, 27, 93, 401, 196, -424, -269, -39, -426, 402,
	93, -367, 29, -432, 29, -432, -7, -7, -7, -7,
	418, 418, 327, 307, 418, 532, 541, -419, -419, -10,
	-41, -103, 61, -720, 117, 414, 93, 364, 276, 61,
	93, 364, 61, 414, 61, 61, -720, 414, -7, -7,
	-7, 74, -400, 398, 93, -7, -7, -7, -7, -400,
	398, 93, 61, -39, 61, 70, -662, -655, -121, -121,
	538, -122, 61, -432, 29, -661, -65, -367, 276, 313,
	47, -674, -7, -522, 398, 93, 365, 398, 196, 27,
	93, 365, 541, 532, 527, -108, 355, -108, 61, -637,
	83, -401, -433, 276, 276, -428, -428, -428, 61, 61,
	255, -7, -522, -7, 438, 61, 414, 61, 414, 61,
	61, 414, 61, 414, 61, 336, 336, 336, 61, 61,
	-103, 31, -432, 29, -432, 532, -269, 93, -272, -108,
	-15, -15, -108, 74, 74, 506, -13, -401, -401, -522,
	-15, 530, 530, -101, 532, -127, -127, 532, -432, -108,
	-432, 83, -432, 83, -7, 532, 541, 531, -7, -622,
	246, 354, 422, -18, 532, -525, 541, 36, -522, -13,
	541, -45, -5, 414, 414, 414, 414, 414, -524, 541,
	-526, 506, 49, 43, -522, -524, -534, -401, 29, -179,
	272, 272, -7, -7, 52, -15, 52, -7, -529, -108,
	52, 52, 52, 52, 52, 52, 52, -267, 52, 52,
	-95, 532, 532, 532, 530, 66, 36, 455, -129, 532,
	541, -164, 531, 91, 92, -52, 71, -65, -433, -433,
	-717, -717, -717, -717, -433, -65, -65, 42, 42, -65,
	-66, -66, -65, 42, 64, 357, -168, -65, 471, 471,
	30, 30, 532, -65, 532, -129, 532, 541, 532, -77,
	532, -103, 266, -65, 106, -170, -143, -5, -65, -168,
	74, 74, -329, -329, -337, 70, 166, 532, -108, -65,
	-167, -65, -108, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, 41, 31, 260, -66,
	-65, -65, -65, -108, 532, 532, 532, -129, -65, 532,
	541, -221, -6, -91, 380, 442, 532, -67, -321, 70,
	532, 541, -93, 479, -168, -334, -348, -339, -329, 74,
	74, -339, 532, 532, -65, -65, -65, 23, -52, -180,
	-274, -230, 531, 74, -179, -179, 102, -219, -225, 527,
	-220, 122, -280, 75, 75, -280, -292, 75, -293, 80,
	-293, -293, -134, 450, -5, 531, -284, -286, -284, -284,
	532, -5, 531, 531, 124, 531, -67, 133, -329, -65,
	-37, -256, -718, 83, -383, 310, -354, -365, -384, -385,
	370, -353, -358, -359, -356, -5, -352, -391, 74, -388,
	505, 531, 122, 370, 23, -253, -179, 532, -602, -395,
	-7, -678, 531, 206, -65, 541, 541, 464, -673, -65,
	-65, -433, -690, -14, 74, -658, 4, -410, 61, 531,
	-623, -399, 531, -433, 28, -522, -7, -15, 252, 47,
	-376, 503, 531, -66, -433, -421, 201, 70, 253, 299,
	-108, -308, -319, 39, 532, 541, -15, -603, 531, -122,
	-383, -352, 531, 370, 140, -621, -417, -622, -401, -401,
	-103, -103, -102, -103, -438, -441, -399, -367, -722, 286,
	385, -624, -626, -5, -635, 61, -634, 21, 63, 96,
	97, 98, -623, -279, -646, 532, 74, -282, -5, 242,
	-282, 531, -428, 36, 168, -103, -7, -7, -390, -410,
	-6, 86, -355, 29, -414, -413, 230, -5, 40, 532,
	-14, -368, 31, 252, 311, 354, -7, -14, -367, -14,
	-363, -362, -234, -5, -305, 531, 31, 275, 298, 246,
	-425, 288, 31, 275, 438, -388, -415, -413, -388, 288,
	-426, 93, 464, -37, 438, -5, -7, 418, -7, -43,
	-7, -7, -7, -7, 449, 70, -7, -7, 449, 70,
	-7, -7, -7, -7, -7, -7, 61, 276, 61, -720,
	414, 93, 364, 61, 61, -720, 414, -7, -522, -655,
	532, 464, 538, -7, -7, 532, -7, 313, 61, 414,
	61, 61, -643, -648, 62, 286, 439, -644, -649, 62,
	286, 414, 61, -683, 355, -685, -121, -30, -157, -267,
	-103, 532, 532, 532, -7, -638, 36, 531, 398, -7,
	-7, -7, -7, 74, -39, -42, -7, -7, -7, -7,
	-522, -7, -7, -7, -7, -522, 130, 130, 34, 130,
	28, -7, -103, 211, 198, 29, -5, 464, 23, 83,
	83, 321, -520, 448, 287, 410, 420, 465, 415, -520,
	130, -432, 530, 532, -7, -7, -432, -614, -611, 422,
	246, -7, 532, -103, -524, -523, 290, -267, -13, -13,
	-13, -13, -13, -528, -432, 64, -524, 52, 52, -529,
	52, -529, 52, 532, -531, -103, 47, -531, -531, -531,
	-531, -531, -531, 52, -531, -531, -131, 455, 532, -65,
	-156, -173, 72, 70, -433, -433, -433, -433, -65, -65,
	42, 30, 30, -65, -65, 319, 319, -65, -65, 532,
	532, -65, -103, -65, 532, -139, 370, 532, -339, 47,
	47, -339, -171, 148, 532, 532, 64, 64, 41, 260,
	42, 130, 64, 532, 532, -81, -129, 489, 532, 483,
	483, -321, 70, -67, 132, 155, -65, -94, 541, -65,
	354, -339, 532, 47, 47, 532, -340, 129, -340, -340,
	-109, -173, 532, 109, -263, -234, 117, -236, -65, -245,
	-280, -280, -294, 83, 74, 75, -280, -670, 531, -13,
	-283, 531, -306, -306, -5, -309, -310, -305, -320, 531,
	541, -218, -228, -237, -238, 51, -258, -259, 531, -37,
	150, -384, 531, 304, 271, -412, 70, 532, 541, -369,
	36, -360, -392, 449, 228, -350, -15, 122, -179, 273,
	-438, -704, 36, -399, 531, 74, -687, -312, -675, -107,
	-104, -705, -103, 130, -108, -696, 393, -433, -433, -645,
	64, 61, -651, 312, 23, -14, 531, 31, -442, -371,
	31, -428, -428, -65, -262, 23, 40, 83, -15, -103,
	-418, -419, 422, -360, -350, 122, -7, 284, 422, 23,
	-392, -670, 273, 30, 45, -637, -401, -641, -65, 286,
	500, 286, 64, 527, 36, 45, 64, -355, -417, -5,
	40, -367, 532, 252, 476, 299, 253, 309, 532, 532,
	532, 541, 36, -235, -227, 39, -235, -65, 47, 28,
	28, -421, 47, 23, -42, -421, -108, -267, -42, -432,
	-432, 61, 61, -7, -401, -7, -401, 61, -7, -7,
	-7, -7, -7, 449, 70, -7, -7, -7, -7, 532,
	464, -432, -367, -7, -7, -522, -7, 541, -101, -101,
	-108, 541, -101, -101, -7, -522, 513, -65, 61, 276,
	-13, -13, -15, -13, 29, -432, -103, -103, -432, -108,
	-108, -7, -7, -7, 61, 64, -516, -432, -432, -432,
	532, -7, 73, 506, -518, -432, -529, -529, -529, -529,
	52, -531, 532, 532, 532, -137, 484, -65, -53, -65,
	-65, -65, 532, -131, 70, 532, 532, -7, -65, -66,
	64, -65, -65, -65, 532, 541, 532, 531, -321, 532,
	532, 435, 155, 532, -339, -330, -331, -329, -341, -342,
	40, -343, 136, 47, 49, 43, 50, 138, -339, -92,
	306, 354, -137, -301, 87, 97, 110, 532, 541, -7,
	155, -294, 531, -65, -280, 531, -13, 532, -306, 532,
	532, 532, 541, -311, 23, 123, -322, -323, -66, 40,
	-65, -225, -228, -229, 30, -229, 105, 31, -257, 115,
	116, 149, 47, 154, 151, 152, 42, 153, 148, -260,
	-264, -6, -258, -103, -412, -16, -366, 227, 230, 233,
	251, 298, 288, 308, 438, 439, 21, -366, -49, -5,
	-358, 507, -384, -7, 27, 98, 380, 532, -352, -433,
	-438, -7, 513, 216, 58, 23, -263, -435, 541, 532,
	-121, 266, -688, -4, -461, 464, -692, 130, -697, -699,
	-694, 348, 502, -703, 64, -281, 532, 433, 433, -652,
	-653, 478, 354, -623, -179, 532, 29, -393, 83, -393,
	532, -377, 337, 298, 531, -7, 532, 541, -7, 422,
	532, -433, -417, 246, -7, -179, 531, -722, -626, 531,
	-638, 64, 532, -448, -640, 23, -640, -15, -410, 531,
	531, 531, -369, -378, 303, -378, 392, -378, -362, -156,
	62, -398, -15, -15, 532, 29, 29, 531, 23, -319,
	-7, -7, -24, 93, -24, 93, -7, 61, -7, -401,
	61, -648, -156, -450, -448, 531, -649, 531, 531, 531,
	532, -7, -7, -727, 36, 518, -727, 34, -727, 130,
	-319, 532, -518, -518, 74, -7, -524, -529, -138, -140,
	-5, -169, -172, -65, -175, -177, -176, -178, 531, 238,
	408, 293, -144, 388, 127, 294, -129, 130, -66, -129,
	-90, 499, 354, -345, 168, 36, 541, 23, 532, 74,
	-65, 134, 139, -344, -342, 532, 306, -302, 90, 89,
	88, 93, -281, -234, -179, -13, -129, 532, 532, -313,
	-310, 531, -315, -316, -5, 541, 532, 23, -66, -328,
	23, 106, -65, 106, 105, -659, -659, -659, -659, 152,
	31, 47, -103, 532, 541, -265, -271, -267, 536, 40,
	531, -281, -49, 532, -391, 531, -369, -412, 127, 127,
	-383, -384, -352, -253, 506, 513, 513, -179, 532, -395,
	-675, -678, 540, -108, -700, 51, -723, 262, -699, -695,
	67, 411, -367, -433, 109, 36, 36, -623, 478, -704,
	-399, -433, 307, -374, 354, -382, -379, -380, 74, 79,
	369, 429, -423, 531, -65, -650, 279, -419, -417, -7,
	-383, -352, 140, -417, -438, 532, -670, -625, 7, -279,
	-640, 301, 205, -364, -361, -9, -129, -129, -428, 531,
	-428, -433, -428, 531, -163, -388, -235, -65, 298, -38,
	83, 449, 449, -7, -24, 93, -7, -711, 130, -711,
	-712, -712, -712, -65, -17, -17, -15, -15, -13, -432,
	-525, -432, -520, -417, -432, 541, 23, 541, 532, 531,
	531, 425, 532, -145, -146, 37, 467, 120, -65, -145,
	-145, -65, 532, 532, 155, -346, 145, 144, 140, 134,
	140, 134, 141, 142, -331, -6, 136, 532, 74, -14,
	91, 91, -216, 532, 532, -306, 532, 541, -108, 130,
	-323, 541, -6, -340, -5, -231, -232, 109, 97, 98,
	-233, 109, 96, 70, -103, -103, -103, -103, -14, 536,
	47, -14, 536, -264, -261, -266, -271, -391, -392, -386,
	-387, -5, -305, 531, -49, -384, -412, -360, -438, 506,
	506, -704, -397, 303, 531, -687, 273, 531, -693, 411,
	437, -659, 130, -439, 315, 200, 286, 286, 23, 531,
	449, 309, -380, 74, -379, 74, 97, 98, -422, 532,
	23, -15, -417, 422, -360, -7, 531, 532, 541, 532,
	541, -101, 532, 532, -393, -14, -393, -262, -393, -156,
	-164, -163, 532, -423, -65, -7, -7, 449, -420, 391,
	87, 509, -420, 532, 532, 532, 532, -727, 64, -140,
	-141, -172, -129, -129, 531, -147, 270, -146, 377, 283,
	411, 377, 283, -147, -147, -344, 143, 143, 140, 140,
	134, 140, 134, 140, 138, 136, 93, 70, 70, -281,
	-285, 23, -135, 399, 532, -316, -317, -318, 4, 40,
	31, 47, 128, 124, -67, 123, 110, 93, 110, -226,
	102, 531, 40, 86, 107, 108, -14, 536, 532, 541,
	-392, 532, 541, -227, -227, -65, -391, -412, -49, -384,
	-376, 531, -263, -722, -65, -702, -5, 262, -443, 110,
	-446, 531, -179, -185, -186, -187, -210, -296, -448, -448,
	-179, -7, -381, 354, 35, 24, 93, -381, 532, 440,
	-643, -7, 422, -417, 532, 7, -361, 61, -367, 532,
	-367, -377, -281, 532, -164, -24, -24, -7, 70, -448,
	-15, -518, 532, 532, -169, 120, 71, 455, 354, 30,
	532, 74, 74, 140, 140, -342, -5, -14, -14, -5,
	531, -318, -66, -66, 47, -66, -320, 531, -216, -236,
	-215, 86, 531, -266, -387, -398, -398, 532, -392, -49,
	-391, -412, -399, -396, -234, 532, -670, 532, 411, -181,
	-182, -444, -447, -446, 541, 541, -704, 195, 47, 40,
	-417, -7, 531, -382, -367, -24, -15, -432, 532, 411,
	501, -146, 146, 146, 74, 61, 83, 93, 93, -65,
	123, -325, -326, -5, 131, 155, 532, -129, -227, -391,
	-392, -49, -392, 532, 541, -397, 531, -700, 532, 540,
	61, 64, -262, -262, -417, -129, -367, 147, 147, 136,
	-68, -670, 166, -5, -5, -5, 532, -315, 532, 541,
	130, -108, -349, 128, -226, -226, 102, 532, -398, -392,
	-391, -281, -234, -376, -698, -701, -101, 6, -103, -6,
	273, -447, 433, 433, 532, 40, 531, 532, -341, -326,
	124, -327, -347, 29, 128, 7, -236, -392, -399, 532,
	541, -722, 36, 36, -68, -82, 532, -345, -327, -327,
	7, 123, 23, 155, -392, -701, -670, 286, 286, 83,
	-131, -346, -345, -341, 531, -7, -226, -281, 531, -448,
	-448, -5, 532, -344, -346, -325, 123, -698, -344, 532,
	531, 532, -325, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	3021, 3021, 1550, -2, 0, 1832, -2, 1895, 1895, 0,
	0, 0, 0, 0, 3021, 0, 3021, 3021, 0, 0,
	0, 0, 0, 1637, 1909, 1905, 0, 1905, 2354, 2355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 174, 0, 0, 0, 0, -2, 1541, 1636,
	0, 2330, 2331, 1672, 0, 1583, 0, 0, 0, -2,
	3024, 3019, 3020, 2776, 0, 0, 0, 0, 1637, 0,
	1831, 0, 0, 2920, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 1958,
	1959, 0, 0, -2, 2131, 2897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 0, 0, 0, 2365, 139, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2361, 2362, 2363, 0, 0, 2367, 2368, 2369,
	0, 0, 0, 1878, 0, 1881, 1882, 1883, 1884, 1885,
	1886, 0, 0, 0, 2272, 333, 444, 234, 478, 2277,
	2724, 0, 561, 217, 434, -2, 425, 511, 2739, 149,
	150, 151, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 426, 427, 428, 429, 430,
	431, 432, 433, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 2286, 2278, 561, 478, 444, 2282, 2283, 217,
	234, 333, 351, 425, 434, 511, 3024, 2776, 3024, 0,
	3024, 0, 3009, 444, 478, 561, 432, 3011, 478, 3232,
	159, 0, 3086, 3087, 3091, 2550, 2550, 2550, 198, 2550,
	0, 0, 3086, 2550, 2298, 1905, 1637, 0, 2311, 2312,
	2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, -2, 1903,
	0, 1908, 2326, 0, 1904, 2332, 561, 478, 444, 2336,
	0, 2342, 0, 0, 2356, 2357, 2358, 2359, 2360, 3202,
	1657, 3206, 3208, 0, -2, -2, -2, -2, 190, 413,
	3227, 3227, -2, -2, 3224, 3225, 1255, 0, 0, 1253,
	3207, 3228, 3229, 3242, 3244, 392, 3246, 3248, 3249, 3250,
	3253, 3254, 1472, 1254, 0, 173, 0, 1895, 3298, 3301,
	3302, 3304, 0, 3306, 0, 1392, 0, -2, -2, 1469,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, -2, 0, 2929, 2929, 2929, 0, -2,
	1554, 1555, 0, 1555, 0, 1588, 0, 1671, 1673, 1582,
	1611, 1612, 165, 0, 0, 1633, 408, 1638, 168, 1634,
	0, 2, 3017, 0, 3018, 2775, 2763, 0, 0, 2769,
	0, 0, 0, 1616, 0, 0, 0, 3233, 3234, 3235,
	3236, 3237, 2550, 0, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 1895, 2919, -2, 0, -2,
	302, 2061, 1901, 184, 0, 221, 283, 1538, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 2583, 0, 0, 302, 2061, 302, 0,
	0, 2645, 302, 338, 2061, 2168, 2169, 2170, 2171, 2172,
	2757, 2758, 2759, 2760, 0, 0, 0, 2819, 0, 0,
	168, 302, 133, 2784, 0, 0, 0, 2061, 2061, 1960,
	1961, 1962, 1963, 0, 302, 0, 3366, 302, 0, 0,
	302, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3373, 0, 3366, 0, -2, 3178, 0, 2168,
	0, 221, 283, 0, 0, 0, 302, 3366, 0, 3366,
	0, 0, 0, 0, 0, 0, 0, -2, 3034, 0,
	338, -2, 3034, 0, 0, 302, 0, 0, 0, 3073,
	0, 302, 137, 186, 302, 137, 160, 0, 302, 137,
	302, 1892, 1458, 0, 1459, 1460, 1461, 1462, 1463, 1272,
	1466, 1476, 1479, 1480, 1481, 1482, 1483, 1519, 264, 1476,
	1476, 1476, 1489, 1490, 1491, 1492, 1493, 1515, 1515, 1258,
	1512, 1467, 1468, 1517, 1505, 1517, 1517, 1500, 0, 1517,
	137, 302, 0, 0, 0, 221, 283, 137, 302, 3182,
	0, 137, 302, 137, 302, 3180, 137, 302, 137, 302,
	137, 302, 2384, -2, 302, 2567, 302, 0, 338, 3039,
	302, 2166, 3037, 302, 3041, 302, 2364, 0, 2366, 0,
	1876, 1877, 1880, 145, 0, 0, 2273, 444, 2274, 219,
	0, 0, 2288, 2289, 169, 2275, 0, 0, 0, 0,
	0, 0, 2727, 2728, 2729, 2752, 2753, 2730, 2755, 2756,
	0, 2279, 0, 2281, 3005, 3006, 3007, 3015, 3008, 0,
	3016, 3010, 3014, 0, 0, 0, 0, 0, 3088, 0,
	3093, 0, 3094, 3095, 3096, 3097, 0, 0, 0, 0,
	1637, 2300, 0, 2302, 2310, 565, 2305, 2306, 2307, 0,
	1905, 1902, 0, 2323, 2325, 2327, 168, 0, 2333, 0,
	2335, 0, 2345, 0, -2, 145, 145, 145, 2349, 2350,
	2351, 2352, 0, 0, 3209, 0, 3226, 0, 0, 0,
	3227, 3227, 0, 0, 0, 3227, 3227, 0, 3227, 3227,
	1256, 1257, 3238, 0, 3245, 3247, 3251, 0, 3257, 171,
	3400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2365, 1887, 1888, 1889,
	1890, 1891, 0, 0, 3303, 3305, 0, 1393, 1277, 0,
	1280, 2984, 1567, 1564, 0, 2981, 2982, 1568, 0, 0,
	0, 1576, 0, 2927, 2928, 0, 0, 0, -2, 0,
	1552, 1553, 1678, 1587, 1589, 1593, 1594, 1131, 0, 0,
	0, 0, 0, 0, 2030, 1198, 1221, 1222, 1285, 0,
	1225, 1226, 1227, 524, 0, 1232, 1233, 528, 1520, 371,
	557, 1275, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	0, 0, 0, 1408, 1543, 1545, 1289, 1235, 1236, 1237,
	1238, 1239, -2, 538, 535, 580, 1291, 1292, 1294, 1296,
	1298, 1300, 1301, 1302, 1303, 1304, 1305, -2, 0, 525,
	549, 553, 554, 560, 563, 564, 550, 521, 527, 544,
	568, 569, 571, 573, 570, 574, 575, 537, 534, -2,
	540, 541, 545, 539, 536, 543, 576, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 546, -2, -2,
	-2, -2, -2, -2, -2, 1494, 1495, 1496, 1497, 1678,
	0, 1613, 166, 1614, 0, 0, 0, 1635, 0, 0,
	0, 1448, 3022, 0, 0, 2765, 0, 2767, 2768, 2770,
	0, 1796, 0, 1617, 0, 1818, 0, 0, 0, 2550,
	302, 0, 2550, 0, 2598, 302, 132, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1964, 0, 2556,
	0, 3373, 2059, 2060, 0, 1900, 185, 0, 2581, 0,
	2898, 0, 0, 2582, 0, 0, 0, 0, 0, 2588,
	0, 0, 2604, 0, 0, 0, 302, 2649, 0, 0,
	0, 0, 3044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2853, 0, 0, 0, 0, 0, 3044, 3044,
	2141, 2154, 2241, 0, 2162, 0, 0, 0, 2241, 2241,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2233, 0, 0, 0, 2143, 2145, 0, 0,
	0, 3365, 0, 0, 0, 2146, 0, 2599, 0, 2039,
	0, 0, 0, 2043, 2058, 2046, 0, 0, 0, 0,
	2061, -2, 2056, 0, 2148, 2241, 0, 0, 3366, 302,
	0, 0, 302, 0, 2337, 0, 2338, 0, 0, 0,
	2383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3383, 3373, 3369, 0, 0, 3388, 3372, 2285, 3374, 3387,
	3379, 0, 3381, 3382, 3384, 3385, 0, 2572, 0, 0,
	0, 0, 0, 0, 3175, 0, 0, 0, 3145, 3365,
	0, 0, 3149, 3150, 3151, 3152, 0, 0, 3157, 0,
	0, 0, 0, 3162, 0, 2503, 3176, 0, -2, 0,
	0, 3062, 3063, 0, 0, 0, 0, 0, 2378, 0,
	0, 0, 0, 3175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3175, 0, 0, 0, 0, 0, 0,
	2642, 2643, 0, 0, 0, 0, 0, 0, 0, 0,
	2878, 2879, 0, 0, 0, 0, 0, 0, 3046, 0,
	0, 0, 0, 0, 3046, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3185, 0, 3186, 0, 2611, 1895, 0,
	0, 0, 1870, 0, 0, 1873, 0, 0, 2243, 135,
	136, 0, 0, 2245, 0, 0, 0, 2248, 0, 1450,
	1454, 1458, 1464, 0, 1259, 1260, 1261, 1262, 1263, 1264,
	1273, 1477, 1476, 0, 1484, 0, 1485, 1486, 1487, 1488,
	0, 1509, 0, 0, 0, 1511, 1507, 1516, 0, 1498,
	1499, 1517, 1517, 1503, 2250, 0, 137, 302, 0, 138,
	0, 302, 0, 302, 2270, 0, 0, 0, 2260, 0,
	2262, 0, 0, 2264, 0, 2266, 0, 2268, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	1879, 2370, 2371, 2372, 2373, 0, 0, 2656, 0, 0,
	2731, 2732, 2287, 2290, 2291, 0, 2734, 2725, 2735, 2737,
	2741, 2743, 2744, 1866, 1867, 1868, 1869, 2736, 2738, 2740,
	2726, 2745, 2746, 0, 2749, 2750, 2751, 2733, 2761, 2762,
	2280, 432, 3013, 1637, 0, 2902, 0, 3098, 0, 440,
	0, 291, 398, 428, 246, 263, 326, 327, 381, 434,
	471, 483, 0, 3132, 3092, 0, 0, 162, 164, 0,
	0, 0, 3132, 0, 2299, 1637, 0, 2304, 2308, 2309,
	0, 1907, 2326, 0, 2329, 2326, 2334, 2340, 2341, 0,
	0, 0, 0, 132, 2353, 3205, 3197, 3198, 3199, 3200,
	0, 3210, 3211, 3212, 3213, 0, 0, 3216, 3217, 3218,
	0, 0, 3221, 0, 0, 0, 3252, 0, 2165, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 283, 0, 0, 0, 0, 0, 0, 0,
	1895, 3297, 1394, 0, 1541, 0, 0, 0, 1401, 1403,
	0, -2, 1278, 1281, 1282, 1470, 152, 153, 154, 155,
	156, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 1279,
	0, 1558, 2983, 1559, 1566, 1569, 0, 0, 1571, 0,
	1573, 0, 2979, 2980, 2985, 2993, 2994, 0, 3003, 3004,
	2991, 0, 2995, -2, 0, 0, 1579, 0, 1584, 1585,
	1586, 2945, 2946, 1946, 2984, 1567, 1596, 0, 0, 0,
	733, 701, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1535, 1536, 1537, 0, 694, 948, -2, 0, -2,
	1035, 866, 1169, 1171, -2, 845, 0, 0, 1592, -2,
	945, 1428, 157, 158, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 695,
	696, 697, 698, 699, 700, 702, 703, 704, 705, 706,
	707, 708, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 841, 842, 843, 844, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 946, 947, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1136, 1137, 1151, 1154, 1155,
	0, 0, 0, 1223, 1448, 0, -2, 1228, 1229, 1230,
	1231, 0, 0, 0, 0, -2, 1248, 0, 1250, 1272,
	0, 0, 1407, 1545, 0, 2957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1351, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1748, 1748, 0, 0, 0, 0, 0,
	0, 0, 0, 1596, 0, 0, 0, 1639, 1643, 0,
	0, 1650, 0, 0, 0, 0, 1430, 1432, 0, 0,
	1546, 0, 0, 3023, 2764, 2766, 0, 0, 2774, 1931,
	1798, 0, 0, 0, 0, 1596, 1809, 0, 0, 1285,
	1618, 1656, 0, 0, 1827, 1827, 1824, 1825, 1967, 0,
	0, 2119, 0, 0, 2140, 0, 2595, 2597, 0, 0,
	0, 302, 131, 2482, 0, 2482, 0, 2506, 2507, 0,
	0, 0, 2580, 0, 0, 0, 0, 0, 0, 2719,
	2718, 2720, 2721, 2722, 2723, -2, 132, 2559, 3383, 2019,
	0, 1473, 0, 2801, 2803, 0, 0, 1539, 1692, 0,
	0, 0, 0, 0, 0, 2590, 0, 2601, 0, 2636,
	1967, 0, 0, 0, 2648, 2644, 0, 0, 2664, 2665,
	0, 3026, 0, 302, 2550, 0, 0, 0, 2818, 2825,
	0, 0, 0, 0, 2784, 2860, 0, 470, -2, 2550,
	2868, 0, 2783, 0, 0, 0, 3025, 3027, 0, 0,
	0, 0, 2240, 0, 2205, 2206, 0, 0, 2226, 0,
	0, 0, 0, 2173, 302, 0, 2197, 0, 0, 2076,
	0, 2030, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2219,
	0, 0, 2221, 2222, 0, 2227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2040, 0, 2044,
	2049, 2050, 2041, 2042, 0, 2057, 2047, 2048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2150, 2241, 0,
	0, 0, 0, 2152, 2241, 0, 0, 2636, 0, 0,
	0, 0, 0, 0, 2670, 2672, 0, 0, 2471, 2472,
	2473, 2474, 2476, -2, 2478, 0, 0, 0, 0, 3367,
	0, 0, 0, 0, 0, 3368, 2284, 471, 0, 3375,
	0, 3386, 3380, 0, 0, 2239, 0, 0, 0, 0,
	0, 2575, 0, 2687, 0, 0, 0, 0, 0, 3142,
	3146, 3174, 0, 2502, 434, 444, 478, 0, 0, 0,
	0, 0, 3155, 3156, 3158, 3159, 3160, 3161, 3163, 0,
	2375, 2376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2836, 0, 0, 3143, 434, 0, 0,
	0, 2856, 2858, 2857, 2859, 0, 0, 3144, 434, 0,
	0, 0, 0, 0, 2641, 0, 2646, 2647, 0, 2872,
	0, 2873, 2784, 0, 0, 2880, 0, 0, 3366, 0,
	2807, 0, 2808, 2811, 0, 3028, 3030, 0, 0, 3031,
	0, 0, 3029, 3032, 3033, 0, 2820, 2821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	2609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3071, 3072, 0, 0, 0, 0, 0,
	1871, 1872, 137, 187, 137, 161, 137, 0, 1893, 137,
	0, 0, 1451, 1455, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1502, 137, 2252, 0, 0, 0, 0, 0, 0, 3183,
	137, 0, 137, 3181, 137, 137, 137, 2385, 137, 0,
	-2, 2568, 2569, 0, 0, 2167, 3040, 3038, 3042, 2717,
	0, 0, 0, 0, 2658, 0, 170, 0, 1272, 0,
	3012, 3230, 0, 3231, 0, 3099, 3100, 0, 0, 3103,
	3104, 3105, 3106, 3107, 3108, 0, 3110, 3133, 3135, 3111,
	3112, 3113, 0, 0, 0, 0, 0, 3067, 0, 0,
	0, 0, 3089, 2549, 0, 0, 3086, 137, 0, 2301,
	2303, 302, 2550, 2326, 1906, 2322, 2328, 2324, 2345, 2344,
	2343, 2346, 2347, 2348, 0, 0, 0, 3201, 3214, 3215,
	3219, 3220, 3222, 3223, 3241, 172, 3255, 2164, 0, 0,
	0, 3262, 3264, 3266, 3398, 3399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 0, 1540, 1541, 1541, 1541,
	0, 0, 1283, 1280, 1565, 0, 1574, 0, 0, 0,
	2996, 0, 0, -2, -2, 0, 2992, 3001, 3002, 2997,
	-2, -2, 2998, 1570, 1577, 0, 1575, 0, 0, 1949,
	1944, 1945, 1562, 1563, 1653, 0, 1677, -2, -2, 333,
	294, -2, 0, 183, 1590, 1132, 1133, 0, 1135, 1138,
	1139, 1140, 1141, 1142, 1143, -2, -2, -2, -2, -2,
	-2, 1150, 1152, 1153, -2, 1431, 1433, 0, 1546, 0,
	-2, 0, 1168, 0, 1173, 1175, 1177, 0, 1190, 1192,
	0, 1447, 1434, 1435, 1436, 1437, 1438, 0, 0, 1547,
	1185, 1548, 0, 0, 1425, 1426, 1427, 1591, 0, 1172,
	0, 0, 1189, 2028, 0, 1286, 1285, 0, 0, 0,
	1416, 1417, 0, 0, 0, -2, 1541, 1251, 0, 1413,
	1409, 0, 2957, 0, 1288, 0, 0, 1739, 1131, 0,
	1744, 1782, 0, 0, 0, 0, 0, 0, 0, 0,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 0, 0,
	0, 1403, 1350, 0, 0, 1199, 0, 0, 0, 557,
	0, 0, 1403, 0, 0, 0, 0, 0, 1448, 0,
	1359, 0, 0, 0, 0, 0, 0, 0, 1373, 1376,
	0, 0, 0, 0, 0, 1739, 0, 1733, 0, 1403,
	1742, 1782, 0, 1731, -2, 1447, 0, 1748, 1345, 0,
	0, 0, 0, 1653, 0, 1615, 1651, 0, 1641, 0,
	167, 1449, 2771, 2772, 2773, 1951, 0, 0, 1803, 1804,
	0, 1805, 1285, 1802, 1797, 1656, 0, 0, 0, 1814,
	1813, 1951, 0, 1817, 1597, 1659, 1659, 0, 1603, 0,
	1668, 1659, 1659, 1682, 430, 577, 542, 165, 1389, 1390,
	1391, 533, 0, 0, 1826, 0, 0, 1966, 1968, 164,
	1970, 1971, 1972, 0, 1996, 0, 148, 0, 0, 2717,
	0, 0, 0, 0, 0, 0, 0, 0, 2496, 2481,
	2483, 0, 0, 0, 2488, 2489, 0, 2461, 2462, 2464,
	2496, 0, 2509, 2511, 2512, 2513, 2515, 2508, 0, 2579,
	0, 2674, 1467, 0, 0, 2917, 2550, 0, 2555, 0,
	0, 0, -2, 2571, 1474, 2800, 0, 0, 0, 2904,
	0, 1691, 1693, 0, 2683, 2594, 2584, 2585, 2586, 2587,
	0, 2603, 0, 0, 0, 2608, 2061, 2011, 2635, 2633,
	0, 0, 0, 0, 0, 0, 0, 2645, 0, 0,
	3043, 3047, 0, 0, 0, 0, 0, 0, 0, 3057,
	3058, 0, 0, 0, 0, 0, 2119, 0, 0, 2140,
	2827, 0, 0, 2842, 2843, 0, 2848, 2850, 2851, 0,
	168, 2784, 2855, 0, 2550, 0, -2, 2870, 2870, 0,
	0, 0, 2163, 2406, 0, 0, 2202, 2204, 0, 2225,
	3318, 0, 2450, 2453, 0, 145, 0, 2175, 302, 1994,
	0, 0, 0, 2441, 0, 0, 0, 0, 0, 1897,
	0, 2441, 302, 137, 302, 137, 2199, 2203, 2207, 2210,
	2211, 0, 0, 0, 0, 2215, 0, 2212, 2213, 2214,
	2218, 0, 2220, 0, 2223, 2228, 2796, 2797, 2798, 0,
	0, 0, 2788, 2790, 445, 193, 265, 0, 2015, 2142,
	2155, 2241, 0, 0, 2414, 0, 2237, 2144, 0, 0,
	2408, 3325, 2045, 2051, 2052, 2053, 2055, 2147, 0, 2600,
	0, 2410, 0, 3327, 2149, 2241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 2386, 3307, 3334, 2666, 2667, 0, 0, 0, 0,
	2470, 0, 2469, 1476, 2475, 1476, 1476, 2387, 3308, 3335,
	2388, 3309, 3336, 2389, 3337, 3370, 3371, 3376, 3377, 3378,
	2390, 0, 2573, 137, 302, 2238, 2574, 3310, 0, 0,
	2441, 2578, 3338, 2393, 3312, 3339, 0, 0, 0, 3153,
	3154, 2374, 0, 2394, 3036, 0, 0, 0, 0, 3313,
	0, 3164, 3168, 3342, 2379, 0, 0, 0, 2838, 0,
	0, 2400, 3316, 3345, 0, 2401, 3356, 2402, 3317, 3346,
	0, 2403, 3347, 2404, 3354, 2405, 2784, 2874, 2784, 2784,
	3357, 0, 0, 0, 0, 0, 2809, 2810, 2431, 3045,
	3035, 2432, 0, 2433, 3349, 2434, 2846, 1874, 1875, 3320,
	3350, 0, 0, 0, 0, 0, 0, 3397, 0, 0,
	0, 0, 0, 0, 0, 0, 2439, 0, 0, 0,
	0, 137, 2681, 302, 137, 0, 3333, 3187, 0, 0,
	3348, 1897, 2610, 0, 2613, 2614, 2615, 0, 2617, 2618,
	2619, 221, 283, 2622, 2623, 0, 2625, 3311, 0, 0,
	0, 0, 0, 0, 0, 2242, 2244, 2246, 0, 2249,
	1456, 0, 0, 0, 1465, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 0, 1475, 1518, 1515, 1513, 1514, 1515, 0,
	1504, 2251, 137, 0, 137, 0, 137, 0, 2271, 0,
	2261, 2263, 2265, 2267, 2269, 0, 2564, 2566, 0, 0,
	0, 2692, 0, 2570, 0, 0, 2657, 2276, 2742, 2747,
	0, 2903, 3124, 3119, 3121, 0, 0, 3102, 3109, 3137,
	0, 0, 0, 0, 0, 0, 0, 3132, 3126, 0,
	0, 3090, 163, 3132, 0, 3069, 0, 0, 2321, 2339,
	0, 3203, 3204, 3256, 3258, 3265, 3259, 3260, 0, 0,
	3267, 3285, 3286, 3268, 3269, 3270, 3271, 3272, 3273, 3274,
	0, 0, 0, 263, 0, 3278, 3279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1396, 0, 1402, 0, 0, 0, 0, 1404, 1405, 0,
	1279, 1572, 2986, 0, 2989, 0, 2999, 3000, 0, 0,
	1578, 2947, 1949, 1522, 0, 2949, 0, 2931, 0, 1595,
	0, 0, 174, 174, 174, 174, 0, 182, 0, 0,
	-2, -2, 0, 0, 0, 1186, 0, -2, 1170, 1174,
	1176, 1178, 0, 1191, 1194, 0, 1447, 0, 1193, 1196,
	0, 0, 1439, 1440, 1441, 1442, 0, 0, 0, 1187,
	0, 0, 0, 0, 2029, 1224, 1449, 1414, 1415, 0,
	1234, 1521, -2, 0, 0, 0, 1410, 0, 0, 1287,
	0, 2955, 2956, 2960, 0, 1447, 0, 0, 0, 0,
	1742, 0, 1723, 1781, 0, 0, 1293, 1295, 1297, 1299,
	0, 1308, 0, 1309, 0, 1311, 1312, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1201, 1202, 1216, 1314,
	1315, 0, 0, 0, 0, 0, 0, 0, 1320, 0,
	1358, 0, 1322, 1323, 1324, 1325, 0, 1330, 0, 0,
	1379, 0, 0, 0, 0, 1336, 1447, 0, 1338, 1782,
	1748, 0, 0, 0, 1748, 1341, 0, 1343, 0, 0,
	0, 0, 0, 2931, 1674, 1637, 1642, 1795, 0, 1934,
	0, 0, 0, 1807, 1951, 1810, 1811, 0, 0, 1816,
	1654, 242, 0, 0, 0, 0, 0, 1630, 1630, 1630,
	1628, 1599, 1658, 0, 1663, 1601, 1659, 1668, 1659, 1659,
	-2, 1603, 0, 1605, 1664, 0, 1663, 1607, 1609, 1679,
	0, 0, 0, 0, -2, 0, 2061, 1828, 1829, 1830,
	-2, 2109, 0, 1976, 2111, 0, 1996, 2123, 0, 0,
	2118, 2550, 0, 2694, 3242, 0, 2139, 0, 2598, 2134,
	0, 2482, 0, 2477, 2458, 2494, 0, 0, 2484, 2485,
	2490, 2486, 2487, 0, 2460, 0, 0, 0, 2459, 0,
	0, 0, 0, 2673, 0, 0, 0, 3192, 3193, 3194,
	3195, 0, 0, 2140, 0, 0, 0, 2558, 2018, 0,
	2021, 2022, 0, 0, 2067, 2030, 0, 0, 0, 0,
	0, 2024, 0, 2802, 2804, 2777, 2778, 2779, 2780, 2781,
	2782, 371, 1526, 1527, 0, 2592, 0, 1697, 0, 2682,
	2684, 2589, 0, 2605, 2606, 2607, 2604, 2626, 0, 2634,
	2629, 2637, 2630, 2632, 2631, 2109, 1996, 0, 0, 2649,
	2011, 0, 3048, 3049, 3050, 0, 0, 3053, 3054, 0,
	0, 0, 0, 3061, 2717, 0, 2140, 2441, 0, 0,
	2817, 2834, 0, 2824, 0, 0, 0, 0, 0, 2854,
	2861, 2870, 0, 2870, 2865, 0, 2867, 2784, 0, 0,
	0, 0, 2224, 2794, 2795, 2449, 0, 0, 0, 2234,
	0, 2006, 2235, 2236, 0, 0, 1990, 1993, 0, 2075,
	2134, 0, 0, 2079, 0, 0, 2441, 0, 0, 2133,
	2177, 0, 0, 0, 0, 2190, 0, 2196, 2033, -2,
	0, 2198, 0, 2194, 0, 2201, 2208, 2216, 2209, 2217,
	2229, 2230, 0, 0, 2231, 2787, 0, 2791, 2792, 2793,
	2014, 2016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2412, 0,
	3329, 0, 2151, 2241, 0, 0, 2416, 0, 3331, 2153,
	2241, 0, 0, 2627, 0, 0, 2671, 0, 2467, 2468,
	0, 1476, 0, 2576, 0, 2686, 0, 2689, 0, 3147,
	0, 2377, 2395, 3340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3358, 0, 0, 0, 0, 0, 2840,
	0, 2835, 0, 0, 0, 2877, 2875, 2876, 0, 0,
	0, 2430, 3355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2677, 0, 3188, 0, 3190, 3184, 0, 0, 2612, 0,
	0, 0, 0, 0, 0, 0, 3074, 3075, 3076, 3341,
	137, 1457, 1452, 0, 1274, 1508, 1510, 1506, 2253, 0,
	2255, 0, 2257, 0, 137, 2562, 0, 0, 2662, 0,
	2715, 0, 0, 0, 0, 3132, 0, 0, 3122, 3101,
	0, 3134, 3136, 0, 0, 0, 0, 0, 3068, 0,
	3127, 3128, 3129, 3130, 3131, 137, 0, 3132, 0, 3196,
	3261, 3263, 0, 0, 0, 0, 0, 0, 3283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1541, 1397, 1399, 1400, 1284, 2987, 0, 2990, 0, 1423,
	0, 2948, 0, 1947, 1948, 2944, 0, 1652, 175, 176,
	0, 0, 0, 0, 181, 1134, -2, 0, 0, -2,
	0, 0, -2, 0, 0, 1195, 1197, -2, 1444, 1446,
	0, 0, 1549, 0, -2, 0, 1420, 0, -2, 1418,
	1396, 1252, 1406, 1412, 0, 0, 2962, 2959, 0, 1748,
	0, 0, 1735, 1736, 1748, 0, 1780, 1290, 0, 1360,
	0, 0, 1200, 1203, 1204, 1205, 1206, 1207, 1208, -2,
	-2, -2, -2, -2, -2, 1215, 0, 0, 1219, 1371,
	0, 1354, 1355, 0, 1317, 1318, 1319, 1357, 0, 1326,
	0, 1374, 1375, 0, 0, 0, 1332, 1700, 0, 211,
	1333, 0, 1388, 0, 1748, 1734, 1747, 0, 1732, 0,
	0, 0, 1342, 1344, 1727, 1727, 1727, 0, 2944, 0,
	1950, 0, 0, 0, 1799, 1800, 0, 1806, 1808, 0,
	1815, 0, 1598, 0, 0, 0, 0, 0, 1625, 1629,
	1626, 1627, 1600, 0, 1661, 0, 1602, 1606, 1608, 1610,
	1619, 1661, 0, 0, 1681, 0, 0, 572, 0, 0,
	1838, 2061, 0, 1898, 2111, 0, 1969, 1973, 2119, 2110,
	0, 0, 1997, 1999, 2000, 2019, 0, 2125, 0, 146,
	147, 1967, 0, 0, 0, 2717, 2554, 2140, 2596, 0,
	0, 2496, 0, 2499, 2497, 0, 0, 0, 2463, 2465,
	2466, 2517, 2510, 2514, 0, 2675, 0, 2676, 0, 0,
	2922, 0, 0, 0, 302, 2719, 0, 2023, 2025, 2066,
	2784, 2784, 0, 2071, 2550, 0, 2031, 0, 2026, 2027,
	0, 1694, 1695, 0, 2593, 0, 2591, 2602, 0, 2638,
	0, 0, 1967, 0, 0, 0, 2659, 0, 3051, 3052,
	3055, 3056, 3059, 3060, 2690, 0, 2125, 2693, 0, 2534,
	2535, 0, 2812, 0, 2838, 0, 2826, 2828, 2829, 2830,
	2831, 2832, 2841, 2844, 2849, 2852, 0, 2862, 2863, 2864,
	2866, 0, 2871, 0, 0, 0, 2418, 2424, 2451, 2452,
	2455, 0, 2174, 0, 2011, 1989, 0, 1991, 1992, 2441,
	0, 2442, 0, 2444, 0, 0, 2128, 0, 2081, 0,
	0, 2086, 0, 1943, 1943, 0, 0, 2181, 2191, 1896,
	2037, 0, 0, 0, 0, 2185, 2187, 2188, 2186, 0,
	2034, 0, 0, 0, 0, 137, 137, 2232, 2799, 2789,
	2407, 0, 0, 3319, 0, 0, 3364, 2415, 0, 0,
	2409, 3326, 2420, 2411, 0, 3328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2392, 3353, 0,
	2668, 2479, 0, 2391, 137, 2441, 3359, 3148, 0, 0,
	0, 0, 2905, 2890, 0, 0, 0, 2906, 2907, 0,
	0, 0, 0, 3165, 3166, 3167, 3169, 3170, 3171, 3172,
	3173, 2380, 2382, 2381, 2398, 2823, 0, 0, 0, 3360,
	3361, 2428, 2429, 0, 2661, 2847, 2435, 3321, 2436, 3322,
	3351, 2437, 3323, 2438, 3324, 3352, 0, 0, 0, 0,
	0, 137, 2680, 0, 0, 140, 137, 0, 0, 0,
	0, 0, 0, 3080, 3081, 3082, 3083, 3084, 3085, 0,
	0, 2247, 1453, 137, 137, 137, 2259, 2565, 0, 0,
	2716, 0, 2655, 2748, 3064, 3120, 0, 3138, 3114, 3115,
	3116, 3117, 3118, 3125, 3065, 0, 137, 0, 0, 3275,
	0, 3277, 0, 0, 3287, 3299, 3300, 3288, 3289, 3290,
	3291, 3292, 3293, 0, 3295, 3296, 0, 2988, 1422, 1449,
	0, 2951, 0, 2929, 177, 178, 179, 180, -2, -2,
	0, 0, 0, -2, -2, 1443, 1445, -2, -2, 1188,
	1419, 1449, 1249, 1411, 1542, 1541, 0, 1544, 0, 1737,
	1738, 0, 1743, 0, 1307, 1310, 0, 0, 0, 1220,
	0, 0, 0, 1316, 1321, 0, 0, 567, 1331, 1377,
	1378, 1701, 0, 1702, 1698, 1699, 0, 0, 0, 1383,
	359, 0, 1339, 1740, 1741, 1340, 1748, 0, 1764, 1748,
	1382, 2951, 1646, 0, 0, 1935, 0, 0, 1812, 1655,
	1620, 0, 1622, 0, 0, 0, 1624, 0, 0, 0,
	1604, 0, 0, 0, 159, 0, 1683, 1687, 0, 0,
	0, 1951, 1820, 1920, 1920, 0, 1822, 1835, 0, 1838,
	0, 2119, 0, 0, 0, 148, 0, 1995, 0, 2001,
	0, 2111, 3243, 0, 0, 0, 1996, 0, 2717, 0,
	3239, 2545, 0, 0, 0, 0, 2456, 0, 1688, 0,
	1471, -2, 2491, 0, 2492, 2527, 0, 2544, 1653, 0,
	0, 0, 2924, 0, 0, 0, 1967, 0, 2557, 2020,
	0, 2127, 2127, 0, 2095, 0, 2032, 0, 1696, 2685,
	0, 2012, 0, 0, 0, 0, 2011, 0, 0, 0,
	2714, 0, 0, 0, 0, 2840, 2833, 0, 0, 0,
	2886, 2886, 0, 0, 0, 0, 0, 2176, 2019, 1987,
	1988, 2077, 2091, 2443, 2447, 2445, 2446, 2448, 2091, 0,
	2091, 0, 0, 1937, 134, 0, 1938, 0, 2178, 0,
	0, 2038, 2179, 0, 2183, 0, 1697, 2036, 2184, 2193,
	2200, 0, 0, 2165, 0, 2165, 0, 0, 2422, 3363,
	2413, 0, 3330, 0, 0, 2426, 2417, 0, 3332, 2669,
	2480, 2577, 2688, 2396, 3314, 3343, 2397, 0, 0, 0,
	2896, 0, 0, 0, 3315, 3344, 0, 0, 0, 0,
	0, 0, 0, 3393, 0, 2440, 2678, 2679, 3189, 1697,
	0, 2620, 2621, 2624, 0, 0, 0, 2254, 2256, 2258,
	2563, 2663, 0, 3123, 3132, 3070, 3281, 3282, 3276, 3280,
	0, 3294, 1398, 1424, 1523, 1580, 0, 2943, 0, -2,
	-2, -2, 1421, 2966, 0, 1745, 1746, 1779, 1370, -2,
	0, 1356, 1352, 1353, 1327, 0, 1328, 0, 1703, 1334,
	1335, 0, 1384, 1337, 1773, 1726, 1728, 0, 0, 0,
	0, 1750, 1751, 1752, 1753, 1754, 1755, 1758, 1762, 0,
	1380, 0, 1581, 1649, 0, 0, 1930, 1653, 0, 1933,
	0, 1621, 0, 1632, 1623, 0, 0, 1662, 0, 1665,
	1667, 1682, 0, 1685, 0, 0, 0, 1704, 0, 0,
	1725, 1819, 1821, 0, 0, 0, 1915, 0, 1837, 1839,
	1840, 1901, 1901, 1843, 1844, 1901, 1901, 0, 0, 0,
	1854, 1862, 1653, 1833, 148, 0, 1974, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1975, 2123, 0,
	1998, 2019, 2119, 2124, 2120, 0, 0, 2109, 2111, 1996,
	2695, 3242, 0, 0, 0, 0, 0, 2134, 0, 2482,
	1690, 2495, 0, 2500, 2501, 0, 2533, 2529, 2516, 2518,
	0, 2521, 2522, 2441, 0, 0, 2912, 0, 0, 2918,
	2923, 0, 0, 2921, 2554, 2140, 0, 2068, 0, 2069,
	2085, 2100, 0, 2065, 0, 2889, 2010, 0, 2011, 0,
	2109, 1996, 2639, 0, 2011, 2717, 0, 0, 2813, 0,
	2822, 0, 2869, 2886, 2883, 0, 2882, 2911, 2454, 0,
	0, 0, 2017, 2784, 0, 2784, 0, 2784, 2087, 2088,
	371, 1946, 133, 1942, 1943, 2182, 2192, 0, 0, 2786,
	2419, 2425, 2156, 0, 2158, 0, 2421, 0, 2165, 0,
	0, 2891, 2901, 2901, 2894, 0, 2908, 0, 0, 0,
	2837, 2399, 3362, 0, 3395, 3396, 0, 0, 0, 0,
	137, 2616, 3124, 137, 0, 2011, 137, 3284, 2950, 2952,
	0, 2930, 2932, 2934, 2935, 2936, 2937, 2938, 0, 241,
	427, 528, 0, 0, 0, 0, 2961, 0, -2, 0,
	0, 1385, 1386, 1778, 0, 0, 0, 0, 1347, 0,
	1749, 1756, 1757, 0, 0, 1349, 1381, 1640, 0, 0,
	0, 0, 1932, 1936, 1801, 0, 0, 1660, 1666, 1680,
	1684, 0, 0, 1710, 0, 0, 0, 0, 1707, 1727,
	0, 0, 1919, 0, 1917, 0, 0, 0, 0, 0,
	0, 0, 1853, 1836, 0, 1856, 1857, 1858, 1859, 1860,
	0, 1823, 2123, 2108, 2125, 0, 2002, 148, 2121, 2122,
	2111, 2119, 0, 2717, 2551, 0, 0, 2554, 2136, 0,
	1689, 2496, 2498, 2493, 0, 0, 0, 2528, 2519, 1901,
	2523, 2524, 0, 2543, 2711, 0, 0, 2925, 2926, 2546,
	0, 0, 0, 2070, 0, 2072, 2096, 2097, 0, 2092,
	2093, 2094, 2073, 0, 0, 0, 0, 2013, 2650, 2011,
	0, 0, 0, 2660, 2691, 2805, 0, 0, 2815, 2845,
	2881, 2884, 2885, 0, 2008, 0, 0, 0, 2127, 0,
	2127, 2550, 2127, 0, 1949, 1946, 1939, 0, 2065, 2195,
	0, 0, 0, 2423, 2160, 0, 2427, 2063, 0, 2063,
	0, 0, 0, 0, 3389, 3390, 0, 3391, 3394, 3191,
	3077, 3078, 0, 2654, 3066, 0, 0, 0, 2939, 0,
	0, 0, 2958, 2978, 2967, -2, 486, 242, 0, 2978,
	2978, 1369, 1329, 1372, 1387, 1762, 0, 0, 1765, 0,
	1767, 0, 0, 0, 1729, 1730, 1763, 1348, 0, 0,
	0, 0, 1653, 1670, 3141, 0, 1708, 0, 1712, 0,
	1705, 0, 1706, 0, 1724, 1910, 1911, 0, 0, 1922,
	1912, 0, 0, 0, 1841, 1842, 1845, 1846, 1847, 1848,
	0, 1851, 1852, 1855, 0, 1863, 1865, 2125, 1954, 0,
	2113, 1943, 1943, 0, 2123, 2119, 148, 2111, 3240, 2552,
	2553, 2547, 2030, 0, 0, 2457, 0, 0, 2526, 2530,
	2531, 0, 0, 1637, 2709, 2710, 0, 0, 0, 1967,
	0, 2084, 2098, 0, 2099, 0, 0, 0, 0, 0,
	0, 2888, 2652, 0, 0, 2011, 0, 2814, 0, 2003,
	0, 2007, 2004, 0, 2441, 0, 2441, 2095, 1653, 0,
	1940, 1949, 2180, 2189, 2785, 2165, 2165, 0, 2892, 2062,
	2899, 0, 2893, 0, 2909, 2910, 2839, 0, 0, 2953,
	2954, 2933, 0, 0, 0, 2963, 0, 0, 2969, 2970,
	2971, 2972, 2973, 2964, 2965, 0, 1775, 1777, 1766, 1768,
	0, 1771, 0, 1772, 1759, 1760, 0, 0, 0, 1929,
	1631, 0, 3139, 0, 1686, 1711, 1714, 1715, 0, 0,
	0, 1720, 0, 1713, 0, 0, 1913, 0, 1914, 1923,
	0, 0, 0, 0, 1916, 1918, 1849, 1850, 1861, 0,
	1952, 2112, 0, 134, 134, 0, 2125, 148, 2123, 2119,
	2140, 0, 0, 0, 0, 2520, 2525, 0, 2696, 2697,
	2698, -2, 2702, 2703, 2704, 2705, 2706, 0, 2915, 2916,
	2554, 2126, 2101, 0, 2104, 2105, 0, 2102, 2064, 2074,
	2887, 2011, 0, 2640, 2806, 2816, 2009, 0, 2078, 2090,
	2080, 2100, 2441, 2089, 1941, 2157, 2159, 2165, 0, 2895,
	3392, 137, 2941, 2940, 0, 0, 2975, 2976, 0, 0,
	1346, 0, 0, 1769, 1770, 0, 0, 0, 0, 1669,
	0, 1716, 1717, 1718, 1719, 1721, 0, 0, 1921, 0,
	0, 1927, 0, 1864, 2114, 2115, 2116, 1943, 1956, 2123,
	2125, 148, 2125, 0, 2137, 2136, 0, 2532, 2533, 1550,
	-2, 0, 2701, 2707, 0, 0, 2548, 2103, 2550, 2550,
	2651, 2011, 0, 2441, 2083, 2161, 2900, 3079, 2942, 2974,
	2977, 2968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1785, 0, -2, 0, 0, 0, 134, 2125,
	1955, 2123, 1653, 2135, 0, 2030, 2538, 0, 2699, -2,
	0, 0, 2106, 2107, 2653, 0, 2082, 1774, 1776, 1761,
	0, 0, -2, 1648, 1644, 1645, 3140, 0, 1764, 0,
	0, 1794, 0, 1783, 1924, 1925, 0, 1928, 2117, 1953,
	2125, 2129, 2138, 2140, 0, 2536, 2539, 2540, 2541, 2542,
	0, 2700, 0, 0, 2005, 0, 0, 1709, 0, 1786,
	1787, 1773, 1794, 1794, 0, 0, 0, 1957, 2125, 2504,
	0, 0, 0, 0, 0, 1541, 1722, 1778, 1773, 1764,
	1793, 0, 0, 0, 1653, 2537, 0, 0, 0, 0,
	0, 1762, 1778, 1790, 0, 0, 1926, 2130, 2538, 2913,
	2914, 1647, 0, 1788, 1762, 0, 0, 0, 1789, 1791,
	0, 2505, 0, 1792,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:640
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:781
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:782
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:785
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:786
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:789
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:795
		{
			yyVAL.stmt = nil
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:806
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.list = yyDollar[1].list
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:812
		{
			yyVAL.list = nil
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:818
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:822
		{
			yyVAL.ival = 1
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:823
		{
			yyVAL.ival = 0
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:827
		{
			yyVAL.ival = 1
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:828
		{
			yyVAL.ival = 0
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:832
		{
			yyVAL.bval = true
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:833
		{
			yyVAL.bval = false
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.bval = true
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:838
		{
			yyVAL.bval = false
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:842
		{
			yyVAL.list = yyDollar[2].list
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:843
		{
			yyVAL.list = nil
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:844
		{
			yyVAL.list = nil
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = yyDollar[1].str
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = yyDollar[1].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = yyDollar[1].str
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = yyDollar[1].str
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = yyDollar[1].str
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:879
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:892
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:913
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:942
		{
			yyVAL.list = yyDollar[2].list
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:943
		{
			yyVAL.list = nil
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:952
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:965
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:978
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:984
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:990
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:996
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1002
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1009
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1016
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1022
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1041
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1057
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "abort"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "absent"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "absolute"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "access"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "action"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "add"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "admin"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "after"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "aggregate"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "also"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "alter"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "always"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "asensitive"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "assertion"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "assignment"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "at"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "atomic"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "attach"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "attribute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "backward"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "before"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "begin"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "breadth"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "by"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "cache"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "call"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "called"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "cascade"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "cascaded"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "catalog"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "chain"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "characteristics"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "checkpoint"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "class"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "close"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "cluster"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "columns"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "comment"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "comments"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "commit"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "committed"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "compression"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "conditional"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "configuration"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "conflict"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "connection"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "constraints"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "content"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "continue"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "conversion"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "copy"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "cost"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "csv"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "cube"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "current"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "cursor"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "cycle"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "data"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "database"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "day"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "deallocate"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "declare"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "defaults"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "deferred"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "definer"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "delete"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "delimiter"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "delimiters"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "depends"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "depth"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "detach"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "dictionary"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "disable"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "discard"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "document"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "domain"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "double"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "drop"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "each"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "empty"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "enable"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "encoding"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "encrypted"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "enum"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "error"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "escape"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "event"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "exclude"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "excluding"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "exclusive"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "execute"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "explain"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "expression"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "extension"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "external"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "family"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "filter"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "finalize"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "first"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "following"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "force"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "format"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "forward"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "function"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "functions"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "generated"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "global"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "granted"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "groups"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "handler"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "header"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "hold"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "hour"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "identity"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "if"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "immediate"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "immutable"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "implicit"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "import"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "include"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "including"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "increment"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "indent"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "index"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "indexes"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "inherit"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "inherits"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "inline"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "input"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "insensitive"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "insert"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "instead"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "invoker"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "isolation"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "keep"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "key"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "keys"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "label"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "language"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "large"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "last"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "leakproof"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "level"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "listen"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "load"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "local"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "location"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "lock"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "locked"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "logged"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "mapping"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "match"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "matched"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "materialized"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "maxvalue"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "merge"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "method"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "minute"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "minvalue"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "mode"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "month"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "move"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "name"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "names"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "nested"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "new"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "next"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "nfc"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "nfd"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "nfkc"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "nfkd"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "no"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "normalized"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "nothing"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "notify"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "nowait"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "nulls"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "object"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "of"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "off"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "oids"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "old"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "omit"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "operator"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "option"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "options"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "ordinality"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "others"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "over"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "overriding"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "owned"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "owner"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "parallel"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "parameter"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "parser"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "partial"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "partition"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "passing"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "password"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "path"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "plan"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "plans"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "policy"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "preceding"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "prepare"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "prepared"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "preserve"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "prior"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "privileges"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "procedural"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "procedure"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "procedures"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "program"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "publication"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "quote"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "quotes"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "range"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "read"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "reassign"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "recheck"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "recursive"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "ref"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "referencing"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "refresh"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "reindex"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "relative"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "release"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "rename"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "repeatable"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "replace"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "replica"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "reset"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "restart"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "restrict"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "return"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "returns"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "revoke"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "role"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "rollback"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "rollup"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "routine"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "routines"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "rows"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "rule"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "savepoint"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "scalar"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "schema"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "schemas"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "scroll"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "search"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "second"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "security"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "sequence"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "sequences"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "serializable"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "server"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "session"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "set"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "sets"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "share"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "show"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "simple"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "skip"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "snapshot"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "source"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "sql"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "stable"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "standalone"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "start"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "statement"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "statistics"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "stdin"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "stdout"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "storage"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "stored"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "strict"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "string"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "strip"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "subscription"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "support"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "sysid"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "system"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "tables"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "tablespace"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "target"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "temp"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "template"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "temporary"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "text"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "ties"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "transaction"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "transform"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "trigger"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "truncate"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "trusted"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "type"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "types"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "uescape"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "unbounded"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "uncommitted"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "unconditional"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "unencrypted"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "unknown"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "unlisten"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "unlogged"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "until"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "update"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "vacuum"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "valid"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "validate"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "validator"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "value"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "varying"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "version"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "view"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "views"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "volatile"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "whitespace"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "within"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "without"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "work"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "wrapper"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "write"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "xml"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "year"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "yes"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "zone"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "between"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "bigint"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "bit"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "boolean"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "char"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "character"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "coalesce"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "dec"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "decimal"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "exists"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "extract"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "float"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "greatest"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "grouping"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "inout"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "int"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "integer"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "interval"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "json"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "json_array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "json_arrayagg"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "json_exists"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "json_object"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "json_objectagg"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "json_query"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "json_scalar"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "json_serialize"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "json_table"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "json_value"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "least"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "merge_action"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "national"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "nchar"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "none"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "normalize"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "nullif"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "numeric"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "out"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "overlay"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "position"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "precision"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "real"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "row"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "setof"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "smallint"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "substring"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "time"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "timestamp"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "treat"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "trim"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "values"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "varchar"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "xmlattributes"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "xmlconcat"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "xmlelement"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "xmlexists"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "xmlforest"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "xmlparse"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "xmlpi"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "xmlroot"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "xmlserialize"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "xmltable"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "authorization"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "binary"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "collation"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "concurrently"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "cross"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "current_schema"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "freeze"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "full"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "ilike"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "inner"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "is"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "isnull"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "join"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "left"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "like"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "natural"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "notnull"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "outer"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "overlaps"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "right"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "similar"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "tablesample"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "verbose"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "all"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "analyse"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "analyze"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "and"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "any"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "array"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "as"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "asc"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "asymmetric"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "both"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "case"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "cast"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "check"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "collate"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "column"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "constraint"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "create"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "current_catalog"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "current_date"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "current_role"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "current_time"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "current_timestamp"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "current_user"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "default"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "deferrable"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "desc"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "distinct"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "do"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "else"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "end"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "except"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "false"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "fetch"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "for"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "foreign"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "from"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "grant"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "group"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "having"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "in"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "initially"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "intersect"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "into"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "lateral"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "leading"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "limit"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "localtime"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "localtimestamp"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "not"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "null"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "offset"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "on"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "only"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "or"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "order"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "placing"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "primary"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "references"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "returning"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "select"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "session_user"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "some"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "symmetric"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "system_user"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "table"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "then"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "to"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "trailing"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "true"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "union"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "unique"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "user"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "using"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "variadic"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "when"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "where"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "window"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "with"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "abort"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "absent"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "absolute"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "access"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "action"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "add"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "admin"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "after"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "aggregate"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "all"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "also"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "alter"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "always"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "analyse"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "analyze"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "and"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "any"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "asc"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "asensitive"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "assertion"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "assignment"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "asymmetric"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "at"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "atomic"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "attach"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "attribute"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "authorization"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "backward"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "before"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "begin"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "between"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "bigint"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "binary"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "bit"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "boolean"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "both"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "breadth"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "by"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "cache"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "call"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "called"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "cascade"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "cascaded"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "case"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "cast"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "catalog"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "chain"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "characteristics"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "check"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "checkpoint"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "class"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "close"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "cluster"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "coalesce"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "collate"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "collation"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "column"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "columns"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "comment"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "comments"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "commit"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "committed"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "compression"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "concurrently"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "conditional"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "configuration"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "conflict"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "connection"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "constraint"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "constraints"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "content"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "continue"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "conversion"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "copy"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "cost"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "cross"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "csv"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "cube"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "current"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "current_catalog"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "current_date"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "current_role"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "current_schema"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "current_time"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "current_timestamp"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "current_user"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "cursor"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "cycle"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "data"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "database"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "deallocate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "dec"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "decimal"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "declare"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "default"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "defaults"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "deferrable"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "deferred"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "definer"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "delete"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "delimiter"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "delimiters"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "depends"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "depth"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "desc"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "detach"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "dictionary"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "disable"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "discard"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "distinct"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "do"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "document"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "domain"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "double"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "drop"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "each"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "else"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "empty"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "enable"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "encoding"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "encrypted"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "end"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "enum"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "error"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "escape"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "event"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "exclude"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "excluding"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "exclusive"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "execute"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "exists"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "explain"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "expression"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "extension"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "external"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "extract"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "false"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "family"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "finalize"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "first"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "float"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "following"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "force"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "foreign"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "format"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "forward"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "freeze"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "full"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "function"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "functions"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "generated"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "global"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "granted"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "greatest"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "grouping"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "groups"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "handler"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "header"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "hold"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "identity"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "if"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "ilike"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "immediate"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "immutable"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "implicit"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "import"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "in"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "include"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "including"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "increment"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "indent"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "index"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "indexes"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "inherit"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "inherits"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "initially"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "inline"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "inner"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "inout"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "input"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "insensitive"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "insert"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "instead"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "int"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "integer"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "interval"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "invoker"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "is"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "isolation"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "join"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "json"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "json_array"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "json_arrayagg"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "json_exists"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "json_object"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "json_objectagg"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "json_query"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "json_scalar"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "json_serialize"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "json_table"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "json_value"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "keep"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "key"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "keys"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "label"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "language"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "large"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "last"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "lateral"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "leading"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "leakproof"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "least"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "left"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "level"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "like"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "listen"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "load"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "local"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "localtime"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "localtimestamp"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "location"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "lock"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "locked"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "logged"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "mapping"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "match"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "matched"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "materialized"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "maxvalue"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "merge"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "merge_action"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "method"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "minvalue"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "mode"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "move"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "name"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "names"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "national"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "natural"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "nchar"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "nested"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "new"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "next"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "nfc"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "nfd"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "nfkc"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "nfkd"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "no"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "none"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "normalize"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "normalized"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "not"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "nothing"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "notify"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "nowait"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "null"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "nullif"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "nulls"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "numeric"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "object"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "of"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "off"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "oids"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "old"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "omit"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "only"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "operator"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "option"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "options"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "or"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "ordinality"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "others"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "out"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "outer"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "overlay"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "overriding"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "owned"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "owner"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "parallel"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "parameter"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "parser"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "partial"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "partition"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "passing"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "password"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "path"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "placing"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "plan"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "plans"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "policy"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "position"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "preceding"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "prepare"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "prepared"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "preserve"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "primary"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "prior"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "privileges"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "procedural"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "procedure"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "procedures"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "program"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "publication"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "quote"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "quotes"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "range"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "read"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "real"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "reassign"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "recheck"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "recursive"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "ref"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "references"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "referencing"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "refresh"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "reindex"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "relative"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "release"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "rename"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "repeatable"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "replace"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "replica"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "reset"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "restart"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "restrict"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "return"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "returns"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "revoke"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "right"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "role"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "rollback"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "rollup"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "routine"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "routines"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "row"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "rows"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "rule"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "savepoint"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "scalar"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "schema"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "schemas"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "scroll"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "search"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "security"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "select"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "sequence"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "sequences"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "serializable"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "server"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "session"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "session_user"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "set"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "setof"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "sets"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "share"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "show"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "similar"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "simple"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "skip"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "smallint"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "snapshot"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "some"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "source"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "sql"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "stable"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "standalone"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "start"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "statement"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "statistics"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "stdin"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "stdout"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "storage"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "stored"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "strict"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "string"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "strip"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "subscription"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "substring"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "support"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "symmetric"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "sysid"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "system"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "system_user"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "table"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "tables"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "tablesample"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "tablespace"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "target"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "temp"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "template"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "temporary"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "text"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "then"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "ties"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "time"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "timestamp"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "trailing"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "transaction"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "transform"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "treat"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "trigger"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.str = "trim"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.str = "true"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.str = "truncate"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2009
		{
			yyVAL.str = "trusted"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.str = "type"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.str = "types"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.str = "uescape"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2013
		{
			yyVAL.str = "unbounded"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.str = "uncommitted"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.str = "unconditional"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.str = "unencrypted"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2017
		{
			yyVAL.str = "unique"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.str = "unknown"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.str = "unlisten"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.str = "unlogged"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.str = "until"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.str = "update"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.str = "user"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.str = "using"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2025
		{
			yyVAL.str = "vacuum"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2026
		{
			yyVAL.str = "valid"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.str = "validate"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.str = "validator"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2029
		{
			yyVAL.str = "value"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2030
		{
			yyVAL.str = "values"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.str = "varchar"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2032
		{
			yyVAL.str = "variadic"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.str = "verbose"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2034
		{
			yyVAL.str = "version"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2035
		{
			yyVAL.str = "view"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2036
		{
			yyVAL.str = "views"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2037
		{
			yyVAL.str = "volatile"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2038
		{
			yyVAL.str = "when"
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2039
		{
			yyVAL.str = "whitespace"
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.str = "work"
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2041
		{
			yyVAL.str = "wrapper"
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2042
		{
			yyVAL.str = "write"
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2043
		{
			yyVAL.str = "xml"
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2044
		{
			yyVAL.str = "xmlattributes"
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2045
		{
			yyVAL.str = "xmlconcat"
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2046
		{
			yyVAL.str = "xmlelement"
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2047
		{
			yyVAL.str = "xmlexists"
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2048
		{
			yyVAL.str = "xmlforest"
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2049
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2050
		{
			yyVAL.str = "xmlparse"
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2051
		{
			yyVAL.str = "xmlpi"
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2052
		{
			yyVAL.str = "xmlroot"
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2053
		{
			yyVAL.str = "xmlserialize"
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2054
		{
			yyVAL.str = "xmltable"
		}
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2055
		{
			yyVAL.str = "yes"
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2056
		{
			yyVAL.str = "zone"
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2071
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2073
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2077
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2083
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2088
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2093
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2098
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2103
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2108
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2113
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2118
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2123
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2128
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2133
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2138
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2143
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2148
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2153
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2158
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2163
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2167
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2171
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2175
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2179
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2183
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2187
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2192
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2199
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2204
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2211
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2216
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2223
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2228
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2235
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2242
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2249
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2256
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2263
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2275
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2279
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2288
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2292
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2296
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2300
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2304
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2308
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2312
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2317
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2322
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2327
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2332
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2337
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2342
		{
			// in_expr returns a SubLink or a list of a_exprs
			if sublink, ok := yyDollar[3].node.(*ast.SubLink); ok {
				// generate foo = ANY (subquery)
				sublink.SubLinkType = ast.ANY_SUBLINK
				sublink.SubLinkId = 0
				sublink.Testexpr = yyDollar[1].node
				sublink.OperName = nil // show it's IN not = ANY
				yyVAL.node = sublink
			} else {
				// generate scalar IN expression
				name := ast.NewNodeList(ast.NewString("="))
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
			}
		}
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2358
		{
			// in_expr returns a SubLink or a list of a_exprs
			if sublink, ok := yyDollar[4].node.(*ast.SubLink); ok {
				// generate NOT (foo = ANY (subquery))
				// Make an = ANY node
				sublink.SubLinkType = ast.ANY_SUBLINK
				sublink.SubLinkId = 0
				sublink.Testexpr = yyDollar[1].node
				sublink.OperName = nil // show it's IN not = ANY
				// Stick a NOT on top
				yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(sublink))
			} else {
				// generate scalar NOT IN expression
				name := ast.NewNodeList(ast.NewString("<>"))
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
			}
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2376
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2385
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2395
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2399
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2404
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2410
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2416
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2423
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2430
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2438
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2455
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2479
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2481
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2485
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2490
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2494
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2499
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2504
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2509
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2514
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2519
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2524
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2529
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2534
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2539
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2544
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2549
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2554
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2558
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2562
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2567
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2572
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2577
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2585
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2587
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2596
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(ast.NewParenExpr(yyDollar[2].node, 0), yyDollar[4].list, 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2603
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2604
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2606
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2610
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2627
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2633
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2639
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2656
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2657
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2658
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2659
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2660
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2664
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2668
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2672
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2676
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2680
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2684
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2688
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2697
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2704
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2714
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2719
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2726
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2737
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2740
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2744
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2745
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2749
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2756
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2758
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2760
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2762
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2764
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2766
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2776
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2780
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2791
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2795
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2806
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2817
		{
			yyVAL.list = nil
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2822
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2826
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2836
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2840
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2850
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2854
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2860
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2861
		{
			yyVAL.node = nil
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2865
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2869
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2873
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2877
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2882
		{
			yyVAL.list = nil
		}
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2884
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2896
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2920
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2953
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2959
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2967
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2972
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2977
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2982
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2987
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2992
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2997
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3002
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3007
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3012
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3017
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3022
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3027
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3035
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3040
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3045
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3050
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3054
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3062
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3070
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3080
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3088
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3096
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3104
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3112
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3120
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3129
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3137
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3145
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3153
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3161
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3167
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3172
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3177
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3182
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3187
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3192
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3197
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1329:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3202
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3207
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3212
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3221
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3230
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1334:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3235
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3241
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3247
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3258
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3266
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3278
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3290
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3303
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3311
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3317
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3323
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3331
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1346:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3342
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3367
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1348:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3383
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3403
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3413
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3417
		{
			yyVAL.list = nil
		}
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3424
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3432
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3436
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3452
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3457
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3461
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3468
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3479
		{
			yyVAL.str = "year"
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3480
		{
			yyVAL.str = "month"
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3481
		{
			yyVAL.str = "day"
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3482
		{
			yyVAL.str = "hour"
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3483
		{
			yyVAL.str = "minute"
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3484
		{
			yyVAL.str = "second"
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3485
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3490
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3495
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3503
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3511
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3515
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3523
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3527
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3532
		{
			yyVAL.bval = true
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3533
		{
			yyVAL.bval = false
		}
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3534
		{
			yyVAL.bval = false
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3537
		{
			yyVAL.bval = true
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3538
		{
			yyVAL.bval = false
		}
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3539
		{
			yyVAL.bval = false
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3544
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3548
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3555
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3559
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3563
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3567
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3574
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3575
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3584
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3595
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3599
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3606
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			if yyDollar[4].list != nil {
				funcCall.AggOrder = yyDollar[4].list
			}
			yyVAL.node = funcCall
		}
	case 1397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3614
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.FuncVariadic = true
			if yyDollar[5].list != nil {
				funcCall.AggOrder = yyDollar[5].list
			}
			yyVAL.node = funcCall
		}
	case 1398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3623
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			funcCall.FuncVariadic = true
			if yyDollar[7].list != nil {
				funcCall.AggOrder = yyDollar[7].list
			}
			yyVAL.node = funcCall
		}
	case 1399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3634
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			funcCall.AggDistinct = false // ALL is explicit (though this is default)
			if yyDollar[5].list != nil {
				funcCall.AggOrder = yyDollar[5].list
			}
			yyVAL.node = funcCall
		}
	case 1400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3643
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			funcCall.AggDistinct = true
			if yyDollar[5].list != nil {
				funcCall.AggOrder = yyDollar[5].list
			}
			yyVAL.node = funcCall
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3658
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3665
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3669
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3680
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.node = nil
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3690
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3692
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3700
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3706
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3707
		{
			yyVAL.node = nil
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3712
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3716
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3727
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3734
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3737
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3745
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3749
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3756
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3757
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3762
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3766
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3770
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3774
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3782
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3788
		{
			yyVAL.str = "NFC"
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3789
		{
			yyVAL.str = "NFD"
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3790
		{
			yyVAL.str = "NFKC"
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3791
		{
			yyVAL.str = "NFKD"
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3796
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3797
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3798
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3799
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3803
		{
			yyVAL.bval = true
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3804
		{
			yyVAL.bval = true
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3805
		{
			yyVAL.bval = false
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3806
		{
			yyVAL.bval = false
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.bval = false
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3812
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3816
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3825
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3830
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3841
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3847
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3861
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3870
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3879
		{
			yyVAL.list = nil
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3884
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3886
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3887
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3888
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3895
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3899
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3902
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3903
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3907
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3910
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3917
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3921
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3932
		{
			yyVAL.list = nil
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3938
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			typeName.Typmods = yyDollar[2].list
			yyVAL.typnam = typeName
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3944
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			typeName.Typmods = yyDollar[3].list
			yyVAL.typnam = typeName
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3955
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3959
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3963
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3967
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3971
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3983
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3993
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3998
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4004
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4008
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4014
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4018
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4024
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4028
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4036
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4040
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4048
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4056
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4064
		{
			yyVAL.str = "varchar"
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4068
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4076
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4084
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4094
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4105
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4119
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4133
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4145
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4157
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4167
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4179
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.ival = 1
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4197
		{
			yyVAL.ival = 0
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.ival = 0
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.ival = 1
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4202
		{
			yyVAL.ival = 0
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4206
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4223
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4227
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4234
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4238
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4244
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.str = "+"
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4248
		{
			yyVAL.str = "-"
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4249
		{
			yyVAL.str = "*"
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4250
		{
			yyVAL.str = "/"
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4251
		{
			yyVAL.str = "%"
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.str = "^"
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4253
		{
			yyVAL.str = "<"
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4254
		{
			yyVAL.str = ">"
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4255
		{
			yyVAL.str = "="
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4256
		{
			yyVAL.str = "<="
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4257
		{
			yyVAL.str = ">="
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4258
		{
			yyVAL.str = "<>"
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4262
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4266
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4275
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.list = nil
		}
	case 1542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4281
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4285
		{
			yyVAL.list = nil
		}
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4290
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4294
		{
			yyVAL.node = nil
		}
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4298
		{
			yyVAL.ival = 0
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4299
		{
			yyVAL.ival = 0
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4303
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4308
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4323
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4324
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4328
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4329
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4338
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4339
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4350
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4357
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4369
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4381
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4387
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4394
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4407
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4426
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4427
		{
			yyVAL.list = nil
		}
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4431
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4432
		{
			yyVAL.list = nil
		}
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4437
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4441
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4449
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4461
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4462
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4463
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4464
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4468
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4469
		{
			yyVAL.list = nil
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4474
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4475
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4476
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1580:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4487
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1581:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4506
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4524
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4534
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4539
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4544
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4549
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4560
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4561
		{
			yyVAL.list = nil
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4565
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4566
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4571
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4575
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4580
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4585
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4596
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4597
		{
			yyVAL.list = nil
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4601
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4602
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4611
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4619
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4629
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4640
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4651
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4655
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4661
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4679
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4698
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4706
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4715
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4723
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4735
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4741
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4748
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4754
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4760
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4770
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4774
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4780
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4797
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4801
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4810
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4836
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4862
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4870
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4880
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4881
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4883
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4888
		{
			yyVAL.ival = 1
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4889
		{
			yyVAL.ival = 0
		}
	case 1631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4899
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4910
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4921
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4925
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4929
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4935
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4936
		{
			yyVAL.with = nil
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4941
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4945
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1640:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4953
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4981
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4982
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4983
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1644:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4988
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1645:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4994
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5000
		{
			yyVAL.node = nil
		}
	case 1647:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5007
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5016
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.node = nil
		}
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5035
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5043
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5057
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5058
		{
			yyVAL.node = nil
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5068
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5072
		{
			yyVAL.node = nil
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5076
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5084
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5085
		{
			yyVAL.alias = nil
		}
	case 1660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5090
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5095
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5099
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5119
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5123
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5128
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5133
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5141
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5145
		{
			yyVAL.alias = nil
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5153
		{
			yyVAL.ival = 1
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5154
		{
			yyVAL.ival = 0
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5158
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5159
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5163
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5164
		{
			yyVAL.list = nil
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5174
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5177
		{
			yyVAL.into = nil
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5188
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1680:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5197
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.ival = 1
		}
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5208
		{
			yyVAL.ival = 0
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5214
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5218
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5225
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5234
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5235
		{
			yyVAL.list = nil
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5245
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5249
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5261
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5274
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5275
		{
			yyVAL.list = nil
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5281
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5285
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5294
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			if collClause, ok := yyDollar[3].node.(*ast.CollateClause); ok {
				columnDef.Collclause = collClause
			}
			yyVAL.node = columnDef
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5306
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5311
		{
			yyVAL.node = nil
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5316
		{
			yyVAL.str = "BY REF"
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5317
		{
			yyVAL.str = "BY VALUE"
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5323
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5327
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5335
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5343
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5347
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5355
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5360
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1708:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5369
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1709:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5377
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5392
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5401
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5406
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5411
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)

			// Process column options from $3, matching PostgreSQL's implementation
			optionsList := yyDollar[3].list
			if optionsList != nil {
				for _, option := range optionsList.Items {
					if defElem, ok := option.(*ast.DefElem); ok {
						if defElem.Defname == "path" {
							rangeTableFuncCol.ColExpr = defElem.Arg
						} else if defElem.Defname == "default" {
							rangeTableFuncCol.ColDefExpr = defElem.Arg
						} else if defElem.Defname == "is_not_null" {
							if boolVal, ok := defElem.Arg.(*ast.Boolean); ok {
								rangeTableFuncCol.IsNotNull = boolVal.BoolVal
							}
						}
					}
				}
			}

			yyVAL.node = rangeTableFuncCol
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5443
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5452
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5460
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5464
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1722:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5481
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			// Set PASSING clause if present
			if yyDollar[7].node != nil {
				jsonTable.Passing = yyDollar[7].node.(*ast.NodeList)
			}
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			// Set ON ERROR clause if present
			if yyDollar[12].node != nil {
				jsonTable.OnError = yyDollar[12].node.(*ast.JsonBehavior)
			}
			yyVAL.node = jsonTable
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5513
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5524
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5525
		{
			yyVAL.node = nil
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5530
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5531
		{
			yyVAL.node = nil
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5535
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5536
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5541
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5547
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5548
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5554
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5558
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5570
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5574
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5581
		{
			yyVAL.bval = false
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5582
		{
			yyVAL.bval = true
		}
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5583
		{
			yyVAL.bval = false
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.bval = false
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.bval = true
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5589
		{
			yyVAL.bval = true
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5594
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5595
		{
			yyVAL.list = nil
		}
	case 1745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5606
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1746:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5621
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5634
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5641
		{
			yyVAL.node = nil
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5647
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5655
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5666
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5667
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5668
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5669
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5670
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5671
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5672
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5673
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5678
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5682
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1761:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5686
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5690
		{
			yyVAL.node = nil
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5695
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5696
		{
			yyVAL.node = nil
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5701
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5702
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5703
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5704
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5705
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5706
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5707
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5708
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5714
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5715
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5716
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5717
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5718
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5724
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5744
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5754
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5755
		{
			yyVAL.node = nil
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5760
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5761
		{
			yyVAL.node = nil
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5767
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5771
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5780
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1788:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5789
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1789:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5803
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5817
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1791:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5828
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1792:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5837
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5848
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5849
		{
			yyVAL.node = nil
		}
	case 1795:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5865
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5877
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5881
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5890
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1799:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5896
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5903
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1801:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5910
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5918
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5927
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5933
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5937
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5945
		{
			yyVAL.target = ast.NewResTargetWithIndirection(yyDollar[1].str, yyDollar[2].list)
		}
	case 1808:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5957
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5970
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5974
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5985
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5991
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6011
		{
			yyVAL.target = ast.NewResTargetWithIndirection(yyDollar[1].str, yyDollar[2].list)
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6017
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6018
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1816:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6028
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6040
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6044
		{
			yyVAL.list = nil
		}
	case 1819:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6059
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6080
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1822:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6091
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1823:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6115
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6151
		{
			yyVAL.ival = 1
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6152
		{
			yyVAL.ival = 0
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6156
		{
			yyVAL.ival = 1
		}
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6157
		{
			yyVAL.ival = 0
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6161
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6162
		{
			yyVAL.str = ""
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6163
		{
			yyVAL.str = ""
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6168
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6171
		{
			yyVAL.node = nil
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6176
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.node = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6183
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6184
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6189
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6197
		{
			yyVAL.list = nil
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6204
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6208
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6216
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6224
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6228
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6232
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6236
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6240
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6244
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6248
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6252
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6268
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6272
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6285
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6286
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6287
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6288
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6289
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6290
		{
			yyVAL.node = nil
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6295
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6299
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6305
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6309
		{
			yyVAL.str = "true"
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6310
		{
			yyVAL.str = "false"
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6311
		{
			yyVAL.str = "on"
		}
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6312
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6316
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6317
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6319
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6324
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.node = nil
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6333
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6335
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6336
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6337
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6338
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6340
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6344
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6345
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6346
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6350
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6351
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6352
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6353
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6354
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6359
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6364
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6371
		{
			yyVAL.bval = true
		}
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6372
		{
			yyVAL.bval = false
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6376
		{
			yyVAL.ival = 1
		}
	case 1897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6377
		{
			yyVAL.ival = 0
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6393
		{
			yyVAL.node = nil
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6395
		{
			yyVAL.node = nil
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6403
		{
			yyVAL.ival = 1
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6404
		{
			yyVAL.ival = 0
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6408
		{
			yyVAL.ival = 1
		}
	case 1905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6409
		{
			yyVAL.ival = 0
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6413
		{
			yyVAL.ival = 1
		}
	case 1907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6414
		{
			yyVAL.ival = 0
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6418
		{
			yyVAL.ival = 1
		}
	case 1909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6419
		{
			yyVAL.ival = 0
		}
	case 1910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6428
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1911:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6434
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1912:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6440
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6446
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6452
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6460
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6461
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6465
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6466
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6470
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6471
		{
			yyVAL.node = nil
		}
	case 1921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6476
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6491
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6500
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1924:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6507
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1925:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6514
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1926:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6527
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6540
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6549
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1929:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6564
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6574
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6582
		{
			yyVAL.onconflict = nil
		}
	case 1932:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6593
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6602
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6609
		{
			yyVAL.node = nil
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6616
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6620
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6627
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6632
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1939:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6637
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1940:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6645
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1941:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6656
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6670
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6671
		{
			yyVAL.list = nil
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6675
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6676
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6677
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6681
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6682
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6683
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6688
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6692
		{
			yyVAL.list = nil
		}
	case 1952:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6713
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1953:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6729
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1954:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6746
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1955:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6762
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1956:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6779
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1957:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6796
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6814
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6816
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6818
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6819
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6820
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6825
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6826
		{
			yyVAL.list = nil
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6831
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6836
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6843
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6844
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6845
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6850
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6857
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6861
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6865
		{
			yyVAL.ival = 0
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6871
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6872
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6873
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6874
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6875
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6876
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6877
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6878
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6879
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6880
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6885
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6886
		{
			yyVAL.str = "default"
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6891
		{
			yyVAL.str = ""
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6895
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6896
		{
			yyVAL.str = "default"
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6900
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6901
		{
			yyVAL.str = ""
		}
	case 1995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6906
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6907
		{
			yyVAL.list = nil
		}
	case 1997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6912
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6918
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6925
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6926
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6931
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 2002:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6937
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 2003:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6948
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 2004:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6977
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 2005:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6986
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 2006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6996
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7005
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 2008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7012
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7016
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 2010:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7024
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2011:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7025
		{
			yyVAL.list = nil
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7030
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7034
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7042
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7048
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7053
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2017:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7058
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			colDef.Constraints = constraints
			colDef.Collclause = collClause
			yyVAL.node = colDef
		}
	case 2018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7073
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7078
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7085
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7090
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7091
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7093
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7106
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7111
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7116
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7121
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7129
		{
			yyVAL.bval = true
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7130
		{
			yyVAL.bval = false
		}
	case 2030:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7131
		{
			yyVAL.bval = true
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7135
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7136
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7141
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7143
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7148
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7152
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7156
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7166
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7172
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7173
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7178
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7182
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7186
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7190
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7194
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7198
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7202
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7206
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7210
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7214
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7218
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7222
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7226
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7230
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7234
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7238
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7244
		{
		}
	case 2058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7245
		{
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7249
		{
		}
	case 2060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7250
		{
		}
	case 2061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7251
		{
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7256
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7263
		{
			yyVAL.bval = false
		}
	case 2064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7267
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7268
		{
			yyVAL.list = nil
		}
	case 2066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7273
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7277
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2068:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7281
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7290
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2070:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7296
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7302
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2072:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7308
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2073:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7325
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2074:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7332
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7342
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7347
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2077:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7352
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2078:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7360
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7371
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2080:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7382
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2081:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7392
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2082:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7403
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2083:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7424
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7438
		{
			yyVAL.bval = true
		}
	case 2085:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7439
		{
			yyVAL.bval = false
		}
	case 2086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7445
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7451
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7459
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7464
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7472
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2091:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7476
		{
			yyVAL.list = nil
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7483
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7487
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7491
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7495
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7502
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7512
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7522
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7529
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7536
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7551
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7564
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7571
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7578
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7585
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7592
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7599
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7608
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7609
		{
			yyVAL.list = nil
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7613
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7614
		{
			yyVAL.partspec = nil
		}
	case 2112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7619
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7627
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7632
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7640
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7647
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7654
		{
			// Wrap the expression in ParenExpr to preserve parentheses
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			partElem := ast.NewPartitionElem("", parenExpr, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7665
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7666
		{
			yyVAL.str = ""
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7670
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7671
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7672
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7673
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7677
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7678
		{
			yyVAL.str = ""
		}
	case 2126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7682
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7683
		{
			yyVAL.str = ""
		}
	case 2128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7687
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2129:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7700
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2130:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7715
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7731
		{
			yyVAL.bval = true
		}
	case 2132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7732
		{
			yyVAL.bval = false
		}
	case 2133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7736
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7737
		{
			yyVAL.str = "btree"
		}
	case 2135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7741
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7742
		{
			yyVAL.list = nil
		}
	case 2137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7747
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7752
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7760
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7761
		{
			yyVAL.list = nil
		}
	case 2141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7773
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7779
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7786
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7792
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7799
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7808
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7814
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7821
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7827
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7834
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2151:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7840
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7847
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2153:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7853
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7860
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7869
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2156:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7879
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2157:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7886
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2158:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7894
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2159:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7901
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2160:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7909
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2161:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7916
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7927
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7932
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7940
		{
			yyVAL.bval = true
		}
	case 2165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7941
		{
			yyVAL.bval = false
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7946
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7951
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7959
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7990
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8013
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8020
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8027
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8038
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8045
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8052
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8059
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8066
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8071
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8076
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8081
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8086
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8091
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8098
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8103
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8110
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8115
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8120
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8125
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8130
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8140
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8145
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8152
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8159
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8167
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8178
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8190
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8195
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8200
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8211
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8216
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8224
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8232
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8237
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8242
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8247
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8252
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8257
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8262
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8272
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8277
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8282
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8287
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8292
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8297
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8302
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8307
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8312
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8317
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8322
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8327
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8333
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8338
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8345
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8350
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8355
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8360
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8365
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8370
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8375
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8380
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8385
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8389
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8397
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8405
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8412
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8423
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8432
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.node = nil
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8437
		{
		}
	case 2241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8438
		{
		}
	case 2242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8449
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8462
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8475
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8488
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8501
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8516
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8531
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8544
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8557
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8570
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8583
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8596
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8610
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_CAST
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, yyDollar[7].typnam))
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8624
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8642
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8661
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8679
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8698
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TRANSFORM
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, ast.NewString(yyDollar[7].str)))
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8712
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[3].str)))
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8725
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[5].str)))
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8745
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_FUNCTION
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8757
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_FUNCTION
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8769
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_PROCEDURE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8781
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_PROCEDURE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8793
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_ROUTINE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8805
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_ROUTINE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8820
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_AGGREGATE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8832
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_AGGREGATE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8847
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_OPERATOR
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8859
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_OPERATOR
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8874
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8880
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8886
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8895
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8899
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8902
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8906
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8908
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8912
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8916
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8923
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8927
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8933
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8934
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8938
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8947
		{
			yyVAL.stmt = ast.NewConstraintsSetStmt(yyDollar[3].list, yyDollar[4].bval)
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8953
		{
			yyVAL.list = nil
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8954
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8958
		{
			yyVAL.bval = true
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8959
		{
			yyVAL.bval = false
		}
	case 2292:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8971
		{
			n := ast.NewSelectStmt()
			n.DistinctClause = yyDollar[1].list
			n.TargetList = yyDollar[2].list
			n.FromClause = yyDollar[3].list
			n.WhereClause = yyDollar[4].node
			if yyDollar[5].groupClause != nil {
				n.GroupClause = yyDollar[5].groupClause.List
				n.GroupDistinct = yyDollar[5].groupClause.Distinct
			}
			n.HavingClause = yyDollar[6].node
			n.WindowClause = yyDollar[7].list
			n.SortClause = yyDollar[8].list
			if yyDollar[9].selectLimit != nil {
				n.LimitOffset = yyDollar[9].selectLimit.limitOffset
				n.LimitCount = yyDollar[9].selectLimit.limitCount
				n.LimitOption = yyDollar[9].selectLimit.limitOption
			}
			n.LockingClause = yyDollar[10].list
			yyVAL.stmt = n
		}
	case 2293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8996
		{
			n := ast.NewPLAssignStmt(yyDollar[1].str, yyDollar[4].stmt.(*ast.SelectStmt))
			n.Indirection = yyDollar[2].list
			yyVAL.stmt = n
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9004
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9005
		{
			yyVAL.str = fmt.Sprintf("$%d", yyDollar[1].ival)
		}
	case 2298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9019
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9023
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9031
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9036
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9043
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9047
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9055
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9061
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9062
		{
			yyVAL.str = "analyze"
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9063
		{
			yyVAL.str = "format"
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9067
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9068
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9069
		{
			yyVAL.node = nil
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9073
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9074
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9075
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9076
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9077
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9078
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9079
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9080
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9081
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9082
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9091
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9112
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9119
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9128
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9134
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9135
		{
			yyVAL.list = nil
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9140
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9144
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9152
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9158
		{
			yyVAL.str = "analyze"
		}
	case 2331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9159
		{
			yyVAL.str = "analyse"
		}
	case 2332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9168
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9172
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9176
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9180
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9184
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9195
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9199
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9210
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9214
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9218
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9227
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9236
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9247
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9248
		{
			yyVAL.str = ""
		}
	case 2346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9257
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9270
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9283
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9298
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9299
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9303
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9304
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9308
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9309
		{
			yyVAL.list = nil
		}
	case 2355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9318
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9329
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9333
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9337
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9341
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9345
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9352
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9353
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9354
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9355
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9356
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9357
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9358
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9359
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9360
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9361
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9362
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9363
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9364
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9377
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9378
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9383
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9387
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9395
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9407
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9412
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9414
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9416
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9420
		{
			var objfuncArgs *ast.NodeList
			if firstElem := linitial(yyDollar[2].list); firstElem != nil {
				if nodeList, ok := firstElem.(*ast.NodeList); ok {
					objfuncArgs = nodeList
				}
			}
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         extractAggrArgTypes(yyDollar[2].list),
				ObjfuncArgs:     objfuncArgs, // linitial($2) like PostgreSQL
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9439
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9441
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9445
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9456
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9467
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9478
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9489
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9500
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9512
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9523
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9534
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9545
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9556
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2397:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9573
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9590
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2399:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9602
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9614
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9625
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9636
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9647
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9658
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9669
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9680
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9691
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9702
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9713
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9724
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9735
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2412:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9746
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2413:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9757
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9768
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2415:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9779
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9790
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2417:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9801
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9812
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2419:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9825
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2420:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9838
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2421:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9851
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2422:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9864
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2423:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9877
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2424:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9890
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2425:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9902
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2426:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9914
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2427:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9927
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9940
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2429:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9952
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2430:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9964
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9975
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9986
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9997
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10008
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10019
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2436:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10030
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2437:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10041
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2438:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10052
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10063
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2440:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10074
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10100
		{
			yyVAL.ival = 0
		}
	case 2442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10102
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10116
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10117
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10118
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10119
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10120
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10121
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10125
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10130
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10135
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10143
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10147
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10151
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10155
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2456:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10169
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2457:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10183
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2458:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10199
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10214
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10229
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10230
		{
			yyVAL.list = nil
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10235
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10239
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10247
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10251
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10256
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10264
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10273
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10282
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10291
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10300
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10311
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10312
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10313
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10314
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10315
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10319
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10323
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10325
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			// Add attrs to the names list
			for _, attr := range yyDollar[2].list.Items {
				list.Append(attr)
			}
			yyVAL.typnam = &ast.TypeName{
				BaseNode: ast.BaseNode{Tag: ast.T_TypeName},
				Names:    list,
				PctType:  true,
			}
		}
	case 2480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10340
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			// Add attrs to the names list
			for _, attr := range yyDollar[3].list.Items {
				list.Append(attr)
			}
			yyVAL.typnam = &ast.TypeName{
				BaseNode: ast.BaseNode{Tag: ast.T_TypeName},
				Names:    list,
				Setof:    true,
				PctType:  true,
			}
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10358
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10359
		{
			yyVAL.list = nil
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10364
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10370
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10378
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10382
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10386
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10390
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10394
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10401
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10407
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10417
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10423
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10431
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10435
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10447
		{
			yyVAL.node = nil
		}
	case 2497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10454
		{
			yyVAL.stmt = ast.NewReturnStmt(yyDollar[2].node)
		}
	case 2498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10461
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10471
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10477
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10478
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10483
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10487
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2504:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10503
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2505:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10535
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10566
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10567
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10568
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10573
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10575
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10615
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10622
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10629
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10636
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10643
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10652
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10653
		{
			yyVAL.list = nil
		}
	case 2518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10657
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10662
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10670
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10681
		{
			yyVAL.bval = true
		}
	case 2522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10682
		{
			yyVAL.bval = false
		}
	case 2523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10686
		{
			yyVAL.bval = true
		}
	case 2524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10687
		{
			yyVAL.bval = false
		}
	case 2525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10691
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10696
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10700
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10712
		{
			yyVAL.bval = true
		}
	case 2531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10713
		{
			yyVAL.bval = false
		}
	case 2532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10717
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10718
		{
			yyVAL.node = nil
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10727
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10732
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10736
		{
			yyVAL.list = nil
		}
	case 2539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10741
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10744
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10745
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10746
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10750
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10751
		{
			yyVAL.rangevar = nil
		}
	case 2545:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10764
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2546:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10780
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2547:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10796
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2548:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10812
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10829
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10830
		{
			yyVAL.list = nil
		}
	case 2551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10834
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10835
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10836
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10837
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10848
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10855
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2557:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10862
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2558:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10869
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10885
		{
			n := ast.NewCreatedbStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10898
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, nil)
			yyVAL.stmt = n
		}
	case 2561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10903
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, nil)
			yyVAL.stmt = n
		}
	case 2562:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10908
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2563:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10913
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10920
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10921
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[3].defelt)
		}
	case 2566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10925
		{
			yyVAL.defelt = ast.NewDefElem("force", nil)
		}
	case 2567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10935
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[3].str, false)
			yyVAL.stmt = n
		}
	case 2568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10940
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[5].str, true)
			yyVAL.stmt = n
		}
	case 2569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10954
		{
			n := ast.NewDropOwnedStmt(yyDollar[4].list, yyDollar[5].dropBehav)
			yyVAL.stmt = n
		}
	case 2570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10962
		{
			n := ast.NewReassignOwnedStmt(yyDollar[4].list, yyDollar[6].rolespec)
			yyVAL.stmt = n
		}
	case 2571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10976
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10994
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11000
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11005
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11010
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2576:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11016
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2577:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11024
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11032
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11047
		{
			// Store the full aggr_args result [args, position_indicator] for proper deparsing
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, yyDollar[5].list, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11053
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11059
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11064
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11069
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11075
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11080
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11085
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11090
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11095
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2589:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11100
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11105
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2591:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11110
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2592:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11115
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11126
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11131
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11145
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11150
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11157
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11158
		{
			yyVAL.list = nil
		}
	case 2599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11169
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11173
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11186
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2602:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11191
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11199
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.list = nil
		}
	case 2605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11215
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11219
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11223
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11228
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11241
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11249
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11258
		{
			yyVAL.list = nil
		}
	case 2612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11265
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11278
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11282
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11286
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2616:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11290
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11297
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11301
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11305
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2620:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11309
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2621:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11318
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11327
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11331
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2624:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11335
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11340
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2626:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11352
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11358
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11362
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11368
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11369
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11370
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11371
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11375
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11376
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11380
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11381
		{
			yyVAL.list = nil
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11385
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11386
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2639:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11403
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2640:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11408
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11414
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11418
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11422
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11428
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11429
		{
			yyVAL.str = ""
		}
	case 2646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11433
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.str = ""
		}
	case 2648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11438
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11439
		{
			yyVAL.str = ""
		}
	case 2650:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11452
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2651:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:11458
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2652:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:11464
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2653:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:11470
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2654:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11484
		{
			stmt := ast.NewImportForeignSchemaStmt(
				ast.NewString(yyDollar[8].str),    // server name
				ast.NewString(yyDollar[4].str),    // remote schema
				ast.NewString(yyDollar[10].str),   // local schema
				yyDollar[5].importqual.typ,        // list type
				yyDollar[5].importqual.tableNames, // table list
				yyDollar[11].list,                 // options
			)
			yyVAL.stmt = stmt
		}
	case 2655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11499
		{
			qual := &ImportQual{
				typ:        yyDollar[1].importqualtype,
				tableNames: yyDollar[3].list,
			}
			yyVAL.importqual = qual
		}
	case 2656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11507
		{
			qual := &ImportQual{
				typ:        ast.FDW_IMPORT_SCHEMA_ALL,
				tableNames: nil,
			}
			yyVAL.importqual = qual
		}
	case 2657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11517
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_LIMIT_TO
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11518
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_EXCEPT
		}
	case 2659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11528
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2660:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11532
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11538
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2662:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11544
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2663:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11554
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11555
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11560
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11566
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11572
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11578
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11592
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11596
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11604
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11611
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11622
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11630
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2677:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11637
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2678:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11645
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2679:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11654
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2680:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11663
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11671
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11687
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11689
		{
			yyVAL.list = nil
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11694
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11696
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11701
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11710
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11715
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11726
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2690:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11746
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2691:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11754
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2692:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11765
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2693:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11780
		{
			yylex.Error("CREATE ASSERTION is not yet implemented")
			return 1
			// PostgreSQL doesn't actually implement CREATE ASSERTION yet.
			// $$ = ast.NewCreateAssertionStmt($3, $6, nil)
		}
	case 2694:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11796
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[6].stmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			/* cram additional flags into the IntoClause */
			if yyDollar[4].into.Rel != nil {
				yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[4].into.SkipData = !yyDollar[7].bval
			yyVAL.stmt = ctas
		}
	case 2695:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11806
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[9].stmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			/* cram additional flags into the IntoClause */
			if yyDollar[7].into.Rel != nil {
				yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[7].into.SkipData = !yyDollar[10].bval
			yyVAL.stmt = ctas
		}
	case 2696:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11826
		{
			n := &ast.RuleStmt{
				BaseNode:    ast.BaseNode{Tag: ast.T_RuleStmt},
				Replace:     yyDollar[2].bval,
				Relation:    yyDollar[9].rangevar,
				Rulename:    yyDollar[4].str,
				WhereClause: yyDollar[10].node,
				Event:       ast.CmdType(yyDollar[7].ival),
				Instead:     yyDollar[12].bval,
				Actions:     yyDollar[13].list,
			}
			yyVAL.stmt = n
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11842
		{
			yyVAL.list = nil
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11843
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
		}
	case 2699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11844
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11849
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].list != nil {
					yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].stmt)
					yyVAL.list = yyDollar[1].list
				} else {
					yyVAL.list = ast.NewNodeList(yyDollar[3].stmt)
				}
			}
		}
	case 2701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11860
		{
			if yyDollar[1].stmt != nil {
				yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
			} else {
				yyVAL.list = nil
			}
		}
	case 2707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11878
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11879
		{
			yyVAL.stmt = nil
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11883
		{
			yyVAL.bval = true
		}
	case 2710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11884
		{
			yyVAL.bval = false
		}
	case 2711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11885
		{
			yyVAL.bval = false
		}
	case 2712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11888
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11889
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11894
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11906
		{
			yyVAL.bval = true
		}
	case 2716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11907
		{
			yyVAL.bval = false
		}
	case 2717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11908
		{
			yyVAL.bval = true
		}
	case 2718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11913
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11922
		{
			yyVAL.list = nil
		}
	case 2724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11933
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11935
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11939
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11944
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11949
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11954
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11962
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11967
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11972
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11976
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11987
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11995
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11999
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12003
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12007
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12014
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12018
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12025
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12031
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12038
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12039
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12044
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12046
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12053
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12060
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12061
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12062
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12066
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12067
		{
			yyVAL.str = "default"
		}
	case 2754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12068
		{
			yyVAL.str = ""
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12072
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12073
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12077
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12078
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12079
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12080
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12084
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12085
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12090
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12096
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12101
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12109
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12113
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12117
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12121
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12125
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12131
		{
			yyVAL.str = "read uncommitted"
		}
	case 2772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12132
		{
			yyVAL.str = "read committed"
		}
	case 2773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12133
		{
			yyVAL.str = "repeatable read"
		}
	case 2774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12134
		{
			yyVAL.str = "serializable"
		}
	case 2775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12138
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12139
		{
			yyVAL.list = nil
		}
	case 2777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12143
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12144
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12145
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12148
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12149
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12150
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12154
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12155
		{
			yyVAL.list = nil
		}
	case 2785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12159
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12160
		{
			yyVAL.node = nil
		}
	case 2787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12164
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12169
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12174
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12182
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12186
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12192
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12198
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12204
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12205
		{
			yyVAL.str = ""
		}
	case 2796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12209
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12210
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12211
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12212
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12216
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12221
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12226
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12233
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12234
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2805:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12245
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2806:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12249
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12255
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12261
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12262
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12263
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12264
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12269
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12274
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12282
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12289
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12294
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2817:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12308
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12314
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12315
		{
			yyVAL.rolespec = nil
		}
	case 2820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12320
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12324
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2822:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12339
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2823:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12347
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12354
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12366
		{
			yyVAL.bval = true
		}
	case 2826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12370
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12371
		{
			yyVAL.str = "all"
		}
	case 2828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12375
		{
			yyVAL.str = "all"
		}
	case 2829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12376
		{
			yyVAL.str = "select"
		}
	case 2830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12377
		{
			yyVAL.str = "insert"
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12378
		{
			yyVAL.str = "update"
		}
	case 2832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12379
		{
			yyVAL.str = "delete"
		}
	case 2833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12383
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12384
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12392
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12393
		{
			yyVAL.list = nil
		}
	case 2837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12397
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12398
		{
			yyVAL.node = nil
		}
	case 2839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12402
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12403
		{
			yyVAL.node = nil
		}
	case 2841:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12414
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12420
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12421
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2844:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12432
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2845:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12436
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2846:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12443
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2847:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12447
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12453
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12454
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12458
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12459
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12460
		{
			yyVAL.statelem = ast.NewStatsElemExpr(ast.NewParenExpr(yyDollar[2].node, 0))
		}
	case 2853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12471
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2854:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12475
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2855:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12479
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12486
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12490
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12494
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12498
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12504
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12505
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12510
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12515
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12519
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12523
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12535
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12541
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12546
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2869:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12552
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12553
		{
			yyVAL.node = nil
		}
	case 2871:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12564
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2872:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12571
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12575
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12579
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2875:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12583
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2876:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12587
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2877:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12591
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12595
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12601
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2880:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12607
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2881:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12620
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2882:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12624
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2883:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12628
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12634
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12635
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12636
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2887:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12648
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12654
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12655
		{
			yyVAL.list = nil
		}
	case 2890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12659
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12660
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2892:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12665
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12671
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12675
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2895:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12679
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12683
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12689
		{
			yyVAL.bval = true
		}
	case 2898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12690
		{
			yyVAL.bval = false
		}
	case 2899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12694
		{
			yyVAL.list = nil
		}
	case 2900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12695
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12696
		{
			yyVAL.list = nil
		}
	case 2902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12700
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12701
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12712
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2905:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12725
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2906:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12729
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12735
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12736
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2909:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12741
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12747
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2911:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12762
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2912:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12775
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2913:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12782
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2914:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12788
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12794
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12800
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2917:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12815
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2918:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12821
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12827
		{
			yyVAL.bval = true
		}
	case 2920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12828
		{
			yyVAL.bval = false
		}
	case 2921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12833
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12834
		{
			yyVAL.list = nil
		}
	case 2923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12838
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12839
		{
			yyVAL.list = nil
		}
	case 2925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12843
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12844
		{
			yyVAL.list = nil
		}
	case 2927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12847
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12848
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12849
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2930:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12854
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12861
		{
			yyVAL.groupClause = nil
		}
	case 2932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12867
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12868
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12872
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12873
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12874
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12875
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12876
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12881
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2940:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12888
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2941:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12895
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12902
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12911
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12912
		{
			yyVAL.node = nil
		}
	case 2945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12919
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12923
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12924
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2948:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12929
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12936
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12947
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12949
		{
			yyVAL.list = nil
		}
	case 2952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12954
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12959
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12967
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12976
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12978
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2957:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12985
		{
			yyVAL.windef = nil
		}
	case 2958:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12990
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13004
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13005
		{
			yyVAL.str = ""
		}
	case 2961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13009
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13010
		{
			yyVAL.list = nil
		}
	case 2963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13015
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13022
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13029
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13036
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13047
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13061
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13096
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13104
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13112
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13120
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13128
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13138
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13139
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13140
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13141
		{
			yyVAL.ival = 0
		}
	case 2978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13142
		{
			yyVAL.ival = 0
		}
	case 2979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13151
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13156
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13161
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13165
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13175
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2984:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13176
		{
			yyVAL.selectLimit = nil
		}
	case 2985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13181
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13189
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2987:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13196
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2988:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13204
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2989:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13212
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2990:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13220
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13231
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13234
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13238
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13240
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13247
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13260
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13262
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13266
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13273
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 3000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13274
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 3001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13279
		{
			yyVAL.ival = 0
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13280
		{
			yyVAL.ival = 0
		}
	case 3003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13284
		{
			yyVAL.ival = 0
		}
	case 3004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13285
		{
			yyVAL.ival = 0
		}
	case 3005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13298
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13304
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 3007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13310
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13316
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13322
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 3010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13327
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13332
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 3012:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13337
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 3013:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13342
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 3014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13347
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13353
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13359
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13368
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13374
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 3019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13381
		{
		}
	case 3020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13382
		{
		}
	case 3021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13383
		{
		}
	case 3022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13387
		{
			yyVAL.bval = true
		}
	case 3023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13388
		{
			yyVAL.bval = false
		}
	case 3024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13389
		{
			yyVAL.bval = false
		}
	case 3025:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13402
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 3026:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13409
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 3027:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13416
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 3028:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13423
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3029:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13429
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3030:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13438
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3031:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13442
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3032:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13446
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3033:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13450
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3034:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13456
		{
			yyVAL.str = ""
		}
	case 3035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13457
		{
			yyVAL.str = yyDollar[3].str
		}
	case 3036:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13462
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 3037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13472
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3038:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13476
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13480
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3040:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13484
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13488
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3042:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13492
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13500
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13511
		{
			yyVAL.list = nil
		}
	case 3045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13516
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13527
		{
			yyVAL.list = nil
		}
	case 3047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13531
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 3048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13533
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 3049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13537
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 3050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13541
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13545
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13549
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13556
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 3054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13560
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 3055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13564
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 3056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13568
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 3057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13573
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13577
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 3059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13612
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 3060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13616
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 3061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13620
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13626
		{
			yyVAL.ival = 1
		}
	case 3063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13627
		{
			yyVAL.ival = -1
		}
	case 3064:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13639
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 3065:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13651
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 3066:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:13660
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 3067:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13672
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 3068:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13678
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 3069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13687
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 3070:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13694
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 3071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13713
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 3072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13719
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13720
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 3074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13725
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 3075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13729
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13733
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3077:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13745
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 3078:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13753
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 3079:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13761
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 3080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13771
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13772
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13773
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13774
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13775
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13776
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13781
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13783
		{
			yyVAL.list = nil
		}
	case 3088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13785
		{
			yyVAL.list = nil
		}
	case 3089:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13787
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3090:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13792
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13798
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13799
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13803
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13807
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13811
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13815
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13819
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13829
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13837
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13845
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13853
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13861
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13869
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13877
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13885
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13893
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13901
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13909
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13917
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13925
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13933
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13941
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13949
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13957
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13965
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13973
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13981
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13989
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14000
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14001
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14005
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14006
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14011
		{
			yyVAL.bval = true
		}
	case 3124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14012
		{
			yyVAL.bval = false
		}
	case 3125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14016
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14017
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14022
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14028
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14029
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14030
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14033
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14034
		{
			yyVAL.rolespec = nil
		}
	case 3133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14039
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14043
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14051
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14055
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14060
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14061
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14065
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14073
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14077
		{
			yyVAL.node = nil
		}
	case 3142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14091
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14096
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14101
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14109
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14110
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14116
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14120
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14124
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14128
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14132
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14136
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14140
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14144
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14148
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14152
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14156
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14160
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14164
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14168
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14172
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14176
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14181
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14187
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14188
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14193
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14197
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14201
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14207
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14208
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14209
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14210
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14211
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14222
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14235
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14242
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14249
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14263
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14265
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14269
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14271
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14283
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14291
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14304
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14305
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14311
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14318
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14326
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14334
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14355
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14356
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14357
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14358
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14368
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14375
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14379
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14383
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14387
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14391
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14394
		{
			yyVAL.ival = 0
		}
	case 3203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14397
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14398
		{
			yyVAL.ival = 0
		}
	case 3205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14399
		{
			yyVAL.ival = 0
		}
	case 3206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14403
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14409
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14417
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14421
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14425
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14429
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14433
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14437
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14441
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14445
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14449
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14453
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14457
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14461
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14465
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14469
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14473
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14477
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14482
		{
			yyVAL.ival = 0
		}
	case 3225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14483
		{
			yyVAL.ival = 0
		}
	case 3226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14487
		{
			yyVAL.ival = 0
		}
	case 3227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14488
		{
			yyVAL.ival = 0
		}
	case 3228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14493
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14498
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14510
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14517
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14520
		{
			yyVAL.list = nil
		}
	case 3233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14524
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14525
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14527
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14528
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14532
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14536
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3240:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:14546
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14559
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14562
		{
			yyVAL.list = nil
		}
	case 3243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14568
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14576
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14580
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14584
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14588
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14599
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14610
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14614
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14625
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14635
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14636
		{
			yyVAL.str = ""
		}
	case 3254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14645
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14656
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14668
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14669
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14673
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14674
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14675
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14676
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14677
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14678
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14679
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14680
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14689
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14703
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14707
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14711
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14715
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14719
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14723
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14727
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14731
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3275:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14735
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3276:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14742
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14753
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14760
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14764
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3280:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14768
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3281:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14776
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14786
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14796
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3284:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14800
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14814
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14815
		{
			yyVAL.str = ""
		}
	case 3287:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14824
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3288:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14828
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3289:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14832
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3290:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14836
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3291:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14840
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14844
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14848
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3294:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14852
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14856
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14860
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14870
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14871
		{
			yyVAL.str = ""
		}
	case 3299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14875
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14876
		{
			yyVAL.str = ""
		}
	case 3301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14885
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14895
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14896
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14901
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14905
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14916
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14929
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14936
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14943
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14950
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14957
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14964
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14971
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14978
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14990
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15002
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15009
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15016
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3319:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15023
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15030
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3321:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15037
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15044
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15051
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15058
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3325:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15065
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3326:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15072
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15079
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3328:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15086
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15093
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3330:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15100
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15107
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3332:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15114
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15121
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15137
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15146
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15155
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15164
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15173
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15182
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15191
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15200
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15209
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3343:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15218
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3344:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15231
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15244
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15253
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15262
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15271
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15280
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15289
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15298
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15307
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15316
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15325
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15334
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15343
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15352
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15370
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3359:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15383
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3360:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15389
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3361:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15395
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3362:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:15401
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3363:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15408
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3364:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15414
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15421
		{
			yyVAL.bval = true
		}
	case 3366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15422
		{
			yyVAL.bval = false
		}
	case 3367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15433
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15446
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15450
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15454
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15460
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15466
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15467
		{
			yyVAL.list = nil
		}
	case 3374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15471
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15472
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15477
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15481
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15485
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15491
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15492
		{
			yyVAL.str = "connection_limit"
		}
	case 3381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15493
		{
			yyVAL.str = "encoding"
		}
	case 3382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15494
		{
			yyVAL.str = "location"
		}
	case 3383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15495
		{
			yyVAL.str = "owner"
		}
	case 3384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15496
		{
			yyVAL.str = "tablespace"
		}
	case 3385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15497
		{
			yyVAL.str = "template"
		}
	case 3386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15500
		{
		}
	case 3387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15501
		{
		}
	case 3388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15506
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3389:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15519
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3390:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15528
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3391:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15537
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:15549
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3393:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15561
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3394:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15568
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15589
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15599
		{
			yyVAL.bval = false
		}
	case 3399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15600
		{
			yyVAL.bval = true
		}
	case 3400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15601
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
