// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:11217

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 61,
	541, 61,
	-2, 1409,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 62,
	68, 1331,
	69, 1331,
	131, 1331,
	281, 1331,
	510, 1331,
	-2, 1326,
	-1, 65,
	67, 1734,
	84, 1734,
	85, 2373,
	237, 2558,
	308, 1901,
	420, 1734,
	481, 1734,
	-2, 74,
	-1, 71,
	68, 1330,
	69, 1330,
	131, 1330,
	281, 1330,
	510, 1330,
	-2, 1332,
	-1, 81,
	1, 61,
	541, 61,
	-2, 1409,
	-1, 117,
	85, 2372,
	-2, 1733,
	-1, 190,
	61, 279,
	64, 279,
	528, 279,
	534, 279,
	-2, 2416,
	-1, 591,
	68, 1315,
	69, 1315,
	131, 1315,
	281, 1315,
	-2, 1333,
	-1, 594,
	68, 1316,
	69, 1316,
	131, 1316,
	281, 1316,
	-2, 1336,
	-1, 642,
	84, 1734,
	481, 1734,
	-2, 73,
	-1, 644,
	210, 62,
	-2, 2379,
	-1, 711,
	16, 1248,
	17, 1248,
	532, 1248,
	-2, 80,
	-1, 712,
	16, 1249,
	17, 1249,
	532, 1249,
	-2, 81,
	-1, 874,
	68, 1315,
	69, 1315,
	131, 1315,
	281, 1315,
	-2, 1337,
	-1, 1058,
	6, 1830,
	12, 1830,
	535, 1830,
	536, 1830,
	-2, 1823,
	-1, 1247,
	128, 2656,
	412, 2656,
	-2, 1059,
	-1, 1278,
	21, 1222,
	433, 1222,
	511, 1222,
	-2, 821,
	-1, 1280,
	21, 1224,
	433, 1224,
	511, 1224,
	-2, 768,
	-1, 1285,
	1, 637,
	26, 637,
	36, 637,
	64, 637,
	65, 637,
	68, 637,
	69, 637,
	71, 637,
	72, 637,
	73, 637,
	74, 637,
	101, 637,
	131, 637,
	281, 637,
	485, 637,
	510, 637,
	533, 637,
	541, 637,
	542, 637,
	-2, 1321,
	-1, 1290,
	21, 1299,
	433, 1299,
	511, 1299,
	-2, 1295,
	-1, 1747,
	68, 1331,
	69, 1331,
	131, 1331,
	281, 1331,
	510, 1331,
	-2, 1149,
	-1, 1757,
	532, 1185,
	-2, 1169,
	-1, 1931,
	118, 74,
	308, 1901,
	461, 74,
	-2, 1734,
	-1, 1980,
	537, 95,
	-2, 2242,
	-1, 2006,
	532, 1903,
	-2, 203,
	-1, 2203,
	36, 2661,
	66, 2661,
	-2, 485,
	-1, 2204,
	36, 2662,
	66, 2662,
	-2, 358,
	-1, 2210,
	128, 2659,
	412, 2659,
	-2, 1157,
	-1, 2211,
	128, 2660,
	412, 2660,
	-2, 1158,
	-1, 2228,
	1, 403,
	26, 403,
	36, 403,
	64, 403,
	65, 403,
	68, 403,
	69, 403,
	71, 403,
	72, 403,
	74, 403,
	101, 403,
	131, 403,
	281, 403,
	485, 403,
	510, 403,
	530, 403,
	533, 403,
	534, 403,
	541, 403,
	-2, 102,
	-1, 2229,
	1, 401,
	26, 401,
	36, 401,
	64, 401,
	65, 401,
	68, 401,
	69, 401,
	71, 401,
	72, 401,
	74, 401,
	101, 401,
	131, 401,
	281, 401,
	485, 401,
	510, 401,
	530, 401,
	533, 401,
	534, 401,
	541, 401,
	-2, 102,
	-1, 2232,
	1, 420,
	26, 420,
	36, 420,
	64, 420,
	65, 420,
	68, 420,
	69, 420,
	71, 420,
	72, 420,
	74, 420,
	101, 420,
	131, 420,
	281, 420,
	485, 420,
	510, 420,
	530, 420,
	533, 420,
	534, 420,
	541, 420,
	-2, 102,
	-1, 2246,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1072,
	-1, 2247,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1073,
	-1, 2248,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1074,
	-1, 2249,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1075,
	-1, 2250,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1076,
	-1, 2251,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1077,
	-1, 2255,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 2261,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1088,
	-1, 2306,
	364, 1212,
	-2, 1215,
	-1, 2324,
	532, 1184,
	-2, 1252,
	-1, 2434,
	40, 1256,
	510, 1256,
	528, 1256,
	533, 1256,
	542, 1256,
	-2, 1252,
	-1, 2464,
	210, 62,
	-2, 2379,
	-1, 2523,
	537, 96,
	-2, 2242,
	-1, 2626,
	508, 2319,
	-2, 2312,
	-1, 2758,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1086,
	-1, 2759,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1090,
	-1, 2765,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1092,
	-1, 2804,
	364, 1211,
	-2, 1214,
	-1, 2873,
	68, 1331,
	69, 1331,
	131, 1331,
	281, 1331,
	510, 1331,
	-2, 1431,
	-1, 2884,
	532, 1185,
	-2, 96,
	-1, 2890,
	151, 1666,
	-2, 1601,
	-1, 3074,
	6, 1830,
	12, 1830,
	535, 1830,
	536, 1830,
	-2, 1804,
	-1, 3198,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1085,
	-1, 3201,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1094,
	-1, 3204,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1089,
	-1, 3209,
	52, 0,
	53, 0,
	54, 0,
	-2, 1107,
	-1, 3231,
	21, 1221,
	433, 1221,
	511, 1221,
	-2, 1296,
	-1, 3235,
	364, 1213,
	-2, 1216,
	-1, 3551,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1087,
	-1, 3552,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1091,
	-1, 3556,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1093,
	-1, 3557,
	52, 0,
	53, 0,
	54, 0,
	-2, 1108,
	-1, 3560,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1109,
	-1, 3568,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1137,
	-1, 3569,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1138,
	-1, 3570,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1139,
	-1, 3571,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1140,
	-1, 3572,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1141,
	-1, 3573,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1142,
	-1, 3574,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1111,
	-1, 3658,
	541, 61,
	-2, 1409,
	-1, 3800,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1095,
	-1, 3801,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1110,
	-1, 3802,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1112,
	-1, 4188,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 443,
	-1, 4484,
	7, 1551,
	-2, 280,
}

const yyPrivate = 57344

const yyLast = 76741

var yyAct = [...]int16{
	617, 4541, 4481, 4528, 4606, 4587, 4571, 2744, 918, 893,
	4529, 4350, 4552, 741, 4540, 2832, 4482, 2594, 3395, 2392,
	683, 3600, 4039, 1742, 3733, 2343, 4096, 4345, 4248, 4187,
	1197, 4115, 3980, 4237, 3018, 4231, 4335, 3878, 4076, 2346,
	3619, 1882, 3647, 945, 4008, 2742, 3928, 3503, 4386, 3599,
	4040, 4144, 1046, 4316, 3309, 4009, 4006, 2811, 4300, 3058,
	2220, 4122, 3699, 4117, 3924, 967, 3044, 1904, 4116, 3001,
	193, 193, 3834, 3860, 3837, 648, 2473, 607, 4170, 3732,
	2017, 4167, 2359, 3952, 607, 4186, 3305, 3004, 607, 3907,
	2720, 2910, 2589, 3617, 644, 647, 652, 647, 2895, 647,
	61, 2399, 2879, 3654, 3509, 2465, 2369, 2831, 2546, 647,
	2695, 3141, 2978, 3504, 3313, 780, 1292, 2323, 2982, 3445,
	744, 607, 607, 607, 607, 3375, 3513, 710, 647, 647,
	3399, 647, 710, 2361, 3960, 708, 2387, 710, 3628, 710,
	742, 2422, 60, 2911, 1777, 742, 4, 742, 2216, 647,
	758, 647, 760, 3866, 647, 1930, 18, 3843, 3608, 3794,
	1929, 17, 599, 73, 3368, 3624, 5, 2840, 2512, 2429,
	3139, 1746, 965, 1206, 2671, 597, 2964, 1928, 12, 1927,
	11, 2382, 193, 193, 2865, 3544, 2385, 2360, 3587, 2449,
	1252, 2321, 2588, 2561, 1033, 3073, 3052, 3429, 3036, 985,
	1957, 2513, 2453, 2941, 1951, 2440, 2474, 2452, 1147, 745,
	604, 1961, 651, 2454, 1903, 1965, 2347, 623, 2425, 2384,
	592, 2868, 2857, 60, 3187, 3284, 626, 1990, 1884, 879,
	1752, 2777, 2747, 2818, 839, 2542, 2085, 18, 1157, 3838,
	1202, 2491, 17, 2593, 73, 1078, 2001, 953, 4346, 992,
	1977, 933, 1937, 627, 694, 2439, 606, 2427, 184, 12,
	1005, 11, 2401, 2886, 2364, 2368, 1883, 2367, 1011, 2366,
	1857, 1073, 2357, 2312, 1744, 2317, 2281, 2308, 2271, 2272,
	2278, 925, 916, 2981, 2199, 2209, 1253, 1244, 1196, 837,
	707, 777, 1014, 1012, 2377, 2225, 89, 1762, 889, 2490,
	2489, 91, 743, 880, 1225, 1227, 591, 643, 1245, 1770,
	784, 154, 1162, 153, 910, 787, 1976, 112, 1257, 615,
	866, 1228, 867, 1958, 1194, 1910, 1226, 868, 1071, 172,
	622, 613, 71, 72, 3213, 2950, 4479, 1290, 4637, 843,
	1260, 4628, 4626, 4560, 1272, 1273, 1274, 4513, 4478, 908,
	4561, 4513, 4561, 1137, 4326, 1137, 1867, 1137, 2949, 1868,
	4539, 2745, 4165, 1873, 1138, 1865, 1138, 2951, 1138, 4201,
	1870, 1874, 1869, 4537, 1871, 1007, 4521, 4512, 1872, 1283,
	1284, 1866, 1863, 2352, 1290, 1863, 4513, 1260, 1875, 4495,
	4488, 1272, 1273, 1274, 3984, 4472, 133, 3982, 4496, 2845,
	4455, 856, 3949, 1867, 4180, 4416, 595, 594, 2333, 3819,
	1873, 618, 1865, 4415, 1863, 4403, 3027, 1870, 1874, 1869,
	4365, 1871, 1863, 1007, 2380, 1872, 1283, 1284, 1866, 4366,
	4359, 4332, 855, 4308, 1290, 1875, 4307, 1260, 4305, 4360,
	2990, 2435, 4306, 4285, 4284, 4306, 4281, 4306, 767, 768,
	4279, 4200, 1863, 1863, 4198, 4282, 2226, 4090, 4075, 4280,
	4201, 4065, 1865, 1140, 4048, 3553, 3819, 2737, 820, 1258,
	4066, 4035, 3933, 4047, 3923, 3913, 3770, 3895, 1866, 3828,
	1140, 3934, 3827, 2380, 2951, 1875, 3894, 3818, 3829, 4460,
	4459, 1140, 593, 2380, 4434, 1290, 3819, 971, 1260, 3216,
	3217, 3218, 3219, 849, 851, 853, 857, 3787, 1260, 3729,
	3728, 2855, 1213, 915, 1203, 850, 3788, 3727, 3730, 2380,
	917, 1873, 3721, 1865, 3249, 3669, 2380, 3639, 1870, 1874,
	1869, 2380, 1871, 1865, 2951, 4206, 3640, 1863, 3576, 1866,
	4180, 1290, 4178, 3541, 1260, 1895, 1875, 1863, 1215, 1866,
	3322, 1218, 1863, 3229, 3170, 3097, 3084, 1217, 2953, 2380,
	3516, 842, 1863, 1863, 3098, 3085, 1216, 2954, 2932, 1865,
	2850, 2844, 3205, 593, 2835, 2804, 2218, 2933, 2802, 2851,
	2845, 2708, 1219, 1863, 1863, 1866, 2800, 1863, 713, 2799,
	1863, 3789, 1875, 1265, 1266, 1267, 1268, 2801, 786, 786,
	1863, 907, 907, 2467, 3774, 2817, 2381, 3622, 2339, 607,
	2335, 1259, 2468, 1290, 1988, 2380, 1260, 1140, 3378, 1863,
	907, 3332, 607, 1260, 940, 607, 607, 840, 1864, 3331,
	607, 607, 3234, 607, 3181, 710, 710, 1863, 2990, 710,
	2893, 1865, 2737, 955, 956, 2520, 2298, 959, 1865, 2197,
	647, 647, 2189, 931, 612, 4094, 1149, 1866, 1934, 81,
	3219, 1934, 1268, 3342, 1875, 923, 3664, 66, 1934, 927,
	4353, 65, 67, 926, 927, 607, 946, 970, 926, 927,
	975, 78, 877, 926, 1149, 845, 970, 3086, 844, 1260,
	647, 78, 1149, 3087, 1934, 3213, 847, 78, 841, 3223,
	3224, 3225, 917, 4566, 4049, 607, 607, 4407, 75, 1943,
	3213, 2012, 76, 4398, 3223, 3224, 3225, 4354, 75, 4185,
	4184, 752, 76, 4177, 75, 75, 3555, 4176, 76, 76,
	2673, 4175, 80, 4351, 752, 752, 4135, 2015, 4024, 69,
	4001, 3937, 80, 3914, 3930, 3885, 3319, 78, 80, 80,
	3809, 1880, 3807, 3734, 1203, 647, 647, 64, 623, 623,
	917, 3793, 1158, 1159, 3272, 4168, 1898, 3597, 1045, 1158,
	1159, 3586, 3585, 3584, 75, 1160, 3386, 3579, 76, 3377,
	752, 3294, 1156, 3269, 2380, 1136, 3244, 2291, 3213, 3231,
	2543, 935, 3223, 3224, 3225, 3040, 2380, 3009, 80, 2989,
	2948, 2110, 2380, 2892, 3554, 2815, 2803, 2715, 2713, 2710,
	3516, 2709, 2334, 2072, 1878, 875, 1753, 2996, 74, 983,
	977, 944, 1955, 647, 877, 876, 1754, 4627, 874, 88,
	1944, 921, 2934, 4602, 4598, 3750, 946, 4498, 2352, 1067,
	1753, 4467, 3516, 1279, 4440, 3516, 4433, 4375, 1210, 4315,
	1186, 969, 1269, 1270, 1271, 3214, 3215, 3216, 3217, 3218,
	3219, 1263, 1264, 1265, 1266, 1267, 1268, 2813, 4123, 2828,
	907, 1135, 907, 1144, 907, 1140, 4278, 4253, 2013, 924,
	3028, 1140, 4250, 4183, 3264, 907, 907, 907, 907, 907,
	1279, 4182, 2018, 4153, 3028, 4149, 907, 2896, 4080, 1269,
	1270, 1271, 4038, 3998, 3997, 2955, 3996, 2292, 1263, 1264,
	1265, 1266, 1267, 1268, 862, 907, 3213, 3974, 3958, 863,
	3223, 3224, 3225, 3957, 986, 3956, 3947, 3944, 907, 2520,
	607, 907, 595, 594, 2352, 1003, 3630, 3385, 1259, 962,
	1886, 3823, 1887, 3650, 1772, 972, 932, 1896, 3634, 3621,
	3613, 607, 3515, 3418, 1909, 942, 943, 1100, 1263, 1264,
	1265, 1266, 1267, 1268, 1198, 1198, 1037, 1214, 3381, 1043,
	961, 1061, 3184, 1942, 3365, 3357, 652, 3931, 3354, 647,
	647, 647, 647, 1954, 647, 3327, 3296, 3289, 1772, 2734,
	1938, 3165, 2016, 1901, 3320, 3063, 597, 1148, 607, 3213,
	3062, 1279, 607, 3223, 3224, 3225, 3057, 1980, 934, 2883,
	1153, 1154, 1155, 1220, 1899, 3228, 2014, 2882, 1999, 1263,
	1264, 1265, 1266, 1267, 1268, 2838, 607, 2810, 647, 1263,
	1264, 1265, 1266, 1267, 1268, 2794, 607, 2792, 2283, 2692,
	68, 2639, 607, 1204, 1205, 2540, 856, 70, 972, 1161,
	1862, 1941, 2476, 2394, 2289, 856, 856, 2314, 619, 74,
	2173, 607, 3275, 2037, 607, 1263, 1264, 1265, 1266, 1267,
	1268, 1084, 1187, 1920, 2018, 1911, 1768, 1184, 1766, 1181,
	1765, 1764, 1756, 1755, 1754, 1925, 1099, 1164, 1149, 1151,
	607, 1072, 651, 930, 1980, 1980, 1980, 688, 2045, 2469,
	2353, 2880, 1859, 3213, 1877, 1158, 1159, 3223, 3224, 3225,
	2743, 2034, 607, 607, 1172, 2833, 1962, 3495, 3490, 3212,
	3114, 1970, 2621, 647, 647, 647, 647, 647, 1165, 1166,
	1009, 2617, 1169, 3104, 3890, 647, 647, 1263, 1264, 1265,
	1266, 1267, 1268, 647, 1263, 1264, 1265, 1266, 1267, 1268,
	907, 857, 846, 1188, 1998, 3318, 2060, 2287, 847, 2010,
	857, 857, 4352, 1212, 79, 976, 3165, 982, 2050, 2038,
	1749, 1208, 2053, 2054, 79, 1897, 2008, 74, 2087, 1757,
	79, 1989, 607, 4088, 4087, 3777, 4554, 74, 1237, 1236,
	3106, 2313, 1229, 74, 74, 1207, 1207, 1255, 1207, 2126,
	2127, 2087, 1256, 593, 1995, 2830, 1769, 3220, 3221, 3222,
	1263, 1264, 1265, 1266, 1267, 1268, 3214, 3215, 3216, 3217,
	3218, 3219, 3220, 3221, 3222, 2674, 2675, 4302, 3002, 3883,
	79, 3214, 3215, 3216, 3217, 3218, 3219, 1962, 1991, 3060,
	1767, 3268, 907, 1879, 927, 86, 2007, 2009, 926, 907,
	907, 1860, 607, 1034, 1098, 2160, 4246, 2057, 2058, 607,
	907, 1907, 647, 1981, 907, 907, 907, 907, 907, 907,
	907, 907, 907, 907, 907, 907, 907, 907, 907, 907,
	1935, 907, 1912, 1204, 1205, 972, 4555, 972, 2084, 653,
	2061, 1939, 4245, 3889, 2105, 1962, 664, 665, 666, 2557,
	3220, 3221, 3222, 3055, 3909, 4086, 2288, 858, 1959, 3214,
	3215, 3216, 3217, 3218, 3219, 4079, 3364, 2005, 1232, 2545,
	2935, 2167, 3066, 1985, 2544, 2195, 1232, 4474, 2124, 972,
	3709, 1190, 1761, 2063, 1290, 1101, 2067, 1260, 3795, 2487,
	2741, 1272, 1273, 1274, 629, 2459, 2492, 997, 1924, 2492,
	1981, 1981, 1981, 1867, 950, 1769, 1868, 2166, 831, 824,
	1873, 631, 1865, 1034, 2049, 704, 3920, 1870, 1874, 1869,
	629, 1871, 1101, 4109, 3006, 1872, 1283, 1284, 1866, 2486,
	3211, 92, 2967, 3210, 3903, 1875, 2180, 631, 3722, 3067,
	2966, 2972, 2724, 2441, 2443, 2442, 3902, 3663, 2968, 1207,
	3466, 3333, 1921, 1207, 1207, 2493, 115, 987, 2493, 1933,
	2099, 2100, 2101, 115, 2004, 993, 2106, 2988, 1972, 2111,
	1290, 2184, 2570, 1260, 958, 752, 2158, 1079, 3220, 3221,
	3222, 2021, 829, 766, 752, 752, 2568, 3214, 3215, 3216,
	3217, 3218, 3219, 2152, 679, 2142, 637, 4419, 1865, 2624,
	2183, 3200, 3540, 3178, 2027, 2026, 3700, 2165, 3910, 1048,
	2753, 2518, 2752, 4299, 1866, 1180, 2751, 3456, 2750, 2963,
	2569, 1875, 4262, 693, 1126, 692, 2081, 4162, 4161, 3679,
	2175, 2176, 2177, 691, 2567, 690, 3761, 3483, 2972, 3480,
	3919, 1178, 3069, 4393, 1080, 2968, 2620, 4418, 2043, 2039,
	1124, 2168, 3053, 2025, 2003, 1984, 2169, 3468, 4255, 3505,
	2172, 3220, 3221, 3222, 2174, 1776, 3151, 981, 2129, 4536,
	3214, 3215, 3216, 3217, 3218, 3219, 4535, 1050, 3916, 2494,
	2206, 3915, 2494, 4119, 4256, 2212, 838, 2196, 2214, 4396,
	4275, 3936, 3697, 979, 3710, 3691, 2002, 3538, 2718, 2668,
	2198, 2500, 3474, 752, 2190, 2192, 1992, 3007, 843, 1776,
	2223, 1776, 2224, 2235, 3096, 3093, 1141, 3092, 2921, 2286,
	1145, 1992, 1992, 1992, 1992, 1233, 1992, 4102, 3034, 4473,
	4458, 2556, 2912, 1233, 752, 1992, 2164, 1992, 786, 752,
	3888, 2098, 1290, 4321, 2579, 1260, 2036, 1081, 2210, 2210,
	3465, 2109, 1177, 1118, 2975, 2208, 1170, 4323, 2115, 2215,
	1992, 1123, 3723, 786, 1121, 3220, 3221, 3222, 1231, 3666,
	1865, 1048, 2665, 3199, 3214, 3215, 3216, 3217, 3218, 3219,
	2022, 2723, 2649, 3517, 2186, 1992, 1866, 3134, 116, 2680,
	2974, 2024, 2023, 1875, 2187, 116, 2121, 2285, 1234, 4303,
	1049, 2679, 2120, 2678, 978, 2677, 1234, 2662, 2661, 637,
	2091, 2086, 1115, 2976, 2725, 3137, 2188, 3430, 1114, 1097,
	1096, 1091, 1095, 2833, 1129, 1085, 2526, 3963, 1083, 1076,
	1075, 1074, 1070, 3453, 2086, 1290, 1179, 152, 1260, 1050,
	2020, 4301, 1272, 1273, 1274, 1125, 2114, 3068, 3074, 2113,
	4021, 4322, 2236, 4320, 1867, 752, 2112, 1868, 843, 3396,
	3311, 1873, 3457, 1865, 3581, 2041, 1994, 1993, 1870, 1874,
	1869, 4362, 1871, 632, 1235, 3455, 1872, 1283, 1284, 1866,
	2484, 4421, 1235, 2970, 3506, 3492, 1875, 2974, 980, 1093,
	1000, 638, 1051, 1290, 2973, 1923, 1260, 1741, 2940, 3110,
	3107, 3981, 3207, 1191, 907, 907, 652, 907, 630, 2444,
	3436, 2776, 4114, 752, 1242, 907, 907, 907, 2056, 907,
	2558, 1865, 1052, 2913, 2764, 1053, 828, 883, 682, 1054,
	842, 3436, 3929, 823, 630, 3174, 2118, 1866, 677, 636,
	2736, 1905, 1969, 4363, 1875, 2485, 3094, 4319, 2586, 1077,
	114, 1055, 113, 1034, 661, 662, 663, 114, 3397, 113,
	2577, 2572, 1049, 655, 656, 657, 658, 659, 660, 1224,
	118, 2664, 963, 2969, 4120, 4389, 1189, 1107, 634, 963,
	2970, 2304, 4420, 2046, 3559, 3136, 4388, 2924, 2046, 1058,
	1279, 2973, 1094, 3536, 1128, 2456, 840, 1922, 830, 1269,
	1270, 1271, 753, 3558, 860, 3335, 1056, 3897, 1263, 1264,
	1265, 1266, 1267, 1268, 907, 2971, 647, 4022, 907, 907,
	907, 907, 651, 1057, 3662, 3458, 3053, 1776, 1082, 2922,
	2348, 4258, 2350, 3674, 4121, 1290, 1886, 3507, 1260, 2207,
	2373, 2373, 1915, 3175, 1103, 4390, 2030, 3876, 1999, 647,
	3306, 4263, 3726, 4112, 1051, 1914, 3636, 3095, 1117, 3074,
	1059, 1119, 2030, 1865, 3059, 633, 2757, 841, 3336, 1120,
	2969, 4249, 4103, 2511, 607, 2299, 2303, 635, 2305, 1866,
	842, 3961, 4142, 2464, 1052, 3725, 1875, 1053, 4158, 3635,
	2331, 1054, 2923, 2475, 1263, 1264, 1265, 1266, 1267, 1268,
	2035, 647, 1772, 1905, 3026, 1999, 2957, 2045, 2178, 838,
	3463, 4020, 2971, 1055, 3510, 4584, 3371, 4583, 2018, 4260,
	2647, 4259, 3711, 3696, 2514, 647, 2498, 954, 1763, 607,
	597, 3724, 3437, 869, 2302, 754, 2505, 4126, 3703, 4534,
	4252, 869, 871, 3021, 607, 607, 840, 1106, 1999, 4317,
	639, 1058, 636, 3437, 3237, 641, 3493, 2309, 2548, 1916,
	2552, 2504, 3372, 1192, 2437, 2328, 4381, 4099, 1056, 1749,
	3111, 3108, 1243, 3940, 2524, 2525, 2296, 2541, 4141, 2428,
	607, 1769, 3362, 1104, 1223, 1057, 2562, 3135, 2428, 1769,
	2290, 3438, 607, 755, 1092, 826, 1127, 689, 869, 871,
	66, 3539, 2029, 3012, 65, 67, 647, 647, 2310, 1109,
	1222, 705, 3438, 2330, 78, 1108, 607, 841, 2029, 674,
	607, 1008, 1059, 3430, 4235, 4364, 3529, 836, 2376, 3450,
	2515, 2047, 907, 836, 3439, 2048, 2047, 1182, 2078, 3528,
	2048, 75, 2960, 964, 861, 76, 3329, 2135, 2460, 2446,
	4462, 3259, 2825, 1163, 3867, 3439, 180, 3868, 1133, 1152,
	3869, 865, 2521, 4573, 2355, 80, 1263, 1264, 1265, 1266,
	1267, 1268, 69, 3370, 3262, 2426, 3879, 2612, 3870, 1167,
	1168, 4392, 3420, 2778, 4632, 4579, 2495, 4487, 3821, 2843,
	64, 3595, 2827, 647, 710, 4045, 2139, 710, 652, 710,
	710, 2138, 708, 4062, 2580, 742, 4387, 742, 742, 3632,
	2694, 2356, 2699, 2700, 2510, 3872, 4636, 4635, 4046, 4063,
	2605, 4631, 2375, 2375, 907, 3871, 2608, 2609, 2351, 1130,
	647, 4624, 4589, 4588, 2536, 3873, 4609, 2379, 4608, 3511,
	4623, 1279, 2137, 4611, 4639, 1105, 870, 4610, 907, 1102,
	1269, 1270, 1271, 2623, 870, 4132, 907, 4457, 3387, 1263,
	1264, 1265, 1266, 1267, 1268, 4614, 3020, 4569, 4612, 907,
	2807, 4615, 4570, 2698, 4613, 825, 2657, 2373, 2461, 2659,
	2660, 1110, 3702, 2462, 607, 3048, 4591, 2519, 3361, 1176,
	2463, 706, 4590, 1069, 2466, 2136, 4572, 3260, 2826, 673,
	989, 4630, 2523, 4629, 4586, 3369, 2375, 907, 907, 3880,
	1007, 870, 4168, 907, 651, 3421, 2779, 1263, 1264, 1265,
	1266, 1267, 1268, 1175, 3905, 4061, 3660, 3024, 1132, 907,
	907, 2529, 996, 3046, 907, 3015, 2919, 2719, 832, 834,
	652, 4542, 2618, 907, 4547, 3898, 2622, 2701, 4545, 907,
	4546, 4548, 2528, 2672, 2470, 865, 597, 2595, 1198, 2746,
	907, 2601, 1987, 4336, 2812, 3874, 3875, 1230, 2781, 907,
	907, 907, 1116, 2782, 3451, 960, 3620, 4209, 2610, 4555,
	2783, 2615, 2596, 4517, 907, 4443, 2740, 4442, 2834, 2780,
	4338, 4551, 2770, 4341, 2768, 2714, 4578, 3452, 2766, 4337,
	2767, 2769, 3295, 1886, 907, 1006, 4339, 2549, 4618, 907,
	4480, 3694, 2867, 2867, 710, 2793, 2373, 2867, 2867, 2867,
	2626, 2625, 4593, 2658, 3045, 3646, 1174, 2735, 4592, 4594,
	4595, 2891, 3856, 4343, 597, 995, 3832, 3852, 4544, 607,
	4549, 607, 607, 2643, 3277, 1896, 607, 607, 2946, 856,
	2496, 1207, 2445, 2374, 2374, 2390, 651, 1207, 1207, 1263,
	1264, 1265, 1266, 1267, 1268, 2032, 2447, 1251, 1193, 647,
	2079, 2928, 193, 68, 2076, 2666, 2667, 2378, 2527, 2078,
	70, 3601, 2913, 2088, 2691, 2011, 3816, 2584, 4340, 4214,
	4215, 2538, 2477, 2478, 2479, 2480, 2481, 4577, 850, 3817,
	4349, 4213, 2683, 4347, 2686, 2790, 3849, 3850, 3598, 4218,
	607, 4055, 2749, 4053, 2795, 2754, 597, 3847, 2277, 4355,
	4356, 2717, 4217, 2722, 2900, 4056, 2583, 3627, 2726, 1207,
	2585, 2077, 2842, 2729, 3588, 2728, 1938, 2374, 2212, 3858,
	3851, 2841, 3854, 3855, 3857, 3853, 4354, 607, 607, 2344,
	2345, 4269, 2958, 2739, 857, 2738, 4268, 2080, 2582, 2375,
	2819, 2727, 4520, 82, 83, 84, 85, 907, 2784, 2789,
	4027, 1980, 4348, 1776, 3404, 2852, 3022, 2841, 4030, 2943,
	2903, 4268, 4269, 2221, 2222, 2925, 2926, 2763, 2816, 1207,
	2761, 907, 3846, 2773, 2774, 2936, 3075, 79, 3185, 3186,
	4196, 2732, 2732, 2875, 2676, 2888, 2889, 1776, 939, 3082,
	74, 4195, 2771, 4029, 4028, 3033, 3405, 3035, 2908, 3815,
	827, 773, 2797, 2885, 2858, 2863, 2861, 2862, 2860, 668,
	2856, 2859, 3008, 2864, 2809, 2806, 2740, 2693, 2876, 2877,
	2878, 4354, 4439, 2702, 3425, 2820, 2821, 2937, 2939, 2349,
	3406, 3407, 3408, 2338, 2836, 2839, 678, 1776, 179, 1743,
	3076, 4585, 4476, 856, 2980, 3019, 3925, 4160, 2547, 2848,
	3140, 3686, 752, 2846, 2847, 3533, 1776, 3532, 3304, 2872,
	2874, 2871, 2093, 2870, 4477, 2092, 1940, 2961, 2296, 2979,
	907, 1890, 3039, 2890, 2917, 2884, 2375, 1889, 2375, 1247,
	3285, 607, 2273, 2274, 2275, 2276, 3611, 2337, 2945, 2772,
	2543, 3280, 3, 2914, 3279, 2045, 4638, 2945, 4622, 3016,
	2858, 2863, 2861, 2862, 2860, 4621, 2856, 2859, 4620, 752,
	2929, 4567, 4077, 3099, 3100, 4118, 2938, 4267, 3000, 4265,
	3651, 3593, 2887, 3592, 2887, 856, 856, 647, 647, 3347,
	3132, 3413, 2947, 3328, 3255, 3254, 2920, 647, 2944, 2706,
	2650, 752, 752, 2396, 2342, 2019, 1973, 2916, 857, 1968,
	1142, 2977, 1112, 1111, 3038, 1089, 2998, 2999, 1001, 922,
	1258, 625, 3003, 621, 3545, 907, 3188, 2311, 607, 4412,
	2374, 4328, 4327, 3072, 620, 186, 907, 4219, 607, 3013,
	607, 4043, 3805, 3762, 3638, 607, 3546, 907, 907, 3484,
	3481, 907, 907, 907, 3348, 907, 1207, 1207, 3261, 3030,
	3142, 3032, 2952, 2055, 2052, 873, 907, 1981, 752, 3031,
	3061, 871, 3047, 2748, 2983, 3183, 3054, 907, 907, 3713,
	2194, 2994, 2745, 907, 3065, 907, 3177, 2731, 3714, 3672,
	857, 857, 3671, 2756, 3037, 1769, 2358, 2814, 907, 3283,
	2863, 2861, 2862, 2860, 3242, 907, 583, 3715, 907, 1207,
	3126, 4501, 3912, 907, 907, 3105, 3176, 2730, 907, 907,
	3610, 2858, 2863, 2861, 2862, 2860, 3101, 2856, 2859, 3609,
	1962, 3712, 907, 3206, 3115, 1894, 2348, 2881, 1893, 2775,
	2226, 624, 1886, 4500, 4401, 3989, 2373, 3986, 3780, 2373,
	3757, 3752, 3751, 3502, 3501, 3494, 3489, 3288, 3003, 3402,
	2867, 2867, 2867, 2867, 2867, 3130, 3157, 2374, 3156, 2374,
	3155, 3154, 3153, 907, 907, 3152, 907, 3148, 3118, 3147,
	3138, 3127, 3123, 597, 1999, 3125, 3113, 3316, 856, 3112,
	3109, 3043, 3042, 3041, 2762, 2280, 3179, 2760, 3103, 2688,
	2663, 2644, 2279, 2280, 907, 2262, 2128, 2991, 3144, 2125,
	3145, 3146, 2123, 2122, 2108, 2104, 2103, 2102, 2097, 3160,
	2096, 3173, 2090, 2089, 2075, 907, 907, 2074, 2073, 2071,
	2901, 2044, 2040, 2033, 2703, 607, 2704, 1896, 2705, 3168,
	1891, 2707, 3169, 2238, 2171, 2239, 2712, 1187, 2711, 859,
	848, 2170, 4097, 2716, 2309, 4464, 3232, 647, 2259, 4430,
	4226, 3362, 4463, 907, 607, 2257, 2260, 2256, 3356, 2258,
	2995, 850, 3811, 3192, 3193, 3194, 3195, 3810, 3741, 3737,
	3657, 2475, 752, 3363, 3590, 3589, 3317, 647, 3334, 3158,
	2907, 3202, 3203, 857, 2640, 627, 3208, 3326, 2637, 3246,
	3270, 3271, 3324, 2633, 3704, 3274, 2522, 2066, 607, 2200,
	1042, 2107, 3400, 1036, 2190, 2192, 3226, 3227, 2373, 2514,
	2796, 4538, 3236, 3315, 3685, 3415, 119, 3734, 3393, 2295,
	3247, 3248, 3250, 3278, 3240, 3355, 3281, 3798, 3376, 2294,
	1999, 2428, 4564, 602, 3431, 4563, 3253, 1776, 1896, 3263,
	2393, 1896, 3273, 1896, 3447, 3265, 3321, 3799, 3353, 2428,
	2428, 3266, 2740, 603, 752, 752, 3256, 3257, 3469, 2296,
	3276, 3358, 3282, 850, 3389, 3446, 3301, 3286, 3287, 2082,
	3648, 3290, 3291, 3292, 3293, 1007, 3383, 1048, 2081, 2721,
	2980, 4107, 4106, 2562, 3514, 3473, 3340, 3391, 3341, 3384,
	3410, 1137, 642, 3307, 3409, 3731, 854, 3323, 3642, 3159,
	3454, 3442, 1138, 1743, 3050, 2979, 2535, 2503, 2296, 2397,
	1964, 1956, 3299, 1906, 3161, 2515, 1962, 1900, 2375, 1004,
	994, 2375, 3350, 3166, 988, 984, 3343, 2426, 3459, 3462,
	2166, 3345, 3337, 966, 4422, 3844, 3973, 3351, 3972, 3349,
	3530, 909, 850, 3427, 3129, 1050, 1769, 917, 3079, 3077,
	3448, 3049, 3017, 2904, 2501, 2497, 2395, 2391, 2181, 1776,
	1776, 1776, 907, 2179, 3739, 652, 2069, 2065, 1974, 1960,
	1952, 1950, 1932, 607, 607, 607, 607, 3374, 912, 3472,
	907, 907, 913, 2740, 911, 3380, 907, 907, 1171, 3382,
	1146, 1143, 3366, 907, 3388, 907, 907, 907, 907, 907,
	907, 907, 907, 907, 907, 907, 907, 3390, 1139, 907,
	3411, 2980, 3414, 3392, 3417, 907, 3426, 1134, 752, 1122,
	907, 1090, 1063, 1060, 1041, 1035, 907, 3738, 2685, 1931,
	907, 954, 822, 4435, 4331, 4272, 2979, 4261, 968, 4179,
	3543, 3953, 907, 3975, 3460, 3461, 3464, 3891, 3831, 3447,
	2983, 3742, 3698, 3684, 3467, 3675, 907, 752, 3531, 3471,
	2373, 2373, 2899, 2508, 2373, 2502, 1183, 1986, 1049, 1881,
	1861, 3476, 2822, 2823, 917, 2867, 2193, 710, 3602, 4576,
	3419, 651, 917, 2191, 4098, 1207, 2733, 3352, 752, 917,
	2375, 2375, 917, 4556, 4399, 850, 4138, 2506, 3025, 1999,
	647, 2051, 3303, 1221, 2185, 2672, 3521, 852, 1211, 3658,
	3911, 4379, 3906, 3665, 4101, 3908, 2190, 2192, 3078, 4254,
	3080, 3904, 3649, 1913, 3637, 3520, 2375, 3491, 607, 3899,
	2915, 2406, 3496, 2918, 2400, 2905, 3422, 2423, 1896, 2419,
	3633, 578, 579, 3455, 185, 2083, 907, 2451, 1919, 2374,
	1918, 3918, 2374, 3917, 3673, 3448, 4125, 647, 3670, 3508,
	1051, 2509, 2648, 3401, 3643, 3403, 1999, 3023, 640, 2507,
	999, 1131, 2119, 4137, 3398, 2687, 710, 2483, 2140, 2993,
	2992, 2983, 38, 3618, 3701, 3614, 37, 36, 35, 34,
	1052, 3683, 33, 1053, 2514, 32, 31, 1054, 3652, 907,
	3128, 58, 3641, 57, 56, 55, 54, 53, 1999, 1905,
	3373, 3718, 52, 51, 50, 49, 1207, 3583, 48, 1055,
	47, 3246, 46, 45, 44, 3655, 43, 3591, 42, 3596,
	907, 3692, 3594, 41, 3562, 3563, 3564, 3565, 3566, 3567,
	3568, 3569, 3570, 3571, 3572, 3573, 2428, 3606, 3607, 40,
	39, 3612, 3527, 30, 3690, 29, 28, 1058, 27, 3615,
	26, 25, 24, 23, 22, 21, 20, 19, 59, 16,
	1926, 103, 3346, 3720, 1056, 937, 1936, 2227, 3717, 3070,
	3644, 1207, 3631, 3171, 3689, 3051, 3428, 155, 2141, 1038,
	4453, 1057, 2560, 4236, 3706, 3310, 907, 90, 3454, 4113,
	2515, 2965, 2962, 3142, 3435, 3308, 4143, 3444, 3735, 3314,
	2386, 3677, 3312, 195, 2383, 4516, 3678, 4543, 3668, 4208,
	2829, 2374, 2374, 2326, 3258, 2824, 907, 2325, 1059, 752,
	4344, 2375, 4051, 3836, 907, 907, 907, 4334, 3653, 3830,
	3767, 3616, 2375, 2375, 2472, 77, 2375, 3693, 4026, 3814,
	2336, 1888, 3705, 63, 601, 600, 4330, 2374, 878, 2375,
	3071, 4067, 3707, 4230, 3859, 3629, 3746, 3848, 3302, 87,
	3604, 1892, 3626, 3754, 3625, 4216, 3756, 4212, 4211, 3267,
	2341, 3623, 3142, 3434, 752, 3142, 3441, 3534, 3443, 2354,
	1876, 907, 2373, 15, 3716, 14, 13, 10, 9, 8,
	3740, 907, 907, 907, 3680, 3681, 7, 6, 3744, 4014,
	4012, 4013, 2672, 3743, 4011, 607, 2284, 3779, 654, 3881,
	1287, 3316, 2672, 3747, 2213, 872, 3659, 607, 3861, 1250,
	864, 3447, 607, 4019, 3241, 3561, 3580, 4005, 1760, 806,
	712, 805, 790, 792, 808, 712, 750, 807, 3864, 791,
	712, 1150, 712, 789, 1776, 788, 1776, 814, 3164, 750,
	750, 2300, 902, 901, 2307, 2805, 1758, 1776, 896, 897,
	812, 812, 892, 3688, 1241, 607, 2375, 1238, 3884, 3797,
	3892, 2581, 3081, 3102, 3400, 2587, 4159, 2684, 1294, 1289,
	710, 2, 1, 647, 0, 0, 0, 0, 742, 0,
	0, 3945, 0, 3951, 0, 750, 0, 0, 0, 3826,
	0, 3447, 652, 0, 647, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 3886, 0, 3926, 0, 0, 0,
	0, 0, 3446, 0, 3968, 3882, 3813, 3448, 0, 0,
	0, 0, 3921, 0, 0, 3939, 3822, 0, 0, 0,
	3862, 0, 652, 710, 0, 3661, 0, 3315, 0, 0,
	0, 742, 2374, 3865, 3845, 3893, 3993, 0, 3983, 3842,
	3877, 3841, 0, 2374, 2374, 3954, 4007, 2374, 907, 3825,
	60, 3804, 3901, 0, 3806, 3900, 907, 3966, 1207, 0,
	2374, 0, 0, 0, 18, 0, 0, 1207, 1207, 17,
	3447, 73, 0, 3959, 0, 3896, 4031, 0, 0, 0,
	710, 0, 3948, 4041, 3946, 907, 12, 3448, 11, 0,
	907, 4032, 3922, 3782, 3783, 907, 0, 3991, 651, 0,
	3965, 0, 0, 0, 0, 3771, 3772, 0, 0, 0,
	3775, 3776, 3962, 3977, 3964, 3942, 0, 2740, 0, 0,
	4073, 3976, 0, 0, 3988, 0, 0, 0, 0, 3995,
	0, 0, 3992, 3142, 3990, 0, 0, 0, 651, 0,
	0, 0, 4068, 0, 2375, 2980, 0, 0, 0, 0,
	0, 0, 4074, 3676, 0, 0, 4042, 0, 3745, 0,
	0, 0, 0, 607, 0, 0, 4025, 4057, 4058, 4082,
	2979, 4059, 4060, 4037, 0, 0, 3448, 2374, 0, 0,
	0, 4036, 907, 2375, 0, 0, 3618, 0, 0, 4034,
	0, 4084, 0, 4111, 0, 0, 710, 3863, 0, 3773,
	2373, 0, 0, 3537, 4136, 0, 0, 0, 907, 907,
	4078, 0, 0, 0, 607, 4110, 0, 0, 0, 0,
	1776, 4104, 4083, 3784, 0, 907, 0, 4023, 0, 0,
	4069, 0, 0, 0, 0, 0, 4085, 0, 4033, 4081,
	0, 752, 0, 0, 0, 0, 4100, 4093, 4092, 907,
	0, 0, 4091, 0, 0, 4128, 0, 4108, 0, 0,
	0, 4133, 3655, 2375, 0, 0, 907, 0, 0, 0,
	4164, 907, 907, 907, 4130, 0, 0, 4127, 1896, 4154,
	3808, 1886, 4139, 4134, 0, 4140, 0, 4131, 0, 2475,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	4155, 4156, 0, 4210, 0, 0, 2785, 2785, 4089, 0,
	0, 0, 1896, 0, 1896, 2983, 0, 4207, 0, 0,
	752, 856, 4197, 752, 4169, 4172, 4173, 0, 0, 4050,
	0, 4238, 0, 0, 3861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1207, 0, 2375, 4232, 0, 752, 0, 4192, 4193, 0,
	0, 0, 2375, 4233, 0, 4199, 597, 4204, 0, 4243,
	4241, 0, 4205, 0, 0, 2374, 0, 647, 0, 4146,
	4147, 0, 4247, 0, 712, 712, 0, 0, 4242, 4234,
	4229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1896, 0, 4244, 712, 652, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 2374, 0, 4145, 4257, 712, 712,
	0, 0, 712, 4064, 0, 0, 857, 0, 0, 4007,
	4264, 907, 0, 907, 907, 4251, 4266, 4239, 0, 907,
	0, 4270, 0, 0, 0, 4289, 0, 0, 4276, 4274,
	4292, 0, 4041, 0, 0, 4329, 0, 907, 0, 0,
	907, 1207, 0, 4286, 0, 4288, 4293, 4290, 4318, 1776,
	4295, 4148, 812, 4150, 0, 4152, 0, 1896, 4304, 4291,
	4002, 4004, 2375, 0, 0, 4310, 4312, 4311, 0, 0,
	0, 907, 0, 0, 2374, 0, 4324, 4325, 0, 0,
	0, 3447, 4333, 0, 907, 3748, 3749, 0, 4380, 0,
	710, 710, 0, 4367, 4368, 0, 0, 0, 742, 742,
	651, 4377, 4374, 4382, 4383, 0, 0, 4371, 0, 0,
	4370, 4372, 856, 0, 0, 3766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4361, 0, 4406, 4373,
	4376, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 0, 3781, 0, 742, 0, 907, 0, 4391, 4413,
	4394, 0, 0, 2045, 0, 0, 0, 4423, 1896, 1896,
	4409, 4410, 4426, 2374, 4400, 0, 4405, 907, 907, 4408,
	0, 907, 0, 2374, 4095, 0, 4402, 4397, 4404, 1886,
	0, 752, 0, 2348, 4313, 4314, 0, 3448, 0, 0,
	4417, 0, 0, 2375, 0, 0, 0, 4238, 647, 647,
	750, 4427, 4220, 4221, 4222, 4223, 3447, 4437, 710, 750,
	750, 0, 0, 4432, 0, 0, 4456, 857, 4445, 4446,
	4436, 4232, 4438, 0, 4452, 0, 4441, 4454, 0, 0,
	4444, 0, 0, 712, 0, 712, 0, 712, 4451, 4449,
	0, 4450, 0, 647, 0, 0, 0, 0, 712, 712,
	712, 712, 712, 907, 0, 0, 0, 4461, 4384, 712,
	0, 0, 0, 4448, 4483, 907, 4171, 4468, 4171, 4171,
	0, 907, 0, 0, 4470, 0, 0, 0, 712, 0,
	752, 0, 4475, 4486, 0, 0, 0, 0, 0, 0,
	1774, 712, 4485, 2374, 712, 4465, 4469, 0, 907, 0,
	0, 0, 4490, 4239, 0, 0, 0, 0, 4508, 4509,
	4510, 4041, 3448, 4202, 4497, 4499, 4507, 0, 4491, 4493,
	0, 647, 4145, 0, 812, 4283, 0, 3447, 750, 4518,
	4519, 812, 4525, 4511, 1774, 0, 1774, 4502, 4503, 0,
	0, 4522, 0, 4492, 4483, 4494, 4533, 0, 4526, 0,
	0, 4527, 0, 1776, 0, 0, 0, 0, 4506, 750,
	4550, 4553, 4524, 2375, 750, 0, 4504, 0, 0, 2785,
	2785, 0, 0, 907, 0, 752, 4557, 4559, 4565, 0,
	0, 0, 0, 4562, 4523, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 2785, 2785, 4574, 4575, 0, 0,
	856, 4582, 4581, 4194, 0, 0, 4428, 4429, 0, 4533,
	4431, 4596, 812, 0, 710, 710, 4605, 4558, 4601, 4607,
	4597, 4600, 742, 742, 2374, 0, 0, 4603, 4604, 4483,
	0, 4617, 4616, 3448, 0, 0, 4619, 4224, 0, 4227,
	0, 0, 4489, 0, 0, 0, 0, 0, 4607, 0,
	4533, 4625, 4580, 0, 0, 0, 0, 0, 4483, 0,
	4633, 4634, 0, 0, 0, 0, 0, 0, 1776, 4505,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 2375,
	750, 0, 2264, 0, 0, 1776, 0, 0, 2375, 0,
	3297, 752, 2268, 0, 2266, 0, 0, 0, 2263, 0,
	2265, 2267, 0, 0, 0, 857, 0, 0, 812, 0,
	812, 1290, 0, 712, 1260, 0, 0, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 4287, 0, 0, 0, 0,
	1867, 0, 0, 1868, 0, 812, 0, 1873, 750, 1865,
	0, 0, 0, 1050, 1870, 1874, 1869, 0, 1871, 0,
	0, 0, 1872, 1283, 1284, 1866, 0, 0, 0, 0,
	0, 0, 1875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4414, 0,
	2785, 0, 0, 2219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2374, 2221, 2222, 0, 0, 0,
	0, 0, 4357, 0, 0, 712, 0, 0, 0, 2375,
	0, 0, 712, 712, 0, 0, 0, 0, 2277, 0,
	0, 0, 0, 712, 812, 0, 0, 712, 712, 712,
	712, 712, 712, 712, 712, 712, 712, 712, 712, 712,
	712, 712, 712, 4532, 712, 0, 1290, 0, 0, 1260,
	0, 0, 1774, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1867, 1049, 0, 1868, 0,
	0, 0, 1873, 0, 1865, 0, 0, 0, 4530, 1870,
	1874, 1869, 0, 1871, 0, 0, 0, 1872, 1283, 1284,
	1866, 0, 0, 0, 0, 0, 0, 1875, 0, 0,
	0, 752, 0, 4424, 4425, 0, 4532, 0, 0, 0,
	2374, 0, 2269, 0, 0, 0, 0, 0, 0, 2374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4530, 0, 1290, 0, 0, 1260, 4532, 0, 0,
	1272, 1273, 1274, 0, 0, 4515, 0, 0, 1051, 0,
	0, 0, 1867, 0, 0, 1868, 0, 0, 0, 1873,
	0, 1865, 0, 0, 0, 0, 1870, 1874, 1869, 752,
	1871, 0, 4530, 0, 1872, 1283, 1284, 1866, 1052, 0,
	0, 1053, 0, 0, 1875, 1054, 0, 0, 0, 0,
	0, 0, 2273, 2274, 2275, 2276, 0, 1905, 0, 2270,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785,
	2785, 2785, 2785, 2785, 0, 0, 0, 0, 0, 0,
	2374, 0, 1290, 0, 0, 1260, 0, 0, 0, 1272,
	1273, 1274, 0, 0, 1776, 1058, 0, 0, 0, 0,
	0, 1867, 0, 0, 1868, 0, 0, 0, 1873, 0,
	1865, 0, 1056, 0, 0, 1870, 1874, 1869, 0, 1871,
	0, 0, 0, 1872, 1283, 1284, 1866, 1290, 0, 1057,
	1260, 0, 0, 1875, 1272, 1273, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1867, 0, 0, 1868,
	0, 0, 0, 1873, 0, 1865, 0, 1776, 0, 0,
	1870, 1874, 1869, 0, 1871, 0, 1059, 0, 1872, 1283,
	1284, 1866, 0, 1290, 0, 0, 1260, 0, 1875, 0,
	1272, 1273, 1274, 0, 0, 4052, 0, 0, 0, 0,
	0, 0, 1867, 0, 0, 1868, 0, 0, 0, 1873,
	0, 1865, 0, 0, 0, 0, 1870, 1874, 1869, 0,
	1871, 781, 0, 0, 1872, 1283, 1284, 1866, 0, 0,
	1776, 0, 0, 0, 1875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 1776, 0, 0, 0, 0, 1269, 1270, 1271, 0,
	0, 0, 0, 0, 0, 1263, 1264, 1265, 1266, 1267,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 675, 0, 0, 0, 680, 681, 0,
	0, 686, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 756, 0, 759,
	0, 761, 762, 763, 764, 765, 0, 712, 712, 770,
	712, 0, 0, 775, 0, 0, 0, 782, 712, 712,
	712, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 1270, 1271, 0, 0, 0, 0, 4447, 0,
	1263, 1264, 1265, 1266, 1267, 1268, 0, 0, 0, 1290,
	0, 0, 1260, 0, 0, 0, 1272, 1273, 1274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1867, 0,
	0, 1868, 0, 0, 0, 1873, 0, 1865, 0, 0,
	0, 0, 1870, 1874, 1869, 0, 1871, 0, 0, 0,
	1872, 1283, 1284, 1866, 0, 0, 0, 712, 3833, 2785,
	1875, 712, 712, 712, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 712, 712, 0, 0, 0, 1269, 1270,
	1271, 0, 0, 0, 0, 4309, 0, 1263, 1264, 1265,
	1266, 1267, 1268, 0, 0, 812, 0, 0, 0, 0,
	1290, 0, 0, 1260, 812, 0, 0, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 1774, 1867,
	0, 0, 1868, 0, 0, 0, 1873, 0, 1865, 0,
	0, 0, 0, 1870, 1874, 1869, 0, 1871, 0, 0,
	0, 1872, 1283, 1284, 1866, 0, 0, 0, 0, 0,
	0, 1875, 1774, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	812, 0, 0, 0, 0, 0, 0, 1269, 1270, 1271,
	0, 0, 0, 812, 4294, 0, 1263, 1264, 1265, 1266,
	1267, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 750, 0, 936,
	0, 1774, 1269, 1270, 1271, 0, 0, 0, 0, 4271,
	0, 1263, 1264, 1265, 1266, 1267, 1268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 4044, 0, 0, 712, 0, 2785, 1269, 1270,
	1271, 0, 0, 0, 750, 0, 0, 1263, 1264, 1265,
	1266, 1267, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 750, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 812,
	712, 0, 712, 712, 0, 812, 0, 0, 0, 0,
	0, 1290, 0, 0, 1260, 0, 0, 0, 1272, 1273,
	1274, 0, 898, 62, 0, 0, 0, 712, 0, 0,
	1867, 0, 0, 1868, 0, 0, 0, 1873, 0, 1865,
	0, 0, 0, 750, 1870, 1874, 1869, 0, 1871, 0,
	0, 712, 1872, 1283, 1284, 1866, 0, 0, 0, 712,
	0, 0, 1875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 616, 0, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 598, 957, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 62,
	712, 712, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	1260, 0, 712, 712, 1272, 1273, 1274, 712, 0, 0,
	0, 998, 0, 0, 1002, 2785, 712, 0, 0, 0,
	0, 0, 712, 1873, 0, 1865, 0, 0, 0, 0,
	1870, 1874, 1869, 712, 1871, 0, 0, 0, 1872, 1283,
	1284, 1866, 712, 712, 712, 1279, 0, 0, 1875, 0,
	0, 0, 0, 0, 1269, 1270, 1271, 712, 0, 0,
	0, 3999, 0, 1263, 1264, 1265, 1266, 1267, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 712, 0, 0, 1086, 0, 712, 0, 712,
	0, 0, 0, 0, 0, 0, 0, 1290, 1113, 0,
	1260, 0, 0, 0, 1272, 1273, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1867, 0, 0, 1868,
	0, 0, 812, 1873, 0, 1865, 0, 750, 0, 0,
	1870, 1874, 1869, 0, 1871, 0, 0, 0, 1872, 1283,
	1284, 1866, 0, 0, 0, 0, 1279, 0, 1875, 0,
	0, 812, 812, 0, 0, 1269, 1270, 1271, 0, 0,
	812, 0, 3971, 0, 1263, 1264, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 4342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1774, 812, 709, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 1290, 0, 0, 1260, 0, 750,
	750, 1272, 1273, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1867, 0, 0, 1868, 0, 0, 0,
	1873, 0, 1865, 0, 0, 0, 0, 1870, 1874, 1869,
	712, 1871, 0, 0, 0, 1872, 1283, 1284, 1866, 0,
	1290, 0, 0, 1260, 0, 1875, 0, 1272, 1273, 1274,
	0, 0, 0, 616, 712, 0, 0, 0, 0, 1867,
	0, 0, 1868, 0, 0, 0, 1873, 0, 1865, 0,
	0, 0, 0, 1870, 1874, 1869, 0, 1871, 0, 0,
	1917, 1872, 1283, 1284, 1866, 0, 0, 0, 0, 0,
	0, 1875, 0, 0, 2785, 2785, 0, 0, 2785, 0,
	0, 0, 0, 0, 1774, 1774, 1774, 0, 0, 0,
	1290, 1953, 0, 1260, 0, 0, 0, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1873, 0, 1865, 0,
	0, 793, 793, 1870, 1874, 1869, 0, 1871, 0, 0,
	881, 881, 0, 712, 1866, 0, 0, 0, 0, 0,
	0, 1875, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 1269, 1270, 1271, 0,
	0, 2070, 0, 3950, 0, 1263, 1264, 1265, 1266, 1267,
	1268, 0, 750, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 2095, 0, 0, 812, 1018, 0, 0, 0,
	0, 1019, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 2161, 0, 0, 2163, 0, 0, 0, 0,
	712, 712, 0, 0, 712, 712, 712, 0, 712, 0,
	0, 0, 596, 0, 0, 0, 0, 0, 1021, 712,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 0,
	712, 712, 1269, 1270, 1271, 0, 712, 0, 712, 0,
	0, 1263, 1264, 1265, 1266, 1267, 1268, 1027, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 712, 0, 0, 0, 0, 712, 712, 0, 0,
	0, 712, 712, 0, 0, 0, 0, 0, 1032, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 712,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 1017, 0, 1279, 0, 0, 712, 712, 0, 712,
	0, 0, 1269, 1270, 1271, 0, 0, 0, 0, 3927,
	0, 1263, 1264, 1265, 1266, 1267, 1268, 0, 1022, 1239,
	0, 1246, 0, 1254, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 1736, 1737, 1738, 1739, 1740, 0,
	0, 0, 0, 0, 0, 1745, 0, 812, 712, 712,
	812, 0, 812, 1024, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 1759, 812, 812, 0, 0, 812,
	0, 0, 0, 0, 750, 0, 0, 1856, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	1279, 0, 812, 0, 1025, 0, 0, 0, 0, 1269,
	1270, 1271, 751, 751, 0, 0, 3803, 0, 1263, 1264,
	1265, 1266, 1267, 1268, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 712, 0, 0, 0, 1279, 0, 0, 1026,
	0, 0, 0, 0, 0, 1269, 1270, 1271, 751, 0,
	1029, 0, 3792, 0, 1263, 1264, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 0, 0, 0, 712, 1747, 0,
	0, 0, 1750, 1751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3124, 0, 1031, 1030, 0, 0, 1774,
	812, 1774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1774, 0, 0, 0, 1279, 0, 0, 0,
	62, 0, 0, 0, 0, 1269, 1270, 1271, 0, 0,
	0, 0, 0, 0, 1263, 1264, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1020, 793, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 1034, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 712, 712, 0, 0, 0, 0, 712,
	712, 0, 0, 0, 0, 0, 712, 812, 712, 712,
	712, 712, 712, 712, 712, 712, 712, 712, 712, 712,
	0, 0, 712, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 712, 712, 0, 0, 712, 1736, 1737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 881,
	712, 0, 0, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
	2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 0,
	2261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 812, 0, 92,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 812, 1290, 0, 0, 1260, 0, 0, 0,
	1272, 1273, 1274, 0, 115, 0, 0, 0, 95, 712,
	0, 0, 1867, 0, 0, 1868, 0, 0, 0, 1873,
	0, 1865, 0, 0, 0, 1774, 1870, 1874, 1869, 0,
	1871, 0, 0, 3627, 1872, 1283, 1284, 1866, 0, 712,
	0, 0, 0, 0, 1875, 0, 750, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 1260, 0, 793, 0, 1272, 1273, 1274,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 1867,
	0, 0, 1868, 712, 0, 0, 1873, 0, 1865, 2282,
	0, 0, 0, 1870, 1874, 1869, 0, 1871, 0, 0,
	812, 1872, 1283, 1284, 1866, 0, 0, 0, 0, 0,
	0, 1875, 0, 0, 0, 750, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 812, 0, 0, 1019, 0, 0, 0, 1028, 712,
	750, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 2457, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 2471, 0, 0, 0, 0, 712, 712, 712,
	0, 0, 0, 0, 2488, 0, 0, 0, 94, 0,
	0, 0, 2499, 0, 0, 104, 0, 0, 0, 0,
	0, 1021, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 100, 812, 0, 0, 0, 116, 0, 0, 0,
	0, 2530, 2531, 2532, 0, 0, 0, 0, 0, 0,
	1027, 0, 2539, 0, 712, 712, 0, 0, 0, 793,
	2550, 793, 2554, 2555, 712, 712, 712, 0, 2559, 0,
	0, 2563, 2564, 0, 1774, 2571, 0, 2573, 2576, 0,
	0, 1032, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 2598, 2599, 0, 712, 2603, 2604, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2613, 2614, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 2627, 1017, 2628, 2629, 2630, 2631, 2632,
	0, 0, 2634, 751, 109, 1015, 2638, 0, 0, 0,
	2641, 2642, 751, 751, 2645, 2646, 0, 0, 2651, 2652,
	0, 1022, 0, 712, 2653, 2654, 2655, 0, 0, 0,
	2656, 93, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 712, 793, 0, 2669, 0, 0,
	2670, 0, 0, 0, 1016, 108, 1024, 2681, 2682, 0,
	110, 0, 1023, 2689, 812, 0, 105, 1275, 114, 0,
	113, 97, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 712, 0, 118, 0,
	117, 0, 0, 1775, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 812, 0, 0, 0, 1025, 0, 0,
	0, 712, 0, 0, 2322, 2327, 2329, 0, 0, 712,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 111,
	0, 751, 0, 712, 0, 0, 0, 1775, 0, 1775,
	0, 0, 0, 712, 0, 0, 0, 0, 712, 0,
	0, 0, 1026, 712, 0, 0, 0, 0, 712, 0,
	0, 0, 751, 1029, 0, 0, 0, 751, 0, 1279,
	0, 0, 0, 0, 0, 750, 0, 0, 1269, 1270,
	1271, 0, 0, 0, 0, 0, 0, 1263, 1264, 1265,
	1266, 1267, 1268, 0, 0, 0, 2597, 0, 1031, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 0, 2340, 0, 0, 812, 2253, 2254, 2255,
	2261, 0, 0, 0, 0, 2293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 1279, 0, 1774, 0,
	0, 0, 0, 0, 0, 1269, 1270, 1271, 0, 712,
	0, 0, 3582, 712, 1263, 1264, 1265, 1266, 1267, 1268,
	750, 712, 712, 0, 0, 1020, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1034, 0, 0, 812, 0,
	812, 812, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 0, 712, 712, 712, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 2282, 0, 0,
	0, 712, 598, 1774, 0, 0, 0, 0, 0, 0,
	0, 0, 2362, 2362, 0, 0, 1290, 0, 2956, 1260,
	1774, 0, 0, 1272, 1273, 1274, 750, 0, 0, 0,
	0, 0, 0, 0, 712, 1867, 0, 0, 1868, 0,
	0, 0, 1873, 0, 1865, 0, 2997, 0, 0, 1870,
	1874, 1869, 0, 1871, 3005, 0, 3005, 1872, 1283, 1284,
	1866, 0, 3014, 0, 0, 1275, 0, 1875, 0, 0,
	0, 2636, 1275, 0, 0, 0, 0, 0, 0, 0,
	1275, 0, 0, 0, 1290, 0, 0, 1260, 0, 0,
	0, 1272, 1273, 1274, 0, 1775, 0, 0, 0, 0,
	0, 0, 0, 1867, 0, 0, 1868, 0, 0, 3064,
	1873, 0, 1865, 0, 712, 0, 0, 1870, 1874, 1869,
	0, 1871, 0, 0, 0, 1872, 1283, 1284, 1866, 3088,
	3089, 3090, 3091, 0, 712, 1875, 712, 712, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3116,
	3117, 0, 3120, 3121, 3122, 0, 0, 1246, 0, 2324,
	0, 0, 0, 0, 712, 1745, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 3133, 712, 1254, 0,
	0, 0, 0, 712, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3149, 0, 0, 0, 0,
	3150, 0, 0, 0, 0, 0, 750, 0, 0, 1018,
	0, 0, 1290, 0, 1019, 1260, 2758, 2759, 1028, 1272,
	1273, 1274, 2765, 0, 0, 0, 0, 0, 0, 712,
	812, 1867, 0, 0, 1868, 0, 0, 0, 1873, 712,
	1865, 0, 0, 0, 0, 1870, 1874, 1869, 0, 1871,
	3172, 0, 0, 1872, 1283, 1284, 1866, 0, 2798, 0,
	712, 712, 0, 1875, 712, 0, 0, 0, 0, 2808,
	0, 0, 0, 0, 0, 685, 0, 0, 2322, 2322,
	2322, 1021, 0, 0, 750, 0, 0, 0, 0, 0,
	712, 0, 0, 2837, 0, 0, 0, 0, 1747, 712,
	0, 712, 0, 0, 0, 0, 2434, 0, 0, 0,
	1027, 0, 0, 2849, 0, 2434, 0, 0, 2853, 2362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 1019, 0, 0, 0, 1028, 0,
	0, 1032, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 2282, 0, 0, 0, 0, 712, 1774,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	646, 0, 667, 0, 669, 0, 1747, 2791, 0, 0,
	0, 793, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 793, 1015, 0, 0, 0, 0,
	0, 1021, 0, 737, 738, 0, 740, 812, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 1774, 0, 771, 0, 774, 0, 0, 778,
	1027, 0, 0, 0, 0, 0, 3325, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 1024, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 2869, 0, 2873, 0,
	0, 1032, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3029, 0, 0, 0,
	0, 0, 0, 0, 0, 1774, 712, 0, 0, 3005,
	0, 2833, 1279, 0, 0, 3359, 0, 1025, 0, 0,
	3056, 1269, 1270, 1271, 1017, 0, 0, 712, 712, 0,
	1263, 1264, 1265, 1266, 1267, 1268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1774, 0, 0, 0,
	0, 1022, 1275, 1275, 1275, 1275, 1275, 0, 0, 0,
	793, 1275, 1026, 0, 0, 0, 793, 0, 0, 0,
	0, 3394, 0, 1029, 0, 1275, 0, 0, 3005, 0,
	1279, 0, 0, 0, 0, 0, 1024, 0, 0, 1269,
	1270, 1271, 1023, 0, 3423, 3424, 3575, 0, 1263, 1264,
	1265, 1266, 1267, 1268, 0, 0, 1013, 0, 1031, 1030,
	0, 3440, 0, 0, 0, 62, 0, 0, 0, 3131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3470, 0, 0, 0, 0, 0, 1025, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3475, 0, 0,
	0, 0, 0, 0, 0, 0, 3477, 3478, 3479, 0,
	0, 3482, 0, 0, 3485, 3486, 3487, 3488, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 3497, 0, 3498,
	0, 3499, 1026, 0, 0, 1020, 0, 0, 0, 0,
	3512, 0, 0, 1029, 0, 0, 0, 0, 0, 3518,
	3519, 0, 0, 605, 3522, 3523, 3524, 3525, 3526, 0,
	0, 0, 0, 0, 0, 1034, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3189, 3119, 0, 1031, 1030,
	0, 1775, 0, 2324, 2324, 2324, 3197, 3198, 1279, 0,
	3201, 0, 0, 0, 3204, 0, 0, 1269, 1270, 1271,
	0, 0, 0, 0, 3500, 3209, 1263, 1264, 1265, 1266,
	1267, 1268, 0, 0, 0, 1775, 0, 0, 0, 0,
	0, 0, 3230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3238, 0, 0,
	0, 628, 0, 0, 3243, 0, 0, 2322, 0, 0,
	0, 0, 3251, 3252, 0, 1020, 0, 2329, 2329, 0,
	0, 0, 0, 2909, 0, 1775, 0, 0, 0, 0,
	0, 881, 0, 0, 0, 697, 700, 702, 0, 3605,
	751, 0, 0, 0, 1775, 1034, 0, 0, 0, 0,
	0, 0, 2434, 2909, 0, 0, 0, 0, 0, 0,
	0, 2942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2329, 0, 3300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2909, 0, 0, 751, 0, 0,
	793, 0, 0, 3330, 0, 0, 0, 0, 0, 1290,
	0, 0, 1260, 0, 0, 1747, 1272, 1273, 1274, 0,
	0, 0, 0, 0, 3338, 3339, 0, 0, 1867, 751,
	751, 1868, 0, 0, 0, 1873, 0, 1865, 0, 0,
	0, 0, 1870, 1874, 1869, 0, 1871, 0, 0, 3695,
	1872, 1283, 1284, 1866, 0, 973, 974, 0, 0, 0,
	1875, 62, 0, 0, 0, 0, 62, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2362, 0,
	0, 2362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 3239, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3753, 0, 0, 3755, 0, 0, 0, 0,
	0, 3758, 3759, 3760, 0, 0, 3763, 3764, 3765, 0,
	1087, 1088, 0, 3768, 3769, 0, 1275, 1275, 1275, 1275,
	1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
	1275, 1275, 0, 0, 0, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 3785, 3786, 0, 0, 3790, 0,
	3791, 1290, 0, 0, 1260, 0, 0, 0, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 793, 0, 0,
	1867, 0, 0, 1868, 0, 0, 793, 1873, 778, 1865,
	0, 0, 0, 0, 1870, 1874, 1869, 0, 1871, 0,
	0, 0, 1872, 1283, 1284, 1866, 0, 0, 1275, 0,
	2362, 0, 1875, 1275, 0, 1275, 0, 3812, 0, 0,
	0, 0, 0, 3820, 0, 0, 1275, 0, 0, 0,
	0, 3542, 1290, 0, 0, 1260, 0, 0, 0, 1272,
	1273, 1274, 0, 0, 0, 0, 0, 0, 0, 3551,
	3552, 1867, 0, 0, 1868, 3556, 3557, 0, 1873, 0,
	1865, 0, 3560, 0, 0, 1870, 1874, 1869, 0, 1871,
	751, 0, 0, 1872, 1283, 1284, 1866, 0, 3574, 0,
	0, 0, 0, 1875, 3577, 0, 0, 0, 0, 3578,
	0, 0, 0, 0, 0, 2322, 3005, 0, 0, 2322,
	0, 0, 2324, 0, 0, 0, 0, 0, 3932, 0,
	0, 1254, 0, 3935, 0, 0, 0, 0, 0, 3941,
	0, 0, 3943, 0, 0, 3603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1775, 0, 0, 0, 0,
	0, 0, 0, 0, 1945, 1946, 1947, 1948, 0, 1949,
	0, 0, 751, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3978, 3979, 0, 0, 0, 0, 3985,
	0, 0, 928, 3987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2031, 0, 938, 0, 0, 0, 0,
	0, 0, 4000, 947, 949, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 3682, 0, 0, 2434, 0,
	0, 2909, 0, 2909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2434, 2434, 0, 0,
	2909, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 1775, 1775, 1775,
	0, 0, 2362, 2362, 2402, 0, 2362, 0, 3708, 0,
	0, 0, 2415, 793, 0, 1279, 0, 0, 1064, 0,
	0, 0, 0, 0, 1269, 1270, 1271, 0, 2130, 2131,
	2132, 2133, 2134, 1263, 1264, 1265, 1266, 1267, 1268, 3736,
	778, 2159, 0, 0, 0, 0, 0, 0, 2162, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2421, 0, 0, 0, 0,
	0, 3005, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 4129, 0,
	0, 0, 0, 0, 0, 3778, 0, 0, 0, 2417,
	0, 2909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 3796, 0, 0, 0, 0,
	0, 0, 0, 3800, 3801, 3802, 0, 0, 4163, 0,
	0, 4166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 1275, 0, 0, 0, 0,
	793, 1275, 0, 0, 0, 0, 0, 2407, 0, 0,
	3824, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 3840, 0, 0, 0, 1269, 1270, 1271, 2416,
	0, 0, 0, 3433, 1275, 1263, 1264, 1265, 1266, 1267,
	1268, 0, 0, 0, 1275, 0, 0, 0, 793, 0,
	0, 0, 0, 1858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2412,
	0, 0, 0, 1275, 1902, 0, 0, 0, 0, 0,
	2324, 0, 0, 0, 2324, 1275, 0, 0, 1279, 1275,
	0, 0, 2409, 0, 0, 0, 0, 1269, 1270, 1271,
	0, 0, 2332, 0, 4277, 0, 1263, 1264, 1265, 1266,
	1267, 1268, 0, 2403, 1018, 0, 2414, 0, 0, 1019,
	0, 1967, 0, 1028, 0, 1971, 0, 0, 0, 0,
	1983, 0, 0, 4297, 4298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2362, 0, 0, 0, 0, 2028,
	0, 0, 0, 0, 0, 0, 0, 0, 2420, 0,
	0, 0, 3656, 0, 0, 2042, 0, 0, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 0, 2434, 2059, 0, 1021, 2062, 0, 0,
	0, 62, 0, 70, 0, 0, 2438, 4010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	2413, 0, 0, 2094, 0, 1027, 0, 1983, 1983, 1983,
	0, 0, 0, 0, 0, 0, 2410, 0, 0, 0,
	0, 62, 751, 2408, 4385, 2116, 2117, 2418, 0, 0,
	0, 0, 0, 0, 4054, 0, 1032, 4395, 0, 0,
	2404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1275, 0, 0, 0, 0,
	0, 4411, 0, 0, 2411, 0, 2405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 0,
	1040, 793, 1775, 0, 1775, 2182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1775, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 1024, 0, 0, 62, 0, 0, 1023, 0, 0,
	0, 0, 1290, 0, 0, 1260, 793, 1275, 4466, 1272,
	1273, 1274, 0, 0, 4157, 2217, 0, 0, 0, 0,
	0, 1867, 2234, 0, 1868, 0, 0, 0, 1873, 0,
	1865, 0, 0, 0, 0, 1870, 1874, 1869, 4174, 1871,
	0, 0, 1025, 1872, 1283, 1284, 1866, 0, 0, 0,
	0, 0, 0, 1875, 0, 1745, 0, 0, 0, 0,
	4191, 4191, 4191, 793, 62, 1275, 0, 0, 0, 0,
	0, 0, 0, 1275, 1275, 0, 0, 1275, 0, 0,
	1275, 0, 0, 0, 0, 1275, 0, 1026, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 1290, 0, 1275,
	1260, 0, 2362, 0, 1272, 1273, 1274, 1275, 1275, 0,
	2909, 1039, 0, 1031, 1030, 0, 1867, 0, 0, 1868,
	0, 0, 0, 1873, 0, 1865, 0, 0, 0, 0,
	1870, 1874, 1869, 0, 1871, 0, 0, 0, 1872, 1283,
	1284, 1866, 0, 0, 0, 0, 0, 0, 1875, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	4599, 0, 0, 0, 0, 0, 0, 0, 0, 2147,
	4296, 0, 0, 0, 160, 0, 1275, 0, 0, 0,
	1020, 0, 0, 0, 1275, 1275, 0, 0, 0, 0,
	4010, 2237, 163, 0, 0, 2909, 0, 0, 4191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1775, 0,
	1034, 0, 0, 0, 0, 0, 0, 0, 0, 2329,
	0, 0, 0, 0, 2389, 0, 0, 0, 0, 751,
	0, 0, 0, 793, 793, 0, 0, 0, 0, 0,
	1290, 0, 0, 1260, 0, 0, 0, 1272, 1273, 1274,
	4369, 0, 0, 0, 0, 0, 0, 0, 0, 1867,
	0, 0, 1868, 4378, 0, 0, 1873, 0, 1865, 0,
	0, 0, 0, 1870, 1874, 1869, 2482, 1871, 0, 0,
	0, 1872, 1283, 1284, 1866, 0, 0, 1290, 0, 0,
	1260, 1875, 0, 0, 1272, 1273, 1274, 0, 0, 0,
	2517, 0, 169, 0, 0, 0, 1867, 2143, 751, 1868,
	0, 751, 0, 1873, 0, 1865, 0, 0, 0, 0,
	1870, 1874, 1869, 0, 1871, 4010, 0, 0, 1872, 1283,
	1284, 1866, 0, 165, 0, 0, 0, 0, 1875, 3656,
	0, 0, 0, 751, 166, 0, 0, 793, 0, 0,
	0, 0, 0, 0, 0, 2153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2145,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 0,
	0, 2606, 2607, 0, 171, 0, 0, 0, 1275, 0,
	0, 0, 164, 0, 2146, 0, 0, 1275, 1275, 0,
	0, 0, 1275, 1275, 62, 0, 1275, 0, 0, 0,
	0, 0, 0, 0, 0, 2157, 0, 0, 0, 0,
	1275, 0, 0, 1275, 1275, 0, 0, 0, 0, 0,
	0, 0, 4191, 0, 0, 0, 0, 0, 0, 793,
	0, 793, 793, 0, 2329, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 0, 1775, 0, 0,
	0, 0, 0, 0, 1018, 1048, 0, 0, 2690, 1019,
	0, 0, 0, 1028, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 793, 1269, 1270, 1271,
	0, 0, 152, 2148, 3412, 173, 1263, 1264, 1265, 1266,
	1267, 1268, 0, 0, 0, 778, 1018, 1048, 0, 0,
	0, 1019, 0, 0, 2154, 1028, 0, 2149, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 161, 1275, 0,
	175, 0, 0, 1050, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 2155, 4568, 0, 1275, 0, 0, 2156, 1018, 0,
	0, 0, 168, 1019, 0, 1027, 2150, 1028, 0, 0,
	0, 0, 2151, 0, 0, 1050, 0, 0, 1021, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 162, 751,
	0, 0, 0, 1279, 0, 0, 1032, 0, 0, 0,
	0, 0, 1269, 1270, 1271, 0, 0, 1027, 0, 3235,
	0, 1263, 1264, 1265, 1266, 1267, 1268, 0, 0, 0,
	2144, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	1021, 0, 0, 0, 0, 0, 0, 0, 1032, 1017,
	0, 0, 1275, 0, 0, 0, 1275, 1275, 1275, 0,
	0, 0, 0, 0, 0, 0, 1049, 2458, 0, 1027,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 0, 1275, 0, 751, 0,
	1032, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 1024, 0, 0, 0, 1018, 0, 1023, 1022, 0,
	1019, 0, 0, 0, 1028, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 1019, 0, 2533, 2534, 1028,
	0, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1024, 2927, 0, 1279, 0, 1051, 1023,
	0, 793, 1025, 0, 0, 1269, 1270, 1271, 0, 0,
	1022, 1775, 2297, 2578, 1263, 1264, 1265, 1266, 1267, 1268,
	0, 0, 0, 0, 0, 2600, 0, 1021, 1052, 0,
	0, 1053, 0, 751, 0, 1054, 0, 0, 0, 0,
	1051, 0, 1021, 1279, 1025, 1024, 0, 1047, 0, 2619,
	0, 1023, 1269, 1270, 1271, 0, 1027, 1055, 1029, 0,
	0, 1263, 1264, 1265, 1266, 1267, 1268, 0, 0, 0,
	1052, 1027, 0, 1053, 1018, 0, 0, 1054, 0, 1019,
	0, 0, 0, 1028, 0, 0, 0, 1032, 0, 1047,
	0, 2611, 0, 1031, 1030, 1058, 1025, 0, 0, 1055,
	1029, 0, 1032, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 1056, 0, 1018, 0, 0, 0, 0, 1019,
	0, 0, 0, 1028, 0, 0, 1775, 0, 0, 1057,
	1017, 0, 0, 1044, 0, 1031, 1030, 1058, 0, 0,
	0, 1026, 0, 1775, 0, 1017, 1021, 0, 0, 751,
	1275, 0, 1029, 0, 1056, 0, 0, 1022, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	1020, 1057, 1022, 0, 0, 1027, 0, 0, 793, 0,
	0, 0, 0, 0, 0, 2616, 1021, 1031, 1030, 0,
	0, 0, 1024, 0, 0, 0, 0, 0, 1023, 0,
	1034, 0, 0, 0, 0, 0, 1032, 1024, 1059, 0,
	0, 0, 1020, 1023, 0, 1027, 0, 2755, 160, 0,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 1019, 0, 163, 0, 1028, 0,
	0, 0, 1034, 1025, 0, 0, 1032, 0, 0, 1017,
	0, 0, 0, 1275, 0, 159, 0, 0, 1025, 0,
	0, 0, 0, 0, 1020, 0, 0, 0, 0, 0,
	1275, 0, 3162, 3163, 0, 0, 1022, 2402, 0, 0,
	0, 0, 3167, 0, 0, 2415, 0, 1275, 1026, 1017,
	0, 0, 0, 0, 1034, 0, 0, 0, 0, 1029,
	134, 1021, 0, 1026, 0, 120, 0, 0, 0, 132,
	0, 1024, 0, 0, 1029, 0, 1022, 1023, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	1027, 0, 2602, 0, 1031, 1030, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 169, 2068, 2421, 1031,
	1030, 1024, 0, 0, 0, 0, 0, 1023, 0, 751,
	0, 1032, 1025, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2894, 0, 2897, 2898, 0, 165, 0, 2902,
	0, 0, 2417, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1025, 0, 1017, 0, 0, 1026, 0, 0,
	0, 1020, 0, 157, 0, 0, 0, 0, 1029, 0,
	170, 0, 0, 0, 0, 0, 1020, 0, 171, 0,
	0, 1022, 0, 0, 0, 0, 164, 751, 126, 0,
	0, 1034, 0, 2959, 0, 0, 0, 1026, 0, 0,
	0, 2064, 0, 1031, 1030, 0, 1034, 0, 1029, 158,
	0, 0, 0, 0, 127, 1275, 1024, 0, 0, 0,
	2407, 0, 1023, 0, 1275, 128, 0, 0, 0, 0,
	3010, 3011, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 1062, 2416, 1031, 1030, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 1983, 0, 0, 144, 0, 0,
	0, 0, 1775, 0, 0, 151, 0, 1025, 0, 0,
	0, 0, 0, 125, 0, 131, 0, 176, 0, 0,
	1020, 0, 2412, 0, 0, 0, 152, 0, 0, 173,
	0, 0, 3360, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 2409, 0, 0, 0, 0,
	1034, 0, 1026, 0, 177, 0, 174, 0, 0, 0,
	1020, 161, 3379, 1029, 175, 1775, 2403, 0, 0, 2414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1034, 0, 0, 0, 0, 0, 168, 0, 1031, 1030,
	0, 0, 178, 0, 135, 0, 156, 0, 0, 0,
	0, 2420, 0, 152, 136, 0, 137, 0, 0, 0,
	0, 0, 162, 0, 3143, 0, 0, 0, 1775, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 138, 0,
	0, 142, 0, 139, 0, 0, 70, 0, 122, 2398,
	0, 140, 0, 0, 1275, 0, 0, 0, 0, 0,
	0, 0, 0, 2413, 0, 0, 0, 148, 0, 1775,
	0, 0, 141, 0, 0, 1020, 0, 0, 147, 2410,
	0, 0, 0, 149, 0, 0, 2408, 0, 0, 143,
	2418, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2404, 0, 1034, 0, 0, 0, 123,
	0, 3182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3190, 0, 3191, 0, 0, 0, 2411, 3196, 2405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3687, 0, 0, 0, 0, 3367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3547, 3548, 3549, 3550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3969,
	3970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3667, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3887, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4471, 1778,
	207, 1784, 224, 717, 1794, 273, 310, 525, 1781, 1826,
	370, 1831, 423, 427, 1855, 516, 1788, 1791, 1801, 1804,
	281, 1809, 722, 1817, 728, 1827, 734, 1846, 492, 1852,
	724, 725, 730, 212, 611, 515, 586, 1840, 1786, 1844,
	377, 1837, 1813, 1853, 1830, 1842, 1823, 1828, 220, 1815,
	1816, 1820, 1829, 726, 723, 727, 733, 721, 731, 718,
	729, 1850, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 1785, 1803, 326, 496, 261, 350, 1836,
	240, 383, 1849, 472, 347, 1843, 455, 475, 1805, 367,
	246, 406, 462, 463, 715, 720, 1793, 736, 1780, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 1811,
	358, 415, 572, 1783, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 1851,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 1779, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 1795, 1796,
	1797, 719, 1798, 1799, 1800, 253, 254, 255, 256, 257,
	258, 1802, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 1806, 276, 278, 1807, 279, 282, 1808, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 1810,
	292, 293, 295, 1812, 298, 299, 300, 301, 302, 1814,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	1818, 323, 324, 325, 327, 1819, 328, 329, 332, 333,
	334, 335, 1821, 337, 545, 1822, 338, 339, 340, 1824,
	1825, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 1833, 394, 395, 396, 555, 397, 398, 399, 400,
	1834, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 1835, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 1838, 449, 559, 450, 451, 452, 453,
	454, 1839, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 1841, 473, 474, 735,
	476, 477, 478, 479, 480, 1845, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 1847,
	1848, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 1854, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 1832, 1782,
	1787, 1789, 1790, 1792, 0, 0, 0, 0, 0, 0,
	0, 0, 1293, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 1260, 0, 0, 1771, 1272, 1273, 1274, 1304,
	1306, 1288, 1333, 1354, 0, 1405, 1451, 1421, 1276, 1538,
	1544, 1277, 1605, 1609, 0, 1285, 1335, 1261, 1385, 1400,
	1415, 1427, 1280, 1286, 1278, 1542, 1281, 1686, 1697, 1717,
	1282, 1283, 1284, 1262, 1678, 1735, 1504, 1663, 1315, 0,
	1291, 1629, 0, 0, 1552, 1667, 0, 0, 1329, 0,
	0, 0, 0, 1477, 1466, 1500, 1613, 1438, 1558, 1366,
	1525, 1703, 1595, 1514, 0, 1709, 1627, 1328, 1394, 1378,
	1430, 1495, 1636, 1311, 1395, 1470, 1701, 1390, 1516, 0,
	1357, 1560, 1702, 1665, 1513, 1676, 1646, 1671, 1401, 1539,
	1364, 1586, 1653, 1654, 1324, 1437, 1359, 1712, 1309, 1369,
	1377, 1547, 1348, 1555, 1733, 1487, 1620, 1570, 1568, 0,
	1527, 1596, 1728, 0, 0, 1414, 0, 1408, 1546, 1720,
	1355, 1694, 1589, 1551, 1489, 1623, 1658, 1410, 1391, 1392,
	1448, 1588, 1433, 1367, 1708, 1484, 1488, 1486, 1482, 1479,
	1483, 1480, 1481, 1485, 1435, 1478, 0, 0, 1325, 1545,
	1473, 1643, 1323, 1592, 1431, 1404, 0, 0, 0, 1710,
	1524, 1526, 0, 1679, 1474, 1472, 1383, 1382, 1326, 1711,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1305,
	1307, 1308, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1330, 1331, 1332, 1334, 1337, 1338, 1339, 1341,
	1342, 1343, 1344, 1345, 1346, 1349, 1350, 1351, 1352, 1353,
	1356, 1358, 1360, 1361, 1362, 1363, 1365, 1368, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1379, 1380, 0, 1381, 1384,
	1386, 1387, 1388, 1389, 1393, 1396, 1397, 1398, 1399, 1402,
	1403, 1406, 1407, 1409, 1411, 1412, 1413, 1416, 0, 1417,
	1418, 1419, 1420, 1422, 1423, 1424, 1425, 1426, 1428, 0,
	0, 1429, 1432, 1434, 1436, 1439, 1440, 1441, 1442, 0,
	1443, 1444, 1445, 1446, 1447, 1449, 0, 1450, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1468, 1469, 1471, 0, 1475, 1476, 1491, 1492,
	1493, 1494, 1496, 1498, 1499, 1497, 1501, 1502, 1503, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1515, 1517, 1518,
	0, 1519, 1520, 0, 1521, 1522, 1523, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1540, 1541, 1543,
	1557, 1559, 0, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1569, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1587, 1590, 1591, 1593,
	1594, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1606,
	1607, 1608, 1610, 1611, 1612, 1614, 1615, 1616, 1617, 1618,
	1619, 1621, 1622, 1624, 1625, 1626, 0, 1628, 1630, 1631,
	1632, 1633, 1634, 1635, 1638, 1637, 1639, 1640, 1641, 1642,
	1644, 1645, 1647, 1648, 1649, 1650, 1651, 1652, 1655, 1656,
	1657, 1659, 1660, 1661, 1662, 1664, 1666, 1668, 1670, 1669,
	1672, 1673, 1674, 1675, 1677, 1680, 1681, 1682, 1683, 1684,
	1685, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1695, 0,
	1696, 1698, 1699, 1700, 1704, 1705, 1706, 1707, 1713, 1714,
	1715, 1716, 1718, 0, 0, 1719, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1729, 1730, 1731, 1732, 0, 1734, 1467,
	1556, 1550, 1490, 1548, 1549, 1553, 1554, 0, 0, 1310,
	1327, 1336, 1340, 1347, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 1270, 1271, 0, 0, 0,
	0, 0, 0, 1263, 1264, 1265, 1266, 1267, 1268, 1773,
	0, 4531, 850, 0, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 0, 0, 0, 1778, 207, 1784, 224,
	717, 1794, 273, 310, 525, 1781, 1826, 370, 1831, 423,
	427, 1855, 516, 1788, 1791, 1801, 1804, 281, 1809, 722,
	1817, 728, 1827, 734, 1846, 492, 1852, 724, 725, 730,
	212, 611, 515, 586, 1840, 1786, 1844, 377, 1837, 1813,
	1853, 1830, 1842, 1823, 1828, 220, 1815, 1816, 1820, 1829,
	726, 723, 727, 733, 721, 731, 718, 729, 1850, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	1785, 1803, 326, 496, 261, 350, 1836, 240, 383, 1849,
	472, 347, 1843, 455, 475, 1805, 367, 246, 406, 462,
	463, 715, 720, 1793, 736, 1780, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 1811, 358, 415, 572,
	1783, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 1851, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 1779, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 1795, 1796, 1797, 719, 1798,
	1799, 1800, 253, 254, 255, 256, 257, 258, 1802, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 1806,
	276, 278, 1807, 279, 282, 1808, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 1810, 292, 293, 295,
	1812, 298, 299, 300, 301, 302, 1814, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 1818, 323, 324,
	325, 327, 1819, 328, 329, 332, 333, 334, 335, 1821,
	337, 545, 1822, 338, 339, 340, 1824, 1825, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 1833, 394,
	395, 396, 555, 397, 398, 399, 400, 1834, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 1835, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	1838, 449, 559, 450, 451, 452, 453, 454, 1839, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 1841, 473, 474, 735, 476, 477, 478,
	479, 480, 1845, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 1847, 1848, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	1854, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 1832, 1782, 1787, 1789, 1790,
	1792, 1773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1778, 207,
	1784, 224, 717, 1794, 273, 310, 525, 1781, 1826, 370,
	1831, 423, 427, 1855, 516, 1788, 1791, 1801, 1804, 281,
	1809, 722, 1817, 728, 1827, 734, 1846, 492, 1852, 724,
	725, 730, 212, 611, 515, 586, 1840, 1786, 1844, 377,
	1837, 1813, 1853, 1830, 1842, 1823, 1828, 220, 1815, 1816,
	1820, 1829, 726, 723, 727, 733, 721, 731, 718, 729,
	1850, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 1785, 1803, 326, 496, 261, 350, 1836, 240,
	383, 1849, 472, 347, 1843, 455, 475, 1805, 367, 246,
	406, 462, 463, 715, 720, 1793, 736, 1780, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 1811, 358,
	415, 572, 1783, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 1851, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	1779, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 1795, 1796, 1797,
	719, 1798, 1799, 1800, 253, 254, 255, 256, 257, 258,
	1802, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 1806, 276, 278, 1807, 279, 282, 1808, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 1810, 292,
	293, 295, 1812, 298, 299, 300, 301, 302, 1814, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 1818,
	323, 324, 325, 327, 1819, 328, 329, 332, 333, 334,
	335, 1821, 337, 545, 1822, 338, 339, 340, 1824, 1825,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	1833, 394, 395, 396, 555, 397, 398, 399, 400, 1834,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	1835, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 1838, 449, 559, 450, 451, 452, 453, 454,
	1839, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 1841, 473, 474, 735, 476,
	477, 478, 479, 480, 1845, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 1847, 1848,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 1854, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 1832, 1782, 1787,
	1789, 1790, 1792, 1773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1778, 207, 1784, 224, 717, 1794, 2592, 310, 525, 1781,
	1826, 370, 1831, 423, 427, 1855, 516, 1788, 1791, 1801,
	1804, 281, 1809, 722, 1817, 728, 1827, 734, 1846, 492,
	1852, 724, 725, 730, 212, 611, 515, 586, 1840, 1786,
	1844, 377, 1837, 1813, 1853, 1830, 1842, 1823, 1828, 220,
	1815, 1816, 1820, 1829, 726, 723, 727, 733, 721, 731,
	718, 729, 1850, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 2590, 1785, 1803, 326, 496, 261, 350,
	1836, 240, 383, 1849, 472, 347, 1843, 455, 475, 1805,
	367, 246, 406, 462, 463, 715, 720, 1793, 736, 1780,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	1811, 358, 415, 572, 1783, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	1851, 197, 198, 199, 200, 201, 2591, 203, 204, 205,
	206, 208, 1779, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 1795,
	1796, 1797, 719, 1798, 1799, 1800, 253, 254, 255, 256,
	257, 258, 1802, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 1806, 276, 278, 1807, 279, 282, 1808,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	1810, 292, 293, 295, 1812, 298, 299, 300, 301, 302,
	1814, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 1818, 323, 324, 325, 327, 1819, 328, 329, 332,
	333, 334, 335, 1821, 337, 545, 1822, 338, 339, 340,
	1824, 1825, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 1833, 394, 395, 396, 555, 397, 398, 399,
	400, 1834, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 1835, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 1838, 449, 559, 450, 451, 452,
	453, 454, 1839, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 1841, 473, 474,
	735, 476, 477, 478, 479, 480, 1845, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	1847, 1848, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 1854, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 1832,
	1782, 1787, 1789, 1790, 1792, 811, 0, 1203, 850, 0,
	0, 0, 653, 917, 0, 0, 0, 0, 0, 664,
	665, 666, 1778, 207, 1784, 224, 717, 1794, 273, 310,
	0, 1781, 1826, 370, 1831, 423, 427, 1855, 0, 1788,
	1791, 1801, 1804, 281, 1809, 722, 1817, 728, 1827, 734,
	1846, 492, 1852, 724, 725, 730, 212, 810, 515, 586,
	1840, 1786, 1844, 2985, 1837, 1813, 1853, 1830, 1842, 1823,
	1828, 220, 1815, 1816, 1820, 1829, 726, 723, 727, 733,
	721, 731, 718, 729, 1850, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 1785, 1803, 326, 496,
	261, 350, 1836, 240, 383, 1849, 472, 347, 1843, 455,
	475, 1805, 367, 246, 406, 462, 463, 715, 720, 1793,
	736, 1780, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 1811, 358, 415, 0, 1783, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 1851, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 1779, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 1795, 1796, 1797, 719, 1798, 1799, 1800, 253, 254,
	255, 256, 257, 258, 1802, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 1806, 276, 278, 1807, 279,
	282, 1808, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 1810, 292, 293, 295, 1812, 298, 299, 300,
	301, 302, 1814, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 1818, 323, 324, 325, 327, 1819, 328,
	329, 332, 333, 334, 335, 1821, 337, 0, 1822, 338,
	339, 340, 1824, 1825, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 2984, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 1833, 394, 395, 396, 0, 397,
	398, 399, 400, 1834, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 1835, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 1838, 449, 2436, 450,
	451, 452, 453, 454, 1839, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 1841,
	473, 474, 735, 476, 477, 478, 479, 480, 1845, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 1847, 1848, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 1854, 508, 510, 512,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382, 1832, 1782, 1787, 1789, 1790, 1792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 662, 663,
	0, 0, 0, 0, 0, 0, 2986, 2987, 657, 658,
	659, 660, 711, 0, 909, 850, 0, 0, 0, 904,
	917, 894, 0, 0, 0, 0, 0, 0, 0, 2319,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 887,
	370, 0, 423, 427, 0, 516, 914, 0, 891, 2320,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	919, 920, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 2318,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	906, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	890, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 0, 711, 0,
	909, 850, 0, 0, 0, 904, 917, 894, 0, 0,
	895, 2315, 0, 884, 885, 2316, 207, 0, 224, 717,
	0, 273, 310, 899, 0, 887, 370, 0, 423, 427,
	78, 516, 914, 0, 891, 0, 281, 912, 722, 0,
	728, 913, 734, 911, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 905, 75, 0, 0,
	0, 76, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 1748, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 900,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 919, 920, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 903, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 906, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 890, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 79, 711, 0, 909, 850, 0, 0,
	0, 904, 917, 894, 0, 0, 895, 4181, 0, 884,
	885, 0, 207, 0, 224, 717, 0, 273, 310, 899,
	0, 887, 370, 0, 423, 427, 78, 516, 914, 0,
	891, 0, 281, 912, 722, 0, 728, 913, 734, 911,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 905, 75, 0, 0, 0, 76, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 1748, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 900, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 919, 920, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 903, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 906, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 890, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 79,
	711, 0, 909, 850, 0, 0, 0, 904, 917, 894,
	0, 0, 895, 0, 0, 884, 885, 0, 207, 0,
	224, 717, 0, 273, 310, 899, 0, 887, 370, 0,
	423, 427, 0, 516, 914, 0, 891, 0, 281, 912,
	722, 0, 728, 913, 734, 911, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 900, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 919, 920,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	903, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 906, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 890, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 711, 0, 909, 850,
	0, 0, 0, 904, 917, 894, 0, 0, 895, 0,
	0, 884, 885, 882, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 919, 920, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 711, 0, 909, 850, 0, 0, 0, 904, 917,
	894, 0, 1753, 2301, 895, 0, 0, 884, 885, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 887, 370,
	0, 423, 427, 0, 516, 914, 0, 891, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 919,
	920, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 3245, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 903, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 906,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 890,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 711, 0, 909, 850,
	0, 0, 0, 904, 917, 894, 0, 0, 0, 895,
	0, 0, 884, 885, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 919, 920, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 711, 0, 909, 850, 0, 0, 0, 904, 917,
	894, 0, 0, 0, 895, 3233, 0, 884, 885, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 887, 370,
	0, 423, 427, 0, 516, 914, 0, 891, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 919,
	920, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 903, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 906,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 890,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 711, 0, 909, 850,
	0, 0, 0, 904, 917, 894, 0, 0, 0, 895,
	3180, 0, 884, 885, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 919, 920, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 711, 0, 909, 850, 0, 0, 0, 904,
	917, 894, 0, 0, 895, 2306, 0, 884, 885, 1240,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 887,
	370, 0, 423, 427, 0, 516, 914, 0, 891, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	919, 920, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	906, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	890, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 711, 0, 909,
	850, 0, 0, 0, 904, 917, 894, 0, 0, 0,
	895, 0, 0, 884, 885, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 887, 370, 0, 423, 427, 0,
	516, 914, 0, 891, 0, 281, 912, 722, 0, 728,
	913, 734, 911, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 903, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 906, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 890, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 711, 0, 909, 850, 0, 0, 0, 904,
	917, 894, 0, 0, 0, 895, 0, 0, 884, 885,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 887,
	370, 0, 423, 427, 0, 516, 914, 0, 891, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 4190,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	919, 920, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	906, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 4189, 489, 491, 0,
	890, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 711, 0, 909,
	850, 0, 0, 0, 904, 917, 894, 0, 0, 0,
	895, 0, 0, 884, 885, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 887, 370, 0, 423, 427, 0,
	516, 914, 0, 891, 0, 281, 912, 722, 0, 728,
	913, 734, 911, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 4016, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 4018, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 4017, 433, 434, 906, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 890, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 711, 0, 909, 850, 0, 0, 0, 904,
	917, 894, 0, 0, 0, 4015, 0, 0, 884, 885,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 887,
	370, 0, 423, 427, 0, 4188, 914, 0, 891, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 4190,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	919, 920, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	906, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 4189, 489, 491, 0,
	890, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 711, 0, 909,
	850, 0, 0, 0, 904, 917, 894, 0, 0, 0,
	895, 0, 0, 884, 885, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 887, 370, 0, 423, 427, 0,
	516, 914, 0, 891, 0, 281, 912, 722, 0, 728,
	913, 734, 911, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 2854, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 903, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 906, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 890, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 711, 0, 2211, 850, 0, 0, 0, 904,
	917, 894, 0, 0, 0, 895, 0, 0, 884, 885,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 887,
	370, 0, 423, 427, 0, 516, 914, 0, 891, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	905, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	919, 920, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	906, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	890, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 711, 0, 909,
	850, 0, 0, 0, 904, 917, 894, 0, 0, 0,
	895, 0, 0, 884, 885, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 887, 370, 0, 423, 427, 0,
	516, 914, 0, 891, 0, 281, 912, 722, 0, 728,
	913, 734, 911, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 903, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 906, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 890, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 711, 0, 909, 850, 0, 0, 0, 0,
	917, 894, 0, 0, 0, 895, 0, 0, 1248, 1249,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 0,
	370, 0, 423, 427, 0, 516, 914, 0, 3839, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	919, 920, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	2788, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 909,
	850, 0, 0, 0, 0, 917, 894, 0, 0, 0,
	2205, 0, 0, 2786, 2787, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 0, 370, 0, 423, 427, 0,
	516, 914, 0, 0, 0, 281, 912, 722, 0, 728,
	913, 734, 911, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 903, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 2788, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 1203, 850, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 2205, 0, 0, 2786, 2787,
	207, 0, 224, 717, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 4071, 0,
	281, 1200, 722, 0, 728, 0, 734, 1199, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 1201, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	909, 850, 0, 0, 0, 0, 917, 894, 0, 0,
	4072, 0, 0, 1204, 1205, 4070, 207, 0, 224, 717,
	0, 273, 310, 899, 0, 0, 370, 0, 423, 427,
	0, 516, 914, 0, 0, 0, 281, 912, 722, 0,
	728, 913, 734, 911, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 2204, 393, 391, 0, 358, 415, 572, 900,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 919, 920, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 903, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 2203, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 909, 850, 0, 0, 0,
	904, 917, 894, 0, 0, 0, 2205, 0, 0, 2201,
	2202, 207, 0, 224, 717, 0, 273, 310, 899, 0,
	887, 370, 0, 423, 427, 0, 0, 914, 0, 891,
	0, 281, 912, 0, 0, 0, 913, 0, 911, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 905, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	4190, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 900, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 919, 920, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 903, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 906, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 4189, 489, 491,
	0, 890, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	1203, 850, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 895, 0, 0, 884, 885, 207, 0, 224, 717,
	0, 273, 310, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 1209, 0, 281, 1200, 722, 0,
	728, 0, 734, 1199, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 1201, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 1203, 850, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 1204,
	1205, 207, 0, 224, 717, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 1195,
	0, 281, 1200, 722, 0, 728, 0, 734, 1199, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 1201, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	1203, 850, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 1204, 1205, 207, 0, 224, 717,
	0, 273, 310, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 1200, 722, 0,
	728, 0, 734, 1199, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 1201, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 909, 850, 0, 0, 0,
	0, 917, 894, 0, 0, 0, 0, 0, 0, 1204,
	1205, 207, 0, 224, 717, 0, 273, 310, 899, 0,
	0, 370, 0, 423, 427, 0, 516, 914, 0, 0,
	0, 281, 912, 722, 0, 728, 913, 734, 911, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 900, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 919, 920, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 903, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 2788, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 711,
	0, 909, 850, 0, 0, 0, 0, 917, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 2205, 273, 310, 899, 0, 0, 370, 0, 423,
	427, 0, 516, 914, 0, 0, 0, 281, 912, 722,
	0, 728, 913, 734, 911, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 3835, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	900, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 919, 920, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 903,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 2788, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 909, 850, 0,
	0, 0, 0, 917, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 2205, 273, 310,
	899, 0, 0, 370, 0, 423, 427, 0, 516, 914,
	0, 0, 0, 281, 912, 722, 0, 728, 913, 734,
	911, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 3298, 900, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 919, 920, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 903, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 2788, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 2205, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 78, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	75, 0, 0, 608, 76, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 2363, 1748, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 2371, 2372, 2370, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 919,
	920, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 2365,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 608,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 2363,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 2371,
	2372, 2370, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 2365, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 919, 920, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 3449, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 919, 920, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 4240, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 3994, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 919,
	920, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 2516,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 2371,
	2372, 2370, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 919, 920, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 0, 0, 664, 665, 666,
	0, 207, 0, 224, 0, 74, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 662, 663, 0, 0,
	0, 0, 0, 194, 655, 656, 657, 658, 659, 660,
	653, 0, 0, 0, 0, 0, 0, 664, 665, 666,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 3967, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 662, 663, 0, 0,
	0, 0, 0, 194, 655, 656, 657, 658, 659, 660,
	653, 0, 0, 0, 0, 0, 0, 664, 665, 666,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 2696, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 2697,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 662, 663, 0, 0,
	0, 0, 0, 194, 655, 656, 657, 658, 659, 660,
	653, 0, 0, 0, 0, 0, 0, 664, 665, 666,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 649, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 650,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 661, 662, 663, 0, 0,
	0, 0, 0, 0, 655, 656, 657, 658, 659, 660,
	207, 0, 224, 0, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 0, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 0,
	0, 273, 310, 525, 0, 4358, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 492, 0, 0, 0, 0, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	0, 0, 0, 0, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 0, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	0, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 0, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 0, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 224, 0, 0, 273, 310, 525,
	0, 4228, 370, 0, 423, 427, 0, 516, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 0, 0, 0, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 0, 0, 0, 0,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	0, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 0, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 0, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 0, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	224, 0, 0, 273, 310, 525, 0, 4225, 370, 0,
	423, 427, 78, 516, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 492, 0, 0, 0,
	0, 212, 611, 515, 586, 0, 0, 0, 377, 75,
	0, 0, 0, 76, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 348, 0, 1748, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 0, 0, 0, 0, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 0, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 0, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	0, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 0, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 749, 0, 0, 850,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 224, 717, 74, 273,
	310, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 1200, 722, 0, 728, 0,
	734, 1199, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 1201, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 749, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 224, 717, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 722, 0, 728, 0, 734, 0, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 1963, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	746, 719, 0, 0, 747, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 748, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 0,
	0, 273, 310, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 492, 0, 0, 0, 0, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	608, 1978, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	0, 0, 0, 0, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 0, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	0, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 1982, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 0, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 1979, 474, 0, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 224, 717, 972, 273, 310, 525,
	0, 0, 370, 0, 423, 427, 0, 516, 0, 0,
	0, 0, 281, 0, 722, 0, 728, 0, 734, 0,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 746, 719, 0, 0, 747, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 748, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 2866,
	224, 0, 0, 273, 310, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 492, 0, 0, 0,
	0, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 0, 0, 0, 0, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 0, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 0, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	0, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 0, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 877,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 746, 719, 0, 0, 747,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	769, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 748, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 749, 0, 0, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 1185,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 749, 0, 0, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 1885, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 2813,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 929, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 919, 920, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 2455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 0, 273, 310, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 2430, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 0, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 2433, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 2431,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 2436, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 0,
	194, 0, 0, 0, 0, 0, 513, 514, 2432, 381,
	375, 331, 373, 374, 378, 379, 382, 2450, 207, 0,
	224, 0, 0, 273, 1996, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 2448, 0, 492, 0, 0, 0,
	0, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 0, 0, 2000, 0, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 0, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 0, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 2006, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 2005, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	0, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 2004, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 0, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 2003, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 194, 0, 0, 0,
	2002, 1997, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 224, 0, 0, 273,
	310, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 0, 0, 0, 2388, 0,
	0, 0, 492, 0, 0, 0, 0, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 0, 0,
	2000, 0, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 0, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 0, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 2006, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 2005, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 0, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 2004, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 0, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 2003, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 194, 0, 0, 0, 2002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 224, 0, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 2000, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 2006,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 2005, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	2004, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	2003, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 811, 0,
	0, 0, 2002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 717,
	0, 273, 310, 0, 0, 0, 370, 0, 423, 427,
	0, 0, 0, 0, 0, 0, 281, 0, 722, 2430,
	728, 0, 734, 0, 492, 0, 724, 725, 730, 212,
	810, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 0, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	0, 0, 435, 393, 391, 0, 358, 415, 0, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 509, 813, 803, 795, 796, 797, 798,
	799, 800, 0, 815, 816, 817, 818, 819, 502, 809,
	0, 794, 801, 802, 804, 2433, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 0,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 0, 0, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 0, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	0, 0, 366, 368, 369, 0, 2431, 0, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 0, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 0, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 2436, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 0,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 0, 482, 0, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 0, 0, 0, 194, 0, 0,
	0, 0, 0, 513, 514, 2432, 381, 375, 331, 373,
	374, 378, 379, 382, 1975, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 2424, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 608,
	1978, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 1982, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 1979, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 608, 1978, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 1982, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 1979, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2574, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 2575,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2565, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 2566, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 207,
	0, 224, 0, 0, 273, 695, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 608, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 608,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 3719,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 2866, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 3432, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	3416, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 3083, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 2230, 0, 0, 0, 377, 0, 0,
	0, 0, 2233, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 2231, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 2229, 477, 2228,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 2232,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 1068,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 608, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1066, 207,
	0, 224, 0, 0, 273, 1065, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 187,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 836, 216, 217, 218, 221, 222, 223,
	225, 188, 226, 835, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 190, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	191, 431, 432, 433, 434, 558, 436, 437, 189, 439,
	440, 442, 443, 444, 445, 446, 447, 833, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 183, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 192, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 207, 0, 224, 0, 0, 273, 698, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 580, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 582,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 581, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 4484, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 187,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 188, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 190, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	191, 431, 432, 433, 434, 558, 436, 437, 189, 439,
	440, 442, 443, 444, 445, 446, 447, 2930, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 2931, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 192, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 2635, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 2553, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 2551,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 2537, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 1966, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 1908, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 1173, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 991,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 952, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 948, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 941, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 0, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 187, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 188, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 190, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 191, 431, 432, 433, 434, 558, 436, 437,
	189, 439, 440, 442, 443, 444, 445, 446, 447, 833,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 183, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 192, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 783,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 779, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 776, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 772, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 757, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 703,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 701, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 684, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 676, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 672, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 670,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 645, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 187, 515, 181, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 188, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 190, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 191, 431, 432, 433,
	434, 558, 436, 437, 189, 439, 440, 442, 443, 444,
	445, 446, 447, 182, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 183, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 192, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 0, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	0, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 0, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 0, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 2430, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 810, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 2433, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 2431, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 2436, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	513, 514, 2432, 381, 375, 331, 373, 374, 378, 379,
	382, 207, 0, 224, 717, 0, 273, 310, 0, 0,
	0, 370, 0, 423, 427, 0, 0, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 2907, 734, 0, 492,
	0, 724, 725, 730, 212, 810, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 2906, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 0, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 0, 0, 435, 393, 391,
	0, 358, 415, 0, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 509, 813,
	803, 795, 796, 797, 798, 799, 800, 0, 815, 816,
	817, 818, 819, 502, 809, 0, 794, 801, 802, 804,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 0, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 0, 0, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 0,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 0, 0, 366, 368, 369,
	0, 0, 0, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 0, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 0, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 2436, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 0, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 0,
	482, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 513, 514,
	0, 381, 375, 331, 373, 374, 378, 379, 382, 207,
	0, 224, 717, 0, 273, 310, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 4514, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 0,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 0, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 513, 514, 0, 381,
	375, 331, 373, 374, 378, 379, 382, 207, 0, 224,
	717, 0, 273, 310, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 4203, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 0, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 0, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 207, 0, 224, 717, 0,
	273, 310, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 4003,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	0, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 810, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 2436, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382, 207, 0, 224, 717, 0, 273, 310, 0, 0,
	0, 370, 0, 423, 427, 0, 0, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 810, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 0, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 0, 0, 435, 393, 391,
	0, 358, 415, 0, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 509, 813,
	803, 795, 796, 797, 798, 799, 800, 0, 815, 816,
	817, 818, 819, 502, 809, 0, 794, 801, 802, 804,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 0, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 0, 0, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 0,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 3535, 0, 366, 368, 369,
	0, 0, 0, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 0, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 0, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 0, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 0, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 0,
	482, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 513, 514,
	0, 381, 375, 331, 373, 374, 378, 379, 382, 207,
	0, 224, 717, 0, 273, 310, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 0, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 0,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 0, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 513, 514, 0, 381,
	375, 331, 373, 374, 378, 379, 382, 207, 0, 224,
	717, 0, 273, 821, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 0, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 0, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 0, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 207, 0, 224, 717, 0,
	273, 785, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 0,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	0, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 0, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 0, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 0, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382,
}

var yyPact = [...]int32{
	645, -1000, 118, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2416, 713, 6836, 10548, 10461, 2523, 70339,
	55665, -1000, 693, 662, 655, 3032, 49593, 112, 69833, 56677,
	526, 645, 2660, 49593, 2787, 2658, 655, 56677, -1000, 1303,
	1607, 1541, 3078, 69327, 56677, 34939, 56677, 2491, 68821, 68315,
	2002, 67809, 1451, 2521, 983, 56677, 56677, 1437, 67303, 56677,
	56677, 565, 1810, -1000, -1000, 1031, 1021, -1000, -1000, -1000,
	49087, 55159, 66797, 66291, 884, 1994, 43049, 56677, 56677, 56677,
	56677, 43049, 39000, 1530, 1763, 65785, 43049, 56677, 43049, 56677,
	56677, 56677, 56677, 56677, 972, 39000, 40013, 56677, 65279, 2483,
	56677, 56677, -1000, 64773, 64267, 63761, 75743, 75255, 3227, 1446,
	-1000, -1000, -1000, 878, 1978, -1000, -1000, -1000, 2482, 1435,
	971, -1000, 1526, -1000, -1000, -1000, -1000, -1000, -1000, 877,
	-1000, 63255, 54653, 1527, -1000, -1000, 624, 2903, 3308, 3308,
	3076, 41531, 800, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2902, 1535, 1884, 162, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1980, 2705, 693, -1000, -1000, 292, 291, 662,
	16956, 16956, -1000, 2655, -1000, 128, -1000, 139, 42543, -1000,
	-1000, -1000, 561, 111, 56677, -1000, 476, -1000, 111, 20563,
	-1000, 56677, 2464, 62749, 49593, 49593, 288, -1000, 304, 62243,
	56677, 873, 61737, 3226, 43049, 43049, 56677, 963, 43049, 2194,
	1302, -1000, 1355, 1883, -1000, 3122, 3235, 143, 516, 56677,
	56677, -1000, 146, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 797, 1285, 755,
	3114, 888, 3113, 2109, 61231, 950, 3109, 2254, 866, 56677,
	1374, 2654, 56677, 476, 3108, -1000, 2224, 1838, 74767, 56677,
	-1000, -1000, -1000, -1000, 7797, 3216, 2978, 9262, 3215, 2975,
	10044, 3214, 10402, 3213, 54147, 53641, 2102, 1283, 559, -1000,
	139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1282, 1281, 1280,
	1400, 1279, 559, 1276, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56677, 56677, 56677, 2651, 3212, 1272, 1645,
	1271, 1270, 855, 1800, 2649, 2648, 56677, 1269, 1263, 2191,
	1509, 1520, 3210, 1242, 1647, 2081, 3208, 329, -1000, 3199,
	333, -1000, 2646, 3182, 331, 3181, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 152, -1000, -1000, -1000, -1000, -1000, 557,
	1931, 556, 556, 556, -1000, -1000, -1000, -1000, -1000, 250,
	243, -1000, -1000, 1919, 555, 1919, 1919, -1000, 1950, 1919,
	331, 3179, 60725, 2245, -1000, 2098, -1000, 1233, -1000, -1000,
	-1000, 3226, -1000, 1867, -1000, 3263, 40519, 308, 3308, -1000,
	1498, 1265, -1000, 1760, 2297, 27259, 26744, 56677, 508, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1799, -1000,
	1491, -1000, 1923, 2174, 2186, 1228, 2712, 1915, -1000, 20048,
	1672, 23653, 2294, 20563, -1000, 1980, -1000, -1000, 2657, 69,
	-1000, 12798, -1000, -1000, 20563, 20563, 20563, 20563, 20563, 1383,
	3091, -1000, -1000, -1000, -1000, 16440, -1000, -1000, 139, 527,
	286, -1000, -1000, 552, -1000, 551, 550, 139, -1000, -1000,
	-1000, -1000, -1000, -1000, 20563, 846, 1696, -1000, 549, 548,
	546, 396, 544, -1000, 139, -1000, 12278, 20563, -1000, 56677,
	20563, 56677, 111, 3267, 56677, 95, 9836, 711, 3266, 41025,
	-1000, 56677, 2564, 2558, 2889, 2784, 56677, 643, 3106, 304,
	56677, 4622, 3102, 60219, -1000, 543, 543, 1693, 56677, 541,
	74767, 1525, 1264, -1000, 39000, 3223, 3163, 74767, -1000, 134,
	13847, -1000, 13847, 2996, 2553, 33349, -1000, 441, 56677, 56677,
	56677, 56677, -1000, 56677, 3162, -1000, -1000, -1000, 3161, 56677,
	451, 3100, 892, 3308, 3160, 37988, 3099, 59713, 2645, 1459,
	39000, 56677, 953, 2642, 3159, -1000, 47063, 516, 3308, 3264,
	2181, 72, -1000, 1120, -1000, 1346, 1345, 45056, 1058, 1041,
	2317, 542, 2641, 1229, 1042, 56677, 1758, 56677, 2292, 2882,
	360, 1651, 1184, -1000, 531, 49593, 1049, 72, -1000, 2881,
	1344, 56677, 1048, 72, 2880, 4622, -1000, 1742, 74767, 748,
	-1000, 2704, -1000, 748, 748, 2703, 1421, 888, 888, -1000,
	56677, 72, 1095, 56677, 10362, 3158, 2972, 10258, 3157, 56677,
	2878, -1000, 280, 139, 2877, 2876, 2873, 2363, -1000, 2389,
	3058, 1170, 2315, 2872, -1000, 2871, 1261, 2552, 2549, 56677,
	56677, 2869, 2867, 38494, 47569, 47569, 2866, 2865, 2864, 745,
	-1000, 2974, 2863, 413, 3308, 1318, 1311, 1308, -1000, -1000,
	516, 56677, 56677, 1387, 2862, 2861, 37988, 2858, 360, 360,
	2855, 1079, 56677, 56677, 56677, 56677, 56677, 2036, 1995, 1990,
	-1000, 9667, -1000, -1000, 56677, 56677, -1000, -1000, -1000, 56677,
	56677, -1000, 56677, 56677, 74767, -1000, 74767, -1000, 160, 20563,
	-1000, 3282, -1000, -1000, -1000, -1000, 3282, -1000, 2905, 2898,
	3282, -1000, 528, -1000, 3282, -1000, -1000, 1919, 1919, -1000,
	-1000, 74767, 329, 3154, 37988, 3149, -1000, -1000, -1000, -1000,
	-1000, 56677, 3263, 992, -1000, -1000, 1677, -1000, -1000, 1244,
	-1000, -1000, -1000, -1000, 110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3297, 3290, -1000, -1000, 110, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1220, 2724, -1000, 821, -1000, 1109, -1000, -1000, 107, 9836,
	-1000, 25714, -1000, -1000, -1000, 1477, 9836, -1000, 23138, 23138,
	1178, 56677, 34, -1000, 4670, 1923, 2174, 2786, 53135, 16956,
	74767, 56677, 2897, 20563, 20563, 20563, 20563, 20563, 20563, 20563,
	20563, 20563, 20563, 20563, 20563, 20563, 20563, 20563, 20563, 2931,
	20563, 2854, 4621, -1000, -1000, 2853, 506, 1136, 13847, -1000,
	-1000, 522, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 675, 675, 494, 5796,
	5796, 375, 527, 3008, 139, 9789, 104, 149, 526, 139,
	-1000, -1000, -1000, 17472, 20563, 33349, 19532, 139, 2913, 9836,
	1696, 2666, 682, 525, 15408, 20563, 20563, 2786, 20563, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8741, -135, 279, 77,
	-1000, 2572, 75, 20563, -1000, 56677, 2897, 20563, 20563, 20563,
	20563, 2854, 4621, 2853, 506, 522, 2640, -1000, 2395, 36976,
	2512, 56677, 392, -1000, 572, 56677, -1000, -1000, 2741, 30313,
	30313, 2314, 2314, -1000, -1000, 73, -1000, 45562, 56677, 2282,
	3148, 3024, 521, -1000, 4622, 1747, 3147, 2639, 3098, -1000,
	10564, 46574, 8961, 1296, -1000, -1000, 2279, 1900, 516, -1000,
	44567, 1523, 56677, 56677, 864, -1000, -1000, -1000, -1000, -1000,
	-1000, 1348, 56677, -1000, 13847, -1000, 70, -1000, 571, 2173,
	56677, -1000, 56677, 520, 516, 516, 516, 516, 516, -1000,
	56677, 1315, 56677, 1053, 45562, 2277, 3146, 1691, -1000, -1000,
	56677, 1128, -1000, -1000, 3145, 3262, 3096, 304, 13847, 3310,
	-1000, 3260, 1856, 32337, 56677, 1012, 387, -1000, 49593, 2971,
	144, 304, -1000, 128, -1000, 1288, 74767, 3308, 10517, 56677,
	56677, 56677, -1000, 56677, 56677, -1000, 3095, 59207, -1000, 74767,
	56677, -1000, 513, 2577, 820, 815, 2535, 52629, 56677, 58701,
	58195, 56677, 1075, -1000, -1000, 1429, 56677, -1000, 13847, 56677,
	48581, 1023, 1009, 56677, 1483, 48075, 56677, 1482, -1000, 56677,
	1182, -1000, -1000, 39000, -1000, 2397, 1470, 14359, 7017, 56677,
	56677, 56677, 10243, 56677, 56677, -1000, -1000, -1000, -1000, -1000,
	-1000, 748, -1000, -1000, -1000, 56677, 56677, 748, 748, 10002,
	56677, 56677, 10096, 72, 1070, 56677, 1046, 72, 1061, 49593,
	1050, 56677, -1000, 56677, 56677, 56677, 56677, 56677, -1000, 2966,
	57689, 20563, 2961, -1000, 56677, -1000, 509, 2957, 56677, 56677,
	39000, 2850, 56677, 56677, 1571, 2636, 56677, 56677, -1000, 103,
	103, 103, 56677, 56677, 56677, -1000, -1000, -1000, 56677, -1000,
	56677, -1000, 3059, 56677, 56677, -1000, 1259, 1258, 2849, -1000,
	1420, -1000, 39000, 39000, 1126, 56677, -1000, -1000, 56677, 690,
	2460, 1256, 1254, 1252, 1240, 56677, 56677, 3308, 3220, 3308,
	2848, 56677, 56677, 43049, 507, 74767, 43049, 34409, 43049, 43049,
	2166, 74767, -1000, -1000, -1000, -1000, -1000, -1000, 329, -1000,
	333, -1000, 3087, 2635, -1000, 331, -1000, 48, 278, 276,
	2901, 2899, 275, 20563, 274, -1000, -1000, 331, -1000, 56677,
	1125, 2156, 3063, 1677, -1000, -1000, 1162, 1274, -1000, 27774,
	-1000, -1000, -1000, -1000, -1000, 2413, -1000, 20563, 1477, 2761,
	-1000, 3300, 3300, 457, -1000, 16440, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1455, 100, -1000, 20563, 1278,
	592, -1000, -1000, -1000, -1000, 2727, 30313, -1000, 2716, 2716,
	1014, 1008, 2716, 56677, -1000, -1000, -1000, -1000, 2746, -1000,
	56, 56, 122, 122, 122, -1000, 484, 484, 484, 484,
	484, 484, 494, 5796, 373, 1874, 20563, 20563, 2846, 2845,
	506, 1732, 20563, -1000, 2301, -1000, -1000, -1000, 2785, -1000,
	-1000, 1403, 2097, -1000, -1000, -1000, -1000, 2183, 24683, 24683,
	-1000, -1000, -1000, 16440, 505, -1000, -1000, -1000, -1000, 33349,
	-1000, 503, 20563, -1000, -1000, 2989, -1000, -1000, 20563, 58,
	55, -1000, -1000, 45, 273, 42, -1000, 1956, -1000, 20563,
	682, 495, -1000, 42037, 2742, -1000, 272, 63, 20563, 20563,
	20563, -1000, 9836, 3276, -1000, 2055, 1986, 326, 695, 7585,
	2727, 41, -1000, 20563, -1000, -1000, 493, -1000, 2520, -1000,
	9836, 2390, 2380, 1983, -1000, -1000, 38, -1000, -1000, -1000,
	-1000, 2741, 41025, 20563, 37, -1000, 139, 2390, 22623, -31,
	2595, 50605, 50605, 32843, -1000, 29807, 50605, 50605, 50605, 582,
	2783, 485, 477, 139, -1000, -1000, 2499, 2441, -1000, 2441,
	56677, -1000, 270, 98, -1000, -1000, -1000, -1000, 56677, 365,
	56677, 56677, 3259, 360, 56677, 56677, 49593, 3144, 71839, 1369,
	8961, -1000, 3308, 41531, 2155, -1000, -1000, 2632, -1000, -1000,
	-1000, -1000, 1149, 1624, -1000, 1512, 748, 748, 56677, -1000,
	56677, 57183, -1000, 35, -1000, -1000, 792, 73791, 71351, -1000,
	1386, -1000, -1000, -1000, 152, -1000, 76231, 1369, 2953, 2634,
	-1000, -1000, -1000, 2275, -1000, -1000, 1296, -1000, 267, -175,
	2702, 25, -1000, -1000, -1000, 377, 56677, 1660, 304, 56677,
	3223, 1277, 1328, 1882, -1000, 1351, -1000, -1000, 13847, 14871,
	952, -1000, 266, 96, -1000, 74767, 3308, -1000, -1000, -1000,
	-1000, -1000, 753, -1000, 56677, 41531, 41531, -1000, 888, 720,
	1053, -1000, 56677, 1078, 56677, 264, 56677, 56677, 1806, 950,
	56677, 2154, 655, 3143, 2532, 1942, 3024, 2146, 3314, 1658,
	-1000, -1000, 352, -1000, 139, -1000, 20563, 476, 3059, -1000,
	47569, 304, 1163, 144, 2739, 2739, 56677, 262, 2842, -1000,
	-1000, 2841, 2840, 2243, 1952, 3142, -1000, 3093, 1062, 1032,
	20563, 474, -1000, 1606, 707, 468, 463, 56677, 1295, 2452,
	-1000, 3140, 3087, 3139, 3087, -1000, -1000, -1000, 52123, -1000,
	23, -1000, 159, -1000, -1000, -1000, -1000, 56677, 56677, 56677,
	56677, -1000, 1148, -1000, -1000, -1000, -1000, 1146, -1000, 1468,
	-1000, -1000, -1000, -1000, -1000, 1599, 1145, 22, -1000, -1000,
	13847, 13847, 13847, 3308, -1000, 72, -1000, 1072, 1656, -1000,
	-1000, 72, 2839, 1655, -1000, -1000, -1000, -1000, -1000, -1000,
	72, 2838, 4622, -1000, 2835, 72, 1059, 56677, 56677, 7917,
	56677, 56677, 56677, 6214, 2834, 745, 1053, -1000, -1000, -1000,
	-1000, -1000, 2830, -1000, 3087, 3135, 9836, -1000, 1147, 20563,
	-1000, -1000, -1000, -1000, 56677, 1238, 1638, 2829, 2537, 39000,
	56677, -1000, -1000, -1000, -1000, -1000, -1000, 339, -1000, 339,
	339, 2828, 2826, 56677, -1000, -1000, -1000, -1000, 56677, -1000,
	-1000, -1000, -1000, -1000, 3282, 3282, 1077, 2824, 2821, 2820,
	2819, -1000, 2817, 2815, 3308, 3088, -1000, -1000, 41531, -1000,
	-1000, -1000, 74767, -1000, -1000, -1000, 56677, 56677, 459, -1000,
	-1000, 74767, -1000, -1000, -1000, -1000, 56677, -1000, -1000, -1000,
	586, -1000, -1000, 586, 21, -1000, -1000, 329, 56677, 37988,
	-1000, 1538, 308, -1000, -1000, -1000, -1000, -1000, -1000, 2760,
	-1000, 997, -1000, -1000, 19017, 92, -1000, 56677, -1000, 592,
	-1000, 440, -1000, 2456, 2665, 20563, -31, 56677, -1000, 56677,
	2716, 2716, 2716, 2716, 56677, -1000, 20563, 20563, 1581, 1409,
	20563, 24683, 24683, -1000, 20563, 530, -1000, -1000, -1000, -1000,
	2779, -1000, -1000, 1394, 2097, 20563, -1000, -1000, 911, 908,
	-1000, -1000, -1000, -1000, 1089, -1000, 24683, 24683, 457, 985,
	20, -1000, 16440, 256, 18502, 90, -1000, 139, 9636, -1000,
	-1000, 310, -1000, -1000, -1000, 1737, -1000, 20563, 8478, -1000,
	693, -1000, -1000, 70845, 20563, -1000, 253, 17987, -1000, 693,
	-18, -18, 20563, 20563, 2097, 2631, 2630, 20563, 20563, 2054,
	2698, -1000, -1000, 1957, 2665, -1000, 353, 9836, 655, -1000,
	-1000, 16956, 709, 655, 661, 56677, 139, 2390, -1000, 9836,
	534, 56677, -1000, 9836, 2271, 30313, 2589, 2586, 30313, 2734,
	2570, 2570, 2570, -1000, -1000, -1000, 56677, 455, -1000, 50605,
	50605, 50605, 50605, 39506, 248, 2595, -1000, -1000, -1000, -1000,
	2227, 454, 29301, 20563, 139, 20563, 888, -1000, -1000, -1000,
	2545, -1000, 1589, 45562, -1000, 1339, 46068, 365, 623, 655,
	-1000, 17, 4622, 2535, 56677, 8961, 453, 2629, -1000, 152,
	-1000, -1000, 1889, 20563, -1000, -1000, 87, -1000, 79, 936,
	2951, 1600, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1873, 1104, -1000, 71351, 20563, 20563, 73791, -1000, 73791, -1000,
	-1000, 124, 143, -1000, 56677, 1296, 56677, 2625, -1000, -1000,
	2694, 71351, 71351, -1000, 3303, 14871, 446, 56677, 3024, 443,
	39000, 3223, -1000, 56677, -1000, -1000, 56677, 1985, -1000, 3091,
	812, 442, 24683, 56677, 2053, -1000, 1712, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 440, 3297, 3290, 74767, -1000,
	56677, 3009, 246, 76, -1000, -1000, 56677, -1000, -1000, -1000,
	-1000, -1000, 436, -1000, -1000, 143, -1000, -1000, -1000, 1589,
	365, 405, 2067, 892, 720, 37988, 3063, 56677, 3024, 56677,
	1422, 56677, -1000, 2808, 2503, -1000, 56677, 30313, 32337, 9521,
	2627, -1000, -1000, 2739, 51617, 2739, -1000, 421, -1000, 339,
	2096, 3308, 56677, 56677, -1000, 2507, -1000, -1000, -1000, 56677,
	3134, 1842, -1000, 51111, -1000, 2535, 8670, 56677, 1729, 56677,
	56677, -1000, 56677, 30819, -1000, -1000, 2048, 1436, 360, 1671,
	1506, 935, -1000, -1000, 888, 1068, 1729, 56677, -1000, 56677,
	-1000, -1000, -1000, -1000, -1000, 13847, 14871, 13847, -1000, -1000,
	-1000, -1000, -1000, -1000, 1133, 56677, -1000, -1000, 14359, -1000,
	-1000, -1000, -1000, -1000, 56677, 56677, 56677, 1039, 2690, 56677,
	1037, 2689, 56677, 56677, 56677, 56677, -1000, 2805, 72, 1057,
	1641, -1000, 2804, 72, 1056, 56677, -1000, 56677, -1000, 56677,
	-1000, 7811, 1729, -1000, 2803, 2802, 1447, 1902, 56677, 3068,
	420, 18, -1000, 1234, -1000, -1000, -1000, 56677, 56677, -1000,
	745, 690, 56677, 56677, 56677, 56677, 56677, 3308, 1877, 3131,
	-1000, 3255, 2544, 2542, -1000, 74279, 1521, 3087, -1000, -1000,
	-1000, -1000, -1000, 1124, -1000, 1804, -1000, 996, -1000, 10,
	-1000, 20563, -1000, -1000, 33349, -1000, -1000, 2662, 2686, 9836,
	-1000, -1000, 56677, 56677, 56677, 56677, -1000, 609, 602, 20563,
	20563, 423, 774, 696, 602, 20563, 20563, -1000, -1000, 6119,
	1533, 1514, 20563, 74767, 24683, 24683, 24683, 24683, 24683, 24683,
	24683, 24683, 24683, 24683, 24683, 24683, 320, 320, 20563, -1000,
	7653, -1000, 5, -1000, 20563, -1000, -1000, -1000, 9836, 20563,
	244, 1343, -1000, 6949, -1000, 20563, -1000, 240, 239, 20563,
	238, 9836, 9836, 2383, 2948, 2947, -1000, -1000, 2383, 2619,
	2617, 20563, 1992, 2662, -1000, 234, 69, 2348, 30819, 2313,
	-1000, -1000, 2395, -1000, -1000, 20563, -1000, 56677, 2595, 30313,
	30313, 2756, 2581, 30313, -1000, -1000, -1000, -1000, 418, 56677,
	-1000, -1000, -1000, -1000, 50605, -1000, 44061, 2196, 417, 65,
	6872, 404, 888, 2008, -1000, 1339, 416, -1000, 1634, 2532,
	-1000, 2684, -6, -1000, -1000, -1000, 3082, 2243, 45562, 56677,
	2252, 3054, 3024, -1000, 411, 2616, 1369, 76231, 2943, -1000,
	9836, 3308, 2145, 74767, 1560, -1000, -1000, -1000, 9836, 9836,
	-1000, -1000, 932, 127, 1225, -1000, -49, 56677, 71351, -1000,
	-8, -1000, 377, -1000, 2738, 1570, 3252, 56677, -1000, 1448,
	-1000, -1000, -1000, 3059, 3059, 20563, 902, 304, 3250, -1000,
	2994, -1000, -1000, 2538, -1000, -1000, 56677, -1000, 3308, -1000,
	1315, 13847, 134, 1122, 2243, 45562, 2238, 56677, 1688, -1000,
	1119, -1000, 3249, 1006, -1000, 43049, -1000, -1000, 1958, -1000,
	2969, 2537, 39000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-31, -1000, -1000, 32337, -1000, -1000, -1000, -1000, 20563, -1000,
	1043, 1685, 2777, -1000, -1000, 2753, -1000, 56677, 720, -1000,
	50099, -1000, -1000, -1000, -11, -1000, 1135, -1000, 1681, 1592,
	-1000, -16, 1729, -23, -24, -1000, 3079, 714, 2998, 20563,
	2942, 3219, 3156, -1000, -1000, 2053, 2941, 3248, 690, -1000,
	-1000, -1000, -1000, 2053, -1000, 3074, 74767, 748, 690, 3087,
	3087, -1000, -1000, 307, -1000, -1000, -1000, -1000, 2801, 2800,
	56677, 39000, -1000, 56677, 39000, -1000, -1000, -1000, 2799, 56677,
	56677, 56677, 1036, 2683, 56677, 56677, 56677, -1000, -1000, 3087,
	-1000, 56677, 56677, -66, -1000, 3282, 3282, 74767, 62, -1000,
	3282, 3282, -1000, -1000, 671, 20563, 39000, 2797, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3087, -1000, 3308, 3308,
	-1000, 74767, 56677, 56677, -26, 49, 56677, -1000, 56677, -1000,
	-1000, -1000, 6049, 228, 853, 20563, 3026, -1000, -1000, -1000,
	-1000, 602, 602, 20563, 20563, 20563, 602, 6119, -1000, -1000,
	602, -1000, -38, -38, 120, 120, 120, -1000, 320, 320,
	320, 320, 320, 320, 602, -1000, -1000, 6003, 9836, -1000,
	693, 2682, -1000, 693, -1000, -1000, -1000, 219, 74767, -1000,
	-1000, 217, 2940, 2935, 34, 56677, 853, 2481, 2338, -46,
	-1000, 56677, 1982, 9836, -1000, -1000, -1000, 2756, -1000, 409,
	20563, 30313, -1000, 56677, -51, -1000, -54, -1000, 3245, 2262,
	28795, 24168, 20563, 2426, -1000, 3125, 3125, 2436, -1000, 2340,
	13847, 404, 3308, 2532, 56677, 1876, 1876, 2090, 56677, -1000,
	46068, 1351, 721, 1339, 212, 365, 56677, -1000, 1076, 3244,
	30819, 49593, -1000, -56, -1000, 73791, -1000, 1543, 2028, -1000,
	931, -1000, -1000, -1000, 919, 2143, 955, 2758, -58, -1000,
	210, 1097, 1094, 1011, 56677, 655, -59, 3223, -1000, 2924,
	2533, 2533, 5896, 1444, 445, -1000, 56677, -1000, -1000, -61,
	-1000, 56677, 1118, 208, 56677, 720, 1776, 56677, 655, -1000,
	56677, 395, 1422, 56677, 394, 3068, 18, 338, 5680, 43049,
	3238, 3238, 56677, 393, 391, 386, -1000, -1000, -1000, -1000,
	1729, 1627, -1000, -1000, -1000, -1000, -1000, 1627, 1284, 1627,
	30819, 33879, -1000, 56677, 56677, -1000, 5439, -1000, 3129, 3127,
	-1000, -1000, 385, -1000, 3240, 3009, -1000, -1000, -1000, -1000,
	14871, 56677, 56677, 1391, 303, 1391, 300, 56677, -1000, -1000,
	2796, 56677, 39000, -1000, -1000, 2794, -1000, 1729, -1000, -1000,
	1447, 33349, 31831, -1000, 1902, 374, 372, 371, 5338, -1000,
	56677, -1000, -1000, -1000, 207, -1000, -1000, -1000, 73303, 74767,
	-1000, -1000, -1000, -1000, -1000, 56677, 9836, 21593, -1000, -1000,
	602, 602, 602, -1000, 1572, 20563, 205, -1000, 599, -1000,
	-1000, -1000, -1000, -1000, 2429, 2474, 2434, -1000, 2727, 30819,
	-1000, 655, -1000, 56677, 9836, -1000, -62, -1000, 582, 44061,
	-1000, 370, 56677, 2681, 28289, 2012, -69, -1000, 681, 24683,
	5092, -1000, -1000, 2356, 20563, 2354, -1000, 2369, -1000, -1000,
	-1000, 3235, 3235, -1000, -1000, 3235, 3235, 2122, 3308, -72,
	-1000, 25198, 2727, -1000, 2090, -75, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2608, 360,
	809, 366, -1000, -1000, 2532, 1589, 1339, 365, 798, 670,
	669, 655, -76, 2535, 76231, 8961, -1000, -1000, -1000, 114,
	-1000, -1000, 74767, -1000, 2911, 1754, 955, -1000, 1510, -1000,
	-1000, -1000, 56677, -1000, -1000, 3066, 3065, -1000, -1000, 56677,
	894, -1000, 3054, 3024, -1000, 1595, -1000, 1407, 2611, 1454,
	336, 20563, 1707, -1000, 13847, 720, 56677, 1589, 365, -1000,
	2064, 720, 3063, -1000, 203, 43049, -1000, 3309, -1000, 30313,
	-1000, 3238, -1000, 1726, -1000, -1000, 43555, 20563, 20563, 1351,
	3059, 363, 3059, 56677, 3059, -1000, -1000, 361, 2438, 360,
	-1000, 2998, -1000, -1000, 20563, 1639, 2534, -1000, -1000, -1000,
	-1000, -1000, 1028, -1000, 1027, -1000, 56677, 1391, 268, 56677,
	-1000, 634, 2131, -1000, 74767, -1000, 74767, 74767, 20563, -1000,
	-1000, -1000, 198, 194, 190, 0, -1000, 3236, -2, -1000,
	9836, -1000, -1000, -1000, -1000, 15924, 359, 351, 294, 186,
	22108, 22108, 22108, -5, -1000, -1000, -1000, 56677, 2469, 2458,
	41025, -1000, -1000, -1000, -79, -1000, -1000, -1000, 56677, -82,
	-1000, 72815, -1000, 2012, 2681, -1000, -1000, 24168, -7, 13847,
	902, 2197, 56677, 2341, 9836, 2362, 2677, 3308, 3308, 3308,
	3308, 36470, 2923, 35964, -1000, -1000, 13847, -1000, -1000, -1000,
	-1000, -1000, 37482, -1000, 2608, -1000, 1006, 1845, -1000, -1000,
	31325, 1351, 2090, 1339, 2532, 2243, -1000, 785, 749, 3054,
	1617, 350, -1000, 1369, -1000, -1000, 1716, 345, 1096, -1000,
	-1000, 3235, -1000, -1000, 1750, -1000, 1684, 1682, -1000, -1000,
	-1000, 3234, 1022, -1000, 1591, -1000, 2615, 2613, 2433, -1000,
	-1000, -1000, -1000, 4622, 5046, 3232, 56677, -1000, -1000, 720,
	1117, 2243, 56677, -1000, -1000, -1000, 344, -83, -1000, -31,
	-1000, -1000, -1000, -87, -1000, 3282, -89, -90, 2533, 56677,
	2533, 304, 2533, 33349, 592, 2438, -1000, 5001, 336, -1000,
	20563, 56677, 56677, -1000, -1000, 1013, -1000, 1299, 1139, 1299,
	-95, -1000, -97, -100, 4902, -1000, -1000, -1000, 56677, 335,
	21593, -1000, 20563, 20563, 317, -1000, 1728, -1000, 26229, 1419,
	1181, 1323, 1728, 1728, 260, 2672, 2671, 296, 3231, -102,
	-1000, 56677, 2309, 2218, -1000, -1000, 28289, -1000, 2259, 20563,
	-1000, -1000, -1000, 2342, 2428, -1000, -1000, 2339, 630, 2361,
	-1000, -1000, -1000, -1000, -49, -1000, 35458, -49, -1000, -1000,
	-103, -1000, -1000, 1006, -1000, 1694, -113, -1000, 714, 2998,
	20563, 2608, 2532, 2090, 1339, -1000, -1000, -1000, 3091, 315,
	30819, -1000, 1422, 20563, -1000, -1000, -1000, 56677, 1753, 43049,
	43049, 655, 56677, -1000, -1000, 2402, -1000, 2408, 1801, 1801,
	1598, 1052, 1447, -1000, -1000, 56677, 1116, 720, 180, -1000,
	3307, -1000, 43555, -1000, -1000, 2793, -1000, -118, -1000, 1444,
	2727, 174, -1000, 592, -1000, -1000, 9836, 1391, 1391, 56677,
	-1000, -1000, -1000, 2669, -1000, 43049, 74767, -1000, -1000, -1000,
	-1000, -1000, -1000, -120, -128, 21593, -1000, 1376, 3124, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 56677, 56677, 56677, -1000,
	-1000, 56677, -1000, -1000, 2309, -1000, 24683, 24683, 2922, -1000,
	24683, -1000, 2196, 314, -48, -1000, 3230, -1000, 41025, -1000,
	-1000, 2395, 56677, 2505, 312, -1000, -1000, -49, -1000, -1000,
	37482, -1000, -1000, 2209, 2207, -1000, 31325, 56677, 56677, 4805,
	1006, 2090, 2608, 2532, 3024, 30819, -133, 43049, 1674, -1000,
	-1000, 1168, -52, -53, 3054, -1000, -1000, 1904, -1000, -1000,
	2925, -1000, -1000, -1000, -66, 720, 56677, -1000, -1000, -1000,
	-1000, 309, 1729, -1000, 1729, 2611, -1000, -1000, -1000, -1000,
	-1000, 1391, 56677, -1000, -1000, -1000, -1000, -138, 1167, -1000,
	-1000, 825, 21078, 2551, 254, 242, -1000, -1000, 902, 902,
	-1000, 902, 2236, 56171, 20563, 13847, -159, 1981, -143, -1000,
	20563, -1000, -1000, -1000, -1000, -1000, -1000, 2998, -1000, 2608,
	1006, 2090, 1006, -144, -1000, 1617, 305, -1000, 2911, 2792,
	2757, -1000, -1000, 304, 304, -1000, 720, 20563, -1000, 1729,
	-1000, -1000, -1000, -1000, -1000, -1000, 3155, 56677, 56677, 56677,
	56677, -156, -1000, 72327, 2204, -1000, -1000, 2504, 2409, -157,
	56677, 1006, -1000, 2608, 2727, -1000, 30819, 3091, 13335, 1715,
	1092, 1085, -1000, -1000, -1000, -160, 1729, 2991, -1000, -1000,
	-1000, -173, 2251, 56171, 2216, 1157, 3306, -1000, -1000, -1000,
	2395, -1000, -1000, -1000, 1006, -1000, -1000, 3024, -190, -1000,
	-1000, -1000, -1000, -1000, 1422, 3019, 3016, -1000, 3155, -1000,
	170, 2607, 20563, -1000, -1000, -1000, -1000, -1000, -1000, 2082,
	-1000, -1000, 2077, 2200, 2200, 3292, 2323, 1979, -1000, 1006,
	-1000, 13335, 43049, 1680, 1678, 2528, -1000, 2117, 9836, -1000,
	-1000, 2037, 2101, 2237, 2077, 2251, -1000, 302, 56677, 2504,
	2727, -1000, 301, 43049, 43049, 56677, -1000, 2251, 2044, 2042,
	-1000, 2056, -1000, 2052, 2083, 2080, 2037, -1000, 56171, 2234,
	-1000, -1000, 13335, -1000, -1000, -1000, -1000, 2604, 2601, 2594,
	-1000, -1000, 2049, -1000, 2040, -1000, 2251, -191, 295, -192,
	2114, 2024, 1987, -1000, -1000, -1000, -1000, 56171, -1000, 2251,
	-1000, 2019, 2018, -195, 2592, -1000, -1000, -1000, 2057, -1000,
}

var yyPgo = [...]int16{
	0, 3712, 3711, 2662, 146, 0, 17, 5141, 3709, 209,
	243, 302, 115, 545, 7885, 148, 291, 307, 3533, 6386,
	588, 144, 3708, 251, 3708, 3707, 301, 247, 199, 3706,
	194, 3705, 3703, 174, 192, 3702, 3701, 328, 37, 224,
	3699, 304, 326, 320, 322, 3697, 287, 308, 285, 284,
	3694, 5569, 239, 1777, 9, 3692, 3689, 3688, 3686, 3685,
	277, 3684, 230, 3683, 3682, 3681, 275, 3681, 191, 271,
	274, 3678, 281, 270, 349, 173, 314, 6004, 3677, 309,
	117, 441, 315, 3675, 3673, 3671, 3669, 3667, 3664, 3663,
	3662, 3661, 3659, 169, 203, 208, 238, 312, 171, 298,
	220, 513, 297, 3658, 159, 3657, 3656, 56, 57, 273,
	3654, 3653, 85, 29, 53, 321, 305, 3650, 3649, 327,
	3645, 3644, 6405, 75, 283, 3640, 116, 3638, 276, 280,
	60, 45, 3636, 279, 278, 231, 44, 233, 190, 55,
	185, 286, 3634, 3631, 3630, 3629, 166, 226, 100, 5702,
	333, 332, 3627, 3626, 3619, 3618, 3617, 179, 177, 3616,
	3615, 3613, 3610, 39, 41, 3609, 3601, 216, 228, 266,
	3600, 272, 167, 11, 24, 165, 157, 3599, 3598, 3597,
	3595, 21, 79, 25, 3594, 3592, 3591, 294, 3591, 3591,
	3591, 3591, 3590, 263, 3589, 3588, 3587, 138, 3585, 3584,
	3583, 43, 3583, 49, 73, 3581, 35, 118, 288, 3580,
	310, 30, 240, 2745, 229, 3578, 324, 303, 295, 82,
	187, 7, 198, 184, 221, 3576, 3575, 3574, 3574, 318,
	264, 222, 225, 158, 162, 3573, 331, 3571, 319, 3570,
	3569, 3568, 3565, 269, 106, 76, 3564, 206, 3561, 93,
	3559, 3558, 102, 267, 22, 50, 3557, 36, 125, 40,
	72, 3553, 74, 265, 2, 16, 12, 3552, 248, 3550,
	27, 3550, 282, 3547, 3547, 3545, 3544, 3540, 188, 3539,
	14, 1, 3537, 4, 6, 5, 15, 107, 3535, 181,
	3534, 98, 3532, 219, 186, 136, 3530, 114, 3529, 66,
	51, 119, 3527, 3526, 3525, 153, 59, 3524, 105, 3522,
	176, 246, 3521, 3519, 3517, 23, 46, 134, 68, 63,
	48, 31, 86, 54, 3515, 3513, 33, 80, 3512, 193,
	38, 62, 64, 235, 108, 3510, 28, 20, 19, 268,
	111, 292, 293, 3509, 32, 245, 313, 3508, 3507, 311,
	112, 296, 34, 197, 3506, 196, 3505, 69, 3504, 92,
	58, 164, 67, 61, 3499, 52, 195, 3497, 260, 497,
	3496, 252, 785, 8293, 3495, 133, 256, 330, 90, 3491,
	215, 172, 3490, 13, 290, 110, 3489, 160, 155, 143,
	3488, 141, 3487, 3486, 3485, 3484, 3483, 3482, 3481, 3480,
	3478, 3476, 3475, 3473, 3470, 3469, 3453, 3448, 3446, 3444,
	3443, 3442, 3440, 3438, 3435, 3434, 3433, 3432, 3427, 3426,
	3425, 3424, 3423, 3421, 3416, 3415, 3412, 3409, 3408, 3407,
	3406, 3402, 3400, 3399, 214, 204, 3398, 3397, 3395, 300,
	299, 241, 249, 323, 200, 211, 87, 3394, 3393, 130,
	3392, 3391, 3390, 3389, 317, 3388, 329, 3387, 3385, 3383,
	3382, 170, 126, 3381, 83, 168, 316, 47, 3379, 3378,
	201, 250, 113, 104, 3376, 3374, 3373, 3371, 3370, 189,
	3368, 3367, 202, 65, 3365, 236, 207, 120, 3364, 2106,
	258, 3362, 3361, 3361, 3359, 8, 325, 3357, 218, 213,
	103, 257, 3355, 101, 3354, 3353, 262, 3351, 3350, 91,
	3349, 3343, 205, 255, 3341, 3339, 3335, 3334, 3333, 3332,
	3, 89, 26, 10, 3331, 3330, 42, 3329, 3328, 289,
	234, 3327, 3324, 3323, 81, 78, 232, 3322, 3321, 227,
	18, 3304, 3304,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 337, 337, 372, 372, 372, 24,
	24, 25, 25, 26, 26, 27, 27, 38, 38, 38,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 373, 373, 23, 23, 15,
	15, 536, 536, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 54, 54, 54,
	54, 54, 54, 74, 76, 75, 75, 75, 55, 55,
	69, 69, 73, 73, 72, 72, 72, 72, 70, 70,
	56, 56, 244, 244, 495, 495, 101, 101, 101, 101,
	101, 101, 101, 66, 66, 68, 68, 68, 57, 58,
	58, 61, 61, 60, 59, 59, 62, 62, 62, 65,
	65, 99, 99, 99, 63, 63, 64, 132, 132, 132,
	125, 125, 125, 125, 125, 125, 134, 134, 134, 134,
	133, 133, 133, 133, 133, 135, 135, 135, 135, 135,
	98, 98, 81, 82, 82, 82, 82, 82, 77, 77,
	77, 79, 80, 94, 94, 95, 95, 83, 83, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	90, 90, 86, 86, 78, 78, 78, 78, 78, 78,
	87, 88, 91, 92, 89, 89, 89, 89, 96, 96,
	96, 97, 97, 85, 85, 122, 122, 124, 124, 126,
	126, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 123, 123, 100, 100, 103, 103, 102,
	102, 129, 129, 128, 128, 146, 146, 147, 149, 149,
	150, 150, 148, 148, 148, 148, 148, 148, 148, 148,
	115, 115, 116, 116, 117, 117, 119, 120, 120, 120,
	120, 118, 118, 121, 121, 121, 151, 151, 151, 151,
	215, 215, 214, 214, 217, 217, 217, 217, 218, 218,
	219, 219, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 375, 375, 376, 376, 376, 377, 377,
	377, 230, 230, 230, 230, 230, 230, 231, 231, 231,
	231, 232, 232, 233, 233, 234, 234, 234, 235, 235,
	236, 236, 238, 239, 239, 239, 240, 240, 240, 241,
	241, 241, 242, 242, 221, 221, 171, 171, 171, 192,
	224, 224, 223, 223, 223, 223, 225, 225, 226, 226,
	227, 227, 228, 228, 229, 229, 243, 243, 252, 252,
	248, 248, 249, 250, 250, 251, 251, 500, 246, 246,
	245, 245, 247, 258, 258, 260, 260, 259, 259, 259,
	259, 261, 261, 262, 262, 253, 253, 254, 254, 255,
	255, 255, 256, 256, 257, 257, 257, 257, 257, 263,
	268, 267, 267, 279, 279, 269, 269, 270, 271, 271,
	274, 274, 273, 273, 275, 275, 275, 276, 276, 276,
	277, 277, 272, 272, 278, 278, 281, 281, 282, 282,
	282, 282, 282, 282, 282, 282, 283, 283, 283, 283,
	280, 280, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 285, 285, 285, 285, 285, 286, 286, 287, 287,
	288, 288, 264, 264, 265, 265, 265, 265, 265, 265,
	266, 266, 152, 374, 374, 162, 162, 162, 162, 162,
	183, 183, 163, 163, 167, 153, 164, 164, 169, 169,
	168, 165, 165, 154, 237, 237, 155, 166, 166, 156,
	156, 186, 186, 187, 187, 193, 193, 193, 194, 194,
	195, 195, 197, 197, 198, 198, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 199, 199, 204, 205, 205, 205, 205, 205, 205,
	200, 200, 206, 211, 211, 211, 211, 207, 207, 207,
	207, 33, 33, 349, 349, 349, 349, 349, 349, 349,
	349, 348, 348, 348, 347, 347, 347, 347, 347, 210,
	210, 456, 456, 209, 209, 537, 537, 483, 483, 188,
	188, 189, 189, 190, 190, 191, 191, 175, 175, 175,
	175, 175, 184, 184, 185, 185, 176, 176, 178, 179,
	180, 180, 180, 180, 180, 173, 170, 170, 170, 177,
	177, 177, 202, 202, 203, 203, 181, 181, 181, 182,
	182, 174, 174, 130, 130, 130, 131, 131, 131, 172,
	172, 157, 157, 157, 157, 157, 157, 351, 351, 351,
	351, 351, 351, 351, 351, 289, 289, 290, 290, 293,
	293, 293, 296, 304, 304, 304, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 353, 353, 354, 354,
	355, 355, 356, 356, 291, 291, 292, 292, 297, 297,
	298, 298, 299, 299, 299, 299, 300, 303, 303, 357,
	357, 358, 358, 359, 10, 32, 294, 308, 308, 309,
	309, 309, 309, 312, 312, 312, 312, 315, 315, 315,
	361, 361, 364, 364, 366, 366, 366, 366, 362, 362,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 538, 538, 28, 28,
	28, 360, 360, 363, 363, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 295, 295, 311, 311, 311, 311,
	311, 311, 311, 313, 313, 302, 302, 301, 301, 317,
	317, 316, 316, 316, 316, 321, 321, 321, 321, 321,
	318, 319, 320, 320, 320, 320, 320, 322, 322, 323,
	323, 324, 325, 325, 326, 326, 326, 352, 352, 330,
	330, 330, 330, 331, 331, 332, 332, 333, 158, 158,
	314, 314, 334, 334, 336, 336, 335, 335, 338, 338,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 339, 339, 344, 344, 340, 340, 11, 487, 487,
	487, 487, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 342, 342, 342, 343, 345, 345, 539,
	539, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 390, 390, 390, 489, 489, 489, 492,
	492, 492, 492, 491, 491, 493, 493, 391, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 37, 383, 385, 71, 71, 71, 71, 384, 67,
	67, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 306, 306, 307, 307,
	307, 307, 307, 307, 327, 328, 328, 329, 329, 329,
	329, 386, 386, 386, 386, 496, 496, 497, 497, 498,
	498, 498, 499, 499, 499, 499, 499, 501, 501, 501,
	501, 501, 502, 93, 93, 93, 503, 503, 504, 504,
	506, 506, 506, 506, 506, 508, 508, 505, 505, 509,
	509, 509, 389, 527, 527, 510, 510, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 494, 494, 387, 387, 511, 511,
	511, 513, 513, 512, 512, 512, 512, 512, 518, 518,
	519, 519, 521, 516, 516, 517, 517, 524, 514, 514,
	541, 541, 515, 515, 522, 522, 540, 540, 520, 520,
	520, 523, 523, 523, 523, 525, 525, 388, 388, 388,
	388, 201, 201, 526, 526, 526, 526, 394, 394, 394,
	394, 395, 396, 396, 396, 396, 396, 396, 396, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 399, 399, 434, 434, 542,
	542, 400, 400, 401, 401, 435, 435, 437, 437, 437,
	437, 402, 436, 436, 438, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 451, 451,
	424, 425, 425, 441, 441, 441, 441, 440, 440, 439,
	439, 446, 446, 426, 426, 427, 427, 427, 442, 442,
	443, 443, 444, 444, 428, 428, 428, 428, 429, 429,
	430, 431, 431, 445, 445, 478, 478, 478, 478, 479,
	479, 486, 480, 481, 481, 482, 398, 398, 398, 398,
	398, 432, 432, 433, 433, 484, 484, 485, 485, 392,
	392, 393, 379, 379, 380, 378, 378, 378, 381, 381,
	382, 382, 382, 382, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 488, 488, 488, 488, 213,
	213, 216, 216, 208, 208, 528, 528, 528, 528, 528,
	528, 528, 528, 528, 531, 531, 531, 212, 212, 9,
	9, 9, 9, 533, 533, 529, 529, 529, 530, 530,
	530, 530, 530, 532, 532, 532, 532, 350, 350, 350,
	350, 350, 350, 368, 368, 29, 29, 30, 31, 31,
	34, 34, 34, 34, 35, 35, 36, 36, 36, 36,
	369, 370, 370, 371, 371, 404, 404, 405, 450, 450,
	450, 450, 447, 447, 449, 448, 448, 406, 452, 452,
	407, 407, 408, 409, 453, 453, 457, 457, 458, 458,
	458, 458, 458, 459, 459, 460, 460, 461, 461, 462,
	462, 410, 463, 463, 411, 411, 412, 412, 465, 465,
	470, 470, 470, 413, 413, 413, 414, 414, 414, 414,
	466, 466, 471, 471, 471, 471, 471, 471, 471, 222,
	222, 415, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 417, 417, 417, 464, 464, 464, 418, 474, 474,
	467, 467, 472, 472, 472, 472, 472, 454, 454, 534,
	534, 534, 535, 535, 419, 420, 420, 468, 468, 473,
	473, 421, 422, 469, 469, 469, 469, 423, 423, 455,
	455, 475, 475, 476, 476, 477, 477, 40, 40, 40,
	39, 39, 136, 136, 139, 139, 139, 139, 139, 142,
	143, 144, 145, 140, 140, 137, 138, 138, 141, 141,
	104, 104, 105, 105, 107, 109, 109, 109, 108, 110,
	110, 106, 106, 111, 111, 111, 111, 112, 112, 113,
	113, 113, 113, 113, 114, 114, 114, 114, 114, 42,
	42, 42, 42, 41, 41, 43, 43, 43, 43, 43,
	43, 44, 44, 45, 45, 46, 47, 47, 47, 48,
	48, 49, 49, 50, 50,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 3, 4, 4, 6, 3, 3, 4,
	3, 4, 4, 5, 4, 5, 1, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 3, 1, 1, 1, 2, 3, 4, 5, 6,
	8, 6, 6, 1, 3, 1, 3, 3, 5, 1,
	0, 1, 2, 4, 2, 0, 3, 3, 2, 1,
	3, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 4, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 3, 2, 3, 2, 0,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 0, 2, 3, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 1, 3, 3, 2,
	4, 1, 5, 2, 5, 2, 5, 2, 3, 3,
	0, 1, 0, 3, 0, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 0, 5, 0, 5,
	0, 0, 1, 1, 3, 1, 1, 1, 3, 3,
	1, 1, 1, 2, 4, 4, 2, 3, 5, 5,
	1, 3, 1, 0, 1, 2, 3, 2, 4, 2,
	3, 2, 0, 1, 2, 0, 9, 9, 2, 1,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 2, 3, 1, 4, 2, 3, 2,
	3, 2, 3, 1, 1, 2, 2, 4, 1, 2,
	3, 3, 4, 5, 4, 5, 4, 2, 2, 2,
	1, 1, 0, 5, 2, 2, 2, 3, 1, 0,
	1, 3, 9, 1, 2, 0, 7, 7, 0, 10,
	6, 0, 4, 5, 2, 0, 2, 4, 0, 1,
	1, 0, 5, 2, 4, 1, 2, 0, 1, 0,
	1, 5, 1, 0, 2, 0, 2, 6, 2, 0,
	1, 3, 2, 4, 0, 1, 3, 2, 1, 0,
	1, 3, 3, 2, 0, 2, 2, 2, 3, 3,
	4, 1, 3, 3, 2, 7, 12, 1, 3, 2,
	3, 3, 1, 2, 2, 2, 2, 1, 2, 13,
	2, 2, 0, 2, 0, 1, 3, 3, 1, 3,
	1, 3, 3, 3, 3, 3, 0, 3, 3, 0,
	3, 0, 7, 7, 3, 0, 2, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 6, 0,
	3, 0, 2, 3, 2, 3, 4, 4, 3, 3,
	0, 5, 2, 5, 2, 0, 4, 2, 1, 0,
	1, 0, 1, 3, 3, 6, 7, 5, 7, 9,
	2, 0, 7, 1, 3, 1, 4, 4, 7, 2,
	1, 1, 1, 3, 2, 8, 1, 3, 3, 5,
	2, 1, 3, 7, 2, 0, 10, 1, 2, 9,
	11, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	3, 0, 1, 3, 2, 0, 1, 1, 3, 3,
	1, 1, 3, 3, 3, 3, 4, 4, 3, 3,
	2, 1, 3, 2, 1, 1, 1, 1, 3, 0,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 2, 2, 1, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 0, 2, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 4, 4, 4,
	5, 5, 2, 5, 3, 5, 2, 0, 3, 1,
	2, 5, 5, 8, 3, 4, 8, 5, 0, 4,
	3, 0, 1, 3, 1, 3, 2, 2, 4, 4,
	5, 2, 0, 1, 1, 0, 2, 2, 0, 2,
	0, 13, 16, 12, 15, 14, 17, 1, 1, 2,
	2, 2, 2, 1, 0, 1, 0, 1, 3, 1,
	1, 1, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 0,
	2, 2, 1, 0, 3, 0, 1, 3, 1, 1,
	2, 4, 6, 6, 10, 1, 2, 1, 3, 4,
	0, 1, 3, 2, 1, 1, 6, 2, 0, 3,
	1, 1, 2, 1, 2, 2, 2, 2, 3, 0,
	1, 2, 1, 2, 1, 3, 2, 3, 1, 2,
	2, 2, 1, 2, 3, 1, 2, 2, 2, 2,
	3, 3, 3, 1, 3, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 0, 2, 1, 4, 4, 5,
	2, 5, 5, 7, 3, 1, 5, 9, 3, 9,
	4, 11, 10, 2, 0, 1, 3, 3, 6, 4,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 3, 3, 4, 0, 1,
	0, 6, 1, 3, 3, 3, 5, 2, 0, 3,
	4, 4, 0, 2, 0, 4, 0, 3, 16, 19,
	1, 0, 2, 0, 4, 0, 1, 3, 2, 0,
	4, 6, 4, 6, 4, 4, 6, 4, 6, 5,
	7, 5, 7, 4, 6, 10, 13, 10, 13, 11,
	14, 1, 3, 1, 0, 1, 3, 1, 1, 1,
	1, 1, 2, 5, 3, 6, 4, 6, 6, 9,
	5, 7, 6, 6, 5, 5, 5, 5, 9, 4,
	5, 7, 6, 4, 8, 4, 2, 4, 3, 6,
	4, 3, 3, 3, 2, 2, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 4, 4, 3, 2, 3,
	2, 2, 3, 4, 3, 2, 2, 3, 4, 4,
	4, 5, 1, 4, 4, 4, 3, 3, 2, 1,
	0, 6, 4, 6, 4, 6, 8, 4, 6, 4,
	6, 5, 7, 2, 3, 3, 2, 5, 1, 1,
	2, 3, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 3, 3, 3,
	3, 2, 2, 2, 3, 5, 5, 5, 2, 1,
	3, 6, 6, 6, 6, 6, 8, 8, 6, 6,
	7, 9, 9, 8, 10, 6, 6, 6, 6, 6,
	6, 6, 8, 6, 8, 6, 8, 7, 9, 6,
	8, 7, 9, 8, 10, 8, 10, 9, 11, 8,
	10, 9, 11, 8, 8, 7, 6, 6, 6, 6,
	8, 8, 8, 8, 6, 9, 0, 2, 2, 1,
	2, 2, 2, 2, 3, 1, 3, 3, 1, 5,
	3, 9, 12, 7, 7, 3, 2, 1, 3, 1,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 4, 5, 1, 0, 1, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 5, 1,
	4, 0, 2, 3, 0, 1, 1, 4, 5, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 2, 2, 1, 17, 21, 1, 1,
	2, 1, 3, 1, 1, 1, 3, 1, 2, 0,
	1, 2, 4, 1, 1, 1, 1, 1, 3, 0,
	1, 0, 1, 1, 4, 0, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 2, 0, 9, 11, 12,
	14, 3, 0, 3, 4, 4, 0, 6, 4, 9,
	7, 6, 4, 6, 6, 5, 7, 9, 6, 6,
	5, 4, 4, 3, 6, 6, 6, 6, 4, 7,
	5, 8, 7, 8, 6, 5, 8, 1, 0, 1,
	0, 4, 6, 5, 8, 2, 0, 2, 2, 2,
	1, 5, 2, 0, 2, 6, 6, 6, 10, 6,
	6, 6, 9, 9, 6, 6, 9, 6, 1, 1,
	7, 7, 6, 2, 2, 2, 2, 1, 2, 1,
	0, 1, 2, 10, 13, 5, 4, 4, 2, 0,
	2, 2, 1, 0, 11, 14, 12, 15, 8, 11,
	8, 7, 9, 1, 1, 3, 3, 5, 6, 1,
	3, 1, 3, 1, 3, 3, 7, 9, 9, 8,
	6, 1, 0, 1, 3, 3, 1, 5, 3, 8,
	11, 6, 1, 0, 5, 2, 3, 0, 2, 0,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 1, 3,
	1, 2, 2, 2, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3, 11, 13, 5, 1, 2,
	2, 1, 1, 3, 5, 1, 3, 7, 2, 0,
	5, 5, 10, 8, 2, 0, 2, 0, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 0, 5,
	0, 8, 1, 1, 8, 11, 6, 8, 1, 3,
	1, 1, 3, 4, 7, 6, 5, 5, 5, 5,
	1, 3, 4, 4, 4, 3, 4, 3, 1, 4,
	0, 8, 5, 5, 6, 7, 7, 7, 4, 4,
	5, 11, 10, 10, 2, 2, 0, 13, 2, 0,
	1, 3, 5, 5, 3, 6, 2, 1, 0, 2,
	4, 0, 1, 3, 6, 8, 8, 1, 3, 5,
	5, 10, 10, 11, 11, 5, 5, 6, 10, 1,
	0, 2, 0, 1, 0, 2, 2, 1, 1, 0,
	4, 0, 1, 3, 1, 1, 1, 1, 1, 2,
	4, 4, 5, 2, 0, 3, 1, 3, 4, 3,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 3, 3, 3, 0, 1, 4, 2,
	2, 2, 2, 2, 3, 2, 2, 3, 0, 2,
	2, 1, 1, 1, 0, 2, 4, 5, 6, 4,
	5, 2, 3, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -146, -152, -153, -154, -155,
	-156, -157, -158, -159, -160, -161, -386, -387, -388, -392,
	-393, -394, -395, -396, -397, -398, -399, -400, -401, -402,
	-403, -424, -425, -426, -427, -428, -429, -430, -431, -404,
	-405, -406, -407, -408, -409, -410, -411, -412, -413, -414,
	-415, -416, -417, -418, -419, -420, -421, -422, -423, -390,
	-391, -148, -149, -235, 112, 26, 22, 27, 395, 94,
	402, -151, -150, -234, 532, 63, 67, -242, 36, 519,
	87, 541, 97, 98, 99, 100, 532, -194, 116, -351,
	-314, -26, 33, 415, 262, 62, 465, 455, 226, 277,
	285, 423, 104, -379, 269, 450, 376, 195, 439, 388,
	444, 513, -454, 454, 452, 58, 290, 474, 472, 40,
	67, 308, 420, 481, 85, 285, 200, 226, 237, 248,
	262, 287, 71, -456, 62, 376, 386, 388, 410, 415,
	423, 444, 413, 461, 269, 407, 104, 450, 439, 455,
	465, 277, 385, -346, -349, -348, 465, 262, 308, 104,
	67, 420, 481, 85, 285, 226, 237, 439, 455, 195,
	269, 277, -456, 388, 415, 423, 376, 413, 461, 85,
	-489, 58, 424, 458, -490, -488, -213, 56, 218, 415,
	348, 407, 489, -5, 4, -18, -19, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 22, 202, 204,
	205, 206, 55, 207, 208, 209, 211, 212, 213, 89,
	70, 214, 215, 216, 24, 217, 219, 220, 221, 222,
	223, 224, 124, 227, 228, 229, 230, 231, 142, 232,
	102, 233, 234, 235, 236, 237, 112, 238, 155, 239,
	121, 122, 91, 247, 248, 249, 250, 251, 252, 254,
	255, 99, 150, 151, 256, 90, 257, 258, 259, 260,
	261, 262, 177, 27, 263, 139, 265, 149, 266, 268,
	137, 42, 269, 271, 272, 273, 274, 275, 276, 277,
	278, 280, 282, 283, 92, 284, 154, 166, 286, 287,
	288, 289, 290, 292, 295, 296, 152, 297, 298, 299,
	28, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 313, 314, 315, 97, 316, 318, 319,
	146, 504, 320, 321, 322, 323, 93, 325, 328, 329,
	330, 333, 334, 335, 336, 337, 338, 106, 85, 339,
	100, 341, 342, 343, 344, 345, 346, 347, 132, 349,
	350, 351, 352, 353, 354, 355, 358, 111, 359, 360,
	32, 140, 123, 505, 506, 503, 145, 62, 507, 508,
	125, 502, 509, 103, 365, 366, 367, 368, 369, 370,
	371, 130, 372, 129, 374, 375, 376, 378, 379, 380,
	381, 383, 384, 385, 386, 387, 113, 388, 153, 144,
	389, 390, 391, 392, 84, 133, 394, 395, 396, 397,
	398, 399, 400, 34, 401, 402, 403, 35, 404, 405,
	406, 408, 409, 410, 411, 128, 413, 414, 147, 416,
	417, 88, 418, 419, 420, 421, 422, 423, 94, 426,
	428, 429, 430, 431, 432, 108, 434, 435, 436, 437,
	438, 439, 114, 115, 440, 441, 442, 148, 443, 444,
	446, 447, 105, 449, 450, 109, 452, 453, 454, 455,
	456, 459, 461, 463, 464, 465, 466, 467, 468, 469,
	143, 470, 50, 473, 474, 475, 98, 476, 477, 478,
	479, 156, 184, 480, 481, 482, 483, 484, 486, 169,
	487, 141, 488, 499, 500, 57, 37, 174, 170, 190,
	180, 179, 225, 189, 188, 29, 279, 176, 293, 294,
	501, 187, 172, 186, 167, 161, 163, 164, 160, 162,
	157, 165, 159, 127, 158, 326, 340, 182, 183, 356,
	357, 361, 171, 362, 363, 377, 178, 175, 412, 427,
	173, 445, 185, 460, 462, 87, 181, 490, 491, 492,
	493, 494, 134, 495, 496, 497, 498, 126, -492, -491,
	56, 458, 424, -213, 21, 218, 58, 348, 407, 415,
	489, -137, -100, 510, -150, -151, -149, -148, -149, -234,
	-226, -227, 21, 41, -375, -373, -376, -5, 66, 424,
	458, 56, 542, -236, 84, -238, -7, -5, -236, 532,
	-3, 73, -377, -375, 64, 73, -147, -146, -373, 67,
	481, 84, 420, 308, 287, 386, 461, 118, 200, 459,
	-455, 464, 34, -17, -5, 28, -14, -5, -123, 222,
	280, -126, -5, 11, -127, 535, 536, 537, 538, 539,
	540, 526, 527, 528, 18, 19, 20, -14, 88, -14,
	28, -7, 28, 247, 67, -7, 28, 337, 85, 461,
	-7, -7, 341, -337, 28, -14, -7, -7, 532, 237,
	454, 452, 454, 452, -375, 28, 21, -373, 28, 21,
	-373, 28, -373, 28, 481, 67, 247, -384, -495, -77,
	-5, 4, -18, -20, 210, 116, 226, 25, 81, 243,
	117, 79, 44, 76, 52, 53, 75, 77, 46, 82,
	54, 80, 364, 78, 48, 451, 119, -14, -14, -7,
	-14, -383, -495, -11, -487, -9, 242, 246, 425, 4,
	-18, -19, -20, 322, 222, 280, -7, 28, -383, -7,
	-383, -7, -7, -7, -7, -7, 461, -11, -11, 337,
	-7, -14, 28, 88, -14, -7, 28, -16, -14, 28,
	-12, -7, -7, 28, -210, 28, -81, -82, -83, -84,
	-90, -86, -89, -77, 187, 172, 173, 174, 175, 176,
	177, 188, 189, 171, 190, -91, -92, -87, -88, 185,
	56, 4, -18, 170, -78, 179, 180, 181, 182, 183,
	-210, 28, 25, 337, 481, 247, 67, 88, 341, 461,
	322, 481, -489, 424, -489, 220, 210, -529, 432, -530,
	319, 390, 253, 31, 64, 61, 528, 534, 57, -76,
	7, -76, -531, -76, 40, -212, -9, -76, 507, 57,
	319, 210, -115, -42, -117, 131, -43, -44, -119, 68,
	281, 69, -120, 70, -137, -100, 533, 533, -215, -214,
	-217, -51, 537, -53, 535, 536, -122, 31, 517, -99,
	472, 40, -55, -54, 13, 532, -57, -56, -149, 29,
	135, -63, -64, 294, 11, 62, 412, -5, -74, 6,
	-76, 49, 43, 47, 38, -101, -272, 12, -495, 162,
	163, -214, 74, 537, -69, -72, 534, 530, -373, 532,
	532, 542, -236, -23, 532, -98, -51, -374, -373, 94,
	-5, 23, -377, -377, 533, -201, 532, -373, 28, -373,
	481, -373, 28, -27, 25, -495, -495, -7, 461, -495,
	131, -456, -351, 474, 210, -381, 31, -483, 23, -94,
	534, -369, 532, -14, -14, 534, -369, 23, 369, 258,
	453, 232, -369, 64, 31, -28, 36, 519, 31, 141,
	-373, 28, -442, 465, 31, 131, 28, 481, -7, -452,
	366, 74, -7, -23, 31, -368, 131, 36, 233, -81,
	-14, -339, -342, 399, -341, 208, 257, 197, 22, 27,
	478, 94, 224, 265, 259, 310, 355, 123, 31, 366,
	402, 401, 154, -30, 508, 29, 45, -339, -343, 399,
	208, 29, 45, -339, 399, -362, -365, 355, 23, 214,
	91, 306, 336, 339, 343, 365, 420, 437, 403, 474,
	29, -339, 399, 29, -373, 28, 21, -375, 28, 141,
	399, -37, 532, -69, 399, 399, 399, 399, -345, 27,
	94, 197, 478, 399, -37, 399, -7, -14, -14, 74,
	29, 399, 399, 94, 197, 27, 399, 399, 399, -443,
	-30, 480, 399, 94, 233, 395, 197, 27, 265, 259,
	431, 74, 74, -7, 399, 399, 131, 399, 94, 402,
	399, 94, 29, 369, 258, 453, 232, 399, 197, 27,
	98, -451, 197, 27, 29, 542, -372, 24, 35, 29,
	542, -372, 74, 29, 542, -372, 29, -95, -94, 532,
	-85, 532, 178, -95, -95, -95, 532, -96, 519, 520,
	532, -96, -97, 184, 532, -97, -97, 179, 180, -97,
	-372, 29, -16, 28, 131, 28, 141, 369, 258, 453,
	232, -27, 220, 23, -212, 40, 542, -530, -76, 328,
	66, 488, 253, 121, -216, 40, -208, -211, -207, 49,
	43, 74, -212, 6, 535, 536, -75, -74, -216, 40,
	-5, -528, -76, 4, -207, 40, 58, 49, 43, 74,
	505, -533, 261, 235, 328, -41, -42, -116, -115, -119,
	131, 390, 98, 355, 428, 504, -44, -43, -45, -51,
	21, -50, 92, 350, -46, -47, -51, -53, 535, 536,
	-118, 123, -138, -141, -51, -115, -42, -229, 73, 542,
	14, 39, 55, 535, 536, 537, 538, 539, 540, 526,
	527, 528, 18, 19, 20, -122, 30, 33, 46, 517,
	44, 48, 52, 53, 54, 37, 45, -125, 23, -8,
	11, 62, -126, 4, -22, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 21, 201, 22, 202, 203, 120,
	511, 95, 204, 205, 206, 60, 207, 208, 209, 210,
	211, 212, 213, 174, 116, 170, 190, 512, 89, 70,
	214, 215, 216, 24, 217, 38, 513, 218, 219, 220,
	514, 221, 222, 223, 224, 225, 226, 515, 124, 227,
	228, 229, 230, 231, 25, 142, 232, 102, 233, 118,
	234, 235, 236, 237, 112, 238, 81, 155, 239, 121,
	240, 241, 242, 243, 244, 245, 246, 122, 91, 247,
	248, 250, 189, 188, 251, 40, 252, 253, 254, 255,
	99, 150, 151, 256, 90, 96, 257, 258, 259, 260,
	41, 110, 261, 262, 177, 27, 263, 264, 139, 265,
	149, 266, 267, 268, 137, 42, 269, 271, 272, 273,
	274, 29, 275, 276, 277, 278, 279, 43, 280, 283,
	92, 176, 284, 154, 285, 166, 286, 117, 79, 287,
	288, 289, 290, 292, 293, 294, 295, 296, 152, 297,
	299, 28, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 76, 501, 314, 315,
	97, 316, 187, 172, 186, 318, 319, 75, 167, 161,
	163, 164, 160, 162, 157, 165, 159, 127, 158, 146,
	504, 320, 321, 322, 323, 93, 324, 327, 325, 326,
	77, 328, 329, 330, 58, 331, 332, 333, 334, 335,
	336, 337, 338, 106, 85, 339, 100, 340, 341, 343,
	344, 346, 347, 348, 182, 82, 183, 132, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 31, 111,
	359, 360, 47, 361, 32, 171, 140, 123, 505, 506,
	503, 145, 66, 507, 508, 125, 502, 362, 80, 363,
	103, 365, 366, 367, 368, 369, 370, 371, 130, 372,
	129, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 387, 113, 388, 153, 144,
	389, 390, 175, 391, 392, 84, 133, 393, 394, 395,
	396, 397, 398, 399, 400, 34, 401, 402, 403, 35,
	404, 405, 406, 78, 407, 408, 409, 410, 411, 412,
	128, 413, 414, 147, 415, 416, 417, 88, 419, 63,
	420, 421, 422, 423, 424, 425, 94, 427, 426, 428,
	429, 430, 431, 173, 432, 433, 108, 434, 435, 436,
	437, 438, 439, 114, 115, 440, 441, 442, 148, 443,
	444, 445, 446, 59, 447, 105, 448, 67, 449, 451,
	450, 109, 452, 453, 454, 455, 107, 456, 56, 185,
	457, 458, 459, 460, 461, 462, 49, 463, 464, 465,
	466, 467, 468, 469, 143, 470, 472, 50, 473, 474,
	475, 98, 104, 83, 476, 477, 478, 479, 156, 87,
	181, 191, 119, 480, 481, 482, 483, 51, 484, 487,
	141, 488, 489, 490, 491, 492, 493, 494, 134, 495,
	496, 497, 498, 126, 500, 57, -51, -51, -51, -51,
	-51, 364, -315, 32, -70, -51, -98, -149, 87, -69,
	-149, -149, -62, 530, 532, 532, 532, -69, -58, -51,
	-103, 486, -102, 282, 532, 532, 532, -229, 532, -72,
	-79, 537, -6, 4, -18, -19, -20, -21, 21, 203,
	120, 30, 511, 135, 23, 95, 60, 512, 38, 513,
	514, 39, 515, 118, 26, 240, 241, 242, 244, 245,
	246, 40, 253, 96, 41, 110, 264, 267, 270, 43,
	281, 131, 285, 64, 291, 71, 72, 45, 312, 317,
	73, 324, 327, 68, 331, 332, 31, 47, 69, 74,
	66, 33, 510, 373, 382, 393, 101, 63, 425, 433,
	59, 448, 67, 107, 61, 457, 49, 471, 472, 104,
	83, 191, 51, 65, 485, 36, -51, -73, -373, -98,
	-238, 23, -12, 542, 533, 39, 55, 30, 33, 46,
	44, 48, 52, 37, 45, 62, -162, -146, 103, 532,
	40, 23, -164, -169, -168, 532, -5, -5, -237, 83,
	83, 61, -186, 64, 61, -13, -5, 532, 123, 371,
	31, -201, -373, -434, -362, 355, 31, -17, 28, -5,
	-496, 532, -496, -511, 212, 199, 316, -7, -478, -480,
	532, -81, 322, 481, 84, -487, -382, -157, -158, -387,
	-388, 26, 29, -81, 534, -79, -370, -371, -6, -454,
	83, -123, 532, 268, 389, -14, -14, -14, -14, -14,
	29, -435, 29, -7, 532, 371, 31, -444, -443, -76,
	29, -445, -487, 104, 31, -380, 28, -373, 74, 333,
	-487, -373, 465, 74, 29, 21, -466, -471, 67, 449,
	-5, -376, 243, -373, -369, -76, 23, 131, 542, 61,
	-539, 118, 515, 371, 371, -294, 28, 515, -295, -5,
	118, -311, 514, 472, 382, 285, 271, -539, 118, -539,
	118, 118, 169, 336, 474, 195, 450, -327, 532, 74,
	461, 202, 401, 413, 412, 461, 413, 412, -373, 310,
	154, -14, 123, 61, -327, 299, 412, 532, -375, 450,
	61, 371, -373, 450, 61, -365, 91, 339, 343, -82,
	-207, -538, 70, -207, -207, 70, 347, -28, -28, -373,
	61, -539, -373, -339, 399, 29, 45, -339, 399, 29,
	-7, 61, 533, 61, 61, 61, 61, 118, 40, 31,
	118, 40, 31, -484, 118, -485, 514, 31, 118, 61,
	61, 399, 83, 83, -373, -7, 61, 61, -369, -466,
	-466, -466, 61, 61, 61, -30, -76, 47, 61, -369,
	388, -76, 388, 388, 388, -369, -373, -373, 399, -450,
	265, 259, 61, 61, -445, 61, -327, -327, 61, 439,
	-14, -14, -14, -14, -14, 61, 209, 156, 156, 156,
	-436, -347, -346, 200, 513, 262, 287, 62, 386, 410,
	459, 465, -349, 248, 407, 444, 450, 308, -16, -14,
	-12, -7, -14, -7, -81, -210, -95, -98, -74, -74,
	56, 56, -74, 532, -74, -97, -97, -210, -372, 29,
	-445, 29, -373, 458, -530, -532, 390, 400, 422, 542,
	-74, 6, -74, 6, 66, 504, 428, 542, -47, -49,
	-53, 535, 536, 412, 128, 532, -49, 412, 128, -48,
	-74, 6, -48, -121, 360, 431, -15, -373, 542, 83,
	-130, 95, 96, -41, -116, -218, 64, -367, 454, 452,
	58, 290, 474, 67, -373, -217, -81, -14, 56, 58,
	-51, -51, -51, -51, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, 46, 44, 48, 37,
	45, -51, 61, 47, 31, 49, 43, 50, 41, 261,
	358, -134, -133, 351, 352, 353, 354, 167, -129, 59,
	60, -128, -149, 532, -132, 511, 433, 21, -6, 532,
	-99, 412, 532, -149, 41, 31, -72, 533, 542, -98,
	-65, 531, -62, -98, -123, -98, 533, -61, -60, 51,
	-102, 71, -109, 509, 532, 533, 537, -66, 191, 21,
	41, -68, -51, -80, -77, -273, -53, -51, -268, -51,
	-218, -98, 531, 543, 533, 533, -239, 85, 31, 533,
	-51, -170, 74, -183, 104, 105, -163, -167, -5, 87,
	-5, -218, 542, 528, -165, -168, -70, -171, 65, -219,
	-220, -375, -149, 86, -230, 532, -243, -253, -263, -244,
	128, 126, 127, -5, -101, -272, -220, -187, 113, -187,
	542, 533, -289, -290, -293, -294, -296, -295, 46, -14,
	123, 29, -338, 36, 532, 29, 74, 31, 405, -503,
	-504, -506, 23, 322, 459, 485, -507, 216, 442, 301,
	435, 483, 278, 419, 325, 31, 238, 128, 446, -494,
	367, 94, -391, -497, 533, -498, -499, -501, -80, -93,
	45, 362, 501, 191, -77, -81, 427, -503, 405, -513,
	-512, 97, 99, 98, 463, 123, 199, -369, 537, -479,
	510, -481, -486, -482, -499, 4, 322, -7, -373, 481,
	-381, -351, -26, -17, -5, -308, -79, 533, 542, 528,
	131, -7, -246, -245, -247, -5, 532, -369, -369, -369,
	-369, -369, -14, -437, 415, 480, 64, 24, -7, -439,
	-440, -441, 296, 355, 479, -289, 123, 29, 285, -7,
	423, 29, 23, 31, -201, -6, 7, -453, 23, -463,
	308, 67, -465, -470, -5, -244, 532, -14, 449, -368,
	542, -375, 45, -69, -201, -201, 388, -81, -76, -341,
	-7, -7, -7, -373, -373, 31, -294, 28, -81, -7,
	532, -315, -333, 83, 504, 504, -334, 83, -5, -74,
	-7, 28, -5, 28, -7, -7, 506, 224, 341, -7,
	-328, -329, -6, -7, -7, 21, 104, 461, 413, 461,
	413, -7, 328, -7, 21, 104, -7, 328, -373, 412,
	-487, -36, 111, 79, 40, 83, 328, -31, -34, -359,
	94, 197, 27, -10, -6, -339, -342, 399, -7, -7,
	-373, -339, 399, -7, -7, -207, -14, -14, -207, -207,
	-339, 399, -362, -7, -7, -339, 399, 61, -539, -373,
	450, 61, -539, -375, 399, -439, -440, -7, -7, -7,
	-7, -7, -7, 47, -7, 28, -51, 47, -7, 532,
	47, -7, -7, -11, 61, -7, -7, 399, -460, 61,
	74, -7, -7, -7, -7, -7, -7, -12, -368, -12,
	-12, 399, 399, 61, 401, 202, -11, -11, 423, -7,
	-7, -33, -75, 40, 535, 536, 94, 399, 399, 399,
	399, -7, -7, -76, -25, 28, -76, -438, 61, -7,
	-14, -384, 532, -81, -383, -385, 222, 280, -123, -383,
	-383, 131, -81, -372, -372, -372, 74, -372, 533, 533,
	533, 57, 57, 533, -98, 533, -372, -16, 423, 131,
	-378, 36, -529, 469, 230, 390, -208, 98, -46, -49,
	66, 36, -74, 6, 532, -98, 335, 542, -141, -124,
	-126, 62, -131, 518, -221, 65, -219, -536, 67, -536,
	454, 452, 454, 452, -536, -373, 57, 42, -51, -51,
	61, -129, 59, -128, 42, -51, 47, 49, 43, 50,
	41, 261, 358, -134, -133, 64, 358, -135, 36, 169,
	156, 135, 140, 147, -52, -53, 535, 536, 412, -52,
	-98, -149, 532, -123, 532, -98, 41, -70, -51, 531,
	531, 542, 533, 533, 533, -59, -60, 264, -51, -109,
	532, -108, -5, 532, 65, 533, -100, 542, -137, -68,
	-66, -66, 16, 17, -275, 47, 193, 156, 543, -277,
	510, -287, -286, 516, -221, 533, -73, -51, 532, 85,
	-172, 101, 102, 156, 533, 542, -70, -171, -169, -51,
	533, 542, -172, -51, 121, 542, 81, -231, 75, 82,
	79, 77, 78, 76, -224, -223, 23, -5, -224, -149,
	-243, -253, -263, -149, -230, -220, -224, -224, -224, -252,
	519, 64, 532, 532, -69, 74, -193, -76, 114, 115,
	-193, -5, 533, 542, -373, -291, 532, -373, -373, 23,
	-327, -13, -373, -375, 29, -502, 67, 47, -93, -77,
	-509, -389, 213, 404, -506, -508, -76, -212, -505, 131,
	74, 419, 255, 318, 325, -207, -207, -14, -5, -490,
	424, 458, 533, 542, 40, 528, -80, -93, -501, -93,
	362, -94, -77, -509, 74, 33, 123, -513, 533, 533,
	510, 542, 70, 533, 542, 528, -7, 296, -201, -373,
	210, -381, -309, 118, -310, -312, 39, 31, 47, 472,
	382, 514, 40, 393, 289, 253, 312, -371, -350, -93,
	-21, -124, -207, -76, 356, 62, 535, 536, 465, 533,
	542, -81, -432, -433, -76, -369, 64, -7, -212, -212,
	-28, -357, 508, -441, -446, -7, 296, 479, -446, 533,
	-373, -373, 247, -442, -7, 131, -146, 29, -352, 83,
	274, 51, -338, -457, 131, 4, 296, 64, 542, -51,
	-23, -368, -471, -201, 415, -201, -222, 65, -222, -12,
	533, 61, 61, 61, -299, 131, 40, -27, 283, 29,
	31, -356, -355, 440, -311, 271, -51, 532, -306, 308,
	532, -333, 532, 532, -7, -345, 27, 94, 402, 197,
	-364, -209, -30, -366, 403, 94, -306, 29, -372, 29,
	-372, -35, -5, 40, 533, 542, 528, 534, -7, -7,
	-7, -7, 419, 419, 328, 308, 419, 533, 542, -359,
	-359, -10, -32, -76, 61, -539, 118, 94, 365, 61,
	94, 365, 61, 61, 61, -539, -7, -7, -339, 399,
	-7, -7, -7, -339, 399, 61, -30, 61, -372, 29,
	-485, -51, -306, -7, 399, 399, 197, 27, 61, -461,
	83, -340, -487, -373, -368, -368, -368, 61, 61, -7,
	-7, 439, 61, 61, 61, 61, 61, 61, -76, 31,
	-212, -81, -14, -14, -71, 532, -81, -14, -96, -96,
	533, -372, -7, -445, 247, 355, 66, 36, 456, -98,
	533, 542, -373, -131, 532, 92, 93, -39, 71, -51,
	-373, -373, -536, -536, -536, -536, -373, -51, -51, 42,
	42, -51, -52, -52, -51, 42, 64, 358, -135, -51,
	472, 472, 30, 14, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, -52, -52, 30, 533,
	-51, 533, -98, 533, 542, 533, -62, 267, -51, 107,
	-137, -110, -5, -51, 533, 191, -68, -100, -100, 542,
	-100, -51, -51, -135, 74, 74, -268, -268, -276, 47,
	193, 70, 167, -39, 531, -147, -214, -177, 532, 74,
	-146, -146, 103, -167, -172, 528, -168, 123, -220, 75,
	75, -220, -231, 75, -232, 80, -232, -232, -5, 532,
	-224, -224, -224, -224, 533, 125, 532, -53, 134, -268,
	-51, -28, -195, -537, 83, -322, 311, -293, -304, -323,
	-324, 371, -292, -297, -298, -295, -5, -291, 532, 123,
	371, -146, 533, -434, -334, -7, -503, 532, 74, 207,
	-51, 542, 542, 465, 47, 255, 318, -498, -51, -51,
	-93, -93, 539, -94, -373, -512, -13, 74, 70, -486,
	-479, -482, 4, -350, 532, -446, -338, 532, -487, -7,
	-14, 253, 47, -315, 504, 532, -52, -373, -361, 202,
	70, 254, 300, -81, -247, -258, 39, 533, 542, -14,
	-435, 532, -94, -322, -291, 532, 371, 141, -444, -357,
	-445, -378, -380, -338, -7, -540, 287, 386, -447, -449,
	-5, -459, 61, -458, 21, 63, 97, 98, 99, -446,
	-219, -470, 533, 74, -222, -5, 243, -222, 532, -368,
	36, 169, -76, -7, -7, 87, -294, 29, -354, -353,
	231, -5, 40, 533, -13, -307, 31, 253, 312, 355,
	-7, -13, -306, -13, -302, -301, -181, -5, -244, 532,
	31, 276, 299, 247, -365, 289, 31, 276, 439, -327,
	-355, -353, -327, 289, -366, 94, 465, -28, 439, -5,
	-7, -329, -350, -6, 419, -7, -34, -7, -7, -7,
	450, 70, -7, 450, 70, -7, -7, -7, -7, 61,
	61, -539, 94, 365, 61, 61, -539, -7, -7, -7,
	533, 61, 61, -467, -472, 62, 287, 440, -468, -473,
	62, 287, -7, -462, 36, 532, 542, 399, -7, -7,
	-30, -33, -7, -7, -7, -7, -7, -76, 212, 199,
	29, 23, 83, 83, -81, 356, 322, -372, 423, 247,
	456, 533, -51, -123, -140, 72, 70, -373, -373, -373,
	-373, -51, -51, 42, 30, 30, -51, -51, 320, 320,
	-51, -81, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -51, 533, 533, -51, -51, 533,
	-106, 371, 533, -68, 533, 533, 533, -278, 101, 47,
	47, -278, 74, 74, -138, 149, -140, 533, 110, -203,
	-181, 118, -183, -51, -192, -7, -220, -220, -233, 83,
	74, 75, -220, 532, -12, -223, -248, -249, -244, -259,
	130, 532, 542, -166, -175, -184, -185, 51, -197, -198,
	532, -28, 151, -323, 532, 305, 272, -352, 70, 533,
	542, -308, 36, -299, -289, -14, 123, -526, 36, -338,
	532, 74, -509, -251, -500, -80, -77, 47, -527, -76,
	131, -81, 314, 465, 539, -518, 394, -373, -479, 533,
	-469, 64, 61, -475, 313, 23, -13, -381, -310, 31,
	-368, -368, -51, -201, 23, 40, 83, -14, -76, -358,
	-359, 423, -299, -289, 123, -7, 285, 423, 23, -331,
	450, -495, 274, 30, 45, -461, -340, -465, -51, 287,
	501, 287, 64, 36, 45, 64, -294, -357, -5, 40,
	-306, 533, 253, 477, 300, 254, 310, 533, 533, 533,
	542, 36, -182, -174, 39, -182, -51, 47, 28, 28,
	-361, 47, 23, -33, -361, -81, -207, -33, -372, -372,
	528, 61, 61, -7, -340, -7, -340, 61, -7, -7,
	-7, 450, 70, -7, -7, -7, -372, -306, -7, -7,
	542, -74, -74, -81, 542, -74, -74, 514, -51, -487,
	61, -372, -76, -76, -81, -7, -7, 533, 542, 542,
	-7, -7, 533, 533, -104, 485, -51, -40, 21, 41,
	-51, -51, -51, 533, -100, 70, -100, 533, -81, 533,
	47, 47, -7, -104, -240, 88, 98, 111, 533, 542,
	-7, 156, -233, 532, -51, -220, -12, 533, 533, 542,
	-250, 23, 124, -53, -260, 70, -261, -262, -52, 40,
	-51, -172, -175, -176, 30, -176, 106, 31, -196, 116,
	117, 150, 47, 155, 152, 153, 42, 154, 149, -199,
	-204, -6, -197, -76, -352, -15, -305, 228, 231, 234,
	252, 299, 289, 309, 439, 440, 21, -305, -38, 36,
	169, -5, -297, 508, -323, 533, -291, -373, 514, 217,
	58, 23, -203, -375, 542, 533, -93, 314, 267, -510,
	-4, -389, 465, 465, -514, 131, -519, -521, -516, 349,
	503, -525, 64, 533, 533, 434, 434, -476, -477, 479,
	355, -446, -146, 533, -332, 83, -332, 533, -316, 338,
	299, 532, -7, 533, 542, -7, 423, 533, -373, -357,
	247, -7, -146, -7, 532, -540, -449, 532, -462, 64,
	533, -383, -464, 23, -464, -14, 532, 532, 532, -308,
	-317, 304, -317, 393, -317, -301, -123, 62, -337, -14,
	-14, 533, 29, 29, 532, 23, -258, -350, -7, -7,
	-344, 360, 94, -344, 94, -7, 61, -7, -340, 61,
	-472, -123, -385, -383, 532, -473, 532, 532, 532, 533,
	-7, 533, -81, 356, -81, -105, -107, -5, -136, -139,
	-51, -142, -144, -143, -145, 532, 239, 409, 294, -111,
	389, 128, 295, -98, 533, -287, -241, 91, 90, 89,
	94, -221, -181, -146, -12, 533, -252, -249, 532, -254,
	-255, -5, -260, 70, -53, 133, 156, 542, 533, 23,
	-52, -267, 23, 107, -51, 107, 106, -483, -483, -483,
	-483, 153, 31, 47, -76, 533, 542, -205, -211, -207,
	537, 40, 532, -221, -38, 533, -330, 74, -327, 506,
	532, -308, -352, -322, -323, -291, 507, 514, 514, -146,
	533, -334, -500, -503, 541, -81, -522, 51, -541, 263,
	-521, -517, 67, 412, -306, -373, 36, 36, -446, 479,
	-526, -338, 308, -313, 355, -321, -318, -319, 74, 79,
	370, 430, -363, 532, -51, -474, 280, -359, -357, -7,
	-322, -291, 141, -357, -378, 533, -495, -448, 7, -219,
	-464, 302, 206, -303, -300, -9, -98, -98, -368, 532,
	-368, -373, -368, 532, -130, -327, -182, -51, 299, -29,
	83, 450, 450, -7, -344, 94, -7, -534, 131, -534,
	-535, -81, -535, -535, -51, 533, 533, 533, 542, 23,
	542, 533, 532, 532, 426, 533, -112, -113, 37, 468,
	121, -51, -112, -112, -13, 92, 92, -164, 533, -245,
	533, 542, -81, 131, -260, -262, 542, -6, -279, 130,
	-5, -178, -179, 110, 98, 99, -180, 110, 97, 70,
	-76, -76, -76, -76, -13, 537, 47, -13, 537, -204,
	-200, -206, -211, -330, -331, 229, -325, -326, -5, -244,
	532, -38, -323, -352, -299, 507, 507, -526, -336, 304,
	532, -509, 274, 532, -515, 412, 438, -483, 131, 287,
	287, 23, 450, 310, -319, 74, -318, 74, 98, 99,
	-362, 533, 23, -14, -357, 423, -299, -7, 532, 533,
	542, 533, 542, -74, 533, 533, -332, -13, -332, -201,
	-332, -123, -131, -130, 533, -363, -51, -7, -7, 450,
	-360, 392, 88, 510, -360, 533, 542, 533, 533, 533,
	-107, -108, -139, -98, -98, 532, -114, 271, -113, 378,
	284, 412, 378, 284, -114, -114, 94, 70, 70, -221,
	-225, 23, 533, -255, -256, -257, 4, 40, 31, 47,
	129, 125, -53, 124, -269, -270, -268, 111, 94, 111,
	-173, 103, 532, 40, 87, 108, 109, -13, 537, 533,
	542, -331, 27, 99, 381, 533, 542, -174, -174, -51,
	-330, -352, -38, -323, -315, 532, -203, -540, -51, -524,
	-5, 263, -383, -383, -146, -7, -320, 355, 35, 24,
	94, -320, 533, 441, -467, -7, 423, -357, 533, 7,
	-300, 61, -306, 533, -306, -316, -221, 533, -131, -344,
	-344, -7, 70, -383, -81, 533, 533, -136, 121, 71,
	456, 355, 30, -5, -13, -13, -5, -257, -52, -52,
	47, -52, -259, 532, 542, 23, -164, -183, -163, 87,
	532, -206, 128, 128, -326, -337, -337, 533, -331, -38,
	-330, -352, -338, -335, -181, 533, -495, 533, 412, 542,
	542, -526, 196, 47, 40, -357, -7, 532, -321, -306,
	-344, -14, 533, 412, 502, -113, 61, 83, 94, 94,
	124, -264, -265, -5, 132, -270, -6, 156, 533, -98,
	-174, -330, -331, -38, -331, 533, 542, -336, 532, -522,
	61, 64, -201, -201, -357, -98, -306, -54, -5, -5,
	-5, -254, 533, 542, 131, -81, -288, 129, -173, -173,
	103, 533, -337, -331, -330, -221, -181, -315, -520, -523,
	-74, 6, -76, -6, 274, 434, 434, 533, 40, 533,
	-280, -281, 40, -282, 137, 47, 49, 43, 50, 139,
	-265, 125, -266, -286, 29, 129, 7, -183, -331, -338,
	533, 542, -540, 36, 36, -54, 533, 74, -51, 135,
	140, -284, 169, 36, -266, -266, 7, 124, 23, 156,
	-331, -523, -495, 287, 287, 83, 137, -285, 146, 145,
	141, 135, 141, 135, 142, 143, -284, -280, 532, -7,
	-173, -221, 532, -383, -383, -5, -283, -281, 144, 144,
	141, 141, 135, 141, 135, 141, -285, -264, 124, -520,
	74, 74, 74, 141, 141, -283, 533, 532, 533, 139,
	137, 147, 147, -264, -281, 148, 148, 533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 1325, -2, 0, 1599, -2, 1662, 1662, 0, 0,
	0, -2, 1316, 1408, 0, 1439, 0, 1359, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 1598, 0,
	0, 2580, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 1727, 1728, 0, 0, -2, 1900, 2557,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1661, 0, 0, 0, 0, 0, 2042, 0,
	2038, 2039, 2040, 0, 0, 2044, 2045, 2046, 0, 0,
	0, 1645, 0, 1648, 1649, 1650, 1651, 1652, 1653, 0,
	2023, 261, 372, 406, 2028, 2384, 0, 489, 145, 362,
	-2, 353, 439, 2399, 80, 81, 82, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 354, 355, 356, 357, 358, 359, 360, 361, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
	487, 488, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 2037, 2029,
	489, 406, 372, 2033, 2034, 145, 261, 279, 353, 362,
	439, -2, 0, 0, -2, 1330, 1331, 0, 1331, 0,
	1361, 0, 1438, 1440, 1358, 1383, 1384, 95, 0, 372,
	406, 489, 0, 1405, 336, 1410, 98, 90, 1406, 0,
	2, 0, 0, 1388, 0, 0, 0, 1327, 2242, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	1662, 2579, -2, 0, -2, 230, 1668, 112, 0, 149,
	211, 1313, 0, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 2263, 0, 0,
	230, 1830, 230, 0, 0, 2329, 230, 0, 0, 0,
	2479, 0, 0, 98, 230, 64, 2444, 0, 0, 0,
	1729, 1730, 1731, 1732, 0, 230, 0, 0, 230, 0,
	0, 230, 0, 230, 0, 0, 0, 0, 0, 1184,
	0, -2, -2, 1250, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 0, 0, 0,
	0, 0, 0, 0, 1937, 1938, 1939, 1940, 1941, 2419,
	2420, 2421, 2422, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 0, 230, 0, 0, 0, 230, 68, 114, 230,
	68, 91, 0, 230, 68, 230, 1659, 1242, 1243, 1244,
	1245, 1246, 1247, 1256, 1259, 1260, 1261, 1262, 1263, 1294,
	192, 1256, 1256, 1256, 1269, 1270, 1271, 1272, 1273, 1290,
	1290, 1248, 1249, 1292, 1281, 1292, 1292, 1276, 0, 1292,
	68, 230, 0, 0, 2041, 0, 2043, 0, 1643, 1644,
	1647, 76, 2024, 372, 2025, 147, 0, 2026, 0, 2425,
	0, 0, 2431, 0, 0, 0, 0, 0, 0, 2387,
	1164, 2388, 2389, 2414, 2415, 2390, 2417, 2418, 0, 2030,
	0, 2032, 2644, 1343, 1340, 0, 2641, 2642, 1344, 0,
	0, 0, 1352, 0, -2, 0, 1328, 1329, 1445, 1360,
	1362, 1366, 1367, 1059, 0, 0, 0, 0, 0, 0,
	1799, 1126, 1143, 1144, 1178, 0, 1147, 1148, 1149, 452,
	0, 1154, 1155, 456, 1295, 299, 485, 1168, 1157, 1158,
	1159, 1160, 1161, 1162, 1200, 1318, 1320, 1163, 0, 466,
	463, 1445, 0, 1385, 96, 1170, 0, 1173, 1386, 0,
	0, 0, 1407, 0, 0, 0, 1240, 0, 1563, 0,
	1389, 0, 1585, 0, 0, 0, 0, 0, 230, 2242,
	0, 2278, 230, 63, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 1733, 0, 2248, 0, 0, 1667, 113,
	0, 2261, 0, 2558, 0, 0, 2262, 0, 0, 0,
	0, 0, 2268, 0, 0, 2286, 1828, 1829, 0, 0,
	0, 230, 2333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2513, 0, 0, 0, 0,
	0, 1910, 1923, 2010, 1931, 0, 0, 0, 2010, 2010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2002, 0, 0, 0, 1912, 1914, 0,
	0, 0, 0, 1915, 0, 2281, 1808, 0, 0, 0,
	1812, 1827, 1815, 0, 0, 0, 0, 1830, -2, 1825,
	0, 1917, 2010, 0, 0, 230, 0, 0, 230, 0,
	0, 2058, 0, 1185, 0, 0, 0, 0, 2252, 0,
	0, 0, 0, 0, 2052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2326,
	2327, 0, 0, 0, 0, 0, 0, 0, 2538, 2539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2293, 1662, 2308, 2309, 0, 0, 2012, 66, 67, 0,
	0, 2014, 0, 0, 0, 2017, 0, 1257, 1256, 0,
	1264, 0, 1265, 1266, 1267, 1268, 0, 1285, 0, 0,
	0, 1287, 1283, 1291, 0, 1274, 1275, 1292, 1292, 1279,
	2019, 0, 68, 230, 0, 0, 1646, 2047, 2048, 2049,
	2050, 0, 0, 0, 2391, 2392, 0, 2427, 2394, 0,
	2429, 2430, 2432, 2385, 2395, 2397, 2401, 2403, 2404, 1633,
	1634, 1635, 1636, 1637, 0, 0, 1640, 1165, 2396, 2398,
	2400, 2386, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412,
	2413, 2393, 2423, 2424, 2031, 1334, 2643, 1335, 1342, 1345,
	0, 0, 1347, 0, 1349, 0, 2639, 2640, 2645, 2653,
	2654, 0, 2663, 2664, 2651, 0, 2655, -2, 0, 0,
	1355, 0, 2605, 2606, 1715, 2644, 1343, 1369, 0, 0,
	0, 661, 629, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 0, 622, 876, -2, 0,
	-2, 963, 794, 1097, 1099, -2, 773, 0, 0, 1365,
	-2, 873, 1220, 88, 89, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	623, 624, 625, 626, 627, 628, 630, 631, 632, 633,
	634, 635, 636, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 769, 770, 771, 772, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 874, 875, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1064, 1065, 1079, 1082,
	1083, 0, 0, 0, 1145, 1240, 0, -2, 493, 1150,
	1151, 1152, 1153, 0, 0, 0, 0, -2, 0, 1199,
	1320, 0, 2617, 0, 0, 0, 0, 1369, 0, 1171,
	1174, 1175, 1251, 83, 84, 85, 86, 87, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 1172, 0, 0, 0,
	1411, 1415, 0, 0, 1422, 0, 0, 0, 0, 1222,
	1224, 0, 0, 1321, 0, 0, 1698, 1565, 0, 0,
	0, 0, 1369, 1576, 0, 0, 1178, 1390, 1428, 0,
	0, 1594, 1594, 1591, 1592, 0, 93, 1736, 0, 0,
	0, 1909, 0, 2275, 2277, 0, 0, 0, 230, 62,
	2157, 0, 2157, 0, 2198, 2199, 0, 0, 0, 2260,
	0, 0, 0, 0, 0, 2379, 2378, 2380, 2381, 2382,
	2383, -2, 63, 1788, 0, 1253, 0, 2461, 2463, 0,
	0, 1314, 1459, 0, 0, 0, 0, 0, 0, 2270,
	0, 2283, 0, 2320, 1736, 0, 0, 0, 2332, 2328,
	0, 0, 2343, 2344, 0, 0, 230, 2242, 0, 0,
	2478, 2485, 0, 0, 0, 0, 2444, 2520, 0, 398,
	-2, 2242, 2528, 0, 2443, 0, 0, 0, 0, 0,
	0, 0, 2009, 0, 0, 1942, 230, 0, 1966, 0,
	0, 1845, 0, 1799, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 1974, 1975, 0, 0, 1995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1988, 0,
	0, 1990, 1991, 0, 1996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1809, 1813, 1818, 1819, 1810,
	1811, 0, 1826, 1816, 1817, 0, 0, 0, 0, 0,
	0, 0, 0, 1919, 2010, 0, 0, 1921, 2010, 0,
	2320, 0, 2051, 0, 0, 0, 0, 0, 2008, 0,
	0, 0, 0, 2255, 0, 2366, 0, 0, 0, 0,
	0, 0, 0, 0, 2496, 0, 0, 0, 2516, 2518,
	2517, 2519, 0, 0, 0, 2325, 2330, 2331, 0, 2532,
	0, 2533, 2444, 0, 0, 2540, 0, 0, 0, 2467,
	2468, 2471, 0, 0, 0, 0, 2480, 2481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	2291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1654, 1655, 1656, 1657, 1658, 2042, 68, 115,
	68, 92, 68, 0, 1660, 68, 1258, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 1278, 68, 2021, 0,
	0, 0, 2377, 0, 2426, 2428, 0, 0, 2436, 0,
	1166, 1638, 1167, 1639, 1341, 0, 1350, 0, 0, 0,
	2656, 0, 0, -2, -2, 0, 2652, 2661, 2662, 2657,
	-2, -2, 2658, 1346, 1353, 0, 1351, 99, 0, 0,
	1718, 1713, 1714, 1338, 1339, 1425, 0, 1444, -2, -2,
	261, 222, -2, 0, 111, 1363, 1060, 1061, 0, 1063,
	1066, 1067, 1068, 1069, 1070, 1071, -2, -2, -2, -2,
	-2, -2, 1078, 1080, 1081, -2, 1223, 1225, 0, 1321,
	0, -2, 0, 1096, 0, 1101, 1103, 1105, 0, 1118,
	1120, 0, 1239, 1226, 1227, 1228, 1229, 1230, 0, 0,
	1322, 1113, 1323, 0, 0, 1217, 1218, 1219, 1364, 0,
	1100, 0, 0, 1117, 1797, 0, 1179, 1178, 0, 0,
	0, 1208, 1209, 0, 0, 0, -2, 1205, 1201, 0,
	2617, 0, 1181, 0, 0, 1186, 0, 1316, 0, 0,
	0, 1193, 1195, 0, -2, 1506, 1059, 0, 1511, 1549,
	1425, 0, 1176, 1173, 1387, 1423, 0, 1413, 0, 97,
	1241, 1720, 0, 0, 1570, 1571, 0, 1572, 1178, 1569,
	1564, 1428, 0, 0, 0, 1581, 1580, 1720, 0, 1584,
	1370, 1431, 1431, 0, 1375, 0, 1431, 1431, 1431, 1449,
	358, 505, 470, 95, 1182, 1183, 0, 0, 1593, 0,
	0, 2241, 0, 1735, 1737, 1739, 1740, 1741, 0, 1765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2171,
	2156, 2158, 0, 0, 0, 2163, 2164, 0, 2179, 2180,
	2181, 2182, 0, 0, 2187, 0, 0, 0, 0, 2192,
	0, 0, 2195, 0, 2136, 2137, 2139, 0, 0, 2146,
	2147, 2148, 2149, 2151, -2, 2153, 0, 2171, 0, 0,
	2201, 2203, 2204, 2205, 2207, 2200, 0, 2259, 0, 0,
	0, 0, 2349, 2353, 2351, 1248, 0, 2577, 2242, 0,
	2247, 0, 0, 0, -2, 2251, 1254, 2460, 0, 0,
	0, 2564, 0, 1458, 1460, 0, 2362, 2274, 2264, 2265,
	2266, 2267, 0, 2285, 0, 0, 0, 2290, 1830, 1780,
	2319, 2317, 0, 0, 0, 0, 0, 0, 0, 2329,
	0, 0, 0, 0, 1888, 0, 1909, 2487, 0, 0,
	2502, 2503, 0, 2508, 2510, 2511, 0, 98, 2444, 2515,
	0, 2242, 0, -2, 2530, 2530, 0, 0, 0, 1932,
	2081, 0, 0, 0, 76, 0, 1944, 230, 1763, 0,
	0, 0, 2116, 0, 0, 0, 0, 0, 1664, 0,
	2116, 230, 68, 230, 68, 1968, 1971, 1973, 0, 1994,
	0, 2125, 2128, 1972, 1976, 1979, 1980, 0, 0, 0,
	0, 1984, 0, 1981, 1982, 1983, 1987, 0, 1989, 0,
	1992, 1997, 2456, 2457, 2458, 0, 0, 0, 2448, 2450,
	373, 121, 193, 0, 1784, 1911, 1924, 2010, 0, 2089,
	2006, 1913, 0, 0, 2083, 1814, 1820, 1821, 1822, 1824,
	1916, 0, 2282, 2085, 0, 1918, 2010, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 2061, 2062, 2063,
	2064, 2065, 0, 2253, 68, 230, 2007, 2254, 0, 0,
	2116, 2258, 2068, 2069, 0, 0, 0, 0, 2498, 0,
	0, 2075, 2076, 2077, 2078, 2079, 2080, 2444, 2534, 2444,
	2444, 0, 0, 0, 2469, 2470, 2106, 2107, 0, 2108,
	2109, 2506, 1641, 1642, 0, 0, 0, 0, 0, 0,
	0, 2114, 0, 0, 0, 0, 2360, 2292, 0, 2295,
	2296, 2297, 0, 2299, 2300, 2301, 149, 211, 0, 2304,
	2305, 0, 2307, 2011, 2013, 2015, 0, 2018, 1255, 1293,
	1290, 1288, 1289, 1290, 0, 1280, 2020, 68, 0, 0,
	2371, 0, 2027, 2433, 2434, 2435, 2402, 1348, 2646, 0,
	2649, 0, 2659, 2660, 0, 0, 1354, 0, 2607, 1718,
	1297, 0, 2609, 0, 2591, 0, 1368, 0, 101, 0,
	102, 102, 102, 102, 0, 110, 0, 0, -2, -2,
	0, 0, 0, 1114, 0, -2, 1098, 1102, 1104, 1106,
	0, 1119, 1122, 0, 1239, 0, 1121, 1124, 0, 0,
	1231, 1232, 1233, 1234, 0, 1127, 0, 0, 485, 0,
	0, 1115, 0, 0, 0, 0, 1798, 1146, 1241, 1206,
	1207, 0, 1156, 1296, -2, 0, 1202, 0, 0, 1180,
	0, 2615, 2616, 2620, 0, 1187, 0, 0, 1315, 1316,
	1316, 1316, 0, 0, 1239, 0, 0, 0, 0, 1509,
	0, 1490, 1548, 0, 2591, 1441, 0, 1172, 0, 1414,
	1562, 0, 1701, 0, 0, 0, 1574, 1720, 1577, 1578,
	0, 0, 1583, 1426, 170, 0, 0, 0, 0, 0,
	1402, 1402, 1402, 1400, 1372, 1430, 0, 1435, 1373, 1431,
	1431, 1431, 1431, -2, 1375, 0, 1377, 1379, 1381, 1446,
	0, 0, 0, 0, -2, 0, 1830, 1595, 1596, 1597,
	-2, 94, 1878, 0, 1745, 1880, 0, 1765, 0, 0,
	1908, 0, 2278, 1903, 0, 2157, 0, 0, 2152, 1256,
	2133, 2169, 0, 0, 2159, 2160, 2165, 2161, 2162, 0,
	0, 0, 2185, 2186, 2188, 2189, 2190, 2191, 2193, 2194,
	372, 406, 2135, 0, 0, 0, 0, 2145, 0, 2144,
	2150, 1256, 0, 2134, 0, 0, 0, 0, 2345, 2346,
	0, 0, 0, 2352, 0, 0, 0, 0, 1909, 0,
	0, 2250, 1787, 0, 1790, 1791, 0, 0, 1836, 1799,
	0, 0, 0, 0, 0, 1793, 0, 2462, 2464, 2437,
	2438, 2439, 2440, 2441, 2442, 299, 1301, 1302, 0, 2272,
	0, 1464, 0, 2361, 2363, 2269, 0, 2287, 2288, 2289,
	2286, 2310, 0, 2318, 2313, 2321, 2314, 2316, 2315, 1878,
	1765, 0, 0, 2333, 1780, 0, 2377, 0, 1909, 0,
	0, 0, 2477, 2494, 0, 2484, 0, 0, 0, 0,
	0, 2514, 2521, 2530, 0, 2530, 2525, 0, 2527, 2444,
	0, 0, 0, 0, 2003, 0, 1775, 2004, 2005, 0,
	0, 1759, 1762, 0, 1844, 1903, 0, 0, 1848, 0,
	0, 2116, 0, 0, 1902, 1946, 0, 0, 0, 0,
	1959, 0, 1965, 1802, -2, 0, 1967, 0, 1963, 0,
	1970, 1993, 2454, 2455, 2124, 0, 0, 0, 1977, 1985,
	1978, 1986, 1998, 1999, 0, 0, 2000, 2447, 0, 2451,
	2452, 2453, 1783, 1785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2087, 0, 1920, 2010,
	0, 2091, 0, 1922, 2010, 0, 2311, 0, 2256, 0,
	2365, 0, 2368, 2070, 0, 0, 0, 0, 0, 2500,
	0, 2495, 1935, 0, 2537, 2535, 2536, 0, 0, 2105,
	0, 0, 0, 0, 0, 0, 0, 0, 2356, 0,
	2294, 0, 0, 0, 2053, 0, 0, 68, 1284, 1286,
	1282, 2022, 2341, 0, 2375, 0, 2647, 0, 2650, 0,
	1215, 0, 100, 2608, 0, 1716, 1717, 2604, 0, 1424,
	103, 104, 0, 0, 0, 0, 109, 1062, -2, 0,
	0, -2, 0, 0, -2, 0, 0, 1123, 1125, -2,
	1236, 1238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 1130, 0, 1324,
	0, -2, 0, 1212, 0, -2, 1210, 1198, 1204, 0,
	0, 2622, 2619, 0, 1188, 0, 1194, 0, 0, 0,
	0, 1196, 1197, 1515, 0, 0, 1502, 1503, 1515, 0,
	0, 0, 1547, 2604, 1177, 0, 1719, 0, 0, 0,
	1566, 1567, 0, 1573, 1575, 0, 1582, 0, 1371, 0,
	0, 0, 0, 0, 1397, 1401, 1398, 1399, 1433, 0,
	1374, 1378, 1380, 1382, 1391, 1448, 0, 0, 500, 0,
	0, 1605, 1830, 0, 1665, 1880, 0, 1738, 1742, 1888,
	1879, 0, 0, 1766, 1768, 1769, 1788, 0, 1736, 0,
	0, 2246, 1909, 2276, 0, 0, 2171, 0, 0, 2174,
	2172, 0, 0, 0, 0, 2183, 2184, 2138, 2140, 2141,
	2142, 2143, 0, 0, 2209, 2202, 2206, 0, 0, 2350,
	0, 2354, 0, 2355, 0, 2582, 0, 0, 2379, 0,
	1792, 1794, 1835, 2444, 2444, 0, 1840, 2242, 0, 1800,
	0, 1795, 1796, 0, 1461, 1462, 0, 2273, 0, 2271,
	2284, 0, 2322, 0, 0, 1736, 0, 0, 0, 2338,
	0, 2369, 0, 1894, 1887, 0, 2226, 2227, 0, 2472,
	0, 2498, 0, 2486, 2488, 2489, 2490, 2491, 2492, 2501,
	2504, 2509, 2512, 0, 2522, 2523, 2524, 2526, 0, 2531,
	0, 0, 0, 2093, 2099, 0, 1943, 0, 1780, 1758,
	0, 1760, 1761, 2116, 0, 2117, 0, 2119, 0, 0,
	1897, 0, 1850, 0, 0, 1855, 0, 1712, 1712, 0,
	0, 1950, 1960, 1663, 1806, 0, 0, 0, 0, 1954,
	1956, 1957, 1955, 0, 1803, 0, 0, 0, 0, 68,
	68, 2126, 2127, 2130, 2001, 2459, 2449, 2082, 0, 0,
	0, 0, 2090, 0, 0, 2084, 2095, 2086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2067, 2066, 68,
	2116, 0, 0, 2565, 2550, 0, 0, 0, 2566, 2567,
	0, 0, 2073, 2483, 0, 0, 0, 0, 2103, 2104,
	2340, 2507, 2110, 2111, 2112, 2113, 68, 2359, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 2016, 0, 2376,
	2648, 1214, 1241, 0, 2611, 0, 2589, 105, 106, 107,
	108, -2, -2, 0, 0, 0, -2, -2, 1235, 1237,
	-2, 1128, 1131, 1132, 1133, 1134, 1135, 1136, -2, -2,
	-2, -2, -2, -2, -2, 1116, 1211, 1241, 1203, 1317,
	1316, 0, 1319, 1316, 1189, 1191, 1192, 0, 0, 1504,
	1505, 0, 0, 0, 1510, 0, 2611, 1418, 0, 0,
	1704, 0, 0, 1579, 1427, 1429, 1392, 0, 1394, 0,
	0, 0, 1396, 0, 0, 1376, 0, 1450, 1454, 0,
	0, 0, 0, 1720, 1587, 1687, 1687, 0, 1589, 1602,
	0, 1605, 0, 1888, 0, 0, 0, 79, 0, 1764,
	0, 1770, 0, 1880, 0, 1765, 0, 2237, 0, 0,
	0, 0, 2131, 0, 1455, 0, 1252, 0, -2, 2166,
	0, 2167, 2177, 2154, 0, 2219, 0, 2236, 0, 2347,
	0, 0, 0, 2584, 0, 0, 0, 2249, 1789, 0,
	1896, 1896, 0, 1864, 0, 1801, 0, 1463, 2364, 0,
	1781, 0, 0, 0, 0, 1780, 0, 0, 0, 2374,
	0, 0, 0, 0, 0, 2500, 2493, 0, 0, 0,
	2546, 2546, 0, 0, 0, 0, 1945, 1788, 1756, 1757,
	1846, 1860, 2118, 2122, 2120, 2121, 2123, 1860, 0, 1860,
	0, 0, 1706, 65, 0, 1707, 0, 1947, 0, 0,
	1807, 1948, 0, 1952, 0, 1464, 1805, 1953, 1962, 1969,
	0, 0, 0, 1934, 0, 1934, 0, 0, 2097, 2088,
	0, 0, 0, 2101, 2092, 0, 2257, 2367, 2071, 2072,
	0, 0, 0, 2556, 0, 0, 0, 0, 0, 1936,
	0, 2115, 2357, 2358, 0, 2302, 2303, 2054, 0, 0,
	2306, 2342, 1216, 1298, 1356, 0, 2603, 0, 2587, 2588,
	-2, -2, -2, 1213, 2626, 0, 0, 1512, 1549, 1513,
	1507, 1508, 1546, 1357, 1421, 0, 0, 1697, 1425, 0,
	1700, 0, 1393, 0, 1404, 1395, 0, 1434, 1449, 0,
	1452, 0, 0, 1467, 0, 139, 0, 1471, 0, 0,
	1492, 1586, 1588, 0, 0, 0, 1682, 0, 1604, 1606,
	1607, 1668, 1668, 1610, 1611, 1668, 1668, 0, 0, 0,
	1621, 1629, 1425, 1600, 79, 0, 1743, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1744, 1892, 0,
	0, 0, 1767, 1788, 1888, 1878, 1880, 1765, 0, 0,
	0, 0, 0, 1903, 0, 2157, 1457, 2178, 2170, 0,
	2175, 2176, 0, 2155, 2225, 2221, 2208, 2210, 0, 2213,
	2214, 2116, 0, 2348, 2572, 0, 0, 2578, 2583, 0,
	0, 2581, 2246, 1909, 1837, 0, 1838, 1854, 1869, 0,
	1834, 0, 2549, 1779, 0, 1780, 0, 1878, 1765, 2323,
	0, 1780, 2377, 1893, 0, 0, 2473, 0, 2482, 0,
	2529, 2546, 2543, 0, 2542, 2571, 0, 0, 0, 1786,
	2444, 0, 2444, 0, 2444, 1856, 1857, 299, 1715, 64,
	1711, 1712, 1951, 1961, 0, 0, 2446, 2129, 2094, 2100,
	1925, 1933, 0, 1927, 0, 2096, 0, 1934, 0, 0,
	2551, 2561, 2561, 2554, 0, 2568, 0, 0, 0, 2497,
	2074, 2298, 0, 0, 0, 2610, 2612, 0, 2590, 2592,
	2594, 2595, 2596, 2597, 2598, 0, 169, 355, 456, 0,
	0, 0, 0, 2621, 1190, 1514, 1412, 0, 0, 0,
	0, 1699, 1705, 1568, 0, 1432, 1447, 1451, 0, 0,
	1477, 0, 1468, 0, 1469, 1465, 1466, 0, 0, 0,
	1474, 1494, 0, 0, 1686, 0, 1684, 0, 0, 0,
	0, 0, 0, 0, 1620, 1603, 0, 1623, 1624, 1625,
	1626, 1627, 0, 1590, 1892, 1877, 1894, 0, 77, 78,
	0, 1771, 79, 1880, 1888, 0, 2243, 0, 0, 2246,
	1905, 0, 1456, 2171, 2173, 2168, 0, 0, 0, 2220,
	2211, 1668, 2215, 2216, 0, 2235, 0, 0, 2585, 2586,
	2238, 0, 0, 1839, 0, 1841, 1865, 1866, 0, 1861,
	1862, 1863, 1842, 0, 0, 0, 0, 1782, 2334, 1780,
	0, 0, 0, 2339, 2370, 2465, 0, 0, 2475, 2505,
	2541, 2544, 2545, 0, 1777, 0, 0, 0, 1896, 0,
	1896, 2242, 1896, 0, 1718, 1715, 1708, 0, 1834, 1964,
	0, 0, 0, 2098, 1929, 0, 2102, 1832, 0, 1832,
	0, 2562, 0, 0, 0, 2055, 2057, 2056, 0, 0,
	0, 2599, 0, 0, 0, 2618, 2638, 2627, -2, 414,
	170, 0, 2638, 2638, 0, 0, 0, 1425, 1437, 0,
	1475, 0, 1479, 0, 1470, 1472, 0, 1473, 0, 0,
	1491, 1677, 1678, 0, 0, 1689, 1679, 0, 0, 0,
	1608, 1609, 1612, 1613, 1614, 1615, 0, 1618, 1619, 1622,
	0, 1630, 1632, 1894, 1723, 0, 0, 1882, 1712, 1712,
	0, 1892, 1888, 79, 1880, 2244, 2245, 2239, 1799, 0,
	0, 2132, 0, 0, 2218, 2222, 2223, 0, 0, 0,
	0, 0, 0, 1853, 1867, 0, 1868, 0, 0, 0,
	0, 0, 0, 2548, 2336, 0, 0, 1780, 0, 2474,
	0, 1772, 0, 1776, 1773, 0, 2116, 0, 2116, 1864,
	1425, 0, 1709, 1718, 1949, 1958, 2445, 1934, 1934, 0,
	2552, 1831, 2559, 0, 2553, 0, 0, 2569, 2570, 2499,
	2613, 2614, 2593, 0, 0, 0, 2623, 0, 0, 2629,
	2630, 2631, 2632, 2633, 2624, 2625, 0, 0, 0, 1696,
	1403, 0, 1453, 1478, 1481, 1482, 0, 0, 0, 1487,
	0, 1480, 0, 0, 1493, 1495, 0, 1680, 0, 1681,
	1690, 0, 0, 0, 0, 1683, 1685, 1616, 1617, 1628,
	0, 1721, 1889, 0, 0, 1881, 0, 65, 65, 0,
	1894, 79, 1892, 1888, 1909, 0, 0, 0, 0, 2212,
	2217, 0, 2575, 2576, 2246, 1895, 1870, 0, 1873, 1874,
	0, 1871, 1833, 1843, 2547, 1780, 0, 2324, 2466, 2476,
	1778, 0, 1847, 1859, 1849, 1869, 2116, 1858, 1710, 1926,
	1928, 1934, 0, 2555, 2563, 2601, 2600, 0, 0, 2635,
	2636, 0, 0, 0, 0, 0, 1436, 1483, 1484, 1485,
	1486, 1488, 0, 0, 0, 0, 1688, 0, 0, 1694,
	0, 1631, 1890, 1891, 1883, 1884, 1885, 1712, 1725, 1892,
	1894, 79, 1894, 0, 1906, 1905, 0, 2224, 2225, 0,
	0, 2240, 1872, 2242, 2242, 2335, 1780, 0, 2116, 1852,
	1930, 2560, 2602, 2634, 2637, 2628, 0, 0, 0, 0,
	0, 0, 1552, 0, -2, 1496, 1497, 0, 0, 0,
	65, 1894, 1724, 1892, 1425, 1904, 0, 1799, 2230, 0,
	0, 0, 1875, 1876, 2337, 0, 1851, 0, 1420, 1416,
	1417, 0, 1531, 0, 0, 1561, 0, 1550, 1691, 1692,
	0, 1695, 1886, 1722, 1894, 1898, 1907, 1909, 0, 2228,
	2231, 2232, 2233, 2234, 0, 0, 0, 1774, 0, 1476,
	0, 0, 0, 1517, 1518, 1519, 1520, 1521, 1522, 1525,
	1553, 1554, 1540, 1561, 1561, 0, 0, 0, 1726, 1894,
	2196, 0, 0, 0, 0, 0, 1489, 0, 1516, 1523,
	1524, 1545, 0, 0, 1540, 1531, 1560, 0, 0, 0,
	1425, 2229, 0, 0, 0, 0, 1530, 1529, 0, 0,
	1532, 0, 1534, 0, 0, 0, 1545, 1557, 0, 0,
	1693, 1899, 2230, 2573, 2574, 1419, 1555, 0, 1542, 1544,
	1533, 1535, 0, 1538, 0, 1539, 1529, 0, 0, 0,
	0, 0, 0, 1536, 1537, 1556, 1558, 0, 2197, 1526,
	1527, 0, 0, 0, 0, 1541, 1543, 1559, 0, 1528,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:545
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:568
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:648
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.list = yyDollar[1].list
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:653
		{
			yyVAL.list = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:659
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:663
		{
			yyVAL.ival = 1
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:664
		{
			yyVAL.ival = 0
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:668
		{
			yyVAL.ival = 1
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:669
		{
			yyVAL.ival = 0
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:673
		{
			yyVAL.bval = true
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:674
		{
			yyVAL.bval = false
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.bval = true
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:679
		{
			yyVAL.bval = false
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:683
		{
			yyVAL.list = yyDollar[2].list
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:684
		{
			yyVAL.list = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:685
		{
			yyVAL.list = nil
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.str = yyDollar[1].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.str = yyDollar[1].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.str = yyDollar[1].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.str = yyDollar[1].str
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.str = yyDollar[1].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:720
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:733
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:748
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:777
		{
			yyVAL.list = yyDollar[2].list
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:778
		{
			yyVAL.list = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:787
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:800
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:806
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:812
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:818
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:824
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:831
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:838
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:844
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:863
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:879
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "abort"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "absent"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "absolute"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "access"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "action"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "add"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "admin"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "after"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "aggregate"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "also"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "alter"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "always"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "asensitive"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "assertion"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "assignment"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "at"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "atomic"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "attach"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "attribute"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "backward"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "before"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "begin"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "breadth"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "by"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "cache"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "call"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "called"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "cascade"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "cascaded"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "catalog"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "chain"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "characteristics"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "checkpoint"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "class"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "close"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "cluster"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "columns"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "comment"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "comments"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "commit"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "committed"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "compression"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "conditional"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "configuration"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "conflict"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "connection"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "constraints"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "content"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "continue"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "conversion"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "copy"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "cost"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "csv"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "cube"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "current"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "cursor"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "cycle"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "data"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "database"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "day"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "deallocate"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "declare"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "defaults"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "deferred"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "definer"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "delete"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "delimiter"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "delimiters"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "depends"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "depth"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "detach"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "dictionary"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "disable"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "discard"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "document"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "domain"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "double"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "drop"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "each"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "empty"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "enable"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "encoding"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "encrypted"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "enum"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "error"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "escape"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "event"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "exclude"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "excluding"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "exclusive"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "execute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "explain"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "expression"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "extension"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "external"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "family"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "filter"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "finalize"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "first"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "following"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "force"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "format"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "forward"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "function"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "functions"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "generated"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "global"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "granted"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "groups"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "handler"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "header"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "hold"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "hour"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "identity"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "if"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "immediate"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "immutable"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "implicit"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "import"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "include"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "including"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "increment"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "indent"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "index"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "indexes"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "inherit"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "inherits"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "inline"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "input"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "insensitive"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "insert"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "instead"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "invoker"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "isolation"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "keep"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "key"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "keys"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "label"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "language"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "large"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "last"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "leakproof"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "level"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "listen"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "load"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "local"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "location"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "lock"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "locked"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "logged"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "mapping"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "match"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "matched"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "materialized"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "maxvalue"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "merge"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "method"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "minute"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "minvalue"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "mode"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "month"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "move"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "name"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "names"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "nested"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "new"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "next"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "nfc"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "nfd"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "nfkc"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "nfkd"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "no"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "normalized"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "nothing"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "notify"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "nowait"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "nulls"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "object"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "of"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "off"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "oids"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "old"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "omit"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "operator"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "option"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "options"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "ordinality"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "others"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "over"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "overriding"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "owned"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "owner"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "parallel"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "parameter"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "parser"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "partial"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "partition"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "passing"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "password"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "path"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "plan"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "plans"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "policy"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "preceding"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "prepare"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "prepared"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "preserve"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "prior"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "privileges"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "procedural"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "procedure"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "procedures"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "program"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "publication"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "quote"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "quotes"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "range"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "read"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "reassign"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "recheck"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "recursive"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "ref"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "referencing"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "refresh"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "reindex"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "relative"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "release"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "rename"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "repeatable"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "replace"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "replica"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "reset"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "restart"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "restrict"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "return"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "returns"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "revoke"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "role"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "rollback"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "rollup"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "routine"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "routines"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "rows"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "rule"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "savepoint"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "scalar"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "schema"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "schemas"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "scroll"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "search"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "second"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "security"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "sequence"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "sequences"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "serializable"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "server"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "session"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "set"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "sets"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "share"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "show"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "simple"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "skip"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "snapshot"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "source"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "sql"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "stable"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "standalone"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "start"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "statement"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "statistics"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "stdin"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "stdout"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "storage"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "stored"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "strict"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "string"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "strip"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "subscription"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "support"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "sysid"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "system"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "tables"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "tablespace"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "target"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "temp"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "template"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "temporary"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "text"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "ties"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "transaction"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "transform"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "trigger"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "truncate"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "trusted"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "type"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "types"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "uescape"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "unbounded"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "uncommitted"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "unconditional"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "unencrypted"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "unknown"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "unlisten"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "unlogged"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "until"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "update"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "vacuum"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "valid"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "validate"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "validator"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "value"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "varying"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "version"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "view"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "views"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "volatile"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "whitespace"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "within"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "without"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "work"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "wrapper"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "write"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "xml"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "year"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "yes"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "zone"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "between"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "bigint"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "bit"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "boolean"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "char"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "character"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "coalesce"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "dec"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "decimal"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "exists"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "extract"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "float"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "greatest"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "grouping"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "inout"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "int"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "integer"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "interval"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "json"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "json_array"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "json_arrayagg"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "json_exists"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "json_object"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "json_objectagg"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "json_query"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "json_scalar"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "json_serialize"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "json_table"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "json_value"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "least"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "merge_action"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "national"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "nchar"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "none"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "normalize"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "nullif"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "numeric"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "out"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "overlay"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "position"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "precision"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "real"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "row"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "setof"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "smallint"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "substring"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "time"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "timestamp"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "treat"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "trim"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "values"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "varchar"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "xmlattributes"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "xmlconcat"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "xmlelement"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "xmlexists"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "xmlforest"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "xmlparse"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "xmlpi"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "xmlroot"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "xmlserialize"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "xmltable"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "authorization"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "binary"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "collation"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "concurrently"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "cross"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "current_schema"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "freeze"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "full"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "ilike"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "inner"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "is"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "isnull"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "join"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "left"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "like"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "natural"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "notnull"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "outer"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "overlaps"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "right"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "similar"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "tablesample"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "verbose"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "all"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "analyse"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "analyze"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "and"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "any"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "as"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "asc"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "asymmetric"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "both"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "case"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "cast"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "check"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "collate"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "column"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "constraint"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "create"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "current_catalog"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "current_date"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "current_role"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "current_time"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "current_timestamp"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "current_user"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "default"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "deferrable"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "desc"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "distinct"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "do"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "else"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "end"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "except"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "false"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "fetch"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "for"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "foreign"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "from"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "grant"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "group"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "having"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "in"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "initially"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "intersect"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "into"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "lateral"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "leading"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "limit"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "localtime"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "localtimestamp"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "not"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "null"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "offset"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "on"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "only"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "or"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "order"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "placing"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "primary"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "references"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "returning"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "select"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "session_user"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "some"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "symmetric"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "system_user"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "table"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "then"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "to"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "trailing"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "true"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "union"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "unique"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "user"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "using"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "variadic"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "when"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "where"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "window"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "with"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "abort"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "absent"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "absolute"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "access"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "action"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "add"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "admin"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "after"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "aggregate"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "all"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "also"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "alter"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "always"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "analyse"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "analyze"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "and"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "any"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "asc"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "asensitive"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "assertion"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "assignment"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "asymmetric"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "at"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "atomic"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "attach"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "attribute"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "authorization"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "backward"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "before"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "begin"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "between"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "bigint"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "binary"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "bit"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "boolean"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "both"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "breadth"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "by"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "cache"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "call"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "called"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "cascade"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "cascaded"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "case"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "cast"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "catalog"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "chain"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "characteristics"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "check"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "checkpoint"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "class"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "close"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "cluster"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "coalesce"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "collate"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "collation"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "column"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "columns"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "comment"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "comments"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "commit"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "committed"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "compression"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "concurrently"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "conditional"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "configuration"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "conflict"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "connection"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "constraint"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "constraints"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "content"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "continue"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "conversion"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "copy"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "cost"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "cross"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "csv"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "cube"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "current"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "current_catalog"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "current_date"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "current_role"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "current_schema"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "current_time"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "current_timestamp"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "current_user"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "cursor"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "cycle"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "data"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "database"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "deallocate"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "dec"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "decimal"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "declare"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "default"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "defaults"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "deferrable"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "deferred"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "definer"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "delete"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "delimiter"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "delimiters"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "depends"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "depth"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "desc"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "detach"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "dictionary"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "disable"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "discard"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "distinct"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "do"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "document"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "domain"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "double"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "drop"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "each"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "else"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "empty"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "enable"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "encoding"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "encrypted"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "end"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "enum"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "error"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "escape"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "event"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "exclude"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "excluding"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "exclusive"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "execute"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "exists"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "explain"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "expression"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "extension"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "external"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "extract"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "false"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "family"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "finalize"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "first"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "float"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "following"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "force"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "foreign"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "format"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "forward"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "freeze"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "full"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "function"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "functions"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "generated"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "global"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "granted"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "greatest"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "grouping"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "groups"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "handler"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "header"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "hold"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "identity"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "if"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "ilike"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "immediate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "immutable"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "implicit"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "import"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "in"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "include"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "including"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "increment"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "indent"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "index"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "indexes"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "inherit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "inherits"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "initially"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "inline"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "inner"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "inout"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "input"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "insensitive"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "insert"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "instead"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "int"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "integer"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "interval"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "invoker"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "is"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "isolation"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "join"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "json"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "json_array"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "json_arrayagg"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "json_exists"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "json_object"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "json_objectagg"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "json_query"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "json_scalar"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "json_serialize"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "json_table"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "json_value"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "keep"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "key"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "keys"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "label"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "language"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "large"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "last"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "lateral"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "leading"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "leakproof"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "least"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "left"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "level"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "like"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "listen"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "load"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "local"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "localtime"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "localtimestamp"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "location"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "lock"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "locked"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "logged"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "mapping"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "match"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "matched"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "materialized"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "maxvalue"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "merge"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "merge_action"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "method"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "minvalue"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "mode"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "move"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "name"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "names"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "national"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "natural"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "nchar"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "nested"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "new"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "next"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "nfc"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "nfd"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "nfkc"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "nfkd"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "no"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "none"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "normalize"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "normalized"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "not"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "nothing"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "notify"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "nowait"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "null"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "nullif"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "nulls"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "numeric"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "object"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "of"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "off"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "oids"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "old"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "omit"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "only"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "operator"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "option"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "options"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "or"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "ordinality"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "others"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "out"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "outer"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "overlay"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "overriding"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "owned"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "owner"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "parallel"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "parameter"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "parser"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "partial"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "partition"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "passing"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "password"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "path"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "placing"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "plan"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "plans"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "policy"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "position"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "preceding"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "prepare"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "prepared"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "preserve"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "primary"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "prior"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "privileges"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "procedural"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "procedure"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "procedures"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "program"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "publication"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "quote"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "quotes"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "range"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "read"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "real"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "reassign"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "recheck"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "recursive"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "ref"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "references"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "referencing"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "refresh"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "reindex"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "relative"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "release"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "rename"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "repeatable"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "replace"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "replica"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "reset"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "restart"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "restrict"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "return"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "returns"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "revoke"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "right"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "role"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "rollback"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "rollup"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "routine"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "routines"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "row"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "rows"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "rule"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "savepoint"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "scalar"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "schema"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "schemas"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "scroll"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "search"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "security"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "select"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "sequence"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "sequences"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "serializable"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "server"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "session"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "session_user"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "set"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "setof"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "sets"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "share"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "show"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "similar"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "simple"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "skip"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "smallint"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "snapshot"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "some"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "source"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "sql"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "stable"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "standalone"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "start"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "statement"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "statistics"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "stdin"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "stdout"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "storage"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "stored"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "strict"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "string"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "strip"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "subscription"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "substring"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "support"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "symmetric"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "sysid"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "system"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "system_user"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "table"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "tables"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "tablesample"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "tablespace"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "target"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "temp"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "template"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "temporary"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "text"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "then"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "ties"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "time"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "timestamp"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "trailing"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "transaction"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "transform"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "treat"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "trigger"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "trim"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "true"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "truncate"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "trusted"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "type"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "types"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "uescape"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "unbounded"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "uncommitted"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "unconditional"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "unencrypted"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "unique"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "unknown"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "unlisten"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "unlogged"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "until"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "update"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "user"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "using"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "vacuum"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "valid"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "validate"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "validator"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "value"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "values"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "varchar"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "variadic"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "verbose"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "version"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "view"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "views"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "volatile"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "when"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "whitespace"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "work"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "wrapper"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "write"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "xml"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "xmlattributes"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "xmlconcat"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "xmlelement"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "xmlexists"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "xmlforest"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "xmlparse"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "xmlpi"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "xmlroot"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "xmlserialize"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "xmltable"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "yes"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "zone"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1899
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1905
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1910
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1915
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1920
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1925
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1930
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1935
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1940
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1945
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1950
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1955
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1960
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1965
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1970
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1975
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1980
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2009
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2014
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2021
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2026
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2033
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2038
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2045
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2050
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2057
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2064
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2071
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2078
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2085
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2089
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2093
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2097
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2101
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2114
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2118
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2122
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2126
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2130
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2134
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2139
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2144
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2149
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2154
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2159
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2164
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2169
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2174
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2183
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2193
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2197
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2202
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2208
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2214
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2221
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2228
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2236
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2253
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2272
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2277
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2279
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2283
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2288
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2293
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2298
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2303
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2308
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2313
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2318
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2323
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2328
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2333
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2338
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2343
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2348
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2354
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2355
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2357
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2366
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2373
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2374
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2376
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2380
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2385
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2389
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2393
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2397
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2403
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2409
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2421
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2425
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2429
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2433
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2437
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2441
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2446
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2449
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2452
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2453
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2454
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2459
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2463
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2473
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2477
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2484
		{
			yyVAL.node = nil
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2488
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2492
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2500
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2505
		{
			yyVAL.list = nil
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2507
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2519
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2543
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2579
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2580
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2588
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2603
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2610
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2616
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1190:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2622
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2630
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2636
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2644
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2648
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2655
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2659
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2663
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2670
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2675
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2676
		{
			yyVAL.node = nil
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2680
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2682
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2690
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2696
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2697
		{
			yyVAL.node = nil
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2706
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2710
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2715
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2717
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2724
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2725
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2727
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2734
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2739
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2745
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2747
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2756
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2760
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2764
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.str = "NFC"
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2779
		{
			yyVAL.str = "NFD"
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2780
		{
			yyVAL.str = "NFKC"
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.str = "NFKD"
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2785
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2786
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2787
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2788
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2789
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.bval = true
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2794
		{
			yyVAL.bval = true
		}
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2795
		{
			yyVAL.bval = false
		}
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2796
		{
			yyVAL.bval = false
		}
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2797
		{
			yyVAL.bval = false
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2802
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2806
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2815
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2820
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2821
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2822
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2823
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2824
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2828
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2829
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2832
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2835
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2839
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2843
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2850
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2854
		{
			yyVAL.list = nil
		}
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2860
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2866
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2877
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2881
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2885
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2889
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2893
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2897
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2901
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2905
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2909
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2913
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2917
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2923
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2927
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2933
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2937
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2943
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2951
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2959
		{
			yyVAL.str = "varchar"
		}
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2963
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2971
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2979
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2989
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3000
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3014
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3026
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3038
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3048
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3058
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3068
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3079
		{
			yyVAL.ival = 1
		}
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3080
		{
			yyVAL.ival = 0
		}
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3081
		{
			yyVAL.ival = 0
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3084
		{
			yyVAL.ival = 1
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3085
		{
			yyVAL.ival = 0
		}
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3089
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3099
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3106
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3110
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3117
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3121
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3126
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3127
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3130
		{
			yyVAL.str = "+"
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3131
		{
			yyVAL.str = "-"
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3132
		{
			yyVAL.str = "*"
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3133
		{
			yyVAL.str = "/"
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3134
		{
			yyVAL.str = "%"
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3135
		{
			yyVAL.str = "^"
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3136
		{
			yyVAL.str = "<"
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3137
		{
			yyVAL.str = ">"
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3138
		{
			yyVAL.str = "="
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3139
		{
			yyVAL.str = "<="
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3140
		{
			yyVAL.str = ">="
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3141
		{
			yyVAL.str = "<>"
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3145
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3149
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3158
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3159
		{
			yyVAL.list = nil
		}
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3164
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3168
		{
			yyVAL.list = nil
		}
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3173
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3177
		{
			yyVAL.node = nil
		}
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3181
		{
			yyVAL.ival = 0
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3182
		{
			yyVAL.ival = 0
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3186
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3191
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3206
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3207
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3211
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3216
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3217
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3226
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3227
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3236
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3238
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3245
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3257
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3269
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3275
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3282
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3295
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3314
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3315
		{
			yyVAL.list = nil
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3319
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3320
		{
			yyVAL.list = nil
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3325
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3329
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3337
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3349
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3350
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3351
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3356
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3357
		{
			yyVAL.list = nil
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3362
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3363
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3364
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1356:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3375
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1357:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3394
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3412
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3422
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3433
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3434
		{
			yyVAL.list = nil
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3438
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3439
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3448
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3453
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3458
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3469
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3470
		{
			yyVAL.list = nil
		}
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3474
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3475
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3484
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3492
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3503
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3514
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3518
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3524
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3532
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3541
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3549
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3558
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3566
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3578
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3584
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3591
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3597
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3603
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3617
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3623
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3640
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3644
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3653
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3679
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3705
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3713
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3723
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3724
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3731
		{
			yyVAL.ival = 1
		}
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3732
		{
			yyVAL.ival = 0
		}
	case 1403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3742
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3753
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3764
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3768
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3772
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3779
		{
			yyVAL.with = nil
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3784
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3788
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1412:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3796
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3824
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3825
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3826
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3831
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3837
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.node = nil
		}
	case 1419:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3850
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1420:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3859
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3867
		{
			yyVAL.node = nil
		}
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3878
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1423:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3886
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3900
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3901
		{
			yyVAL.node = nil
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3909
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3911
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3915
		{
			yyVAL.node = nil
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3919
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3927
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.alias = nil
		}
	case 1432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3933
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3938
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3942
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3947
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3955
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3959
		{
			yyVAL.alias = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3967
		{
			yyVAL.ival = 1
		}
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3968
		{
			yyVAL.ival = 0
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3972
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3973
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3977
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3978
		{
			yyVAL.list = nil
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3991
		{
			yyVAL.into = nil
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4002
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4011
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4021
		{
			yyVAL.ival = 1
		}
	case 1449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4022
		{
			yyVAL.ival = 0
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4028
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4032
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4039
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4048
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4049
		{
			yyVAL.list = nil
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4059
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4063
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4075
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4088
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4089
		{
			yyVAL.list = nil
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4095
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4099
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4108
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4119
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4124
		{
			yyVAL.node = nil
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4129
		{
			yyVAL.str = "BY REF"
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4130
		{
			yyVAL.str = "BY VALUE"
		}
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4136
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4140
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4148
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4156
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4160
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4168
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4173
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1475:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4182
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1476:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4190
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4205
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4214
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4219
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4224
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4234
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4238
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4251
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4255
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4259
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4263
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1489:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4276
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4300
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4311
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4312
		{
			yyVAL.node = nil
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4317
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4318
		{
			yyVAL.node = nil
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4322
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4323
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4328
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4334
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4335
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4341
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4345
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4357
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4361
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4368
		{
			yyVAL.bval = false
		}
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4369
		{
			yyVAL.bval = true
		}
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4370
		{
			yyVAL.bval = false
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.bval = false
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4375
		{
			yyVAL.bval = true
		}
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4376
		{
			yyVAL.bval = true
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4381
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4382
		{
			yyVAL.list = nil
		}
	case 1512:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4393
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4408
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4421
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4428
		{
			yyVAL.node = nil
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4434
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4442
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4453
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4454
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4455
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4456
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4458
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4459
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4460
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4465
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4469
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4473
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4477
		{
			yyVAL.node = nil
		}
	case 1530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4482
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4483
		{
			yyVAL.node = nil
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4488
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4489
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4490
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4491
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4492
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4493
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4494
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4495
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4496
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4501
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4502
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4503
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4504
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4505
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4511
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4531
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4541
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4542
		{
			yyVAL.node = nil
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4547
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4548
		{
			yyVAL.node = nil
		}
	case 1552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4554
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4558
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4567
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4576
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1556:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4590
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4604
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1558:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4615
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1559:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4624
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4635
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4636
		{
			yyVAL.node = nil
		}
	case 1562:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4652
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4664
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4668
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4677
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4683
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4690
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1568:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4697
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4705
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4714
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4715
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4720
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4724
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4732
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4744
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4757
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4761
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4772
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4778
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4798
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4804
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4805
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1583:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4815
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4827
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4831
		{
			yyVAL.list = nil
		}
	case 1586:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4846
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4867
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1589:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4878
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1590:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4902
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4938
		{
			yyVAL.ival = 1
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4939
		{
			yyVAL.ival = 0
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4943
		{
			yyVAL.ival = 1
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4944
		{
			yyVAL.ival = 0
		}
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4948
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4949
		{
			yyVAL.str = ""
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4950
		{
			yyVAL.str = ""
		}
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4955
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4958
		{
			yyVAL.node = nil
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4963
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4966
		{
			yyVAL.node = nil
		}
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4970
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4971
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4976
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4984
		{
			yyVAL.list = nil
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4991
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4995
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4999
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5003
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5007
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5011
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5015
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5019
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5023
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5027
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5031
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5035
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5039
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5043
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5047
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5059
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5072
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5073
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5075
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5076
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5077
		{
			yyVAL.node = nil
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5086
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5092
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5096
		{
			yyVAL.str = "true"
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5097
		{
			yyVAL.str = "false"
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5098
		{
			yyVAL.str = "on"
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5099
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5103
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5106
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.node = nil
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5120
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5121
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5122
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5123
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5124
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5125
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5126
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5127
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5131
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5132
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5133
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5137
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5138
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5139
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5140
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5141
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5146
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5151
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5158
		{
			yyVAL.bval = true
		}
	case 1662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5159
		{
			yyVAL.bval = false
		}
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5163
		{
			yyVAL.ival = 1
		}
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5164
		{
			yyVAL.ival = 0
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5180
		{
			yyVAL.node = nil
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5182
		{
			yyVAL.node = nil
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5190
		{
			yyVAL.ival = 1
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5191
		{
			yyVAL.ival = 0
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5195
		{
			yyVAL.ival = 1
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5196
		{
			yyVAL.ival = 0
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5200
		{
			yyVAL.ival = 1
		}
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5201
		{
			yyVAL.ival = 0
		}
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5205
		{
			yyVAL.ival = 1
		}
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5206
		{
			yyVAL.ival = 0
		}
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5215
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5221
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5227
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5233
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5239
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5247
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5248
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5252
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5253
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5257
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5258
		{
			yyVAL.node = nil
		}
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5263
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5278
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5287
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5294
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5301
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1693:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5314
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5327
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5336
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1696:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5351
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5361
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5369
		{
			yyVAL.onconflict = nil
		}
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5380
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5389
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5396
		{
			yyVAL.node = nil
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5407
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5411
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5418
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5422
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5429
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5447
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1710:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5458
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5472
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5473
		{
			yyVAL.list = nil
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5477
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5478
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5483
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5484
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5485
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5490
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5494
		{
			yyVAL.list = nil
		}
	case 1721:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5515
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1722:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5531
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1723:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5548
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1724:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:5564
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1725:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5581
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1726:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5598
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5619
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5620
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5621
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5622
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5623
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5627
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.list = nil
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5633
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5638
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5645
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5646
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5647
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5652
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5659
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5663
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5667
		{
			yyVAL.ival = 0
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5673
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5676
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5677
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5678
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5679
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5681
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5682
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5687
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5688
		{
			yyVAL.str = "default"
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5692
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.str = ""
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5697
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5698
		{
			yyVAL.str = "default"
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5702
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5703
		{
			yyVAL.str = ""
		}
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5708
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.list = nil
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5714
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5720
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5727
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5728
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5733
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5739
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1772:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5750
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1773:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5779
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1774:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5788
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5798
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5807
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5814
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5818
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5826
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5827
		{
			yyVAL.list = nil
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5832
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5836
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5844
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5850
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5855
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1786:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5860
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5872
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5877
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5884
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5889
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5890
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5892
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5905
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5910
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5915
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5920
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.bval = true
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5929
		{
			yyVAL.bval = false
		}
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5930
		{
			yyVAL.bval = true
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5934
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5935
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5940
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5942
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5951
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5955
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5965
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5971
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5972
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5977
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5981
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5985
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5989
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5993
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5997
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6001
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6005
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6009
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6013
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6017
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6021
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6025
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6029
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6033
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6037
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6043
		{
		}
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6044
		{
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6048
		{
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6049
		{
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6050
		{
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6055
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6062
		{
			yyVAL.bval = false
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6066
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6067
		{
			yyVAL.list = nil
		}
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6072
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6080
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6089
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6095
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6101
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1841:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6107
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6124
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1843:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6131
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6141
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6146
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6151
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1847:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6159
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6170
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1849:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6181
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6191
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1851:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6202
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1852:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6223
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.bval = true
		}
	case 1854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6238
		{
			yyVAL.bval = false
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6244
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6250
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6258
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1858:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6263
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6275
		{
			yyVAL.list = nil
		}
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6282
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6286
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6290
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6294
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6301
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6311
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6321
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6328
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6335
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6350
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6363
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6370
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6377
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6384
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6391
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6398
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6407
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6408
		{
			yyVAL.list = nil
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6412
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6413
		{
			yyVAL.partspec = nil
		}
	case 1881:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6418
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6426
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6431
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6439
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6446
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6453
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6462
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6463
		{
			yyVAL.str = ""
		}
	case 1889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6467
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6468
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6470
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6474
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1894:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6475
		{
			yyVAL.str = ""
		}
	case 1895:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6479
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6480
		{
			yyVAL.str = ""
		}
	case 1897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6484
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1898:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6497
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1899:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:6512
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6528
		{
			yyVAL.bval = true
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6529
		{
			yyVAL.bval = false
		}
	case 1902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6533
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6534
		{
			yyVAL.str = "btree"
		}
	case 1904:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6538
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6539
		{
			yyVAL.list = nil
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6544
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6549
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6557
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6558
		{
			yyVAL.list = nil
		}
	case 1910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6570
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1911:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6576
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1912:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6583
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1913:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6589
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1914:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6596
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1915:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6605
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1916:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6611
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1917:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6618
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1918:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6624
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1919:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6631
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1920:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6637
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1921:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6644
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1922:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6650
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6657
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1924:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6666
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1925:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6676
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1926:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6683
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1927:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6691
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1928:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6698
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1929:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6706
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1930:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6713
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6724
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1932:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6729
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6737
		{
			yyVAL.bval = true
		}
	case 1934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6738
		{
			yyVAL.bval = false
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6743
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6748
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6756
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6787
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6810
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6835
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6842
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6849
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1945:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6856
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1946:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6863
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1947:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6868
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1948:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6873
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1949:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6878
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1950:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6883
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1951:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6888
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1952:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6895
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6900
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1954:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6907
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1955:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6912
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1956:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6917
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1957:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6922
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1958:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6927
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1959:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6937
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1960:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6942
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1961:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6949
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1962:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6956
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1963:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6964
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1964:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6975
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1965:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6985
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6990
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1967:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6995
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7006
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1969:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7011
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1970:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7019
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7027
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7032
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7037
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7042
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7047
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1976:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7052
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1977:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7057
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1978:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7062
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7067
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7072
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7077
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7082
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7087
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7092
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1985:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7097
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7102
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7107
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7112
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7117
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7122
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7128
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7133
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1993:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7140
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7145
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7150
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7155
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7160
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1998:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7165
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1999:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7170
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2000:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7175
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2001:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7180
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7184
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2003:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7192
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2004:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7200
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2005:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7207
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7218
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7227
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7228
		{
			yyVAL.node = nil
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7232
		{
		}
	case 2010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7233
		{
		}
	case 2011:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7244
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2012:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7257
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2013:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7270
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2014:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7283
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2015:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7296
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2016:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7311
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2017:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7326
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2018:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7339
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2019:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7352
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2020:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7365
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2021:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7378
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2022:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7391
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7407
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7413
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7419
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7428
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2027:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7432
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7435
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7439
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7441
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7445
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7449
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7456
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7460
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7466
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7467
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7471
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7476
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7477
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7478
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7479
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7480
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7481
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7482
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7483
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7484
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7485
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7486
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7487
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7488
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7501
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7506
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7520
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7532
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2055:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7537
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2056:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7539
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2057:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7541
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7545
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7558
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7560
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2061:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7564
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2062:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7575
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2063:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7586
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2064:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7597
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2065:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7608
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2066:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7619
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2067:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7631
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2068:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7642
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7653
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2070:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7664
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2071:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7675
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2072:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7692
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2073:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7709
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2074:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7721
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2075:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7733
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2076:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7744
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7755
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2078:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7766
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2079:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7777
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2080:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7788
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2081:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7799
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2082:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7810
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2083:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7821
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2084:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7832
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2085:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7843
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2086:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7854
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2087:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7865
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2088:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7876
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7887
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2090:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7898
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2091:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7909
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2092:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7920
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2093:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7931
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2094:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7944
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2095:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7957
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2096:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7970
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2097:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7983
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2098:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7996
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2099:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8009
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2100:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8021
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8033
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8046
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2103:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8059
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8071
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8083
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8094
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8105
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8116
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8127
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2110:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8138
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2111:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8149
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2112:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8160
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2113:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8171
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8182
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2115:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8193
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8219
		{
			yyVAL.ival = 0
		}
	case 2117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8221
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8235
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8236
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8237
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8238
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8239
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8240
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8244
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8249
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8254
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8262
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8266
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8270
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8274
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2131:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8288
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2132:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8302
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2133:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8318
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2134:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8333
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8348
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8349
		{
			yyVAL.list = nil
		}
	case 2137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8354
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8358
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8366
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8370
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8375
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8383
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8392
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8401
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8410
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8419
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8430
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8431
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8432
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8434
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8438
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8442
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8444
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8454
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8466
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8467
		{
			yyVAL.list = nil
		}
	case 2158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8472
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8478
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8486
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8490
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8494
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8498
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8502
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8509
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8515
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8525
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8531
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8539
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8543
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8555
		{
			yyVAL.node = nil
		}
	case 2172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8562
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8571
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8581
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8593
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8597
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8601
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8605
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8609
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8613
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8617
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8621
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8625
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8629
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8633
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8637
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8641
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8645
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8649
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8653
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8657
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8664
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8668
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2196:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8684
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2197:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8716
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8747
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8748
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8749
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8754
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8756
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8796
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8803
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8810
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8817
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8824
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8834
		{
			yyVAL.list = nil
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8838
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8843
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8851
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8862
		{
			yyVAL.bval = true
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8863
		{
			yyVAL.bval = false
		}
	case 2215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8867
		{
			yyVAL.bval = true
		}
	case 2216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8868
		{
			yyVAL.bval = false
		}
	case 2217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8872
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8877
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8881
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8893
		{
			yyVAL.bval = true
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8894
		{
			yyVAL.bval = false
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8898
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8899
		{
			yyVAL.node = nil
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8908
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8913
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8917
		{
			yyVAL.list = nil
		}
	case 2231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8922
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8925
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8926
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8927
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8931
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8932
		{
			yyVAL.rangevar = nil
		}
	case 2237:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8945
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2238:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8961
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2239:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8977
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2240:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8993
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9010
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9011
		{
			yyVAL.list = nil
		}
	case 2243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9015
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9016
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9017
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9018
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9029
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9036
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9043
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9050
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9066
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9084
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9090
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9095
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9100
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9106
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9114
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9122
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9137
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9153
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9159
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9164
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9169
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9175
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9180
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9185
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9190
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9195
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9200
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9205
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9210
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9215
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9226
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9231
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9245
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9250
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9257
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9258
		{
			yyVAL.list = nil
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9261
		{
		}
	case 2280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9262
		{
		}
	case 2281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9273
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9277
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9290
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2284:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9295
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9303
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9312
		{
			yyVAL.list = nil
		}
	case 2287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9319
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9323
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9327
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9332
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9345
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9353
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9362
		{
			yyVAL.list = nil
		}
	case 2294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9369
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9382
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9386
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9390
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2298:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9394
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9401
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9405
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9409
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9413
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2303:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9422
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9431
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9435
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2306:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9439
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9444
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9449
		{
			yyVAL.ival = 1
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9450
		{
			yyVAL.ival = 0
		}
	case 2310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9460
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9466
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9470
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9476
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9477
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9478
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9479
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9483
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9484
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9488
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9489
		{
			yyVAL.list = nil
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9493
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9494
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2323:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9511
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2324:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9516
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9522
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9526
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9530
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9536
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9537
		{
			yyVAL.str = ""
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9541
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9542
		{
			yyVAL.str = ""
		}
	case 2332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9546
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9547
		{
			yyVAL.str = ""
		}
	case 2334:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9560
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2335:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9566
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2336:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9572
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2337:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9578
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2338:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9590
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2339:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9594
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2340:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9600
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9606
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2342:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9610
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9616
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9617
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9622
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9628
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9634
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9640
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9654
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9658
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9666
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9673
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9680
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9684
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9692
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9699
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2357:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9707
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2358:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9716
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2359:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9725
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9733
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9749
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9751
		{
			yyVAL.list = nil
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9756
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9758
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9763
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9772
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9777
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9788
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2369:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9808
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2370:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9816
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9827
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9833
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9834
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9839
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.bval = true
		}
	case 2376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9852
		{
			yyVAL.bval = false
		}
	case 2377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9853
		{
			yyVAL.bval = true
		}
	case 2378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9858
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9867
		{
			yyVAL.list = nil
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9878
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9880
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9884
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9889
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9894
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9899
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9907
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9912
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9917
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9921
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9932
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9940
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9944
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9948
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9952
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9959
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9963
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9970
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9976
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9983
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9984
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9988
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9989
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9990
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9991
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9992
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9993
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9994
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9995
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9996
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10000
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10001
		{
			yyVAL.str = "default"
		}
	case 2416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10002
		{
			yyVAL.str = ""
		}
	case 2417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10006
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10007
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10011
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10012
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10013
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10014
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10018
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10019
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10024
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10030
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10035
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10043
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10047
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10051
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10055
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10059
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10065
		{
			yyVAL.str = "read uncommitted"
		}
	case 2434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10066
		{
			yyVAL.str = "read committed"
		}
	case 2435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10067
		{
			yyVAL.str = "repeatable read"
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10068
		{
			yyVAL.str = "serializable"
		}
	case 2437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10072
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10073
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10074
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10077
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10078
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10079
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10083
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10084
		{
			yyVAL.list = nil
		}
	case 2445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10088
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10089
		{
			yyVAL.node = nil
		}
	case 2447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10093
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10098
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10103
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10111
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10115
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10121
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10127
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10133
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10134
		{
			yyVAL.str = ""
		}
	case 2456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10138
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10139
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10140
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10141
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10145
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10150
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10155
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10162
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10163
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2465:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10174
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2466:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10178
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10184
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10190
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10191
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10192
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10193
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10198
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10203
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10211
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10218
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10223
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10237
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10243
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10244
		{
			yyVAL.rolespec = nil
		}
	case 2480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10249
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10253
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2482:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10268
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10276
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10283
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10295
		{
			yyVAL.bval = true
		}
	case 2486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10299
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10300
		{
			yyVAL.str = "all"
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10304
		{
			yyVAL.str = "all"
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10305
		{
			yyVAL.str = "select"
		}
	case 2490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10306
		{
			yyVAL.str = "insert"
		}
	case 2491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10307
		{
			yyVAL.str = "update"
		}
	case 2492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10308
		{
			yyVAL.str = "delete"
		}
	case 2493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10312
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10313
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10321
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10322
		{
			yyVAL.list = nil
		}
	case 2497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10326
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10327
		{
			yyVAL.node = nil
		}
	case 2499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10331
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10332
		{
			yyVAL.node = nil
		}
	case 2501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10343
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10349
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10350
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10361
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2505:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10365
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2506:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10372
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10376
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10382
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10383
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10387
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10388
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10389
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10400
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2514:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10404
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10408
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10415
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10419
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10423
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10427
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10433
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10434
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10439
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10444
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10448
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10452
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10464
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10470
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10475
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10481
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.node = nil
		}
	case 2531:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10493
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10500
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10504
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10508
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2535:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10512
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2536:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10516
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2537:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10520
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10524
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10530
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10536
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2541:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10549
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2542:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10553
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2543:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10557
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10563
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10564
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10565
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2547:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10577
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10583
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10584
		{
			yyVAL.list = nil
		}
	case 2550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10588
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10589
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10594
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10600
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10604
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10608
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10612
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10618
		{
			yyVAL.bval = true
		}
	case 2558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10619
		{
			yyVAL.bval = false
		}
	case 2559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10623
		{
			yyVAL.list = nil
		}
	case 2560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10624
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10625
		{
			yyVAL.list = nil
		}
	case 2562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10629
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10630
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10641
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10654
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10658
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10664
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10665
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10670
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10676
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2571:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10691
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2572:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10704
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2573:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10711
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2574:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10717
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10723
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2576:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10729
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10744
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2578:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10750
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10756
		{
			yyVAL.bval = true
		}
	case 2580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10757
		{
			yyVAL.bval = false
		}
	case 2581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10762
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10763
		{
			yyVAL.list = nil
		}
	case 2583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10767
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10768
		{
			yyVAL.list = nil
		}
	case 2585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10772
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10773
		{
			yyVAL.list = nil
		}
	case 2587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10776
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10777
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10778
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10783
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10790
		{
			yyVAL.groupClause = nil
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10796
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10797
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10801
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10802
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10803
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10804
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10805
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10810
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10817
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10824
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10831
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10840
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10841
		{
			yyVAL.node = nil
		}
	case 2605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10848
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10852
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10853
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10858
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10865
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10876
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10878
		{
			yyVAL.list = nil
		}
	case 2612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10883
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10888
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10896
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10905
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10907
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10914
		{
			yyVAL.windef = nil
		}
	case 2618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10919
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10933
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10934
		{
			yyVAL.str = ""
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10938
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10939
		{
			yyVAL.list = nil
		}
	case 2623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10944
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10951
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10958
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10965
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10976
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10990
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11025
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11033
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11041
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11049
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11057
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11067
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11068
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11069
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11070
		{
			yyVAL.ival = 0
		}
	case 2638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.ival = 0
		}
	case 2639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11080
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11085
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11090
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11094
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11105
		{
			yyVAL.selectLimit = nil
		}
	case 2645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11110
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11118
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11125
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11133
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11141
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11149
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11160
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11163
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11167
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11169
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11176
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11191
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11195
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11202
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11203
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.ival = 0
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11209
		{
			yyVAL.ival = 0
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11213
		{
			yyVAL.ival = 0
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11214
		{
			yyVAL.ival = 0
		}
	}
	goto yystack /* stack new state and value */
}
