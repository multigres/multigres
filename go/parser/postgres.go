// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:14211

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 103,
	540, 103,
	-2, 1609,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 106,
	1, 1523,
	26, 1523,
	36, 1523,
	74, 1523,
	100, 1523,
	532, 1523,
	540, 1523,
	-2, 1527,
	-1, 109,
	67, 1939,
	84, 1939,
	85, 2621,
	236, 2806,
	307, 2106,
	419, 1939,
	480, 1939,
	-2, 116,
	-1, 148,
	68, 1526,
	69, 1526,
	130, 1526,
	269, 1526,
	280, 1526,
	316, 1526,
	470, 1526,
	509, 1526,
	-2, 1528,
	-1, 160,
	1, 103,
	540, 103,
	-2, 1609,
	-1, 202,
	85, 2620,
	-2, 1938,
	-1, 279,
	61, 323,
	64, 323,
	527, 323,
	533, 323,
	-2, 2662,
	-1, 745,
	1, 326,
	540, 326,
	-2, 3133,
	-1, 746,
	1, 367,
	540, 367,
	-2, 3133,
	-1, 747,
	1, 258,
	540, 258,
	-2, 3133,
	-1, 748,
	1, 300,
	540, 300,
	-2, 3133,
	-1, 753,
	1, 262,
	540, 262,
	-2, 3133,
	-1, 754,
	1, 179,
	540, 179,
	-2, 3133,
	-1, 788,
	7, 1439,
	16, 1439,
	17, 1439,
	531, 1439,
	-2, 122,
	-1, 789,
	7, 1440,
	16, 1440,
	17, 1440,
	531, 1440,
	-2, 123,
	-1, 814,
	68, 1512,
	69, 1512,
	130, 1512,
	280, 1512,
	-2, 1529,
	-1, 820,
	68, 1513,
	69, 1513,
	130, 1513,
	280, 1513,
	-2, 1532,
	-1, 877,
	84, 1939,
	480, 1939,
	-2, 115,
	-1, 879,
	209, 104,
	-2, 2627,
	-1, 964,
	531, 1441,
	-2, 3085,
	-1, 983,
	93, 2942,
	398, 2142,
	401, 2942,
	-2, 2035,
	-1, 987,
	93, 2942,
	398, 2142,
	401, 2942,
	-2, 2035,
	-1, 1138,
	74, 132,
	-2, 137,
	-1, 1222,
	68, 1512,
	69, 1512,
	130, 1512,
	280, 1512,
	-2, 1533,
	-1, 1276,
	7, 1230,
	531, 1230,
	-2, 504,
	-1, 1291,
	7, 555,
	16, 555,
	17, 555,
	531, 555,
	-2, 1278,
	-1, 1313,
	7, 1484,
	-2, 505,
	-1, 1321,
	7, 1454,
	-2, 488,
	-1, 1322,
	7, 1489,
	531, 1489,
	-2, 489,
	-1, 1323,
	7, 1461,
	-2, 490,
	-1, 1324,
	7, 1489,
	531, 1489,
	-2, 491,
	-1, 1325,
	7, 1489,
	531, 1489,
	-2, 492,
	-1, 1326,
	7, 1448,
	-2, 494,
	-1, 1327,
	7, 1448,
	-2, 495,
	-1, 1328,
	7, 1491,
	-2, 498,
	-1, 1329,
	7, 1451,
	-2, 502,
	-1, 1330,
	7, 1452,
	-2, 503,
	-1, 1332,
	7, 1489,
	531, 1489,
	-2, 519,
	-1, 1333,
	7, 1448,
	-2, 523,
	-1, 1334,
	7, 1455,
	-2, 528,
	-1, 1335,
	7, 1453,
	-2, 531,
	-1, 1336,
	7, 1487,
	-2, 533,
	-1, 1337,
	7, 1487,
	-2, 534,
	-1, 1338,
	7, 1472,
	531, 1472,
	-2, 538,
	-1, 1488,
	6, 2035,
	12, 2035,
	534, 2035,
	535, 2035,
	-2, 2028,
	-1, 1536,
	531, 1365,
	-2, 3087,
	-1, 1808,
	16, 1443,
	17, 1443,
	-2, 1364,
	-1, 1920,
	127, 2904,
	411, 2904,
	-2, 1103,
	-1, 1954,
	21, 1402,
	432, 1402,
	510, 1402,
	-2, 865,
	-1, 1956,
	21, 1404,
	432, 1404,
	510, 1404,
	-2, 812,
	-1, 1961,
	1, 681,
	26, 681,
	36, 681,
	64, 681,
	65, 681,
	68, 681,
	69, 681,
	71, 681,
	72, 681,
	73, 681,
	74, 681,
	100, 681,
	130, 681,
	269, 681,
	280, 681,
	316, 681,
	470, 681,
	484, 681,
	509, 681,
	515, 681,
	532, 681,
	540, 681,
	541, 681,
	-2, 1518,
	-1, 1966,
	21, 1496,
	432, 1496,
	510, 1496,
	-2, 1492,
	-1, 2423,
	68, 1527,
	69, 1527,
	130, 1527,
	269, 1527,
	280, 1527,
	316, 1527,
	470, 1527,
	509, 1527,
	-2, 1199,
	-1, 2432,
	7, 1365,
	531, 1365,
	-2, 1248,
	-1, 2561,
	117, 116,
	307, 2106,
	460, 116,
	-2, 1939,
	-1, 2611,
	536, 137,
	-2, 2492,
	-1, 2639,
	531, 2108,
	-2, 247,
	-1, 2715,
	40, 1448,
	134, 1448,
	509, 1448,
	527, 1448,
	529, 1448,
	532, 1448,
	541, 1448,
	-2, 1443,
	-1, 3006,
	36, 2909,
	66, 2909,
	-2, 529,
	-1, 3007,
	36, 2910,
	66, 2910,
	-2, 402,
	-1, 3013,
	127, 2907,
	411, 2907,
	-2, 1212,
	-1, 3014,
	127, 2908,
	411, 2908,
	-2, 1213,
	-1, 3030,
	1, 447,
	26, 447,
	36, 447,
	64, 447,
	65, 447,
	68, 447,
	69, 447,
	71, 447,
	72, 447,
	74, 447,
	100, 447,
	130, 447,
	269, 447,
	280, 447,
	316, 447,
	470, 447,
	484, 447,
	509, 447,
	515, 447,
	529, 447,
	532, 447,
	533, 447,
	540, 447,
	-2, 146,
	-1, 3031,
	1, 445,
	26, 445,
	36, 445,
	64, 445,
	65, 445,
	68, 445,
	69, 445,
	71, 445,
	72, 445,
	74, 445,
	100, 445,
	130, 445,
	269, 445,
	280, 445,
	316, 445,
	470, 445,
	484, 445,
	509, 445,
	515, 445,
	529, 445,
	532, 445,
	533, 445,
	540, 445,
	-2, 146,
	-1, 3034,
	1, 464,
	26, 464,
	36, 464,
	64, 464,
	65, 464,
	68, 464,
	69, 464,
	71, 464,
	72, 464,
	74, 464,
	100, 464,
	130, 464,
	269, 464,
	280, 464,
	316, 464,
	470, 464,
	484, 464,
	509, 464,
	515, 464,
	529, 464,
	532, 464,
	533, 464,
	540, 464,
	-2, 146,
	-1, 3048,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1116,
	-1, 3049,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1117,
	-1, 3050,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1118,
	-1, 3051,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1119,
	-1, 3052,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1120,
	-1, 3053,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1121,
	-1, 3057,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1128,
	-1, 3063,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1132,
	-1, 3108,
	363, 1392,
	-2, 1395,
	-1, 3187,
	68, 1527,
	69, 1527,
	130, 1527,
	269, 1527,
	280, 1527,
	316, 1527,
	470, 1527,
	509, 1527,
	-2, 1199,
	-1, 3308,
	209, 104,
	-2, 2627,
	-1, 3381,
	536, 138,
	-2, 2492,
	-1, 3484,
	507, 2567,
	-2, 2560,
	-1, 3740,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1130,
	-1, 3741,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1134,
	-1, 3747,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1136,
	-1, 3782,
	363, 1391,
	-2, 1394,
	-1, 3920,
	75, 1631,
	76, 1631,
	77, 1631,
	78, 1631,
	79, 1631,
	81, 1631,
	82, 1631,
	-2, 1527,
	-1, 3934,
	531, 1365,
	-2, 138,
	-1, 3940,
	150, 1871,
	-2, 1806,
	-1, 4120,
	6, 2035,
	12, 2035,
	534, 2035,
	535, 2035,
	-2, 2009,
	-1, 4319,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1129,
	-1, 4322,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1138,
	-1, 4325,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1133,
	-1, 4330,
	52, 0,
	53, 0,
	54, 0,
	-2, 1151,
	-1, 4337,
	21, 1401,
	432, 1401,
	510, 1401,
	-2, 1493,
	-1, 4341,
	363, 1393,
	-2, 1396,
	-1, 4372,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1181,
	-1, 4373,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1182,
	-1, 4374,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1183,
	-1, 4375,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1184,
	-1, 4376,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1185,
	-1, 4377,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1186,
	-1, 4775,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1131,
	-1, 4776,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1135,
	-1, 4780,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1137,
	-1, 4781,
	52, 0,
	53, 0,
	54, 0,
	-2, 1152,
	-1, 4784,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1153,
	-1, 4785,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1155,
	-1, 4907,
	540, 103,
	-2, 1609,
	-1, 5060,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1139,
	-1, 5061,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1154,
	-1, 5062,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 5070,
	52, 0,
	-2, 1189,
	-1, 5319,
	52, 0,
	-2, 1190,
	-1, 5499,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 487,
	-1, 5828,
	7, 1756,
	-2, 324,
	-1, 5854,
	7, 1484,
	-2, 505,
}

const yyPrivate = 57344

const yyLast = 106590

var yyAct = [...]int16{
	1255, 5825, 5334, 5876, 5509, 815, 3727, 5089, 4889, 5877,
	3145, 5892, 5335, 4562, 1241, 3210, 5689, 5405, 3803, 3263,
	4842, 928, 5324, 5826, 2418, 5425, 5353, 3213, 3947, 4104,
	4980, 5576, 2947, 4897, 5498, 5564, 2892, 5302, 5221, 3861,
	5559, 2512, 4673, 5677, 5454, 3249, 5354, 1674, 3629, 5722,
	5629, 3259, 3725, 4841, 5645, 5303, 4471, 3791, 2534, 5300,
	5426, 4480, 1476, 5151, 5427, 3022, 5432, 3622, 5128, 4036,
	3317, 3963, 1394, 5087, 1789, 4245, 5477, 1701, 4714, 5244,
	4979, 4090, 5497, 3226, 5199, 3447, 1968, 4467, 4537, 1166,
	4904, 3929, 1433, 105, 4833, 3944, 3404, 2650, 3170, 4863,
	4674, 5217, 4039, 4679, 2910, 3270, 1726, 1817, 1786, 4013,
	4683, 4612, 1704, 5252, 282, 282, 1534, 64, 3964, 4566,
	686, 691, 694, 703, 707, 3255, 3309, 4873, 282, 915,
	5157, 1121, 126, 694, 694, 694, 694, 694, 694, 768,
	769, 771, 718, 22, 716, 10, 717, 21, 787, 4869,
	4475, 825, 150, 5134, 2560, 20, 833, 4849, 694, 694,
	1216, 3370, 5056, 3887, 1256, 715, 9, 833, 714, 8,
	695, 833, 2559, 19, 4401, 4, 1268, 879, 882, 887,
	882, 3547, 882, 694, 1392, 694, 4192, 2558, 13, 694,
	694, 4530, 882, 694, 694, 3999, 3228, 3293, 3253, 3912,
	1007, 2557, 12, 3163, 4768, 3630, 833, 833, 833, 833,
	1928, 3647, 3565, 787, 882, 882, 694, 882, 965, 3419,
	4098, 4016, 694, 965, 694, 965, 694, 694, 694, 694,
	694, 1603, 1626, 3446, 694, 882, 4119, 882, 694, 1683,
	4596, 882, 694, 694, 4082, 823, 3371, 1807, 2596, 2587,
	713, 7, 2581, 883, 962, 3297, 709, 3296, 2591, 973,
	3280, 975, 3236, 3227, 3318, 886, 1109, 3923, 3284, 2533,
	3904, 282, 282, 4441, 3452, 2514, 150, 64, 1463, 3915,
	3252, 1227, 3494, 4308, 3171, 857, 3073, 3214, 3298, 2989,
	3870, 1805, 126, 1703, 704, 2900, 3120, 1636, 757, 757,
	775, 3451, 4117, 22, 2427, 10, 3759, 21, 2730, 1049,
	1510, 3400, 150, 1380, 862, 20, 3335, 847, 3802, 2608,
	2634, 150, 1419, 1269, 784, 832, 9, 3283, 3936, 8,
	2567, 1679, 1352, 19, 3235, 861, 1375, 3272, 860, 3231,
	3234, 2513, 4017, 3233, 3224, 3179, 3795, 3160, 13, 2623,
	1412, 3074, 830, 1051, 743, 712, 6, 4751, 3117, 1441,
	1398, 3083, 12, 854, 3012, 1929, 3002, 2420, 3080, 3113,
	1917, 1127, 1897, 751, 751, 956, 1744, 846, 1673, 1201,
	997, 1596, 3334, 2708, 269, 3333, 1442, 1810, 174, 1444,
	913, 878, 3027, 3347, 1617, 172, 3246, 3143, 1624, 2442,
	1228, 1237, 941, 1694, 1900, 1918, 1898, 1129, 2919, 708,
	1082, 7, 240, 1177, 1117, 1004, 2891, 1614, 2788, 273,
	859, 2787, 195, 1901, 2595, 3277, 1202, 2735, 2540, 1899,
	838, 1933, 1210, 2607, 1209, 698, 723, 1538, 1516, 814,
	1671, 2588, 1211, 274, 777, 261, 148, 836, 1573, 1504,
	5129, 242, 781, 1172, 1641, 853, 843, 3872, 845, 3984,
	3796, 5822, 1777, 2710, 668, 149, 1604, 1478, 5088, 1604,
	1604, 851, 1116, 3728, 819, 2911, 5944, 1605, 5821, 5942,
	1605, 1605, 3983, 275, 5666, 5861, 1966, 740, 5901, 1936,
	762, 3985, 5940, 1948, 1949, 1950, 1966, 5475, 1604, 1936,
	4247, 5861, 5900, 2912, 1252, 2491, 3705, 3819, 2492, 1605,
	5275, 5901, 2497, 5888, 2489, 1966, 6, 5885, 1936, 2494,
	2498, 2493, 5531, 2495, 2489, 858, 2487, 2496, 1959, 1960,
	2490, 696, 706, 2996, 1480, 5869, 5273, 2499, 2912, 914,
	2490, 5241, 3819, 2489, 2487, 1966, 4777, 2499, 1936, 1435,
	914, 914, 1948, 1949, 1950, 3835, 219, 1052, 1054, 2490,
	1936, 5860, 819, 3219, 1966, 732, 2499, 1936, 5837, 4073,
	5861, 2497, 967, 2489, 5830, 5812, 1934, 5838, 2494, 2498,
	2493, 5794, 2495, 3892, 5491, 983, 987, 935, 936, 2490,
	5109, 5018, 2489, 1435, 2988, 4326, 2499, 821, 672, 2912,
	1966, 5752, 3873, 1936, 5751, 3797, 840, 1775, 2490, 966,
	2487, 726, 1081, 2487, 3778, 2499, 820, 5799, 5739, 3655,
	3028, 5701, 982, 985, 1112, 3779, 2497, 2914, 2489, 1778,
	5702, 5698, 1100, 2494, 2498, 2493, 5798, 2495, 5674, 2914,
	5699, 1270, 3777, 5636, 2490, 1966, 3902, 4025, 1936, 5635,
	1069, 2499, 2883, 2487, 5634, 1064, 1066, 1479, 2883, 5614,
	1045, 5535, 1689, 2883, 1680, 774, 5613, 2487, 2487, 5610,
	760, 5608, 5530, 2489, 5528, 2487, 4321, 5527, 5611, 5507,
	5609, 5531, 5491, 2487, 5506, 5399, 1607, 5489, 3858, 2490,
	5384, 1095, 850, 2487, 5109, 5327, 2499, 5374, 1692, 2886,
	1655, 1252, 5357, 5349, 3819, 5348, 5375, 3020, 3829, 3830,
	3831, 5356, 4025, 5358, 1607, 1607, 1693, 5022, 5226, 5215,
	4867, 1935, 5205, 4825, 833, 5189, 1966, 5227, 2914, 1936,
	2912, 3985, 1149, 1138, 5188, 5122, 2621, 5121, 5120, 5118,
	4540, 5108, 3833, 4499, 5123, 694, 4025, 4025, 1607, 1481,
	5109, 5077, 3835, 4246, 2489, 5075, 4976, 4320, 848, 4498,
	2487, 4340, 4975, 4303, 5076, 4977, 4974, 694, 1773, 1966,
	2490, 2914, 1936, 4276, 4968, 2914, 833, 2499, 833, 1482,
	4915, 4884, 1483, 2914, 4251, 4787, 1484, 4765, 1655, 3985,
	4885, 4025, 2716, 1936, 2487, 3942, 2487, 2489, 2535, 3881,
	3746, 3822, 3823, 3824, 3825, 823, 4490, 3880, 1485, 3879,
	3705, 2886, 4403, 2490, 4392, 2914, 1966, 1101, 2489, 1936,
	2499, 4404, 4335, 4393, 4274, 1602, 1223, 4238, 4216, 849,
	4143, 2487, 3639, 4275, 2490, 833, 2487, 4215, 694, 4144,
	3636, 1120, 3378, 1034, 2489, 3100, 1488, 3739, 3000, 4260,
	4130, 1120, 2876, 833, 1120, 1367, 833, 833, 2816, 4131,
	2490, 1120, 150, 1486, 1120, 833, 833, 2499, 833, 888,
	787, 787, 694, 3987, 787, 3973, 899, 900, 901, 3897,
	1487, 3891, 3988, 3884, 3974, 882, 882, 3865, 3898, 3857,
	3892, 3855, 2487, 3854, 3853, 3852, 3705, 3782, 3858, 3780,
	2487, 1350, 2487, 2487, 2487, 1739, 2487, 3650, 2487, 2914,
	833, 1171, 835, 1082, 757, 757, 2914, 1489, 757, 757,
	3724, 1936, 3610, 1164, 1165, 694, 2914, 5403, 694, 160,
	1345, 2487, 2914, 3486, 3311, 882, 1941, 1942, 1943, 1944,
	2564, 3203, 3487, 3312, 3825, 1655, 2489, 760, 3199, 3219,
	1607, 3871, 833, 833, 3867, 282, 282, 2487, 1655, 1944,
	1628, 1628, 1397, 2564, 2945, 5933, 1104, 1106, 1107, 694,
	882, 882, 1173, 2487, 1173, 3549, 5728, 4981, 1219, 1220,
	1655, 1358, 694, 4246, 1655, 1072, 1602, 1611, 2916, 1154,
	1155, 1955, 3640, 1159, 1162, 2915, 774, 2914, 2884, 2488,
	1945, 1946, 1947, 760, 2914, 4246, 1475, 2883, 2487, 1939,
	1940, 1941, 1942, 1943, 1944, 1607, 1750, 3799, 4074, 1939,
	1940, 1941, 1942, 1943, 1944, 1733, 1743, 3820, 3821, 3822,
	3823, 3824, 3825, 1397, 1402, 1733, 1006, 1006, 1939, 1940,
	1941, 1942, 1943, 1944, 1935, 1354, 4074, 1741, 882, 1738,
	1955, 1680, 854, 854, 1607, 1074, 1733, 760, 1733, 1945,
	1946, 1947, 3820, 3821, 3822, 3823, 3824, 3825, 1939, 1940,
	1941, 1942, 1943, 1944, 5907, 1686, 5759, 1732, 4426, 5743,
	1939, 1940, 1941, 1942, 1943, 1944, 1733, 1939, 1940, 1941,
	1942, 1943, 1944, 2573, 1699, 5734, 1101, 3219, 3378, 1148,
	833, 1101, 703, 1773, 1725, 1955, 1725, 719, 4485, 1343,
	1222, 833, 1101, 4132, 1628, 1199, 2564, 157, 2526, 4133,
	1115, 4666, 5521, 1939, 1940, 1941, 1942, 1943, 1944, 1628,
	1372, 2564, 5496, 5692, 1204, 5495, 4176, 1088, 1203, 1090,
	1089, 1092, 5478, 5445, 154, 5336, 1114, 760, 155, 1497,
	694, 154, 694, 694, 694, 155, 1163, 694, 694, 694,
	5329, 5293, 694, 5230, 1359, 1396, 1735, 159, 1939, 1940,
	1941, 1942, 1943, 1944, 159, 4485, 882, 882, 694, 5693,
	756, 787, 965, 887, 694, 694, 965, 965, 1637, 1638,
	3401, 1175, 1681, 1682, 1126, 5690, 5223, 1131, 1082, 755,
	5206, 1635, 1082, 1082, 1135, 1072, 5178, 1146, 1071, 1616,
	1724, 1801, 2526, 1346, 2574, 3826, 3827, 3828, 1785, 5084,
	5081, 5067, 1792, 1793, 3820, 3821, 3822, 3823, 3824, 3825,
	1184, 1174, 1608, 1198, 1637, 1638, 1612, 757, 757, 1205,
	757, 2429, 1204, 5066, 1105, 1206, 1203, 1639, 1082, 1939,
	1940, 1941, 1942, 1943, 1944, 5055, 1557, 1632, 1633, 1634,
	5053, 1431, 5048, 1403, 1424, 1409, 150, 5047, 5046, 886,
	760, 4839, 821, 1389, 157, 4832, 4829, 1649, 1204, 1160,
	4815, 1225, 1203, 757, 4810, 1351, 1439, 1440, 4802, 4801,
	4031, 820, 1939, 1940, 1941, 1942, 1943, 1944, 4791, 1627,
	4750, 154, 157, 756, 1467, 155, 2510, 1473, 4539, 1491,
	4453, 1369, 1370, 1939, 1940, 1941, 1942, 1943, 1944, 4416,
	4415, 1388, 755, 4399, 159, 4389, 4388, 1082, 4387, 154,
	4343, 1640, 4548, 155, 1572, 4337, 4296, 823, 1578, 1939,
	1940, 1941, 1942, 1943, 1944, 1536, 4295, 4294, 4244, 833,
	4235, 694, 159, 4086, 694, 4044, 4486, 2572, 774, 4024,
	3982, 3941, 3875, 3868, 3848, 3840, 2527, 2516, 2508, 2517,
	3839, 1771, 1621, 3818, 3816, 3815, 3811, 1664, 833, 3809,
	3808, 2539, 3807, 896, 897, 898, 694, 1359, 1517, 3806,
	3093, 3784, 890, 891, 892, 893, 894, 895, 1500, 1517,
	1667, 1517, 3781, 887, 1727, 3700, 882, 882, 882, 882,
	1721, 882, 1547, 1535, 1553, 1675, 1675, 694, 1691, 1556,
	1502, 1622, 1729, 4486, 3617, 3615, 833, 3612, 1651, 5224,
	833, 3611, 1599, 1575, 3601, 2611, 1579, 1580, 1501, 672,
	3198, 1939, 1940, 1941, 1942, 1943, 1944, 2422, 2632, 3191,
	2986, 1073, 2774, 1747, 1748, 1749, 833, 1074, 882, 2585,
	2527, 1736, 2428, 1740, 151, 1623, 833, 1204, 1620, 758,
	759, 1203, 833, 774, 1410, 112, 1371, 2571, 1812, 1151,
	1152, 1153, 719, 1404, 1156, 1157, 1158, 1161, 1225, 886,
	774, 833, 157, 4547, 833, 1644, 1645, 1224, 725, 1648,
	694, 725, 722, 1113, 1757, 3668, 1758, 1759, 1760, 1102,
	3094, 1763, 1764, 1765, 1684, 5941, 1768, 5590, 1346, 154,
	5887, 5929, 760, 155, 1731, 758, 759, 4923, 1105, 1798,
	5925, 882, 171, 2747, 282, 4425, 1105, 1722, 2678, 5840,
	5806, 1625, 159, 2968, 5781, 833, 694, 5776, 5769, 5711,
	2611, 2611, 2611, 2483, 5644, 3793, 1784, 5433, 2667, 1633,
	1632, 1737, 5607, 5581, 5578, 5494, 1634, 157, 5493, 833,
	833, 2651, 5463, 2631, 710, 152, 3975, 5459, 3945, 1681,
	1682, 1167, 5386, 5352, 4484, 5289, 5288, 882, 882, 882,
	882, 882, 2645, 5287, 154, 5266, 1399, 5250, 155, 158,
	5249, 5248, 882, 882, 5239, 5236, 4875, 694, 694, 5116,
	882, 694, 151, 5113, 5078, 4900, 4879, 159, 2648, 151,
	2584, 2525, 1619, 4866, 5691, 4858, 2424, 4855, 1809, 4685,
	4585, 4543, 4305, 4429, 1640, 2432, 4527, 4517, 4106, 4514,
	2528, 4495, 1909, 2531, 757, 1910, 2628, 1931, 757, 757,
	1902, 4458, 4456, 1932, 4448, 1618, 2430, 1103, 153, 4109,
	4108, 4103, 2671, 821, 1353, 833, 821, 821, 2472, 758,
	759, 1073, 1812, 3933, 2568, 4724, 2501, 1074, 3932, 2682,
	2799, 2800, 1925, 3885, 3718, 1926, 1927, 3790, 3772, 3770,
	2790, 3085, 2790, 757, 757, 3576, 2790, 2790, 3507, 2881,
	3398, 1399, 3320, 3265, 3091, 3125, 833, 833, 3119, 965,
	965, 965, 694, 882, 694, 151, 2901, 694, 694, 882,
	2507, 2968, 2861, 2853, 1725, 2815, 1437, 2670, 2550, 703,
	2541, 703, 2481, 1628, 1630, 2479, 2478, 2477, 2476, 833,
	833, 2475, 833, 2474, 833, 2555, 694, 833, 833, 694,
	2539, 2473, 2471, 2709, 2470, 2469, 158, 1399, 2468, 2646,
	2612, 2467, 694, 694, 2466, 2465, 2464, 694, 694, 151,
	694, 694, 2537, 1809, 833, 2480, 2592, 2463, 2462, 1645,
	1644, 2484, 2601, 2848, 158, 2565, 2461, 1648, 882, 882,
	2460, 2459, 758, 759, 2707, 2856, 2615, 2509, 2640, 2642,
	2857, 2458, 1252, 2457, 2860, 3819, 2456, 2987, 2862, 3829,
	3830, 3831, 2542, 2455, 2991, 2992, 2454, 2453, 2887, 2888,
	2452, 4779, 2683, 2569, 2451, 2450, 2686, 2687, 2449, 2448,
	2913, 2447, 2855, 2445, 2920, 2769, 2794, 2444, 2690, 2691,
	2431, 2429, 2694, 3833, 1796, 862, 1164, 1165, 841, 1723,
	112, 1643, 150, 3835, 2696, 1505, 1349, 2700, 1200, 1098,
	2854, 4856, 933, 1120, 2619, 2620, 861, 734, 4297, 860,
	4233, 2744, 2745, 2649, 4232, 2612, 2612, 2612, 2428, 3600,
	4997, 2844, 2880, 2866, 150, 2845, 3989, 1761, 1762, 4432,
	4217, 1702, 1766, 1767, 3313, 1769, 1770, 2647, 1252, 2918,
	3220, 3819, 1637, 1638, 1413, 3829, 3830, 3831, 1413, 3930,
	2761, 731, 2868, 1574, 724, 3726, 5184, 4778, 3804, 5894,
	4927, 2773, 4662, 4657, 4150, 833, 4160, 3479, 2779, 4007,
	3475, 2592, 2693, 4101, 2622, 833, 4003, 1252, 882, 3833,
	3819, 1399, 2736, 2643, 3829, 3830, 3831, 2638, 169, 3835,
	2641, 859, 2732, 2748, 721, 2651, 4334, 5397, 2732, 5396,
	757, 5025, 5631, 1809, 819, 3118, 2871, 2872, 2873, 818,
	2946, 1782, 1783, 2736, 158, 2759, 4112, 3801, 3833, 2736,
	4152, 2766, 2836, 2762, 2763, 2764, 2882, 711, 3835, 3089,
	2624, 1399, 4037, 5172, 2792, 4002, 1555, 2437, 2796, 2797,
	2795, 1264, 1464, 4001, 4007, 5574, 5573, 2592, 2954, 2870,
	5395, 4003, 2820, 2819, 2434, 5041, 817, 1966, 5895, 4227,
	1936, 4264, 1905, 3415, 1948, 1949, 1950, 4263, 1111, 2843,
	1084, 1905, 4483, 4526, 2846, 5201, 2491, 3019, 2729, 2492,
	3597, 3403, 4113, 2497, 2637, 2489, 3402, 2998, 5814, 158,
	2494, 2498, 2493, 4956, 2495, 5323, 858, 2441, 2496, 1959,
	1960, 2490, 151, 3976, 1361, 685, 2865, 163, 2499, 5057,
	4817, 4816, 683, 3303, 5183, 864, 2554, 1558, 3994, 3331,
	1425, 3998, 1377, 1063, 1056, 3336, 3013, 3013, 951, 5212,
	1558, 4406, 866, 2896, 2990, 866, 162, 4041, 5418, 2904,
	1511, 2863, 2864, 1000, 4061, 1464, 1123, 4969, 1621, 3336,
	2926, 4332, 4331, 2928, 3206, 5195, 2939, 2940, 5013, 3330,
	4709, 2941, 2942, 1448, 2943, 2944, 2893, 2894, 1449, 4665,
	4633, 4500, 1458, 872, 2636, 1420, 4023, 2603, 2974, 2921,
	872, 2934, 2922, 163, 3337, 4115, 5755, 2927, 2923, 785,
	163, 3428, 3285, 3287, 3286, 3133, 1252, 1622, 774, 3819,
	3426, 4716, 1385, 3829, 3830, 3831, 1512, 1061, 3337, 981,
	816, 2654, 162, 924, 2875, 4333, 2635, 4009, 681, 162,
	2551, 4764, 4300, 4446, 200, 2660, 2659, 2563, 3482, 5202,
	4890, 3735, 5628, 3734, 1451, 5754, 3733, 3833, 3732, 3427,
	5322, 1623, 5591, 940, 1620, 939, 5472, 3835, 3425, 819,
	2976, 2978, 5471, 5211, 957, 873, 4010, 5008, 4650, 963,
	4647, 3478, 1966, 1457, 963, 1936, 963, 2676, 2672, 1948,
	1949, 1950, 3376, 938, 2658, 937, 1663, 5729, 4099, 3090,
	5082, 2491, 4635, 1478, 2492, 5583, 4203, 2802, 2497, 1564,
	2489, 5884, 4009, 5883, 1462, 2494, 2498, 2493, 5208, 2495,
	5207, 5429, 1661, 2496, 1959, 1960, 2490, 4957, 3338, 1513,
	4005, 5584, 1590, 2499, 4675, 4011, 1070, 1625, 3017, 1906,
	4042, 4008, 4641, 2999, 4717, 3009, 2950, 3015, 1906, 4720,
	4258, 3665, 3338, 3606, 4718, 4142, 2938, 1447, 1588, 2889,
	5732, 5604, 869, 3663, 5229, 3414, 4945, 1408, 1445, 735,
	1480, 4139, 4138, 4939, 1904, 1560, 3826, 3827, 3828, 4725,
	3001, 3356, 4715, 3620, 1452, 3820, 3821, 3822, 3823, 3824,
	3825, 4970, 3544, 1406, 2503, 3344, 3037, 3026, 3025, 4719,
	2625, 2740, 175, 5411, 2504, 4005, 1625, 2625, 3603, 3018,
	4114, 4120, 1907, 3205, 4257, 4256, 4008, 1446, 1619, 1454,
	4004, 1907, 4255, 4055, 2953, 1453, 2505, 200, 4254, 1625,
	2655, 5182, 4080, 1660, 2907, 2625, 2625, 2625, 3666, 2625,
	2625, 2657, 2656, 2625, 5632, 2625, 1414, 2625, 3589, 3965,
	1414, 5813, 3604, 5797, 5650, 3437, 2669, 4632, 3591, 3136,
	3088, 870, 4006, 2789, 2842, 3804, 1006, 3011, 1582, 1587,
	1455, 5673, 3826, 3827, 3828, 201, 954, 4190, 1563, 3538,
	3359, 3820, 3821, 3822, 3823, 3824, 3825, 867, 1908, 5757,
	2653, 887, 2785, 1479, 2731, 4004, 4686, 1908, 2784, 3522,
	2731, 4187, 3554, 1006, 1405, 3109, 3664, 3553, 3137, 1585,
	3552, 3826, 3827, 3828, 1561, 1456, 1464, 1662, 3662, 3551,
	3820, 3821, 3822, 3823, 3824, 3825, 1459, 1143, 1625, 3328,
	3535, 1509, 2553, 2908, 874, 2890, 871, 4006, 3087, 876,
	1566, 3177, 3534, 871, 4262, 1362, 1565, 2753, 865, 1576,
	882, 865, 3138, 1589, 1571, 3135, 1554, 2909, 4676, 3455,
	1537, 1461, 1460, 2951, 1144, 3106, 1508, 2906, 4622, 1507,
	3215, 1506, 3217, 1503, 4912, 5255, 2516, 886, 3288, 2952,
	3240, 3240, 1955, 5630, 3207, 1481, 3251, 882, 1407, 3384,
	5756, 1945, 1946, 1947, 3329, 2905, 851, 2778, 3813, 2777,
	1939, 1940, 1941, 1942, 1943, 1944, 2776, 3814, 239, 3357,
	1514, 5430, 995, 694, 833, 1482, 4563, 4059, 1483, 4058,
	4473, 4793, 1484, 3308, 2674, 3184, 2627, 5175, 3139, 2626,
	4659, 694, 2782, 3319, 2535, 851, 5315, 199, 1450, 198,
	3966, 882, 3353, 694, 1485, 2632, 4189, 2973, 1428, 2975,
	2417, 694, 3493, 2948, 4328, 3758, 4242, 2678, 201, 1390,
	5424, 2834, 3111, 823, 3175, 3372, 882, 3169, 1464, 4156,
	833, 5431, 3126, 3127, 3128, 3129, 1562, 4153, 3537, 1915,
	1559, 5649, 1488, 694, 694, 694, 3355, 833, 833, 1356,
	3339, 2632, 3101, 3105, 694, 3107, 5167, 4603, 5176, 1486,
	1231, 3406, 694, 3410, 694, 694, 2689, 1145, 3282, 3134,
	694, 4677, 1567, 694, 694, 4564, 1487, 694, 3602, 694,
	694, 3399, 738, 833, 3165, 3166, 3167, 3168, 3661, 3416,
	3826, 3827, 3828, 694, 694, 833, 1060, 694, 694, 3820,
	3821, 3822, 3823, 3824, 3825, 3197, 2835, 5412, 3352, 882,
	882, 3010, 3667, 1489, 694, 694, 3241, 3241, 4054, 833,
	3377, 3590, 927, 833, 4243, 694, 4120, 1142, 739, 5222,
	2679, 114, 1752, 1581, 3720, 5648, 1583, 1551, 1751, 694,
	694, 694, 694, 694, 955, 2600, 694, 1955, 4140, 3038,
	694, 3444, 3435, 3104, 694, 694, 1945, 1946, 1947, 736,
	3304, 737, 3430, 5316, 1742, 1939, 1940, 1941, 1942, 1943,
	1944, 3470, 3864, 1597, 1584, 694, 694, 850, 1593, 694,
	199, 694, 198, 5101, 1697, 1357, 694, 3180, 694, 694,
	1360, 2743, 4713, 694, 3687, 694, 3520, 774, 694, 694,
	203, 3241, 1390, 1549, 3245, 3300, 3354, 2552, 4188, 2709,
	282, 3222, 694, 3358, 4603, 1062, 850, 968, 2709, 694,
	1754, 779, 694, 2424, 4783, 3407, 3379, 4782, 1133, 694,
	694, 5102, 1086, 3319, 1140, 3563, 817, 3185, 3570, 3092,
	694, 882, 787, 848, 1594, 965, 887, 965, 965, 3394,
	3281, 3110, 3513, 703, 703, 2741, 4670, 5314, 4184, 1812,
	3115, 4660, 5158, 3243, 3243, 5159, 2832, 3098, 5160, 757,
	4920, 1809, 4468, 5422, 3154, 757, 757, 5592, 4604, 1809,
	2663, 3578, 848, 3582, 3583, 3362, 5161, 3373, 882, 3531,
	3173, 1382, 1383, 3196, 3363, 1386, 2545, 1916, 3382, 3383,
	4157, 4973, 3369, 3195, 3223, 2679, 1550, 833, 4154, 2544,
	4141, 694, 4105, 5586, 849, 3514, 5725, 868, 2742, 3481,
	5337, 5577, 5253, 5163, 5452, 3218, 3147, 5724, 5468, 3291,
	2956, 1753, 886, 5162, 3123, 3651, 4881, 4605, 1616, 3248,
	5177, 2955, 4972, 5164, 2668, 833, 3420, 1592, 3243, 3660,
	1527, 3659, 4072, 849, 3579, 3321, 3322, 3323, 3324, 3325,
	3186, 3188, 4533, 3190, 3991, 3192, 3193, 3194, 2663, 4880,
	3306, 1756, 3310, 2912, 3307, 4730, 3488, 3305, 2680, 4630,
	4606, 2833, 2681, 5919, 4944, 5726, 3652, 757, 4971, 4680,
	882, 882, 5918, 1212, 5588, 1070, 3342, 882, 882, 694,
	5587, 4958, 787, 965, 2443, 965, 965, 1381, 4534, 3066,
	5436, 3381, 1533, 2546, 1212, 1214, 3703, 3704, 3706, 3070,
	5451, 3068, 969, 3586, 3587, 3065, 1082, 3067, 3069, 3598,
	3599, 3387, 5882, 1755, 4617, 4604, 2662, 5580, 3609, 3696,
	3438, 3698, 3699, 2723, 4895, 4067, 1529, 3463, 3262, 3240,
	4950, 3453, 4271, 3466, 3467, 3459, 833, 3075, 3076, 3077,
	3078, 757, 3548, 4270, 3356, 3627, 5646, 3476, 1212, 1214,
	4345, 3480, 3468, 5165, 5166, 3473, 1208, 3114, 3454, 5717,
	970, 5408, 3516, 757, 4805, 3616, 4380, 2791, 3592, 1696,
	3593, 1363, 3594, 4524, 4605, 3596, 4379, 3560, 5233, 4726,
	4620, 934, 4047, 1436, 4597, 3351, 3484, 4891, 1548, 3483,
	3566, 783, 887, 3490, 2500, 1695, 1058, 3618, 952, 1068,
	909, 3995, 823, 1068, 2662, 914, 2813, 4698, 3723, 1665,
	2811, 1391, 3729, 1134, 1518, 3783, 2814, 4606, 2812, 3792,
	4697, 1087, 3368, 2808, 3079, 2817, 4496, 3290, 5801, 1591,
	1540, 1642, 5326, 2680, 1646, 1647, 1528, 2681, 1540, 1597,
	914, 3872, 3515, 3359, 3569, 3796, 1631, 914, 4359, 5914,
	5829, 4532, 3654, 3, 5508, 3948, 4587, 5111, 5083, 2814,
	3760, 3242, 3242, 2812, 3890, 3798, 3771, 4877, 4821, 3716,
	3716, 5850, 3489, 3491, 3541, 4800, 1524, 3539, 886, 823,
	2936, 3540, 957, 963, 3543, 1213, 3648, 963, 963, 3540,
	3763, 4822, 5849, 4681, 5817, 3764, 5816, 3575, 3567, 1521,
	1598, 5657, 3765, 3883, 5656, 3241, 1213, 5511, 5510, 5371,
	5662, 3762, 3719, 5763, 5762, 2486, 5663, 2810, 3071, 1675,
	2516, 5660, 5513, 1526, 5659, 5372, 5723, 5661, 5512, 3914,
	3914, 787, 5658, 3240, 3926, 3914, 3914, 3349, 3697, 3631,
	5442, 3638, 4549, 3722, 4094, 3634, 3242, 4066, 3619, 3605,
	3607, 3608, 1659, 3624, 1499, 3625, 1416, 833, 4618, 833,
	1213, 694, 833, 694, 5325, 1532, 1725, 833, 833, 3787,
	2809, 3631, 3357, 4949, 3626, 1057, 1478, 953, 4523, 908,
	3702, 4619, 4531, 4806, 4623, 2898, 3873, 3949, 4588, 3768,
	3797, 1795, 3761, 2726, 5851, 4381, 3656, 1552, 3773, 1539,
	114, 694, 5520, 1519, 833, 3353, 3657, 1539, 3075, 3076,
	3077, 3078, 2937, 3568, 842, 3072, 5515, 1525, 2847, 5665,
	5332, 5664, 5514, 5516, 5517, 5333, 823, 1150, 742, 694,
	5370, 3730, 3731, 1522, 1615, 3736, 5478, 694, 1435, 694,
	1520, 833, 833, 1480, 1530, 694, 5147, 5678, 5197, 3355,
	4909, 5143, 3243, 3755, 3977, 4092, 4722, 3695, 4070, 4050,
	3972, 3658, 3955, 1654, 3621, 3584, 3850, 3314, 3713, 3709,
	3015, 3712, 3956, 1423, 5680, 1208, 2618, 2446, 1903, 2611,
	1794, 1523, 1730, 5679, 4068, 694, 3721, 1728, 3899, 5091,
	5681, 1577, 5096, 1387, 1197, 3862, 5094, 4834, 5095, 5097,
	3723, 5895, 5865, 5390, 1082, 5389, 694, 3241, 5891, 3241,
	3385, 3352, 5913, 5683, 4065, 4457, 5937, 4128, 3756, 5140,
	5141, 4015, 5824, 5685, 3745, 3396, 694, 694, 694, 694,
	3743, 5126, 1434, 3924, 3752, 4942, 3750, 2925, 4122, 4894,
	3748, 4043, 3749, 3751, 3856, 4091, 3350, 4434, 3980, 3340,
	3863, 3289, 5149, 5142, 3258, 5145, 5146, 5148, 5144, 1082,
	1082, 744, 744, 761, 3958, 1653, 1479, 3775, 2838, 4077,
	2665, 5682, 1924, 1670, 3789, 1422, 694, 694, 757, 694,
	694, 694, 3786, 4597, 2721, 5093, 3348, 5098, 725, 4843,
	2733, 2644, 1125, 3996, 161, 3876, 3922, 774, 3247, 4620,
	3442, 5688, 1191, 3874, 5106, 3845, 3846, 3847, 3911, 3354,
	5686, 2724, 5912, 4051, 3927, 3928, 3358, 5107, 694, 4840,
	2723, 5694, 5695, 5364, 833, 3866, 5362, 5365, 4624, 5546,
	1108, 3766, 3767, 2678, 4145, 4146, 3878, 694, 4183, 3441,
	2722, 4622, 5545, 3443, 5693, 694, 3211, 3212, 1478, 2752,
	5542, 5543, 3889, 5138, 3243, 3181, 3243, 3888, 1481, 3079,
	5868, 3895, 5541, 3894, 5598, 3919, 5597, 2424, 3711, 3992,
	3440, 3918, 3921, 2895, 3917, 2897, 5687, 3940, 2902, 2903,
	5342, 882, 882, 3893, 4219, 4872, 4121, 2568, 1482, 3550,
	694, 1483, 5597, 5598, 1366, 1484, 882, 2725, 3952, 164,
	3836, 3837, 3838, 3938, 3939, 5525, 3970, 2535, 998, 3967,
	680, 5524, 682, 684, 241, 1480, 3577, 1485, 3981, 5339,
	3934, 694, 3585, 4196, 5105, 4197, 4198, 5137, 4084, 165,
	166, 167, 168, 1059, 3888, 694, 992, 965, 3023, 3024,
	2901, 4253, 4124, 4012, 4126, 903, 4079, 5693, 4081, 5780,
	3098, 4038, 4592, 3753, 833, 1488, 4306, 4307, 3216, 4052,
	4053, 4033, 4034, 5341, 5340, 4571, 4048, 3202, 3886, 4062,
	3242, 923, 1486, 4250, 268, 5920, 3628, 2419, 3260, 694,
	694, 5819, 5218, 4035, 882, 4118, 5470, 4030, 694, 1487,
	3405, 4625, 4099, 3905, 3910, 3908, 3909, 3907, 4078, 3903,
	3906, 4442, 1082, 5820, 2612, 4193, 4093, 4572, 4076, 4934,
	963, 963, 963, 4712, 4107, 4711, 4063, 4111, 4100, 3979,
	4466, 3201, 3679, 3678, 1745, 2755, 1489, 2854, 3401, 2754,
	2570, 833, 833, 3962, 4179, 2709, 2520, 833, 1479, 2519,
	4573, 4574, 4575, 3075, 3076, 3077, 3078, 4852, 4437, 4436,
	3754, 4259, 4147, 4481, 5818, 3979, 5428, 4266, 5761, 5760,
	4507, 3680, 4172, 5596, 5594, 4234, 4440, 3910, 3908, 3909,
	3907, 5522, 3693, 3694, 5330, 4304, 4173, 4014, 4177, 5296,
	4901, 4580, 4413, 4412, 2651, 4354, 881, 4353, 902, 4226,
	904, 4225, 4212, 3653, 4350, 4214, 3978, 3595, 3523, 3512,
	930, 4038, 3267, 3209, 2970, 4151, 2969, 2738, 1809, 4851,
	3905, 3910, 3908, 3909, 3907, 4181, 3903, 3906, 4850, 2652,
	2604, 2599, 958, 959, 4161, 961, 1797, 1746, 1609, 1569,
	1481, 1568, 4194, 1544, 1429, 1344, 1110, 4164, 1099, 778,
	1934, 4169, 856, 990, 852, 993, 4769, 4309, 3116, 5748,
	5668, 4239, 5667, 5547, 4819, 1920, 5065, 5009, 4883, 4770,
	1482, 4651, 757, 1483, 823, 4648, 4508, 1484, 4358, 3986,
	3649, 2688, 3242, 4218, 3242, 2685, 1221, 1214, 4060, 2535,
	4241, 776, 4299, 3935, 3905, 3910, 3908, 3909, 3907, 1485,
	3903, 3906, 2997, 3215, 3715, 3728, 4083, 3225, 3794, 2516,
	4229, 4230, 4960, 3240, 4220, 4918, 3240, 5843, 4917, 5638,
	4236, 4961, 4298, 4237, 4447, 756, 5204, 3914, 3926, 3914,
	3914, 3914, 4301, 5071, 3714, 2524, 4454, 1488, 2523, 5038,
	4962, 4959, 4804, 4739, 755, 4252, 4327, 3931, 3812, 3757,
	3028, 2917, 1359, 2632, 1486, 855, 4478, 4267, 5842, 844,
	5737, 5280, 4174, 5277, 4175, 5037, 5027, 5004, 4999, 4998,
	694, 1487, 4672, 4671, 4661, 4268, 4656, 4569, 4209, 4208,
	4207, 4206, 4205, 4204, 3869, 2592, 4338, 4200, 4199, 833,
	1093, 1725, 4191, 4178, 4171, 4159, 4248, 4158, 4155, 4089,
	4088, 4087, 694, 4293, 3742, 833, 3572, 3702, 1489, 694,
	3744, 3082, 882, 4265, 3536, 3517, 3081, 3082, 3738, 833,
	3064, 2885, 4516, 2852, 4269, 2851, 2850, 2849, 2801, 2798,
	2793, 2786, 2772, 2768, 2767, 2765, 3319, 2760, 2758, 4525,
	862, 2751, 882, 4313, 4314, 4315, 4316, 150, 2734, 2720,
	4290, 2719, 4479, 4488, 3396, 2718, 4482, 2704, 2677, 2673,
	2666, 861, 2521, 4390, 860, 4492, 3614, 3040, 4431, 3041,
	3613, 1132, 1085, 4329, 1075, 833, 4494, 2859, 4567, 2858,
	5051, 4477, 4760, 694, 3240, 3372, 3723, 4749, 4747, 3241,
	4348, 4582, 3241, 4742, 4342, 4561, 4741, 4506, 4292, 694,
	694, 4357, 4291, 4289, 4515, 4288, 2632, 4015, 4287, 4513,
	4598, 4363, 4352, 4286, 1725, 4285, 694, 1725, 4284, 1725,
	4614, 4283, 4026, 4279, 4277, 3688, 2972, 3924, 2971, 4551,
	2964, 2963, 2962, 2961, 4636, 2960, 694, 2959, 2958, 2957,
	4613, 4559, 4545, 5406, 4395, 3114, 859, 4609, 3061, 5773,
	5554, 4546, 694, 4394, 4524, 3059, 3062, 3058, 5803, 3060,
	774, 694, 694, 694, 757, 5802, 694, 4577, 4988, 694,
	694, 694, 694, 774, 4408, 4984, 4435, 4421, 4831, 4438,
	4423, 4422, 694, 4407, 4433, 4576, 4621, 4439, 4586, 694,
	4430, 694, 4443, 4444, 4510, 4450, 1164, 1165, 4409, 4830,
	3670, 774, 694, 4797, 4323, 4324, 4449, 774, 4451, 4452,
	694, 694, 3098, 4753, 4796, 694, 694, 694, 694, 694,
	4601, 4626, 4629, 4608, 4700, 4610, 4410, 4185, 2528, 3723,
	4414, 3511, 2709, 4469, 3508, 757, 3243, 4491, 3505, 3243,
	3501, 4057, 2739, 2709, 2709, 4501, 4951, 2771, 3645, 3644,
	4015, 858, 4639, 4509, 4511, 3643, 4427, 4428, 4505, 3642,
	3241, 3241, 3641, 3380, 2699, 694, 694, 694, 694, 694,
	1574, 1472, 1466, 3281, 1217, 3774, 5886, 4355, 4356, 828,
	774, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374,
	4375, 4376, 4377, 4378, 1218, 4382, 3241, 4463, 4542, 829,
	4536, 3097, 4933, 2727, 4593, 204, 4981, 757, 4550, 4763,
	4557, 3096, 2726, 1080, 3723, 4721, 887, 4538, 5904, 4552,
	4489, 5903, 3264, 4560, 833, 833, 833, 833, 4898, 3623,
	3098, 4578, 1604, 4544, 4581, 4705, 4584, 1435, 5416, 5415,
	4684, 4978, 4887, 1605, 4627, 877, 2419, 3373, 4924, 284,
	4411, 4211, 4096, 3393, 3361, 3268, 2594, 2586, 2536, 4520,
	4728, 4638, 2529, 4631, 4628, 1432, 1421, 1415, 1411, 1393,
	5758, 1809, 5135, 844, 4553, 4554, 5265, 5264, 757, 4221,
	5216, 4699, 4615, 4740, 4594, 4213, 4180, 4224, 4643, 4125,
	4767, 4123, 757, 4095, 4064, 4690, 3959, 3345, 3341, 3266,
	3261, 2869, 886, 2867, 2702, 2698, 2605, 3243, 3243, 2590,
	2582, 2580, 4461, 2562, 2592, 1658, 3420, 1657, 4640, 1656,
	2854, 1650, 1613, 1610, 1606, 1601, 757, 1586, 1545, 1493,
	1490, 1471, 1465, 4986, 4985, 3559, 4614, 2561, 4701, 1381,
	1047, 5671, 5601, 3243, 5589, 694, 1395, 3240, 3240, 4706,
	5490, 3240, 5245, 3548, 5328, 4844, 5267, 787, 5185, 694,
	5125, 4989, 4729, 4014, 3914, 4946, 3319, 4861, 4528, 787,
	4932, 4921, 4710, 4723, 3671, 3672, 3673, 3674, 3675, 3676,
	3677, 4634, 4737, 4487, 3954, 3689, 3366, 3685, 3686, 3360,
	1666, 4689, 4282, 2617, 2530, 3251, 882, 789, 2511, 2485,
	3566, 1700, 760, 1400, 1401, 2993, 2994, 2878, 4738, 4865,
	2877, 3717, 5407, 760, 774, 5911, 760, 760, 833, 5896,
	4899, 5735, 5448, 4835, 4836, 4658, 3364, 4512, 1725, 4071,
	4663, 785, 785, 4882, 4878, 920, 4859, 4860, 2684, 4465,
	4892, 1273, 1272, 1265, 2502, 3648, 920, 920, 1078, 882,
	1687, 4907, 5203, 1438, 3242, 5715, 5198, 3242, 2632, 4911,
	694, 5410, 789, 5200, 5582, 3003, 4896, 789, 920, 5196,
	4707, 4888, 789, 787, 789, 2543, 4902, 5192, 3968, 4799,
	4947, 920, 920, 4703, 3564, 4818, 3971, 3271, 1542, 1543,
	3960, 3372, 3278, 1037, 1037, 1531, 920, 920, 920, 667,
	2728, 3295, 2549, 4941, 4731, 2632, 4014, 4813, 4965, 2548,
	3631, 5210, 3241, 4361, 5209, 4886, 785, 4919, 5435, 4916,
	4678, 3367, 4365, 3241, 3241, 3521, 4568, 3241, 4928, 4929,
	920, 4837, 4570, 4069, 4922, 875, 4838, 3365, 4940, 4938,
	4967, 1427, 2783, 5447, 4565, 3241, 3530, 4386, 3571, 3532,
	3533, 3327, 4754, 4755, 4756, 4757, 4758, 4759, 694, 4761,
	4762, 694, 2818, 4857, 4028, 4027, 42, 694, 694, 694,
	41, 40, 694, 694, 694, 4964, 39, 38, 37, 36,
	35, 62, 694, 694, 61, 60, 59, 58, 57, 56,
	55, 4704, 54, 53, 52, 51, 50, 49, 4615, 48,
	47, 46, 45, 44, 43, 4621, 4982, 34, 4795, 5015,
	4847, 4848, 33, 4798, 4853, 4925, 4914, 32, 31, 30,
	29, 28, 694, 694, 694, 3242, 3242, 4926, 27, 26,
	25, 4864, 24, 703, 23, 780, 694, 1196, 2830, 4261,
	3646, 1600, 733, 1141, 1139, 1734, 1118, 1128, 2831, 3346,
	102, 101, 4954, 4905, 100, 99, 77, 76, 75, 3243,
	74, 3242, 3635, 4828, 73, 4952, 2709, 3241, 72, 71,
	3243, 3243, 70, 69, 3243, 68, 67, 66, 5, 65,
	80, 82, 81, 79, 78, 63, 18, 17, 1595, 2556,
	186, 1364, 3243, 2566, 1779, 1780, 3029, 4116, 5042, 4846,
	757, 4937, 4097, 4963, 4595, 1468, 4931, 5792, 5064, 757,
	757, 694, 3418, 5563, 4472, 173, 5423, 4990, 4000, 3997,
	4602, 4470, 5453, 4611, 4987, 4876, 4535, 4994, 4476, 3254,
	4474, 3250, 4991, 957, 5864, 5092, 963, 3800, 963, 963,
	3178, 3183, 5086, 5360, 5127, 5676, 4903, 5124, 4862, 3316,
	5019, 5020, 156, 3373, 694, 5023, 5024, 5338, 5090, 5104,
	3200, 2518, 107, 3240, 827, 826, 694, 5670, 1226, 4861,
	5376, 5558, 5150, 4874, 5139, 3548, 4464, 170, 4995, 4996,
	1097, 2935, 1147, 720, 2924, 3548, 1124, 2522, 4871, 4953,
	833, 4870, 5544, 5540, 5170, 5539, 4478, 4424, 3208, 4868,
	3221, 694, 2506, 5039, 98, 833, 694, 97, 96, 95,
	5014, 4614, 833, 94, 3243, 93, 92, 91, 90, 89,
	88, 5169, 87, 86, 85, 84, 83, 16, 15, 14,
	11, 694, 5308, 5306, 2632, 5307, 5305, 5028, 3086, 5119,
	5155, 5059, 5031, 889, 1963, 694, 3016, 1215, 1923, 1207,
	694, 5313, 4349, 833, 4792, 5173, 694, 5299, 2440, 5672,
	4445, 4567, 1011, 1012, 5186, 1629, 1009, 965, 5001, 1039,
	882, 5003, 2967, 5237, 4824, 4405, 5100, 4396, 3146, 3142,
	3131, 3153, 5043, 4812, 3102, 1250, 1249, 4993, 4614, 887,
	3112, 882, 882, 957, 963, 3785, 963, 963, 2438, 5179,
	1244, 1245, 5156, 5243, 1240, 5079, 1914, 1911, 4613, 694,
	694, 5103, 5260, 3637, 5153, 694, 5112, 2899, 2705, 694,
	3439, 4477, 5168, 5232, 2575, 2576, 2577, 2578, 5133, 2579,
	887, 965, 4127, 5213, 64, 5136, 5194, 4148, 694, 3241,
	785, 5219, 5132, 5272, 3445, 5274, 5171, 5469, 5246, 126,
	3558, 1970, 1776, 2949, 1774, 772, 1170, 3132, 1965, 2,
	22, 920, 10, 5258, 21, 1, 0, 5284, 5301, 150,
	0, 920, 20, 5240, 920, 886, 2664, 3242, 4743, 4745,
	5238, 920, 0, 9, 920, 0, 8, 3241, 3242, 3242,
	19, 5268, 3242, 5193, 3723, 3121, 5294, 5295, 5254, 5257,
	5256, 5251, 0, 3631, 5282, 13, 3148, 0, 5187, 0,
	3242, 0, 0, 0, 0, 4015, 886, 5269, 3174, 12,
	4614, 3121, 0, 0, 694, 5343, 5115, 0, 5052, 5281,
	0, 5292, 0, 920, 787, 0, 5286, 5355, 5283, 0,
	5344, 0, 0, 0, 0, 0, 0, 0, 0, 2746,
	0, 0, 0, 0, 0, 0, 0, 5297, 0, 0,
	5152, 0, 0, 0, 3241, 0, 0, 0, 7, 0,
	5382, 0, 757, 4615, 0, 0, 789, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 3243, 5321, 0, 5085,
	0, 789, 5099, 0, 5383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4281, 2803, 2804, 2805, 2806, 2807,
	5377, 0, 0, 0, 0, 833, 0, 0, 0, 789,
	789, 2837, 694, 789, 5350, 5366, 5367, 833, 2840, 5368,
	5369, 0, 3242, 5351, 3243, 5388, 0, 0, 0, 0,
	694, 5385, 785, 5413, 785, 5420, 5392, 0, 787, 0,
	4615, 0, 3240, 0, 0, 0, 4085, 0, 5419, 0,
	0, 0, 0, 0, 0, 5070, 833, 0, 0, 0,
	0, 0, 0, 6, 0, 0, 5391, 0, 0, 5317,
	0, 5394, 0, 1037, 0, 0, 5393, 5214, 694, 5401,
	5320, 694, 1082, 5409, 5400, 0, 3241, 0, 0, 0,
	0, 0, 0, 4910, 0, 5402, 0, 0, 5438, 5387,
	3241, 3243, 5235, 5444, 5443, 0, 0, 0, 0, 0,
	0, 5474, 0, 5437, 5417, 0, 0, 757, 5440, 5279,
	5347, 0, 0, 5450, 0, 5449, 5464, 5441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1725, 0, 0, 2516, 5466, 5458, 0, 5460, 1037, 5462,
	0, 0, 0, 3319, 0, 0, 0, 0, 0, 5465,
	5479, 0, 5538, 5480, 0, 5481, 5482, 0, 0, 5190,
	5485, 1725, 4615, 1725, 0, 5487, 0, 0, 5455, 0,
	0, 0, 0, 0, 5526, 0, 4864, 5565, 0, 0,
	0, 3631, 3631, 0, 5562, 0, 2965, 2966, 5503, 5504,
	0, 5518, 0, 823, 0, 0, 0, 0, 920, 0,
	0, 0, 920, 920, 0, 0, 0, 5568, 3241, 0,
	0, 0, 0, 5529, 0, 5534, 4992, 0, 0, 5560,
	0, 0, 5575, 3243, 0, 0, 4905, 882, 1037, 5557,
	920, 0, 0, 694, 5570, 5561, 5523, 3243, 5569, 0,
	0, 4228, 920, 5456, 5457, 5537, 0, 0, 920, 0,
	1725, 4014, 5572, 0, 887, 0, 0, 5345, 0, 0,
	5021, 0, 694, 694, 5579, 5571, 0, 5552, 0, 5555,
	0, 0, 0, 5585, 0, 0, 0, 0, 5595, 0,
	5301, 5593, 5599, 0, 3242, 5378, 4249, 0, 0, 0,
	0, 0, 5032, 5033, 0, 0, 0, 789, 0, 5603,
	0, 1082, 5655, 2422, 0, 0, 0, 5621, 1037, 1037,
	789, 789, 5319, 5605, 5484, 789, 789, 5486, 0, 5488,
	5633, 5622, 5355, 5669, 5647, 5624, 0, 920, 5620, 0,
	789, 5398, 3242, 1814, 789, 0, 3039, 5641, 5640, 5639,
	886, 0, 789, 0, 789, 1725, 0, 0, 5653, 5654,
	5615, 789, 5617, 3241, 5619, 3243, 5616, 0, 0, 0,
	5700, 0, 789, 789, 789, 789, 789, 0, 5675, 4614,
	0, 5359, 0, 789, 0, 0, 5716, 0, 965, 965,
	0, 2632, 694, 0, 5713, 0, 5703, 5704, 0, 5708,
	0, 5710, 0, 5519, 0, 694, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3242,
	5612, 5707, 0, 0, 5718, 5719, 5742, 0, 5709, 694,
	5706, 0, 5712, 5536, 0, 965, 4892, 0, 963, 0,
	0, 0, 0, 0, 5730, 5738, 0, 5740, 5727, 5566,
	5152, 0, 0, 0, 4026, 0, 5736, 5741, 0, 5745,
	5746, 5696, 2678, 0, 0, 0, 0, 5765, 1725, 1725,
	0, 5749, 5768, 0, 0, 5744, 5733, 5764, 0, 0,
	0, 0, 5753, 0, 0, 0, 0, 5750, 2516, 789,
	0, 0, 3215, 0, 0, 0, 0, 5642, 5643, 0,
	0, 0, 0, 5565, 882, 882, 5778, 0, 0, 0,
	3243, 0, 4614, 0, 787, 5787, 0, 0, 0, 5779,
	5770, 3148, 3148, 0, 5775, 5784, 5785, 1037, 5618, 5777,
	5791, 920, 5793, 694, 1037, 0, 5788, 1814, 5783, 1814,
	5782, 5455, 0, 0, 0, 0, 0, 5560, 0, 882,
	0, 3242, 0, 0, 5800, 3241, 0, 0, 0, 0,
	0, 5790, 920, 0, 0, 3242, 0, 5807, 920, 0,
	5789, 0, 5808, 0, 5766, 5767, 0, 5827, 0, 0,
	5809, 0, 0, 4746, 0, 4748, 0, 0, 0, 0,
	3148, 3148, 3148, 5815, 0, 0, 0, 0, 5834, 0,
	5836, 5804, 0, 0, 1252, 0, 0, 3819, 0, 0,
	0, 3829, 3830, 3831, 0, 5841, 0, 5832, 1037, 5835,
	787, 5855, 5856, 5857, 0, 5355, 5839, 0, 0, 1082,
	0, 0, 0, 882, 5852, 0, 0, 5848, 0, 4614,
	0, 4615, 5871, 5873, 0, 1037, 5866, 5867, 0, 0,
	5833, 5859, 0, 0, 5870, 3835, 0, 0, 0, 5874,
	0, 0, 5827, 0, 5875, 0, 0, 0, 5889, 0,
	0, 0, 0, 5090, 0, 5846, 0, 0, 0, 3241,
	0, 5898, 5893, 3242, 5897, 5890, 0, 787, 3241, 0,
	0, 0, 0, 0, 0, 5899, 5902, 5872, 5906, 0,
	0, 5905, 3243, 787, 785, 5909, 5910, 785, 5915, 0,
	0, 5916, 5921, 5922, 694, 5908, 0, 920, 5924, 965,
	965, 5932, 5928, 5090, 0, 5934, 5827, 5936, 5935, 0,
	0, 5927, 5923, 5938, 0, 0, 0, 0, 5939, 0,
	0, 0, 5827, 5943, 0, 5720, 0, 0, 0, 0,
	0, 1037, 0, 1037, 0, 5930, 5931, 0, 0, 0,
	0, 0, 0, 0, 0, 5566, 0, 0, 789, 0,
	0, 0, 0, 0, 4615, 0, 0, 0, 0, 0,
	0, 0, 5811, 0, 0, 5831, 0, 0, 5404, 0,
	1037, 0, 3631, 920, 0, 920, 920, 920, 920, 0,
	0, 0, 0, 0, 0, 5878, 0, 0, 0, 0,
	5847, 0, 0, 0, 0, 3241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3243, 0, 3242, 0,
	0, 0, 0, 0, 0, 3243, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 789,
	789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5878, 0, 0, 5844,
	5845, 0, 0, 920, 0, 785, 785, 0, 1702, 0,
	1702, 1702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5878, 0, 0, 0, 3039, 0,
	0, 4615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 785, 0, 0, 0, 5881, 4732, 4733, 4734, 4735,
	4736, 0, 0, 0, 0, 0, 0, 0, 0, 5771,
	5772, 0, 0, 5774, 1037, 3257, 1037, 0, 0, 0,
	0, 0, 789, 789, 789, 0, 0, 0, 5532, 1966,
	0, 0, 1936, 0, 0, 0, 1948, 1949, 1950, 0,
	0, 0, 3243, 0, 0, 0, 0, 0, 2491, 0,
	0, 2492, 0, 0, 0, 2497, 5881, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 0, 2495, 0, 0, 3326,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 1966,
	2499, 0, 1936, 0, 5881, 0, 1948, 1949, 1950, 0,
	0, 0, 0, 0, 3375, 0, 0, 0, 2491, 0,
	3242, 2492, 0, 0, 0, 2497, 0, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 0, 2495, 0, 0, 0,
	2496, 1959, 1960, 2490, 0, 0, 0, 5044, 5045, 0,
	2499, 0, 0, 5049, 789, 5050, 0, 0, 0, 0,
	0, 789, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 789, 1037, 0, 0, 789,
	789, 789, 789, 789, 789, 789, 789, 789, 789, 789,
	789, 789, 789, 789, 789, 0, 789, 3464, 3465, 0,
	0, 0, 0, 0, 1814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1966, 0, 0, 1936, 3826, 3827,
	3828, 1948, 1949, 1950, 0, 0, 0, 3820, 3821, 3822,
	3823, 3824, 3825, 2491, 0, 0, 2492, 0, 0, 0,
	2497, 0, 2489, 0, 3242, 0, 0, 2494, 2498, 2493,
	0, 2495, 0, 3242, 0, 2496, 1959, 1960, 2490, 0,
	0, 0, 0, 0, 0, 2499, 0, 0, 1966, 0,
	0, 1936, 0, 0, 0, 1948, 1949, 1950, 0, 0,
	0, 0, 0, 0, 3148, 3148, 3021, 2491, 0, 0,
	2492, 0, 0, 0, 2497, 0, 2489, 3023, 3024, 0,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 0, 0, 0, 0, 0, 2499,
	0, 0, 0, 0, 0, 0, 0, 785, 0, 3574,
	0, 0, 0, 0, 0, 0, 0, 0, 785, 785,
	0, 0, 785, 0, 0, 0, 0, 0, 4854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 3148, 3148, 3148, 3148, 3148, 3148, 3148, 3148, 3148,
	3148, 3148, 3148, 3148, 0, 3148, 0, 0, 0, 0,
	3242, 0, 0, 0, 0, 0, 0, 0, 1966, 0,
	0, 1936, 0, 0, 0, 1948, 1949, 1950, 0, 0,
	0, 0, 0, 4400, 0, 0, 0, 2491, 3121, 0,
	2492, 0, 0, 0, 2497, 0, 2489, 0, 0, 0,
	0, 2494, 2498, 2493, 0, 3841, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 0, 0, 0, 0, 0, 2499,
	0, 3842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5298, 0, 0,
	0, 0, 1966, 0, 4948, 1936, 0, 0, 4397, 1948,
	1949, 1950, 0, 4459, 0, 0, 0, 0, 3682, 3684,
	0, 2491, 785, 0, 2492, 3690, 3691, 0, 2497, 0,
	2489, 0, 0, 0, 0, 2494, 2498, 2493, 0, 2495,
	0, 0, 0, 2496, 1959, 1960, 2490, 3843, 0, 0,
	0, 0, 0, 2499, 0, 0, 1966, 0, 0, 1936,
	5863, 0, 0, 1948, 1949, 1950, 0, 0, 0, 0,
	4398, 0, 0, 0, 0, 2491, 0, 0, 2492, 0,
	5652, 0, 2497, 0, 2489, 0, 0, 0, 3148, 2494,
	2498, 2493, 0, 2495, 1955, 0, 0, 2496, 1959, 1960,
	2490, 0, 0, 1945, 1946, 1947, 0, 2499, 0, 0,
	0, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 3851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1252, 0, 0, 3819, 0, 0,
	0, 3829, 3830, 3831, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 1945, 1946, 1947, 0, 5117, 0, 0,
	5117, 0, 1939, 1940, 1941, 1942, 1943, 1944, 3834, 0,
	0, 0, 0, 0, 5651, 3833, 1246, 106, 0, 0,
	0, 0, 0, 0, 0, 3835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 789,
	0, 789, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 789, 789, 0, 0, 0, 0,
	0, 789, 0, 789, 789, 789, 789, 789, 789, 789,
	789, 789, 789, 789, 0, 789, 0, 789, 0, 789,
	789, 789, 789, 789, 789, 0, 789, 789, 789, 1955,
	0, 789, 0, 0, 0, 0, 0, 789, 1945, 1946,
	1947, 789, 789, 789, 789, 0, 0, 1939, 1940, 1941,
	1942, 1943, 1944, 0, 0, 0, 0, 0, 1252, 0,
	0, 3819, 0, 0, 785, 3829, 3830, 3831, 0, 789,
	789, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 1037, 1945, 1946, 1947, 0, 0, 822, 824, 3833,
	1037, 1939, 1940, 1941, 1942, 1943, 1944, 106, 0, 3835,
	0, 0, 785, 0, 1814, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1814,
	0, 0, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1037, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 0, 0, 5346, 0, 0, 0, 785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1814, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 1945, 1946, 1947, 0, 920, 0, 0, 0,
	1814, 1939, 1940, 1941, 1942, 1943, 1944, 1966, 0, 0,
	1936, 0, 963, 0, 1948, 1949, 1950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2491, 0, 0, 2492,
	0, 0, 4820, 2497, 0, 2489, 0, 0, 1037, 1037,
	2494, 2498, 2493, 0, 2495, 0, 0, 1037, 2496, 1959,
	1960, 2490, 0, 0, 0, 0, 789, 1955, 2499, 0,
	0, 0, 1966, 0, 0, 1936, 1945, 1946, 1947, 1948,
	1949, 1950, 0, 5858, 0, 1939, 1940, 1941, 1942, 1943,
	1944, 920, 920, 0, 0, 0, 0, 0, 2497, 0,
	2489, 0, 0, 0, 0, 2494, 2498, 2493, 0, 2495,
	0, 785, 0, 2496, 1959, 1960, 2490, 0, 0, 0,
	0, 1955, 0, 2499, 0, 785, 920, 0, 0, 0,
	1945, 1946, 1947, 920, 0, 0, 0, 5796, 0, 1939,
	1940, 1941, 1942, 1943, 1944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1814, 0, 0, 0, 0,
	0, 789, 0, 1037, 789, 0, 789, 789, 0, 1037,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 1449, 0, 0, 0, 1458, 0, 0, 0, 4222,
	4223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 789, 0, 0, 4231, 0, 0, 0, 3826, 3827,
	3828, 0, 0, 0, 0, 0, 920, 3820, 3821, 3822,
	3823, 3824, 3825, 1037, 0, 920, 1966, 0, 0, 1936,
	0, 0, 0, 1948, 1949, 1950, 0, 0, 0, 5446,
	0, 0, 0, 785, 0, 2491, 0, 1451, 2492, 0,
	0, 1814, 2497, 0, 2489, 0, 0, 920, 0, 2494,
	2498, 2493, 0, 2495, 0, 0, 0, 2496, 1959, 1960,
	2490, 0, 0, 0, 0, 0, 1457, 2499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1037,
	1037, 789, 789, 0, 789, 789, 0, 0, 789, 0,
	0, 0, 0, 789, 789, 0, 789, 0, 0, 0,
	789, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 1445, 3826, 3827, 3828, 0, 0, 0, 789, 0,
	0, 3820, 3821, 3822, 3823, 3824, 3825, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 789,
	0, 0, 0, 0, 789, 0, 0, 0, 0, 0,
	1446, 0, 1454, 0, 0, 0, 0, 0, 1453, 0,
	789, 789, 0, 110, 0, 789, 0, 109, 111, 0,
	0, 0, 0, 0, 789, 0, 0, 157, 0, 0,
	789, 0, 0, 0, 0, 3148, 0, 106, 824, 0,
	0, 0, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 154, 789, 0, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 789,
	789, 789, 0, 0, 113, 0, 0, 789, 789, 789,
	0, 0, 789, 0, 0, 0, 0, 3148, 1456, 1814,
	146, 0, 108, 789, 0, 1814, 0, 0, 0, 1459,
	152, 1037, 1955, 0, 0, 0, 0, 0, 0, 0,
	0, 1945, 1946, 1947, 0, 789, 0, 0, 5786, 0,
	1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0, 0,
	0, 0, 1443, 0, 1461, 1460, 0, 0, 0, 0,
	789, 0, 822, 0, 0, 789, 0, 0, 0, 0,
	789, 0, 789, 0, 0, 0, 0, 1955, 0, 0,
	785, 0, 0, 0, 0, 0, 1945, 1946, 1947, 963,
	963, 1037, 115, 0, 0, 1939, 1940, 1941, 1942, 1943,
	1944, 0, 0, 153, 0, 0, 0, 0, 1448, 1037,
	4522, 0, 0, 1449, 920, 147, 0, 1458, 0, 0,
	0, 130, 0, 135, 128, 0, 0, 144, 0, 117,
	0, 1450, 0, 0, 0, 0, 963, 0, 0, 0,
	4541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 132, 1814, 1037, 0, 0, 0, 0, 0, 1037,
	131, 1464, 0, 0, 0, 0, 0, 5191, 0, 920,
	920, 0, 0, 0, 136, 124, 0, 0, 0, 1451,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 920,
	920, 122, 0, 0, 0, 0, 0, 0, 0, 920,
	0, 0, 0, 0, 785, 0, 0, 0, 1457, 0,
	0, 0, 3148, 785, 789, 5795, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	141, 1955, 0, 0, 142, 0, 0, 0, 789, 1462,
	1945, 1946, 1947, 0, 0, 0, 134, 5637, 0, 1939,
	1940, 1941, 1942, 1943, 1944, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3148, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 1447, 0, 0, 0, 0, 0, 1814, 1814,
	1814, 0, 0, 0, 0, 112, 129, 0, 120, 0,
	0, 0, 114, 0, 3966, 0, 123, 0, 118, 1452,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 145,
	0, 5853, 0, 0, 0, 0, 0, 1037, 1037, 127,
	1037, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	785, 0, 693, 0, 1454, 0, 0, 789, 0, 0,
	1453, 106, 0, 741, 741, 741, 741, 764, 765, 0,
	0, 0, 920, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 125, 0, 839, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 5853, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 0, 906, 5917, 910, 0, 0, 0, 925,
	926, 0, 920, 931, 932, 0, 1037, 0, 0, 158,
	963, 963, 0, 0, 1037, 0, 0, 0, 0, 0,
	920, 920, 151, 0, 0, 0, 960, 0, 0, 0,
	1456, 0, 971, 0, 974, 0, 976, 977, 978, 979,
	980, 1459, 0, 822, 989, 0, 822, 822, 994, 0,
	0, 920, 0, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 0, 1966, 0, 789, 1936, 0, 0,
	2423, 1948, 1949, 1950, 2425, 2426, 1461, 1460, 0, 920,
	0, 0, 0, 2491, 0, 920, 2492, 3148, 0, 0,
	2497, 0, 2489, 0, 0, 0, 0, 2494, 2498, 2493,
	0, 2495, 0, 0, 0, 2496, 1959, 1960, 2490, 0,
	0, 0, 0, 0, 0, 2499, 0, 0, 0, 1037,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 789, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 789,
	0, 0, 789, 789, 789, 0, 789, 0, 0, 0,
	0, 0, 0, 1464, 4893, 0, 0, 789, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 0, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 789, 0, 0, 0, 789, 789,
	0, 0, 0, 0, 0, 0, 0, 4935, 0, 0,
	1037, 0, 789, 0, 0, 0, 0, 789, 0, 1037,
	789, 789, 789, 789, 789, 789, 789, 789, 789, 789,
	789, 789, 789, 0, 789, 0, 5684, 0, 0, 0,
	0, 789, 789, 789, 1037, 0, 0, 0, 0, 789,
	0, 789, 0, 0, 0, 0, 0, 0, 789, 1814,
	0, 0, 789, 0, 0, 0, 0, 789, 0, 0,
	0, 789, 0, 0, 0, 0, 0, 0, 0, 789,
	789, 789, 0, 0, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 789, 1966, 0, 789, 1936, 0, 0, 0,
	1948, 1949, 1950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2491, 0, 0, 2492, 0, 0, 0, 2497,
	0, 2489, 789, 789, 0, 789, 2494, 2498, 2493, 0,
	2495, 0, 0, 0, 2496, 1959, 1960, 2490, 0, 0,
	0, 0, 0, 0, 2499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 0,
	0, 0, 0, 0, 1037, 789, 789, 0, 0, 3148,
	3148, 0, 0, 3148, 0, 1037, 1037, 0, 0, 1037,
	0, 1966, 0, 0, 1936, 920, 0, 1527, 1948, 1949,
	1950, 2737, 0, 5361, 0, 0, 0, 789, 0, 0,
	2491, 0, 0, 2492, 0, 0, 0, 2497, 0, 2489,
	0, 0, 0, 1037, 2494, 2498, 2493, 0, 2495, 0,
	0, 0, 2496, 1959, 1960, 2490, 1448, 0, 0, 0,
	0, 1449, 2499, 0, 0, 1458, 0, 0, 0, 0,
	920, 0, 0, 0, 920, 920, 0, 0, 0, 1533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 789, 0, 0, 1966, 0, 0,
	1936, 0, 0, 0, 1948, 1949, 1950, 0, 0, 0,
	0, 0, 0, 1529, 0, 0, 2491, 106, 0, 2492,
	0, 0, 0, 2497, 0, 2489, 0, 1451, 0, 789,
	2494, 2498, 2493, 1137, 2495, 0, 0, 0, 2496, 1959,
	1960, 2490, 0, 0, 0, 741, 0, 0, 2499, 106,
	0, 1814, 1037, 1814, 0, 0, 1457, 0, 0, 1955,
	0, 0, 0, 0, 1814, 0, 0, 1168, 1945, 1946,
	1947, 0, 0, 0, 0, 5623, 0, 1939, 1940, 1941,
	1942, 1943, 1944, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5318, 1966, 0, 0,
	1936, 0, 0, 1528, 1948, 1949, 1950, 0, 0, 0,
	1447, 0, 0, 0, 0, 1814, 2491, 1037, 839, 2492,
	0, 1470, 0, 2497, 0, 2489, 0, 0, 5247, 0,
	2494, 2498, 2493, 0, 2495, 0, 0, 1452, 2496, 1959,
	1960, 2490, 0, 1524, 0, 0, 920, 0, 2499, 5261,
	5262, 0, 1384, 0, 0, 0, 0, 0, 0, 0,
	1814, 0, 0, 0, 0, 0, 1521, 0, 0, 0,
	0, 0, 1454, 0, 0, 1037, 1037, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 0, 1426, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 789, 0, 1455, 0, 0, 789, 789, 0, 0,
	0, 0, 1532, 789, 789, 0, 0, 0, 0, 0,
	789, 0, 0, 0, 0, 0, 0, 789, 0, 1541,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 3084,
	0, 0, 1570, 0, 0, 0, 0, 114, 1456, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 1525, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 0, 0, 0, 0, 0, 0,
	1522, 789, 0, 0, 789, 0, 789, 1520, 1955, 0,
	0, 1530, 1469, 0, 1461, 1460, 0, 1945, 1946, 1947,
	1037, 0, 0, 0, 5600, 789, 1939, 1940, 1941, 1942,
	1943, 1944, 789, 0, 0, 0, 789, 789, 0, 110,
	789, 0, 0, 109, 111, 0, 789, 0, 1523, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 155, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 1037, 1955, 0, 0, 0,
	1037, 0, 0, 159, 0, 1945, 1946, 1947, 1037, 0,
	113, 0, 0, 0, 1939, 1940, 1941, 1942, 1943, 1944,
	0, 1464, 0, 0, 0, 0, 146, 789, 108, 0,
	741, 0, 741, 741, 741, 0, 152, 741, 741, 741,
	0, 0, 741, 1814, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1781, 0,
	0, 0, 789, 0, 1790, 1791, 0, 0, 0, 920,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 0, 1955, 0, 0, 789, 0, 0, 0, 0,
	0, 1945, 1946, 1947, 0, 0, 0, 0, 0, 0,
	1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 147, 0, 1037, 0, 0, 0, 130, 0, 135,
	128, 0, 0, 144, 0, 117, 0, 0, 920, 0,
	0, 920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 1037, 0, 0,
	0, 0, 0, 103, 0, 789, 0, 0, 0, 0,
	136, 124, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 1955, 0, 0, 5602, 0, 122, 0, 1037,
	1037, 1945, 1946, 1947, 0, 0, 0, 0, 5290, 0,
	1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 0, 920,
	0, 0, 0, 0, 0, 138, 141, 0, 1966, 0,
	142, 1936, 0, 0, 0, 1948, 1949, 1950, 0, 0,
	0, 0, 134, 0, 0, 0, 2547, 2491, 0, 789,
	2492, 0, 0, 0, 2497, 140, 2489, 789, 789, 789,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 0, 121, 0, 2583, 0, 2499,
	0, 0, 0, 789, 789, 0, 0, 789, 789, 789,
	0, 112, 129, 0, 120, 3095, 0, 0, 114, 0,
	0, 0, 123, 0, 118, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 789, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 789, 789, 116, 0, 0, 0, 0, 0, 0,
	0, 1037, 0, 0, 0, 0, 789, 789, 3187, 0,
	0, 0, 0, 0, 0, 1814, 0, 0, 0, 143,
	2703, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 125, 0, 0, 3084, 0, 0, 0, 0,
	789, 0, 0, 0, 0, 1037, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3229, 3229, 0, 0,
	0, 0, 0, 0, 0, 0, 2757, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 1966, 0, 0, 1936, 789, 0, 0, 1948,
	1949, 1950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2491, 930, 930, 2492, 0, 0, 789, 2497, 0,
	2489, 0, 0, 0, 0, 2494, 2498, 2493, 2839, 2495,
	0, 2841, 0, 2496, 1959, 1960, 2490, 1037, 0, 1966,
	0, 0, 1936, 2499, 0, 0, 1948, 1949, 1950, 920,
	0, 0, 0, 0, 0, 0, 0, 5810, 2491, 0,
	789, 2492, 0, 0, 0, 2497, 0, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 0, 2495, 920, 920, 0,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 0,
	2499, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 789, 0, 0, 0, 0, 789, 1966, 789, 0,
	1936, 0, 0, 0, 1948, 1949, 1950, 0, 0, 0,
	0, 789, 0, 0, 0, 0, 2491, 0, 0, 2492,
	0, 930, 0, 2497, 0, 2489, 0, 0, 0, 789,
	2494, 2498, 2493, 0, 2495, 0, 789, 0, 2496, 1959,
	1960, 2490, 0, 789, 0, 0, 2930, 0, 2499, 2933,
	789, 0, 0, 0, 0, 789, 0, 0, 3273, 0,
	0, 0, 741, 741, 0, 0, 1527, 741, 741, 0,
	741, 741, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	1966, 790, 0, 1936, 0, 0, 0, 1948, 1949, 1950,
	0, 0, 0, 0, 0, 0, 0, 0, 1037, 2491,
	0, 0, 2492, 0, 0, 1037, 2497, 0, 2489, 0,
	0, 0, 0, 2494, 2498, 2493, 0, 2495, 1533, 0,
	0, 2496, 1959, 1960, 2490, 0, 0, 0, 0, 0,
	0, 2499, 0, 0, 789, 0, 0, 1814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 789, 1529, 0, 0, 0, 0, 0, 920, 789,
	789, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 1945, 1946, 1947, 0, 789, 0, 0, 5263,
	0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0,
	0, 0, 0, 0, 0, 1037, 0, 1037, 1037, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 1966, 0,
	0, 1936, 0, 0, 0, 1948, 1949, 1950, 0, 789,
	0, 0, 0, 0, 789, 789, 789, 2491, 789, 0,
	2492, 0, 0, 0, 2497, 0, 2489, 789, 1814, 0,
	1518, 2494, 2498, 2493, 0, 2495, 0, 0, 4872, 2496,
	1959, 1960, 2490, 0, 0, 0, 0, 0, 0, 2499,
	0, 0, 1528, 0, 0, 1037, 789, 922, 1814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 922,
	0, 0, 0, 0, 1448, 1814, 0, 0, 0, 1449,
	0, 920, 0, 1458, 0, 0, 789, 0, 0, 964,
	922, 0, 1524, 0, 964, 0, 964, 0, 0, 0,
	0, 0, 0, 922, 922, 2423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 922, 922,
	922, 1966, 0, 0, 1936, 3229, 0, 0, 1948, 1949,
	1950, 0, 0, 0, 0, 0, 3274, 0, 0, 1526,
	2491, 0, 0, 2492, 0, 1451, 0, 2497, 0, 2489,
	0, 0, 922, 0, 2494, 2498, 2493, 1955, 2495, 3084,
	0, 0, 2496, 1959, 1960, 2490, 1945, 1946, 1947, 0,
	789, 0, 2499, 5242, 1457, 1939, 1940, 1941, 1942, 1943,
	1944, 1532, 2423, 3769, 0, 0, 0, 0, 0, 0,
	0, 789, 0, 789, 789, 0, 0, 0, 0, 789,
	0, 0, 0, 0, 1955, 1462, 0, 0, 0, 0,
	0, 0, 0, 1945, 1946, 1947, 114, 0, 0, 1519,
	5220, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0,
	0, 0, 0, 1525, 0, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 1522,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 3275, 0, 1452, 0, 0, 789, 0,
	0, 789, 1955, 0, 0, 0, 0, 789, 789, 0,
	0, 1945, 1946, 1947, 0, 0, 0, 1523, 5080, 3276,
	1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0, 0,
	1454, 920, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3916, 0, 3920,
	0, 0, 0, 0, 789, 0, 0, 0, 920, 0,
	0, 0, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1527, 1955, 0, 0, 789, 789,
	0, 0, 789, 0, 1945, 1946, 1947, 0, 0, 0,
	0, 5063, 0, 1939, 1940, 1941, 1942, 1943, 1944, 920,
	1966, 0, 789, 1936, 0, 0, 1456, 1948, 1949, 1950,
	0, 789, 0, 789, 0, 0, 0, 1459, 0, 2491,
	0, 0, 2492, 0, 1527, 0, 2497, 0, 2489, 0,
	0, 0, 0, 2494, 2498, 2493, 1533, 2495, 0, 0,
	0, 2496, 1959, 1960, 2490, 0, 0, 0, 0, 0,
	4170, 2499, 1461, 1460, 0, 0, 0, 106, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 789,
	1529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 789, 0, 0, 0, 0, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1955, 0, 0, 789, 0, 0, 0,
	0, 0, 1945, 1946, 1947, 0, 0, 0, 4834, 789,
	1529, 1939, 1940, 1941, 1942, 1943, 1944, 1037, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	1814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 0, 922, 1258, 0, 789, 789, 0, 0,
	0, 0, 0, 922, 0, 0, 922, 0, 0, 0,
	0, 1814, 789, 922, 0, 0, 922, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 789,
	1524, 0, 0, 0, 0, 0, 1955, 0, 0, 1814,
	1528, 1966, 0, 3301, 1936, 1945, 1946, 1947, 1948, 1949,
	1950, 0, 5054, 1521, 1939, 1940, 1941, 1942, 1943, 1944,
	2491, 3315, 0, 2492, 0, 922, 0, 2497, 0, 2489,
	0, 0, 0, 3332, 2494, 2498, 2493, 1526, 2495, 0,
	1524, 3343, 2496, 1959, 1960, 2490, 0, 0, 0, 0,
	0, 0, 2499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 1229, 1229, 0, 0,
	0, 0, 0, 3388, 3389, 3390, 0, 0, 0, 1532,
	0, 0, 0, 0, 3397, 0, 0, 1526, 0, 0,
	0, 0, 3408, 0, 3412, 3413, 773, 0, 0, 0,
	3417, 782, 0, 3421, 3422, 0, 0, 3429, 0, 3431,
	3434, 1546, 0, 0, 114, 0, 0, 1519, 0, 0,
	0, 0, 0, 3456, 3457, 106, 0, 3461, 3462, 1532,
	0, 1525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3471, 3472, 0, 1522, 0, 0,
	0, 0, 0, 0, 1520, 3485, 0, 3273, 1530, 0,
	0, 1515, 0, 0, 114, 1527, 0, 1519, 0, 3496,
	3497, 3498, 3499, 3500, 0, 0, 3502, 0, 0, 0,
	3506, 1525, 0, 0, 3509, 3510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1523, 0, 1522, 0, 0,
	0, 0, 0, 0, 1520, 3518, 3519, 0, 1530, 3524,
	0, 3525, 0, 0, 0, 0, 3526, 0, 3527, 3528,
	0, 0, 0, 3529, 0, 0, 0, 1533, 0, 0,
	0, 0, 1076, 1077, 1079, 1083, 0, 2423, 0, 0,
	0, 0, 3542, 0, 0, 1523, 0, 0, 0, 3545,
	0, 0, 3546, 0, 0, 0, 0, 0, 0, 3555,
	3556, 1529, 0, 0, 0, 0, 0, 0, 0, 0,
	3573, 0, 0, 0, 0, 1955, 0, 0, 0, 0,
	0, 0, 0, 0, 1945, 1946, 1947, 0, 0, 0,
	0, 0, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	922, 0, 0, 0, 922, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 1518,
	0, 0, 106, 0, 922, 0, 0, 106, 106, 1966,
	922, 0, 1936, 0, 0, 285, 1948, 1949, 1950, 3229,
	0, 1528, 3229, 0, 0, 0, 0, 0, 2491, 0,
	0, 2492, 0, 0, 0, 2497, 0, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 0, 2495, 0, 0, 0,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 0,
	2499, 1524, 4809, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 964, 0, 0, 0, 964, 964, 3692,
	0, 0, 0, 1448, 1521, 0, 0, 0, 1449, 922,
	1806, 0, 1458, 0, 1896, 1816, 0, 0, 0, 0,
	0, 0, 1912, 0, 1919, 3274, 0, 0, 1526, 0,
	0, 1930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2412, 2413, 2414, 2415, 2416, 0, 0, 0,
	0, 0, 0, 2421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 0, 0, 0, 1451, 0, 1955, 2439, 0, 0,
	0, 0, 0, 0, 0, 1945, 1946, 1947, 0, 0,
	0, 0, 4811, 0, 1939, 1940, 1941, 1942, 1943, 1944,
	0, 0, 0, 1457, 0, 114, 0, 0, 3269, 0,
	3229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 1525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 921, 1462, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 1530,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 3275, 0, 0, 0, 0, 921, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 921, 921, 921, 0, 1523, 1966, 3276, 0,
	1936, 0, 0, 0, 1948, 1949, 1950, 0, 0, 0,
	0, 0, 0, 922, 1452, 0, 2491, 0, 1091, 1816,
	1094, 1816, 0, 2497, 0, 2489, 921, 1096, 0, 0,
	2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496, 1959,
	1960, 2490, 0, 0, 922, 0, 0, 0, 2499, 1454,
	922, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1966,
	0, 0, 1936, 0, 0, 0, 1948, 1949, 1950, 0,
	0, 3950, 0, 3953, 0, 0, 0, 0, 2491, 0,
	1455, 2492, 0, 0, 0, 2497, 0, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 782, 2495, 0, 1083, 0,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 1966,
	2499, 3990, 1936, 0, 0, 0, 1948, 1949, 1950, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 2491, 0,
	0, 2492, 0, 0, 0, 2497, 1459, 2489, 0, 4032,
	4807, 0, 2494, 2498, 2493, 0, 2495, 4040, 0, 4040,
	2496, 1959, 1960, 2490, 0, 4049, 0, 0, 1966, 0,
	2499, 1936, 0, 0, 0, 1948, 1949, 1950, 0, 4165,
	0, 1461, 1460, 0, 0, 0, 0, 2491, 4808, 922,
	2492, 0, 0, 0, 2497, 0, 2489, 0, 0, 0,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 0, 0, 0, 0, 0, 2499,
	0, 4803, 0, 0, 0, 0, 4110, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 1945, 1946, 1947, 4134, 4135, 4136, 4137,
	0, 0, 1939, 1940, 1941, 1942, 1943, 1944, 1450, 0,
	0, 0, 0, 0, 0, 922, 0, 922, 922, 922,
	922, 0, 0, 3229, 3229, 0, 0, 3229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 4162, 4163, 0, 4166,
	4167, 4168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 964, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4186, 0,
	0, 1966, 0, 0, 1936, 922, 0, 0, 1948, 1949,
	1950, 0, 0, 0, 0, 0, 0, 4201, 0, 0,
	2491, 0, 0, 2492, 0, 4202, 0, 2497, 0, 2489,
	0, 0, 0, 0, 2494, 2498, 2493, 0, 2495, 0,
	0, 0, 2496, 1959, 1960, 2490, 0, 0, 0, 0,
	0, 0, 2499, 1083, 0, 1669, 0, 1083, 1083, 0,
	1688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1806, 1806, 1806, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4240, 0, 1083, 0, 0, 200, 921, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 921, 0, 197,
	921, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 1955, 0, 0, 0, 1772, 0, 0, 4272,
	4273, 1945, 1946, 1947, 0, 0, 0, 0, 4280, 0,
	1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0, 921,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 2412, 2413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 0, 0, 0, 3042,
	3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052,
	3053, 3054, 3055, 3056, 3057, 0, 3063, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 1816, 0, 0, 0,
	0, 0, 190, 1945, 1946, 1947, 0, 0, 0, 2433,
	2435, 2436, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 1945, 1946, 1947, 0, 0, 0, 0,
	0, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 177,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	1448, 0, 183, 1955, 0, 1449, 0, 201, 1966, 1458,
	0, 1936, 1945, 1946, 1947, 1948, 1949, 1950, 0, 3229,
	0, 1939, 1940, 1941, 1942, 1943, 1944, 2491, 0, 0,
	2492, 0, 0, 0, 2497, 0, 2489, 0, 0, 0,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 0, 0, 0, 0, 0, 2499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 106, 2589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 2616, 0, 189, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	4493, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 1462, 176, 0, 921, 0, 0, 0, 921, 921,
	184, 0, 4040, 0, 0, 0, 0, 0, 0, 4521,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 921, 188, 0, 199,
	0, 198, 180, 0, 1447, 0, 1955, 0, 921, 0,
	0, 0, 179, 0, 921, 1945, 1946, 1947, 0, 203,
	0, 202, 4794, 0, 1939, 1940, 1941, 1942, 1943, 1944,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2770, 0, 0, 2775, 0, 0, 0,
	0, 0, 0, 4040, 1966, 0, 0, 1936, 0, 0,
	194, 1948, 1949, 1950, 0, 0, 1454, 0, 0, 4590,
	4591, 0, 1453, 2491, 0, 0, 2492, 0, 0, 0,
	2497, 0, 2489, 0, 0, 0, 4607, 2494, 2498, 2493,
	0, 2495, 0, 921, 0, 2496, 1959, 1960, 2490, 1815,
	0, 0, 0, 0, 0, 2499, 4637, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 4642, 0, 0, 0, 0, 0, 0, 0,
	0, 4644, 4645, 4646, 0, 0, 4649, 0, 0, 4652,
	4653, 4654, 4655, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4664, 0, 0, 0, 0, 0, 0, 4667,
	0, 4668, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4682, 1459, 0, 2879, 0, 0, 0, 0,
	4687, 4688, 106, 0, 0, 4691, 4692, 4693, 4694, 4695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1806, 0, 3474, 0, 1461, 1460,
	0, 0, 0, 0, 3122, 3124, 0, 0, 0, 0,
	0, 3130, 0, 3141, 3144, 0, 3155, 3156, 3161, 3164,
	0, 0, 0, 0, 0, 3172, 0, 0, 3229, 3176,
	3182, 3124, 3124, 3189, 3124, 0, 3124, 3124, 3124, 0,
	0, 1234, 0, 0, 0, 0, 0, 3204, 0, 0,
	0, 3055, 3056, 3057, 3063, 0, 0, 0, 0, 0,
	1966, 0, 0, 1936, 0, 0, 0, 1948, 1949, 1950,
	0, 0, 0, 0, 0, 1450, 0, 921, 0, 2491,
	0, 0, 2492, 1815, 0, 1815, 2497, 0, 2489, 0,
	0, 0, 0, 2494, 2498, 2493, 2423, 2495, 0, 0,
	0, 2496, 1959, 1960, 2490, 1464, 0, 0, 921, 0,
	0, 2499, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1816, 0, 0, 0,
	0, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 1945, 1946, 1947, 0, 0, 0, 0, 4786,
	0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0,
	0, 1816, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1966, 0, 0, 1936, 0, 0, 0,
	1948, 1949, 1950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2491, 0, 0, 2492, 0, 0, 0, 2497,
	0, 2489, 0, 0, 0, 741, 2494, 2498, 2493, 0,
	2495, 0, 0, 1816, 2496, 1959, 1960, 2490, 0, 0,
	0, 0, 0, 0, 2499, 0, 0, 0, 922, 0,
	0, 0, 1816, 1966, 0, 0, 1936, 0, 0, 0,
	1948, 1949, 1950, 0, 0, 4420, 0, 0, 0, 0,
	0, 0, 2491, 0, 0, 2492, 0, 0, 0, 2497,
	0, 2489, 0, 921, 0, 0, 2494, 2498, 2493, 0,
	2495, 0, 0, 0, 2496, 1959, 1960, 2490, 0, 0,
	0, 0, 0, 0, 2499, 0, 3504, 0, 0, 1966,
	0, 0, 1936, 0, 0, 0, 1948, 1949, 1950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2491, 0,
	0, 2492, 0, 922, 922, 2497, 0, 2489, 0, 0,
	4943, 0, 2494, 2498, 2493, 0, 2495, 0, 0, 0,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 921,
	2499, 921, 921, 921, 921, 0, 0, 0, 922, 1955,
	0, 0, 0, 0, 0, 922, 0, 0, 1945, 1946,
	1947, 0, 0, 0, 0, 4669, 0, 1939, 1940, 1941,
	1942, 1943, 1944, 0, 0, 0, 106, 1816, 0, 0,
	0, 0, 0, 0, 4347, 0, 964, 0, 964, 964,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5000, 921,
	0, 5002, 0, 0, 0, 0, 0, 5005, 5006, 5007,
	0, 0, 5010, 5011, 5012, 0, 0, 0, 922, 0,
	0, 0, 5016, 5017, 0, 0, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1966,
	0, 0, 1936, 1816, 0, 0, 1948, 1949, 1950, 922,
	0, 0, 5034, 5035, 5036, 0, 0, 0, 2491, 0,
	0, 2492, 0, 0, 0, 2497, 5040, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 0, 2495, 0, 0, 0,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 0,
	2499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 964, 964, 1806, 0,
	0, 0, 0, 3707, 3708, 0, 3710, 0, 0, 0,
	1919, 0, 0, 0, 0, 1955, 0, 0, 2421, 0,
	0, 5068, 0, 0, 1945, 1946, 1947, 0, 0, 0,
	1930, 4600, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0,
	0, 0, 0, 0, 1966, 0, 0, 1936, 0, 0,
	0, 1948, 1949, 1950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2491, 5110, 0, 2492, 0, 3740, 3741,
	2497, 0, 2489, 0, 3747, 0, 0, 2494, 2498, 2493,
	0, 2495, 0, 0, 0, 2496, 1959, 1960, 2490, 0,
	0, 0, 0, 0, 0, 2499, 0, 0, 0, 0,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3776, 5174, 0, 0, 0, 0, 5181, 0, 0, 0,
	0, 0, 0, 0, 3788, 0, 0, 0, 1955, 0,
	0, 0, 0, 0, 0, 3805, 0, 1945, 1946, 1947,
	0, 4040, 0, 0, 4579, 0, 1939, 1940, 1941, 1942,
	1943, 1944, 1448, 0, 0, 5225, 0, 1449, 0, 0,
	5228, 1458, 0, 0, 0, 0, 5234, 3161, 3161, 3161,
	0, 0, 0, 0, 0, 0, 0, 3140, 0, 0,
	0, 1816, 0, 3860, 0, 0, 0, 1816, 1955, 0,
	0, 0, 0, 0, 0, 0, 0, 1945, 1946, 1947,
	0, 0, 0, 0, 0, 3882, 1939, 1940, 1941, 1942,
	1943, 1944, 0, 0, 0, 0, 0, 0, 0, 5270,
	5271, 0, 0, 1451, 0, 5276, 0, 0, 0, 5278,
	3896, 0, 0, 0, 0, 3900, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 1266, 0, 5291, 0,
	0, 0, 1457, 1945, 1946, 1947, 0, 0, 0, 0,
	786, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1816, 0, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 922, 3386, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 922, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 0, 0, 0, 0, 0, 0, 1966, 0,
	0, 1936, 0, 0, 4075, 1948, 1949, 1950, 1454, 0,
	0, 0, 0, 0, 1453, 0, 0, 2491, 0, 0,
	2492, 0, 0, 0, 2497, 0, 2489, 0, 4102, 0,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 1955, 0, 0, 0, 0, 2499,
	0, 0, 4040, 1945, 1946, 1947, 0, 0, 0, 1455,
	4360, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0,
	5439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1816, 1816, 1816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	1014, 1014, 0, 0, 0, 1459, 0, 0, 5473, 0,
	0, 5476, 0, 0, 1016, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3460, 0,
	1461, 1460, 0, 0, 922, 3557, 0, 0, 3561, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1015, 1955,
	0, 0, 0, 0, 0, 0, 0, 0, 1945, 1946,
	1947, 0, 0, 0, 0, 4341, 0, 1939, 1940, 1941,
	1942, 1943, 1944, 0, 0, 0, 0, 0, 1966, 0,
	0, 1936, 0, 0, 922, 1948, 1949, 1950, 0, 0,
	3859, 0, 0, 0, 0, 0, 0, 2491, 0, 0,
	2492, 1083, 922, 922, 2497, 0, 2489, 1450, 0, 0,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 0, 0, 0, 1448, 0, 2499,
	0, 0, 1449, 922, 0, 0, 1458, 1464, 0, 0,
	0, 0, 0, 0, 922, 0, 0, 0, 964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 0, 5606, 0, 0, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669,
	0, 0, 5626, 5627, 0, 0, 3669, 3669, 1451, 0,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1806, 0, 0, 0, 1806, 0, 0, 0, 0,
	0, 1951, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 1815, 0, 0, 4310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4318, 4319,
	0, 0, 4322, 0, 0, 0, 4325, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 4330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4336, 0, 0, 0, 0, 0, 0, 1815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4346, 0, 0,
	0, 1447, 921, 0, 4351, 0, 1815, 0, 3124, 3124,
	0, 0, 5721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4362, 0, 0, 5731, 0, 4364, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1951, 0, 5747,
	0, 4383, 4384, 4385, 0, 0, 0, 0, 0, 0,
	0, 4391, 0, 1454, 0, 0, 0, 0, 3172, 1453,
	0, 1816, 0, 0, 0, 0, 0, 3122, 0, 0,
	0, 3124, 0, 1955, 0, 0, 0, 921, 921, 4417,
	4418, 4419, 1945, 1946, 1947, 0, 0, 0, 1229, 3877,
	0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3124, 0, 4462, 0, 0, 0, 0,
	0, 1815, 0, 5805, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 3937, 0, 3937, 0, 0, 4497, 0, 0, 0,
	0, 0, 0, 0, 0, 4502, 4503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3969, 1083,
	0, 0, 0, 2701, 0, 1461, 1460, 922, 0, 0,
	0, 0, 921, 0, 0, 1448, 0, 0, 0, 0,
	1449, 921, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4018, 0,
	0, 0, 0, 0, 0, 4029, 0, 1815, 0, 0,
	0, 0, 0, 921, 1083, 1083, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 922, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4056, 0, 0,
	0, 0, 1450, 1955, 0, 0, 1451, 0, 1966, 0,
	0, 1936, 1945, 1946, 1947, 1948, 1949, 1950, 0, 0,
	0, 1939, 1940, 1941, 1942, 1943, 1944, 2491, 0, 0,
	2492, 0, 1464, 0, 2497, 1457, 2489, 0, 0, 0,
	0, 2494, 2498, 2493, 0, 2495, 0, 0, 0, 2496,
	1959, 1960, 2490, 0, 5926, 0, 0, 0, 0, 2499,
	0, 3849, 0, 1816, 0, 1816, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1816, 0, 0, 0,
	0, 0, 1966, 0, 0, 1936, 0, 0, 0, 1948,
	1949, 1950, 0, 0, 3844, 0, 4149, 0, 0, 0,
	1014, 2491, 0, 0, 2492, 0, 0, 0, 2497, 1447,
	2489, 0, 0, 0, 1016, 2494, 2498, 2493, 0, 2495,
	0, 0, 0, 2496, 1959, 1960, 2490, 0, 0, 0,
	0, 0, 0, 2499, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1816, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 1014, 0, 1453, 922, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 0, 1816, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 1951, 0,
	0, 0, 1455, 0, 0, 1815, 0, 0, 0, 0,
	0, 1815, 1015, 4766, 0, 0, 0, 0, 0, 0,
	0, 0, 1690, 0, 0, 0, 0, 0, 0, 0,
	4775, 4776, 0, 0, 0, 0, 4780, 4781, 0, 0,
	0, 0, 0, 4784, 4785, 1014, 0, 1456, 0, 0,
	4788, 0, 0, 0, 0, 0, 0, 4790, 1459, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 1930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1951, 0,
	0, 2697, 0, 1461, 1460, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 1951, 0, 0, 0, 0, 0,
	921, 1951, 0, 3669, 4823, 0, 4826, 0, 0, 0,
	0, 0, 1951, 0, 0, 1014, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	1016, 0, 4845, 0, 0, 0, 0, 0, 1815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1808, 0, 0, 0, 921, 921, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 1015, 0, 921, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 1448, 0, 0, 4344,
	1966, 1449, 0, 1936, 0, 1458, 0, 1948, 1949, 1950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2491,
	0, 0, 2492, 0, 0, 0, 2497, 4930, 2489, 0,
	0, 0, 0, 2494, 2498, 2493, 0, 2495, 0, 0,
	0, 2496, 1959, 1960, 2490, 1816, 0, 0, 0, 0,
	0, 2499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 922, 0, 0, 1815, 1815, 1815, 0, 0, 0,
	0, 0, 0, 1955, 0, 4955, 0, 0, 0, 0,
	0, 0, 1945, 1946, 1947, 0, 1457, 0, 0, 0,
	0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4983, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 1462, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 1016, 0, 0, 921, 0,
	922, 0, 0, 922, 0, 0, 0, 1955, 0, 0,
	0, 0, 0, 0, 0, 0, 1945, 1946, 1947, 0,
	1447, 0, 0, 0, 0, 1939, 1940, 1941, 1942, 1943,
	1944, 1015, 0, 0, 0, 5026, 0, 0, 1015, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 921, 0,
	0, 0, 0, 0, 4018, 0, 0, 0, 0, 0,
	0, 1966, 0, 0, 1936, 1014, 921, 921, 1948, 1949,
	1950, 0, 0, 3810, 0, 0, 0, 0, 0, 1016,
	2491, 0, 1454, 2492, 0, 0, 0, 2497, 1453, 2489,
	0, 922, 1014, 0, 2494, 2498, 2493, 921, 2495, 0,
	0, 0, 2496, 1959, 1960, 2490, 2715, 0, 921, 0,
	0, 0, 2499, 0, 0, 0, 0, 0, 0, 5058,
	0, 0, 1015, 4555, 4556, 921, 4558, 5060, 5061, 5062,
	0, 921, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 4589, 5069, 0, 0, 0, 5072, 5073, 5074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 3124, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 4018, 1014, 0,
	1014, 5114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3817, 1016, 0, 1016, 0, 1340, 5131, 0, 0,
	0, 1339, 1492, 0, 1461, 1460, 0, 1816, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 1951, 1951, 1951, 1951, 1951, 0,
	0, 1016, 0, 1951, 0, 1015, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1966,
	0, 1951, 1936, 0, 4696, 0, 1948, 1949, 1950, 0,
	0, 0, 4708, 0, 0, 0, 0, 3151, 2491, 0,
	0, 2492, 0, 0, 1015, 2497, 0, 2489, 0, 0,
	0, 1450, 2494, 2498, 2493, 0, 2495, 0, 964, 4727,
	2496, 1959, 1960, 2490, 0, 0, 0, 0, 0, 0,
	2499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 1815, 0, 0, 0, 0,
	0, 0, 3669, 0, 3669, 0, 0, 0, 4752, 4752,
	4752, 4752, 4752, 4752, 4752, 1955, 4752, 4752, 0, 0,
	0, 922, 0, 0, 1945, 1946, 1947, 0, 0, 0,
	0, 0, 964, 1939, 1940, 1941, 1942, 1943, 1944, 0,
	0, 1014, 0, 1014, 0, 0, 0, 0, 0, 922,
	922, 0, 0, 0, 0, 1016, 0, 1016, 0, 0,
	0, 0, 0, 1808, 1808, 1808, 0, 0, 4789, 5304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 0,
	1015, 5331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1029, 1029, 0, 0, 0, 1028, 1028, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 921, 0, 0, 0,
	921, 921, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4908, 0, 0, 1955, 0, 0, 0,
	0, 0, 0, 0, 5434, 1945, 1946, 1947, 0, 1816,
	1015, 0, 0, 0, 1939, 1940, 1941, 1942, 1943, 1944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	922, 0, 0, 0, 0, 4936, 0, 1815, 0, 1815,
	0, 0, 0, 0, 0, 0, 5467, 0, 0, 0,
	1815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1966, 0, 0, 1936, 0, 0, 2421,
	1948, 1949, 1950, 0, 5502, 5502, 5502, 0, 5505, 0,
	0, 0, 2491, 0, 0, 2492, 0, 3124, 0, 2497,
	1816, 2489, 0, 0, 0, 0, 2494, 2498, 2493, 0,
	2495, 1815, 0, 0, 2496, 1959, 1960, 2490, 0, 0,
	0, 0, 0, 0, 2499, 0, 0, 0, 0, 0,
	1816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 1816, 0, 0,
	0, 0, 0, 922, 0, 0, 1815, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5029, 5030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3804, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 1945, 1946, 1947, 0, 0, 0, 0,
	0, 0, 1939, 1940, 1941, 1942, 1943, 1944, 0, 0,
	0, 0, 0, 0, 0, 0, 3669, 3669, 0, 0,
	0, 0, 3669, 0, 3669, 0, 0, 0, 0, 0,
	5625, 0, 0, 0, 0, 4752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5304, 0, 0, 0, 0, 0, 0, 0, 5502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1951, 1951, 1951, 1951, 1951, 1951,
	1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
	1274, 0, 0, 0, 0, 1951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3151, 3151, 0, 0, 0, 5705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5714, 0, 0, 0, 0, 0, 0, 0, 964,
	964, 0, 5154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1951, 0, 1951, 0, 0, 0,
	0, 0, 1951, 922, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1951, 0, 0, 1951, 0, 0, 3832,
	0, 3151, 3151, 3151, 0, 0, 964, 1951, 1951, 0,
	922, 0, 0, 1951, 5304, 0, 1951, 0, 0, 0,
	0, 0, 0, 0, 1951, 0, 0, 0, 1951, 0,
	0, 0, 0, 1342, 1951, 0, 0, 0, 0, 1815,
	0, 1951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1808, 1951, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 922, 0, 0, 0, 1808, 0, 1808, 0, 0,
	0, 0, 4018, 0, 0, 0, 0, 0, 0, 1966,
	0, 1808, 1936, 0, 0, 0, 1948, 1949, 1950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2491, 0,
	0, 2492, 0, 0, 0, 2497, 0, 2489, 0, 0,
	0, 0, 2494, 2498, 2493, 0, 2495, 0, 5502, 0,
	2496, 1959, 1960, 2490, 0, 0, 3669, 0, 0, 5823,
	2499, 0, 0, 0, 921, 0, 0, 921, 1014, 0,
	0, 0, 0, 0, 1013, 1013, 0, 1014, 0, 0,
	0, 0, 2715, 0, 0, 0, 0, 0, 0, 0,
	1029, 2715, 0, 0, 0, 1028, 0, 0, 1955, 0,
	0, 0, 0, 0, 0, 0, 0, 1945, 1946, 1947,
	0, 0, 0, 0, 3099, 0, 1939, 1940, 1941, 1942,
	1943, 1944, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 0, 1816, 0, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5373, 921, 0, 1083, 1016, 1014,
	0, 0, 0, 0, 0, 1029, 0, 0, 0, 0,
	1028, 0, 0, 1016, 0, 0, 0, 1806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1816, 0, 0, 0, 1031, 1031, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 964, 0, 0, 0, 0, 1015, 0, 0, 0,
	0, 1816, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 1014, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 2715,
	3492, 0, 0, 0, 0, 1029, 0, 0, 3495, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1815, 1015, 1015, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1029, 1029, 0, 0, 0,
	1028, 1028, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	1016, 5548, 5549, 5550, 5551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1966, 0, 0, 1936, 0, 0, 0,
	1948, 1949, 1950, 0, 1341, 0, 0, 1015, 0, 0,
	1014, 0, 2491, 1015, 0, 2492, 0, 0, 0, 2497,
	0, 2489, 0, 0, 1016, 921, 2494, 2498, 2493, 0,
	2495, 0, 0, 0, 2496, 1959, 1960, 2490, 0, 0,
	0, 0, 0, 0, 2499, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1951,
	1951, 0, 1951, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 1014, 1014, 0, 1016,
	0, 0, 1951, 1951, 1955, 3151, 3151, 0, 0, 1951,
	1016, 1016, 0, 1945, 1946, 1947, 0, 0, 2995, 1808,
	0, 0, 1939, 1940, 1941, 1942, 1943, 1944, 3832, 3832,
	0, 0, 0, 0, 1029, 0, 0, 0, 1951, 1028,
	0, 1029, 1015, 0, 0, 0, 1028, 0, 0, 0,
	1951, 0, 0, 1015, 1015, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 0, 1951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3151, 3151, 3151, 3151, 3151, 3151, 3151, 3151,
	3151, 3151, 3151, 3151, 3151, 0, 3151, 0, 3832, 3832,
	3832, 0, 0, 258, 0, 0, 0, 0, 2981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1478,
	0, 0, 1951, 1449, 0, 1029, 0, 1458, 0, 0,
	1028, 0, 0, 1815, 254, 0, 0, 0, 1030, 1030,
	0, 0, 0, 0, 1951, 255, 0, 0, 0, 0,
	0, 0, 1029, 0, 921, 0, 1192, 1028, 1951, 0,
	0, 0, 1951, 0, 0, 0, 0, 0, 0, 0,
	2980, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 260, 1480, 0, 0, 1451,
	0, 0, 0, 253, 1083, 2982, 0, 0, 1014, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 1190, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2983, 0, 0, 1815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 1013, 1015, 0, 0, 1029, 0,
	1029, 0, 0, 1028, 1815, 1028, 0, 0, 1014, 3151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1815, 1016, 0, 0, 0, 1014, 921, 0, 0,
	0, 0, 1447, 239, 2984, 0, 262, 1029, 0, 0,
	3492, 0, 1028, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 1193, 0, 0, 2985, 1452,
	0, 0, 0, 263, 0, 1015, 0, 0, 250, 1013,
	1014, 264, 0, 0, 0, 5880, 1014, 1951, 0, 0,
	0, 0, 0, 1015, 3492, 0, 0, 256, 2433, 0,
	1016, 0, 1194, 0, 1454, 0, 0, 0, 1195, 0,
	1453, 0, 0, 257, 1951, 0, 0, 0, 0, 0,
	0, 0, 0, 2979, 0, 0, 0, 1031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1955, 251,
	0, 0, 0, 1015, 0, 0, 5880, 1945, 1946, 1947,
	0, 1481, 0, 0, 0, 1455, 1939, 1940, 1941, 1942,
	1943, 1944, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 2977, 5880, 0, 0, 0, 4789, 0,
	0, 1482, 0, 0, 1483, 0, 0, 0, 1484, 0,
	0, 1029, 0, 1029, 1951, 0, 1028, 0, 1028, 0,
	1477, 0, 1031, 0, 0, 0, 0, 0, 0, 0,
	1485, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3469, 0, 1461, 1460, 1488, 1013,
	1013, 0, 0, 0, 1014, 1014, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 921, 2715, 3492,
	0, 3492, 0, 0, 0, 0, 0, 0, 0, 2825,
	0, 0, 1487, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 1015, 0, 1015, 0, 0, 0, 0, 1489,
	0, 0, 1951, 1450, 0, 0, 0, 0, 0, 0,
	1951, 1951, 0, 1029, 1951, 3832, 3832, 1951, 1028, 0,
	0, 0, 1951, 1014, 0, 0, 0, 0, 1951, 0,
	0, 1014, 1271, 1464, 0, 921, 0, 1016, 1951, 0,
	0, 0, 0, 1951, 0, 1016, 0, 0, 0, 0,
	0, 0, 1031, 1031, 1951, 0, 1951, 0, 3832, 3832,
	3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832,
	3832, 0, 0, 0, 3832, 1951, 1951, 1951, 0, 0,
	1015, 0, 0, 1951, 0, 0, 0, 0, 1015, 0,
	0, 258, 0, 0, 0, 0, 2821, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1951,
	1951, 1951, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 0, 0, 1014, 0, 1013, 0,
	0, 0, 0, 0, 1192, 1013, 0, 0, 0, 0,
	1016, 0, 0, 0, 1951, 0, 0, 0, 2823, 0,
	0, 0, 1808, 0, 0, 259, 1808, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 1815, 0, 0, 0,
	0, 253, 0, 2824, 0, 0, 0, 0, 0, 1951,
	0, 0, 0, 1015, 1951, 1951, 0, 0, 0, 0,
	0, 0, 0, 0, 1190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3832, 0, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 1815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 1014, 1030, 0,
	0, 1031, 0, 0, 0, 1815, 1014, 0, 1031, 0,
	0, 1016, 0, 0, 1448, 1478, 1010, 1010, 0, 1449,
	1016, 239, 2826, 1458, 262, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1193, 0, 1016, 2827, 0, 0, 0,
	0, 263, 0, 0, 1015, 0, 250, 0, 0, 264,
	0, 0, 0, 1015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 256, 0, 0, 0, 0,
	1194, 0, 1480, 0, 0, 1451, 1195, 0, 1015, 0,
	0, 257, 1031, 0, 0, 2828, 0, 0, 0, 0,
	0, 2829, 1013, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 251, 0, 1031,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 1462, 0, 0, 0, 2822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 1014, 0, 2715, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2715, 2715, 1447, 0,
	3492, 0, 0, 0, 0, 0, 0, 0, 1951, 0,
	0, 0, 0, 0, 0, 1479, 0, 1951, 1951, 0,
	1014, 0, 1951, 1951, 0, 1452, 1951, 1951, 1015, 0,
	1951, 0, 1951, 0, 1016, 1031, 0, 1031, 0, 1015,
	1015, 0, 0, 1015, 0, 0, 3151, 0, 0, 0,
	0, 0, 0, 1030, 1030, 0, 0, 0, 0, 0,
	1454, 0, 0, 0, 0, 1951, 1453, 0, 1951, 0,
	0, 0, 0, 0, 1031, 0, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1951, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 3151, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	1483, 0, 0, 3492, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1485, 1459, 1029, 0,
	0, 0, 1951, 1028, 0, 0, 0, 1029, 0, 0,
	0, 0, 1028, 0, 0, 0, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1951, 0, 0,
	1474, 0, 1461, 1460, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 1031, 0,
	1031, 1486, 0, 0, 0, 1951, 0, 1182, 3492, 0,
	0, 0, 249, 0, 0, 0, 0, 1013, 1487, 0,
	0, 0, 0, 0, 1029, 0, 0, 0, 0, 1028,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 1029,
	0, 0, 1030, 0, 1028, 0, 0, 0, 1951, 1030,
	0, 1015, 1014, 1014, 0, 1489, 0, 0, 0, 1450,
	0, 0, 1183, 0, 0, 0, 1016, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1951, 0, 1951, 1951, 1951, 0, 0, 0, 0, 1464,
	0, 1951, 3832, 3151, 1951, 1951, 1951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	1015, 0, 0, 0, 0, 1029, 1029, 0, 0, 0,
	1028, 1028, 0, 0, 1029, 0, 0, 0, 0, 1028,
	0, 0, 0, 1030, 0, 0, 1951, 0, 0, 258,
	1031, 0, 0, 0, 1180, 0, 0, 0, 0, 0,
	0, 3832, 3151, 1951, 0, 0, 0, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1192, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 1179, 0, 0, 0,
	0, 1016, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 253,
	1029, 1181, 0, 0, 0, 1028, 1029, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1190, 0, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1030, 1188, 1030, 0,
	0, 831, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 1014, 4906, 0, 0, 0,
	1029, 1016, 0, 0, 0, 1028, 1010, 0, 0, 2715,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 1951, 0, 0, 239,
	1185, 0, 262, 0, 1015, 0, 0, 0, 0, 0,
	0, 3832, 1015, 0, 0, 0, 0, 0, 0, 0,
	0, 1193, 0, 1951, 1186, 0, 0, 266, 0, 263,
	0, 0, 0, 0, 250, 0, 0, 264, 0, 0,
	0, 1010, 0, 0, 0, 1029, 0, 0, 3151, 0,
	1028, 3832, 0, 256, 0, 1951, 1029, 1029, 1194, 0,
	0, 1028, 1028, 0, 1195, 0, 0, 0, 0, 257,
	0, 0, 0, 1187, 0, 267, 0, 0, 0, 1178,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1016, 251, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 1030,
	0, 1030, 0, 0, 1014, 0, 1951, 1189, 0, 1176,
	0, 1010, 0, 0, 0, 0, 0, 1015, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 947,
	949, 0, 0, 0, 0, 0, 1014, 1014, 0, 1951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1016, 1016, 0, 0, 0, 1951, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1951, 0, 0, 1951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 1010, 1015, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
	0, 1030, 0, 1028, 0, 0, 238, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 1013, 205, 0, 0, 0, 218, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 209, 0, 0, 0, 0, 0, 1951, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 1029, 232,
	211, 0, 0, 1028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 0, 0, 0,
	0, 1028, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 3492, 0, 1013, 0,
	3151, 3151, 0, 0, 3151, 0, 0, 0, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 0,
	1029, 0, 0, 0, 0, 1028, 1029, 1951, 0, 0,
	0, 1028, 0, 0, 0, 0, 1951, 0, 0, 1015,
	0, 0, 0, 0, 0, 1031, 0, 0, 0, 0,
	1010, 0, 0, 0, 1031, 212, 0, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 213, 0, 0, 0, 0, 0, 0, 3492, 1013,
	1013, 0, 214, 3832, 3832, 0, 3832, 0, 1013, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 1031, 0, 0, 230, 0, 0, 0, 0, 0,
	0, 1015, 237, 0, 0, 0, 1031, 0, 0, 0,
	210, 1010, 217, 0, 0, 1951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 1029, 0, 1029, 0, 1028,
	1028, 0, 1028, 0, 1013, 0, 0, 0, 0, 0,
	1013, 0, 1031, 1031, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 249, 0, 0, 0, 248, 0,
	0, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	239, 222, 252, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 231, 0, 1013, 224, 0, 0, 228, 0,
	225, 0, 1014, 0, 1010, 207, 1010, 0, 226, 4906,
	0, 0, 0, 1029, 0, 0, 1016, 0, 1028, 0,
	0, 1029, 0, 0, 234, 1130, 1028, 0, 0, 227,
	0, 0, 0, 0, 1136, 233, 0, 0, 0, 0,
	235, 0, 0, 1010, 0, 0, 229, 0, 0, 0,
	236, 0, 0, 0, 0, 0, 0, 1031, 0, 1015,
	0, 0, 0, 1031, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	1013, 1013, 1014, 0, 1014, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1016, 0, 1016, 1016,
	0, 0, 254, 0, 0, 0, 0, 1031, 0, 0,
	0, 0, 0, 255, 0, 0, 1029, 0, 0, 0,
	0, 1028, 0, 0, 0, 0, 1347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 1015,
	0, 1015, 1015, 0, 1365, 259, 0, 0, 0, 0,
	0, 0, 1014, 260, 0, 0, 1373, 1376, 0, 1378,
	0, 253, 0, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 1010,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 0, 1031, 1031, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1029, 0, 0,
	0, 0, 1028, 1494, 0, 0, 1029, 0, 0, 0,
	0, 1028, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 1029, 0, 0, 0, 0, 1028, 0, 0, 0,
	0, 0, 1013, 247, 0, 0, 0, 0, 0, 266,
	0, 263, 1030, 0, 0, 0, 250, 0, 0, 264,
	0, 0, 0, 0, 0, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 1010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 1030, 0, 0, 0, 0, 0,
	0, 1720, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 1029, 1720, 0, 0, 1031, 1028, 0, 0, 0,
	0, 0, 1029, 1029, 1013, 0, 1029, 1028, 1028, 0,
	1013, 1028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1029, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1031, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 1030, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1031, 0, 0,
	0, 0, 0, 1031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 1029,
	0, 0, 0, 0, 1028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 1013,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1016, 0,
	2482, 0, 0, 1030, 1029, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 1030, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2532,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 1015, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1808, 0,
	0, 0, 1029, 1029, 0, 0, 0, 1028, 1028, 0,
	0, 1031, 1031, 0, 1031, 0, 0, 2598, 0, 0,
	0, 2602, 0, 0, 0, 0, 2614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2692, 0, 0, 2695, 0, 0, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1031, 0, 0, 0, 0, 0, 0, 0, 1031, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2756, 0, 0, 0,
	0, 2614, 2614, 2614, 0, 0, 0, 1029, 0, 0,
	0, 0, 1028, 0, 0, 0, 1030, 0, 0, 0,
	2780, 2781, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 1031, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 0, 1010, 0, 1030, 1029, 0, 0,
	0, 0, 1028, 1010, 0, 1029, 0, 0, 0, 0,
	1028, 0, 0, 0, 1030, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 1030, 0, 0, 1720, 1720, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 1130, 0, 1130, 1031, 2929, 0, 0, 2931, 2932,
	0, 0, 0, 1031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1029, 0, 0, 0, 0, 1028, 0, 0, 1031, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 1013, 0, 0,
	1013, 1010, 1010, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 0, 1029, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 1029, 0, 0,
	0, 1028, 1028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 1030, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1031, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 1031,
	1031, 0, 1010, 1031, 0, 0, 1720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3036, 0, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1031, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1029, 0,
	0, 0, 0, 1028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 0, 0, 0, 0, 1031, 0, 0, 0,
	0, 0, 1010, 1010, 1030, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 1030, 0, 0, 0, 0, 1031,
	1031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 1028, 0, 0,
	0, 0, 0, 0, 1010, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 0, 0, 0, 1030,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	1030, 1030, 0, 0, 1030, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 1030, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 1029, 1029, 0, 1028, 0, 1028,
	1028, 0, 0, 0, 1031, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 1029, 0, 0, 0, 0, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 0, 0,
	1013, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 1010, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3391, 3392,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1031, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 1030, 0, 0, 3436, 0, 0, 0, 0, 1010,
	0, 0, 1013, 0, 0, 0, 3458, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1031,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 3633, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 1010,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1030, 1030, 1013, 0, 1013, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1031,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1031,
	0, 1031, 1031, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3943, 0,
	3946, 0, 0, 3951, 0, 0, 0, 0, 3957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1031,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3993, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4045, 4046, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 1010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2614, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 1030, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 4311, 4312, 0, 0, 0, 0, 4317, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1010, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4518, 0, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4529, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2598, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4771, 4772, 4773, 4774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 1680, 774,
	0, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 0, 313, 794, 0, 362,
	399, 614, 0, 0, 459, 0, 512, 516, 1010, 605,
	1010, 1010, 5380, 0, 370, 1677, 799, 0, 805, 0,
	811, 1676, 581, 0, 801, 802, 807, 301, 689, 604,
	675, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 1678, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 0, 561, 436, 1010, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 0, 447, 504, 661, 0, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 629, 633,
	631, 627, 624, 628, 625, 626, 630, 386, 623, 4913,
	598, 607, 641, 621, 649, 606, 646, 616, 361, 645,
	610, 609, 655, 636, 637, 591, 651, 622, 620, 613,
	612, 608, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 611, 793, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 0, 0, 0, 796, 0, 0, 0, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	615, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 617, 618, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 634, 0, 427,
	428, 429, 0, 0, 430, 431, 432, 433, 434, 435,
	438, 635, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 638, 639, 455,
	457, 458, 640, 642, 643, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 644, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 647, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 0, 538, 648, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 650, 559, 560, 0,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 652, 571, 653, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 0, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 656, 657, 658, 659, 660, 662, 663, 664, 665,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5381, 0, 0, 1681, 1682, 5379, 0,
	0, 1720, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5461, 1818, 296,
	1824, 313, 794, 1834, 362, 399, 614, 1821, 1866, 459,
	1871, 512, 516, 1895, 605, 1828, 1831, 1841, 1844, 370,
	1849, 799, 1857, 805, 1867, 811, 1886, 581, 1892, 801,
	802, 807, 301, 689, 604, 675, 1880, 1826, 1884, 466,
	1877, 1853, 1893, 1870, 1882, 1863, 1868, 309, 1855, 1856,
	1860, 1869, 803, 800, 804, 810, 798, 808, 795, 806,
	1890, 503, 437, 654, 530, 308, 354, 341, 383, 425,
	537, 1825, 1843, 415, 585, 350, 439, 1876, 329, 472,
	1889, 561, 436, 1883, 544, 564, 1845, 456, 335, 495,
	551, 552, 792, 797, 1833, 813, 1820, 339, 340, 461,
	321, 469, 666, 632, 524, 482, 480, 1851, 447, 504,
	661, 1823, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 629, 633, 631, 627, 624, 628, 625,
	626, 630, 386, 623, 0, 598, 607, 641, 621, 649,
	606, 646, 616, 361, 645, 610, 609, 655, 636, 637,
	591, 651, 622, 620, 613, 612, 608, 1891, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 1819,
	298, 299, 300, 302, 303, 304, 791, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 318, 319,
	320, 611, 793, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 1835, 1836, 1837, 796,
	1838, 1839, 1840, 342, 343, 344, 345, 346, 347, 1842,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	1846, 365, 367, 1847, 368, 371, 1848, 372, 373, 374,
	375, 376, 377, 378, 379, 615, 380, 1850, 381, 382,
	384, 1852, 387, 388, 389, 390, 391, 1854, 392, 617,
	618, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 1858, 412,
	413, 414, 416, 1859, 417, 418, 421, 422, 423, 424,
	1861, 426, 634, 1862, 427, 428, 429, 1864, 1865, 430,
	431, 432, 433, 434, 435, 438, 635, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 638, 639, 455, 457, 458, 640, 642, 643,
	809, 473, 474, 475, 476, 477, 478, 479, 481, 1873,
	483, 484, 485, 644, 486, 487, 488, 489, 1874, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 1875,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 647, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 1878, 538, 648, 539, 540, 541, 542, 543, 1879,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 650, 559, 560, 1881, 562, 563, 812, 565, 566,
	567, 568, 569, 1885, 688, 570, 652, 571, 653, 572,
	573, 574, 575, 576, 577, 578, 580, 1887, 1888, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 1894, 597, 599, 601, 679, 656, 657, 658, 659,
	660, 662, 663, 664, 665, 602, 603, 619, 470, 464,
	420, 462, 463, 467, 468, 471, 1872, 1822, 1827, 1829,
	1830, 1832, 0, 0, 0, 0, 0, 0, 0, 0,
	1969, 0, 0, 0, 0, 0, 0, 1966, 0, 0,
	1936, 0, 0, 1811, 1948, 1949, 1950, 1980, 1982, 1964,
	2009, 2030, 0, 2081, 2127, 2097, 1952, 2214, 2220, 1953,
	2281, 2285, 0, 1961, 2011, 1937, 2061, 2076, 2091, 2103,
	1956, 1962, 1954, 2218, 1957, 2362, 2373, 2393, 1958, 1959,
	1960, 1938, 2354, 2411, 2180, 2339, 1991, 0, 1967, 2305,
	0, 0, 2228, 2343, 0, 0, 2005, 0, 0, 0,
	0, 2153, 2142, 2176, 2289, 2114, 2234, 2042, 2201, 2379,
	2271, 2190, 2385, 2303, 2004, 2070, 2054, 2106, 2171, 2312,
	1987, 2071, 2146, 2377, 2066, 2192, 0, 2033, 2236, 2378,
	2341, 2189, 2352, 2322, 2347, 2077, 2215, 2040, 2262, 2329,
	2330, 2000, 2113, 2035, 2388, 1985, 2045, 2053, 2223, 2024,
	2231, 2409, 2163, 2296, 2246, 2244, 0, 2203, 2272, 2404,
	0, 0, 2090, 0, 2084, 2222, 2396, 2031, 2370, 2265,
	2227, 2165, 2299, 2334, 2086, 2067, 2068, 2124, 2264, 2109,
	2043, 2384, 2160, 2164, 2162, 2158, 2155, 2159, 2156, 2157,
	2161, 2111, 2154, 0, 0, 2001, 2221, 2149, 2319, 1999,
	2268, 2107, 2080, 0, 0, 0, 2386, 2200, 2202, 0,
	2355, 2150, 2148, 2059, 2058, 2002, 2387, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1981, 1983, 1984, 1988,
	1989, 1990, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2006,
	2007, 2008, 2010, 2013, 2014, 2015, 2017, 2018, 2019, 2020,
	2021, 2022, 2025, 2026, 2027, 2028, 2029, 2032, 2034, 2036,
	2037, 2038, 2039, 2041, 2044, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2055, 2056, 0, 2057, 2060, 2062, 2063, 2064,
	2065, 2069, 2072, 2073, 2074, 2075, 2078, 2079, 2082, 2083,
	2085, 2087, 2088, 2089, 2092, 0, 2093, 2094, 2095, 2096,
	2098, 2099, 2100, 2101, 2102, 2104, 0, 0, 2105, 2108,
	2110, 2112, 2115, 2116, 2117, 2118, 0, 2119, 2120, 2121,
	2122, 2123, 2125, 0, 2126, 2128, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2144,
	2145, 2147, 0, 2151, 2152, 2167, 2168, 2169, 2170, 2172,
	2174, 2175, 2173, 2177, 2178, 2179, 2181, 2182, 2183, 2184,
	2185, 2186, 2187, 2188, 2191, 2193, 2194, 0, 2195, 2196,
	0, 2197, 2198, 2199, 2204, 2205, 2206, 2207, 2208, 2209,
	2210, 2211, 2212, 2213, 2216, 2217, 2219, 2233, 2235, 0,
	2237, 2238, 2239, 2240, 2241, 2242, 2243, 2245, 2247, 2248,
	2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258,
	2259, 2260, 2261, 2263, 2266, 2267, 2269, 2270, 2273, 2274,
	2275, 2276, 2277, 2278, 2279, 2280, 2282, 2283, 2284, 2286,
	2287, 2288, 2290, 2291, 2292, 2293, 2294, 2295, 2297, 2298,
	2300, 2301, 2302, 0, 2304, 2306, 2307, 2308, 2309, 2310,
	2311, 2314, 2313, 2315, 2316, 2317, 2318, 2320, 2321, 2323,
	2324, 2325, 2326, 2327, 2328, 2331, 2332, 2333, 2335, 2336,
	2337, 2338, 2340, 2342, 2344, 2346, 2345, 2348, 2349, 2350,
	2351, 2353, 2356, 2357, 2358, 2359, 2360, 2361, 2363, 2364,
	2365, 2366, 2367, 2368, 2369, 2371, 0, 2372, 2374, 2375,
	2376, 2380, 2381, 2382, 2383, 2389, 2390, 2391, 2392, 2394,
	0, 0, 2395, 2397, 2398, 2399, 2400, 2401, 2402, 2403,
	2405, 2406, 2407, 2408, 0, 2410, 2143, 2232, 2226, 2166,
	2224, 2225, 2229, 2230, 0, 0, 1986, 2003, 2012, 2016,
	2023, 0, 1955, 0, 0, 0, 0, 0, 0, 0,
	0, 1945, 1946, 1947, 0, 0, 0, 0, 0, 0,
	1939, 1940, 1941, 1942, 1943, 1944, 1813, 0, 5879, 774,
	0, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 1818, 296, 1824, 313, 794, 1834, 362,
	399, 614, 1821, 1866, 459, 1871, 512, 516, 1895, 605,
	1828, 1831, 1841, 1844, 370, 1849, 799, 1857, 805, 1867,
	811, 1886, 581, 1892, 801, 802, 807, 301, 689, 604,
	675, 1880, 1826, 1884, 466, 1877, 1853, 1893, 1870, 1882,
	1863, 1868, 309, 1855, 1856, 1860, 1869, 803, 800, 804,
	810, 798, 808, 795, 806, 1890, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 1825, 1843, 415, 585,
	350, 439, 1876, 329, 472, 1889, 561, 436, 1883, 544,
	564, 1845, 456, 335, 495, 551, 552, 792, 797, 1833,
	813, 1820, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 1851, 447, 504, 661, 1823, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 629, 633,
	631, 627, 624, 628, 625, 626, 630, 386, 623, 0,
	598, 607, 641, 621, 649, 606, 646, 616, 361, 645,
	610, 609, 655, 636, 637, 591, 651, 622, 620, 613,
	612, 608, 1891, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 1819, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 611, 793, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 1835, 1836, 1837, 796, 1838, 1839, 1840, 342, 343,
	344, 345, 346, 347, 1842, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 1846, 365, 367, 1847, 368,
	371, 1848, 372, 373, 374, 375, 376, 377, 378, 379,
	615, 380, 1850, 381, 382, 384, 1852, 387, 388, 389,
	390, 391, 1854, 392, 617, 618, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 1858, 412, 413, 414, 416, 1859, 417,
	418, 421, 422, 423, 424, 1861, 426, 634, 1862, 427,
	428, 429, 1864, 1865, 430, 431, 432, 433, 434, 435,
	438, 635, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 638, 639, 455,
	457, 458, 640, 642, 643, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 1873, 483, 484, 485, 644, 486,
	487, 488, 489, 1874, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 1875, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 647, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 1878, 538, 648, 539,
	540, 541, 542, 543, 1879, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 650, 559, 560, 1881,
	562, 563, 812, 565, 566, 567, 568, 569, 1885, 688,
	570, 652, 571, 653, 572, 573, 574, 575, 576, 577,
	578, 580, 1887, 1888, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 1894, 597, 599, 601,
	679, 656, 657, 658, 659, 660, 662, 663, 664, 665,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 1872, 1822, 1827, 1829, 1830, 1832, 1813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1818, 296, 1824, 313, 794, 1834,
	362, 399, 614, 1821, 1866, 459, 1871, 512, 516, 1895,
	605, 1828, 1831, 1841, 1844, 370, 1849, 799, 1857, 805,
	1867, 811, 1886, 581, 1892, 801, 802, 807, 301, 689,
	604, 675, 1880, 1826, 1884, 466, 1877, 1853, 1893, 1870,
	1882, 1863, 1868, 309, 1855, 1856, 1860, 1869, 803, 800,
	804, 810, 798, 808, 795, 806, 1890, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 1825, 1843, 415,
	585, 350, 439, 1876, 329, 472, 1889, 561, 436, 1883,
	544, 564, 1845, 456, 335, 495, 551, 552, 792, 797,
	1833, 813, 1820, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 1851, 447, 504, 661, 1823, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 1891, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 1819, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 793, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 1835, 1836, 1837, 796, 1838, 1839, 1840, 342,
	343, 344, 345, 346, 347, 1842, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 1846, 365, 367, 1847,
	368, 371, 1848, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 1850, 381, 382, 384, 1852, 387, 388,
	389, 390, 391, 1854, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 1858, 412, 413, 414, 416, 1859,
	417, 418, 421, 422, 423, 424, 1861, 426, 634, 1862,
	427, 428, 429, 1864, 1865, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 1873, 483, 484, 485, 644,
	486, 487, 488, 489, 1874, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 1875, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 1878, 538, 648,
	539, 540, 541, 542, 543, 1879, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	1881, 562, 563, 812, 565, 566, 567, 568, 569, 1885,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 1887, 1888, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 1894, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 1872, 1822, 1827, 1829, 1830, 1832, 1036, 0,
	1680, 774, 0, 0, 0, 888, 760, 0, 0, 0,
	0, 0, 899, 900, 901, 1818, 296, 1824, 313, 794,
	1834, 362, 399, 0, 1821, 1866, 459, 1871, 512, 516,
	1895, 0, 1828, 1831, 1841, 1844, 370, 1849, 799, 1857,
	805, 1867, 811, 1886, 581, 1892, 801, 802, 807, 301,
	1033, 604, 675, 1880, 1826, 1884, 4020, 1877, 1853, 1893,
	1870, 1882, 1863, 1868, 309, 1855, 1856, 1860, 1869, 803,
	800, 804, 810, 798, 808, 795, 806, 1890, 503, 437,
	0, 530, 308, 354, 341, 383, 425, 537, 1825, 1843,
	415, 585, 350, 439, 1876, 329, 472, 1889, 561, 436,
	1883, 544, 564, 1845, 456, 335, 495, 551, 552, 792,
	797, 1833, 813, 1820, 339, 340, 461, 321, 469, 0,
	0, 524, 482, 480, 1851, 447, 504, 0, 1823, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	1035, 0, 598, 1038, 1026, 1018, 1019, 1020, 1021, 1022,
	1023, 0, 1040, 1041, 1042, 1043, 1044, 591, 1032, 1034,
	1017, 1024, 1025, 1027, 1891, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 1819, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 0, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 1835, 1836, 1837, 796, 1838, 1839, 1840,
	342, 343, 344, 345, 346, 347, 1842, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 1846, 365, 367,
	1847, 368, 371, 1848, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 1850, 381, 382, 384, 1852, 387,
	388, 389, 390, 391, 1854, 392, 0, 0, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 1858, 412, 413, 414, 416,
	1859, 417, 418, 421, 422, 423, 424, 1861, 426, 0,
	1862, 427, 428, 429, 1864, 1865, 430, 431, 432, 433,
	434, 435, 438, 0, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 4019,
	0, 455, 457, 458, 0, 0, 0, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 1873, 483, 484, 485,
	0, 486, 487, 488, 489, 1874, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 1875, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 0, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 1878, 538,
	2717, 539, 540, 541, 542, 543, 1879, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 0, 559,
	560, 1881, 562, 563, 812, 565, 566, 567, 568, 569,
	1885, 688, 570, 0, 571, 0, 572, 573, 574, 575,
	576, 577, 578, 580, 1887, 1888, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 1894, 597,
	599, 601, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 603, 0, 470, 464, 420, 462, 463,
	467, 468, 471, 1872, 1822, 1827, 1829, 1830, 1832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	897, 898, 0, 0, 0, 0, 0, 0, 4021, 4022,
	892, 893, 894, 895, 1036, 0, 1680, 774, 0, 0,
	0, 888, 760, 0, 0, 0, 0, 0, 899, 900,
	901, 1818, 296, 1824, 313, 794, 1834, 362, 399, 0,
	1821, 1866, 459, 1871, 512, 516, 1895, 0, 1828, 1831,
	1841, 1844, 370, 1849, 799, 1857, 805, 1867, 811, 1886,
	581, 1892, 801, 802, 807, 301, 1033, 604, 675, 1880,
	1826, 1884, 4020, 1877, 1853, 1893, 1870, 1882, 1863, 1868,
	309, 1855, 1856, 1860, 1869, 803, 800, 804, 810, 798,
	808, 795, 806, 1890, 503, 437, 0, 530, 308, 354,
	341, 383, 425, 537, 1825, 1843, 415, 585, 350, 439,
	1876, 329, 472, 1889, 561, 436, 1883, 544, 564, 1845,
	456, 335, 495, 551, 552, 792, 797, 1833, 813, 1820,
	339, 340, 461, 321, 469, 0, 0, 524, 482, 480,
	1851, 447, 504, 0, 1823, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 386, 1035, 0, 598, 1038,
	1026, 1018, 1019, 1020, 1021, 1022, 1023, 0, 1040, 1041,
	1042, 1043, 1044, 591, 1032, 1034, 1017, 1024, 1025, 1027,
	1891, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 1819, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 0, 793, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1835,
	1836, 1837, 796, 1838, 1839, 1840, 342, 343, 344, 345,
	346, 347, 1842, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 1846, 365, 367, 1847, 368, 371, 1848,
	372, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	1850, 381, 382, 384, 1852, 387, 388, 389, 390, 391,
	1854, 392, 0, 0, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 1858, 412, 413, 414, 416, 1859, 417, 418, 421,
	422, 423, 424, 1861, 426, 0, 1862, 427, 428, 429,
	1864, 1865, 430, 431, 432, 433, 434, 435, 438, 0,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 4702, 0, 455, 457, 458,
	0, 0, 0, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 1873, 483, 484, 485, 0, 486, 487, 488,
	489, 1874, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 1875, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 0, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1878, 538, 2717, 539, 540, 541,
	542, 543, 1879, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 0, 559, 560, 1881, 562, 563,
	812, 565, 566, 567, 568, 569, 1885, 688, 570, 0,
	571, 0, 572, 573, 574, 575, 576, 577, 578, 580,
	1887, 1888, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 1894, 597, 599, 601, 679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 603,
	0, 470, 464, 420, 462, 463, 467, 468, 471, 1872,
	1822, 1827, 1829, 1830, 1832, 0, 0, 0, 0, 0,
	0, 0, 0, 1813, 0, 896, 897, 898, 0, 0,
	0, 0, 0, 0, 4021, 4022, 892, 893, 894, 895,
	1818, 296, 1824, 313, 794, 1834, 3450, 399, 614, 1821,
	1866, 459, 1871, 512, 516, 1895, 605, 1828, 1831, 1841,
	1844, 370, 1849, 799, 1857, 805, 1867, 811, 1886, 581,
	1892, 801, 802, 807, 301, 689, 604, 675, 1880, 1826,
	1884, 466, 1877, 1853, 1893, 1870, 1882, 1863, 1868, 309,
	1855, 1856, 1860, 1869, 803, 800, 804, 810, 798, 808,
	795, 806, 1890, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 3448, 1825, 1843, 415, 585, 350, 439, 1876,
	329, 472, 1889, 561, 436, 1883, 544, 564, 1845, 456,
	335, 495, 551, 552, 792, 797, 1833, 813, 1820, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 1851,
	447, 504, 661, 1823, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 1891,
	286, 287, 288, 289, 290, 3449, 292, 293, 294, 295,
	297, 1819, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 1835, 1836,
	1837, 796, 1838, 1839, 1840, 342, 343, 344, 345, 346,
	347, 1842, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 1846, 365, 367, 1847, 368, 371, 1848, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 1850,
	381, 382, 384, 1852, 387, 388, 389, 390, 391, 1854,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	1858, 412, 413, 414, 416, 1859, 417, 418, 421, 422,
	423, 424, 1861, 426, 634, 1862, 427, 428, 429, 1864,
	1865, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 1873, 483, 484, 485, 644, 486, 487, 488, 489,
	1874, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 1875, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 1878, 538, 648, 539, 540, 541, 542,
	543, 1879, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 1881, 562, 563, 812,
	565, 566, 567, 568, 569, 1885, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 1887,
	1888, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 1894, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 1872, 1822,
	1827, 1829, 1830, 1832, 788, 0, 1257, 774, 0, 1262,
	1263, 1252, 760, 1242, 0, 0, 0, 0, 0, 0,
	0, 1803, 296, 0, 313, 794, 0, 362, 399, 1247,
	0, 1235, 459, 0, 512, 516, 0, 605, 1267, 0,
	1239, 1804, 370, 1260, 799, 0, 805, 1261, 811, 1259,
	581, 0, 801, 802, 807, 301, 1336, 604, 675, 0,
	0, 0, 1253, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 654, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 1289, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	339, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 1248, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 1317, 1319, 1315, 1311,
	1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322,
	1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324,
	1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323,
	1802, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 1301, 1279, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1290,
	1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 1293, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 1302, 1251, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 1303, 0, 427, 428, 429,
	1283, 1284, 430, 431, 432, 433, 434, 435, 438, 1316,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 1294, 455, 457, 458,
	1300, 642, 1295, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 1296, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 1254, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1287, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 1297, 559, 560, 1288, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 1298,
	571, 1299, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 1238, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 0, 1292, 0, 0, 0, 1236, 0, 0, 788,
	0, 1257, 774, 0, 1262, 1263, 1252, 760, 1242, 0,
	0, 1243, 1799, 0, 1232, 1233, 1800, 296, 0, 313,
	794, 0, 362, 399, 1247, 0, 1235, 459, 0, 512,
	516, 157, 605, 1267, 0, 1239, 0, 370, 1260, 799,
	0, 805, 1261, 811, 1259, 581, 0, 801, 802, 807,
	301, 1336, 604, 675, 0, 0, 0, 1253, 154, 0,
	0, 0, 155, 0, 0, 309, 0, 0, 0, 0,
	803, 800, 804, 810, 798, 808, 795, 806, 0, 503,
	437, 1119, 530, 308, 354, 341, 383, 425, 537, 0,
	0, 415, 585, 350, 439, 0, 329, 472, 1289, 561,
	436, 0, 544, 564, 0, 456, 335, 495, 551, 552,
	792, 797, 0, 813, 0, 339, 340, 461, 321, 469,
	666, 632, 524, 482, 480, 0, 447, 504, 661, 1248,
	0, 369, 0, 364, 460, 600, 327, 579, 498, 465,
	419, 527, 556, 366, 351, 352, 395, 497, 385, 337,
	590, 1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314,
	386, 1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334,
	1328, 1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337,
	1276, 1329, 1327, 1326, 1323, 0, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 297, 0, 298, 299,
	300, 302, 303, 304, 791, 305, 306, 307, 310, 311,
	312, 314, 674, 315, 316, 317, 318, 319, 320, 1301,
	1279, 322, 323, 324, 325, 326, 328, 330, 331, 332,
	333, 334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282,
	1286, 342, 343, 344, 345, 346, 347, 0, 348, 349,
	353, 355, 356, 357, 358, 359, 360, 363, 0, 365,
	367, 0, 368, 371, 0, 372, 373, 374, 375, 376,
	377, 378, 379, 1293, 380, 0, 381, 382, 384, 0,
	387, 388, 389, 390, 391, 0, 392, 1302, 1251, 393,
	394, 396, 397, 398, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 0, 412, 413, 414,
	416, 0, 417, 418, 421, 422, 423, 424, 0, 426,
	1303, 0, 427, 428, 429, 1283, 1284, 430, 431, 432,
	433, 434, 435, 438, 1316, 440, 441, 442, 443, 444,
	445, 446, 676, 448, 449, 450, 451, 452, 453, 454,
	638, 1294, 455, 457, 458, 1300, 642, 1295, 809, 473,
	474, 475, 476, 477, 478, 479, 481, 0, 483, 484,
	485, 1296, 486, 487, 488, 489, 0, 490, 491, 492,
	493, 494, 496, 499, 500, 501, 502, 0, 505, 506,
	507, 508, 509, 510, 511, 513, 514, 515, 517, 518,
	519, 677, 520, 521, 522, 523, 1254, 525, 526, 678,
	528, 529, 531, 532, 533, 534, 535, 536, 687, 1287,
	538, 648, 539, 540, 541, 542, 543, 0, 545, 546,
	547, 548, 549, 550, 553, 554, 555, 557, 558, 1297,
	559, 560, 1288, 562, 563, 812, 565, 566, 567, 568,
	569, 0, 688, 570, 1298, 571, 1299, 572, 573, 574,
	575, 576, 577, 578, 580, 0, 1238, 582, 583, 584,
	586, 587, 588, 589, 592, 593, 594, 595, 596, 0,
	597, 599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307,
	1309, 1310, 1320, 602, 603, 619, 470, 464, 420, 462,
	463, 467, 468, 471, 0, 0, 0, 1292, 0, 0,
	0, 1236, 0, 158, 788, 0, 1257, 774, 0, 1262,
	1263, 1252, 760, 1242, 0, 0, 1243, 5492, 0, 1232,
	1233, 0, 296, 0, 313, 794, 0, 362, 399, 1247,
	0, 1235, 459, 0, 512, 516, 157, 605, 1267, 0,
	1239, 0, 370, 1260, 799, 0, 805, 1261, 811, 1259,
	581, 0, 801, 802, 807, 301, 1336, 604, 675, 0,
	0, 0, 1253, 154, 0, 0, 0, 155, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 1119, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	3181, 329, 472, 1289, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	339, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 1248, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 1317, 1319, 1315, 1311,
	1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322,
	1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324,
	1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 1301, 1279, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1290,
	1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 1293, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 1302, 1251, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 1303, 0, 427, 428, 429,
	1283, 1284, 430, 431, 432, 433, 434, 435, 438, 1316,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 1294, 455, 457, 458,
	1300, 642, 1295, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 1296, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 1254, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1287, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 1297, 559, 560, 1288, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 1298,
	571, 1299, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 1238, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 0, 1292, 0, 0, 0, 1236, 0, 158, 788,
	0, 1257, 774, 0, 1262, 1263, 1252, 760, 1242, 0,
	0, 1243, 0, 0, 1232, 1233, 0, 296, 0, 313,
	794, 0, 362, 399, 1247, 0, 1235, 459, 0, 512,
	516, 157, 605, 1267, 0, 1239, 0, 370, 1260, 799,
	0, 805, 1261, 811, 1259, 581, 0, 801, 802, 807,
	301, 1336, 604, 675, 0, 0, 0, 1253, 154, 0,
	0, 0, 155, 0, 0, 309, 0, 0, 0, 0,
	803, 800, 804, 810, 798, 808, 795, 806, 0, 503,
	437, 1119, 530, 308, 354, 341, 383, 425, 537, 0,
	0, 415, 585, 350, 439, 0, 329, 472, 1289, 561,
	436, 0, 544, 564, 0, 456, 335, 495, 551, 552,
	792, 797, 0, 813, 0, 339, 340, 461, 321, 469,
	666, 632, 524, 482, 480, 0, 447, 504, 661, 1248,
	0, 369, 0, 364, 460, 600, 327, 579, 498, 465,
	419, 527, 556, 366, 351, 352, 395, 497, 385, 337,
	590, 1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314,
	386, 1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334,
	1328, 1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337,
	1276, 1329, 1327, 1326, 1323, 0, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 297, 0, 298, 299,
	300, 302, 303, 304, 791, 305, 306, 307, 310, 311,
	312, 314, 674, 315, 316, 317, 318, 319, 320, 1301,
	1279, 322, 323, 324, 325, 326, 328, 330, 331, 332,
	333, 334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282,
	1286, 342, 343, 344, 345, 346, 347, 0, 348, 349,
	353, 355, 356, 357, 358, 359, 360, 363, 0, 365,
	367, 0, 368, 371, 0, 372, 373, 374, 375, 376,
	377, 378, 379, 1293, 380, 0, 381, 382, 384, 0,
	387, 388, 389, 390, 391, 0, 392, 1302, 1251, 393,
	394, 396, 397, 398, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 0, 412, 413, 414,
	416, 0, 417, 418, 421, 422, 423, 424, 0, 426,
	1303, 0, 427, 428, 429, 1283, 1284, 430, 431, 432,
	433, 434, 435, 438, 1316, 440, 441, 442, 443, 444,
	445, 446, 676, 448, 449, 450, 451, 452, 453, 454,
	638, 1294, 455, 457, 458, 1300, 642, 1295, 809, 473,
	474, 475, 476, 477, 478, 479, 481, 0, 483, 484,
	485, 1296, 486, 487, 488, 489, 0, 490, 491, 492,
	493, 494, 496, 499, 500, 501, 502, 0, 505, 506,
	507, 508, 509, 510, 511, 513, 514, 515, 517, 518,
	519, 677, 520, 521, 522, 523, 1254, 525, 526, 678,
	528, 529, 531, 532, 533, 534, 535, 536, 687, 1287,
	538, 648, 539, 540, 541, 542, 543, 0, 545, 546,
	547, 548, 549, 550, 553, 554, 555, 557, 558, 1297,
	559, 560, 1288, 562, 563, 812, 565, 566, 567, 568,
	569, 0, 688, 570, 1298, 571, 1299, 572, 573, 574,
	575, 576, 577, 578, 580, 0, 1238, 582, 583, 584,
	586, 587, 588, 589, 592, 593, 594, 595, 596, 0,
	597, 599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307,
	1309, 1310, 1320, 602, 603, 619, 470, 464, 420, 462,
	463, 467, 468, 471, 0, 0, 0, 1292, 0, 0,
	0, 1236, 0, 158, 788, 0, 1257, 774, 0, 1262,
	1263, 1252, 760, 1242, 0, 0, 1243, 0, 0, 1232,
	1233, 0, 296, 0, 313, 794, 0, 362, 399, 1247,
	0, 1235, 459, 0, 512, 516, 0, 605, 1267, 0,
	1239, 0, 370, 1260, 799, 0, 805, 1261, 811, 1259,
	581, 0, 801, 802, 807, 301, 1336, 604, 675, 0,
	0, 0, 1253, 0, 3162, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 654, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 1289, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	339, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 1248, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 1317, 1319, 1315, 1311,
	1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322,
	1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324,
	1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 1301, 1279, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1290,
	1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 1293, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 1302, 1251, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 1303, 3158, 427, 428, 429,
	1283, 1284, 430, 431, 432, 433, 434, 435, 438, 1316,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 1294, 455, 457, 458,
	1300, 642, 1295, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 1296, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 1254, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1287, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 1297, 559, 560, 1288, 562, 563,
	812, 565, 566, 567, 568, 569, 3159, 688, 570, 1298,
	571, 1299, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 1238, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 3157, 1292, 0, 0, 0, 1236, 0, 788, 0,
	1257, 774, 0, 1262, 1263, 1252, 760, 1242, 0, 0,
	0, 1243, 0, 0, 1232, 1233, 296, 0, 313, 794,
	0, 362, 399, 1247, 0, 1235, 459, 0, 512, 516,
	0, 605, 1267, 0, 1239, 0, 370, 1260, 799, 0,
	805, 1261, 811, 1259, 581, 0, 801, 802, 807, 301,
	1336, 604, 675, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 1289, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 1248, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386,
	1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334, 1328,
	1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337, 1276,
	1329, 1327, 1326, 1323, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 1301, 1279,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 1293, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 1302, 1251, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 1303,
	0, 427, 428, 429, 1283, 1284, 430, 431, 432, 433,
	434, 435, 438, 1316, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	1294, 455, 457, 458, 1300, 642, 1295, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	1296, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 1254, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 1287, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 1297, 559,
	560, 1288, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 1298, 571, 1299, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 1238, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309,
	1310, 1320, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 0, 0, 0, 1292, 0, 0, 0,
	1236, 0, 0, 788, 0, 1257, 774, 0, 1262, 1263,
	1252, 760, 1242, 0, 0, 1243, 0, 0, 1232, 1233,
	1230, 296, 0, 313, 794, 0, 362, 399, 1247, 0,
	1235, 459, 0, 512, 516, 0, 605, 1267, 0, 1239,
	0, 370, 1260, 799, 0, 805, 1261, 811, 1259, 581,
	0, 801, 802, 807, 301, 1336, 604, 675, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 1289, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 1248, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312,
	1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333,
	1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338,
	1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 1301, 1279, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 1290, 1280,
	1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 1293, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 1302, 1251, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 1303, 0, 427, 428, 429, 1283,
	1284, 430, 431, 432, 433, 434, 435, 438, 1316, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 1294, 455, 457, 458, 1300,
	642, 1295, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 1296, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	1254, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 1287, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 1297, 559, 560, 1288, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 1298, 571,
	1299, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	1238, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 1304,
	1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 0, 0,
	0, 1292, 0, 0, 0, 1236, 0, 788, 0, 1257,
	774, 0, 1262, 1263, 1252, 760, 1242, 0, 2428, 3103,
	1243, 0, 0, 1232, 1233, 296, 0, 313, 794, 0,
	362, 399, 1247, 0, 1235, 459, 0, 512, 516, 0,
	605, 1267, 0, 1239, 0, 370, 1260, 799, 0, 805,
	1261, 811, 1259, 581, 0, 801, 802, 807, 301, 1336,
	604, 675, 0, 0, 3064, 1253, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 1289, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 1248, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 1317,
	1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 1313,
	0, 598, 1322, 1333, 1330, 1335, 1321, 1334, 1328, 1023,
	645, 1325, 1324, 1338, 1331, 1332, 591, 1337, 1276, 1329,
	1327, 1326, 1323, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 1301, 1279, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 1293, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 1302, 1251, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 1303, 0,
	427, 428, 429, 1283, 1284, 430, 431, 432, 433, 434,
	435, 438, 1316, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 1294,
	455, 457, 458, 1300, 642, 1295, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 1296,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 1254, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 1287, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 1297, 559, 560,
	1288, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 1298, 571, 1299, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 1238, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310,
	1320, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 0, 0, 0, 1292, 0, 0, 0, 1236,
	0, 788, 0, 1257, 774, 0, 1262, 1263, 1252, 760,
	1242, 0, 0, 0, 1243, 0, 0, 1232, 1233, 296,
	0, 313, 794, 0, 362, 399, 1247, 0, 1235, 459,
	0, 512, 516, 0, 605, 1267, 0, 1239, 0, 370,
	1260, 799, 0, 805, 1261, 811, 1259, 581, 0, 801,
	802, 807, 301, 1336, 604, 675, 0, 0, 0, 1253,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 803, 800, 804, 810, 798, 808, 795, 806,
	0, 503, 437, 654, 530, 308, 354, 341, 383, 425,
	537, 0, 0, 415, 585, 350, 439, 0, 329, 472,
	1289, 561, 436, 0, 544, 564, 0, 456, 335, 495,
	551, 552, 792, 797, 0, 813, 0, 339, 340, 461,
	321, 469, 666, 632, 524, 482, 480, 0, 447, 504,
	661, 1248, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277, 1278,
	1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330, 1335,
	1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331, 1332,
	591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 0,
	298, 299, 300, 302, 303, 304, 791, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 318, 319,
	320, 1301, 1279, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 1290, 1280, 1285, 1291,
	1281, 1282, 1286, 342, 343, 344, 345, 346, 347, 0,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	0, 365, 367, 0, 368, 371, 0, 372, 373, 374,
	375, 376, 377, 378, 379, 1293, 380, 0, 381, 382,
	384, 0, 387, 388, 389, 390, 391, 0, 392, 1302,
	1251, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 0, 412,
	413, 414, 416, 0, 417, 418, 421, 422, 423, 424,
	0, 426, 1303, 0, 427, 428, 429, 1283, 1284, 430,
	431, 432, 433, 434, 435, 438, 1316, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 638, 1294, 455, 457, 458, 1300, 642, 1295,
	809, 473, 474, 475, 476, 477, 478, 479, 481, 0,
	483, 484, 485, 1296, 486, 487, 488, 489, 0, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 0,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 1254, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 1287, 538, 648, 539, 540, 541, 542, 543, 0,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 1297, 559, 560, 1288, 562, 563, 812, 565, 566,
	567, 568, 569, 0, 688, 570, 1298, 571, 1299, 572,
	573, 574, 575, 576, 577, 578, 580, 0, 1238, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 0, 597, 599, 601, 679, 656, 1304, 1305, 1308,
	1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470, 464,
	420, 462, 463, 467, 468, 471, 0, 0, 0, 1292,
	0, 0, 0, 1236, 0, 788, 0, 1257, 774, 0,
	1262, 1263, 1252, 760, 1242, 0, 0, 0, 1243, 4339,
	0, 1232, 1233, 296, 0, 313, 794, 0, 362, 399,
	1247, 0, 1235, 459, 0, 512, 516, 0, 605, 1267,
	0, 1239, 0, 370, 1260, 799, 0, 805, 1261, 811,
	1259, 581, 0, 801, 802, 807, 301, 1336, 604, 675,
	0, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
	0, 309, 0, 0, 0, 0, 803, 800, 804, 810,
	798, 808, 795, 806, 0, 503, 437, 654, 530, 308,
	354, 341, 383, 425, 537, 0, 0, 415, 585, 350,
	439, 0, 329, 472, 1289, 561, 436, 0, 544, 564,
	0, 456, 335, 495, 551, 552, 792, 797, 0, 813,
	0, 339, 340, 461, 321, 469, 666, 632, 524, 482,
	480, 0, 447, 504, 661, 1248, 0, 369, 0, 364,
	460, 600, 327, 579, 498, 465, 419, 527, 556, 366,
	351, 352, 395, 497, 385, 337, 590, 1317, 1319, 1315,
	1311, 1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598,
	1322, 1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325,
	1324, 1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326,
	1323, 0, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 297, 0, 298, 299, 300, 302, 303, 304,
	791, 305, 306, 307, 310, 311, 312, 314, 674, 315,
	316, 317, 318, 319, 320, 1301, 1279, 322, 323, 324,
	325, 326, 328, 330, 331, 332, 333, 334, 336, 338,
	1290, 1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344,
	345, 346, 347, 0, 348, 349, 353, 355, 356, 357,
	358, 359, 360, 363, 0, 365, 367, 0, 368, 371,
	0, 372, 373, 374, 375, 376, 377, 378, 379, 1293,
	380, 0, 381, 382, 384, 0, 387, 388, 389, 390,
	391, 0, 392, 1302, 1251, 393, 394, 396, 397, 398,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 0, 412, 413, 414, 416, 0, 417, 418,
	421, 422, 423, 424, 0, 426, 1303, 0, 427, 428,
	429, 1283, 1284, 430, 431, 432, 433, 434, 435, 438,
	1316, 440, 441, 442, 443, 444, 445, 446, 676, 448,
	449, 450, 451, 452, 453, 454, 638, 1294, 455, 457,
	458, 1300, 642, 1295, 809, 473, 474, 475, 476, 477,
	478, 479, 481, 0, 483, 484, 485, 1296, 486, 487,
	488, 489, 0, 490, 491, 492, 493, 494, 496, 499,
	500, 501, 502, 0, 505, 506, 507, 508, 509, 510,
	511, 513, 514, 515, 517, 518, 519, 677, 520, 521,
	522, 523, 1254, 525, 526, 678, 528, 529, 531, 532,
	533, 534, 535, 536, 687, 1287, 538, 648, 539, 540,
	541, 542, 543, 0, 545, 546, 547, 548, 549, 550,
	553, 554, 555, 557, 558, 1297, 559, 560, 1288, 562,
	563, 812, 565, 566, 567, 568, 569, 0, 688, 570,
	1298, 571, 1299, 572, 573, 574, 575, 576, 577, 578,
	580, 0, 1238, 582, 583, 584, 586, 587, 588, 589,
	592, 593, 594, 595, 596, 0, 597, 599, 601, 679,
	656, 1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602,
	603, 619, 470, 464, 420, 462, 463, 467, 468, 471,
	0, 0, 0, 1292, 0, 0, 0, 1236, 0, 788,
	0, 1257, 774, 0, 1262, 1263, 1252, 760, 1242, 0,
	0, 0, 1243, 4302, 0, 1232, 1233, 296, 0, 313,
	794, 0, 362, 399, 1247, 0, 1235, 459, 0, 512,
	516, 0, 605, 1267, 0, 1239, 0, 370, 1260, 799,
	0, 805, 1261, 811, 1259, 581, 0, 801, 802, 807,
	301, 1336, 604, 675, 0, 0, 0, 1253, 0, 3162,
	0, 0, 0, 0, 0, 309, 0, 0, 0, 0,
	803, 800, 804, 810, 798, 808, 795, 806, 0, 503,
	437, 654, 530, 308, 354, 341, 383, 425, 537, 0,
	0, 415, 585, 350, 439, 0, 329, 472, 1289, 561,
	436, 0, 544, 564, 0, 456, 335, 495, 551, 552,
	792, 797, 0, 813, 0, 339, 340, 461, 321, 469,
	666, 632, 524, 482, 480, 0, 447, 504, 661, 1248,
	0, 369, 0, 364, 460, 600, 327, 579, 498, 465,
	419, 527, 556, 366, 351, 352, 395, 497, 385, 337,
	590, 1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314,
	386, 1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334,
	1328, 1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337,
	1276, 1329, 1327, 1326, 1323, 0, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 297, 0, 298, 299,
	300, 302, 303, 304, 791, 305, 306, 307, 310, 311,
	312, 314, 674, 315, 316, 317, 318, 319, 320, 1301,
	1279, 322, 323, 324, 325, 326, 328, 330, 331, 332,
	333, 334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282,
	1286, 342, 343, 344, 345, 346, 347, 0, 348, 349,
	353, 355, 356, 357, 358, 359, 360, 363, 0, 365,
	367, 0, 368, 371, 0, 372, 373, 374, 375, 376,
	377, 378, 379, 1293, 380, 0, 381, 382, 384, 0,
	387, 388, 389, 390, 391, 0, 392, 1302, 1251, 393,
	394, 396, 397, 398, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 0, 412, 413, 414,
	416, 0, 417, 418, 421, 422, 423, 424, 0, 426,
	1303, 0, 427, 428, 429, 1283, 1284, 430, 431, 432,
	433, 434, 435, 438, 1316, 440, 441, 442, 443, 444,
	445, 446, 676, 448, 449, 450, 451, 452, 453, 454,
	638, 1294, 455, 457, 458, 1300, 642, 1295, 809, 473,
	474, 475, 476, 477, 478, 479, 481, 0, 483, 484,
	485, 1296, 486, 487, 488, 489, 0, 490, 491, 492,
	493, 494, 496, 499, 500, 501, 502, 0, 505, 506,
	507, 508, 509, 510, 511, 513, 514, 515, 517, 518,
	519, 677, 520, 521, 522, 523, 1254, 525, 526, 678,
	528, 529, 531, 532, 533, 534, 535, 536, 687, 1287,
	538, 648, 539, 540, 541, 542, 543, 0, 545, 546,
	547, 548, 549, 550, 553, 554, 555, 557, 558, 1297,
	559, 560, 1288, 562, 563, 812, 565, 566, 567, 568,
	569, 0, 688, 570, 1298, 571, 1299, 572, 573, 574,
	575, 576, 577, 578, 580, 0, 1238, 582, 583, 584,
	586, 587, 588, 589, 592, 593, 594, 595, 596, 0,
	597, 599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307,
	1309, 1310, 1320, 602, 603, 619, 470, 464, 420, 462,
	463, 467, 468, 471, 0, 0, 0, 1292, 0, 0,
	0, 1236, 0, 788, 0, 1257, 774, 0, 1262, 1263,
	1252, 760, 1242, 0, 0, 0, 1243, 0, 0, 1232,
	1233, 296, 0, 313, 794, 0, 362, 399, 1247, 0,
	1235, 459, 0, 512, 516, 0, 605, 1267, 0, 1239,
	0, 370, 1260, 799, 0, 805, 1261, 811, 1259, 581,
	0, 801, 802, 807, 301, 1336, 604, 675, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 1289, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 1248, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312,
	1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333,
	1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338,
	1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 3701,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 1301, 1279, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 1290, 1280,
	1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 1293, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 1302, 1251, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 1303, 0, 427, 428, 429, 1283,
	1284, 430, 431, 432, 433, 434, 435, 438, 1316, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 1294, 455, 457, 458, 1300,
	642, 1295, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 1296, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	1254, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 1287, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 1297, 559, 560, 1288, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 1298, 571,
	1299, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	1238, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 1304,
	1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 0, 0,
	0, 1292, 0, 0, 0, 1236, 0, 788, 0, 1257,
	774, 0, 1262, 1263, 1252, 760, 1242, 0, 0, 0,
	1243, 0, 0, 1232, 1233, 296, 0, 313, 794, 0,
	362, 399, 1247, 0, 1235, 459, 0, 512, 516, 0,
	605, 1267, 0, 1239, 0, 370, 1260, 799, 0, 805,
	1261, 811, 1259, 581, 0, 801, 802, 807, 301, 1336,
	604, 675, 0, 0, 0, 1253, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 3181, 329, 472, 1289, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 1248, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 1317,
	1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 1313,
	0, 598, 1322, 1333, 1330, 1335, 1321, 1334, 1328, 1023,
	645, 1325, 1324, 1338, 1331, 1332, 591, 1337, 1276, 1329,
	1327, 1326, 1323, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 1301, 1279, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 1293, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 1302, 1251, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 1303, 0,
	427, 428, 429, 1283, 1284, 430, 431, 432, 433, 434,
	435, 438, 1316, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 1294,
	455, 457, 458, 1300, 642, 1295, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 1296,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 1254, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 1287, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 1297, 559, 560,
	1288, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 1298, 571, 1299, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 1238, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310,
	1320, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 0, 0, 0, 1292, 0, 0, 0, 1236,
	0, 788, 0, 1257, 774, 0, 1262, 1263, 1252, 760,
	1242, 0, 0, 0, 1243, 0, 0, 1232, 1233, 296,
	0, 313, 794, 0, 362, 399, 1247, 0, 1235, 459,
	0, 512, 516, 0, 605, 1267, 0, 1239, 0, 370,
	1260, 799, 0, 805, 1261, 811, 1259, 581, 0, 801,
	802, 807, 301, 1336, 604, 675, 0, 0, 0, 1253,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 803, 800, 804, 810, 798, 808, 795, 806,
	0, 503, 437, 654, 530, 308, 354, 341, 383, 425,
	537, 0, 0, 415, 585, 350, 439, 0, 329, 472,
	1289, 561, 436, 0, 544, 564, 0, 456, 335, 495,
	551, 552, 792, 797, 0, 813, 0, 339, 340, 461,
	321, 469, 666, 632, 524, 482, 480, 0, 447, 504,
	661, 1248, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277, 1278,
	1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330, 1335,
	1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331, 1332,
	591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 0,
	298, 299, 300, 302, 303, 304, 791, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 318, 319,
	320, 1301, 1279, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 1290, 1280, 1285, 1291,
	1281, 1282, 1286, 342, 343, 344, 345, 346, 347, 0,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	0, 365, 367, 0, 368, 371, 0, 372, 373, 374,
	375, 376, 377, 378, 379, 1293, 380, 0, 381, 382,
	384, 0, 387, 388, 389, 390, 391, 0, 392, 1302,
	1251, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 0, 412,
	413, 414, 416, 0, 417, 418, 421, 422, 423, 424,
	0, 426, 1303, 0, 427, 428, 429, 1283, 1284, 430,
	431, 432, 433, 434, 435, 438, 1316, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 638, 1294, 455, 457, 458, 1300, 642, 1295,
	809, 473, 474, 475, 476, 477, 478, 479, 481, 0,
	483, 484, 485, 1296, 486, 487, 488, 489, 0, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 0,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 1254, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 1287, 538, 648, 539, 540, 541, 542, 543, 0,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 1297, 559, 560, 1288, 562, 563, 812, 565, 566,
	567, 568, 569, 0, 688, 570, 1298, 571, 1299, 572,
	573, 574, 575, 576, 577, 578, 580, 0, 1238, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 0, 597, 599, 601, 679, 656, 1304, 1305, 1308,
	1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470, 464,
	420, 462, 463, 467, 468, 471, 0, 0, 0, 1292,
	0, 0, 0, 1236, 0, 0, 788, 0, 1257, 774,
	0, 1262, 1263, 1252, 760, 1242, 0, 0, 1243, 3108,
	0, 1232, 1233, 1913, 296, 0, 313, 794, 0, 362,
	399, 1247, 0, 1235, 459, 0, 512, 516, 0, 605,
	1267, 0, 1239, 0, 370, 1260, 799, 0, 805, 1261,
	811, 1259, 581, 0, 801, 802, 807, 301, 1336, 604,
	675, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 1289, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 0, 447, 504, 661, 1248, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 1317, 1319,
	1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 1313, 0,
	598, 1322, 1333, 1330, 1335, 1321, 1334, 1328, 1023, 645,
	1325, 1324, 1338, 1331, 1332, 591, 1337, 1276, 1329, 1327,
	1326, 1323, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 1301, 1279, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	1293, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 1302, 1251, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 1303, 0, 427,
	428, 429, 1283, 1284, 430, 431, 432, 433, 434, 435,
	438, 1316, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 638, 1294, 455,
	457, 458, 1300, 642, 1295, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 1296, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 1254, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 1287, 538, 648, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 1297, 559, 560, 1288,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 1298, 571, 1299, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 1238, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 0, 0, 0, 1292, 0, 0, 0, 1236, 0,
	788, 0, 1257, 774, 0, 1262, 1263, 1252, 760, 1242,
	0, 0, 0, 1243, 0, 0, 1232, 1233, 296, 0,
	313, 794, 0, 362, 399, 1247, 0, 1235, 459, 0,
	512, 516, 0, 605, 1267, 0, 1239, 0, 370, 1260,
	799, 0, 805, 1261, 811, 1259, 581, 0, 801, 802,
	807, 301, 1336, 604, 675, 0, 0, 0, 1253, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	0, 803, 800, 804, 810, 798, 808, 795, 806, 0,
	503, 437, 654, 530, 308, 354, 341, 383, 425, 537,
	0, 0, 415, 585, 350, 439, 0, 329, 472, 1289,
	561, 436, 0, 544, 564, 0, 456, 335, 495, 551,
	552, 792, 797, 0, 813, 0, 339, 340, 461, 321,
	469, 666, 632, 524, 482, 480, 0, 447, 504, 661,
	1248, 0, 369, 0, 364, 460, 600, 327, 579, 498,
	465, 419, 527, 556, 366, 351, 352, 395, 497, 385,
	337, 590, 1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318,
	1314, 386, 1313, 0, 598, 1322, 1333, 1330, 1335, 1321,
	1334, 1328, 1023, 645, 1325, 1324, 1338, 1331, 1332, 591,
	1337, 1276, 1329, 1327, 1326, 1323, 0, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 297, 0, 298,
	299, 300, 302, 303, 304, 791, 305, 306, 307, 310,
	311, 312, 314, 674, 315, 316, 317, 318, 319, 320,
	1301, 1279, 322, 323, 324, 325, 326, 328, 330, 331,
	332, 333, 334, 336, 338, 1290, 1280, 1285, 1291, 1281,
	1282, 1286, 342, 343, 344, 345, 346, 347, 0, 348,
	349, 353, 355, 356, 357, 358, 359, 360, 363, 0,
	365, 367, 0, 368, 371, 0, 372, 373, 374, 375,
	376, 377, 378, 379, 1293, 380, 0, 381, 382, 384,
	0, 387, 388, 389, 390, 391, 0, 392, 1302, 1251,
	393, 394, 396, 397, 398, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 0, 412, 413,
	414, 416, 0, 417, 418, 421, 422, 423, 424, 0,
	426, 1303, 0, 427, 428, 429, 1283, 1284, 430, 431,
	432, 433, 434, 435, 438, 1316, 440, 441, 442, 443,
	444, 445, 446, 676, 448, 449, 450, 451, 452, 453,
	454, 638, 1294, 455, 457, 458, 1300, 642, 1295, 809,
	473, 474, 475, 476, 477, 478, 479, 481, 0, 483,
	484, 485, 1296, 486, 487, 488, 489, 0, 490, 491,
	492, 493, 494, 496, 499, 500, 501, 502, 0, 505,
	506, 507, 508, 509, 510, 511, 513, 514, 515, 517,
	518, 519, 677, 520, 521, 522, 523, 1254, 525, 526,
	678, 528, 529, 531, 532, 533, 534, 535, 536, 687,
	1287, 538, 648, 539, 540, 541, 542, 543, 0, 545,
	546, 547, 548, 549, 550, 553, 554, 555, 557, 558,
	1297, 559, 560, 1288, 562, 563, 812, 565, 566, 567,
	568, 569, 0, 688, 570, 1298, 571, 1299, 572, 573,
	574, 575, 576, 577, 578, 580, 0, 1238, 582, 583,
	584, 586, 587, 588, 589, 592, 593, 594, 595, 596,
	0, 597, 599, 601, 679, 656, 1304, 1305, 1308, 1306,
	1307, 1309, 1310, 1320, 602, 603, 619, 470, 464, 420,
	462, 463, 467, 468, 471, 0, 0, 0, 1292, 0,
	0, 0, 1236, 0, 788, 0, 1257, 774, 0, 1262,
	1263, 1252, 760, 1242, 0, 0, 0, 1243, 0, 0,
	1232, 1233, 296, 0, 313, 794, 0, 362, 399, 1247,
	0, 1235, 459, 0, 512, 516, 0, 605, 1267, 0,
	1239, 0, 370, 1260, 799, 0, 805, 1261, 811, 1259,
	581, 0, 801, 802, 807, 301, 1336, 604, 675, 0,
	0, 0, 1253, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 654, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 1289, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	5501, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 1248, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 1317, 1319, 1315, 1311,
	1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322,
	1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324,
	1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 1301, 1279, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1290,
	1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 1293, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 1302, 1251, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 1303, 0, 427, 428, 429,
	1283, 1284, 430, 431, 432, 433, 434, 435, 438, 1316,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 1294, 455, 457, 458,
	1300, 642, 1295, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 1296, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 1254, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1287, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 1297, 559, 560, 1288, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 1298,
	571, 1299, 572, 573, 574, 575, 576, 5500, 578, 580,
	0, 1238, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 0, 1292, 0, 0, 0, 1236, 0, 788, 0,
	1257, 774, 0, 1262, 1263, 1252, 760, 1242, 0, 0,
	0, 1243, 0, 0, 1232, 1233, 296, 0, 313, 794,
	0, 362, 399, 1247, 0, 1235, 459, 0, 512, 516,
	0, 605, 1267, 0, 1239, 0, 370, 1260, 799, 0,
	805, 1261, 811, 1259, 581, 0, 801, 802, 807, 301,
	1336, 604, 675, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 1289, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 1248, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386,
	1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334, 1328,
	1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337, 1276,
	1329, 1327, 1326, 1323, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 1301, 1279,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 5310, 1290, 1280, 1285, 1291, 1281, 1282, 1286,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 1293, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 1302, 5312, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 1303,
	0, 427, 428, 429, 1283, 1284, 430, 431, 432, 433,
	434, 435, 438, 1316, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	1294, 455, 457, 458, 1300, 642, 1295, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	1296, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 5311, 522, 523, 1254, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 1287, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 1297, 559,
	560, 1288, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 1298, 571, 1299, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 1238, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309,
	1310, 1320, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 0, 0, 0, 1292, 0, 0, 0,
	1236, 0, 788, 0, 1257, 774, 0, 1262, 1263, 1252,
	760, 1242, 0, 0, 0, 5309, 0, 0, 1232, 1233,
	296, 0, 313, 794, 0, 362, 399, 1247, 0, 1235,
	459, 0, 512, 516, 0, 5499, 1267, 0, 1239, 0,
	370, 1260, 799, 0, 805, 1261, 811, 1259, 581, 0,
	801, 802, 807, 301, 1336, 604, 675, 0, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 5501, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 1248, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330,
	1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331,
	1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 1251, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 1254,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 5500, 578, 580, 0, 1238,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	1292, 0, 0, 0, 1236, 0, 788, 0, 1257, 774,
	0, 1262, 1263, 1252, 760, 1242, 0, 0, 0, 1243,
	0, 0, 1232, 1233, 296, 0, 313, 794, 0, 362,
	399, 1247, 0, 1235, 459, 0, 512, 516, 0, 605,
	1267, 0, 1239, 0, 370, 1260, 799, 0, 805, 1261,
	811, 1259, 581, 0, 801, 802, 807, 301, 1336, 604,
	675, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 1289, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 0, 447, 504, 661, 1248, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 1317, 1319,
	1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 1313, 0,
	598, 1322, 1333, 1330, 1335, 1321, 1334, 1328, 1023, 645,
	1325, 1324, 1338, 1331, 1332, 591, 1337, 1276, 1329, 1327,
	1326, 1323, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 1301, 1279, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	1293, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 1302, 1251, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 1303, 0, 427,
	428, 429, 1283, 1284, 430, 431, 432, 433, 434, 435,
	438, 1316, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 4827, 638, 1294, 455,
	457, 458, 1300, 642, 1295, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 1296, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 1254, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 1287, 538, 648, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 1297, 559, 560, 1288,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 1298, 571, 1299, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 1238, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 0, 0, 0, 1292, 0, 0, 0, 1236, 0,
	788, 0, 1257, 774, 0, 1262, 1263, 1252, 760, 1242,
	0, 0, 0, 1243, 0, 0, 1232, 1233, 296, 0,
	313, 794, 0, 362, 399, 1247, 0, 1235, 459, 0,
	512, 516, 0, 605, 1267, 0, 1239, 0, 370, 1260,
	799, 0, 805, 1261, 811, 1259, 581, 0, 801, 802,
	807, 301, 1336, 604, 675, 0, 0, 0, 1253, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	0, 803, 800, 804, 810, 798, 808, 795, 806, 0,
	503, 437, 654, 530, 308, 354, 341, 383, 425, 537,
	0, 0, 415, 585, 350, 439, 0, 329, 472, 1289,
	561, 436, 0, 544, 564, 0, 456, 335, 495, 551,
	552, 792, 797, 0, 813, 0, 339, 340, 461, 321,
	469, 666, 632, 524, 482, 480, 0, 447, 504, 661,
	1248, 0, 369, 0, 364, 460, 600, 327, 579, 498,
	465, 419, 527, 556, 366, 351, 352, 395, 497, 385,
	337, 590, 1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318,
	1314, 386, 1313, 0, 598, 1322, 1333, 1330, 1335, 1321,
	1334, 1328, 1023, 645, 1325, 1324, 1338, 1331, 1332, 591,
	1337, 1276, 1329, 1327, 1326, 1323, 0, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 297, 0, 298,
	299, 300, 302, 303, 304, 791, 305, 306, 307, 310,
	311, 312, 314, 674, 315, 316, 317, 318, 319, 320,
	1301, 1279, 322, 323, 324, 325, 326, 328, 330, 331,
	332, 333, 334, 336, 338, 1290, 1280, 1285, 1291, 1281,
	1282, 1286, 342, 343, 344, 345, 346, 347, 0, 348,
	349, 353, 355, 356, 357, 358, 359, 360, 363, 0,
	365, 367, 0, 368, 371, 0, 372, 373, 374, 375,
	376, 377, 378, 379, 1293, 380, 0, 381, 382, 384,
	0, 387, 388, 389, 390, 391, 0, 392, 1302, 1251,
	393, 394, 396, 397, 398, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 0, 412, 413,
	414, 416, 0, 417, 418, 421, 422, 423, 424, 0,
	426, 1303, 0, 427, 428, 429, 1283, 1284, 430, 431,
	432, 433, 434, 435, 438, 1316, 440, 441, 442, 443,
	444, 445, 446, 676, 448, 449, 450, 451, 452, 453,
	454, 638, 1294, 455, 457, 458, 1300, 642, 1295, 809,
	473, 474, 475, 476, 477, 478, 479, 481, 0, 483,
	484, 485, 1296, 486, 487, 488, 489, 0, 490, 491,
	492, 493, 494, 496, 499, 500, 501, 502, 0, 505,
	506, 507, 508, 509, 510, 511, 513, 514, 515, 517,
	518, 519, 677, 520, 521, 522, 523, 1254, 525, 526,
	678, 528, 529, 531, 532, 533, 534, 535, 536, 687,
	1287, 538, 648, 539, 540, 541, 542, 543, 0, 545,
	546, 547, 548, 549, 550, 553, 554, 555, 557, 558,
	1297, 559, 560, 1288, 562, 563, 812, 565, 566, 567,
	568, 569, 0, 688, 570, 1298, 571, 1299, 572, 573,
	574, 575, 576, 577, 578, 580, 0, 1238, 582, 583,
	584, 586, 587, 588, 589, 592, 593, 594, 595, 596,
	0, 597, 599, 601, 679, 4814, 1304, 1305, 1308, 1306,
	1307, 1309, 1310, 1320, 602, 603, 619, 470, 464, 420,
	462, 463, 467, 468, 471, 0, 0, 0, 1292, 0,
	0, 0, 1236, 0, 788, 0, 1257, 774, 0, 1262,
	1263, 1252, 760, 1242, 0, 0, 0, 1243, 0, 0,
	1232, 1233, 296, 0, 313, 794, 0, 362, 399, 1247,
	0, 1235, 459, 0, 512, 516, 0, 605, 1267, 0,
	1239, 0, 370, 1260, 799, 0, 805, 1261, 811, 1259,
	581, 0, 801, 802, 807, 301, 1336, 604, 675, 0,
	0, 0, 1253, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 654, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 1289, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	3901, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 1248, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 1317, 1319, 1315, 1311,
	1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322,
	1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324,
	1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 1301, 1279, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1290,
	1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 1293, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 1302, 1251, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 1303, 0, 427, 428, 429,
	1283, 1284, 430, 431, 432, 433, 434, 435, 438, 1316,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 1294, 455, 457, 458,
	1300, 642, 1295, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 1296, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 1254, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1287, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 1297, 559, 560, 1288, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 1298,
	571, 1299, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 1238, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 0, 1292, 0, 0, 0, 1236, 0, 788, 0,
	3014, 774, 0, 1262, 1263, 1252, 760, 1242, 0, 0,
	0, 1243, 0, 0, 1232, 1233, 296, 0, 313, 794,
	0, 362, 399, 1247, 0, 1235, 459, 0, 512, 516,
	0, 605, 1267, 0, 1239, 0, 370, 1260, 799, 0,
	805, 1261, 811, 1259, 581, 0, 801, 802, 807, 301,
	1336, 604, 675, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 1289, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 1248, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386,
	1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334, 1328,
	1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337, 1276,
	1329, 1327, 1326, 1323, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 1301, 1279,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 1293, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 1302, 1251, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 1303,
	0, 427, 428, 429, 1283, 1284, 430, 431, 432, 433,
	434, 435, 438, 1316, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	1294, 455, 457, 458, 1300, 642, 1295, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	1296, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 1254, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 1287, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 1297, 559,
	560, 1288, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 1298, 571, 1299, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 1238, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309,
	1310, 1320, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 0, 0, 0, 1292, 0, 0, 0,
	1236, 0, 788, 0, 1257, 774, 0, 1262, 1263, 1252,
	760, 1242, 0, 0, 0, 1243, 0, 0, 1232, 1233,
	296, 0, 313, 794, 0, 362, 399, 1247, 0, 1235,
	459, 0, 512, 516, 0, 605, 1267, 0, 1239, 0,
	370, 1260, 799, 0, 805, 1261, 811, 1259, 581, 0,
	801, 802, 807, 301, 1336, 604, 675, 0, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 1248, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330,
	1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331,
	1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 1251, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 1254,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 1238,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	1292, 0, 0, 0, 1236, 0, 788, 0, 1257, 774,
	0, 1262, 1263, 1252, 760, 1242, 0, 0, 0, 1243,
	0, 0, 1921, 1922, 296, 0, 313, 794, 0, 362,
	399, 1247, 0, 0, 459, 0, 512, 516, 0, 605,
	1267, 0, 5130, 0, 370, 1260, 799, 0, 805, 1261,
	811, 1259, 581, 0, 801, 802, 807, 301, 1336, 604,
	675, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 1289, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 0, 447, 504, 661, 1248, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 1317, 1319,
	1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 1313, 0,
	598, 1322, 1333, 1330, 1335, 1321, 1334, 1328, 1023, 645,
	1325, 1324, 1338, 1331, 1332, 591, 1337, 1276, 1329, 1327,
	1326, 1323, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 1301, 1279, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	1293, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 1302, 1251, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 1303, 0, 427,
	428, 429, 1283, 1284, 430, 431, 432, 433, 434, 435,
	438, 1316, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 638, 1294, 455,
	457, 458, 1300, 642, 1295, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 1296, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 3152, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 1287, 538, 648, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 1297, 559, 560, 1288,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 1298, 571, 1299, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 0, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 0, 0, 0, 1292, 0, 0, 0, 0, 0,
	788, 0, 1257, 774, 0, 1262, 1263, 1252, 760, 1242,
	0, 0, 0, 3008, 0, 0, 3149, 3150, 296, 0,
	313, 794, 0, 362, 399, 1247, 0, 0, 459, 0,
	512, 516, 0, 605, 1267, 0, 0, 0, 370, 1260,
	799, 0, 805, 1261, 811, 1259, 581, 0, 801, 802,
	807, 301, 1336, 604, 675, 0, 0, 0, 1253, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	0, 803, 800, 804, 810, 798, 808, 795, 806, 0,
	503, 437, 654, 530, 308, 354, 341, 383, 425, 537,
	0, 0, 415, 585, 350, 439, 0, 329, 472, 1289,
	561, 436, 0, 544, 564, 0, 456, 335, 495, 551,
	552, 792, 797, 0, 813, 0, 339, 340, 461, 321,
	469, 666, 632, 524, 482, 480, 0, 447, 504, 661,
	1248, 0, 369, 0, 364, 460, 600, 327, 579, 498,
	465, 419, 527, 556, 366, 351, 352, 395, 497, 385,
	337, 590, 1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318,
	1314, 386, 1313, 0, 598, 1322, 1333, 1330, 1335, 1321,
	1334, 1328, 1023, 645, 1325, 1324, 1338, 1331, 1332, 591,
	1337, 1276, 1329, 1327, 1326, 1323, 0, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 297, 0, 298,
	299, 300, 302, 303, 304, 791, 305, 306, 307, 310,
	311, 312, 314, 674, 315, 316, 317, 318, 319, 320,
	1301, 1279, 322, 323, 324, 325, 326, 328, 330, 331,
	332, 333, 334, 336, 338, 1290, 1280, 1285, 1291, 1281,
	1282, 1286, 342, 343, 344, 345, 346, 347, 0, 348,
	349, 353, 355, 356, 357, 358, 359, 360, 363, 0,
	365, 367, 0, 368, 371, 0, 372, 373, 374, 375,
	376, 377, 378, 379, 1293, 380, 0, 381, 382, 384,
	0, 387, 388, 389, 390, 391, 0, 392, 1302, 1251,
	393, 394, 396, 397, 398, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 0, 412, 413,
	414, 416, 0, 417, 418, 421, 422, 423, 424, 0,
	426, 1303, 0, 427, 428, 429, 1283, 1284, 430, 431,
	432, 433, 434, 435, 438, 1316, 440, 441, 442, 443,
	444, 445, 446, 676, 448, 449, 450, 451, 452, 453,
	454, 638, 1294, 455, 457, 458, 1300, 642, 1295, 809,
	473, 474, 475, 476, 477, 478, 479, 481, 0, 483,
	484, 485, 1296, 486, 487, 488, 489, 0, 490, 491,
	492, 493, 494, 496, 499, 500, 501, 502, 0, 505,
	506, 507, 508, 509, 510, 511, 513, 514, 515, 517,
	518, 519, 677, 520, 521, 522, 523, 3152, 525, 526,
	678, 528, 529, 531, 532, 533, 534, 535, 536, 687,
	1287, 538, 648, 539, 540, 541, 542, 543, 0, 545,
	546, 547, 548, 549, 550, 553, 554, 555, 557, 558,
	1297, 559, 560, 1288, 562, 563, 812, 565, 566, 567,
	568, 569, 0, 688, 570, 1298, 571, 1299, 572, 573,
	574, 575, 576, 577, 578, 580, 0, 0, 582, 583,
	584, 586, 587, 588, 589, 592, 593, 594, 595, 596,
	0, 597, 599, 601, 679, 656, 1304, 1305, 1308, 1306,
	1307, 1309, 1310, 1320, 602, 603, 619, 470, 464, 420,
	462, 463, 467, 468, 471, 0, 0, 0, 1292, 0,
	0, 0, 0, 0, 788, 0, 1257, 774, 0, 1262,
	1263, 0, 760, 1242, 0, 0, 0, 3008, 0, 0,
	3149, 3150, 296, 0, 313, 794, 0, 362, 399, 1247,
	0, 0, 459, 0, 512, 516, 0, 605, 1267, 0,
	0, 0, 370, 1260, 799, 0, 805, 1261, 811, 1259,
	581, 0, 801, 802, 807, 301, 1336, 604, 675, 0,
	0, 0, 466, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 654, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 1289, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	339, 340, 461, 321, 469, 666, 632, 3007, 482, 480,
	0, 447, 504, 661, 1248, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 1317, 1319, 1315, 1311,
	1312, 1277, 1278, 1318, 1314, 386, 1313, 0, 598, 1322,
	1333, 1330, 1335, 1321, 1334, 1328, 1023, 645, 1325, 1324,
	1338, 1331, 1332, 591, 1337, 1276, 1329, 1327, 1326, 1323,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 1301, 1279, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 1290,
	1280, 1285, 1291, 1281, 1282, 1286, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 1293, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 1302, 1251, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 1303, 0, 427, 428, 429,
	1283, 1284, 430, 431, 432, 433, 434, 435, 438, 1316,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 1294, 455, 457, 458,
	1300, 642, 1295, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 1296, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 3006, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 1287, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 1297, 559, 560, 1288, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 1298,
	571, 1299, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 0, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	1304, 1305, 1308, 1306, 1307, 1309, 1310, 1320, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 0, 1292, 0, 0, 0, 0, 0, 788, 0,
	1257, 774, 0, 1262, 1263, 1252, 760, 1242, 0, 0,
	0, 3008, 0, 0, 3004, 3005, 296, 0, 313, 794,
	0, 362, 399, 1247, 0, 1235, 459, 0, 512, 516,
	0, 0, 1267, 0, 1239, 0, 370, 1260, 0, 0,
	0, 1261, 0, 1259, 581, 0, 0, 0, 0, 301,
	1336, 604, 675, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 1289, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 5501, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 1248, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386,
	1313, 0, 598, 1322, 1333, 1330, 1335, 1321, 1334, 1328,
	1023, 645, 1325, 1324, 1338, 1331, 1332, 591, 1337, 1276,
	1329, 1327, 1326, 1323, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 1301, 1279,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 1293, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 1302, 1251, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 1303,
	0, 427, 428, 429, 1283, 1284, 430, 431, 432, 433,
	434, 435, 438, 1316, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	1294, 455, 457, 458, 1300, 642, 1295, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	1296, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 1254, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 1287, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 1297, 559,
	560, 1288, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 1298, 571, 1299, 572, 573, 574, 575,
	576, 5500, 578, 580, 0, 1238, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309,
	1310, 1320, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 0, 0, 0, 1292, 0, 0, 0,
	0, 0, 788, 0, 1257, 774, 0, 1262, 1263, 0,
	760, 1242, 0, 0, 0, 1243, 0, 0, 1232, 1233,
	296, 0, 313, 794, 0, 362, 399, 1247, 0, 0,
	459, 0, 512, 516, 0, 605, 1267, 0, 0, 0,
	370, 1260, 799, 0, 805, 1261, 811, 1259, 581, 0,
	801, 802, 807, 301, 1336, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 1248, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330,
	1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331,
	1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 1251, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 3152,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	1292, 0, 788, 0, 1257, 774, 0, 1262, 1263, 0,
	760, 1242, 0, 0, 0, 0, 0, 0, 0, 3008,
	296, 0, 313, 794, 0, 362, 399, 1247, 0, 0,
	459, 0, 512, 516, 0, 605, 1267, 0, 0, 0,
	370, 1260, 799, 0, 805, 1261, 811, 1259, 581, 0,
	801, 802, 807, 301, 1336, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 4460, 1248, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330,
	1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331,
	1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 1251, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 3152,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	1292, 0, 788, 0, 1257, 774, 0, 1262, 1263, 0,
	760, 1242, 0, 0, 0, 0, 0, 0, 0, 3008,
	296, 0, 313, 794, 0, 362, 399, 1247, 0, 0,
	459, 0, 512, 516, 0, 605, 1267, 0, 0, 0,
	370, 1260, 799, 0, 805, 1261, 811, 1259, 581, 0,
	801, 802, 807, 301, 1336, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 4402, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 1248, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 1313, 0, 598, 1322, 1333, 1330,
	1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331,
	1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 1251, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 3152,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 788, 0, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 794, 3008,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 157,
	605, 0, 0, 0, 0, 370, 0, 799, 0, 805,
	0, 811, 0, 581, 0, 801, 802, 807, 301, 689,
	604, 675, 0, 0, 0, 466, 154, 0, 0, 834,
	155, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 1119,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 1289, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 3238, 3239,
	3237, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 1317,
	1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 3244,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 1301, 1279, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 1293, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 1302, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 3230, 426, 1303, 0,
	427, 428, 429, 1283, 1284, 430, 431, 432, 433, 434,
	435, 438, 1316, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 1294,
	455, 457, 458, 1300, 642, 1295, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 1296,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 1287, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 1297, 559, 560,
	1288, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 1298, 571, 1299, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310,
	1320, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 788, 0, 0, 1292, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 794, 3232, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 834, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 3238, 3239, 3237, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 3244, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 3230, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 788, 0, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 794, 3232,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 799, 0, 805,
	0, 811, 0, 581, 0, 801, 802, 807, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 1289, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 1317,
	1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 3244,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 1301, 1279, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 1293, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 1302, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 1303, 0,
	427, 428, 429, 1283, 1284, 430, 431, 432, 433, 434,
	435, 438, 1316, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 1294,
	455, 457, 458, 1300, 642, 1295, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 1296,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 1287, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 1297, 559, 560,
	1288, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 1298, 571, 1299, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310,
	1320, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 788, 0, 0, 1292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 794, 4616, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 3244, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 788, 0, 0,
	1292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 794, 5567,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 799, 0, 805,
	0, 811, 0, 581, 0, 801, 802, 807, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 1289, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 1317,
	1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386, 3244,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 1301, 1279, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 1293, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 1302, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 1303, 0,
	427, 428, 429, 1283, 1284, 430, 431, 432, 433, 434,
	435, 438, 1316, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 1294,
	455, 457, 458, 1300, 642, 1295, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 1296,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 1287, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 1297, 559, 560,
	1288, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 1298, 571, 1299, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309, 1310,
	1320, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 788, 0, 0, 1292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 794, 3374, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 1289, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 3238, 3239, 3237, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 1317, 1319, 1315, 1311, 1312, 1277,
	1278, 1318, 1314, 386, 3244, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 1301, 1279, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 1290, 1280, 1285,
	1291, 1281, 1282, 1286, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 1293, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	1302, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 1303, 0, 427, 428, 429, 1283, 1284,
	430, 431, 432, 433, 434, 435, 438, 1316, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 1294, 455, 457, 458, 1300, 642,
	1295, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 1296, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 1287, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 1297, 559, 560, 1288, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 1298, 571, 1299,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 1304, 1305,
	1308, 1306, 1307, 1309, 1310, 1320, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	1292, 0, 919, 0, 1680, 774, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	296, 0, 313, 794, 0, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 1685, 0,
	370, 1677, 799, 0, 805, 0, 811, 1676, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 1678, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	796, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 1680, 774,
	0, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 1681, 1682, 296, 0, 313, 794, 0, 362,
	399, 614, 0, 0, 459, 0, 512, 516, 0, 605,
	0, 0, 1672, 0, 370, 1677, 799, 0, 805, 0,
	811, 1676, 581, 0, 801, 802, 807, 301, 689, 604,
	675, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 1678, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 0, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 0, 447, 504, 661, 0, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 629, 633,
	631, 627, 624, 628, 625, 626, 630, 386, 623, 0,
	598, 607, 641, 621, 649, 606, 646, 616, 361, 645,
	610, 609, 655, 636, 637, 591, 651, 622, 620, 613,
	612, 608, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 611, 793, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 0, 0, 0, 796, 0, 0, 0, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	615, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 617, 618, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 634, 0, 427,
	428, 429, 0, 0, 430, 431, 432, 433, 434, 435,
	438, 635, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 638, 639, 455,
	457, 458, 640, 642, 643, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 644, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 647, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 0, 538, 648, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 650, 559, 560, 0,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 652, 571, 653, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 0, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 656, 657, 658, 659, 660, 662, 663, 664, 665,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 1680, 774, 0, 0, 0, 0, 760, 0,
	0, 0, 0, 0, 0, 0, 1681, 1682, 296, 0,
	313, 794, 0, 362, 399, 614, 0, 0, 459, 0,
	512, 516, 0, 605, 0, 0, 0, 0, 370, 1677,
	799, 0, 805, 0, 811, 1676, 581, 0, 801, 802,
	807, 301, 689, 604, 675, 0, 0, 0, 466, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	1678, 803, 800, 804, 810, 798, 808, 795, 806, 0,
	503, 437, 654, 530, 308, 354, 341, 383, 425, 537,
	0, 0, 415, 585, 350, 439, 0, 329, 472, 0,
	561, 436, 0, 544, 564, 0, 456, 335, 495, 551,
	552, 792, 797, 0, 813, 0, 339, 340, 461, 321,
	469, 666, 632, 524, 482, 480, 0, 447, 504, 661,
	0, 0, 369, 0, 364, 460, 600, 327, 579, 498,
	465, 419, 527, 556, 366, 351, 352, 395, 497, 385,
	337, 590, 629, 633, 631, 627, 624, 628, 625, 626,
	630, 386, 623, 0, 598, 607, 641, 621, 649, 606,
	646, 616, 361, 645, 610, 609, 655, 636, 637, 591,
	651, 622, 620, 613, 612, 608, 0, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 297, 0, 298,
	299, 300, 302, 303, 304, 791, 305, 306, 307, 310,
	311, 312, 314, 674, 315, 316, 317, 318, 319, 320,
	611, 793, 322, 323, 324, 325, 326, 328, 330, 331,
	332, 333, 334, 336, 338, 0, 0, 0, 796, 0,
	0, 0, 342, 343, 344, 345, 346, 347, 0, 348,
	349, 353, 355, 356, 357, 358, 359, 360, 363, 0,
	365, 367, 0, 368, 371, 0, 372, 373, 374, 375,
	376, 377, 378, 379, 615, 380, 0, 381, 382, 384,
	0, 387, 388, 389, 390, 391, 0, 392, 617, 618,
	393, 394, 396, 397, 398, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 0, 412, 413,
	414, 416, 0, 417, 418, 421, 422, 423, 424, 0,
	426, 634, 0, 427, 428, 429, 0, 0, 430, 431,
	432, 433, 434, 435, 438, 635, 440, 441, 442, 443,
	444, 445, 446, 676, 448, 449, 450, 451, 452, 453,
	454, 638, 639, 455, 457, 458, 640, 642, 643, 809,
	473, 474, 475, 476, 477, 478, 479, 481, 0, 483,
	484, 485, 644, 486, 487, 488, 489, 0, 490, 491,
	492, 493, 494, 496, 499, 500, 501, 502, 0, 505,
	506, 507, 508, 509, 510, 511, 513, 514, 515, 517,
	518, 519, 677, 520, 521, 522, 523, 647, 525, 526,
	678, 528, 529, 531, 532, 533, 534, 535, 536, 687,
	0, 538, 648, 539, 540, 541, 542, 543, 0, 545,
	546, 547, 548, 549, 550, 553, 554, 555, 557, 558,
	650, 559, 560, 0, 562, 563, 812, 565, 566, 567,
	568, 569, 0, 688, 570, 652, 571, 653, 572, 573,
	574, 575, 576, 577, 578, 580, 0, 0, 582, 583,
	584, 586, 587, 588, 589, 592, 593, 594, 595, 596,
	0, 597, 599, 601, 679, 656, 657, 658, 659, 660,
	662, 663, 664, 665, 602, 603, 619, 470, 464, 420,
	462, 463, 467, 468, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1681, 1682, 296, 0, 313, 794, 0, 362, 399, 614,
	0, 0, 459, 0, 512, 516, 157, 605, 0, 0,
	0, 0, 370, 0, 799, 0, 805, 0, 811, 0,
	581, 0, 801, 802, 807, 301, 689, 604, 675, 0,
	0, 0, 466, 154, 0, 0, 0, 155, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 1119, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 0, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 152,
	339, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 0, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 629, 633, 631, 627,
	624, 628, 625, 626, 630, 386, 623, 0, 598, 607,
	641, 621, 649, 606, 646, 616, 361, 645, 610, 609,
	655, 636, 637, 591, 651, 622, 620, 613, 612, 608,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 153, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 611, 793, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 0,
	0, 0, 796, 0, 0, 0, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 615, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 617, 618, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 634, 0, 427, 428, 429,
	0, 0, 430, 431, 432, 433, 434, 435, 438, 635,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 639, 455, 457, 458,
	640, 642, 643, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 644, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 647, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 0, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 650, 559, 560, 0, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 652,
	571, 653, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 0, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	657, 658, 659, 660, 662, 663, 664, 665, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 788,
	0, 0, 0, 0, 0, 1122, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 313,
	794, 151, 362, 399, 614, 0, 0, 459, 0, 512,
	516, 0, 605, 0, 0, 0, 0, 370, 0, 799,
	0, 805, 0, 811, 0, 581, 0, 801, 802, 807,
	301, 689, 604, 675, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 0, 0, 0,
	803, 800, 804, 810, 798, 808, 795, 806, 0, 503,
	437, 654, 530, 308, 354, 341, 383, 425, 537, 0,
	0, 415, 585, 350, 439, 0, 329, 472, 0, 561,
	436, 0, 544, 564, 0, 456, 335, 495, 551, 552,
	792, 797, 0, 813, 0, 339, 340, 461, 321, 469,
	666, 632, 524, 482, 480, 0, 447, 504, 661, 0,
	0, 369, 0, 364, 460, 600, 327, 579, 498, 465,
	419, 527, 556, 366, 351, 352, 395, 497, 385, 337,
	590, 629, 633, 631, 627, 624, 628, 625, 626, 630,
	386, 623, 0, 598, 607, 641, 621, 649, 606, 646,
	616, 361, 645, 610, 609, 655, 636, 637, 591, 651,
	622, 620, 613, 612, 608, 0, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 297, 0, 298, 299,
	300, 302, 303, 304, 791, 305, 306, 307, 310, 311,
	312, 314, 674, 315, 316, 317, 318, 319, 320, 611,
	793, 322, 323, 324, 325, 326, 328, 330, 331, 332,
	333, 334, 336, 338, 0, 0, 0, 796, 0, 0,
	0, 342, 343, 344, 345, 346, 347, 0, 348, 349,
	353, 355, 356, 357, 358, 359, 360, 363, 0, 365,
	367, 0, 368, 371, 0, 372, 373, 374, 375, 376,
	377, 378, 379, 615, 380, 0, 381, 382, 384, 0,
	387, 388, 389, 390, 391, 0, 392, 617, 618, 393,
	394, 396, 397, 398, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 0, 412, 413, 414,
	416, 0, 417, 418, 421, 422, 423, 424, 0, 426,
	634, 0, 427, 428, 429, 0, 0, 430, 431, 432,
	433, 434, 435, 438, 635, 440, 441, 442, 443, 444,
	445, 446, 676, 448, 449, 450, 451, 452, 453, 454,
	638, 639, 455, 457, 458, 640, 642, 643, 809, 473,
	474, 475, 476, 477, 478, 479, 481, 0, 483, 484,
	485, 644, 486, 487, 488, 489, 0, 490, 491, 492,
	493, 494, 496, 499, 500, 501, 502, 0, 505, 506,
	507, 508, 509, 510, 511, 513, 514, 515, 517, 518,
	519, 677, 520, 521, 522, 523, 647, 525, 526, 678,
	528, 529, 531, 532, 533, 534, 535, 536, 687, 0,
	538, 648, 539, 540, 541, 542, 543, 0, 545, 546,
	547, 548, 549, 550, 553, 554, 555, 557, 558, 650,
	559, 560, 0, 562, 563, 812, 565, 566, 567, 568,
	569, 0, 688, 570, 652, 571, 653, 572, 573, 574,
	575, 576, 577, 578, 580, 0, 0, 582, 583, 584,
	586, 587, 588, 589, 592, 593, 594, 595, 596, 0,
	597, 599, 601, 679, 656, 657, 658, 659, 660, 662,
	663, 664, 665, 602, 603, 619, 470, 464, 420, 462,
	463, 467, 468, 471, 283, 0, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 899, 900,
	901, 0, 296, 0, 313, 0, 5285, 362, 399, 614,
	0, 0, 459, 0, 512, 516, 0, 605, 0, 0,
	0, 0, 370, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 0, 0, 301, 689, 604, 675, 0,
	0, 0, 466, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 503, 437, 654, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 0, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 0, 0, 0, 0, 0,
	339, 340, 461, 321, 469, 666, 632, 524, 482, 480,
	0, 447, 504, 661, 0, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 629, 633, 631, 627,
	624, 628, 625, 626, 630, 386, 623, 0, 598, 607,
	641, 621, 649, 606, 646, 616, 361, 645, 610, 609,
	655, 636, 637, 591, 651, 622, 620, 613, 612, 608,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 0,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 611, 0, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 0,
	0, 0, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 615, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 617, 618, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 634, 0, 427, 428, 429,
	0, 0, 430, 431, 432, 433, 434, 435, 438, 635,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 638, 639, 455, 457, 458,
	640, 642, 643, 0, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 644, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 647, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 0, 538, 648, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 650, 559, 560, 0, 562, 563,
	0, 565, 566, 567, 568, 569, 0, 688, 570, 652,
	571, 653, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 0, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 656,
	657, 658, 659, 660, 662, 663, 664, 665, 602, 603,
	619, 470, 464, 420, 462, 463, 467, 468, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 897, 898, 0, 0,
	0, 0, 0, 283, 890, 891, 892, 893, 894, 895,
	888, 0, 0, 0, 0, 0, 0, 899, 900, 901,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 5259, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 897, 898, 0, 0, 0,
	0, 0, 283, 890, 891, 892, 893, 894, 895, 888,
	0, 0, 0, 0, 0, 0, 899, 900, 901, 0,
	296, 0, 313, 0, 0, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 0, 0, 0, 0, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 0, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 3580,
	319, 320, 611, 0, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 3581, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 0, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 897, 898, 0, 0, 0, 0,
	0, 283, 890, 891, 892, 893, 894, 895, 888, 0,
	0, 0, 0, 0, 0, 899, 900, 901, 0, 296,
	0, 313, 0, 0, 362, 399, 614, 0, 0, 459,
	0, 512, 516, 0, 605, 0, 0, 0, 0, 370,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 301, 689, 604, 675, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 503, 437, 654, 530, 308, 354, 341, 383, 425,
	537, 0, 0, 415, 585, 350, 439, 0, 329, 472,
	0, 561, 436, 0, 544, 564, 0, 456, 335, 495,
	551, 552, 0, 0, 0, 0, 0, 339, 340, 461,
	321, 469, 666, 632, 524, 482, 480, 0, 447, 504,
	661, 0, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 629, 633, 631, 627, 624, 628, 625,
	626, 630, 386, 623, 0, 598, 607, 641, 621, 649,
	606, 646, 616, 361, 645, 610, 609, 655, 636, 637,
	591, 651, 622, 620, 613, 612, 608, 0, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 0,
	298, 299, 300, 302, 303, 304, 0, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 1787, 319,
	320, 611, 0, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 0, 0, 0, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 347, 0,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	0, 365, 367, 0, 368, 371, 0, 372, 373, 374,
	375, 376, 377, 378, 379, 615, 1788, 0, 381, 382,
	384, 0, 387, 388, 389, 390, 391, 0, 392, 617,
	618, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 0, 412,
	413, 414, 416, 0, 417, 418, 421, 422, 423, 424,
	0, 426, 634, 0, 427, 428, 429, 0, 0, 430,
	431, 432, 433, 434, 435, 438, 635, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 638, 639, 455, 457, 458, 640, 642, 643,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 0,
	483, 484, 485, 644, 486, 487, 488, 489, 0, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 0,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 647, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 0, 538, 648, 539, 540, 541, 542, 543, 0,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 650, 559, 560, 0, 562, 563, 0, 565, 566,
	567, 568, 569, 0, 688, 570, 652, 571, 653, 572,
	573, 574, 575, 576, 577, 578, 580, 0, 0, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 0, 597, 599, 601, 679, 656, 657, 658, 659,
	660, 662, 663, 664, 665, 602, 603, 619, 470, 464,
	420, 462, 463, 467, 468, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 897, 898, 0, 0, 0, 0, 0,
	283, 890, 891, 892, 893, 894, 895, 888, 0, 0,
	0, 0, 0, 0, 899, 900, 901, 0, 296, 0,
	313, 0, 0, 362, 399, 614, 0, 0, 459, 0,
	512, 516, 0, 605, 0, 0, 0, 0, 370, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 0,
	0, 301, 689, 604, 675, 0, 0, 0, 466, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	503, 437, 654, 530, 308, 354, 341, 383, 425, 537,
	0, 0, 415, 585, 350, 439, 0, 329, 472, 0,
	561, 436, 0, 544, 564, 0, 456, 335, 495, 551,
	552, 0, 0, 0, 0, 0, 339, 340, 461, 321,
	469, 666, 632, 524, 482, 480, 0, 447, 504, 661,
	0, 0, 369, 0, 364, 460, 600, 327, 579, 498,
	465, 419, 527, 556, 366, 351, 352, 395, 497, 385,
	337, 590, 629, 633, 631, 627, 624, 628, 625, 626,
	630, 386, 623, 0, 598, 607, 641, 621, 649, 606,
	646, 616, 361, 645, 610, 609, 655, 636, 637, 591,
	651, 622, 620, 613, 612, 608, 0, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 297, 0, 298,
	299, 300, 302, 303, 304, 0, 305, 306, 307, 310,
	311, 312, 314, 674, 315, 316, 317, 884, 319, 320,
	611, 0, 322, 323, 324, 325, 326, 328, 330, 331,
	332, 333, 334, 336, 338, 0, 0, 0, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 347, 0, 348,
	349, 353, 355, 356, 357, 358, 359, 360, 363, 0,
	365, 367, 0, 368, 371, 0, 372, 373, 374, 375,
	376, 377, 378, 379, 615, 885, 0, 381, 382, 384,
	0, 387, 388, 389, 390, 391, 0, 392, 617, 618,
	393, 394, 396, 397, 398, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 0, 412, 413,
	414, 416, 0, 417, 418, 421, 422, 423, 424, 0,
	426, 634, 0, 427, 428, 429, 0, 0, 430, 431,
	432, 433, 434, 435, 438, 635, 440, 441, 442, 443,
	444, 445, 446, 676, 448, 449, 450, 451, 452, 453,
	454, 638, 639, 455, 457, 458, 640, 642, 643, 0,
	473, 474, 475, 476, 477, 478, 479, 481, 0, 483,
	484, 485, 644, 486, 487, 488, 489, 0, 490, 491,
	492, 493, 494, 496, 499, 500, 501, 502, 0, 505,
	506, 507, 508, 509, 510, 511, 513, 514, 515, 517,
	518, 519, 677, 520, 521, 522, 523, 647, 525, 526,
	678, 528, 529, 531, 532, 533, 534, 535, 536, 687,
	0, 538, 648, 539, 540, 541, 542, 543, 0, 545,
	546, 547, 548, 549, 550, 553, 554, 555, 557, 558,
	650, 559, 560, 0, 562, 563, 0, 565, 566, 567,
	568, 569, 0, 688, 570, 652, 571, 653, 572, 573,
	574, 575, 576, 577, 578, 580, 0, 0, 582, 583,
	584, 586, 587, 588, 589, 592, 593, 594, 595, 596,
	0, 597, 599, 601, 679, 656, 657, 658, 659, 660,
	662, 663, 664, 665, 602, 603, 619, 470, 464, 420,
	462, 463, 467, 468, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 788, 0,
	0, 896, 897, 898, 0, 0, 0, 0, 0, 0,
	890, 891, 892, 893, 894, 895, 296, 0, 313, 794,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 799, 0,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 1289, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	1317, 1319, 1315, 1311, 1312, 1277, 1278, 1318, 1314, 386,
	3244, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 1301, 1279,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 1290, 1280, 1285, 1291, 1281, 1282, 1286,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 1293, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 1302, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 1303,
	0, 427, 428, 429, 1283, 1284, 430, 431, 432, 433,
	434, 435, 438, 1316, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	1294, 455, 457, 458, 1300, 642, 1295, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	1296, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 1287, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 1297, 559,
	560, 1288, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 1298, 571, 1299, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 1304, 1305, 1308, 1306, 1307, 1309,
	1310, 1320, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 919, 0, 0, 1292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 794, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 799, 0, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 152, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 153, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 796, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 1122, 0, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 756,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 755, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 747, 748, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 749, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 754, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 753,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 745, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 746, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	750, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 788, 0, 1257, 774, 0, 1262, 1263, 0,
	760, 0, 0, 0, 0, 0, 0, 0, 758, 759,
	296, 0, 313, 794, 0, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 1260, 799, 0, 805, 1261, 811, 1259, 581, 0,
	801, 802, 807, 301, 1336, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 5854, 0, 598, 1322, 1333, 1330,
	1335, 1321, 1334, 1328, 1023, 645, 1325, 1324, 1338, 1331,
	1332, 591, 1337, 1276, 1329, 1327, 1326, 1323, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	796, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 0, 0,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 0, 0,
	0, 0, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 0, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 0, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 0, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 0, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 562, 563, 0, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 0, 0, 362, 399, 614, 0, 5697,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 0, 0, 0, 0, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 0, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 0, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 0, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 0, 0,
	362, 399, 614, 0, 5556, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 0, 0,
	0, 0, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 0, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 0, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 0, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 0, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 562, 563, 0, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 0, 0, 362, 399, 614, 0, 5553,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 0, 0, 0, 0, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 0, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 0, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 0, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 0, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 0, 0,
	362, 399, 614, 0, 770, 459, 0, 512, 516, 157,
	605, 0, 0, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 301, 689,
	604, 675, 0, 0, 0, 466, 154, 0, 0, 0,
	155, 0, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 503, 437, 1119,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 0, 0,
	0, 0, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 0, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 0, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 0, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 0, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 562, 563, 0, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 919, 0, 0, 774, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 794, 151, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 1677, 799, 0, 805, 0, 811, 1676, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 1678, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	796, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 794, 0,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 799, 0, 805,
	0, 811, 0, 581, 0, 801, 802, 807, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 3632, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 793, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 916, 796, 0, 0, 917, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 918, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 919, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 794, 0, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 2593, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 916,
	796, 0, 0, 917, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 918, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 313, 0, 0,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 834,
	2609, 0, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 0, 0,
	0, 0, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 0, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 0, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 0, 2613, 0, 0, 0, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 0, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 2610, 563, 0, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 919, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	296, 0, 313, 794, 1399, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 916,
	796, 0, 0, 917, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 986, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 918, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 296, 0, 313, 794, 0,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 799, 0, 805,
	0, 811, 0, 581, 0, 801, 802, 807, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 793, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 916, 796, 0, 0, 917, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 918, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 919, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 313, 794, 0, 362, 399, 614, 0, 0,
	459, 0, 512, 516, 0, 605, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 689, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 654, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 666, 632, 524, 482, 480, 0, 447,
	504, 661, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 629, 633, 631, 627, 624, 628,
	625, 626, 630, 386, 623, 0, 598, 607, 641, 621,
	649, 606, 646, 616, 361, 645, 610, 609, 655, 636,
	637, 591, 651, 622, 620, 613, 612, 608, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 611, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 916,
	796, 0, 0, 917, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 615, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	617, 618, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 634, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 635, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 638, 639, 455, 457, 458, 640, 642,
	643, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 644, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 647,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 918, 538, 648, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 650, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 652, 571, 653,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 656, 657, 658,
	659, 660, 662, 663, 664, 665, 602, 603, 619, 470,
	464, 420, 462, 463, 467, 468, 471, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 3913, 313, 0, 0,
	362, 399, 614, 0, 0, 459, 0, 512, 516, 0,
	605, 0, 0, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 301, 689,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 503, 437, 654,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 0, 0,
	0, 0, 0, 339, 340, 461, 321, 469, 666, 632,
	524, 482, 480, 0, 447, 504, 661, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 629,
	633, 631, 627, 624, 628, 625, 626, 630, 386, 623,
	0, 598, 607, 641, 621, 649, 606, 646, 616, 361,
	645, 610, 609, 655, 636, 637, 591, 651, 622, 620,
	613, 612, 608, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 0, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 611, 0, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 0, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 615, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 617, 618, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 634, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 635, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 638, 639,
	455, 457, 458, 640, 642, 643, 0, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 644,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 647, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 0, 538, 648,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 650, 559, 560,
	0, 562, 563, 0, 565, 566, 567, 568, 569, 0,
	688, 570, 652, 571, 653, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 656, 657, 658, 659, 660, 662, 663, 664,
	665, 602, 603, 619, 470, 464, 420, 462, 463, 467,
	468, 471, 0, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 794, 1225, 362, 1055, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 799, 0, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	916, 796, 0, 0, 917, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 918, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 919, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 794,
	0, 362, 1053, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 799, 0,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 916, 796, 0, 0, 917,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 918, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 794, 0, 362, 1050, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 799, 0, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	916, 796, 0, 0, 917, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 1048, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 918, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 919, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 794,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 799, 0,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 916, 796, 0, 0, 917,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	912, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 918, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 919, 0, 0, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 794, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 1668,
	0, 370, 0, 799, 0, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 796, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 2515, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 919, 0,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 794,
	4455, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 799, 0,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 796, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	3793, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 788, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 794, 1348, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 799, 0, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 796, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 919, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 794,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 799, 0,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 796, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 3299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 794, 0, 362, 399, 0, 0,
	0, 459, 0, 512, 516, 0, 0, 0, 0, 0,
	0, 370, 0, 799, 2711, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 1033, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 0, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 0, 0, 524, 482, 480, 0,
	447, 504, 0, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 1035, 0, 598, 1038, 1026,
	1018, 1019, 1020, 1021, 1022, 1023, 0, 1040, 1041, 1042,
	1043, 1044, 591, 1032, 1034, 1017, 1024, 1025, 1027, 2714,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 0, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 796, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 0, 0, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 0, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 0, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 0, 0, 455, 457, 458, 0,
	2712, 0, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 0, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	0, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 2717, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 0, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 0, 571,
	0, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 602, 603, 2713,
	470, 464, 420, 462, 463, 467, 468, 471, 3294, 296,
	0, 313, 0, 0, 362, 2629, 614, 0, 0, 459,
	0, 512, 516, 0, 605, 0, 0, 0, 0, 370,
	0, 0, 0, 0, 0, 3292, 0, 581, 0, 0,
	0, 0, 301, 689, 604, 675, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 503, 437, 654, 530, 308, 354, 341, 383, 425,
	537, 0, 0, 415, 585, 350, 439, 0, 329, 472,
	0, 561, 436, 0, 544, 564, 0, 456, 335, 495,
	551, 552, 0, 0, 2633, 0, 0, 339, 340, 461,
	321, 469, 666, 632, 524, 482, 480, 0, 447, 504,
	661, 0, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 629, 633, 631, 627, 624, 628, 625,
	626, 630, 386, 623, 0, 598, 607, 641, 621, 649,
	606, 646, 616, 361, 645, 610, 609, 655, 636, 637,
	591, 651, 622, 620, 613, 612, 608, 0, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 0,
	298, 299, 300, 302, 303, 304, 0, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 318, 319,
	320, 611, 0, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 0, 0, 0, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 347, 0,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	0, 365, 367, 0, 368, 371, 0, 2639, 373, 374,
	375, 376, 377, 378, 379, 615, 380, 0, 381, 382,
	384, 2638, 387, 388, 389, 390, 391, 0, 392, 617,
	618, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 0, 412,
	413, 414, 416, 0, 417, 418, 421, 422, 423, 424,
	0, 426, 634, 0, 427, 428, 429, 0, 0, 430,
	431, 432, 433, 434, 435, 438, 635, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 638, 639, 455, 457, 458, 640, 642, 643,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 0,
	483, 484, 485, 644, 486, 487, 488, 489, 2637, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 0,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 647, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 0, 538, 648, 539, 540, 541, 542, 543, 0,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 650, 559, 560, 0, 562, 563, 0, 565, 566,
	567, 568, 569, 0, 688, 570, 652, 571, 653, 572,
	573, 574, 575, 576, 577, 578, 580, 0, 2636, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 0, 597, 599, 601, 679, 656, 657, 658, 659,
	660, 662, 663, 664, 665, 602, 603, 619, 470, 464,
	420, 462, 463, 467, 468, 471, 283, 0, 0, 0,
	2635, 2630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 0, 313, 0, 0, 362,
	399, 614, 0, 0, 459, 0, 512, 516, 0, 605,
	0, 0, 0, 0, 370, 0, 0, 0, 3256, 0,
	0, 0, 581, 0, 0, 0, 0, 301, 689, 604,
	675, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 503, 437, 654, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 0, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 0, 0, 2633,
	0, 0, 339, 340, 461, 321, 469, 666, 632, 524,
	482, 480, 0, 447, 504, 661, 0, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 629, 633,
	631, 627, 624, 628, 625, 626, 630, 386, 623, 0,
	598, 607, 641, 621, 649, 606, 646, 616, 361, 645,
	610, 609, 655, 636, 637, 591, 651, 622, 620, 613,
	612, 608, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 0, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 611, 0, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 0, 0, 0, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 2639, 373, 374, 375, 376, 377, 378, 379,
	615, 380, 0, 381, 382, 384, 2638, 387, 388, 389,
	390, 391, 0, 392, 617, 618, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 634, 0, 427,
	428, 429, 0, 0, 430, 431, 432, 433, 434, 435,
	438, 635, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 638, 639, 455,
	457, 458, 640, 642, 643, 0, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 644, 486,
	487, 488, 489, 2637, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 647, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 0, 538, 648, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 650, 559, 560, 0,
	562, 563, 0, 565, 566, 567, 568, 569, 0, 688,
	570, 652, 571, 653, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 2636, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 656, 657, 658, 659, 660, 662, 663, 664, 665,
	602, 603, 619, 470, 464, 420, 462, 463, 467, 468,
	471, 283, 0, 0, 0, 2635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	0, 313, 0, 0, 362, 399, 614, 0, 0, 459,
	0, 512, 516, 0, 605, 0, 0, 0, 0, 370,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 301, 689, 604, 675, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 503, 437, 654, 530, 308, 354, 341, 383, 425,
	537, 0, 0, 415, 585, 350, 439, 0, 329, 472,
	0, 561, 436, 0, 544, 564, 0, 456, 335, 495,
	551, 552, 0, 0, 2633, 0, 0, 339, 340, 461,
	321, 469, 666, 632, 524, 482, 480, 0, 447, 504,
	661, 0, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 629, 633, 631, 627, 624, 628, 625,
	626, 630, 386, 623, 0, 598, 607, 641, 621, 649,
	606, 646, 616, 361, 645, 610, 609, 655, 636, 637,
	591, 651, 622, 620, 613, 612, 608, 0, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 0,
	298, 299, 300, 302, 303, 304, 0, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 318, 319,
	320, 611, 0, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 0, 0, 0, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 347, 0,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	0, 365, 367, 0, 368, 371, 0, 2639, 373, 374,
	375, 376, 377, 378, 379, 615, 380, 0, 381, 382,
	384, 2638, 387, 388, 389, 390, 391, 0, 392, 617,
	618, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 0, 412,
	413, 414, 416, 0, 417, 418, 421, 422, 423, 424,
	0, 426, 634, 0, 427, 428, 429, 0, 0, 430,
	431, 432, 433, 434, 435, 438, 635, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 638, 639, 455, 457, 458, 640, 642, 643,
	0, 473, 474, 475, 476, 477, 478, 479, 481, 0,
	483, 484, 485, 644, 486, 487, 488, 489, 2637, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 0,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 647, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 0, 538, 648, 539, 540, 541, 542, 543, 0,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 650, 559, 560, 0, 562, 563, 0, 565, 566,
	567, 568, 569, 0, 688, 570, 652, 571, 653, 572,
	573, 574, 575, 576, 577, 578, 580, 0, 2636, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 0, 597, 599, 601, 679, 656, 657, 658, 659,
	660, 662, 663, 664, 665, 602, 603, 619, 470, 464,
	420, 462, 463, 467, 468, 471, 1036, 0, 0, 0,
	2635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 0, 313, 794, 0, 362,
	399, 0, 0, 0, 459, 0, 512, 516, 0, 0,
	0, 0, 0, 0, 370, 0, 799, 2711, 805, 0,
	811, 0, 581, 0, 801, 802, 807, 301, 1033, 604,
	675, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 0, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 0, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 0, 0, 524,
	482, 480, 0, 447, 504, 0, 0, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 1035, 0,
	598, 1038, 1026, 1018, 1019, 1020, 1021, 1022, 1023, 0,
	1040, 1041, 1042, 1043, 1044, 591, 1032, 1034, 1017, 1024,
	1025, 1027, 2714, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 0, 793, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 0, 0, 0, 796, 0, 0, 0, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 0, 0, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 0, 0, 427,
	428, 429, 0, 0, 430, 431, 432, 433, 434, 435,
	438, 0, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 0, 0, 455,
	457, 458, 0, 2712, 0, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 0, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 0, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 0, 538, 2717, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 0, 559, 560, 0,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 0, 571, 0, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 0, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 0, 0, 0, 0, 1036, 0, 0, 0, 0,
	602, 603, 2713, 470, 464, 420, 462, 463, 467, 468,
	471, 0, 0, 296, 0, 313, 794, 0, 362, 399,
	0, 0, 0, 459, 0, 512, 516, 0, 0, 0,
	0, 0, 0, 370, 3279, 799, 2711, 805, 0, 811,
	0, 581, 0, 801, 802, 807, 301, 1033, 604, 675,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 309, 0, 0, 0, 0, 803, 800, 804, 810,
	798, 808, 795, 806, 0, 503, 437, 0, 530, 308,
	354, 341, 383, 425, 537, 0, 0, 415, 585, 350,
	439, 0, 329, 472, 0, 561, 436, 0, 544, 564,
	0, 456, 335, 495, 551, 552, 792, 797, 0, 813,
	0, 339, 340, 461, 321, 469, 0, 0, 524, 482,
	480, 0, 447, 504, 0, 0, 0, 369, 0, 364,
	460, 600, 327, 579, 498, 465, 419, 527, 556, 366,
	351, 352, 395, 497, 385, 337, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 1035, 0, 598,
	1038, 1026, 1018, 1019, 1020, 1021, 1022, 1023, 0, 1040,
	1041, 1042, 1043, 1044, 591, 1032, 1034, 1017, 1024, 1025,
	1027, 2714, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 297, 0, 298, 299, 300, 302, 303, 304,
	791, 305, 306, 307, 310, 311, 312, 314, 674, 315,
	316, 317, 318, 319, 320, 0, 793, 322, 323, 324,
	325, 326, 328, 330, 331, 332, 333, 334, 336, 338,
	0, 0, 0, 796, 0, 0, 0, 342, 343, 344,
	345, 346, 347, 0, 348, 349, 353, 355, 356, 357,
	358, 359, 360, 363, 0, 365, 367, 0, 368, 371,
	0, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 384, 0, 387, 388, 389, 390,
	391, 0, 392, 0, 0, 393, 394, 396, 397, 398,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 0, 412, 413, 414, 416, 0, 417, 418,
	421, 422, 423, 424, 0, 426, 0, 0, 427, 428,
	429, 0, 0, 430, 431, 432, 433, 434, 435, 438,
	0, 440, 441, 442, 443, 444, 445, 446, 676, 448,
	449, 450, 451, 452, 453, 454, 0, 0, 455, 457,
	458, 0, 2712, 0, 809, 473, 474, 475, 476, 477,
	478, 479, 481, 0, 483, 484, 485, 0, 486, 487,
	488, 489, 0, 490, 491, 492, 493, 494, 496, 499,
	500, 501, 502, 0, 505, 506, 507, 508, 509, 510,
	511, 513, 514, 515, 517, 518, 519, 677, 520, 521,
	522, 523, 0, 525, 526, 678, 528, 529, 531, 532,
	533, 534, 535, 536, 687, 0, 538, 2717, 539, 540,
	541, 542, 543, 0, 545, 546, 547, 548, 549, 550,
	553, 554, 555, 557, 558, 0, 559, 560, 0, 562,
	563, 812, 565, 566, 567, 568, 569, 0, 688, 570,
	0, 571, 0, 572, 573, 574, 575, 576, 577, 578,
	580, 0, 0, 582, 583, 584, 586, 587, 588, 589,
	592, 593, 594, 595, 596, 0, 597, 599, 601, 679,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 602,
	603, 2713, 470, 464, 420, 462, 463, 467, 468, 471,
	697, 702, 0, 313, 0, 701, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 2706, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 699, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 3588,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 700, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 702, 0, 313, 0,
	701, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 699, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 705, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 700, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	697, 702, 0, 313, 0, 701, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 699, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 700, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2606, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	834, 2609, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 2613, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 2610, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1719, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 1705, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 1711, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	1712, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 1707, 387, 1708, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	1713, 1714, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 1715, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 1709, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 1710, 523,
	647, 525, 526, 1716, 528, 529, 531, 532, 1706, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 1717, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 1718, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	834, 2609, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 2613, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 2610, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 313, 0, 701, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 699, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 700, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3432, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 3433, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3423, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 3424, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 943, 296, 0, 313, 0,
	0, 362, 942, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	834, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 834, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 4966, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 3913, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 4599, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 4583, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 3925, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 4129,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 3032, 0, 0,
	0, 466, 0, 0, 0, 0, 3035, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 3033, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	3031, 566, 3030, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 3034, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 673, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 1498, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 834, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 296, 0, 313, 0,
	0, 362, 1495, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1169, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	276, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 1068, 305, 306, 307, 310, 311, 312,
	314, 277, 315, 1067, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 279, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	280, 520, 521, 522, 523, 647, 525, 526, 278, 528,
	529, 531, 532, 533, 534, 535, 536, 1065, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 272, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 281, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 296, 0, 313, 0, 0, 362, 945, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 767, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 766, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	763, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	727, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 729, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 728, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	673, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 669, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 671, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 670, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 5828, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 4519, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	3683, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 3562, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 276, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 277, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 279, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 280, 520, 521, 522, 523,
	647, 525, 526, 278, 528, 529, 531, 532, 533, 534,
	535, 536, 1065, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 272, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 281, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 3503, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 3411, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 3409, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 3395, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	276, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 277, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 279, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	280, 520, 521, 522, 523, 647, 525, 526, 278, 528,
	529, 531, 532, 533, 534, 535, 536, 2749, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 2750, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 281, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 2597, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 2538, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 1698, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 1652, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 1418, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 1379, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 1374, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 1368, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 0, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 1003, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 999, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 996, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 991, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 972, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 950, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 948, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 929, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 911, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 907, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 905, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 880, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 688, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	689, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 647, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 692, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 524, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 690, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 0,
	0, 362, 399, 614, 0, 0, 459, 0, 512, 516,
	0, 605, 0, 0, 0, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 301,
	276, 604, 270, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 503, 437,
	654, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 0,
	0, 0, 0, 0, 339, 340, 461, 321, 469, 666,
	632, 524, 482, 480, 0, 447, 504, 661, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	629, 633, 631, 627, 624, 628, 625, 626, 630, 386,
	623, 0, 598, 607, 641, 621, 649, 606, 646, 616,
	361, 645, 610, 609, 655, 636, 637, 591, 651, 622,
	620, 613, 612, 608, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 0, 305, 306, 307, 310, 311, 312,
	314, 277, 315, 316, 317, 318, 319, 320, 611, 0,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 615, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 617, 618, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 634,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 635, 440, 441, 442, 443, 444, 445,
	446, 279, 448, 449, 450, 451, 452, 453, 454, 638,
	639, 455, 457, 458, 640, 642, 643, 0, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	644, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	280, 520, 521, 522, 523, 647, 525, 526, 278, 528,
	529, 531, 532, 533, 534, 535, 536, 271, 0, 538,
	648, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 650, 559,
	560, 0, 562, 563, 0, 565, 566, 567, 568, 569,
	0, 272, 570, 652, 571, 653, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 281, 656, 657, 658, 659, 660, 662, 663,
	664, 665, 602, 603, 619, 470, 464, 420, 462, 463,
	467, 468, 471, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 313, 0, 0, 362, 399, 614, 0,
	0, 459, 0, 512, 516, 0, 605, 0, 0, 0,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 0, 0, 301, 689, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 437, 654, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 0, 0, 0, 0, 0, 339,
	340, 461, 321, 469, 666, 632, 0, 482, 480, 0,
	447, 504, 661, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 629, 633, 631, 627, 624,
	628, 625, 626, 630, 386, 623, 0, 598, 607, 641,
	621, 649, 606, 646, 616, 361, 645, 610, 609, 655,
	636, 637, 591, 651, 622, 620, 613, 612, 608, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 0, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 611, 0, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 615, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 617, 618, 0, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 634, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 635, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 638, 639, 455, 457, 458, 640,
	642, 643, 0, 473, 474, 475, 476, 477, 478, 0,
	481, 0, 483, 484, 485, 644, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 0, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	647, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 648, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 650, 559, 560, 0, 562, 563, 0,
	565, 566, 567, 568, 569, 0, 688, 570, 652, 571,
	653, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 602, 603, 619,
	470, 464, 420, 462, 463, 467, 468, 471, 1036, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 313, 794,
	0, 362, 399, 0, 0, 0, 459, 0, 512, 516,
	0, 0, 0, 0, 0, 0, 370, 0, 799, 2711,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	1033, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	0, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 0,
	0, 524, 482, 480, 0, 447, 504, 0, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	1035, 0, 598, 1038, 1026, 1018, 1019, 1020, 1021, 1022,
	1023, 0, 1040, 1041, 1042, 1043, 1044, 591, 1032, 1034,
	1017, 1024, 1025, 1027, 2714, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 0, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 796, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 0, 0, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 0,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 0, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 0,
	0, 455, 457, 458, 0, 2712, 0, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	0, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 0, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	2717, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 0, 559,
	560, 0, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 0, 571, 0, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 0, 0, 1036, 0, 0, 0, 0,
	0, 0, 602, 603, 2713, 470, 464, 420, 462, 463,
	467, 468, 471, 296, 0, 313, 794, 0, 362, 399,
	0, 0, 0, 459, 0, 512, 516, 0, 0, 0,
	0, 0, 0, 370, 0, 799, 0, 805, 2739, 811,
	0, 581, 0, 801, 802, 807, 301, 1033, 604, 675,
	0, 0, 0, 466, 0, 0, 0, 0, 3961, 0,
	0, 309, 0, 0, 0, 0, 803, 800, 804, 810,
	798, 808, 795, 806, 0, 503, 437, 0, 530, 308,
	354, 341, 383, 425, 537, 0, 0, 415, 585, 350,
	439, 0, 329, 472, 0, 561, 436, 0, 544, 564,
	0, 456, 335, 495, 551, 552, 792, 797, 0, 813,
	0, 339, 340, 461, 321, 469, 0, 0, 524, 482,
	480, 0, 447, 504, 0, 0, 0, 369, 0, 364,
	460, 600, 327, 579, 498, 465, 419, 527, 556, 366,
	351, 352, 395, 497, 385, 337, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 1035, 0, 598,
	1038, 1026, 1018, 1019, 1020, 1021, 1022, 1023, 0, 1040,
	1041, 1042, 1043, 1044, 591, 1032, 1034, 1017, 1024, 1025,
	1027, 0, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 297, 0, 298, 299, 300, 302, 303, 304,
	791, 305, 306, 307, 310, 311, 312, 314, 674, 315,
	316, 317, 318, 319, 320, 0, 793, 322, 323, 324,
	325, 326, 328, 330, 331, 332, 333, 334, 336, 338,
	0, 0, 0, 796, 0, 0, 0, 342, 343, 344,
	345, 346, 347, 0, 348, 349, 353, 355, 356, 357,
	358, 359, 360, 363, 0, 365, 367, 0, 368, 371,
	0, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 384, 0, 387, 388, 389, 390,
	391, 0, 392, 0, 0, 393, 394, 396, 397, 398,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 0, 412, 413, 414, 416, 0, 417, 418,
	421, 422, 423, 424, 0, 426, 0, 0, 427, 428,
	429, 0, 0, 430, 431, 432, 433, 434, 435, 438,
	0, 440, 441, 442, 443, 444, 445, 446, 676, 448,
	449, 450, 451, 452, 453, 454, 0, 0, 455, 457,
	458, 0, 0, 0, 809, 473, 474, 475, 476, 477,
	478, 479, 481, 0, 483, 484, 485, 0, 486, 487,
	488, 489, 0, 490, 491, 492, 493, 494, 496, 499,
	500, 501, 502, 0, 505, 506, 507, 508, 509, 510,
	511, 513, 514, 515, 517, 518, 519, 677, 520, 521,
	522, 523, 0, 525, 526, 678, 528, 529, 531, 532,
	533, 534, 535, 536, 687, 0, 538, 2717, 539, 540,
	541, 542, 543, 0, 545, 546, 547, 548, 549, 550,
	553, 554, 555, 557, 558, 0, 559, 560, 0, 562,
	563, 812, 565, 566, 567, 568, 569, 0, 688, 570,
	0, 571, 0, 572, 573, 574, 575, 576, 577, 578,
	580, 0, 0, 582, 583, 584, 586, 587, 588, 589,
	592, 593, 594, 595, 596, 0, 597, 599, 601, 679,
	0, 0, 1036, 0, 0, 0, 0, 0, 0, 602,
	603, 0, 470, 464, 420, 462, 463, 467, 468, 471,
	296, 0, 313, 794, 0, 362, 399, 0, 0, 0,
	459, 0, 512, 516, 0, 0, 0, 0, 0, 0,
	370, 0, 799, 0, 805, 0, 811, 0, 581, 0,
	801, 802, 807, 301, 1033, 604, 675, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 309, 0,
	0, 0, 0, 803, 800, 804, 810, 798, 808, 795,
	806, 0, 503, 437, 0, 530, 308, 354, 341, 383,
	425, 537, 0, 0, 415, 585, 350, 439, 0, 329,
	472, 0, 561, 436, 0, 544, 564, 0, 456, 335,
	495, 551, 552, 792, 797, 0, 813, 0, 339, 340,
	461, 321, 469, 0, 0, 524, 482, 480, 5862, 447,
	504, 0, 0, 0, 369, 0, 364, 460, 600, 327,
	579, 498, 465, 419, 527, 556, 366, 351, 352, 395,
	497, 385, 337, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 1035, 0, 598, 1038, 1026, 1018,
	1019, 1020, 1021, 1022, 1023, 0, 1040, 1041, 1042, 1043,
	1044, 591, 1032, 1034, 1017, 1024, 1025, 1027, 0, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 295, 297,
	0, 298, 299, 300, 302, 303, 304, 791, 305, 306,
	307, 310, 311, 312, 314, 674, 315, 316, 317, 318,
	319, 320, 0, 793, 322, 323, 324, 325, 326, 328,
	330, 331, 332, 333, 334, 336, 338, 0, 0, 0,
	796, 0, 0, 0, 342, 343, 344, 345, 346, 347,
	0, 348, 349, 353, 355, 356, 357, 358, 359, 360,
	363, 0, 365, 367, 0, 368, 371, 0, 372, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 384, 0, 387, 388, 389, 390, 391, 0, 392,
	0, 0, 393, 394, 396, 397, 398, 400, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 0,
	412, 413, 414, 416, 0, 417, 418, 421, 422, 423,
	424, 0, 426, 0, 0, 427, 428, 429, 0, 0,
	430, 431, 432, 433, 434, 435, 438, 0, 440, 441,
	442, 443, 444, 445, 446, 676, 448, 449, 450, 451,
	452, 453, 454, 0, 0, 455, 457, 458, 0, 0,
	0, 809, 473, 474, 475, 476, 477, 478, 479, 481,
	0, 483, 484, 485, 0, 486, 487, 488, 489, 0,
	490, 491, 492, 493, 494, 496, 499, 500, 501, 502,
	0, 505, 506, 507, 508, 509, 510, 511, 513, 514,
	515, 517, 518, 519, 677, 520, 521, 522, 523, 0,
	525, 526, 678, 528, 529, 531, 532, 533, 534, 535,
	536, 687, 0, 538, 1008, 539, 540, 541, 542, 543,
	0, 545, 546, 547, 548, 549, 550, 553, 554, 555,
	557, 558, 0, 559, 560, 0, 562, 563, 812, 565,
	566, 567, 568, 569, 0, 688, 570, 0, 571, 0,
	572, 573, 574, 575, 576, 577, 578, 580, 0, 0,
	582, 583, 584, 586, 587, 588, 589, 592, 593, 594,
	595, 596, 0, 597, 599, 601, 679, 0, 0, 1036,
	0, 0, 0, 0, 0, 0, 602, 603, 0, 470,
	464, 420, 462, 463, 467, 468, 471, 296, 0, 313,
	794, 0, 362, 399, 0, 0, 0, 459, 0, 512,
	516, 0, 0, 0, 0, 0, 0, 370, 0, 799,
	0, 805, 0, 811, 0, 581, 0, 801, 802, 807,
	301, 1033, 604, 675, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 0, 0, 0,
	803, 800, 804, 810, 798, 808, 795, 806, 0, 503,
	437, 0, 530, 308, 354, 341, 383, 425, 537, 0,
	0, 415, 585, 350, 439, 0, 329, 472, 0, 561,
	436, 0, 544, 564, 0, 456, 335, 495, 551, 552,
	792, 797, 0, 813, 0, 339, 340, 461, 321, 469,
	0, 0, 524, 482, 480, 5533, 447, 504, 0, 0,
	0, 369, 0, 364, 460, 600, 327, 579, 498, 465,
	419, 527, 556, 366, 351, 352, 395, 497, 385, 337,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 1035, 0, 598, 1038, 1026, 1018, 1019, 1020, 1021,
	1022, 1023, 0, 1040, 1041, 1042, 1043, 1044, 591, 1032,
	1034, 1017, 1024, 1025, 1027, 0, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 297, 0, 298, 299,
	300, 302, 303, 304, 791, 305, 306, 307, 310, 311,
	312, 314, 674, 315, 316, 317, 318, 319, 320, 0,
	793, 322, 323, 324, 325, 326, 328, 330, 331, 332,
	333, 334, 336, 338, 0, 0, 0, 796, 0, 0,
	0, 342, 343, 344, 345, 346, 347, 0, 348, 349,
	353, 355, 356, 357, 358, 359, 360, 363, 0, 365,
	367, 0, 368, 371, 0, 372, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 384, 0,
	387, 388, 389, 390, 391, 0, 392, 0, 0, 393,
	394, 396, 397, 398, 400, 401, 402, 403, 404, 405,
	406, 407, 408, 409, 410, 411, 0, 412, 413, 414,
	416, 0, 417, 418, 421, 422, 423, 424, 0, 426,
	0, 0, 427, 428, 429, 0, 0, 430, 431, 432,
	433, 434, 435, 438, 0, 440, 441, 442, 443, 444,
	445, 446, 676, 448, 449, 450, 451, 452, 453, 454,
	0, 0, 455, 457, 458, 0, 0, 0, 809, 473,
	474, 475, 476, 477, 478, 479, 481, 0, 483, 484,
	485, 0, 486, 487, 488, 489, 0, 490, 491, 492,
	493, 494, 496, 499, 500, 501, 502, 0, 505, 506,
	507, 508, 509, 510, 511, 513, 514, 515, 517, 518,
	519, 677, 520, 521, 522, 523, 0, 525, 526, 678,
	528, 529, 531, 532, 533, 534, 535, 536, 687, 0,
	538, 1008, 539, 540, 541, 542, 543, 0, 545, 546,
	547, 548, 549, 550, 553, 554, 555, 557, 558, 0,
	559, 560, 0, 562, 563, 812, 565, 566, 567, 568,
	569, 0, 688, 570, 0, 571, 0, 572, 573, 574,
	575, 576, 577, 578, 580, 0, 0, 582, 583, 584,
	586, 587, 588, 589, 592, 593, 594, 595, 596, 0,
	597, 599, 601, 679, 0, 0, 1036, 0, 0, 0,
	0, 0, 0, 602, 603, 0, 470, 464, 420, 462,
	463, 467, 468, 471, 296, 0, 313, 794, 0, 362,
	399, 0, 0, 0, 459, 0, 512, 516, 0, 0,
	0, 0, 0, 0, 370, 0, 799, 0, 805, 0,
	811, 0, 581, 0, 801, 802, 807, 301, 1033, 604,
	675, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 803, 800, 804,
	810, 798, 808, 795, 806, 0, 503, 437, 0, 530,
	308, 354, 341, 383, 425, 537, 0, 0, 415, 585,
	350, 439, 0, 329, 472, 0, 561, 436, 0, 544,
	564, 0, 456, 335, 495, 551, 552, 792, 797, 0,
	813, 0, 339, 340, 461, 321, 469, 0, 0, 524,
	482, 480, 0, 447, 504, 0, 0, 0, 369, 0,
	364, 460, 600, 327, 579, 498, 465, 419, 527, 556,
	366, 351, 352, 395, 497, 385, 337, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 1035, 0,
	598, 1038, 1026, 1018, 1019, 1020, 1021, 1022, 1023, 0,
	1040, 1041, 1042, 1043, 1044, 591, 1032, 1034, 1017, 1024,
	1025, 1027, 0, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 297, 0, 298, 299, 300, 302, 303,
	304, 791, 305, 306, 307, 310, 311, 312, 314, 674,
	315, 316, 317, 318, 319, 320, 0, 793, 322, 323,
	324, 325, 326, 328, 330, 331, 332, 333, 334, 336,
	338, 0, 0, 0, 796, 0, 0, 0, 342, 343,
	344, 345, 346, 347, 0, 348, 349, 353, 355, 356,
	357, 358, 359, 360, 363, 0, 365, 367, 0, 368,
	371, 0, 372, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 384, 0, 387, 388, 389,
	390, 391, 0, 392, 0, 0, 393, 394, 396, 397,
	398, 400, 401, 402, 403, 404, 405, 406, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 416, 0, 417,
	418, 421, 422, 423, 424, 0, 426, 0, 0, 427,
	428, 429, 0, 0, 430, 431, 432, 433, 434, 435,
	438, 0, 440, 441, 442, 443, 444, 445, 446, 676,
	448, 449, 450, 451, 452, 453, 454, 4744, 0, 455,
	457, 458, 0, 0, 0, 809, 473, 474, 475, 476,
	477, 478, 479, 481, 0, 483, 484, 485, 0, 486,
	487, 488, 489, 0, 490, 491, 492, 493, 494, 496,
	499, 500, 501, 502, 0, 505, 506, 507, 508, 509,
	510, 511, 513, 514, 515, 517, 518, 519, 677, 520,
	521, 522, 523, 0, 525, 526, 678, 528, 529, 531,
	532, 533, 534, 535, 536, 687, 0, 538, 1008, 539,
	540, 541, 542, 543, 0, 545, 546, 547, 548, 549,
	550, 553, 554, 555, 557, 558, 0, 559, 560, 0,
	562, 563, 812, 565, 566, 567, 568, 569, 0, 688,
	570, 0, 571, 0, 572, 573, 574, 575, 576, 577,
	578, 580, 0, 0, 582, 583, 584, 586, 587, 588,
	589, 592, 593, 594, 595, 596, 0, 597, 599, 601,
	679, 0, 0, 1036, 0, 0, 0, 0, 0, 0,
	602, 603, 0, 470, 464, 420, 462, 463, 467, 468,
	471, 296, 0, 313, 794, 0, 362, 399, 0, 0,
	0, 459, 0, 512, 516, 0, 0, 0, 0, 0,
	0, 370, 0, 799, 0, 805, 0, 811, 0, 581,
	0, 801, 802, 807, 301, 1033, 604, 675, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 309,
	0, 0, 0, 0, 803, 800, 804, 810, 798, 808,
	795, 806, 0, 503, 437, 0, 530, 308, 354, 341,
	383, 425, 537, 0, 0, 415, 585, 350, 439, 0,
	329, 472, 0, 561, 436, 0, 544, 564, 0, 456,
	335, 495, 551, 552, 792, 797, 0, 813, 0, 339,
	340, 461, 321, 469, 0, 0, 524, 482, 480, 0,
	447, 504, 0, 0, 0, 369, 0, 364, 460, 600,
	327, 579, 498, 465, 419, 527, 556, 366, 351, 352,
	395, 497, 385, 337, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 1035, 0, 598, 1038, 1026,
	1018, 1019, 1020, 1021, 1022, 1023, 0, 1040, 1041, 1042,
	1043, 1044, 591, 1032, 1034, 1017, 1024, 1025, 1027, 0,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 295,
	297, 0, 298, 299, 300, 302, 303, 304, 791, 305,
	306, 307, 310, 311, 312, 314, 674, 315, 316, 317,
	318, 319, 320, 0, 793, 322, 323, 324, 325, 326,
	328, 330, 331, 332, 333, 334, 336, 338, 0, 0,
	0, 796, 0, 0, 0, 342, 343, 344, 345, 346,
	347, 0, 348, 349, 353, 355, 356, 357, 358, 359,
	360, 363, 0, 365, 367, 0, 368, 371, 0, 372,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 384, 0, 387, 388, 389, 390, 391, 0,
	392, 0, 0, 393, 394, 396, 397, 398, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
	0, 412, 413, 414, 416, 0, 417, 418, 421, 422,
	423, 424, 0, 426, 0, 0, 427, 428, 429, 0,
	0, 430, 431, 432, 433, 434, 435, 438, 0, 440,
	441, 442, 443, 444, 445, 446, 676, 448, 449, 450,
	451, 452, 453, 454, 3681, 0, 455, 457, 458, 0,
	0, 0, 809, 473, 474, 475, 476, 477, 478, 479,
	481, 0, 483, 484, 485, 0, 486, 487, 488, 489,
	0, 490, 491, 492, 493, 494, 496, 499, 500, 501,
	502, 0, 505, 506, 507, 508, 509, 510, 511, 513,
	514, 515, 517, 518, 519, 677, 520, 521, 522, 523,
	0, 525, 526, 678, 528, 529, 531, 532, 533, 534,
	535, 536, 687, 0, 538, 1008, 539, 540, 541, 542,
	543, 0, 545, 546, 547, 548, 549, 550, 553, 554,
	555, 557, 558, 0, 559, 560, 0, 562, 563, 812,
	565, 566, 567, 568, 569, 0, 688, 570, 0, 571,
	0, 572, 573, 574, 575, 576, 577, 578, 580, 0,
	0, 582, 583, 584, 586, 587, 588, 589, 592, 593,
	594, 595, 596, 0, 597, 599, 601, 679, 0, 0,
	1036, 0, 0, 0, 0, 0, 0, 602, 603, 0,
	470, 464, 420, 462, 463, 467, 468, 471, 296, 0,
	313, 794, 0, 362, 399, 0, 0, 0, 459, 0,
	512, 516, 0, 0, 0, 0, 0, 0, 370, 0,
	799, 0, 805, 0, 811, 0, 581, 0, 801, 802,
	807, 301, 1033, 604, 675, 0, 0, 0, 466, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	0, 803, 800, 804, 810, 798, 808, 795, 806, 0,
	503, 437, 0, 530, 308, 354, 341, 383, 425, 537,
	0, 0, 415, 585, 350, 439, 0, 329, 472, 0,
	561, 436, 0, 544, 564, 0, 456, 335, 495, 551,
	552, 792, 797, 0, 813, 0, 339, 340, 461, 321,
	469, 0, 0, 524, 482, 480, 0, 447, 504, 0,
	0, 0, 369, 0, 364, 460, 600, 327, 579, 498,
	465, 419, 527, 556, 366, 351, 352, 395, 497, 385,
	337, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 1035, 0, 598, 1038, 1026, 1018, 1019, 1020,
	1021, 1022, 1023, 0, 1040, 1041, 1042, 1043, 1044, 591,
	1032, 1034, 1017, 1024, 1025, 1027, 0, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 297, 0, 298,
	299, 300, 302, 303, 304, 791, 305, 306, 307, 310,
	311, 312, 314, 674, 315, 316, 317, 318, 319, 320,
	0, 793, 322, 323, 324, 325, 326, 328, 330, 331,
	332, 333, 334, 336, 338, 0, 0, 0, 796, 0,
	0, 0, 342, 343, 344, 345, 346, 347, 0, 348,
	349, 353, 355, 356, 357, 358, 359, 360, 363, 0,
	365, 367, 0, 368, 371, 0, 372, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 384,
	0, 387, 388, 389, 390, 391, 0, 392, 0, 0,
	393, 394, 396, 397, 398, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 0, 412, 413,
	414, 416, 0, 417, 418, 421, 422, 423, 424, 0,
	426, 0, 0, 427, 428, 429, 0, 0, 430, 431,
	432, 433, 434, 435, 438, 0, 440, 441, 442, 443,
	444, 445, 446, 676, 448, 449, 450, 451, 452, 453,
	454, 0, 0, 455, 457, 458, 0, 0, 0, 809,
	473, 474, 475, 476, 477, 478, 479, 481, 0, 483,
	484, 485, 0, 486, 487, 488, 489, 0, 490, 491,
	492, 493, 494, 496, 499, 500, 501, 502, 0, 505,
	506, 507, 508, 509, 510, 511, 513, 514, 515, 517,
	518, 519, 677, 520, 521, 522, 523, 0, 525, 526,
	678, 528, 529, 531, 532, 533, 534, 535, 536, 687,
	0, 538, 1008, 539, 540, 541, 542, 543, 0, 545,
	546, 547, 548, 549, 550, 553, 554, 555, 557, 558,
	0, 559, 560, 0, 562, 563, 812, 565, 566, 567,
	568, 569, 0, 688, 570, 0, 571, 0, 572, 573,
	574, 575, 576, 577, 578, 580, 0, 0, 582, 583,
	584, 586, 587, 588, 589, 592, 593, 594, 595, 596,
	0, 597, 599, 601, 679, 0, 0, 1036, 0, 0,
	0, 0, 0, 0, 602, 603, 0, 470, 464, 420,
	462, 463, 467, 468, 471, 296, 0, 313, 794, 0,
	362, 399, 0, 0, 0, 459, 0, 512, 516, 0,
	0, 0, 0, 0, 0, 370, 0, 799, 0, 805,
	0, 811, 0, 581, 0, 801, 802, 807, 301, 1033,
	604, 675, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 803, 800,
	804, 810, 798, 808, 795, 806, 0, 503, 437, 0,
	530, 308, 354, 341, 383, 425, 537, 0, 0, 415,
	585, 350, 439, 0, 329, 472, 0, 561, 436, 0,
	544, 564, 0, 456, 335, 495, 551, 552, 792, 797,
	0, 813, 0, 339, 340, 461, 321, 469, 0, 0,
	524, 482, 480, 0, 447, 504, 0, 0, 0, 369,
	0, 364, 460, 600, 327, 579, 498, 465, 419, 527,
	556, 366, 351, 352, 395, 497, 385, 337, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 1035,
	0, 598, 1038, 1026, 1018, 1019, 1020, 1021, 1022, 1023,
	0, 1040, 1041, 1042, 1043, 1044, 591, 1032, 1034, 1017,
	1024, 1025, 1027, 0, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 297, 0, 298, 299, 300, 302,
	303, 304, 791, 305, 306, 307, 310, 311, 312, 314,
	674, 315, 316, 317, 318, 319, 320, 0, 793, 322,
	323, 324, 325, 326, 328, 330, 331, 332, 333, 334,
	336, 338, 0, 0, 0, 796, 0, 0, 0, 342,
	343, 344, 345, 346, 347, 0, 348, 349, 353, 355,
	356, 357, 358, 359, 360, 363, 0, 365, 367, 0,
	368, 371, 0, 372, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 384, 0, 387, 388,
	389, 390, 391, 0, 392, 0, 0, 393, 394, 396,
	397, 398, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 416, 0,
	417, 418, 421, 422, 423, 424, 0, 426, 0, 0,
	427, 428, 429, 0, 0, 430, 431, 432, 433, 434,
	435, 438, 0, 440, 441, 442, 443, 444, 445, 446,
	676, 448, 449, 450, 451, 452, 453, 454, 0, 0,
	455, 457, 458, 0, 0, 0, 809, 473, 474, 475,
	476, 477, 478, 479, 481, 0, 483, 484, 485, 0,
	486, 487, 488, 489, 0, 490, 491, 492, 493, 494,
	496, 499, 500, 501, 502, 0, 505, 506, 507, 508,
	509, 510, 511, 513, 514, 515, 517, 518, 519, 677,
	520, 521, 522, 523, 0, 525, 526, 678, 528, 529,
	531, 532, 533, 534, 535, 536, 687, 0, 538, 2717,
	539, 540, 541, 542, 543, 0, 545, 546, 547, 548,
	549, 550, 553, 554, 555, 557, 558, 0, 559, 560,
	0, 562, 563, 812, 565, 566, 567, 568, 569, 0,
	688, 570, 0, 571, 0, 572, 573, 574, 575, 576,
	577, 578, 580, 0, 0, 582, 583, 584, 586, 587,
	588, 589, 592, 593, 594, 595, 596, 0, 597, 599,
	601, 679, 0, 0, 1036, 0, 0, 0, 0, 0,
	0, 602, 603, 0, 470, 464, 420, 462, 463, 467,
	468, 471, 296, 0, 313, 794, 0, 362, 1046, 0,
	0, 0, 459, 0, 512, 516, 0, 0, 0, 0,
	0, 0, 370, 0, 799, 0, 805, 0, 811, 0,
	581, 0, 801, 802, 807, 301, 1033, 604, 675, 0,
	0, 0, 466, 0, 0, 0, 0, 0, 0, 0,
	309, 0, 0, 0, 0, 803, 800, 804, 810, 798,
	808, 795, 806, 0, 503, 437, 0, 530, 308, 354,
	341, 383, 425, 537, 0, 0, 415, 585, 350, 439,
	0, 329, 472, 0, 561, 436, 0, 544, 564, 0,
	456, 335, 495, 551, 552, 792, 797, 0, 813, 0,
	339, 340, 461, 321, 469, 0, 0, 524, 482, 480,
	0, 447, 504, 0, 0, 0, 369, 0, 364, 460,
	600, 327, 579, 498, 465, 419, 527, 556, 366, 351,
	352, 395, 497, 385, 337, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 386, 1035, 0, 598, 1038,
	1026, 1018, 1019, 1020, 1021, 1022, 1023, 0, 1040, 1041,
	1042, 1043, 1044, 591, 1032, 1034, 1017, 1024, 1025, 1027,
	0, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 297, 0, 298, 299, 300, 302, 303, 304, 791,
	305, 306, 307, 310, 311, 312, 314, 674, 315, 316,
	317, 318, 319, 320, 0, 793, 322, 323, 324, 325,
	326, 328, 330, 331, 332, 333, 334, 336, 338, 0,
	0, 0, 796, 0, 0, 0, 342, 343, 344, 345,
	346, 347, 0, 348, 349, 353, 355, 356, 357, 358,
	359, 360, 363, 0, 365, 367, 0, 368, 371, 0,
	372, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 384, 0, 387, 388, 389, 390, 391,
	0, 392, 0, 0, 393, 394, 396, 397, 398, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 0, 412, 413, 414, 416, 0, 417, 418, 421,
	422, 423, 424, 0, 426, 0, 0, 427, 428, 429,
	0, 0, 430, 431, 432, 433, 434, 435, 438, 0,
	440, 441, 442, 443, 444, 445, 446, 676, 448, 449,
	450, 451, 452, 453, 454, 0, 0, 455, 457, 458,
	0, 0, 0, 809, 473, 474, 475, 476, 477, 478,
	479, 481, 0, 483, 484, 485, 0, 486, 487, 488,
	489, 0, 490, 491, 492, 493, 494, 496, 499, 500,
	501, 502, 0, 505, 506, 507, 508, 509, 510, 511,
	513, 514, 515, 517, 518, 519, 677, 520, 521, 522,
	523, 0, 525, 526, 678, 528, 529, 531, 532, 533,
	534, 535, 536, 687, 0, 538, 1008, 539, 540, 541,
	542, 543, 0, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 557, 558, 0, 559, 560, 0, 562, 563,
	812, 565, 566, 567, 568, 569, 0, 688, 570, 0,
	571, 0, 572, 573, 574, 575, 576, 577, 578, 580,
	0, 0, 582, 583, 584, 586, 587, 588, 589, 592,
	593, 594, 595, 596, 0, 597, 599, 601, 679, 0,
	0, 1036, 0, 0, 0, 0, 0, 0, 602, 603,
	0, 470, 464, 420, 462, 463, 467, 468, 471, 296,
	0, 313, 794, 0, 362, 1005, 0, 0, 0, 459,
	0, 512, 516, 0, 0, 0, 0, 0, 0, 370,
	0, 799, 0, 805, 0, 811, 0, 581, 0, 801,
	802, 807, 301, 1033, 604, 675, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 803, 800, 804, 810, 798, 808, 795, 806,
	0, 503, 437, 0, 530, 308, 354, 341, 383, 425,
	537, 0, 0, 415, 585, 350, 439, 0, 329, 472,
	0, 561, 436, 0, 544, 564, 0, 456, 335, 495,
	551, 552, 792, 797, 0, 813, 0, 339, 340, 461,
	321, 469, 0, 0, 524, 482, 480, 0, 447, 504,
	0, 0, 0, 369, 0, 364, 460, 600, 327, 579,
	498, 465, 419, 527, 556, 366, 351, 352, 395, 497,
	385, 337, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 386, 1035, 0, 598, 1038, 1026, 1018, 1019,
	1020, 1021, 1022, 1023, 0, 1040, 1041, 1042, 1043, 1044,
	591, 1032, 1034, 1017, 1024, 1025, 1027, 0, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 297, 0,
	298, 299, 300, 302, 303, 304, 791, 305, 306, 307,
	310, 311, 312, 314, 674, 315, 316, 317, 318, 319,
	320, 0, 793, 322, 323, 324, 325, 326, 328, 330,
	331, 332, 333, 334, 336, 338, 0, 0, 0, 796,
	0, 0, 0, 342, 343, 344, 345, 346, 347, 0,
	348, 349, 353, 355, 356, 357, 358, 359, 360, 363,
	0, 365, 367, 0, 368, 371, 0, 372, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	384, 0, 387, 388, 389, 390, 391, 0, 392, 0,
	0, 393, 394, 396, 397, 398, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 410, 411, 0, 412,
	413, 414, 416, 0, 417, 418, 421, 422, 423, 424,
	0, 426, 0, 0, 427, 428, 429, 0, 0, 430,
	431, 432, 433, 434, 435, 438, 0, 440, 441, 442,
	443, 444, 445, 446, 676, 448, 449, 450, 451, 452,
	453, 454, 0, 0, 455, 457, 458, 0, 0, 0,
	809, 473, 474, 475, 476, 477, 478, 479, 481, 0,
	483, 484, 485, 0, 486, 487, 488, 489, 0, 490,
	491, 492, 493, 494, 496, 499, 500, 501, 502, 0,
	505, 506, 507, 508, 509, 510, 511, 513, 514, 515,
	517, 518, 519, 677, 520, 521, 522, 523, 0, 525,
	526, 678, 528, 529, 531, 532, 533, 534, 535, 536,
	687, 0, 538, 1008, 539, 540, 541, 542, 543, 0,
	545, 546, 547, 548, 549, 550, 553, 554, 555, 557,
	558, 0, 559, 560, 0, 562, 563, 812, 565, 566,
	567, 568, 569, 0, 688, 570, 0, 571, 0, 572,
	573, 574, 575, 576, 577, 578, 580, 0, 0, 582,
	583, 584, 586, 587, 588, 589, 592, 593, 594, 595,
	596, 0, 597, 599, 601, 679, 0, 0, 1036, 0,
	0, 0, 0, 0, 0, 602, 603, 0, 470, 464,
	420, 462, 463, 467, 468, 471, 296, 0, 313, 794,
	0, 362, 399, 0, 0, 0, 459, 0, 512, 516,
	0, 0, 0, 0, 0, 0, 370, 0, 799, 0,
	805, 0, 811, 0, 581, 0, 801, 802, 807, 301,
	1033, 604, 675, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 309, 0, 0, 0, 0, 803,
	800, 804, 810, 798, 808, 795, 806, 0, 503, 437,
	0, 530, 308, 354, 341, 383, 425, 537, 0, 0,
	415, 585, 350, 439, 0, 329, 472, 0, 561, 436,
	0, 544, 564, 0, 456, 335, 495, 551, 552, 792,
	797, 0, 813, 0, 339, 340, 461, 321, 469, 0,
	0, 524, 482, 480, 0, 447, 504, 0, 0, 0,
	369, 0, 364, 460, 600, 327, 579, 498, 465, 419,
	527, 556, 366, 351, 352, 395, 497, 385, 337, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	1035, 0, 598, 1038, 1026, 1018, 1019, 1020, 1021, 1022,
	1023, 0, 1040, 1041, 1042, 1043, 1044, 591, 1032, 1034,
	1017, 1024, 1025, 1027, 0, 286, 287, 288, 289, 290,
	291, 292, 293, 294, 295, 297, 0, 298, 299, 300,
	302, 303, 304, 791, 305, 306, 307, 310, 311, 312,
	314, 674, 315, 316, 317, 318, 319, 320, 0, 793,
	322, 323, 324, 325, 326, 328, 330, 331, 332, 333,
	334, 336, 338, 0, 0, 0, 796, 0, 0, 0,
	342, 343, 344, 345, 346, 347, 0, 348, 349, 353,
	355, 356, 357, 358, 359, 360, 363, 0, 365, 367,
	0, 368, 371, 0, 372, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 384, 0, 387,
	388, 389, 390, 391, 0, 392, 0, 0, 393, 394,
	396, 397, 398, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 416,
	0, 417, 418, 421, 422, 423, 424, 0, 426, 0,
	0, 427, 428, 429, 0, 0, 430, 431, 432, 433,
	434, 435, 438, 0, 440, 441, 442, 443, 444, 445,
	446, 676, 448, 449, 450, 451, 452, 453, 454, 0,
	0, 455, 457, 458, 0, 0, 0, 809, 473, 474,
	475, 476, 477, 478, 479, 481, 0, 483, 484, 485,
	0, 486, 487, 488, 489, 0, 490, 491, 492, 493,
	494, 496, 499, 500, 501, 502, 0, 505, 506, 507,
	508, 509, 510, 511, 513, 514, 515, 517, 518, 519,
	677, 520, 521, 522, 523, 0, 525, 526, 678, 528,
	529, 531, 532, 533, 534, 535, 536, 687, 0, 538,
	0, 539, 540, 541, 542, 543, 0, 545, 546, 547,
	548, 549, 550, 553, 554, 555, 557, 558, 0, 559,
	560, 0, 562, 563, 812, 565, 566, 567, 568, 569,
	0, 688, 570, 0, 571, 0, 572, 573, 574, 575,
	576, 577, 578, 580, 0, 0, 582, 583, 584, 586,
	587, 588, 589, 592, 593, 594, 595, 596, 0, 597,
	599, 601, 679, 0, 0, 1036, 0, 0, 0, 0,
	0, 0, 602, 603, 0, 470, 464, 420, 462, 463,
	467, 468, 471, 296, 0, 313, 794, 0, 362, 399,
	0, 0, 0, 459, 0, 512, 516, 0, 0, 0,
	0, 0, 0, 370, 0, 799, 0, 805, 0, 811,
	0, 581, 0, 801, 802, 807, 301, 0, 604, 675,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 309, 0, 0, 0, 0, 803, 800, 804, 810,
	798, 808, 795, 806, 0, 503, 437, 0, 530, 308,
	354, 341, 383, 425, 537, 0, 0, 415, 585, 350,
	439, 0, 329, 472, 0, 561, 436, 0, 544, 564,
	0, 456, 335, 495, 551, 552, 792, 797, 0, 813,
	0, 339, 340, 461, 321, 469, 0, 0, 524, 482,
	480, 0, 447, 504, 0, 0, 0, 369, 0, 364,
	460, 600, 327, 579, 498, 465, 419, 527, 556, 366,
	351, 352, 395, 497, 385, 337, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 0, 0, 598,
	0, 0, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 297, 0, 298, 299, 300, 302, 303, 304,
	791, 305, 306, 307, 310, 311, 312, 314, 674, 315,
	316, 317, 318, 319, 320, 0, 793, 322, 323, 324,
	325, 326, 328, 330, 331, 332, 333, 334, 336, 338,
	0, 0, 0, 796, 0, 0, 0, 342, 343, 344,
	345, 346, 347, 0, 348, 349, 353, 355, 356, 357,
	358, 359, 360, 363, 0, 365, 367, 0, 368, 371,
	0, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 384, 0, 387, 388, 389, 390,
	391, 0, 392, 0, 0, 393, 394, 396, 397, 398,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 0, 412, 413, 414, 416, 0, 417, 418,
	421, 422, 423, 424, 0, 426, 0, 0, 427, 428,
	429, 0, 0, 430, 431, 432, 433, 434, 435, 438,
	0, 440, 441, 442, 443, 444, 445, 446, 676, 448,
	449, 450, 451, 452, 453, 454, 0, 0, 455, 457,
	458, 0, 0, 0, 809, 473, 474, 475, 476, 477,
	478, 479, 481, 0, 483, 484, 485, 0, 486, 487,
	488, 489, 0, 490, 491, 492, 493, 494, 496, 499,
	500, 501, 502, 0, 505, 506, 507, 508, 509, 510,
	511, 513, 514, 515, 517, 518, 519, 677, 520, 521,
	522, 523, 0, 525, 526, 678, 528, 529, 531, 532,
	533, 534, 535, 536, 687, 0, 538, 0, 539, 540,
	541, 542, 543, 0, 545, 546, 547, 548, 549, 550,
	553, 554, 555, 557, 558, 0, 559, 560, 0, 562,
	563, 812, 565, 566, 567, 568, 569, 0, 688, 570,
	0, 571, 0, 572, 573, 574, 575, 576, 577, 578,
	580, 0, 0, 582, 583, 584, 586, 587, 588, 589,
	592, 593, 594, 595, 596, 0, 597, 599, 601, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	603, 0, 470, 464, 420, 462, 463, 467, 468, 471,
}

var yyPact = [...]int32{
	8757, -1000, 389, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1610, 1610, -1000, -1000, 3533, 1417, 11288,
	17526, 17827, 3589, 99714, 82039, 1610, 1721, 1693, 1686, 83049,
	99209, 98704, 68909, 68404, 1456, 1423, 1383, 81534, 1380, 1336,
	-1000, 2288, 83049, 51274, 51274, 81029, 83049, 80524, 83049, 53808,
	83049, 4497, 3814, 3814, 3765, 2481, 2770, 63909, -1000, 1700,
	1088, 1238, -1000, -1000, 4248, 72949, 371, 98199, 83049, 1317,
	8757, 4333, -1000, -1000, 2505, 3771, 72949, 3881, 3769, 1238,
	83049, -1000, 2008, 2590, 2016, 4301, 97694, 83049, 49746, 83049,
	3558, 97189, 96684, 3033, 96179, 60374, 3586, 1713, 83049, 83049,
	2362, 95674, 83049, 83049, 1331, 2845, 57848, 57848, -1000, -1000,
	1782, 1752, -1000, -1000, -1000, 72444, 80019, 95169, 94664, 1608,
	3031, 2323, 63909, 83049, 83049, 83049, 83049, 63909, 57848, 2476,
	2781, 94159, 63909, 83049, 63909, 83049, 83049, 83049, 83049, 83049,
	1709, 57343, 56838, 83049, 93654, 3549, 83049, 83049, 2169, -1000,
	93149, 92644, 92139, 105107, 104620, 4405, 59869, 59364, 58859, -1000,
	-1000, -1000, 1604, 3029, -1000, -1000, -1000, 3546, 2336, 1707,
	-1000, 2474, -1000, -1000, -1000, -1000, -1000, -1000, 1603, -1000,
	85069, 79514, 2544, -1000, -1000, 1144, 4007, 4497, 4497, 4263,
	62394, 1524, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4005,
	2494, 2912, 522, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4333, 2505, 4333, 4497, 3919, 4497, -1000, -1000, -1000, -1000,
	83049, -1000, 4497, 1328, -1000, 3764, 571, 1126, -1000, 1005,
	1005, 1005, 3426, 1005, 3762, 1522, 560, 997, -1000, 3370,
	1081, 46620, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1633,
	3376, 50769, -1000, 83049, 50769, -1000, 522, 4004, 2490, 2904,
	-1000, 50769, 83049, 2400, 50769, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 83049, 3870, 3870, 3870, 3870, 991,
	991, 3870, 3870, 1258, 1135, -1000, -1000, -1000, 4480, 4480,
	-1000, -1000, -1000, -1000, 1050, -1000, 79009, -1000, -1000, -1000,
	-1000, 370, -1000, -1000, -1000, 72949, -1000, 72949, 16915, 3264,
	2770, -1000, -1000, 62394, -1000, 1327, -1000, 605, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2926, 4243, 4243, 4243, 3806,
	1700, -1000, -1000, 965, 956, 1088, 28694, 28694, -1000, 3761,
	-1000, 394, -1000, 605, 63404, 1325, 360, 83049, -1000, 1133,
	360, 33836, -1000, -1000, 2411, -1000, 440, -1000, 2443, 1998,
	-1000, 2819, 83049, 3501, 91634, 72949, 72949, 944, -1000, -1000,
	-1000, -1000, -1000, 1005, 91129, 83049, 1602, 90624, 4404, 63909,
	63909, 83049, 1702, 63909, 3263, 2164, -1000, 2126, 2902, -1000,
	4328, 4413, 500, 1170, 83049, 83049, -1000, 501, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1460, 2076, 1410, 4327, 1872, 4326, 3116, 90119,
	1671, 4325, 3345, 1872, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1600, 83049, 2223, 3760, 83049, 1133, 4324,
	-1000, 3302, 2851, 103646, 83049, 1872, 1872, -1000, -1000, -1000,
	-1000, 7154, 4393, 4217, 8354, 4392, 4216, 16552, 4391, 13984,
	4390, 78504, 77999, 3114, 83049, 77494, 2115, 1324, 2113, 2111,
	2108, 2073, 10033, 1324, -1000, 605, 2102, 3111, 83049, 83049,
	83049, 3759, 4389, 9983, 2690, 2899, 2098, 1598, 2222, 3757,
	3755, 83049, 2096, 1868, 4215, 2091, 3261, 1868, 4215, 2315,
	2356, 4388, 2041, 2731, 3103, -1000, 4386, 445, -1000, 4385,
	474, -1000, 3754, 4384, 446, 4383, -1000, 3200, 105594, -1000,
	-1000, -1000, -1000, -1000, 1124, -1000, 429, -1000, -1000, -1000,
	-1000, -1000, 1203, 2969, 1202, 1202, 1202, -1000, -1000, -1000,
	-1000, -1000, 670, 716, -1000, -1000, -1000, -1000, 2948, 1320,
	2948, 2948, -1000, 2956, 2948, 446, 4382, 89614, 3335, 159,
	4380, -1000, 159, 4378, 159, 4376, -1000, 3112, -1000, 2005,
	-1000, -1000, -1000, 4404, -1000, 2890, -1000, 4457, 60879, 440,
	4497, 3353, 45592, 45078, 83049, 658, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2835, -1000, 2437, -1000, -1000, -1000,
	-1000, -1000, -1000, 89109, -1000, -1000, -1000, 4468, 103646, 69919,
	57848, 70929, 1318, 83049, -1000, 83049, -1000, -1000, -1000, -1000,
	69919, 3257, 57848, 3252, 1081, -1000, 545, -1000, 46106, 1317,
	-1000, -1000, -1000, -1000, 3370, -1000, 517, -1000, 364, -1000,
	1133, 515, -1000, 2417, -1000, 494, 3641, 3753, 605, 4404,
	4404, 4404, -1000, -1000, -1000, -1000, 484, 2597, -1000, 83049,
	-1000, 83049, 83049, 83049, 3870, 3870, 83049, 83049, 83049, 3870,
	3870, 83049, 3870, 3870, -1000, -1000, -1000, 33836, -1000, -1000,
	-1000, 4497, 562, -1000, 227, 83049, 83049, 83049, 103646, 103646,
	63909, 63909, 49217, 83049, 83049, 63909, 63909, 3250, 3152, 1313,
	-1000, -1000, -1000, -1000, -1000, -1000, 3752, 62394, -1000, -1000,
	26120, 605, -1000, 22477, 33836, 2980, 3245, 3248, 1925, 3808,
	2905, -1000, 33322, 2528, 37948, 3350, 1088, -1000, -1000, 1088,
	1088, 33836, -1000, 2926, -1000, -1000, 3767, 180, -1000, 22996,
	-1000, -1000, 33836, 33836, 33836, 33836, 33836, 2227, 4304, -1000,
	-1000, -1000, -1000, 27665, -1000, -1000, 605, 1184, 933, -1000,
	-1000, 1310, -1000, 1125, 1309, 605, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1483, 4497, 1466, 33836, 1572, 2703,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1306, 1302, 3247,
	-1000, 1300, 1298, 1297, 1294, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1293, 1289, 1286, 1285, 1282, 1275, 1272, 1270,
	1260, 1259, 1255, 1247, 1246, 1235, 1234, 1233, 1230, 1227,
	1224, 1223, 1221, 1137, 1220, 1212, 1210, 1207, 1206, 1205,
	1204, -1000, 2948, -1000, 2948, 2948, 1202, 1202, 1203, -1000,
	-1000, 2956, 2948, 1202, -1000, -1000, 716, 670, -1000, -1000,
	-1000, -1000, -1000, 503, 1201, -1000, 605, -1000, 83049, 33836,
	83049, 360, 4466, 83049, 467, 15602, -1000, 2876, 2505, -1000,
	1945, -1000, -1000, -1000, 1266, 4465, 61384, -1000, 83049, 3656,
	3653, 3991, 3864, 1090, 4321, 4461, 1005, 83049, 3525, 4317,
	88604, -1000, 1199, 1199, 2678, 83049, 1197, 103646, 2466, 1992,
	-1000, 57848, 4401, 4374, 103646, -1000, 407, 24043, -1000, 24043,
	4255, 3647, 47630, -1000, 826, 83049, 83049, 83049, 83049, -1000,
	83049, 4372, -1000, -1000, -1000, 4371, 83049, 1089, 4316, 1611,
	4497, 4370, 55828, 4315, -1000, 88099, 3747, 2393, 57848, 83049,
	1673, 3746, 4367, -1000, 69414, 1170, 4497, 4460, 3246, -1000,
	-1000, 195, -1000, 1873, -1000, 2199, 2196, 65407, 1833, 1826,
	3374, 1424, 3745, 1970, 1774, 83049, 2707, 83049, 3348, 3989,
	1040, 2626, 1985, -1000, 1196, 72949, 1779, 195, -1000, 3988,
	2194, 83049, 1778, 195, 3987, 3525, -1000, 2795, 105594, 1045,
	-1000, 3805, -1000, 1045, 1045, 3801, 2300, 1872, 1872, -1000,
	83049, 195, 1871, 83049, 13493, 4366, 4209, 13105, 4365, 83049,
	-1000, 924, -1000, 3986, -1000, 67411, 3984, 3980, 3978, 3423,
	-1000, 3480, 4262, 1921, 3373, 3977, 8306, -1000, 3733, 4185,
	-1000, -1000, -1000, -1000, 1923, 2581, -1000, 2447, 1045, 1045,
	83049, -1000, 83049, 87594, -1000, -1000, 605, 3970, 3446, -1000,
	-1000, 2089, 3646, 3642, 83049, 83049, 3967, 8306, 3966, 56333,
	70424, 70424, 3964, 8306, 3963, 3962, 1495, -1000, 4190, 3961,
	1065, 4497, 2159, 2152, 2150, -1000, -1000, 1170, 83049, 83049,
	2174, 3960, -1000, 2310, 2820, 2310, 3959, 55828, -1000, 2310,
	2310, 3958, 1040, 1040, 3957, 1809, 83049, 83049, 83049, 83049,
	83049, 3062, 2955, 2951, 1194, 317, -1000, 2917, -1000, 16197,
	2556, 83049, 83049, -1000, -1000, -1000, 83049, 83049, -1000, 83049,
	83049, 103646, -1000, 103646, 1352, 1356, 3184, -1000, 4480, 3956,
	-1000, 3955, 3954, 3952, -1000, 1192, -1000, 430, 33836, -1000,
	4480, -1000, -1000, -1000, -1000, 4480, -1000, 4013, 4011, 4480,
	-1000, 1191, -1000, 4480, -1000, -1000, 2948, 2948, -1000, -1000,
	103646, 445, 4364, 55828, 4362, 57848, 57848, 57848, 57848, -1000,
	-1000, -1000, -1000, -1000, 83049, 4457, 1717, -1000, -1000, -1000,
	-1000, 311, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4494, 4491, -1000, 311, -1000, -1000, -1000, -1000, -1000,
	1351, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 83049, -1000,
	1238, 466, -1000, 3950, 270, 83049, 83049, 2053, 63909, 63909,
	63909, 83049, 83049, 83049, 3146, 83049, 83049, 83049, 83049, 2087,
	-1000, 439, -1000, 83049, 463, -1000, 456, 3877, 68909, 247,
	70929, -1000, 1081, 50769, -1000, -1000, -1000, 3318, 83049, 83049,
	-1000, 83049, -1000, 83049, -1000, 83049, 83049, 83049, 83049, 83049,
	-1000, 3144, -1000, -1000, -1000, -1000, 1880, -1000, -1000, -1000,
	-1000, 83049, 83049, -1000, -1000, -1000, 83049, 83049, -1000, 83049,
	83049, 432, -1000, 72949, 2234, 2092, 4298, 2623, 2612, 4077,
	4076, 4075, 4073, 4071, 4070, 4069, 4068, 83049, 83049, 1190,
	3732, 3730, 4066, 4064, 103646, 1045, 103646, 15639, -1000, -1000,
	918, 53, 33836, 33836, 33836, -1000, 15602, 4479, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15218, -9, -1000, -1000,
	-1000, -1000, -1000, 1934, 3826, -1000, 1544, -1000, 1856, -1000,
	-1000, 307, 15602, -1000, 39490, -1000, -1000, -1000, 2280, 15602,
	-1000, 37434, 37434, 1919, 83049, 2500, -1000, 2500, 166, -1000,
	6303, 2980, 3245, 3876, 76989, 28694, 103646, 83049, 4001, 33836,
	33836, 33836, 33836, 33836, 33836, 33836, 33836, 33836, 33836, 33836,
	33836, 33836, 33836, 33836, 33836, 4101, 33836, 3949, 2958, -1000,
	-1000, 3947, 1160, 1968, 24043, -1000, -1000, 1173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 546, 546, 779, 7061, 7061, 979, 1184, 4260,
	605, 14802, 304, 749, 605, -1000, -1000, -1000, 29209, 33836,
	47630, 32807, 605, -1000, 26120, -1000, 1860, 4480, 4084, 15602,
	2703, 3777, 1457, 1177, 33836, 33836, 1174, 4480, 4480, 4480,
	4480, 33836, 2151, 33836, 33836, 38976, 33836, 33836, 28180, 33836,
	33836, 33836, 33836, 33836, 2261, 33836, 2835, 40518, 2258, 33836,
	32293, 27150, 33836, 33836, 33836, 917, 33836, 33836, 33836, 2835,
	3876, 33836, 908, 416, -1000, 3636, 409, 33836, -1000, 83049,
	4001, 33836, 33836, 33836, 33836, 3949, 2958, 3947, 1160, 1173,
	-1000, -1000, -1000, 1885, 2135, -1000, 3729, -1000, 3443, 54313,
	3572, 83049, 556, -1000, 1373, 83049, -1000, -1000, 3832, 42548,
	42548, 3386, 3386, -1000, -1000, 65912, 83049, 3332, 3595, 4361,
	2755, 4276, 1172, -1000, 3525, 2620, 4360, 3728, 4314, -1000,
	10404, 66922, 9455, 2056, -1000, -1000, 3329, 2929, 1170, -1000,
	64919, 2464, 83049, 83049, 1593, -1000, -1000, -1000, -1000, -1000,
	-1000, 2309, 83049, -1000, 24043, -1000, 402, -1000, 1367, 3237,
	83049, -1000, 83049, 1171, 1170, 1170, 1170, 1170, 1170, -1000,
	83049, 2055, 83049, 1814, 65912, 3327, 4359, 2692, -1000, -1000,
	83049, 1913, -1000, -1000, 4358, 3040, 4456, 4313, 1005, 24043,
	4509, -1000, 4453, 2815, 44063, 83049, 1784, 557, -1000, 72949,
	4208, 713, 1005, -1000, 394, -1000, 2142, 103646, 4497, 3040,
	3040, 7586, 83049, 83049, 83049, -1000, 83049, 83049, -1000, 4312,
	87089, -1000, 103646, 83049, -1000, 1169, 3645, 1543, 1538, 3607,
	76484, 83049, 86584, 86079, 83049, 1800, -1000, -1000, 2329, 83049,
	-1000, 24043, 83049, 71939, 1748, 1739, 83049, 2415, 71434, 83049,
	2405, -1000, 83049, 1984, -1000, -1000, 57848, -1000, 3460, 2404,
	25609, 2101, 83049, 83049, 83049, 12630, 83049, 83049, -1000, -1000,
	-1000, -1000, -1000, -1000, 1045, -1000, -1000, -1000, 83049, 83049,
	1045, 1045, 15826, 83049, 83049, 11548, 195, 1869, 83049, 1772,
	195, 1866, 72949, 1790, 83049, 401, -1000, -1000, 104133, 100724,
	-1000, 2231, -1000, -1000, -1000, 429, -1000, 105594, 83049, 83049,
	83049, 83049, 83049, -1000, 4183, 85574, 33836, 4181, -1000, 83049,
	-1000, 1167, 4177, 83049, 83049, -1000, -1000, -1000, 4174, 3725,
	2578, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2894,
	1845, 57848, 57848, 3944, 83049, 83049, 2378, 3724, 83049, -1000,
	83049, -1000, 301, 301, 301, 83049, -1000, 83049, 83049, -1000,
	-1000, -1000, 83049, -1000, 83049, -1000, 4291, 83049, 83049, -1000,
	2084, 2072, 3943, -1000, 2218, -1000, 57848, 2317, -1000, 85069,
	-1000, 83049, -1000, 57848, 1910, 2317, -1000, -1000, 83049, -1000,
	-1000, 83049, 935, 3496, 2061, 2052, 2049, 2044, 83049, 83049,
	4497, 4397, 83049, 4497, 84564, 24043, 3117, 83049, 3935, 83049,
	83049, 63909, 1164, 103646, 63909, 48688, 63909, 63909, 3235, 103646,
	-1000, -1000, 68909, 67899, 1974, 2295, 445, -1000, 474, -1000,
	4298, 3723, -1000, 446, 1510, 4480, 1352, 1350, 902, 2314,
	2051, 1952, 1929, 4480, -1000, 390, 899, 895, 4003, 3999,
	893, 33836, 892, -1000, -1000, 446, -1000, 83049, 1901, 3234,
	-1000, 159, 159, 159, 4283, 2505, 46106, -1000, -1000, 1860,
	4480, -1000, -1000, 103646, -1000, 55323, 83049, 270, 270, 3105,
	83049, 299, -1000, 299, 299, 174, 284, 174, 1045, 291,
	459, -1000, 174, 174, 284, 4207, 4204, 4200, 4194, 4193,
	-1000, 24043, 3800, 375, 83049, -1000, -1000, 55323, 3719, 276,
	4298, 555, -1000, -1000, 83049, -1000, -1000, -1000, -1000, 3641,
	-1000, -1000, -1000, -1000, -1000, 3231, 2635, 2633, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2325,
	2031, 2019, 2281, -1000, -1000, -1000, -1000, 4143, 4143, 4143,
	4143, 4143, 4143, 4143, 4143, 3640, 3639, -1000, 103159, 84059,
	83049, 4143, 4143, 2453, 4063, 4452, 83049, 83049, 83049, 103646,
	103646, 63909, 63909, 3099, 63909, 63909, -1000, 873, 31779, -1000,
	1455, -35, -35, 33836, 33836, -1000, 33836, -1000, 3471, -1000,
	33836, 2280, 3858, -1000, 4495, 4495, 1153, -1000, 27665, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2380, 270,
	33836, 858, 1398, -1000, -1000, -1000, -1000, 3830, 42548, -1000,
	3814, 3814, 1745, 1740, 3814, 83049, -1000, -1000, -1000, -1000,
	3951, -1000, 400, 400, 420, 420, 420, -1000, 589, 589,
	589, 589, 589, 589, 779, 7061, 10876, 805, 33836, 33836,
	3933, 3941, 1160, 758, 33836, -1000, 3393, -1000, -1000, -1000,
	3875, -1000, -1000, 2238, 3124, -1000, -1000, -1000, -1000, 3056,
	38976, 38976, -1000, -1000, -1000, 27665, 1158, -1000, -1000, -1000,
	-1000, 47630, -1000, 1157, 33836, -1000, -1000, 4224, -1000, -1000,
	33836, 112, 84, -1000, -1000, 367, 870, 365, -1000, 53,
	-1000, 859, 3006, -1000, 33836, 1457, 1156, -1000, 62899, 3833,
	3098, 3010, 475, 1468, 14418, 33836, 857, 850, 848, 847,
	14210, 844, 3874, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2006, 843, 842, 13999, 269, 841, 6683, -1000, 38976,
	38976, 38976, 1153, 838, 833, 6477, 13651, 31265, 31265, 31265,
	832, 13577, 33836, 126, 6138, 363, 362, 361, 359, 24043,
	357, -1000, 13067, 33836, 3266, 24043, 2211, 355, 413, 831,
	-1000, 103646, 475, 410, 1403, 830, -1000, 605, 3124, 12867,
	3455, -1000, 268, 266, 258, 33836, 3830, 351, -1000, -1000,
	1152, -1000, 3583, -1000, 15602, -1000, -1000, -1000, 3457, 3451,
	3009, -1000, -1000, 349, -1000, -1000, -1000, -1000, 3832, 61384,
	33836, 347, -1000, 605, 3457, 36920, 105, 3618, 73959, 73959,
	44568, -1000, 42043, 75474, 73959, 73959, 1391, 3873, 1147, 1142,
	605, -1000, -1000, -1000, 1137, 3809, 3490, -1000, 3490, 829,
	254, 103646, -1000, -1000, -1000, -1000, 83049, 1047, 83049, 3119,
	83049, 83049, 83049, 4451, 1040, 83049, 83049, 72949, 4357, 101211,
	2177, 9455, -1000, 4497, 62394, 3230, -1000, -1000, 343, -1000,
	-1000, 1536, 2177, 3722, -1000, -1000, -1000, 3326, -1000, -1000,
	2056, -1000, 828, -50, 3799, 341, -1000, -1000, -1000, 1359,
	83049, 2649, 1005, 83049, 4401, 2011, 2023, 2892, -1000, 1964,
	-1000, -1000, 24043, 24554, 1672, -1000, 827, 250, -1000, 103646,
	4497, -1000, -1000, -1000, -1000, -1000, 1226, -1000, 83049, 62394,
	62394, -1000, 1872, 1485, 1814, -1000, 83049, 1802, 83049, 823,
	83049, 83049, 2836, 1671, 83049, 3229, -1000, -1000, 4480, 57848,
	57848, 2292, 4184, 2188, 2186, -1000, -1000, 3810, 1630, 57848,
	1238, 4355, 3595, 2974, 4276, 3228, 4515, 2637, -1000, -1000,
	505, -1000, 605, -1000, 33836, 1133, 4291, -1000, 70424, 1005,
	1958, 713, 3831, 3831, 83049, 821, 3930, -1000, -1000, 3929,
	3928, 3315, 2962, 4354, -1000, 4311, 1799, 1663, 33836, 1130,
	-1000, 2585, 1107, 1129, 1128, 83049, 1949, 3493, -1000, 4352,
	4298, 4350, 4298, -1000, -1000, -1000, 75979, -1000, 318, -1000,
	586, -1000, -1000, -1000, -1000, 83049, 83049, 83049, 83049, -1000,
	1894, -1000, -1000, -1000, -1000, 1893, -1000, 2401, -1000, -1000,
	-1000, -1000, -1000, 2583, 1877, 298, -1000, -1000, 24043, 24043,
	24043, 4497, -1000, 195, -1000, 1863, 2524, -1000, -1000, 195,
	3927, 2516, -1000, -1000, -1000, -1000, -1000, -1000, 195, 3926,
	3525, -1000, 3924, 195, 1865, 83049, 83049, 10681, 83049, 83049,
	83049, 9692, 3923, 1495, 1814, -1000, -1000, 100724, 104133, -1000,
	104133, -1000, 429, -1000, 598, 429, -1000, -1000, -1000, -1000,
	3922, -1000, 4298, 4347, 15602, -1000, 1927, 33836, -1000, -1000,
	-1000, 2525, 4170, -1000, -1000, -1000, 159, 83049, 2043, 2390,
	3921, 3622, 57848, 83049, -1000, -1000, -1000, -1000, -1000, -1000,
	513, -1000, 513, 513, 3917, 3916, 83049, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 83049, -1000, -1000, -1000, -1000, -1000,
	1808, 3912, 3911, 3910, 3909, -1000, 3908, 3907, 4497, 4310,
	4298, -1000, 4346, 4298, 296, -1000, 1363, -1000, 2910, 2908,
	3491, -1000, 62394, -1000, -1000, -1000, 103646, -1000, -1000, -1000,
	83049, 83049, -1000, -1000, 103646, -1000, 3717, 3715, 1513, 83049,
	57848, 57848, -1000, -1000, -1000, 83049, -1000, -1000, 1344, 1340,
	4480, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 818,
	-1000, -1000, 1384, -1000, -1000, 1384, 295, -1000, -1000, 445,
	83049, 55828, -1000, 2350, 440, -1000, -1000, 816, -1000, 464,
	-1000, -1000, 57848, -1000, 83049, 174, 63909, 243, -1000, 83049,
	83049, 1954, 1948, 1941, 1940, 1876, 308, -1000, 1978, 57848,
	-1000, -1000, 212, 69919, -1000, 57848, -1000, -1000, 1238, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2771, 2760, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 83049, 83049,
	292, 232, 4062, 83049, 4061, -1000, -1000, 83049, 4143, 103646,
	4059, 4056, 4053, 4051, 4046, 4043, 4041, 1045, 4040, 4036,
	-1000, 33836, -1000, 815, 814, 33836, 804, 15602, 15602, 1338,
	15602, -1000, -1000, 3846, -1000, 1727, -1000, -1000, 30751, 222,
	-1000, -1000, 1398, -1000, 1101, -1000, 3565, 3776, 33836, 105,
	83049, 83049, 3814, 3814, 3814, 3814, 83049, -1000, 33836, 33836,
	715, 634, 33836, 38976, 38976, -1000, 33836, 553, -1000, -1000,
	-1000, -1000, 3872, -1000, -1000, 2237, 3124, 33836, -1000, -1000,
	1641, 1640, -1000, -1000, -1000, -1000, 2145, 1926, 290, -1000,
	27665, 803, 30237, 220, -1000, 605, 12533, -1000, -1000, 1349,
	-1000, -1000, -1000, 798, 4497, 2784, -1000, 33836, 12228, -1000,
	1455, -1000, -1000, 100219, 33836, 3124, 3713, 3711, 33836, 33836,
	3094, 3798, -1000, -1000, 2982, 12408, -1000, -1000, -1000, -1000,
	103646, -1000, 33836, -1000, 2687, -1000, -1000, 33836, -1000, 103646,
	38976, 38976, 38976, 38976, 38976, 38976, 38976, 38976, 38976, 38976,
	38976, 38976, 38976, 3035, 38976, 1125, 528, 528, 528, -1000,
	-1000, 29723, 33836, 33836, 103646, 796, 794, 793, -1000, 33836,
	126, 33836, -1000, -1000, -1000, -1000, 282, -1000, 33836, 24043,
	6188, 791, 41538, 280, 1612, -1000, 3124, 33836, -1000, 1403,
	3455, 33836, 3709, 3708, 3455, -1000, 788, -1000, 787, 33836,
	33836, 33836, 12172, 3776, -1000, 1238, -1000, -1000, 28694, 1004,
	1238, 1531, 83049, 605, 3457, -1000, 15602, 1362, 83049, -1000,
	15602, 3325, 42548, 3674, 3673, 42548, 3691, 3621, 3621, 3621,
	-1000, 1733, -1000, 83049, 1123, -1000, 73959, 75474, 73959, 73959,
	58353, 778, 3618, -1000, -1000, 61889, 1121, -1000, -1000, -1000,
	3291, 1120, 41028, 33836, 605, 33836, 1872, -1000, -1000, -1000,
	3637, 2542, 65912, -1000, 2190, 66417, 1047, 3679, 1040, 1527,
	-1000, 1053, 4450, 1050, 1238, -1000, 274, 3525, 3607, 83049,
	9455, 1110, -1000, -1000, -1000, 2920, 33836, -1000, -1000, 218,
	-1000, 202, 1667, -1000, 100724, 33836, 33836, -1000, 83049, 2056,
	83049, 3686, -1000, -1000, 3796, 100724, 100724, -1000, 4513, 24554,
	1108, 83049, 4276, 1106, 83554, 57848, 4401, -1000, 83049, -1000,
	-1000, 83049, 3026, -1000, 4304, 1530, 1105, 38976, 83049, 3081,
	-1000, 2689, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1101, 4494, 4491, 103646, -1000, 83049, 4268, 776, 199, -1000,
	-1000, 83049, -1000, -1000, -1000, -1000, -1000, 1100, -1000, -1000,
	500, -1000, -1000, -1000, 2542, 1047, 962, 3102, 1611, 1485,
	55828, -1000, 159, 159, 57848, 57848, -1000, -1000, 4497, 4497,
	991, 4497, 159, 4283, 83049, 4276, 2270, 83049, -1000, 3906,
	3644, -1000, 83049, 42548, 44063, 12112, 3707, -1000, -1000, 3831,
	74969, 3831, -1000, 1099, -1000, 513, 3120, 4497, 83049, 83049,
	-1000, 3566, -1000, -1000, -1000, 83049, 4345, 2854, -1000, 74464,
	-1000, 3607, 11999, 83049, 2606, 83049, 83049, -1000, 83049, 43053,
	-1000, -1000, 2983, 3253, 1040, 2671, 2304, 1666, -1000, -1000,
	1872, 1804, 2606, 83049, -1000, 83049, -1000, -1000, -1000, -1000,
	-1000, 24043, 24554, 24043, -1000, -1000, -1000, -1000, -1000, -1000,
	1864, 83049, -1000, -1000, 25609, -1000, -1000, -1000, -1000, -1000,
	83049, 83049, 83049, 1771, 3795, 83049, 1769, 3791, 83049, 83049,
	83049, 83049, -1000, 3905, 195, 1862, 2477, -1000, 3903, 195,
	1861, 83049, -1000, -1000, -1000, -1000, 1665, 583, 83049, -1000,
	83049, -1000, 11783, 2606, -1000, 2523, -1000, 3902, 3901, 2212,
	2907, 83049, 4294, 1098, 159, 2038, -1000, -1000, -1000, 83049,
	83049, -1000, 1495, 935, 83049, 83049, 83049, 83049, 83049, 4497,
	2909, 4342, -1000, 83049, -1000, 24043, -1000, 25090, 1656, 2834,
	-1000, 4439, 3632, 3630, 2451, 1874, 1874, 3226, 174, 159,
	159, 4298, -1000, -1000, 1145, -1000, -1000, -1000, -1000, -1000,
	-1000, 1897, -1000, 2833, 4497, 2662, 55323, 2665, -1000, 174,
	-1000, 1045, 459, -1000, 83049, 83049, 83049, 83049, 83049, -1000,
	24043, -1000, -1000, -1000, -1000, -1000, 4298, 3869, 247, -1000,
	-1000, -1000, 4034, 4031, -1000, 102672, 103646, 4143, 4026, 4143,
	4025, -1000, 768, 4156, 4156, 4156, 4156, 4156, 4156, 4156,
	4020, 4156, 4156, 1455, -1000, -1000, -1000, -1000, -1000, 1726,
	-1000, 255, -1000, 33836, -1000, 47630, -1000, -1000, 3774, 3789,
	15602, -1000, -1000, 83049, 83049, 83049, 83049, -1000, 907, 485,
	33836, 33836, 504, 1887, 1791, 485, 33836, 33836, -1000, -1000,
	534, 2488, 2485, 33836, 33836, -1000, 11567, -1000, 253, -1000,
	33836, -1000, -1000, 4497, -1000, -1000, 15602, 33836, 766, 2191,
	-1000, 11230, 3455, 4157, 4146, -1000, -1000, 3455, 33836, 3027,
	-1000, 757, 15602, 756, 11057, -1000, 265, 265, 405, 405,
	405, -1000, 493, 493, 493, 493, 493, 493, 528, 3868,
	3023, -1000, 6837, 11008, 10958, 10618, 752, -1000, -1000, -1000,
	126, 10260, -1000, 36406, -1000, -1000, 748, 1588, 1587, -1000,
	3784, 40518, 3036, -1000, 33836, 182, 35892, 3455, -1000, -1000,
	744, -1000, 4142, 4121, 743, -1000, -1000, 10029, 10029, 10029,
	105594, 3774, 739, 180, 3410, 43053, 3372, -1000, -1000, 3443,
	-1000, -1000, 33836, -1000, 83049, 3618, 42548, 42548, 3735, 3672,
	42548, -1000, -1000, -1000, -1000, -1000, 63909, 1096, 83049, -1000,
	-1000, -1000, -1000, 73959, 1094, 83049, 83049, -1000, 50264, 3266,
	1092, 179, 9627, 1075, 1872, 3017, -1000, 2190, 1085, -1000,
	2645, 3595, -1000, 3788, 249, -1000, -1000, -1000, 4296, 3315,
	1741, 2859, -1000, -1000, 65912, 83049, 3317, 2751, 4283, 4282,
	4276, -1000, 1084, 3706, 2177, 106081, -1000, 15602, 4497, 3220,
	103646, -1000, 15602, 15602, 2121, -1000, 98, 83049, 100724, -1000,
	248, -1000, 1359, -1000, 3844, 2538, 4438, 83049, 996, 4307,
	-1000, 1889, -1000, -1000, -1000, 4291, 4291, 33836, 6837, 1005,
	4437, -1000, 4252, -1000, -1000, 3626, -1000, -1000, 83049, -1000,
	4497, -1000, 2055, 24043, 407, 1891, 3315, 65912, 3313, 83049,
	2680, -1000, 1884, 159, 159, -1000, -1000, -1000, -1000, -1000,
	4432, 1741, 63909, -1000, -1000, 3000, -1000, 4191, 3622, 57848,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 105, -1000, -1000,
	44063, -1000, -1000, -1000, -1000, 33836, -1000, 1767, 2695, 3867,
	-1000, -1000, 3866, -1000, 83049, 1485, -1000, 73454, -1000, -1000,
	-1000, 242, -1000, 1855, -1000, 2669, 2572, -1000, 234, 2606,
	230, 224, -1000, 4295, 938, 4257, 33836, 4118, 4396, 4395,
	-1000, -1000, 3081, 4111, 4428, 935, -1000, -1000, -1000, -1000,
	3081, -1000, 2220, 103646, 1045, 935, 4298, 4298, -1000, -1000,
	1353, -1000, -1000, -1000, -1000, 3898, 3897, 83049, 57848, -1000,
	83049, 57848, -1000, -1000, -1000, 3896, 83049, 83049, 83049, 1768,
	3787, 83049, 83049, 83049, -1000, -1000, 1654, -1000, 4298, -1000,
	-1000, 83049, 83049, 50, -1000, 4480, 4480, 103646, 176, -1000,
	4480, 4480, -1000, -1000, 1448, 33836, 3895, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4298, -1000, 4497, 4497, -1000,
	4298, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 103646,
	103646, 83049, 83049, 83049, 3894, -1000, -1000, -1000, -1000, -1000,
	-1000, 3865, 68909, -1000, -1000, 83049, -1000, -1000, -1000, -1000,
	1509, -1000, 174, 174, 174, 174, 174, -1000, -1000, 55323,
	4298, 4143, 4143, 736, 735, 730, -1000, 4143, -1000, 4143,
	4018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4156, -1000, -1000, 728, -1000, -1000, 9750, 723, 1585, 33836,
	4243, -1000, -1000, -1000, -1000, 485, 485, 33836, 33836, 33836,
	485, 534, -1000, -1000, 485, 485, -1000, -1000, 9499, -1000,
	15602, -1000, 1455, 3786, -1000, 711, -1000, -1000, 689, 166,
	83049, -1000, -1000, 33836, 38976, 3859, -1000, 33836, 33836, 33836,
	-1000, -1000, 223, 219, 1083, -1000, -1000, -1000, -1000, 3036,
	3784, -1000, -1000, 9406, 688, 1805, 15602, 3003, 687, -1000,
	-1000, -1000, -1000, 3455, 33836, 3349, 3455, 2457, 1585, 3537,
	3407, 209, -1000, 83049, 3002, 15602, -1000, -1000, 3735, -1000,
	1082, 33836, 42548, -1000, 1078, 83049, 207, -1000, 83049, 206,
	205, 103646, 203, -1000, 4427, 3308, 38462, 33836, 3534, -1000,
	4332, 4332, 3522, -1000, 3304, 24043, 1075, 4497, 3595, 83049,
	2615, 2615, 3119, 83049, -1000, 66417, 1964, 1486, 2190, -1000,
	83049, 2540, 674, 1047, 83049, 83049, -1000, -1000, 1858, 4425,
	43053, 72949, -1000, 193, -1000, 104133, -1000, 7401, -1000, 1651,
	-1000, 3218, 1687, 3852, 190, -1000, 668, 1827, 1825, 1735,
	83049, 1238, 187, 65912, 4341, 4401, -1000, 4097, 3599, 3599,
	9328, 2372, 898, -1000, 83049, -1000, -1000, 186, -1000, 83049,
	1882, 631, 83049, 1485, 2832, 83049, 1238, -1000, 1074, 2270,
	83049, 1073, 4294, 159, 477, 9281, 63909, 4419, 4419, 83049,
	1070, 1069, 1066, -1000, -1000, -1000, -1000, 2606, 2599, -1000,
	-1000, -1000, -1000, -1000, 2599, 2123, 2599, 43053, 48159, -1000,
	83049, 83049, -1000, 9077, -1000, 4338, 4337, -1000, -1000, 1064,
	-1000, 4423, 4268, -1000, -1000, -1000, -1000, 24554, 83049, 83049,
	2234, 443, 2234, 417, 83049, -1000, -1000, 3892, 83049, 57848,
	-1000, -1000, 3890, -1000, -1000, 2606, -1000, -1000, 2212, 47630,
	47125, -1000, 2907, 1062, 1055, 1054, 8526, 83049, -1000, -1000,
	-1000, -1000, 4268, 629, -1000, -1000, -1000, 55323, 55323, 3705,
	-1000, -1000, 212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4143, -1000, -1000, -1000, -1000, -1000, 83049, 15602, 34864,
	485, 485, 485, -1000, 2449, 33836, -1000, -1000, -1000, 8406,
	5793, 38976, 15602, 15602, 15602, -1000, 33836, -1000, 33836, -1000,
	-1000, -1000, 1701, -1000, -1000, 3096, 154, -1000, 4421, 628,
	3700, 33836, -1000, -1000, -1000, -1000, -1000, -1000, 3186, 3349,
	613, -1000, 2594, -1000, 3529, 3575, 3487, -1000, 3830, 43053,
	-1000, 1238, -1000, 83049, 15602, -1000, 33836, 173, -1000, 171,
	-1000, -1000, 1391, 50264, -1000, 1052, 83049, 170, -1000, 690,
	38976, 8320, -1000, -1000, 3420, 33836, 3417, -1000, 3422, -1000,
	-1000, -1000, 4413, 4413, -1000, -1000, 4413, 4413, 3178, 4497,
	165, -1000, 21582, 3830, -1000, 3119, 158, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3679,
	1051, -1000, -1000, 3595, -1000, -1000, 3278, 3276, 2542, 2190,
	1047, 1050, 1504, 1446, 1444, 1238, 153, 3607, 106081, 9455,
	-1000, -1000, 387, -1000, -1000, 103646, 4082, 2799, 1687, -1000,
	2276, -1000, -1000, -1000, 83049, -1000, -1000, 4293, 4292, -1000,
	-1000, 83049, 1620, -1000, 4282, 4276, 83049, -1000, 2546, -1000,
	2246, 3682, 2182, 1026, 33836, 2711, -1000, 24043, 1485, 83049,
	2542, 1047, -1000, 3100, 1485, 4283, 611, 63909, -1000, 4505,
	-1000, 42548, -1000, 4419, -1000, 2699, -1000, -1000, 64414, 33836,
	33836, 1964, 4291, 1046, 4291, 83049, 4291, -1000, -1000, 1041,
	3544, 1040, -1000, 4257, -1000, -1000, 33836, 2610, 3603, -1000,
	-1000, -1000, -1000, 1763, -1000, 1757, -1000, 83049, 2234, 404,
	83049, -1000, 1012, 3206, -1000, 103646, -1000, 103646, 103646, 33836,
	-1000, -1000, 4298, -1000, 464, 442, 1874, 4298, -1000, 146,
	-1000, 4417, 141, -1000, 15602, -1000, -1000, -1000, -1000, 26635,
	1037, 1034, 710, 600, 35378, 35378, 35378, 126, 33836, 5793,
	152, 147, -1000, 2999, 3063, 3088, 3182, 33836, 24043, -1000,
	3166, 15602, -1000, -1000, 590, 3697, -1000, -1000, -1000, 83049,
	3520, 3514, 61384, -1000, -1000, -1000, 145, 142, -1000, -1000,
	-1000, -1000, 83049, 140, -1000, 102185, 38462, 120, 24043, 6837,
	3268, 83049, 3453, 15602, 3433, 3783, 4497, 4497, 4497, 4497,
	53303, 4093, 52798, -1000, -1000, 24043, -1000, -1000, -1000, -1000,
	-1000, 54818, -1000, 3679, -1000, 1741, 43558, 1964, 3119, -1000,
	-1000, 2190, 3595, 3315, 4283, -1000, 1500, 1499, 4282, 2598,
	1033, -1000, 2177, -1000, -1000, 2744, 1032, 1834, -1000, -1000,
	4413, -1000, -1000, 2763, -1000, 2694, 2688, -1000, -1000, -1000,
	4411, 986, 1753, -1000, 2548, -1000, 3690, 3689, 3495, -1000,
	-1000, -1000, -1000, 3525, 8232, 4409, 83049, -1000, -1000, 1485,
	1879, 3315, 83049, -1000, -1000, -1000, 1031, 139, -1000, 105,
	-1000, -1000, -1000, 137, -1000, 4480, 134, 127, 3599, 83049,
	3599, 1005, 3599, 47630, 1398, 3544, -1000, 7963, 1026, -1000,
	33836, 83049, 83049, -1000, -1000, 1743, -1000, 2132, 1875, 2132,
	122, 117, 111, 7215, -1000, -1000, -1000, 3845, -1000, 83049,
	1024, 34864, -1000, 33836, 33836, 1023, -1000, 2776, -1000, 40004,
	2338, 1983, 6357, 2776, 2776, 15602, -1000, -1000, -1000, 3349,
	3061, 3058, -1000, 3092, -1000, 3084, 3087, 3076, -1000, -1000,
	-1000, -1000, 3183, 391, 3782, 3780, 408, 4408, 2012, 106,
	-1000, 83049, 3343, 3289, -1000, 40518, -1000, 3300, -1000, -1000,
	-1000, 3400, 3483, -1000, -1000, 3391, 1093, 3414, -1000, -1000,
	-1000, -1000, 98, -1000, 52293, 98, -1000, -1000, 99, -1000,
	-1000, 1741, -1000, 89, -1000, 938, 4257, 33836, 3679, 3595,
	3119, 2190, -1000, -1000, -1000, -1000, 4304, 1018, 43053, -1000,
	2270, 33836, -1000, -1000, -1000, 83049, 2797, 63909, 63909, 1238,
	65912, 83049, -1000, -1000, 3466, -1000, 3469, 2872, 2872, 444,
	1797, 2212, -1000, -1000, 83049, 1878, 1485, 563, -1000, 4504,
	-1000, 64414, -1000, -1000, 3889, -1000, 86, -1000, 2372, 3830,
	547, -1000, 1398, -1000, -1000, 15602, 2234, 2234, 83049, -1000,
	-1000, -1000, 3779, -1000, 63909, -1000, -1000, -1000, 55323, -1000,
	-1000, -1000, 72, 69, 34864, -1000, 2075, 4330, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 544, 3685, 3684, -1000, -1000,
	3074, -1000, 3073, -1000, 3349, -1000, 83049, 83049, 83049, -1000,
	-1000, 83049, -1000, 1017, -1000, -1000, 3343, -1000, 38976, 38976,
	4092, -1000, 38976, -1000, 3266, 1016, -1000, 61384, -1000, -1000,
	3443, 83049, 3563, 1013, -1000, -1000, 98, -1000, -1000, 54818,
	-1000, -1000, 43558, 83049, 83049, 7006, 1741, 3119, 3679, 3595,
	4276, 43053, 49, 63909, 6605, -1000, -1000, 1982, 95, 76,
	4282, -1000, -1000, 2933, -1000, -1000, 4108, -1000, -1000, -1000,
	50, 1485, 83049, -1000, -1000, -1000, -1000, 1009, 2606, -1000,
	2606, 3682, -1000, -1000, -1000, -1000, -1000, 2234, 83049, -1000,
	442, -1000, -1000, 43, 1980, -1000, -1000, 1547, 34350, -1000,
	3050, 3048, -1000, -1000, 3680, 3620, 385, 368, -1000, 33836,
	-1000, 6837, 6837, -1000, 6837, 3299, 82544, 22, 2995, 42,
	-1000, 33836, -1000, -1000, -1000, -1000, 4257, -1000, 3679, 1741,
	3119, 1741, 36, -1000, 2598, 1008, -1000, 4082, 3887, 3843,
	-1000, -1000, 1005, 1005, -1000, 1485, 33836, -1000, 2606, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3045, 3024, 3158, 51788,
	83049, 83049, 83049, 6551, 83049, 29, -1000, 101698, 3274, 3561,
	3458, 3, 83049, 1741, -1000, 3679, 3830, -1000, 43053, 4304,
	23532, 2739, 1820, 1818, -1000, -1000, -1000, -15, 2606, -1000,
	-1000, -1000, 4226, 989, -1000, -1000, -1000, -1000, -1000, -19,
	3349, 82544, 3284, 1890, 4502, -1000, -1000, -1000, 3443, -1000,
	-1000, -1000, 1741, -1000, -1000, 4276, -30, -1000, -1000, -1000,
	-1000, -1000, 2270, 4275, 4272, -1000, 51788, 33836, -1000, 542,
	-1000, -1000, 3096, 3273, 3273, 4498, 3389, 2994, -1000, 1741,
	-1000, 23532, 63909, 2686, 2677, 3592, -35, -1000, 3063, 3096,
	3349, -1000, 999, 83049, 3561, 3830, -1000, 990, 63909, 63909,
	83049, 433, 3349, 3063, -1000, 82544, 3293, -1000, -1000, 23532,
	-1000, -1000, -1000, 4497, -1000, 3349, -40, 984, -53, -1000,
	-1000, 82544, -1000, -56, -1000,
}

var yyPgo = [...]int16{
	0, 5055, 5049, 3153, 175, 0, 274, 7720, 5048, 129,
	301, 390, 5047, 1861, 106, 3608, 112, 380, 453, 391,
	5046, 5045, 5044, 5043, 32, 5042, 4339, 10635, 9511, 107,
	5041, 332, 5041, 5040, 388, 313, 350, 5037, 278, 5034,
	5027, 181, 233, 5022, 295, 5010, 449, 5008, 28, 5007,
	5003, 283, 160, 406, 429, 434, 432, 4997, 370, 405,
	364, 366, 4996, 9509, 450, 2640, 14, 4994, 4991, 641,
	4990, 4988, 4985, 369, 4980, 304, 4976, 4975, 4974, 4973,
	10, 397, 4973, 4971, 347, 4970, 4969, 4968, 98, 4967,
	4966, 4965, 4964, 291, 379, 367, 4962, 426, 372, 164,
	239, 10224, 12760, 4959, 387, 247, 792, 200, 12746, 4956,
	16332, 4955, 4953, 15624, 15173, 15050, 4952, 14381, 14376, 463,
	282, 232, 394, 398, 417, 297, 454, 203, 401, 5,
	176, 399, 4950, 4949, 4948, 162, 4947, 4944, 59, 57,
	358, 4942, 4941, 82, 34, 54, 423, 404, 4939, 4938,
	442, 4937, 4936, 11991, 74, 221, 4934, 86, 4933, 361,
	368, 65, 52, 4928, 351, 286, 306, 37, 289, 210,
	55, 204, 365, 4926, 4925, 4923, 4922, 355, 285, 93,
	6736, 465, 446, 250, 168, 165, 144, 4920, 201, 187,
	4919, 4918, 4917, 4916, 4915, 4914, 4913, 4912, 4910, 4909,
	4908, 4907, 4906, 4905, 4903, 4899, 4898, 4897, 4894, 4892,
	27, 41, 4890, 4889, 287, 275, 284, 341, 4888, 344,
	163, 16, 30, 149, 153, 4887, 4885, 4883, 4882, 20,
	80, 15, 4881, 4878, 4877, 396, 4876, 436, 4874, 4873,
	354, 328, 4872, 4871, 3327, 732, 3328, 4870, 89, 336,
	4867, 4866, 4864, 127, 4863, 4862, 4861, 266, 4861, 53,
	63, 4860, 40, 342, 378, 302, 415, 47, 331, 483,
	281, 4858, 440, 400, 392, 83, 263, 6, 244, 199,
	279, 4857, 267, 4855, 4854, 4854, 431, 339, 270, 273,
	157, 151, 4852, 447, 4851, 430, 4850, 4849, 4847, 4842,
	343, 262, 70, 4839, 264, 4838, 99, 4837, 4836, 91,
	340, 26, 46, 4835, 43, 88, 39, 174, 4834, 68,
	334, 1, 23, 11, 4833, 468, 4832, 73, 4831, 323,
	296, 4830, 346, 290, 4827, 345, 94, 7, 12, 4825,
	2, 22, 4, 18, 318, 4824, 45, 4821, 95, 4820,
	280, 198, 125, 4819, 150, 4818, 81, 44, 111, 4813,
	4812, 4811, 130, 29, 4810, 126, 4809, 195, 320, 4808,
	4806, 4805, 24, 38, 113, 60, 64, 49, 25, 87,
	56, 4804, 4803, 35, 97, 4802, 219, 61, 8, 101,
	311, 96, 4797, 31, 21, 19, 359, 309, 389, 386,
	4795, 310, 412, 413, 451, 3502, 109, 395, 51, 240,
	4794, 220, 4792, 69, 4791, 85, 50, 191, 58, 66,
	4787, 62, 236, 4786, 92, 360, 4783, 330, 231, 17241,
	4781, 196, 325, 455, 67, 4780, 248, 184, 4779, 36,
	375, 108, 438, 416, 4778, 381, 4778, 4777, 4776, 172,
	154, 118, 4775, 116, 4774, 4773, 4772, 4771, 409, 4770,
	4769, 4768, 4767, 4766, 4765, 4763, 4762, 4759, 4758, 4754,
	4750, 4748, 4747, 4746, 4745, 4744, 4741, 4740, 448, 456,
	4739, 393, 4738, 472, 371, 4737, 414, 4736, 131, 4735,
	407, 376, 4734, 4733, 4732, 377, 458, 424, 421, 4731,
	170, 408, 48, 4730, 78, 435, 353, 205, 104, 75,
	4729, 4728, 211, 1505, 4727, 357, 4725, 452, 293, 437,
	146, 142, 4724, 4722, 4720, 4719, 4718, 4711, 4710, 4709,
	4708, 4707, 4702, 4697, 4694, 4693, 4692, 4691, 4690, 4689,
	4687, 4686, 4685, 4684, 4683, 4682, 4680, 4679, 4678, 4677,
	4676, 4675, 4674, 4671, 4670, 4669, 4668, 4667, 4666, 4661,
	4660, 4656, 4655, 4654, 269, 252, 4652, 4641, 4638, 385,
	382, 316, 322, 441, 249, 258, 102, 4634, 4633, 119,
	4632, 4631, 4627, 422, 4625, 445, 4623, 4622, 4616, 4615,
	186, 110, 4611, 79, 161, 433, 42, 4610, 4609, 246,
	319, 100, 103, 4608, 4607, 4604, 4601, 4599, 197, 4592,
	4591, 255, 72, 4590, 308, 257, 443, 384, 419, 464,
	4589, 418, 4585, 2001, 428, 4582, 260, 288, 90, 383,
	4580, 105, 4577, 4576, 337, 425, 212, 4574, 4573, 4568,
	71, 4567, 4565, 268, 327, 4559, 4554, 4553, 4551, 4549,
	4546, 3, 84, 17, 9, 4545, 4542, 33, 4541, 4540,
	317, 4538, 4534, 403, 76, 77, 4533, 4532, 4531, 12803,
	300, 4529, 4528, 349, 13, 4502, 4502, 3494, 427,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 19, 19, 394, 394, 428, 428,
	428, 32, 32, 33, 33, 34, 34, 35, 35, 48,
	48, 48, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 13, 13, 14, 14, 429, 429, 31,
	31, 16, 16, 18, 18, 670, 670, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 15, 15, 17, 17,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 666, 666, 666,
	666, 666, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 99, 101, 100, 100, 100,
	108, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 123, 123, 67, 67, 94,
	94, 98, 98, 97, 97, 97, 97, 95, 95, 68,
	68, 68, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 81, 81, 83, 83, 83, 83, 83, 84,
	84, 84, 85, 12, 12, 12, 12, 12, 12, 12,
	12, 86, 86, 87, 79, 88, 88, 216, 216, 89,
	89, 89, 90, 90, 90, 91, 91, 92, 92, 92,
	92, 301, 301, 301, 623, 623, 130, 130, 130, 130,
	130, 130, 130, 80, 80, 93, 93, 93, 70, 71,
	71, 74, 74, 73, 72, 72, 75, 75, 75, 78,
	78, 128, 128, 128, 76, 76, 77, 163, 163, 163,
	156, 156, 156, 156, 156, 156, 165, 165, 165, 165,
	164, 164, 164, 164, 164, 166, 166, 166, 166, 166,
	127, 127, 106, 106, 106, 106, 106, 106, 124, 124,
	124, 107, 107, 107, 107, 107, 107, 107, 107, 102,
	102, 102, 104, 105, 21, 120, 120, 121, 121, 109,
	109, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 116, 116, 112, 112, 667, 667, 668, 668,
	103, 103, 103, 103, 103, 103, 113, 114, 117, 118,
	115, 115, 115, 115, 669, 125, 125, 125, 126, 126,
	111, 111, 153, 153, 155, 155, 157, 157, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	154, 154, 129, 129, 134, 134, 131, 131, 160, 160,
	159, 159, 177, 177, 180, 180, 181, 181, 179, 179,
	179, 179, 179, 179, 179, 179, 146, 146, 147, 147,
	148, 148, 150, 151, 151, 151, 151, 149, 149, 152,
	152, 152, 182, 182, 182, 182, 182, 182, 182, 271,
	271, 270, 270, 273, 273, 273, 273, 274, 274, 275,
	275, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 431, 431, 432, 432, 432, 433, 433,
	433, 287, 287, 287, 287, 287, 287, 288, 288, 288,
	288, 289, 289, 290, 290, 291, 291, 291, 292, 292,
	293, 293, 295, 296, 296, 296, 297, 297, 297, 298,
	298, 298, 299, 299, 277, 277, 219, 219, 219, 240,
	280, 280, 279, 279, 279, 279, 282, 282, 282, 282,
	282, 281, 281, 283, 283, 284, 284, 285, 285, 286,
	286, 300, 300, 309, 309, 305, 305, 306, 307, 307,
	308, 308, 628, 303, 303, 302, 302, 304, 315, 315,
	317, 317, 316, 316, 316, 316, 318, 318, 319, 319,
	310, 310, 311, 311, 312, 312, 312, 313, 313, 314,
	314, 314, 314, 314, 320, 325, 324, 324, 336, 336,
	326, 326, 327, 328, 328, 331, 331, 330, 330, 332,
	332, 332, 333, 333, 333, 334, 334, 329, 329, 335,
	335, 338, 338, 339, 339, 339, 339, 339, 339, 339,
	339, 340, 340, 340, 340, 337, 337, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 342, 342, 342, 342,
	342, 343, 343, 344, 344, 345, 345, 321, 321, 322,
	322, 322, 322, 322, 322, 323, 323, 183, 430, 430,
	209, 209, 209, 209, 209, 231, 231, 210, 210, 214,
	184, 211, 211, 217, 217, 215, 212, 212, 185, 294,
	294, 186, 213, 213, 187, 187, 234, 234, 235, 235,
	241, 241, 241, 250, 250, 251, 251, 253, 253, 254,
	254, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 255, 255, 260, 261,
	261, 261, 261, 261, 261, 256, 256, 262, 267, 267,
	267, 267, 263, 263, 263, 263, 41, 41, 405, 405,
	405, 405, 405, 405, 405, 405, 404, 404, 404, 403,
	403, 403, 403, 403, 266, 266, 585, 585, 265, 265,
	671, 671, 612, 612, 236, 236, 237, 237, 238, 238,
	239, 239, 223, 223, 223, 223, 223, 232, 232, 233,
	233, 224, 224, 226, 227, 228, 228, 228, 228, 228,
	221, 218, 218, 218, 225, 225, 225, 258, 258, 259,
	259, 229, 229, 229, 230, 230, 222, 222, 161, 161,
	161, 162, 162, 162, 220, 220, 188, 188, 188, 188,
	188, 188, 407, 407, 407, 407, 407, 407, 407, 407,
	346, 346, 347, 347, 350, 350, 350, 353, 361, 361,
	361, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 409, 409, 410, 410, 411, 411, 412, 412, 348,
	348, 349, 349, 354, 354, 355, 355, 356, 356, 356,
	356, 357, 360, 360, 413, 413, 414, 414, 415, 10,
	40, 351, 365, 365, 366, 366, 366, 366, 369, 369,
	369, 369, 372, 372, 372, 417, 417, 420, 420, 422,
	422, 422, 422, 418, 418, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 672, 672, 36, 36, 36, 416, 416, 419, 419,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 352,
	352, 368, 368, 368, 368, 368, 368, 368, 370, 370,
	359, 359, 358, 358, 374, 374, 373, 373, 373, 373,
	378, 378, 378, 378, 378, 375, 376, 377, 377, 377,
	377, 377, 379, 379, 380, 380, 381, 382, 382, 383,
	383, 383, 408, 408, 387, 387, 387, 387, 388, 388,
	389, 389, 390, 189, 189, 371, 371, 391, 391, 393,
	393, 392, 392, 395, 395, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 396, 396, 24, 24,
	397, 397, 11, 506, 506, 506, 506, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 399, 399,
	399, 400, 401, 401, 673, 673, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 452, 452,
	452, 617, 617, 617, 620, 620, 620, 620, 619, 619,
	621, 621, 453, 454, 454, 454, 454, 483, 483, 486,
	487, 487, 487, 489, 489, 489, 458, 458, 458, 458,
	458, 458, 458, 455, 455, 459, 459, 484, 484, 485,
	485, 490, 488, 488, 456, 456, 456, 456, 456, 457,
	457, 193, 193, 193, 193, 193, 491, 491, 194, 194,
	194, 492, 492, 493, 493, 494, 494, 195, 196, 196,
	196, 196, 196, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 46, 46, 47, 47,
	441, 96, 96, 96, 96, 440, 82, 82, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 363, 363, 364, 364, 364, 364, 364,
	364, 384, 385, 385, 386, 386, 386, 386, 447, 447,
	447, 447, 624, 624, 625, 625, 626, 626, 626, 627,
	627, 627, 627, 627, 629, 629, 629, 629, 629, 630,
	119, 119, 119, 631, 631, 632, 632, 634, 634, 634,
	634, 634, 639, 639, 633, 633, 640, 640, 640, 451,
	658, 658, 641, 641, 622, 622, 449, 449, 642, 642,
	642, 644, 644, 643, 643, 643, 643, 643, 649, 649,
	650, 650, 652, 647, 647, 648, 648, 655, 645, 645,
	675, 675, 646, 646, 653, 653, 674, 674, 651, 651,
	651, 654, 654, 654, 654, 656, 656, 450, 450, 450,
	450, 257, 257, 657, 657, 657, 657, 522, 522, 522,
	522, 523, 524, 524, 524, 524, 524, 524, 524, 525,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 525, 525, 525, 529, 529, 564, 564, 676,
	676, 530, 530, 531, 531, 565, 565, 567, 567, 567,
	567, 532, 566, 566, 568, 533, 533, 533, 533, 533,
	533, 533, 533, 533, 533, 533, 533, 533, 554, 555,
	555, 571, 571, 571, 571, 570, 570, 569, 569, 576,
	576, 556, 556, 557, 557, 557, 572, 572, 573, 573,
	574, 574, 558, 558, 558, 558, 559, 559, 560, 561,
	561, 575, 575, 607, 607, 607, 607, 608, 608, 615,
	609, 610, 610, 611, 528, 528, 528, 528, 528, 562,
	562, 563, 563, 613, 613, 614, 614, 520, 520, 521,
	435, 435, 436, 434, 434, 434, 437, 437, 438, 438,
	438, 438, 618, 618, 618, 618, 618, 618, 618, 618,
	618, 618, 618, 616, 616, 616, 616, 269, 269, 272,
	272, 264, 264, 659, 659, 659, 659, 659, 659, 659,
	661, 661, 661, 268, 268, 9, 9, 9, 9, 663,
	663, 495, 495, 495, 660, 660, 660, 660, 660, 662,
	662, 662, 662, 496, 496, 406, 406, 406, 406, 406,
	406, 424, 424, 37, 37, 38, 39, 39, 42, 42,
	42, 42, 43, 43, 45, 45, 45, 45, 425, 426,
	426, 427, 427, 534, 534, 535, 580, 580, 580, 580,
	577, 577, 579, 578, 578, 536, 581, 581, 537, 537,
	538, 539, 582, 582, 586, 586, 587, 587, 587, 587,
	587, 588, 588, 589, 589, 590, 590, 591, 591, 540,
	592, 592, 541, 541, 542, 542, 594, 594, 599, 599,
	599, 543, 543, 543, 544, 544, 544, 544, 595, 595,
	600, 600, 600, 600, 600, 600, 600, 278, 278, 545,
	546, 546, 546, 546, 546, 546, 546, 546, 546, 547,
	547, 547, 593, 593, 593, 548, 603, 603, 596, 596,
	601, 601, 601, 601, 601, 583, 583, 664, 664, 664,
	665, 665, 549, 550, 550, 597, 597, 602, 602, 551,
	552, 598, 598, 598, 598, 553, 553, 584, 584, 604,
	604, 605, 605, 606, 606, 52, 52, 52, 51, 51,
	167, 167, 170, 170, 170, 170, 170, 173, 174, 175,
	176, 171, 171, 168, 169, 169, 172, 172, 135, 135,
	136, 136, 138, 140, 140, 140, 139, 141, 141, 137,
	137, 142, 142, 142, 142, 143, 143, 144, 144, 144,
	144, 144, 145, 145, 145, 145, 145, 54, 54, 54,
	54, 53, 53, 55, 55, 55, 55, 55, 55, 56,
	56, 57, 57, 58, 59, 59, 59, 60, 60, 61,
	61, 62, 62, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 461, 461, 677, 677, 677,
	479, 479, 479, 462, 468, 466, 463, 463, 464, 464,
	464, 464, 478, 478, 467, 465, 465, 465, 465, 465,
	465, 497, 497, 498, 498, 480, 480, 480, 480, 480,
	480, 481, 481, 481, 481, 481, 481, 481, 481, 481,
	519, 519, 469, 470, 470, 471, 471, 472, 472, 473,
	499, 499, 482, 482, 482, 511, 511, 511, 504, 504,
	504, 504, 504, 504, 500, 500, 500, 500, 500, 501,
	501, 505, 505, 505, 505, 505, 518, 518, 518, 518,
	518, 518, 518, 518, 518, 518, 518, 518, 518, 518,
	518, 518, 518, 518, 518, 518, 518, 502, 502, 507,
	507, 509, 509, 503, 503, 512, 510, 510, 510, 508,
	508, 49, 49, 44, 44, 50, 50, 132, 133, 133,
	448, 448, 448, 442, 442, 635, 635, 635, 635, 635,
	635, 635, 635, 635, 635, 635, 635, 635, 635, 635,
	635, 635, 637, 637, 636, 636, 636, 638, 638, 638,
	638, 638, 678, 678, 439, 439, 439, 439, 443, 443,
	526, 527, 444, 444, 445, 445, 445, 445, 446, 446,
	446, 446, 197, 242, 242, 242, 242, 242, 242, 243,
	243, 243, 198, 198, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	244, 244, 245, 245, 199, 199, 200, 247, 247, 178,
	178, 178, 178, 178, 201, 201, 201, 248, 248, 249,
	202, 202, 202, 202, 203, 204, 204, 205, 20, 20,
	206, 207, 22, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 208, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 513, 513, 475, 475, 475, 475, 475, 475, 475,
	475, 475, 475, 514, 514, 515, 515, 476, 516, 516,
	517, 517, 477, 25, 25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 2, 3,
	0, 1, 3, 1, 3, 1, 0, 3, 3, 4,
	4, 4, 4, 3, 2, 1, 1, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 5, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 3, 4, 4,
	6, 3, 3, 4, 3, 4, 4, 5, 4, 5,
	1, 1, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 5,
	6, 3, 4, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 6, 2, 3, 5, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 2, 1,
	2, 1, 0, 2, 2, 3, 5, 0, 2, 4,
	3, 1, 5, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 6,
	4, 4, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 6, 4, 4, 4, 4, 5, 7,
	7, 9, 4, 6, 5, 5, 7, 7, 4, 7,
	4, 6, 6, 4, 5, 4, 5, 3, 11, 8,
	9, 8, 1, 0, 5, 5, 3, 3, 5, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 5, 3, 4, 1, 3, 3, 1, 2,
	2, 0, 1, 2, 0, 2, 3, 3, 3, 4,
	0, 1, 1, 1, 1, 2, 3, 4, 5, 6,
	8, 6, 6, 1, 3, 1, 3, 3, 5, 1,
	0, 1, 2, 4, 2, 0, 3, 3, 2, 1,
	3, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 4, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 3, 2, 3, 2, 0,
	1, 3, 2, 3, 5, 6, 2, 3, 3, 4,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 3, 0, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 2, 4, 1, 5, 2,
	5, 2, 5, 2, 1, 3, 3, 0, 1, 0,
	3, 0, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 0, 5, 0, 5, 0, 0, 1,
	1, 3, 1, 1, 3, 3, 1, 1, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 2, 0, 1,
	2, 0, 9, 9, 2, 1, 4, 4, 4, 1,
	0, 1, 3, 3, 2, 1, 1, 2, 0, 1,
	3, 2, 3, 2, 3, 1, 4, 2, 3, 2,
	3, 2, 3, 1, 1, 2, 2, 4, 1, 2,
	3, 3, 4, 5, 4, 5, 4, 2, 2, 2,
	1, 1, 0, 5, 2, 2, 2, 3, 1, 0,
	1, 3, 9, 1, 2, 0, 7, 7, 0, 10,
	6, 0, 4, 5, 2, 0, 2, 4, 0, 1,
	1, 0, 5, 2, 4, 1, 1, 4, 5, 4,
	0, 2, 0, 1, 0, 1, 5, 1, 0, 2,
	0, 2, 6, 2, 0, 1, 3, 2, 4, 0,
	1, 3, 2, 1, 0, 1, 3, 3, 2, 0,
	2, 2, 2, 3, 3, 4, 1, 3, 3, 2,
	7, 12, 1, 3, 2, 3, 3, 1, 2, 2,
	2, 2, 1, 2, 13, 2, 2, 0, 2, 0,
	1, 3, 3, 1, 3, 1, 3, 3, 3, 3,
	3, 0, 3, 3, 0, 3, 0, 7, 7, 3,
	0, 2, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 6, 0, 3, 0, 2, 3, 2,
	3, 4, 4, 3, 3, 0, 5, 2, 5, 2,
	0, 4, 2, 1, 0, 1, 0, 1, 3, 3,
	6, 7, 5, 7, 9, 2, 0, 7, 1, 3,
	1, 4, 4, 7, 2, 1, 1, 1, 3, 2,
	8, 1, 3, 3, 5, 2, 1, 3, 7, 2,
	0, 10, 1, 2, 9, 11, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 3, 0, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 1, 3, 3, 3,
	3, 4, 4, 3, 3, 2, 1, 3, 2, 1,
	1, 1, 1, 3, 0, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 0, 2, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 4, 4, 4, 5, 5, 2, 5, 3,
	5, 2, 0, 3, 1, 2, 5, 5, 8, 3,
	4, 8, 5, 0, 4, 3, 0, 1, 3, 1,
	3, 2, 2, 4, 4, 5, 2, 0, 1, 1,
	0, 2, 2, 0, 2, 0, 13, 16, 12, 15,
	14, 17, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 3, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 0, 2, 2, 1, 0, 3,
	0, 1, 3, 1, 1, 2, 4, 6, 6, 10,
	1, 2, 1, 3, 4, 0, 1, 3, 2, 1,
	1, 6, 2, 0, 3, 1, 1, 2, 1, 2,
	2, 2, 2, 3, 0, 1, 2, 1, 2, 1,
	3, 2, 3, 1, 2, 2, 2, 1, 2, 3,
	1, 2, 2, 2, 2, 3, 3, 3, 1, 3,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 0,
	2, 1, 4, 4, 5, 2, 5, 5, 7, 3,
	1, 5, 9, 3, 9, 4, 11, 10, 2, 0,
	1, 3, 3, 6, 4, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	3, 3, 4, 0, 1, 0, 6, 1, 3, 3,
	3, 5, 2, 0, 3, 4, 4, 0, 2, 0,
	4, 0, 3, 16, 19, 1, 0, 2, 0, 4,
	0, 1, 3, 2, 0, 4, 6, 4, 6, 4,
	4, 6, 4, 6, 5, 7, 5, 7, 4, 6,
	10, 13, 10, 13, 11, 14, 1, 3, 1, 0,
	1, 3, 1, 1, 1, 1, 1, 2, 5, 3,
	6, 4, 6, 6, 9, 5, 7, 6, 6, 5,
	5, 5, 5, 9, 4, 5, 7, 6, 4, 8,
	4, 2, 4, 3, 6, 4, 3, 3, 3, 2,
	2, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	4, 4, 3, 2, 3, 2, 2, 3, 4, 3,
	2, 2, 3, 4, 4, 4, 5, 1, 4, 4,
	4, 3, 3, 2, 1, 0, 6, 4, 6, 4,
	6, 8, 4, 6, 4, 6, 5, 7, 2, 3,
	3, 2, 5, 1, 1, 2, 3, 2, 1, 1,
	2, 1, 2, 2, 4, 3, 5, 1, 3, 2,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 6, 5, 3, 5, 1, 0, 1,
	3, 2, 1, 1, 2, 3, 4, 3, 2, 4,
	4, 6, 4, 4, 2, 5, 2, 0, 5, 5,
	5, 1, 1, 1, 1, 3, 0, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 3, 3, 3, 3, 3, 2, 1, 3,
	2, 3, 5, 5, 5, 2, 1, 3, 6, 6,
	6, 6, 6, 8, 8, 6, 6, 7, 9, 9,
	8, 10, 6, 6, 6, 6, 6, 6, 6, 8,
	6, 8, 6, 8, 7, 9, 6, 8, 7, 9,
	8, 10, 8, 10, 9, 11, 8, 10, 9, 11,
	8, 8, 7, 6, 6, 6, 6, 8, 8, 8,
	8, 6, 9, 0, 2, 2, 1, 2, 2, 2,
	2, 3, 1, 3, 3, 1, 5, 3, 9, 12,
	7, 7, 3, 2, 1, 3, 1, 3, 3, 3,
	3, 2, 2, 1, 1, 1, 1, 2, 1, 1,
	1, 4, 5, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 1, 3, 3, 5, 1, 4, 0, 2,
	3, 0, 1, 1, 2, 1, 17, 21, 1, 1,
	2, 1, 3, 1, 1, 1, 3, 1, 2, 0,
	1, 2, 4, 1, 1, 1, 1, 1, 3, 0,
	1, 0, 1, 1, 4, 0, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 2, 0, 9, 11, 12,
	14, 3, 0, 3, 4, 4, 0, 6, 4, 9,
	7, 6, 4, 6, 6, 5, 7, 9, 6, 6,
	5, 4, 4, 3, 6, 6, 6, 6, 4, 7,
	5, 8, 7, 8, 6, 5, 8, 1, 0, 1,
	0, 4, 6, 5, 8, 2, 0, 2, 2, 2,
	1, 5, 2, 0, 2, 6, 6, 6, 10, 6,
	6, 6, 9, 9, 6, 6, 9, 6, 7, 7,
	6, 2, 2, 2, 2, 1, 2, 1, 0, 1,
	2, 10, 13, 5, 4, 4, 2, 0, 2, 2,
	1, 0, 11, 14, 12, 15, 8, 11, 8, 7,
	9, 1, 1, 3, 3, 5, 6, 1, 3, 1,
	3, 1, 3, 3, 7, 9, 9, 8, 6, 1,
	0, 1, 3, 3, 1, 5, 3, 8, 11, 6,
	1, 0, 5, 2, 3, 0, 2, 0, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 1,
	3, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 2, 0, 2, 0, 4, 1, 3, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 3, 3, 1,
	3, 1, 3, 11, 13, 5, 1, 2, 2, 1,
	1, 3, 5, 1, 3, 7, 2, 0, 5, 5,
	10, 8, 2, 0, 2, 0, 1, 1, 1, 1,
	1, 2, 0, 2, 0, 4, 0, 5, 0, 8,
	1, 1, 8, 11, 6, 8, 1, 3, 1, 1,
	3, 4, 7, 6, 5, 5, 5, 5, 1, 3,
	4, 4, 4, 3, 4, 3, 1, 4, 0, 8,
	5, 5, 6, 7, 7, 7, 4, 4, 5, 11,
	10, 10, 2, 2, 0, 13, 2, 0, 1, 3,
	5, 5, 3, 6, 2, 1, 0, 2, 4, 0,
	1, 3, 6, 8, 8, 1, 3, 5, 5, 10,
	10, 11, 11, 5, 5, 6, 10, 1, 0, 2,
	0, 1, 0, 2, 2, 1, 1, 0, 4, 0,
	1, 3, 1, 1, 1, 1, 1, 2, 4, 4,
	5, 2, 0, 3, 1, 3, 4, 3, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 2, 2, 1,
	1, 1, 0, 2, 4, 5, 6, 4, 5, 2,
	3, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 2, 3, 2,
	5, 4, 3, 3, 3, 3, 3, 1, 1, 0,
	2, 3, 0, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 0, 3, 6, 3, 5, 3, 5, 3,
	5, 2, 0, 2, 0, 1, 2, 2, 2, 3,
	3, 2, 2, 3, 3, 1, 1, 3, 3, 2,
	1, 1, 8, 8, 11, 5, 7, 6, 9, 5,
	2, 0, 3, 3, 3, 7, 7, 10, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 4, 5, 1,
	3, 2, 2, 2, 2, 2, 1, 2, 2, 4,
	3, 2, 2, 2, 2, 2, 2, 3, 2, 2,
	2, 2, 5, 5, 5, 5, 5, 1, 3, 1,
	2, 3, 0, 3, 1, 2, 1, 1, 1, 3,
	0, 1, 3, 1, 3, 1, 3, 6, 4, 0,
	5, 5, 5, 1, 2, 4, 5, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 2, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 2, 1, 3,
	7, 4, 1, 3, 4, 6, 4, 8, 1, 1,
	1, 1, 7, 2, 2, 2, 2, 3, 0, 2,
	2, 0, 2, 2, 1, 2, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 4, 4, 3, 4, 4,
	1, 1, 1, 0, 2, 2, 5, 3, 0, 1,
	1, 1, 1, 1, 3, 9, 12, 3, 0, 6,
	2, 3, 2, 3, 2, 2, 2, 3, 2, 0,
	2, 5, 3, 0, 2, 2, 2, 3, 1, 3,
	1, 2, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 9, 8, 6, 6, 9, 9, 9, 7,
	10, 1, 1, 8, 8, 8, 8, 8, 8, 8,
	9, 8, 8, 2, 0, 1, 1, 2, 1, 2,
	1, 2, 2, 2, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -461, -177, -183, -184, -185,
	-186, -187, -188, -189, -190, -191, -192, -447, -448, -449,
	-450, -520, -521, -522, -523, -524, -525, -526, -527, -528,
	-529, -530, -531, -532, -533, -554, -555, -556, -557, -558,
	-559, -560, -561, -534, -535, -536, -537, -538, -539, -540,
	-541, -542, -543, -544, -545, -546, -547, -548, -549, -550,
	-551, -552, -553, -452, -453, -460, -462, -463, -464, -465,
	-466, -467, -468, -469, -470, -471, -472, -473, -454, -455,
	-459, -456, -457, -193, -194, -195, -196, -197, -198, -199,
	-200, -201, -202, -203, -204, -205, -206, -207, -208, -474,
	-475, -476, -477, 266, 212, -179, -180, -292, 111, 26,
	22, 27, 394, 93, 401, 191, 436, 228, 407, 413,
	397, 378, 290, 405, 274, 475, -488, 428, 223, 395,
	220, 259, 250, 280, 345, 222, 273, 249, 328, 472,
	358, 329, 333, 462, 226, 418, 109, 214, -182, -181,
	-291, 531, 119, 202, 63, 67, -299, 36, 518, 86,
	540, -677, 486, 457, -677, 96, 97, 98, 99, 531,
	-250, 115, -407, -371, -34, 33, 414, 261, 62, 464,
	454, 225, 276, 284, 422, 103, -435, 268, 449, 375,
	194, 438, 387, 443, 512, -583, 406, 71, 453, 451,
	58, 289, 473, 471, 40, 67, 307, 419, 480, 85,
	284, 104, 199, 225, 236, 247, 261, 286, 71, -585,
	62, 375, 385, 387, 409, 414, 422, 443, 412, 460,
	268, 406, 103, 449, 438, 454, 464, 276, 40, 384,
	-402, -405, -404, 464, 261, 307, 103, 406, 71, 67,
	419, 480, 85, 284, 225, 236, 438, 454, 194, 268,
	276, -585, 387, 414, 422, 375, 412, 460, 85, -617,
	58, 423, 457, -618, -616, -269, 56, 217, 414, 347,
	406, 488, -5, 4, -26, -27, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 22, 201, 203, 204,
	205, 55, 206, 207, 208, 210, 211, 212, 88, 70,
	213, 214, 215, 24, 216, 218, 219, 220, 221, 222,
	223, 123, 226, 227, 228, 229, 230, 141, 231, 101,
	232, 233, 234, 235, 236, 111, 237, 154, 238, 120,
	121, 90, 246, 247, 248, 249, 250, 251, 253, 254,
	98, 149, 150, 255, 89, 256, 257, 258, 259, 260,
	261, 176, 27, 262, 138, 264, 148, 265, 267, 136,
	42, 268, 270, 271, 272, 273, 274, 275, 276, 277,
	279, 281, 282, 91, 283, 153, 165, 285, 286, 287,
	288, 289, 291, 294, 295, 151, 296, 297, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 312, 313, 314, 96, 315, 317, 318, 145,
	503, 319, 320, 321, 322, 92, 324, 327, 328, 329,
	332, 333, 334, 335, 336, 337, 105, 85, 338, 99,
	340, 341, 342, 343, 344, 345, 346, 131, 348, 349,
	350, 351, 352, 353, 354, 357, 110, 358, 359, 32,
	139, 122, 504, 505, 502, 144, 62, 506, 507, 124,
	501, 508, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 373, 374, 375, 377, 378, 379, 380,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 390, 391, 84, 132, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	407, 408, 409, 410, 127, 412, 413, 146, 415, 416,
	87, 417, 418, 419, 420, 421, 422, 93, 425, 427,
	428, 429, 430, 431, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 445,
	446, 104, 448, 449, 108, 451, 452, 453, 454, 455,
	458, 460, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 50, 472, 473, 474, 97, 475, 476, 477, 478,
	155, 183, 479, 480, 481, 482, 483, 485, 168, 486,
	140, 487, 498, 499, 57, 37, 173, 169, 189, 179,
	178, 224, 188, 187, 29, 278, 175, 292, 293, 500,
	186, 171, 185, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 325, 339, 181, 182, 355, 356,
	360, 170, 361, 362, 376, 177, 174, 411, 426, 172,
	444, 184, 459, 461, 86, 180, 489, 490, 491, 492,
	493, 133, 494, 495, 496, 497, 125, -620, -619, 56,
	457, 423, -269, 21, 217, 58, 347, 406, 414, 488,
	-677, 457, -677, 379, -677, 379, -5, 423, 457, 56,
	413, -5, 457, -7, -5, -500, -501, 21, -505, 63,
	392, 26, 22, -5, -500, 290, -501, -5, -458, -488,
	118, 531, -177, -183, -184, -185, -186, -520, -521, 26,
	-239, 531, 79, -237, 531, 118, -269, 56, 457, 423,
	21, 531, -237, -494, 531, 21, 451, 453, 374, 420,
	-240, -7, -246, -240, -244, 349, 382, 91, 92, 193,
	396, -100, 21, 285, 210, 64, 45, -99, 534, 535,
	12, -246, -240, 21, -7, -7, 378, 21, -5, -5,
	536, -5, -21, -101, 7, -670, 67, -670, 74, 320,
	-516, -517, -101, 321, -130, -623, -102, -5, 4, -26,
	-28, 209, 115, 225, 25, 81, 242, 116, 79, 44,
	76, 52, 53, 75, 77, 46, 82, 54, 80, 363,
	78, 48, 450, 118, -168, -129, 470, 316, 269, 509,
	-181, -182, -180, -179, -180, -291, -283, -284, 21, 41,
	-431, -429, -432, -5, 66, 541, -293, 84, -295, -7,
	-293, 531, -3, -479, 30, -496, -495, -660, 318, 389,
	252, 31, 73, -433, -431, 64, 73, -178, -177, -183,
	-184, -185, -186, -429, 67, 480, 84, 419, 307, 286,
	385, 460, 117, 199, 458, -584, 463, 34, -19, -5,
	28, -15, -5, -154, 221, 279, -157, -5, 11, -158,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -15, 87, -15, 28, -7, 28, 246, 67,
	-7, 28, 336, -11, -506, -9, 241, 245, 424, 4,
	-26, -27, -28, 85, 460, -7, -7, 340, -394, 28,
	-15, -7, -7, 531, 236, -11, -11, 453, 451, 453,
	451, -431, 28, 21, -429, 28, 21, -429, 28, -429,
	28, 480, 67, 246, 93, 401, -440, -623, -15, -15,
	-7, -15, -439, -623, -28, -5, -11, -506, 321, 221,
	279, -7, 28, -439, -7, -439, -7, -7, -7, -7,
	-7, 460, -11, -506, 21, -11, 336, -506, 21, -7,
	-15, 28, 87, -15, -7, 383, 28, -17, -15, 28,
	-13, -7, -7, 28, -266, 28, -106, -107, 426, -109,
	-110, -116, -112, -115, -108, -669, -102, 186, 171, 172,
	173, 174, 175, 176, 187, 188, 170, 189, -117, -118,
	-113, -114, 184, 56, 185, 166, 4, -26, 169, -103,
	178, 179, 180, 181, 182, -266, 28, 25, 336, -397,
	28, -506, -397, 28, -397, 28, 480, 246, 67, 87,
	340, 460, 321, 480, -617, 423, -617, 219, 209, -495,
	431, 64, 61, 527, 533, 57, -101, -101, -661, -101,
	40, -268, -9, -101, 506, 57, 318, 209, -479, -496,
	-479, -101, -479, 61, -101, -5, -101, -247, 531, 74,
	61, 541, 383, 531, -257, 531, -257, -257, 104, -257,
	74, 506, 64, 506, -237, -458, -483, -486, -487, 86,
	-9, -488, 515, 473, -236, 116, -483, -484, -485, -490,
	-429, -483, 57, 318, 209, -483, -429, -7, -5, -492,
	414, -493, 307, 67, 104, 247, -483, -242, -240, -245,
	-244, -245, -245, -245, -100, -100, -245, -245, -245, -100,
	21, -245, -100, 21, -99, -99, -248, 531, -7, 21,
	-20, 541, -18, -431, -18, -402, 514, -403, 464, 261,
	199, 286, 62, 117, -404, 385, 409, 458, 322, 512,
	307, -405, 247, 406, 443, 449, -514, 130, -517, -268,
	531, -94, -97, 533, 529, -146, -54, -148, 130, -55,
	-56, -150, 68, 280, 69, -151, -52, 21, 41, -52,
	-52, 70, -168, -129, 532, 532, -271, -270, -273, -63,
	536, -65, 534, 535, -153, 31, 516, -128, 471, 40,
	-67, -66, 13, 531, -70, -68, -180, 29, 134, -76,
	-77, 293, 11, 62, 411, -5, -99, 6, -101, 49,
	43, 47, 9, 10, -623, -666, -108, 38, -130, -329,
	-69, -110, -667, -668, -115, -669, 185, 161, 162, 225,
	240, 243, 244, 330, 331, 241, 245, 424, 447, 103,
	239, 242, 512, 278, 356, 362, 376, 444, 459, 461,
	360, 224, 292, 325, 490, 491, 493, 494, 492, 495,
	496, 159, 160, 166, 164, 158, 339, 156, 163, 157,
	497, 173, 169, 189, 179, 178, 188, 187, 175, 186,
	171, 181, 182, 170, 174, 172, 56, 184, 180, -117,
	-118, -113, -114, -270, 74, 536, -94, -429, 531, 531,
	541, -293, -31, 531, -127, -63, 218, 354, 541, -660,
	327, 66, 487, 252, -430, -429, 93, -5, 23, -433,
	-433, 532, -257, -429, 28, -249, -429, 480, -429, 28,
	-35, 25, -623, -623, -7, 460, -623, 130, -585, -407,
	473, 209, -437, 31, -612, 23, -120, 533, -425, 531,
	-15, -15, 533, -425, 23, 368, 257, 452, 231, -425,
	64, 31, -36, 36, 518, 31, 140, -429, 28, -572,
	464, 31, 130, 28, -36, 480, -7, -581, 365, 74,
	-7, -31, 31, -424, 130, 36, 232, -106, -15, -36,
	-36, -396, -399, 398, -398, 207, 256, 196, 22, 27,
	477, 93, 223, 264, 258, 309, 354, 122, 31, 365,
	401, 400, 153, -38, 507, 29, 45, -396, -400, 398,
	207, 29, 45, -396, 398, -418, -421, 354, 23, 213,
	90, 305, 335, 338, 342, 364, 419, 436, 402, 473,
	29, -396, 398, 29, -429, 28, 21, -431, 28, 140,
	-616, -269, -619, 398, -46, 531, 398, 398, 398, 398,
	-401, 27, 93, 196, 477, 398, -442, -635, 215, 404,
	441, 300, 434, 482, 277, 418, 324, 31, 237, 127,
	445, -622, 366, 93, -453, -46, -94, 398, -519, 196,
	27, -7, -15, -15, 74, 29, 398, -442, 398, 93,
	196, 27, 398, -442, 398, 398, -573, -38, 479, 398,
	93, 232, 394, 196, 27, 264, 258, 430, 74, 74,
	-7, 398, -36, -478, 45, -478, 398, 130, -36, -478,
	-478, 398, 93, 401, 398, 93, 29, 368, 257, 452,
	231, 398, 196, 27, 93, -444, -445, 22, 97, -519,
	-499, 29, 541, -428, 24, 35, 29, 541, -428, 74,
	29, 541, -428, 29, -124, 134, -107, -122, 531, 498,
	344, 248, 297, 341, -123, 417, -121, -120, 531, -111,
	531, 177, -121, -121, -121, 531, -125, 518, 519, 531,
	-125, -126, 183, 531, -126, -126, 178, 179, -126, -428,
	29, -17, 28, 130, 28, 541, 29, 29, 29, 140,
	368, 257, 452, 231, -35, 219, 23, -268, 40, -101,
	120, -272, 40, -264, -267, -263, 49, 43, 74, -268,
	6, 534, 535, -100, -272, 40, -5, -659, -101, 4,
	-108, -263, 40, 58, -663, 260, 234, 327, 413, -5,
	23, -665, -106, -518, -16, 67, 419, 284, 286, 385,
	409, 247, 261, 321, 322, 367, 414, 449, 464, 21,
	-429, -397, -505, 531, -14, -5, -14, -518, 130, -397,
	130, -458, 532, 541, -489, -267, -263, -237, 532, 541,
	-31, 532, 327, 532, -491, 83, 74, -35, -35, -35,
	532, 121, 115, 314, 203, 416, 354, -240, -240, -240,
	-240, -245, -245, -240, -240, -240, -245, -245, -240, -245,
	-245, -127, -101, 541, -22, 45, -25, 235, 402, -15,
	-15, -7, -106, -106, -440, -439, -441, 221, 279, -154,
	-7, -7, -439, -439, 130, 139, 531, 74, -268, 532,
	536, -80, 190, 21, 41, -93, -63, -105, -102, -97,
	-104, 536, -6, 4, -26, -27, -28, -29, 21, 202,
	119, 30, 510, 134, 23, 94, 60, 511, 38, 512,
	513, 39, 514, 117, 26, 239, 240, 241, 243, 244,
	245, 40, 252, 95, 41, 109, 263, 266, 269, 43,
	280, 130, 284, 64, 290, 71, 72, 45, 311, 316,
	73, 323, 326, 68, 330, 331, 31, 47, 69, 74,
	66, 33, 509, 372, 381, 392, 100, 63, 424, 432,
	59, 447, 67, 106, 61, 456, 49, 470, 471, 103,
	83, 190, 51, 65, 484, 36, -63, -98, -53, -54,
	-147, -146, -150, 130, 389, 97, 354, 427, 503, -56,
	-55, -57, -63, 21, -62, 91, 349, -58, -59, -63,
	-65, 534, 535, -149, 122, -181, -181, -181, -169, -172,
	-63, -146, -54, -286, 73, 541, 14, 39, 55, 534,
	535, 536, 537, 538, 539, 525, 526, 527, 18, 19,
	20, -153, 30, 33, 46, 516, 44, 48, 52, 53,
	54, 37, 45, -156, 23, -8, 11, 62, -157, 4,
	-30, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	21, 200, 22, 201, 202, 119, 510, 94, 203, 204,
	205, 60, 206, 207, 208, 209, 210, 211, 212, 173,
	115, 169, 189, 511, 88, 70, 213, 214, 215, 24,
	216, 38, 512, 217, 218, 219, 513, 220, 221, 222,
	223, 224, 225, 514, 123, 226, 227, 228, 229, 230,
	25, 141, 231, 101, 232, 117, 233, 234, 235, 236,
	111, 237, 81, 154, 238, 120, 239, 240, 241, 242,
	243, 244, 245, 121, 90, 246, 247, 249, 188, 187,
	250, 40, 251, 252, 253, 254, 98, 149, 150, 255,
	89, 95, 256, 257, 258, 259, 41, 109, 260, 261,
	176, 27, 262, 263, 138, 264, 148, 265, 266, 267,
	136, 42, 268, 270, 271, 272, 273, 29, 274, 275,
	276, 277, 278, 43, 279, 282, 91, 175, 283, 153,
	284, 165, 285, 116, 79, 286, 287, 288, 289, 291,
	292, 293, 294, 295, 151, 296, 298, 28, 299, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 76, 500, 313, 314, 96, 315, 186, 171,
	185, 317, 318, 75, 166, 160, 162, 163, 159, 161,
	156, 164, 158, 126, 157, 145, 503, 319, 320, 321,
	322, 92, 323, 326, 324, 325, 77, 327, 328, 329,
	58, 330, 331, 332, 333, 334, 335, 336, 337, 105,
	85, 338, 99, 339, 340, 342, 343, 345, 346, 347,
	181, 82, 182, 131, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 31, 110, 358, 359, 47, 360,
	32, 170, 139, 122, 504, 505, 502, 144, 66, 506,
	507, 124, 501, 361, 80, 362, 102, 364, 365, 366,
	367, 368, 369, 370, 129, 371, 128, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 112, 387, 152, 143, 388, 389, 174, 390,
	391, 84, 132, 392, 393, 394, 395, 396, 397, 398,
	399, 34, 400, 401, 402, 35, 403, 404, 405, 78,
	406, 407, 408, 409, 410, 411, 127, 412, 413, 146,
	414, 415, 416, 87, 418, 63, 419, 420, 421, 422,
	423, 424, 93, 426, 425, 427, 428, 429, 430, 172,
	431, 432, 107, 433, 434, 435, 436, 437, 438, 113,
	114, 439, 440, 441, 147, 442, 443, 444, 445, 59,
	446, 104, 447, 67, 448, 450, 449, 108, 451, 452,
	453, 454, 106, 455, 56, 184, 456, 457, 458, 459,
	460, 461, 49, 462, 463, 464, 465, 466, 467, 468,
	142, 469, 471, 50, 472, 473, 474, 97, 103, 83,
	475, 476, 477, 478, 155, 86, 180, 190, 118, 479,
	480, 481, 482, 51, 483, 486, 140, 487, 488, 489,
	490, 491, 492, 493, 133, 494, 495, 496, 497, 125,
	499, 57, -63, -63, -63, -63, -63, 363, -372, 32,
	-95, -63, -127, -180, -94, -180, -180, -75, 529, 531,
	531, 531, -94, -101, 531, -101, -101, 531, -71, -63,
	-134, 485, -131, 281, 531, 531, 130, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	-286, 531, -429, -127, -295, 23, -13, 541, 532, 39,
	55, 30, 33, 46, 44, 48, 52, 37, 45, 62,
	218, -660, -662, 389, 399, 421, -209, -177, 102, 531,
	40, 23, -211, -217, -215, 531, -5, -5, -294, 83,
	83, 61, -234, 64, 61, 531, 122, 370, -257, 31,
	23, -257, -429, -564, -418, 354, 31, -19, 28, -5,
	-624, 531, -624, -642, 211, 198, 315, -7, -607, -609,
	531, -106, 321, 480, 84, -506, -438, -188, -189, -449,
	-450, 26, 29, -106, 533, -104, -426, -427, -6, -583,
	83, -154, 531, 267, 388, -15, -15, -15, -15, -15,
	29, -565, 29, -7, 531, 370, 31, -574, -573, -101,
	29, -575, -506, 103, 31, -497, -436, 28, -429, 74,
	332, -506, -429, 464, 74, 29, 21, -595, -600, 67,
	448, -5, -432, 242, -429, -425, -101, 23, 130, -497,
	-497, 541, 61, -673, 117, 514, 370, 370, -351, 28,
	514, -352, -5, 117, -368, 513, 471, 381, 284, 270,
	-673, 117, -673, 117, 117, 168, 335, 473, 194, 449,
	-384, 531, 74, 460, 201, 400, 412, 411, 460, 412,
	411, -429, 309, 153, -15, 122, 61, -384, 298, 411,
	531, -431, 449, 61, 370, -429, 449, 61, -421, 90,
	338, 342, -107, -263, -672, 70, -263, -263, 70, 346,
	-36, -36, -429, 61, -673, -429, -396, 398, 29, 45,
	-396, 398, 29, -7, 61, -47, 532, -627, -629, -105,
	-119, 45, 361, 500, 190, -102, -106, 426, 61, 61,
	61, 61, 117, 40, 31, 117, 40, 31, -613, 117,
	-614, 513, 31, 117, 61, -678, -635, 35, 74, 47,
	418, 254, 317, 324, -263, -263, -15, -5, -618, 423,
	457, 61, 103, 398, 83, 83, -429, -7, 61, -678,
	61, -425, -595, -595, -595, 61, -678, 61, 61, -38,
	-101, 47, 61, -425, 387, -101, 387, 387, 387, -425,
	-429, -429, 398, -580, 264, 258, 61, -498, -621, 93,
	-453, 247, -621, 61, -575, -498, -621, -621, 61, -384,
	-384, 61, 438, -15, -15, -15, -15, -15, 61, 208,
	155, 155, 208, 155, 208, 531, 541, 208, -566, -403,
	-402, 199, 512, 261, 286, 62, 385, 409, 458, 464,
	-511, -482, 290, 405, 45, 130, -17, -15, -13, -7,
	-15, -7, -106, -266, 529, 529, -124, 134, -99, 61,
	61, 61, 61, 531, -121, -127, -99, -99, 56, 56,
	-99, 531, -99, -126, -126, -266, -428, 29, -575, 29,
	-506, -397, -397, -397, -429, 457, 541, 6, 6, -101,
	531, -5, -178, 541, 532, 61, 541, -16, -16, 246,
	422, -443, -439, -443, -443, -13, -17, -13, 139, -49,
	-44, -5, -13, -13, -17, 448, 420, 287, 386, 410,
	-508, 36, 291, -14, 541, 532, 532, 64, -500, -501,
	-508, -501, -458, -486, -238, 119, -484, -490, -484, -429,
	-7, -429, -429, -7, -19, -243, 36, 168, 416, -240,
	-240, -240, -240, -240, -240, 532, -431, -24, 359, -23,
	194, 411, 427, 272, -428, 298, 298, 52, 52, 52,
	52, 52, 52, 52, 52, -15, -15, -96, 531, 74,
	74, 52, 52, -106, -263, -106, -402, 514, -403, 464,
	261, 199, 286, 322, 385, 409, 532, -129, 541, -168,
	-93, -80, -80, 16, 17, 530, 542, 66, 503, 427,
	541, -59, -61, -65, 534, 535, 411, 127, 531, -61,
	411, 127, -60, -99, 6, -60, -152, 359, 430, -16,
	541, 83, -161, 94, 95, -53, -147, -274, 64, -423,
	453, 451, 58, 289, 473, 67, -429, -273, -106, -15,
	56, 58, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, 46, 44,
	48, 37, 45, -63, 61, 47, 31, 49, 43, 50,
	41, 260, 357, -165, -164, 350, 351, 352, 353, 166,
	-160, 59, 60, -159, -180, 531, -163, 510, 432, 21,
	-6, 531, -128, 411, 531, -180, 41, 31, -97, 532,
	541, -127, -78, 530, -75, -127, -154, -127, 532, -80,
	-122, -99, -74, -73, 51, -131, 71, -140, 508, 531,
	-330, -65, -63, -325, -63, 531, -99, -99, -99, -99,
	-63, -85, -12, 4, 498, 344, 248, 297, 341, 417,
	-101, -63, -86, -81, -63, -80, -87, -64, -65, 534,
	535, -153, 411, -83, -81, -63, -63, 511, 326, 456,
	-84, -63, 64, -127, -63, -127, -127, -127, -127, 346,
	-88, -216, -63, -663, -65, 346, -63, -80, -331, -335,
	-330, 100, -63, -328, -179, -335, -325, -180, -325, -63,
	-325, 532, -325, -325, -325, -663, -274, -127, 532, 532,
	-296, 85, 31, 532, -63, 468, 229, 389, -218, 74,
	-231, 103, 104, -210, -214, -5, 86, -5, -274, 541,
	527, -212, -215, -95, -219, 65, -275, -276, -431, -180,
	323, -287, 531, -300, -310, -320, -301, 127, 125, 126,
	-5, -130, -69, -329, 166, -276, -235, 112, -235, -346,
	-347, -5, -350, -351, -353, -352, 46, -15, 122, -408,
	83, 29, 273, -395, 36, 531, 29, 74, 31, 404,
	-631, -632, -634, 23, 321, 458, 484, -635, -625, 532,
	-626, -627, -631, -644, -643, 96, 98, 97, 462, 122,
	198, -425, 536, -608, 509, -610, -615, -611, -627, 4,
	321, -7, -429, 480, -437, -407, -34, -19, -5, -365,
	-104, 532, 541, 527, 130, -7, -303, -302, -304, -5,
	531, -425, -425, -425, -425, -425, -15, -567, 414, 479,
	64, 24, -7, -569, -570, -571, 295, 354, 478, -346,
	122, 29, 284, -7, 422, 29, -480, -481, 446, 197,
	406, 45, 371, 265, 469, 309, 4, 232, 476, 103,
	23, 31, -257, -6, 7, -582, 23, -592, 307, 67,
	-594, -599, -5, -301, 531, -15, 448, -424, 541, -431,
	45, -94, -257, -257, 387, -106, -101, -398, -7, -7,
	-7, -429, -429, 31, -351, 28, -106, -7, 531, -372,
	-390, 83, 503, 503, -391, 83, -5, -99, -7, 28,
	-5, 28, -7, -7, 505, 223, 340, -7, -385, -386,
	-6, -7, -7, 21, 103, 460, 412, 460, 412, -7,
	327, -7, 21, 103, -7, 327, -429, 411, -506, -45,
	110, 79, 40, 83, 327, -39, -42, -415, 93, 196,
	27, -10, -6, -396, -399, 398, -7, -7, -429, -396,
	398, -7, -7, -263, -15, -15, -263, -263, -396, 398,
	-418, -7, -7, -396, 398, 61, -673, -429, 449, 61,
	-673, -431, 398, -569, -570, -7, 532, 541, -105, -119,
	-629, -119, -102, 361, -120, -102, -7, -7, -7, -7,
	-7, 47, -7, 28, -63, 47, -7, 531, 47, -7,
	-7, 47, 74, 254, 317, -11, -397, 61, -7, -7,
	398, -589, 61, 74, -7, -7, -7, -7, -7, -7,
	-13, -424, -13, -13, 398, 398, 61, 400, 201, -11,
	-481, -617, -7, -11, 422, -7, -7, -41, -100, 40,
	93, 398, 398, 398, 398, -7, -7, -101, -33, 28,
	-304, -101, 28, -5, -637, -636, -6, -445, 196, 27,
	-5, -568, 61, -7, -15, -440, 531, -106, -439, -441,
	221, 279, -439, -439, 130, -106, -500, -500, 290, 414,
	406, 103, -428, -428, -428, 74, -428, 530, -99, -99,
	529, 532, 344, 297, 341, -123, 341, -123, -123, -99,
	532, 532, 532, 57, 57, 532, -127, 532, -428, -17,
	422, 130, -434, 36, -495, -264, -122, -99, -106, -502,
	-507, -506, 71, -429, 140, -13, 541, -50, -263, 541,
	533, 45, 45, 45, 45, 45, -503, -512, -6, 70,
	532, -5, -502, 74, -428, 64, -484, -491, 130, 296,
	296, 343, 427, 272, 427, 272, 97, 411, -513, -101,
	47, -513, -513, -513, -513, -513, -513, -513, 83, 83,
	-106, 355, -15, 261, -15, -513, -513, 321, 52, 23,
	-15, -15, -7, -106, -106, -440, -439, 139, -439, -439,
	532, 190, -93, -129, -129, 541, -129, -63, -63, -98,
	-63, 97, -58, -61, 66, 36, -99, 6, 531, -127,
	334, -172, -155, -157, 62, -162, 517, -277, 65, -275,
	-670, -670, 453, 451, 453, 451, -670, -429, 57, 42,
	-63, -63, 61, -160, 59, -159, 42, -63, 47, 49,
	43, 50, 41, 260, 357, -165, -164, 64, 357, -166,
	36, 168, 155, 134, 139, 146, -64, -64, -127, -180,
	531, -154, 531, -127, 41, -95, -63, 530, 530, 541,
	532, 532, 532, -129, 532, -72, -73, 263, -63, -140,
	531, -139, -5, 531, 65, -332, 47, 192, 155, 542,
	-334, 509, -344, -343, 515, -63, 532, 532, 532, 532,
	23, 532, 64, 532, 541, 532, 532, 372, 532, 14,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -153, 52, 45, 62, -64, -64, -64, 532,
	532, 48, 64, 130, 23, -84, -84, -84, 532, 64,
	-127, 541, 532, 532, 532, 532, -6, 532, 541, 23,
	-63, -316, 129, -6, 541, 532, -332, 541, 532, -106,
	-333, 541, 47, 192, -344, 532, -166, 532, -335, 541,
	541, 541, -63, -277, 532, 531, 85, -220, 100, 101,
	155, 532, 541, -95, -219, -217, -63, 532, 541, -220,
	-63, 120, 541, 81, -288, 75, 82, 79, 77, 78,
	76, -280, -279, 23, -5, -280, -180, -300, -310, -320,
	-180, -287, -276, -282, -279, 23, -5, -280, -280, -309,
	518, 64, 531, 531, -94, 74, -241, -101, 113, 114,
	-241, 532, 541, -429, -348, 531, -429, -48, 36, 168,
	-7, -429, -249, -7, 23, -384, -14, -429, -431, 29,
	-630, 67, -119, -640, -451, 212, 403, -634, -639, -101,
	-268, -633, 130, 532, 541, 40, 527, -640, 74, 33,
	122, -644, 532, 532, 509, 541, 70, 532, 541, 527,
	-7, 295, -257, -429, 67, 209, -437, -366, 117, -367,
	-369, 39, 31, 47, 471, 381, 513, 40, 392, 288,
	252, 311, -427, -406, -119, -29, -155, -263, -101, 355,
	62, 534, 535, 464, 532, 541, -106, -562, -563, -101,
	-425, 64, -7, -268, -268, -36, -413, 507, -571, -576,
	-7, 295, 478, -576, 532, -429, -429, 246, -572, -7,
	130, -99, -397, -397, 406, 71, -101, 47, 371, 371,
	68, 474, -397, -177, 29, -408, 273, 51, -395, -586,
	130, 4, 295, 64, 541, -63, -31, -424, -600, -257,
	414, -257, -278, 65, -278, -13, 532, 61, 61, 61,
	-356, 130, 40, -35, 282, 29, 31, -412, -411, 439,
	-368, 270, -63, 531, -363, 307, 531, -390, 531, 531,
	-7, -401, 27, 93, 401, 196, -420, -265, -38, -422,
	402, 93, -363, 29, -428, 29, -428, -43, -5, 40,
	532, 541, 527, 533, -7, -7, -7, -7, 418, 418,
	327, 307, 418, 532, 541, -415, -415, -10, -40, -101,
	61, -673, 117, 93, 364, 61, 93, 364, 61, 61,
	61, -673, -7, -7, -396, 398, -7, -7, -7, -396,
	398, 61, -38, -627, -119, -119, 538, -120, 61, -428,
	29, -614, -63, -363, 313, 47, -7, 398, 398, 196,
	27, 61, -590, 83, -397, -429, -424, -424, -424, 61,
	61, -7, -7, 438, 61, 61, 61, 61, 61, 61,
	-101, 31, -428, 29, -428, 541, 532, 527, -265, 93,
	-268, -106, -15, -15, -106, 74, 74, 506, -13, -397,
	-397, -15, 530, 530, -99, 532, -125, -125, 532, -428,
	-7, -575, 246, 354, 532, -509, 541, 36, -506, -13,
	-439, 541, -44, -5, 414, 414, 414, 414, 414, -508,
	541, -510, 506, 49, 43, -506, -508, -518, -397, -177,
	272, 272, -7, -7, 532, 541, 541, 52, -15, 52,
	-7, -513, -106, 52, 52, 52, 52, 52, 52, 52,
	-263, 52, 52, -93, 532, 532, 532, 530, 66, 36,
	455, -127, 532, 541, -162, 531, 91, 92, -51, 71,
	-63, -429, -429, -670, -670, -670, -670, -429, -63, -63,
	42, 42, -63, -64, -64, -63, 42, 64, 357, -166,
	-63, 471, 471, 30, 30, 532, -63, 532, -127, 532,
	541, 532, -75, 532, -101, 266, -63, 106, -168, -141,
	-5, -63, -166, 74, 74, -325, -325, -333, 70, 166,
	532, -106, -63, -165, -63, -106, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, 41,
	31, 260, -64, -63, -63, -63, -106, 532, 532, 532,
	-127, -63, 532, 541, -216, -6, -89, 380, 442, 532,
	-65, -317, 70, 532, 541, -91, 479, -166, -330, -344,
	-335, -325, 74, 74, -335, 532, 532, -63, -63, -63,
	23, -51, -178, -270, -225, 531, 74, -177, -177, 102,
	-214, -220, 527, -215, 122, -276, 75, 75, -276, -288,
	75, -289, 80, -289, -289, -132, 450, -5, 531, -280,
	-282, -280, -280, 532, -5, 531, 531, 124, 531, -65,
	133, -325, -63, -36, -251, -671, 83, -379, 310, -350,
	-361, -380, -381, 370, -349, -354, -355, -352, -5, -348,
	-387, 74, -384, 505, 531, 122, 370, 23, -248, -177,
	532, -564, -391, -7, -631, 531, 206, -63, 541, 541,
	464, -626, -63, -63, -429, -643, -14, 74, 70, -615,
	-608, -611, 4, -406, 531, -576, -395, 531, -429, 28,
	-506, -7, -15, 252, 47, -372, 503, 531, -64, -429,
	-417, 201, 70, 253, 299, -106, -304, -315, 39, 532,
	541, -15, -565, 531, -120, -379, -348, 531, 370, 140,
	-574, -413, -575, -397, -397, -101, -101, -100, -101, -434,
	-436, -395, -674, 286, 385, -577, -579, -5, -588, 61,
	-587, 21, 63, 96, 97, 98, -576, -275, -599, 532,
	74, -278, -5, 242, -278, 531, -424, 36, 168, -101,
	-7, -7, 86, -351, 29, -410, -409, 230, -5, 40,
	532, -14, -364, 31, 252, 311, 354, -7, -14, -363,
	-14, -359, -358, -229, -5, -301, 531, 31, 275, 298,
	246, -421, 288, 31, 275, 438, -384, -411, -409, -384,
	288, -422, 93, 464, -36, 438, -5, -7, -386, -406,
	-6, 418, -7, -42, -7, -7, -7, 449, 70, -7,
	449, 70, -7, -7, -7, -7, 61, 61, -673, 93,
	364, 61, 61, -673, -7, 464, 538, -7, -7, 532,
	313, 61, 61, -596, -601, 62, 286, 439, -597, -602,
	62, 286, -7, -591, 36, 531, 398, -7, -7, -38,
	-41, -7, -7, -7, -7, -7, -101, 211, 198, 29,
	-5, -636, 355, -638, -119, -29, -155, -263, -101, 464,
	23, 83, 83, 321, -504, 448, 287, 410, 420, 465,
	415, -504, 130, -428, 530, 422, 246, -101, -508, -507,
	290, -263, -13, -13, -13, -13, -13, -512, -428, 64,
	-508, 52, 52, -106, 355, -106, -513, 52, -513, 52,
	532, -515, -101, 47, -515, -515, -515, -515, -515, -515,
	52, -515, -515, -129, 455, 532, -63, -154, -171, 72,
	70, -429, -429, -429, -429, -63, -63, 42, 30, 30,
	-63, -63, 319, 319, -63, -63, 532, 532, -63, -101,
	-63, 532, -137, 370, 532, -335, 47, 47, -335, -169,
	148, 532, 532, 64, 64, 41, 260, 42, 130, 64,
	532, 532, -79, -127, 489, 532, 483, 483, -317, 70,
	-65, 132, 155, -63, -92, 541, -63, 354, -335, 532,
	47, 47, 532, -336, 129, -336, -336, -107, -171, 532,
	109, -259, -229, 117, -231, -63, -240, -276, -276, -290,
	83, 74, 75, -276, -623, 531, -13, -279, 531, -302,
	-302, -5, -305, -306, -301, -316, 531, 541, -213, -223,
	-232, -233, 51, -253, -254, 531, -36, 150, -380, 531,
	304, 271, -408, 70, 532, 541, -365, 36, -356, -388,
	449, 228, -346, -15, 122, 273, -434, -657, 36, -395,
	531, 74, -640, -308, -628, -105, -102, -658, -101, 130,
	-106, -649, 393, -429, -608, 532, -598, 64, 61, -604,
	312, 23, -14, 531, 31, -437, -367, 31, -424, -424,
	-63, -257, 23, 40, 83, -15, -101, -414, -415, 422,
	-356, -346, 122, -7, 284, 422, 23, -388, -623, 273,
	30, 45, -590, -397, -594, -63, 286, 500, 286, 64,
	36, 45, 64, -351, -413, -5, 40, -363, 532, 252,
	476, 299, 253, 309, 532, 532, 532, 541, 36, -230,
	-222, 39, -230, -63, 47, 28, 28, -417, 47, 23,
	-41, -417, -106, -263, -41, -428, -428, 527, 61, 61,
	-7, -397, -7, -397, 61, -7, -7, -7, 449, 70,
	-7, -7, -7, 464, -428, -363, -7, -7, 541, -99,
	-99, -106, 541, -99, -99, 513, -63, 61, -428, -101,
	-101, -428, -106, -106, -7, -7, -7, 61, 64, -500,
	-7, 506, -502, -428, -513, -513, 532, 532, 532, -513,
	-513, 52, -515, 532, 532, 532, -135, 484, -63, -52,
	-63, -63, -63, 532, -129, 70, 532, 532, -7, -63,
	-64, 64, -63, -63, -63, 532, 541, 532, 531, -317,
	532, 532, 435, 155, 532, -335, -326, -327, -325, -337,
	-338, 40, -339, 136, 47, 49, 43, 50, 138, -335,
	-90, 306, 354, -135, -297, 87, 97, 110, 532, 541,
	-7, 155, -290, 531, -63, -276, 531, -13, 532, -302,
	532, 532, 532, 541, -307, 23, 123, -318, -319, -64,
	40, -63, -220, -223, -224, 30, -224, 105, 31, -252,
	115, 116, 149, 47, 154, 151, 152, 42, 153, 148,
	-255, -260, -6, -253, -101, -408, -16, -362, 227, 230,
	233, 251, 298, 288, 308, 438, 439, 21, -362, -48,
	-5, -354, 507, -380, -7, 27, 98, 380, 532, -348,
	-429, -7, 513, 216, 58, 23, -259, -431, 541, 532,
	-119, 266, -641, -4, -451, 464, -645, 130, -650, -652,
	-647, 348, 502, -656, 64, 532, 532, 433, 433, -605,
	-606, 478, 354, -576, -177, 532, 29, -389, 83, -389,
	532, -373, 337, 298, 531, -7, 532, 541, -7, 422,
	532, -429, -413, 246, -7, -177, 531, -674, -579, 531,
	-591, 64, 532, -439, -593, 23, -593, -15, 531, 531,
	531, -365, -374, 303, -374, 392, -374, -358, -154, 62,
	-394, -15, -15, 532, 29, 29, 531, 23, -315, -406,
	-7, -7, -24, 93, -24, 93, -7, 61, -7, -397,
	61, -601, -154, -441, -439, 531, -602, 531, 531, 531,
	532, -7, -315, 532, -502, -502, 74, -508, -513, -136,
	-138, -5, -167, -170, -63, -173, -175, -174, -176, 531,
	238, 408, 293, -142, 388, 127, 294, -127, 130, -64,
	-127, -88, 499, 354, -341, 168, 36, 541, 23, 532,
	74, -63, 134, 139, -340, -338, 532, 306, -298, 90,
	89, 88, 93, -277, -229, -177, -13, -127, 532, 532,
	-309, -306, 531, -311, -312, -5, 541, 532, 23, -64,
	-324, 23, 106, -63, 106, 105, -612, -612, -612, -612,
	152, 31, 47, -101, 532, 541, -261, -267, -263, 536,
	40, 531, -277, -48, 532, -387, 531, -365, -408, 127,
	127, -379, -380, -348, -248, 506, 513, 513, -177, 532,
	-391, -628, -631, 540, -106, -653, 51, -675, 262, -652,
	-648, 67, 411, -363, -429, 36, 36, -576, 478, -657,
	-395, -429, 307, -370, 354, -378, -375, -376, 74, 79,
	369, 429, -419, 531, -63, -603, 279, -415, -413, -7,
	-379, -348, 140, -413, -434, 532, -623, -578, 7, -275,
	-593, 301, 205, -360, -357, -9, -127, -127, -424, 531,
	-424, -429, -424, 531, -161, -384, -230, -63, 298, -37,
	83, 449, 449, -7, -24, 93, -7, -664, 130, -664,
	-665, -665, -665, -63, -428, -509, -428, -504, -428, 541,
	23, 541, 532, 531, 531, 425, 532, -143, -144, 37,
	467, 120, -63, -143, -143, -63, 532, 532, 155, -342,
	145, 144, 140, 134, 140, 134, 141, 142, -327, -6,
	136, 532, 74, -14, 91, 91, -211, 532, 532, -302,
	532, 541, -106, 130, -319, 541, -6, -336, -5, -226,
	-227, 109, 97, 98, -228, 109, 96, 70, -101, -101,
	-101, -101, -14, 536, 47, -14, 536, -260, -256, -262,
	-267, -387, -388, -382, -383, -5, -301, 531, -48, -380,
	-408, -356, -434, 506, 506, -657, -393, 303, 531, -640,
	273, 531, -646, 411, 437, -612, 130, 286, 286, 23,
	531, 449, 309, -376, 74, -375, 74, 97, 98, -418,
	532, 23, -15, -413, 422, -356, -7, 531, 532, 541,
	532, 541, -99, 532, 532, -389, -14, -389, -257, -389,
	-154, -162, -161, 532, -419, -63, -7, -7, 449, -416,
	391, 87, 509, -416, 532, 532, 532, 532, 64, -138,
	-139, -170, -127, -127, 531, -145, 270, -144, 377, 283,
	411, 377, 283, -145, -145, -340, 143, 143, 140, 140,
	134, 140, 134, 140, 138, 136, 93, 70, 70, -277,
	-281, 23, -133, 399, 532, -312, -313, -314, 4, 40,
	31, 47, 128, 124, -65, 123, 110, 93, 110, -221,
	102, 531, 40, 86, 107, 108, -14, 536, 532, 541,
	-388, 532, 541, -222, -222, -63, -387, -408, -48, -380,
	-372, 531, -259, -674, -63, -655, -5, 262, -439, -439,
	-177, -7, -377, 354, 35, 24, 93, -377, 532, 440,
	-596, -7, 422, -413, 532, 7, -357, 61, -363, 532,
	-363, -373, -277, 532, -162, -24, -24, -7, 70, -439,
	-502, 532, 532, -167, 120, 71, 455, 354, 30, 532,
	74, 74, 140, 140, -338, -5, -14, -14, -5, 531,
	-314, -64, -64, 47, -64, -316, 531, -211, -231, -210,
	86, 531, -262, -383, -394, -394, 532, -388, -48, -387,
	-408, -395, -392, -229, 532, -623, 532, 411, 541, 541,
	-657, 195, 47, 40, -413, -7, 531, -378, -363, -24,
	-15, -428, 532, 411, 501, -144, 146, 146, 74, 61,
	83, 93, 93, -63, 123, -321, -322, -5, 131, 155,
	532, -127, -222, -387, -388, -48, -388, 532, 541, -393,
	531, -653, 61, 64, -257, -257, -413, -127, -363, 147,
	147, 136, -66, -623, 166, -5, -5, -5, 532, -311,
	532, 541, 130, -106, -345, 128, -221, -221, 102, 532,
	-394, -388, -387, -277, -229, -372, -651, -654, -99, 6,
	-101, -6, 273, 433, 433, 532, 40, 531, 532, -337,
	-322, 124, -323, -343, 29, 128, 7, -231, -388, -395,
	532, 541, -674, 36, 36, -66, -80, 532, -341, -323,
	-323, 7, 123, 23, 155, -388, -654, -623, 286, 286,
	83, -129, -342, -341, -337, 531, -7, -221, -277, 531,
	-439, -439, -5, 532, -340, -342, -321, 123, -651, -340,
	532, 531, 532, -321, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 2929, 2929, 1522, -2, 0, 1804, -2,
	1867, 1867, 0, 0, 0, 2929, 0, 2929, 2929, 0,
	0, 0, 0, 0, 1609, 1881, 1877, 0, 1877, 2296,
	2297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 146, 0, 0, 0, 0, -2, 1513,
	1608, 0, 2272, 2273, 1644, 0, 1555, 0, 0, 0,
	-2, 2932, 2927, 2928, 2684, 0, 0, 0, 0, 1609,
	0, 1803, 0, 0, 2828, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 1932, 1933,
	0, 0, -2, 2105, 2805, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1866,
	0, 0, 0, 0, 0, 2307, 0, 0, 0, 2303,
	2304, 2305, 0, 0, 2309, 2310, 2311, 0, 0, 0,
	1850, 0, 1853, 1854, 1855, 1856, 1857, 1858, 0, 2228,
	305, 416, 450, 2233, 2632, 0, 533, 189, 406, -2,
	397, 483, 2647, 122, 123, 124, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 324, 325, 326,
	327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 396,
	398, 399, 400, 401, 402, 403, 404, 405, 407, 408,
	409, 410, 411, 412, 413, 414, 415, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
	481, 482, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 2242, 2234, 533,
	450, 416, 2238, 2239, 189, 305, 323, 397, 406, 483,
	2932, 2684, 2932, 0, 2932, 0, 2917, 416, 450, 533,
	404, 2919, 450, 3138, 132, 0, 2994, 2995, 2999, 2492,
	2492, 2492, 170, 2492, 0, 0, 2994, 2492, 2243, 1877,
	1609, 0, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2621,
	1875, 0, 1880, 2268, 0, 1876, 2274, 533, 450, 416,
	2278, 0, 2284, 0, 0, 2298, 2299, 2300, 2301, 2302,
	3108, 1629, 3112, 3114, 0, -2, -2, -2, -2, 162,
	385, 3133, 3133, -2, -2, 3130, 3131, 1227, 0, 0,
	1225, 3113, 3134, 3135, 3148, 3150, 364, 3152, 3154, 3155,
	3156, 3159, 3160, 1444, 1226, 0, 145, 0, 1867, 3204,
	3207, 3208, 3210, 0, 3212, 0, 1364, 0, -2, -2,
	1441, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, -2, 0, 2837, 2837, 2837, 0,
	-2, 1526, 1527, 0, 1527, 0, 1560, 0, 1643, 1645,
	1554, 1583, 1584, 137, 0, 0, 1605, 380, 1610, 140,
	1606, 0, 2, 2925, 0, 2926, 2683, 2671, 0, 0,
	2677, 0, 0, 0, 1588, 0, 0, 0, 3139, 3140,
	3141, 3142, 3143, 2492, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 1867, 2827, -2, 0, -2,
	274, 1873, 156, 0, 193, 255, 1510, 0, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 2513, 0, 0, 274, 2035, 274, 0, 0,
	2577, 274, 310, 2035, 2142, 2143, 2144, 2145, 2146, 2665,
	2666, 2667, 2668, 0, 0, 2727, 0, 0, 140, 274,
	106, 2692, 0, 0, 0, 2035, 2035, 1934, 1935, 1936,
	1937, 0, 274, 0, 0, 274, 0, 0, 274, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 3086, 0, 2142, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 2942, 0, 310, -2, 2942, 0,
	0, 274, 0, 0, 0, 2981, 274, 110, 158, 274,
	110, 133, 0, 274, 110, 274, 1864, 1430, 0, 1431,
	1432, 1433, 1434, 1435, 1244, 1438, 1448, 1451, 1452, 1453,
	1454, 1455, 1491, 236, 1448, 1448, 1448, 1461, 1462, 1463,
	1464, 1465, 1487, 1487, 1230, 1484, 1439, 1440, 1489, 1477,
	1489, 1489, 1472, 0, 1489, 110, 274, 0, 310, 2947,
	274, 2140, 2945, 274, 2949, 274, 2306, 0, 2308, 0,
	1848, 1849, 1852, 118, 2229, 416, 2230, 191, 0, 2231,
	0, 0, 0, 0, 0, 0, 2635, 2636, 2637, 2660,
	2661, 2638, 2663, 2664, 0, 2235, 0, 2237, 2913, 2914,
	2915, 2923, 2916, 0, 2924, 2918, 2922, 0, 0, 0,
	0, 0, 2996, 0, 3001, 0, 3002, 3003, 3004, 3005,
	0, 0, 0, 0, 1609, 2245, 0, 2247, 2255, 537,
	2250, 2251, 2252, 2620, 1877, 1874, 0, 2265, 2267, 2269,
	140, 0, 2275, 0, 2277, 0, 2287, 0, -2, 118,
	118, 118, 2291, 2292, 2293, 2294, 0, 0, 3115, 0,
	3132, 0, 0, 0, 3133, 3133, 0, 0, 0, 3133,
	3133, 0, 3133, 3133, 1228, 1229, 3144, 0, 3151, 3153,
	3157, 0, 3163, 143, 3215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2307, 1859, 1860, 1861, 1862, 1863, 0, 0, 3209, 3211,
	0, 1365, 1249, 0, 1252, 2892, 1539, 1536, 0, 2889,
	2890, 1540, 0, 0, 0, 1548, 0, 2835, 2836, 0,
	0, 0, -2, 0, 1524, 1525, 1650, 1559, 1561, 1565,
	1566, 1103, 0, 0, 0, 0, 0, 0, 2004, 1170,
	1193, 1194, 1257, 0, 1197, 1198, 1199, 496, 0, 1204,
	1205, 500, 1492, 343, 529, 1247, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 0, 0, 0, 1380, 1515, 1517,
	1261, 1207, 1208, 1209, 1210, 1211, -2, 510, 507, 552,
	1263, 1264, 1266, 1268, 1270, 1272, 1273, 1274, 1275, 1276,
	1277, -2, 0, 497, 521, 525, 526, 532, 535, 536,
	522, 493, 499, 516, 540, 541, 543, 545, 542, 546,
	547, 509, 506, -2, 512, 513, 517, 511, 508, 515,
	548, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 518, -2, -2, -2, -2, -2, -2, -2, 1466,
	1467, 1468, 1469, 1650, 0, 1585, 138, 1586, 0, 0,
	0, 1607, 0, 0, 0, 1420, 2930, 0, 0, 2673,
	0, 2675, 2676, 2678, 0, 1768, 0, 1589, 0, 1790,
	0, 0, 0, 2492, 274, 0, 2492, 0, 2528, 274,
	105, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	1938, 0, 2498, 0, 0, 1872, 157, 0, 2511, 0,
	2806, 0, 0, 2512, 0, 0, 0, 0, 0, 2518,
	0, 0, 2536, 2033, 2034, 0, 0, 0, 274, 2581,
	0, 0, 0, 0, 2952, 0, 0, 0, 0, 0,
	0, 0, 0, 2761, 0, 0, 0, 0, 0, 2952,
	2952, 2115, 2128, 2215, 2136, 0, 0, 0, 2215, 2215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2207, 0, 0, 0, 2117, 2119, 0,
	0, 0, 0, 2120, 0, 2531, 2013, 0, 0, 0,
	2017, 2032, 2020, 0, 0, 0, 0, 2035, -2, 2030,
	0, 2122, 2215, 0, 0, 274, 0, 0, 274, 0,
	2279, 0, 2280, 0, 2325, 0, 0, 0, 0, 0,
	2502, 0, 0, 0, 0, 0, 3083, 3053, 0, 0,
	3057, 3058, 3059, 3060, 0, 0, 3065, 0, 0, 0,
	0, 3070, 0, 0, 2445, 3084, -2, 0, 0, 2970,
	2971, 0, 0, 0, 0, 0, 0, 3083, 0, 0,
	0, 0, 0, 3083, 0, 0, 2574, 2575, 0, 0,
	0, 0, 0, 0, 0, 2786, 2787, 0, 0, 0,
	0, 0, 2954, 0, 0, 0, 0, 0, 2954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3091, 3092, 0, 2543, 1867,
	0, 0, 0, 2217, 108, 109, 0, 0, 2219, 0,
	0, 0, 2222, 0, 1422, 1426, 1430, 1436, 0, 1231,
	1232, 1233, 1234, 1235, 1236, 1245, 1449, 1448, 0, 1456,
	0, 1457, 1458, 1459, 1460, 0, 1481, 0, 0, 0,
	1483, 1479, 1488, 0, 1470, 1471, 1489, 1489, 1475, 2224,
	0, 110, 274, 0, 0, 0, 0, 0, 0, 1851,
	2312, 2313, 2314, 2315, 0, 0, 0, 2639, 2640, 2642,
	2633, 2643, 2645, 2649, 2651, 2652, 1838, 1839, 1840, 1841,
	1842, 0, 0, 1845, 2644, 2646, 2648, 2634, 2653, 2654,
	0, 2657, 2658, 2659, 2641, 2669, 2670, 2236, 404, 2921,
	1609, 0, 2810, 0, 3006, 0, 412, 0, 263, 370,
	400, 218, 235, 298, 299, 353, 406, 443, 455, 0,
	141, 3040, 3000, 0, 0, 135, 0, 0, 0, 3040,
	0, 2244, 1609, 0, 2249, 2253, 2254, 1879, 2268, 0,
	2271, 2268, 2276, 2282, 2283, 0, 0, 0, 0, 105,
	2295, 3111, 3103, 3104, 3105, 3106, 0, 3116, 3117, 3118,
	3119, 0, 0, 3122, 3123, 3124, 0, 0, 3127, 0,
	0, 0, 3158, 0, 2139, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 1867, 3203, 1366,
	0, 1513, 0, 0, 0, 1373, 1375, 0, -2, 1250,
	1253, 1254, 1442, 125, 126, 127, 128, 129, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 1251, 0, 1530, 2891,
	1531, 1538, 1541, 0, 0, 1543, 0, 1545, 0, 2887,
	2888, 2893, 2901, 2902, 0, 2911, 2912, 2899, 0, 2903,
	-2, 0, 0, 1551, 0, 1556, 1557, 1558, 2853, 2854,
	1920, 2892, 1539, 1568, 0, 0, 0, 705, 673, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 0, 666, 920, -2, 0, -2, 1007, 838, 1141,
	1143, -2, 817, 0, 0, 1564, -2, 917, 1400, 130,
	131, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 667, 668, 669, 670,
	671, 672, 674, 675, 676, 677, 678, 679, 680, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 813, 814,
	815, 816, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 918,
	919, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1108, 1109, 1123, 1126, 1127, 0, 0, 0,
	1195, 1420, 0, -2, 1200, 1201, 1202, 1203, 0, 0,
	0, 0, -2, 1220, 0, 1222, 1244, 0, 0, 1379,
	1517, 0, 2865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1720, 1720, 0, 0, 0, 0, 0, 0, 0, 0,
	1568, 0, 0, 0, 1611, 1615, 0, 0, 1622, 0,
	0, 0, 0, 1402, 1404, 0, 0, 1518, 0, 0,
	2931, 2672, 2674, 0, 0, 2682, 1903, 1770, 0, 0,
	0, 0, 1568, 1781, 0, 0, 1257, 1590, 1628, 0,
	0, 1799, 1799, 1796, 1797, 1941, 0, 0, 2093, 0,
	0, 2114, 0, 2525, 2527, 0, 0, 0, 274, 104,
	2424, 0, 2424, 0, 2448, 2449, 0, 0, 0, 2510,
	0, 0, 0, 0, 0, 2627, 2626, 2628, 2629, 2630,
	2631, -2, 105, 1993, 0, 1445, 0, 2709, 2711, 0,
	0, 1511, 1664, 0, 0, 0, 0, 0, 0, 2520,
	0, 2533, 0, 2568, 1941, 0, 0, 0, 2580, 2576,
	0, 0, 2591, 2592, 0, 2934, 0, 274, 2492, 0,
	0, 2726, 2733, 0, 0, 0, 0, 2692, 2768, 0,
	442, -2, 2492, 2776, 0, 2691, 0, 0, 0, 2933,
	2935, 0, 0, 0, 0, 2214, 0, 0, 2147, 274,
	0, 2171, 0, 0, 2050, 0, 2004, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 2179, 2180, 0, 0,
	2200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2193, 0, 0, 2195, 2196, 0, 2201, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2014, 2018,
	2023, 2024, 2015, 2016, 0, 2031, 2021, 2022, 0, 0,
	0, 0, 0, 0, 0, 0, 2124, 2215, 0, 0,
	2126, 2215, 0, 2568, 0, 0, 2317, 2318, 0, 0,
	2413, 2414, 2415, 2416, 2418, -2, 2420, 0, 0, 0,
	0, 0, 0, 2213, 0, 0, 0, 0, 2505, 0,
	2614, 0, 0, 0, 0, 3050, 3054, 3082, 0, 0,
	0, 3063, 3064, 3066, 3067, 3068, 3069, 3071, 2444, 416,
	450, 0, 0, 0, 0, 0, 2744, 0, 0, 3051,
	0, 2764, 2766, 2765, 2767, 0, 3052, 0, 0, 2573,
	2578, 2579, 0, 2780, 0, 2781, 2692, 0, 0, 2788,
	0, 0, 0, 2715, 2716, 2719, 0, 2936, 2938, 0,
	2241, 0, 2939, 0, 0, 2937, 2940, 2941, 0, 2728,
	2729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 2541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2979, 2980, 0, 0, 0, 0, 110, 159, 110, 134,
	110, 0, 1865, 110, 0, 0, 1423, 1427, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1474, 110, 2226, 0, 0, 0,
	2141, 2948, 2946, 2950, 2625, 0, 0, 1843, 1844, 1244,
	0, 2920, 3136, 0, 3137, 0, 0, 3007, 3008, 0,
	0, 3011, 3088, 3012, 3013, 3014, 3015, 3016, 0, 3018,
	3041, 3043, 3019, 3020, 3021, 0, 0, 0, 0, 0,
	2975, 0, 0, 0, 0, 2997, 2491, 0, 0, 2994,
	110, 0, 2246, 2248, 2268, 1878, 2264, 2270, 2266, 2287,
	2286, 2285, 2288, 2289, 2290, 0, 0, 0, 3107, 3120,
	3121, 3125, 3126, 3128, 3129, 3147, 144, 3161, 2138, 0,
	0, 0, 3168, 3170, 3172, 3213, 3214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1367, 0, 0, 1512,
	1513, 1513, 1513, 0, 0, 1255, 1252, 1537, 0, 1546,
	0, 0, 0, 2904, 0, 0, -2, -2, 0, 2900,
	2909, 2910, 2905, -2, -2, 2906, 1542, 1549, 0, 1547,
	0, 0, 1923, 1918, 1919, 1534, 1535, 1625, 0, 1649,
	-2, -2, 305, 266, -2, 0, 155, 1562, 1104, 1105,
	0, 1107, 1110, 1111, 1112, 1113, 1114, 1115, -2, -2,
	-2, -2, -2, -2, 1122, 1124, 1125, -2, 1403, 1405,
	0, 1518, 0, -2, 0, 1140, 0, 1145, 1147, 1149,
	0, 1162, 1164, 0, 1419, 1406, 1407, 1408, 1409, 1410,
	0, 0, 1519, 1157, 1520, 0, 0, 1397, 1398, 1399,
	1563, 0, 1144, 0, 0, 1161, 2002, 0, 1258, 1257,
	0, 0, 0, 1388, 1389, 0, 0, 0, -2, 1513,
	1223, 0, 1385, 1381, 0, 2865, 0, 1260, 0, 0,
	1711, 1103, 0, 1716, 1754, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 0, 0, 0, 1375, 1322, 0, 0, 1171, 0,
	0, 0, 529, 0, 0, 1375, 0, 0, 0, 0,
	0, 1420, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 1345, 1348, 0, 0, 0, 0, 0, 1711, 0,
	1705, 0, 1375, 1714, 1754, 0, 1703, -2, 1419, 0,
	1720, 1317, 0, 0, 0, 0, 1625, 0, 1587, 1623,
	0, 1613, 0, 139, 1421, 2679, 2680, 2681, 1925, 0,
	0, 1775, 1776, 0, 1777, 1257, 1774, 1769, 1628, 0,
	0, 0, 1786, 1785, 1925, 0, 1789, 1569, 1631, 1631,
	0, 1575, 0, 1640, 1631, 1631, 1654, 402, 549, 514,
	137, 1361, 1362, 1363, 505, 0, 0, 1798, 0, 0,
	1940, 135, 1942, 1944, 1945, 1946, 0, 1970, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2438, 2423, 2425, 0, 0, 0, 2430, 2431, 0, 2403,
	2404, 2406, 2438, 0, 2451, 2453, 2454, 2455, 2457, 2450,
	0, 2509, 0, 0, 0, 0, 2597, 2601, 2599, 1439,
	0, 2825, 2492, 0, 2497, 0, 0, 0, -2, 2501,
	1446, 2708, 0, 0, 0, 2812, 0, 1663, 1665, 0,
	2610, 2524, 2514, 2515, 2516, 2517, 0, 2535, 0, 0,
	0, 2540, 2035, 1985, 2567, 2565, 0, 0, 0, 0,
	0, 0, 0, 2577, 0, 0, 2951, 2955, 0, 0,
	0, 0, 0, 0, 0, 2965, 2966, 0, 0, 0,
	0, 0, 2093, 0, 2114, 2735, 0, 0, 2750, 2751,
	0, 2756, 2758, 2759, 0, 140, 2692, 2763, 0, 2492,
	0, -2, 2778, 2778, 0, 0, 0, 2137, 2348, 0,
	0, 0, 118, 0, 2149, 274, 1968, 0, 0, 0,
	2383, 0, 0, 0, 0, 0, 1869, 0, 2383, 274,
	110, 274, 110, 2173, 2176, 2178, 0, 2199, 0, 2392,
	2395, 2177, 2181, 2184, 2185, 0, 0, 0, 0, 2189,
	0, 2186, 2187, 2188, 2192, 0, 2194, 0, 2197, 2202,
	2704, 2705, 2706, 0, 0, 0, 2696, 2698, 417, 165,
	237, 0, 1989, 2116, 2129, 2215, 0, 2356, 2211, 2118,
	0, 0, 2350, 2019, 2025, 2026, 2027, 2029, 2121, 0,
	2532, 2352, 0, 2123, 2215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 2328, 2316, 0, 0, 2412,
	0, 2411, 1448, 2417, 1448, 1448, 2329, 2330, 2331, 2332,
	0, 2503, 110, 274, 2212, 2504, 0, 0, 2383, 2508,
	2335, 0, 0, 3061, 3062, 2336, 2944, 0, 0, 0,
	0, 2746, 0, 0, 2342, 2343, 2344, 2345, 2346, 2347,
	2692, 2782, 2692, 2692, 0, 0, 0, 2717, 2718, 2373,
	2953, 2240, 2943, 2374, 0, 2375, 2376, 2754, 1846, 1847,
	0, 0, 0, 0, 0, 2381, 0, 0, 0, 0,
	110, 2608, 274, 110, 0, 3072, 3076, 3093, 0, 0,
	1869, 2542, 0, 2545, 2546, 2547, 0, 2549, 2550, 2551,
	193, 255, 2554, 2555, 0, 2557, 0, 0, 0, 0,
	0, 0, 2216, 2218, 2220, 0, 2223, 1428, 0, 0,
	0, 1437, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 0,
	1447, 1490, 1487, 1485, 1486, 1487, 0, 1476, 2225, 110,
	0, 0, 2619, 0, 2232, 2650, 2655, 0, 2811, 3032,
	3027, 3029, 0, 142, 0, 3010, 0, 3017, 3045, 0,
	0, 0, 0, 0, 0, 0, 3040, 3034, 0, 0,
	2998, 136, 3040, 0, 2977, 0, 2263, 2281, 0, 3109,
	3110, 3162, 3164, 3171, 3165, 3166, 0, 0, 3173, 3191,
	3192, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 0, 0,
	0, 0, 0, 235, 0, 3184, 3185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1368, 0, 1374, 0, 0, 0, 0, 1376, 1377, 0,
	1251, 1544, 2894, 0, 2897, 0, 2907, 2908, 0, 0,
	1550, 2855, 1923, 1494, 0, 2857, 0, 2839, 0, 1567,
	0, 0, 146, 146, 146, 146, 0, 154, 0, 0,
	-2, -2, 0, 0, 0, 1158, 0, -2, 1142, 1146,
	1148, 1150, 0, 1163, 1166, 0, 1419, 0, 1165, 1168,
	0, 0, 1411, 1412, 1413, 1414, 0, 0, 0, 1159,
	0, 0, 0, 0, 2003, 1196, 1421, 1386, 1387, 0,
	1206, 1493, -2, 0, 0, 0, 1382, 0, 0, 1259,
	0, 2863, 2864, 2868, 0, 1419, 0, 0, 0, 0,
	1714, 0, 1695, 1753, 0, 0, 1265, 1267, 1269, 1271,
	0, 1280, 0, 1281, 0, 1283, 1284, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1173, 1174, 1188, 1286,
	1287, 0, 0, 0, 0, 0, 0, 0, 1292, 0,
	1330, 0, 1294, 1295, 1296, 1297, 0, 1302, 0, 0,
	1351, 0, 0, 0, 0, 1308, 1419, 0, 1310, 1754,
	1720, 0, 0, 0, 1720, 1313, 0, 1315, 0, 0,
	0, 0, 0, 2839, 1646, 1609, 1614, 1767, 0, 1906,
	0, 0, 0, 1779, 1925, 1782, 1783, 0, 0, 1788,
	1626, 214, 0, 0, 0, 0, 0, 1602, 1602, 1602,
	1600, 1571, 1630, 0, 1635, 1573, 1631, 1640, 1631, 1631,
	-2, 1575, 0, 1577, 1636, 0, 1635, 1579, 1581, 1651,
	0, 0, 0, 0, -2, 0, 2035, 1800, 1801, 1802,
	-2, 2083, 0, 1950, 2085, 0, 1970, 2097, 0, 0,
	2092, 2492, 0, 3148, 0, 2113, 0, 2528, 2108, 0,
	2424, 0, 2419, 2400, 2436, 0, 0, 2426, 2427, 2432,
	2428, 2429, 0, 2402, 0, 0, 0, 2401, 0, 0,
	0, 0, 2593, 2594, 0, 0, 0, 2600, 0, 0,
	0, 0, 2114, 0, 0, 0, 2500, 1992, 0, 1995,
	1996, 0, 0, 2041, 2004, 0, 0, 0, 0, 0,
	1998, 0, 2710, 2712, 2685, 2686, 2687, 2688, 2689, 2690,
	343, 1498, 1499, 0, 2522, 0, 1669, 0, 2609, 2611,
	2519, 0, 2537, 2538, 2539, 2536, 2558, 0, 2566, 2561,
	2569, 2562, 2564, 2563, 2083, 1970, 0, 0, 2581, 1985,
	0, 2956, 2957, 2958, 0, 0, 2961, 2962, 0, 0,
	0, 0, 2969, 2625, 0, 2114, 0, 0, 2725, 2742,
	0, 2732, 0, 0, 0, 0, 0, 2762, 2769, 2778,
	0, 2778, 2773, 0, 2775, 2692, 0, 0, 0, 0,
	2208, 0, 1980, 2209, 2210, 0, 0, 1964, 1967, 0,
	2049, 2108, 0, 0, 2053, 0, 0, 2383, 0, 0,
	2107, 2151, 0, 0, 0, 0, 2164, 0, 2170, 2007,
	-2, 0, 2172, 0, 2168, 0, 2175, 2198, 2702, 2703,
	2391, 0, 0, 0, 2182, 2190, 2183, 2191, 2203, 2204,
	0, 0, 2205, 2695, 0, 2699, 2700, 2701, 1988, 1990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2354, 0, 2125, 2215, 0, 2358, 0, 2127,
	2215, 0, 2559, 2319, 2409, 2410, 0, 1448, 0, 2506,
	0, 2613, 0, 2616, 3055, 0, 2337, 0, 0, 0,
	0, 0, 2748, 0, 2743, 0, 2785, 2783, 2784, 0,
	0, 2372, 0, 0, 0, 0, 0, 0, 0, 0,
	2604, 0, 3094, 0, 3096, 0, 3090, 0, 0, 0,
	2544, 0, 0, 0, 0, 0, 0, 0, 2982, 2983,
	2984, 110, 1429, 1424, 0, 1246, 1480, 1482, 1478, 2227,
	2589, 0, 2623, 0, 0, 3040, 0, 0, 3030, 3009,
	3089, 0, 3042, 3044, 0, 0, 0, 0, 0, 2976,
	0, 3035, 3036, 3037, 3038, 3039, 110, 0, 3040, 3102,
	3167, 3169, 0, 0, 2321, 0, 0, 0, 0, 0,
	0, 3189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 1369, 1371, 1372, 1256, 2895, 0,
	2898, 0, 1395, 0, 2856, 0, 1921, 1922, 2852, 0,
	1624, 147, 148, 0, 0, 0, 0, 153, 1106, -2,
	0, 0, -2, 0, 0, -2, 0, 0, 1167, 1169,
	-2, 1416, 1418, 0, 0, 1521, 0, -2, 0, 1392,
	0, -2, 1390, 1368, 1224, 1378, 1384, 0, 0, 2870,
	2867, 0, 1720, 0, 0, 1707, 1708, 1720, 0, 1752,
	1262, 0, 1332, 0, 0, 1172, 1175, 1176, 1177, 1178,
	1179, 1180, -2, -2, -2, -2, -2, -2, 1187, 0,
	0, 1191, 1343, 0, 1326, 1327, 0, 1289, 1290, 1291,
	1329, 0, 1298, 0, 1346, 1347, 0, 0, 0, 1304,
	1672, 0, 183, 1305, 0, 1360, 0, 1720, 1706, 1719,
	0, 1704, 0, 0, 0, 1314, 1316, 1699, 1699, 1699,
	0, 2852, 0, 1924, 0, 0, 0, 1771, 1772, 0,
	1778, 1780, 0, 1787, 0, 1570, 0, 0, 0, 0,
	0, 1597, 1601, 1598, 1599, 1572, 0, 1633, 0, 1574,
	1578, 1580, 1582, 1591, 1633, 0, 0, 1653, 0, 0,
	544, 0, 0, 1810, 2035, 0, 1870, 2085, 0, 1943,
	1947, 2093, 2084, 0, 0, 1971, 1973, 1974, 1993, 0,
	2099, 0, 119, 120, 1941, 0, 0, 0, 2625, 2496,
	2114, 2526, 0, 0, 2438, 0, 2441, 2439, 0, 0,
	0, 2405, 2407, 2408, 2459, 2452, 2456, 0, 0, 2598,
	0, 2602, 0, 2603, 0, 2830, 0, 0, 0, 274,
	2627, 0, 1997, 1999, 2040, 2692, 2692, 0, 2045, 2492,
	0, 2005, 0, 2000, 2001, 0, 1666, 1667, 0, 2523,
	0, 2521, 2534, 0, 2570, 0, 0, 1941, 0, 0,
	0, 2586, 0, 2959, 2960, 2963, 2964, 2967, 2968, 2617,
	0, 2099, 0, 2476, 2477, 0, 2720, 0, 2746, 0,
	2734, 2736, 2737, 2738, 2739, 2740, 2749, 2752, 2757, 2760,
	0, 2770, 2771, 2772, 2774, 0, 2779, 0, 0, 0,
	2360, 2366, 0, 2148, 0, 1985, 1963, 0, 1965, 1966,
	2383, 0, 2384, 0, 2386, 0, 0, 2102, 0, 2055,
	0, 0, 2060, 0, 1917, 1917, 0, 0, 2155, 2165,
	1868, 2011, 0, 0, 0, 0, 2159, 2161, 2162, 2160,
	0, 2008, 0, 0, 0, 0, 110, 110, 2393, 2394,
	2397, 2206, 2707, 2697, 2349, 0, 0, 0, 0, 2357,
	0, 0, 2351, 2362, 2353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2334, 2421, 0, 2333, 110, 2383,
	3056, 0, 0, 2813, 2798, 0, 0, 0, 2814, 2815,
	0, 0, 2340, 2731, 0, 0, 0, 2370, 2371, 2588,
	2755, 2377, 2378, 2379, 2380, 110, 2607, 0, 0, 113,
	110, 3073, 3074, 3075, 3077, 3078, 3079, 3080, 3081, 0,
	0, 0, 0, 0, 0, 2988, 2989, 2990, 2991, 2992,
	2993, 0, 0, 2221, 1425, 0, 2624, 2656, 2972, 3028,
	0, 3046, 3022, 3023, 3024, 3025, 3026, 3033, 2973, 0,
	110, 0, 0, 0, 0, 0, 3181, 0, 3183, 0,
	0, 3193, 3205, 3206, 3194, 3195, 3196, 3197, 3198, 3199,
	0, 3201, 3202, 0, 2896, 1394, 1421, 0, 2859, 0,
	2837, 149, 150, 151, 152, -2, -2, 0, 0, 0,
	-2, -2, 1415, 1417, -2, -2, 1160, 1391, 1421, 1221,
	1383, 1514, 1513, 0, 1516, 0, 1709, 1710, 0, 1715,
	0, 1279, 1282, 0, 0, 0, 1192, 0, 0, 0,
	1288, 1293, 0, 0, 539, 1303, 1349, 1350, 1673, 0,
	1674, 1670, 1671, 0, 0, 0, 1355, 331, 0, 1311,
	1712, 1713, 1312, 1720, 0, 1736, 1720, 1354, 2859, 1618,
	0, 0, 1909, 0, 0, 1784, 1627, 1592, 0, 1594,
	0, 0, 0, 1596, 0, 0, 0, 1576, 0, 0,
	0, 132, 0, 1655, 1659, 0, 0, 0, 1925, 1792,
	1892, 1892, 0, 1794, 1807, 0, 1810, 0, 2093, 0,
	0, 0, 121, 0, 1969, 0, 1975, 0, 2085, 3149,
	0, 0, 0, 1970, 0, 0, 3145, 2487, 0, 0,
	0, 0, 2398, 0, 1660, 0, 1443, -2, 2433, 0,
	2434, 2469, 0, 2486, 0, 2595, 0, 0, 0, 2832,
	0, 0, 0, 1941, 0, 2499, 1994, 0, 2101, 2101,
	0, 2069, 0, 2006, 0, 1668, 2612, 0, 1986, 0,
	0, 0, 0, 1985, 0, 0, 0, 2622, 0, 0,
	0, 0, 2748, 2741, 0, 0, 0, 2794, 2794, 0,
	0, 0, 0, 2150, 1993, 1961, 1962, 2051, 2065, 2385,
	2389, 2387, 2388, 2390, 2065, 0, 2065, 0, 0, 1911,
	107, 0, 1912, 0, 2152, 0, 0, 2012, 2153, 0,
	2157, 0, 1669, 2010, 2158, 2167, 2174, 0, 0, 0,
	2139, 0, 2139, 0, 0, 2364, 2355, 0, 0, 0,
	2368, 2359, 0, 2422, 2507, 2615, 2338, 2339, 0, 0,
	0, 2804, 0, 0, 0, 0, 0, 0, 2382, 2605,
	2606, 3095, 1669, 0, 2552, 2553, 2556, 0, 0, 0,
	2590, 3031, 3040, 2978, 3187, 3188, 2322, 2324, 2323, 3182,
	3186, 0, 3200, 1370, 1396, 1495, 1552, 0, 2851, 0,
	-2, -2, -2, 1393, 2874, 0, 1717, 1718, 1751, 1342,
	-2, 0, 1328, 1324, 1325, 1299, 0, 1300, 0, 1675,
	1306, 1307, 0, 1356, 1309, 1745, 1698, 1700, 0, 0,
	0, 0, 1722, 1723, 1724, 1725, 1726, 1727, 1730, 1734,
	0, 1352, 0, 1553, 1621, 0, 0, 1902, 1625, 0,
	1905, 0, 1593, 0, 1604, 1595, 0, 0, 1634, 0,
	1637, 1639, 1654, 0, 1657, 0, 0, 0, 1676, 0,
	0, 1697, 1791, 1793, 0, 0, 0, 1887, 0, 1809,
	1811, 1812, 1873, 1873, 1815, 1816, 1873, 1873, 0, 0,
	0, 1826, 1834, 1625, 1805, 121, 0, 1948, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1949, 2097,
	0, 1972, 1993, 2093, 2098, 2094, 0, 0, 2083, 2085,
	1970, 3148, 0, 0, 0, 0, 0, 2108, 0, 2424,
	1662, 2437, 0, 2442, 2443, 0, 2475, 2471, 2458, 2460,
	0, 2463, 2464, 2383, 0, 2596, 2820, 0, 0, 2826,
	2831, 0, 0, 2829, 2496, 2114, 0, 2042, 0, 2043,
	2059, 2074, 0, 2039, 0, 2797, 1984, 0, 1985, 0,
	2083, 1970, 2571, 0, 1985, 2625, 0, 0, 2721, 0,
	2730, 0, 2777, 2794, 2791, 0, 2790, 2819, 0, 0,
	0, 1991, 2692, 0, 2692, 0, 2692, 2061, 2062, 343,
	1920, 106, 1916, 1917, 2156, 2166, 0, 0, 2694, 2396,
	2361, 2367, 2130, 0, 2132, 0, 2363, 0, 2139, 0,
	0, 2799, 2809, 2809, 2802, 0, 2816, 0, 0, 0,
	2745, 2341, 110, 2548, 3032, 110, 0, 110, 3190, 2858,
	2860, 0, 2838, 2840, 2842, 2843, 2844, 2845, 2846, 0,
	213, 399, 500, 0, 0, 0, 0, 2869, 0, -2,
	0, 0, 1357, 1358, 1750, 0, 0, 0, 0, 1319,
	0, 1721, 1728, 1729, 0, 0, 1321, 1353, 1612, 0,
	0, 0, 0, 1904, 1910, 1773, 0, 0, 1632, 1638,
	1652, 1656, 0, 0, 1682, 0, 0, 0, 0, 1679,
	1699, 0, 0, 1891, 0, 1889, 0, 0, 0, 0,
	0, 0, 0, 1825, 1808, 0, 1828, 1829, 1830, 1831,
	1832, 0, 1795, 2097, 2082, 2099, 0, 1976, 121, 2095,
	2096, 2085, 2093, 0, 2625, 2493, 0, 0, 2496, 2110,
	0, 1661, 2438, 2440, 2435, 0, 0, 0, 2470, 2461,
	1873, 2465, 2466, 0, 2485, 0, 0, 2833, 2834, 2488,
	0, 0, 0, 2044, 0, 2046, 2070, 2071, 0, 2066,
	2067, 2068, 2047, 0, 0, 0, 0, 1987, 2582, 1985,
	0, 0, 0, 2587, 2618, 2713, 0, 0, 2723, 2753,
	2789, 2792, 2793, 0, 1982, 0, 0, 0, 2101, 0,
	2101, 2492, 2101, 0, 1923, 1920, 1913, 0, 2039, 2169,
	0, 0, 0, 2365, 2134, 0, 2369, 2037, 0, 2037,
	0, 0, 0, 0, 3097, 2985, 2986, 0, 2974, 0,
	0, 0, 2847, 0, 0, 0, 2866, 2886, 2875, -2,
	458, 214, 0, 2886, 2886, 1341, 1301, 1344, 1359, 1734,
	0, 0, 1737, 0, 1739, 0, 0, 0, 1701, 1702,
	1735, 1320, 0, 0, 0, 0, 1625, 1642, 3049, 0,
	1680, 0, 1684, 0, 1677, 0, 1678, 0, 1696, 1882,
	1883, 0, 0, 1894, 1884, 0, 0, 0, 1813, 1814,
	1817, 1818, 1819, 1820, 0, 1823, 1824, 1827, 0, 1835,
	1837, 2099, 1928, 0, 2087, 1917, 1917, 0, 2097, 2093,
	121, 2085, 3146, 2494, 2495, 2489, 2004, 0, 0, 2399,
	0, 0, 2468, 2472, 2473, 0, 0, 0, 0, 0,
	1941, 0, 2058, 2072, 0, 2073, 0, 0, 0, 0,
	0, 0, 2796, 2584, 0, 0, 1985, 0, 2722, 0,
	1977, 0, 1981, 1978, 0, 2383, 0, 2383, 2069, 1625,
	0, 1914, 1923, 2154, 2163, 2693, 2139, 2139, 0, 2800,
	2036, 2807, 0, 2801, 0, 2817, 2818, 2747, 0, 2861,
	2862, 2841, 0, 0, 0, 2871, 0, 0, 2877, 2878,
	2879, 2880, 2881, 2872, 2873, 0, 1747, 1749, 1738, 1740,
	0, 1743, 0, 1744, 1731, 1732, 0, 0, 0, 1901,
	1603, 0, 3047, 0, 1658, 1683, 1686, 1687, 0, 0,
	0, 1692, 0, 1685, 0, 0, 1885, 0, 1886, 1895,
	0, 0, 0, 0, 1888, 1890, 1821, 1822, 1833, 0,
	1926, 2086, 0, 107, 107, 0, 2099, 121, 2097, 2093,
	2114, 0, 0, 0, 0, 2462, 2467, 0, 2823, 2824,
	2496, 2100, 2075, 0, 2078, 2079, 0, 2076, 2038, 2048,
	2795, 1985, 0, 2572, 2714, 2724, 1983, 0, 2052, 2064,
	2054, 2074, 2383, 2063, 1915, 2131, 2133, 2139, 0, 2803,
	110, 2849, 2848, 0, 0, 2883, 2884, 0, 0, 1318,
	0, 0, 1741, 1742, 0, 0, 0, 0, 1641, 0,
	1688, 1689, 1690, 1691, 1693, 0, 0, 1893, 0, 0,
	1899, 0, 1836, 2088, 2089, 2090, 1917, 1930, 2097, 2099,
	121, 2099, 0, 2111, 2110, 0, 2474, 2475, 0, 0,
	2490, 2077, 2492, 2492, 2583, 1985, 0, 2383, 2057, 2135,
	2808, 2987, 2850, 2882, 2885, 2876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1757, 0, -2, 0,
	0, 0, 107, 2099, 1929, 2097, 1625, 2109, 0, 2004,
	2480, 0, 0, 0, 2080, 2081, 2585, 0, 2056, 1746,
	1748, 1733, 0, 0, -2, 1620, 1616, 1617, 3048, 0,
	1736, 0, 0, 1766, 0, 1755, 1896, 1897, 0, 1900,
	2091, 1927, 2099, 2103, 2112, 2114, 0, 2478, 2481, 2482,
	2483, 2484, 0, 0, 0, 1979, 0, 0, 1681, 0,
	1758, 1759, 1745, 1766, 1766, 0, 0, 0, 1931, 2099,
	2446, 0, 0, 0, 0, 0, 1513, 1694, 1750, 1745,
	1736, 1765, 0, 0, 0, 1625, 2479, 0, 0, 0,
	0, 0, 1734, 1750, 1762, 0, 0, 1898, 2104, 2480,
	2821, 2822, 1619, 0, 1760, 1734, 0, 0, 0, 1761,
	1763, 0, 2447, 0, 1764,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:603
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = nil
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.str = yyDollar[1].str
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:748
		{
			yyVAL.str = ""
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.list = yyDollar[1].list
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:753
		{
			yyVAL.list = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:759
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:763
		{
			yyVAL.ival = 1
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:764
		{
			yyVAL.ival = 0
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:768
		{
			yyVAL.ival = 1
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:769
		{
			yyVAL.ival = 0
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:773
		{
			yyVAL.bval = true
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:774
		{
			yyVAL.bval = false
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.bval = true
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:779
		{
			yyVAL.bval = false
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:783
		{
			yyVAL.list = yyDollar[2].list
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:784
		{
			yyVAL.list = nil
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:785
		{
			yyVAL.list = nil
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = yyDollar[1].str
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = yyDollar[1].str
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = yyDollar[1].str
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = yyDollar[1].str
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = yyDollar[1].str
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.str = yyDollar[1].str
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.str = yyDollar[1].str
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = yyDollar[1].str
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:808
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = yyDollar[1].str
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:820
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:833
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:848
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:877
		{
			yyVAL.list = yyDollar[2].list
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:878
		{
			yyVAL.list = nil
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:887
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:900
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:913
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:919
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:925
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:931
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:937
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:944
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:951
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:957
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:976
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:992
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "abort"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "absent"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "absolute"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "access"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "action"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "add"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "admin"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "after"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "aggregate"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "also"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "alter"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "always"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "asensitive"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "assertion"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "assignment"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "at"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "atomic"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "attach"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "attribute"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "backward"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "before"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "begin"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "breadth"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "by"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "cache"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "call"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "called"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "cascade"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "cascaded"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "catalog"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "chain"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "characteristics"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "checkpoint"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "class"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "close"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "cluster"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "columns"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "comment"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "comments"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "commit"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "committed"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "compression"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "conditional"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "configuration"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "conflict"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "connection"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "constraints"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "content"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "continue"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "conversion"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "copy"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "cost"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "csv"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "cube"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "current"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "cursor"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "cycle"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "data"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "database"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "day"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "deallocate"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "declare"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "defaults"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "deferred"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "definer"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "delete"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "delimiter"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "delimiters"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "depends"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "depth"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "detach"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "dictionary"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "disable"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "discard"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "document"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "domain"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "double"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "drop"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "each"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "empty"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "enable"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "encoding"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "encrypted"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "enum"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "error"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "escape"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "event"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "exclude"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "excluding"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "exclusive"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "execute"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "explain"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "expression"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "extension"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "external"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "family"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "filter"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "finalize"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "first"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "following"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "force"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "format"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "forward"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "function"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "functions"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "generated"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "global"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "granted"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "groups"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "handler"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "header"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "hold"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "hour"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "identity"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "if"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "immediate"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "immutable"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "implicit"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "import"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "include"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "including"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "increment"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "indent"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "index"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "indexes"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "inherit"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "inherits"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "inline"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "input"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "insensitive"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "insert"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "instead"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "invoker"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "isolation"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "keep"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "key"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "keys"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "label"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "language"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "large"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "last"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "leakproof"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "level"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "listen"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "load"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "local"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "location"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "lock"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "locked"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "logged"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "mapping"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "match"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "matched"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "materialized"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "maxvalue"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "merge"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "method"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "minute"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "minvalue"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "mode"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "month"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "move"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "name"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "names"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "nested"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "new"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "next"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "nfc"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "nfd"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "nfkc"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "nfkd"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "no"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "normalized"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "nothing"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "notify"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "nowait"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "nulls"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "object"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "of"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "off"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "oids"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "old"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "omit"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "operator"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "option"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "options"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "ordinality"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "others"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "over"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "overriding"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "owned"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "owner"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "parallel"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "parameter"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "parser"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "partial"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "partition"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "passing"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "password"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "path"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "plan"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "plans"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "policy"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "preceding"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "prepare"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "prepared"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "preserve"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "prior"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "privileges"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "procedural"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "procedure"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "procedures"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "program"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "publication"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "quote"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "quotes"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "range"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "read"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "reassign"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "recheck"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "recursive"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "ref"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "referencing"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "refresh"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "reindex"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "relative"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "release"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "rename"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "repeatable"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "replace"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "replica"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "reset"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "restart"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "restrict"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "return"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "returns"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "revoke"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "role"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "rollback"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "rollup"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "routine"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "routines"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "rows"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "rule"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "savepoint"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "scalar"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "schema"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "schemas"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "scroll"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "search"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "second"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "security"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "sequence"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "sequences"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "serializable"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "server"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "session"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "set"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "sets"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "share"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "show"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "simple"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "skip"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "snapshot"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "source"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "sql"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "stable"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "standalone"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "start"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "statement"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "statistics"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "stdin"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "stdout"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "storage"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "stored"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "strict"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "string"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "strip"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "subscription"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "support"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "sysid"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "system"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "tables"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "tablespace"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "target"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "temp"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "template"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "temporary"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "text"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "ties"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "transaction"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "transform"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "trigger"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "truncate"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "trusted"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "type"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "types"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "uescape"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "unbounded"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "uncommitted"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "unconditional"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "unencrypted"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "unknown"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "unlisten"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "unlogged"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "until"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "update"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "vacuum"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "valid"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "validate"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "validator"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "value"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "varying"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "version"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "view"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "views"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "volatile"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "whitespace"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "within"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "without"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "work"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "wrapper"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "write"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "xml"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "year"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "yes"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "zone"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "between"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "bigint"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "bit"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "boolean"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "char"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "character"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "coalesce"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "dec"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "decimal"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "exists"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "extract"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "float"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "greatest"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "grouping"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "inout"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "int"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "integer"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "interval"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "json"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "json_array"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "json_arrayagg"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "json_exists"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "json_object"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "json_objectagg"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "json_query"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "json_scalar"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "json_serialize"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "json_table"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "json_value"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "least"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "merge_action"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "national"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "nchar"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "none"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "normalize"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "nullif"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "numeric"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "out"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "overlay"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "position"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "precision"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "real"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "row"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "setof"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "smallint"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "substring"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "time"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "timestamp"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "treat"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "trim"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "values"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "varchar"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "xmlattributes"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "xmlconcat"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "xmlelement"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "xmlexists"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "xmlforest"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "xmlparse"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "xmlpi"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "xmlroot"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "xmlserialize"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "xmltable"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "authorization"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "binary"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "collation"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "concurrently"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "cross"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "current_schema"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "freeze"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "full"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "ilike"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "inner"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "is"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "isnull"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "join"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "left"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "like"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "natural"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "notnull"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "outer"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "overlaps"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "right"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "similar"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "tablesample"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "verbose"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "all"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "analyse"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "analyze"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "and"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "any"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "array"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "as"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "asc"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "asymmetric"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "both"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "case"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "cast"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "check"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "collate"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "column"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "constraint"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "create"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "current_catalog"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "current_date"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "current_role"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "current_time"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "current_timestamp"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "current_user"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "default"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "deferrable"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "desc"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "distinct"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "do"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "else"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "end"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "except"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "false"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "fetch"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "for"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "foreign"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "from"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "grant"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "group"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "having"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "in"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "initially"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "intersect"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "into"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "lateral"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "leading"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "limit"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "localtime"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "localtimestamp"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "not"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "null"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "offset"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "on"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "only"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "or"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "order"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "placing"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "primary"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "references"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "returning"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "select"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "session_user"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "some"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "symmetric"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "system_user"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "table"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "then"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "to"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "trailing"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "true"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "union"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "unique"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "user"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "using"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "variadic"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "when"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "where"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "window"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "with"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "abort"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "absent"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "absolute"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "access"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "action"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "add"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "admin"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "after"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "aggregate"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "all"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "also"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "alter"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "always"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "analyse"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "analyze"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "and"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "any"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "asc"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "asensitive"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "assertion"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "assignment"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "asymmetric"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "at"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "atomic"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "attach"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "attribute"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "authorization"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "backward"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "before"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "begin"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "between"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "bigint"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "binary"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "bit"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "boolean"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "both"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "breadth"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "by"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "cache"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "call"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "called"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "cascade"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "cascaded"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "case"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "cast"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "catalog"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "chain"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "characteristics"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "check"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "checkpoint"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "class"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "close"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "cluster"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "coalesce"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "collate"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "collation"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "column"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "columns"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "comment"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "comments"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "commit"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "committed"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "compression"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "concurrently"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "conditional"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "configuration"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "conflict"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "connection"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "constraint"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "constraints"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "content"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "continue"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "conversion"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "copy"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "cost"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "cross"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "csv"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "cube"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "current"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "current_catalog"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "current_date"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "current_role"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "current_schema"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "current_time"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "current_timestamp"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "current_user"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "cursor"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "cycle"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "data"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "database"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "deallocate"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "dec"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "decimal"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "declare"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "default"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "defaults"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "deferrable"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "deferred"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "definer"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "delete"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "delimiter"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "delimiters"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "depends"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "depth"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "desc"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "detach"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "dictionary"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "disable"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "discard"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "distinct"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "do"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "document"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "domain"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "double"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "drop"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "each"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "else"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "empty"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "enable"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "encoding"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "encrypted"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "end"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "enum"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "error"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "escape"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "event"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "exclude"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "excluding"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "exclusive"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "execute"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "exists"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "explain"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "expression"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "extension"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "external"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "extract"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "false"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "family"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "finalize"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "first"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "float"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "following"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "force"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "foreign"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "format"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "forward"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "freeze"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "full"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "function"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "functions"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "generated"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "global"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "granted"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "greatest"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "grouping"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "groups"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "handler"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "header"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "hold"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "identity"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "if"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "ilike"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "immediate"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "immutable"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "implicit"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "import"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "in"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "include"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "including"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "increment"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "indent"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "index"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "indexes"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "inherit"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "inherits"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "initially"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "inline"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "inner"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "inout"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "input"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "insensitive"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "insert"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "instead"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "int"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "integer"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "interval"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "invoker"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "is"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "isolation"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "join"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "json"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "json_array"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "json_arrayagg"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "json_exists"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "json_object"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "json_objectagg"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "json_query"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "json_scalar"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "json_serialize"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "json_table"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "json_value"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "keep"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "key"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "keys"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "label"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "language"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "large"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "last"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "lateral"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "leading"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "leakproof"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "least"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "left"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "level"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "like"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "listen"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "load"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "local"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "localtime"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "localtimestamp"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "location"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "lock"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "locked"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "logged"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "mapping"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "match"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "matched"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "materialized"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "maxvalue"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "merge"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "merge_action"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "method"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "minvalue"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "mode"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "move"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "name"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "names"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "national"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "natural"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "nchar"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "nested"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "new"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "next"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "nfc"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "nfd"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "nfkc"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "nfkd"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "no"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "none"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "normalize"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "normalized"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "not"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "nothing"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "notify"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "nowait"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "null"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "nullif"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "nulls"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "numeric"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "object"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "of"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "off"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "oids"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "old"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "omit"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "only"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "operator"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "option"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "options"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "or"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "ordinality"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "others"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "out"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "outer"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "overlay"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "overriding"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "owned"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "owner"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "parallel"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "parameter"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "parser"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "partial"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "partition"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "passing"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "password"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "path"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "placing"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "plan"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "plans"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "policy"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "position"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "preceding"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "prepare"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "prepared"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "preserve"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "primary"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "prior"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "privileges"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "procedural"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "procedure"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "procedures"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "program"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "publication"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "quote"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "quotes"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "range"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "read"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "real"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "reassign"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "recheck"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "recursive"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "ref"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "references"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "referencing"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "refresh"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "reindex"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "relative"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "release"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "rename"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "repeatable"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "replace"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "replica"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "reset"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "restart"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "restrict"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "return"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "returns"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "revoke"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "right"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "role"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "rollback"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "rollup"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "routine"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "routines"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "row"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "rows"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "rule"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "savepoint"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "scalar"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "schema"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "schemas"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "scroll"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "search"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "security"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "select"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "sequence"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "sequences"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "serializable"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "server"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "session"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "session_user"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "set"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "setof"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "sets"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "share"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "show"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "similar"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "simple"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "skip"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "smallint"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "snapshot"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "some"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "source"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "sql"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "stable"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "standalone"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "start"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "statement"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "statistics"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "stdin"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "stdout"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "storage"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "stored"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "strict"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "string"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "strip"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "subscription"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "substring"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "support"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "symmetric"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "sysid"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "system"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "system_user"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "table"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "tables"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "tablesample"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "tablespace"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "target"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "temp"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "template"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "temporary"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "text"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "then"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "ties"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "time"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "timestamp"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "trailing"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "transaction"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "transform"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "treat"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "trigger"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "trim"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "true"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "truncate"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "trusted"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "type"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "types"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "uescape"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "unbounded"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "uncommitted"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "unconditional"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "unencrypted"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "unique"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "unknown"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "unlisten"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "unlogged"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "until"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "update"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "user"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "using"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "vacuum"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "valid"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "validate"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "validator"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "value"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "values"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "varchar"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "variadic"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "verbose"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "version"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "view"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "views"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "volatile"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "when"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "whitespace"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "work"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "wrapper"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "write"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "xml"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "xmlattributes"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "xmlconcat"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "xmlelement"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "xmlexists"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "xmlforest"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "xmlparse"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "xmlpi"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "xmlroot"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "xmlserialize"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "xmltable"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "yes"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "zone"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2012
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2018
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2023
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2028
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2033
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2038
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2043
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2048
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2053
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2058
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2063
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2068
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2073
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2078
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2083
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2088
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2093
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2098
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2102
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2106
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2114
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2118
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2122
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2127
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2134
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2139
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2146
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2151
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2158
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2163
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2170
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2177
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2184
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2191
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2198
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2202
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2206
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2210
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2214
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2223
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2227
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2231
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2235
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2239
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2243
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2247
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2252
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2257
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1154:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2262
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2267
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2272
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2277
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2282
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2287
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2296
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2306
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2310
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2315
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2321
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2327
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2334
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2341
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2349
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2366
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2385
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2390
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2392
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2396
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2401
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2405
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2410
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2415
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2420
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2425
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2430
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2435
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2440
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2445
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2450
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2455
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2460
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2469
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2473
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2478
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2483
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2488
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2495
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2498
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2507
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2514
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2515
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2521
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2530
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2534
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2538
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2544
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2550
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2567
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2568
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2570
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2571
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2575
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2579
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2583
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2587
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2591
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2595
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2603
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2608
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2615
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2625
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2630
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2637
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2648
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2654
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2655
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2656
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2660
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2667
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2669
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2671
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2673
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2675
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2677
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2679
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2683
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2691
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2706
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2717
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2728
		{
			yyVAL.list = nil
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2737
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2747
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2751
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2761
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2765
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2771
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.node = nil
		}
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2776
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2780
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2784
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2788
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.list = nil
		}
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2795
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2807
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2831
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2864
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2870
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2878
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2883
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2888
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2893
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2898
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2903
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2908
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2913
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2918
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2923
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2928
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2933
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2938
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2946
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2951
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2956
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2961
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2965
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2973
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2981
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2991
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2999
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3007
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3015
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3023
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3031
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3040
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3048
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3056
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3064
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3072
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3078
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3083
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3088
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3093
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3098
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3103
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3108
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3113
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3118
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3123
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3132
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3141
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1306:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3146
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3152
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3158
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3169
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3177
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3189
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3201
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3214
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3222
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3228
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3234
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3242
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1318:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3253
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1319:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3278
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3294
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1321:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3314
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3324
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3328
		{
			yyVAL.list = nil
		}
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3335
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3339
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3343
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3347
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3356
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3363
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3368
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3372
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3379
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3389
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3390
		{
			yyVAL.str = "year"
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3391
		{
			yyVAL.str = "month"
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3392
		{
			yyVAL.str = "day"
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3393
		{
			yyVAL.str = "hour"
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3394
		{
			yyVAL.str = "minute"
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.str = "second"
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3396
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3401
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3406
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3414
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3417
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3422
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3426
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3434
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3438
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3443
		{
			yyVAL.bval = true
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.bval = false
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.bval = false
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.bval = true
		}
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3449
		{
			yyVAL.bval = false
		}
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3450
		{
			yyVAL.bval = false
		}
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3455
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3459
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3466
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3470
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3474
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3485
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3486
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3487
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3491
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3495
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3510
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3517
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1369:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3523
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1370:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3529
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3537
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3543
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3551
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3555
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3562
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3566
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3570
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3577
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3582
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.node = nil
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3587
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3589
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3603
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3604
		{
			yyVAL.node = nil
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3609
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3624
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3632
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3634
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3642
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3646
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3652
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3659
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3663
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3667
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3671
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.str = "NFC"
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.str = "NFD"
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3687
		{
			yyVAL.str = "NFKC"
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.str = "NFKD"
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3692
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3694
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3695
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3696
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3700
		{
			yyVAL.bval = true
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.bval = true
		}
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.bval = false
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3703
		{
			yyVAL.bval = false
		}
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3704
		{
			yyVAL.bval = false
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3713
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3722
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3727
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3733
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3738
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3749
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3758
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3767
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3776
		{
			yyVAL.list = nil
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3781
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3782
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3784
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3785
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3787
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3792
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3796
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3799
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3800
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3801
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3804
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3810
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3814
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3818
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3825
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3829
		{
			yyVAL.list = nil
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3835
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3841
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3856
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3864
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3868
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3872
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3876
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3880
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3890
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3895
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3901
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3905
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3911
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3915
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3921
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3925
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3933
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3937
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3945
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3953
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3961
		{
			yyVAL.str = "varchar"
		}
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3965
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3973
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3981
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3991
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4002
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4016
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4030
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4042
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4054
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4064
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4076
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4088
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4093
		{
			yyVAL.ival = 1
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4094
		{
			yyVAL.ival = 0
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4095
		{
			yyVAL.ival = 0
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4098
		{
			yyVAL.ival = 1
		}
	case 1489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4099
		{
			yyVAL.ival = 0
		}
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4103
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4113
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4120
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4124
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4131
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4135
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4140
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4141
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.str = "+"
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4145
		{
			yyVAL.str = "-"
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4146
		{
			yyVAL.str = "*"
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4147
		{
			yyVAL.str = "/"
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4148
		{
			yyVAL.str = "%"
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4149
		{
			yyVAL.str = "^"
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4150
		{
			yyVAL.str = "<"
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4151
		{
			yyVAL.str = ">"
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4152
		{
			yyVAL.str = "="
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4153
		{
			yyVAL.str = "<="
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4154
		{
			yyVAL.str = ">="
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4155
		{
			yyVAL.str = "<>"
		}
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4159
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4163
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4172
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4173
		{
			yyVAL.list = nil
		}
	case 1514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4178
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4182
		{
			yyVAL.list = nil
		}
	case 1516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4187
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.node = nil
		}
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4195
		{
			yyVAL.ival = 0
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.ival = 0
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4200
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4220
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4221
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4225
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4226
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4235
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4236
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4245
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4247
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4254
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4266
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4278
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4284
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4291
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4304
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4323
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4324
		{
			yyVAL.list = nil
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4328
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4329
		{
			yyVAL.list = nil
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4334
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4338
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4346
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4359
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4360
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4361
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4365
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4366
		{
			yyVAL.list = nil
		}
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4371
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4372
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1552:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4384
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1553:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4403
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4421
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4431
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4436
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4441
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4446
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4458
		{
			yyVAL.list = nil
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4462
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4463
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4468
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4472
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4477
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4482
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4493
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4494
		{
			yyVAL.list = nil
		}
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4498
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4499
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4508
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4516
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4526
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4537
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4548
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4552
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4558
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4576
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4595
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4603
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4612
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4620
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4632
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4638
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4645
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4651
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4657
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4667
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4671
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4677
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4694
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4698
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4707
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4733
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4759
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4767
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4777
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4778
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4779
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4780
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4785
		{
			yyVAL.ival = 1
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4786
		{
			yyVAL.ival = 0
		}
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4796
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4807
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4818
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4822
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4826
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4832
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4833
		{
			yyVAL.with = nil
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4838
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4842
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1612:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4850
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4878
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4879
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4880
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1616:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4885
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1617:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4891
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4897
		{
			yyVAL.node = nil
		}
	case 1619:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4904
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4913
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4921
		{
			yyVAL.node = nil
		}
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4932
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4940
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4954
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4955
		{
			yyVAL.node = nil
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4963
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4965
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4969
		{
			yyVAL.node = nil
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4973
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4981
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4982
		{
			yyVAL.alias = nil
		}
	case 1632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4987
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4992
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4996
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5012
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5016
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5020
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5025
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5030
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5038
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5042
		{
			yyVAL.alias = nil
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5050
		{
			yyVAL.ival = 1
		}
	case 1644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5051
		{
			yyVAL.ival = 0
		}
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5061
		{
			yyVAL.list = nil
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5071
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.into = nil
		}
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5085
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5094
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.ival = 1
		}
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5105
		{
			yyVAL.ival = 0
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5115
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5122
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5131
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5132
		{
			yyVAL.list = nil
		}
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5142
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5146
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5158
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5171
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5172
		{
			yyVAL.list = nil
		}
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5178
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5182
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5191
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5202
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5207
		{
			yyVAL.node = nil
		}
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.str = "BY REF"
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5213
		{
			yyVAL.str = "BY VALUE"
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5219
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5223
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5227
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5231
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5239
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5243
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5251
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5256
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1680:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5265
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1681:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5273
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5284
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5288
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5297
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5302
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5307
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5317
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5321
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5330
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5334
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5338
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5342
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5346
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1694:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5359
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5383
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5395
		{
			yyVAL.node = nil
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5400
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5401
		{
			yyVAL.node = nil
		}
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5405
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5406
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5411
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5417
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5418
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5428
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5440
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5444
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.bval = false
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5452
		{
			yyVAL.bval = true
		}
	case 1711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5453
		{
			yyVAL.bval = false
		}
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.bval = false
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5458
		{
			yyVAL.bval = true
		}
	case 1714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5459
		{
			yyVAL.bval = true
		}
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5464
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5465
		{
			yyVAL.list = nil
		}
	case 1717:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5476
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1718:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5491
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5504
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5511
		{
			yyVAL.node = nil
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5517
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5525
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5536
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5537
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5538
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5539
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5540
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5541
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5542
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5543
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5548
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5552
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5556
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5560
		{
			yyVAL.node = nil
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5565
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5566
		{
			yyVAL.node = nil
		}
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5571
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5572
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5573
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5574
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5575
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5576
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5577
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5578
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5579
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5584
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5585
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5586
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5594
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5614
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5624
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5625
		{
			yyVAL.node = nil
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5630
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5631
		{
			yyVAL.node = nil
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5637
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5641
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5650
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1760:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5659
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1761:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5673
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1762:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5687
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1763:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5698
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1764:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5707
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5718
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5719
		{
			yyVAL.node = nil
		}
	case 1767:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5735
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5747
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5751
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5760
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5766
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5773
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1773:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5780
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5788
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5797
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5798
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5803
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5807
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5815
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1780:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5827
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5840
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5844
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5855
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1784:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5861
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5881
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5887
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5888
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1788:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5898
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5910
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5914
		{
			yyVAL.list = nil
		}
	case 1791:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5929
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5946
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5950
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1794:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5961
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1795:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5985
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6021
		{
			yyVAL.ival = 1
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6022
		{
			yyVAL.ival = 0
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.ival = 1
		}
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6027
		{
			yyVAL.ival = 0
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6031
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6032
		{
			yyVAL.str = ""
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6033
		{
			yyVAL.str = ""
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6038
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6041
		{
			yyVAL.node = nil
		}
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6049
		{
			yyVAL.node = nil
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6053
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6054
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6059
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6067
		{
			yyVAL.list = nil
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6074
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6086
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6090
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6094
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6098
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6102
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6106
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6114
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1822:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6122
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6126
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6130
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6138
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6142
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6149
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6155
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6156
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6157
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6159
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6160
		{
			yyVAL.node = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6165
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6169
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6175
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.str = "true"
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.str = "false"
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6181
		{
			yyVAL.str = "on"
		}
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6182
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6186
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6187
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6189
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6194
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6198
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6199
		{
			yyVAL.node = nil
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6203
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6204
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6205
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6206
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6208
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6209
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6210
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6214
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6215
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6216
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6221
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6222
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6223
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6224
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6229
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6234
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6241
		{
			yyVAL.bval = true
		}
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6242
		{
			yyVAL.bval = false
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6246
		{
			yyVAL.ival = 1
		}
	case 1869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6247
		{
			yyVAL.ival = 0
		}
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6263
		{
			yyVAL.node = nil
		}
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6265
		{
			yyVAL.node = nil
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6273
		{
			yyVAL.ival = 1
		}
	case 1875:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6274
		{
			yyVAL.ival = 0
		}
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6278
		{
			yyVAL.ival = 1
		}
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.ival = 0
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6283
		{
			yyVAL.ival = 1
		}
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6284
		{
			yyVAL.ival = 0
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6288
		{
			yyVAL.ival = 1
		}
	case 1881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6289
		{
			yyVAL.ival = 0
		}
	case 1882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6298
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1883:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6304
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6310
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1885:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6316
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6322
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6330
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1888:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6331
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6335
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1890:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6336
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6340
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6341
		{
			yyVAL.node = nil
		}
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6346
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6361
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6370
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1896:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6377
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1897:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6384
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1898:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6397
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6410
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6419
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1901:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6434
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1902:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6444
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6452
		{
			yyVAL.onconflict = nil
		}
	case 1904:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6463
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6472
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6479
		{
			yyVAL.node = nil
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6490
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6494
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6501
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6505
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6512
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6517
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6522
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1914:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6530
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6541
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6555
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6556
		{
			yyVAL.list = nil
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6560
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6561
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6562
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6566
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6567
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6568
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6573
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6577
		{
			yyVAL.list = nil
		}
	case 1926:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6598
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1927:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6614
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1928:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6631
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1929:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6647
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1930:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6664
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1931:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6681
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6699
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6700
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6701
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6702
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6703
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6704
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6705
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1939:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6706
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6710
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6711
		{
			yyVAL.list = nil
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6716
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6721
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6728
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6729
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6730
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6735
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6742
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6746
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6750
		{
			yyVAL.ival = 0
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6756
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6757
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6758
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6759
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6761
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6762
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6763
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6764
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6765
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6770
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6771
		{
			yyVAL.str = "default"
		}
	case 1963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6775
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6776
		{
			yyVAL.str = ""
		}
	case 1965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6780
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6781
		{
			yyVAL.str = "default"
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1968:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.str = ""
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6791
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6792
		{
			yyVAL.list = nil
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6797
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6803
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6810
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6811
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6816
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1976:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6822
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1977:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6833
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1978:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6862
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1979:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6871
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6881
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6897
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6901
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1984:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6909
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6910
		{
			yyVAL.list = nil
		}
	case 1986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6915
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6919
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6927
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6933
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6938
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1991:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6943
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6955
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1993:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6960
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6967
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6972
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6973
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6975
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6988
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6993
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6998
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7003
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7011
		{
			yyVAL.bval = true
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7012
		{
			yyVAL.bval = false
		}
	case 2004:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7013
		{
			yyVAL.bval = true
		}
	case 2005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7017
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7018
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7023
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7025
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7030
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7034
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7038
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7048
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7054
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7055
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7060
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7064
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7068
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7072
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7076
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7080
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7084
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7088
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7092
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7096
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7100
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7108
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7112
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7116
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7120
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7126
		{
		}
	case 2032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7127
		{
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7131
		{
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7132
		{
		}
	case 2035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7133
		{
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7138
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7145
		{
			yyVAL.bval = false
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7149
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7150
		{
			yyVAL.list = nil
		}
	case 2040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7155
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7159
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2042:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7163
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2043:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7172
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2044:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7178
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7184
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2046:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7190
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2047:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7207
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2048:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7214
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7224
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7229
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2051:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7234
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2052:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7242
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7253
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2054:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7264
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2055:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7274
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2056:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7285
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2057:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7306
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7320
		{
			yyVAL.bval = true
		}
	case 2059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7321
		{
			yyVAL.bval = false
		}
	case 2060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7327
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7333
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7341
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2063:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7346
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2064:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7354
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7358
		{
			yyVAL.list = nil
		}
	case 2066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7365
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7369
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7373
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2069:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7377
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7384
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7394
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7404
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7411
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7418
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7433
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7446
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7453
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7460
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7467
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7474
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7481
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7490
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7491
		{
			yyVAL.list = nil
		}
	case 2084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7495
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2085:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7496
		{
			yyVAL.partspec = nil
		}
	case 2086:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7501
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7509
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7514
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7522
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7529
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2091:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7536
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7545
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7546
		{
			yyVAL.str = ""
		}
	case 2094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7550
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7551
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7552
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2097:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7553
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7557
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2099:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7558
		{
			yyVAL.str = ""
		}
	case 2100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7562
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7563
		{
			yyVAL.str = ""
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7567
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2103:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7580
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2104:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7595
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7611
		{
			yyVAL.bval = true
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7612
		{
			yyVAL.bval = false
		}
	case 2107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7616
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7617
		{
			yyVAL.str = "btree"
		}
	case 2109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7621
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7622
		{
			yyVAL.list = nil
		}
	case 2111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7627
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7632
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7640
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7641
		{
			yyVAL.list = nil
		}
	case 2115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7653
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7659
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7666
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7672
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7679
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7688
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7694
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7701
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7707
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7714
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2125:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7720
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7727
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7733
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7740
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7749
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2130:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7759
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2131:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7766
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2132:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7774
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2133:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7781
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2134:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7789
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2135:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7796
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7807
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7812
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7820
		{
			yyVAL.bval = true
		}
	case 2139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7821
		{
			yyVAL.bval = false
		}
	case 2140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7826
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7831
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7839
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7870
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7893
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7900
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7907
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7918
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7925
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7932
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7939
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7946
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7951
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7956
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7961
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7966
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7971
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7978
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7983
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7990
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7995
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8000
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8005
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2163:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8010
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8020
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8025
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2166:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8032
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8039
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8047
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2169:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8058
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8068
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8073
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8078
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8089
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8094
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8102
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8110
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8115
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8120
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8125
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8130
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8135
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8140
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8145
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8150
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8155
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8160
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8165
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8170
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8175
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8180
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8185
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8190
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8195
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8200
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8205
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8211
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8216
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8223
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8228
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8233
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8238
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8243
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8248
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8253
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8258
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2206:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8263
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8267
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8275
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8283
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8290
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8301
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8310
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8311
		{
			yyVAL.node = nil
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8315
		{
		}
	case 2215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8316
		{
		}
	case 2216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8327
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8340
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8353
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8366
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8379
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8394
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8409
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8422
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8435
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8448
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8461
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8474
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8490
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8496
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8502
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8511
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8515
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8518
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8522
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8524
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8528
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8532
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8539
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8543
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8549
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8550
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8554
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8563
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8567
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8575
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8580
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8587
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8591
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8599
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8605
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8606
		{
			yyVAL.str = "analyze"
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8607
		{
			yyVAL.str = "format"
		}
	case 2253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8611
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8612
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8613
		{
			yyVAL.node = nil
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8632
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8653
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8660
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8669
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8675
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8676
		{
			yyVAL.list = nil
		}
	case 2269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8681
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8685
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8693
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8699
		{
			yyVAL.str = "analyze"
		}
	case 2273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8700
		{
			yyVAL.str = "analyse"
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8709
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8713
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8717
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8721
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8725
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8736
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8740
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8751
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8755
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8759
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8768
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8777
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8788
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8789
		{
			yyVAL.str = ""
		}
	case 2288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8798
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8811
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8824
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8839
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8840
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8844
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8845
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8849
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8850
		{
			yyVAL.list = nil
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8859
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8870
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8874
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8878
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8882
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8886
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8893
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8894
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8895
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8896
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8897
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8898
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8899
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8900
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8901
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8902
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8903
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8904
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8905
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8918
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8919
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8924
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8928
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8936
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8948
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8953
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2323:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8955
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8957
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8961
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8974
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8976
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8980
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2329:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8991
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9002
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9013
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9024
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2333:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9035
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2334:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9047
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9058
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9069
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9080
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2338:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9091
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2339:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9108
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2340:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9125
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2341:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9137
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9149
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9160
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9171
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9182
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9193
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9204
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9215
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9226
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9237
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9248
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9259
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9270
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9281
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2355:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9292
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9303
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2357:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9314
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9325
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2359:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9336
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2360:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9347
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2361:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9360
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9373
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2363:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9386
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2364:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9399
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2365:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9412
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9425
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2367:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9437
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2368:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9449
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2369:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9462
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2370:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9475
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9487
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9499
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9510
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9521
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2375:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9532
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2376:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9543
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2377:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9554
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2378:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9565
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9576
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9587
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9598
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2382:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9609
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9635
		{
			yyVAL.ival = 0
		}
	case 2384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9637
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9651
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9652
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9653
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9654
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9655
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9656
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9660
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9665
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9670
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9678
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9682
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9686
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9690
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2398:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9704
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2399:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9718
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9734
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2401:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9749
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9764
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9765
		{
			yyVAL.list = nil
		}
	case 2404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9770
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9774
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9782
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9786
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9791
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9799
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9808
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9817
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9826
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9835
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9846
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9847
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9848
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9849
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9850
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9854
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9858
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9860
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9870
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9882
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9883
		{
			yyVAL.list = nil
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9888
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9894
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9902
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9906
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9910
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9914
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9918
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9925
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9931
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9941
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9947
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9955
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9959
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9971
		{
			yyVAL.node = nil
		}
	case 2439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9978
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9987
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9997
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10003
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10004
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10009
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10013
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2446:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10029
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2447:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10061
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10092
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10093
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10094
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10099
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10101
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10141
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10148
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10155
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10162
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10169
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10178
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10179
		{
			yyVAL.list = nil
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10183
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10188
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10196
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10207
		{
			yyVAL.bval = true
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10208
		{
			yyVAL.bval = false
		}
	case 2465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10212
		{
			yyVAL.bval = true
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10213
		{
			yyVAL.bval = false
		}
	case 2467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10217
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10222
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10226
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10238
		{
			yyVAL.bval = true
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10239
		{
			yyVAL.bval = false
		}
	case 2474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10243
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10244
		{
			yyVAL.node = nil
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10253
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10258
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10262
		{
			yyVAL.list = nil
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10267
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10270
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10271
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10272
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10276
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10277
		{
			yyVAL.rangevar = nil
		}
	case 2487:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10290
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2488:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10306
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2489:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10322
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2490:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10338
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10355
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10356
		{
			yyVAL.list = nil
		}
	case 2493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10360
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10361
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10362
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10363
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10374
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10381
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2499:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10388
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10395
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10411
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10429
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10435
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10440
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10445
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2506:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10451
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2507:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10459
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2508:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10467
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10482
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10498
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10504
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10509
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10514
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10520
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10525
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10530
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10535
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10540
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2519:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10545
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10550
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2521:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10555
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2522:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10560
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2523:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10571
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10576
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10590
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10595
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10602
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10603
		{
			yyVAL.list = nil
		}
	case 2529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10606
		{
		}
	case 2530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10607
		{
		}
	case 2531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10618
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10622
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10635
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2534:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10640
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10648
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10657
		{
			yyVAL.list = nil
		}
	case 2537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10664
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10668
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10672
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10677
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10690
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10698
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10707
		{
			yyVAL.list = nil
		}
	case 2544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10714
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10727
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10731
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10735
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2548:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10739
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2549:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10746
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10750
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10754
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2552:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10758
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2553:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10767
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10776
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10780
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2556:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10784
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10789
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2558:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10801
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2559:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10807
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10811
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10817
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10818
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10819
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10820
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10824
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10825
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10829
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10830
		{
			yyVAL.list = nil
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10834
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10835
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2571:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10852
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2572:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10857
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10863
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10871
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10877
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10878
		{
			yyVAL.str = ""
		}
	case 2578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10882
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10883
		{
			yyVAL.str = ""
		}
	case 2580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10887
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10888
		{
			yyVAL.str = ""
		}
	case 2582:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10901
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2583:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10907
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2584:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10913
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2585:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10919
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10931
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2587:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10935
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10941
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2589:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10947
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2590:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10951
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10957
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10958
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10963
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10969
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10975
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10981
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10995
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10999
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11007
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11014
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11021
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11025
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11033
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2604:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11040
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2605:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11048
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2606:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11057
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11066
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11074
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11090
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11092
		{
			yyVAL.list = nil
		}
	case 2611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11097
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11099
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11104
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11113
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11118
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11129
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2617:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11149
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2618:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11157
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11168
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11174
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11175
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11180
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11192
		{
			yyVAL.bval = true
		}
	case 2624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11193
		{
			yyVAL.bval = false
		}
	case 2625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11194
		{
			yyVAL.bval = true
		}
	case 2626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11199
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.list = nil
		}
	case 2632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11219
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11221
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11225
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11230
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11235
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11240
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11248
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11253
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11258
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11262
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11273
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11281
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11285
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11289
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11293
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11300
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11304
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11311
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11317
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11324
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11325
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11329
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11330
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11332
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11339
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11346
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11347
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11348
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11352
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11353
		{
			yyVAL.str = "default"
		}
	case 2662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11354
		{
			yyVAL.str = ""
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11358
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11359
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11364
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11365
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11366
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11370
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11371
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11376
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11382
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11387
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11395
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11399
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11403
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11407
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11411
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11417
		{
			yyVAL.str = "read uncommitted"
		}
	case 2680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11418
		{
			yyVAL.str = "read committed"
		}
	case 2681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11419
		{
			yyVAL.str = "repeatable read"
		}
	case 2682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11420
		{
			yyVAL.str = "serializable"
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11424
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11425
		{
			yyVAL.list = nil
		}
	case 2685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11429
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11430
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11431
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11435
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11436
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11440
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11441
		{
			yyVAL.list = nil
		}
	case 2693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11445
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11446
		{
			yyVAL.node = nil
		}
	case 2695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11450
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11455
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11460
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11468
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11472
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11478
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11484
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11490
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11491
		{
			yyVAL.str = ""
		}
	case 2704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11495
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11496
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11497
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11498
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11502
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11507
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11512
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11519
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11520
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2713:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11531
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2714:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11535
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11547
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11549
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11550
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11555
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11560
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11568
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11575
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11580
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2725:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11594
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11600
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11601
		{
			yyVAL.rolespec = nil
		}
	case 2728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11606
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11610
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2730:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11625
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2731:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11633
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11640
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11652
		{
			yyVAL.bval = true
		}
	case 2734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11656
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11657
		{
			yyVAL.str = "all"
		}
	case 2736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11661
		{
			yyVAL.str = "all"
		}
	case 2737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11662
		{
			yyVAL.str = "select"
		}
	case 2738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11663
		{
			yyVAL.str = "insert"
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11664
		{
			yyVAL.str = "update"
		}
	case 2740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11665
		{
			yyVAL.str = "delete"
		}
	case 2741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11669
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11670
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11678
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11679
		{
			yyVAL.list = nil
		}
	case 2745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11683
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11684
		{
			yyVAL.node = nil
		}
	case 2747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11688
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11689
		{
			yyVAL.node = nil
		}
	case 2749:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11700
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11706
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11707
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2752:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11718
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2753:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11722
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2754:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11729
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2755:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11733
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11739
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11740
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11744
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11745
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11746
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11757
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2762:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11761
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2763:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11765
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2764:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11772
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11776
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2766:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11780
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2767:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11784
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11790
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11791
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11796
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11801
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2772:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11805
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11809
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11821
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11827
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11832
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11838
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11839
		{
			yyVAL.node = nil
		}
	case 2779:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11850
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2780:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11857
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2781:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11861
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2782:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11865
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2783:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11869
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2784:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11873
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2785:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11877
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11881
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11887
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11893
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2789:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11906
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2790:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11910
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2791:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11914
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11920
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11921
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11922
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2795:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11934
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11940
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11941
		{
			yyVAL.list = nil
		}
	case 2798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11945
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11946
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11951
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2801:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11957
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11961
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2803:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11965
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11969
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11975
		{
			yyVAL.bval = true
		}
	case 2806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11976
		{
			yyVAL.bval = false
		}
	case 2807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11980
		{
			yyVAL.list = nil
		}
	case 2808:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11981
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11982
		{
			yyVAL.list = nil
		}
	case 2810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11986
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11987
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2812:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11998
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2813:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12011
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2814:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12015
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12021
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12022
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2817:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12027
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2818:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12033
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2819:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12048
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2820:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12061
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2821:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12068
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2822:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12074
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2823:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12080
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2824:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12086
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2825:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12101
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2826:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12107
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12113
		{
			yyVAL.bval = true
		}
	case 2828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12114
		{
			yyVAL.bval = false
		}
	case 2829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12119
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12120
		{
			yyVAL.list = nil
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12124
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12125
		{
			yyVAL.list = nil
		}
	case 2833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12129
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12130
		{
			yyVAL.list = nil
		}
	case 2835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12133
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12134
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12135
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12140
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12147
		{
			yyVAL.groupClause = nil
		}
	case 2840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12153
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12154
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12158
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12159
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12160
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12161
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12162
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12167
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12174
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12181
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12188
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12197
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12198
		{
			yyVAL.node = nil
		}
	case 2853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12205
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12209
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12210
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12215
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12222
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12233
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12235
		{
			yyVAL.list = nil
		}
	case 2860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12240
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12245
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12253
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12262
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12264
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12271
		{
			yyVAL.windef = nil
		}
	case 2866:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12276
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12290
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12291
		{
			yyVAL.str = ""
		}
	case 2869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12295
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12296
		{
			yyVAL.list = nil
		}
	case 2871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12301
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12308
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12315
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12322
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12333
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12347
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12382
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12390
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12398
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12406
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12414
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12424
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12425
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12426
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12427
		{
			yyVAL.ival = 0
		}
	case 2886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12428
		{
			yyVAL.ival = 0
		}
	case 2887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12437
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12442
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12447
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12451
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12461
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12462
		{
			yyVAL.selectLimit = nil
		}
	case 2893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12467
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2894:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12475
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2895:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12482
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2896:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12490
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2897:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12498
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2898:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12506
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12517
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12520
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12524
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12526
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12533
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12546
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12548
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12552
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12559
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12560
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12565
		{
			yyVAL.ival = 0
		}
	case 2910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12566
		{
			yyVAL.ival = 0
		}
	case 2911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12570
		{
			yyVAL.ival = 0
		}
	case 2912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12571
		{
			yyVAL.ival = 0
		}
	case 2913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12584
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12590
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12596
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12602
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12608
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12613
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12618
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2920:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12623
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2921:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12628
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12633
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12639
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12645
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12654
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12660
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12667
		{
		}
	case 2928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12668
		{
		}
	case 2929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12669
		{
		}
	case 2930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12673
		{
			yyVAL.bval = true
		}
	case 2931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12674
		{
			yyVAL.bval = false
		}
	case 2932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12675
		{
			yyVAL.bval = false
		}
	case 2933:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12688
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2934:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12695
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12702
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2936:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12709
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2937:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12715
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2938:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12724
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2939:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12728
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2940:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12732
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2941:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12736
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12742
		{
			yyVAL.str = ""
		}
	case 2943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12743
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2944:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12748
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12758
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2946:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12762
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12766
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2948:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12770
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12774
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2950:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12778
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12786
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2952:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12797
		{
			yyVAL.list = nil
		}
	case 2953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12802
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12813
		{
			yyVAL.list = nil
		}
	case 2955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12817
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12819
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12823
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12827
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12831
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12835
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12842
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12846
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12850
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12854
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12859
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12863
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12898
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12902
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12906
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12912
		{
			yyVAL.ival = 1
		}
	case 2971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12913
		{
			yyVAL.ival = -1
		}
	case 2972:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12925
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2973:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12937
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2974:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12946
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2975:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12958
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2976:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12964
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2977:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12973
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2978:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12980
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2979:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12999
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13005
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2981:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13006
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13011
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13015
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13019
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2985:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13031
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2986:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13039
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2987:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13047
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13057
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13058
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13059
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13060
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 2992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13061
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 2993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13062
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 2994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13067
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13069
		{
			yyVAL.list = nil
		}
	case 2996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13071
		{
			yyVAL.list = nil
		}
	case 2997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13073
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2998:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13078
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13084
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13085
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13089
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13093
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13097
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13101
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13105
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13115
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13123
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13131
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3009:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13139
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13147
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13155
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13163
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3013:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13171
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13179
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13187
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13195
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13203
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13211
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13219
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13227
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13235
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3022:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13243
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3023:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13251
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3024:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13259
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3025:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13267
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3026:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13275
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13286
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13287
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13291
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13292
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3031:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13297
		{
			yyVAL.bval = true
		}
	case 3032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13298
		{
			yyVAL.bval = false
		}
	case 3033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13302
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13303
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13308
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13314
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13315
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13316
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13319
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13320
		{
			yyVAL.rolespec = nil
		}
	case 3041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13325
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13329
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13337
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13341
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13346
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13347
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3047:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13351
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3048:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13359
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13363
		{
			yyVAL.node = nil
		}
	case 3050:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13377
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3051:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13382
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3052:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13387
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13395
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13396
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3055:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13402
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3056:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13406
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13410
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13414
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13418
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13422
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13426
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13430
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13434
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13438
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13442
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13446
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13450
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13454
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13458
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13462
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13467
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13473
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13474
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13479
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13483
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13487
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13493
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13494
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13495
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13496
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13497
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13508
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13521
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13528
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13535
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13549
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13551
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3090:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13563
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3091:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13571
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13584
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13585
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3094:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13591
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3095:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13598
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13606
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3097:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13614
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13635
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13636
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13637
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13638
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13648
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13655
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13659
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13663
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13667
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13671
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13674
		{
			yyVAL.ival = 0
		}
	case 3109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13677
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13678
		{
			yyVAL.ival = 0
		}
	case 3111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13679
		{
			yyVAL.ival = 0
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13683
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13689
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13697
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13701
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13705
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13709
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13713
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13717
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13721
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13725
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13729
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13733
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13737
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13741
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13745
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13749
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13753
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13757
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13762
		{
			yyVAL.ival = 0
		}
	case 3131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13763
		{
			yyVAL.ival = 0
		}
	case 3132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13767
		{
			yyVAL.ival = 0
		}
	case 3133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13768
		{
			yyVAL.ival = 0
		}
	case 3134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13773
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13778
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13790
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13797
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13800
		{
			yyVAL.list = nil
		}
	case 3139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13804
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13805
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13806
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13807
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13808
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13812
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3145:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13816
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3146:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:13826
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13839
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13842
		{
			yyVAL.list = nil
		}
	case 3149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13848
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13856
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13860
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13864
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13868
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13879
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13890
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13894
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13905
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13915
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13916
		{
			yyVAL.str = ""
		}
	case 3160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13925
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13936
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13948
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13949
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13953
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13954
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13955
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13956
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13957
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13958
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13959
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13960
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13969
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13983
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13987
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13991
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13995
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13999
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14003
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14007
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14011
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3181:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14015
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3182:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14022
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3183:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14033
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14040
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14044
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3186:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14048
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14056
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14066
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14076
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3190:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14080
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14094
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14095
		{
			yyVAL.str = ""
		}
	case 3193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14104
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3194:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14108
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14112
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3196:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14116
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3197:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14120
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3198:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14124
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3199:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14128
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3200:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14132
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3201:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14136
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3202:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14140
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14150
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14151
		{
			yyVAL.str = ""
		}
	case 3205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14155
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14156
		{
			yyVAL.str = ""
		}
	case 3207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14165
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14175
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14176
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14181
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14185
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14196
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14206
		{
			yyVAL.bval = false
		}
	case 3214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14207
		{
			yyVAL.bval = true
		}
	case 3215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14208
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
