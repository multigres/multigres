// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:13366

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 83,
	540, 83,
	-2, 1576,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 86,
	1, 1489,
	26, 1489,
	36, 1489,
	74, 1489,
	100, 1489,
	532, 1489,
	540, 1489,
	-2, 1494,
	-1, 89,
	67, 1906,
	84, 1906,
	85, 2566,
	236, 2753,
	307, 2073,
	419, 1906,
	480, 1906,
	-2, 96,
	-1, 108,
	68, 1493,
	69, 1493,
	130, 1493,
	269, 1493,
	280, 1493,
	316, 1493,
	470, 1493,
	509, 1493,
	-2, 1495,
	-1, 120,
	1, 83,
	540, 83,
	-2, 1576,
	-1, 162,
	85, 2565,
	-2, 1905,
	-1, 239,
	61, 301,
	64, 301,
	527, 301,
	533, 301,
	-2, 2609,
	-1, 689,
	68, 1478,
	69, 1478,
	130, 1478,
	280, 1478,
	-2, 1496,
	-1, 695,
	68, 1479,
	69, 1479,
	130, 1479,
	280, 1479,
	-2, 1499,
	-1, 749,
	84, 1906,
	480, 1906,
	-2, 95,
	-1, 751,
	209, 84,
	-2, 2572,
	-1, 855,
	7, 1406,
	16, 1406,
	17, 1406,
	531, 1406,
	-2, 102,
	-1, 856,
	7, 1407,
	16, 1407,
	17, 1407,
	531, 1407,
	-2, 103,
	-1, 864,
	531, 1408,
	-2, 3032,
	-1, 883,
	93, 2889,
	398, 2109,
	401, 2889,
	-2, 2002,
	-1, 887,
	93, 2889,
	398, 2109,
	401, 2889,
	-2, 2002,
	-1, 1046,
	68, 1478,
	69, 1478,
	130, 1478,
	280, 1478,
	-2, 1500,
	-1, 1101,
	7, 1208,
	531, 1208,
	-2, 482,
	-1, 1116,
	7, 533,
	16, 533,
	17, 533,
	531, 533,
	-2, 1256,
	-1, 1138,
	7, 1450,
	-2, 483,
	-1, 1146,
	7, 1420,
	-2, 466,
	-1, 1147,
	7, 1455,
	531, 1455,
	-2, 467,
	-1, 1148,
	7, 1427,
	-2, 468,
	-1, 1149,
	7, 1455,
	531, 1455,
	-2, 469,
	-1, 1150,
	7, 1455,
	531, 1455,
	-2, 470,
	-1, 1151,
	7, 1414,
	-2, 472,
	-1, 1152,
	7, 1414,
	-2, 473,
	-1, 1153,
	7, 1457,
	-2, 476,
	-1, 1154,
	7, 1417,
	-2, 480,
	-1, 1155,
	7, 1418,
	-2, 481,
	-1, 1157,
	7, 1455,
	531, 1455,
	-2, 497,
	-1, 1158,
	7, 1414,
	-2, 501,
	-1, 1159,
	7, 1421,
	-2, 506,
	-1, 1160,
	7, 1419,
	-2, 509,
	-1, 1161,
	7, 1453,
	-2, 511,
	-1, 1162,
	7, 1453,
	-2, 512,
	-1, 1163,
	7, 1438,
	531, 1438,
	-2, 516,
	-1, 1315,
	6, 2002,
	12, 2002,
	534, 2002,
	535, 2002,
	-2, 1995,
	-1, 1364,
	531, 1343,
	-2, 3034,
	-1, 1582,
	127, 2851,
	411, 2851,
	-2, 1081,
	-1, 1616,
	21, 1380,
	432, 1380,
	510, 1380,
	-2, 843,
	-1, 1618,
	21, 1382,
	432, 1382,
	510, 1382,
	-2, 790,
	-1, 1623,
	1, 659,
	26, 659,
	36, 659,
	64, 659,
	65, 659,
	68, 659,
	69, 659,
	71, 659,
	72, 659,
	73, 659,
	74, 659,
	100, 659,
	130, 659,
	269, 659,
	280, 659,
	316, 659,
	470, 659,
	484, 659,
	509, 659,
	515, 659,
	532, 659,
	540, 659,
	541, 659,
	-2, 1484,
	-1, 1628,
	21, 1462,
	432, 1462,
	510, 1462,
	-2, 1458,
	-1, 2085,
	68, 1494,
	69, 1494,
	130, 1494,
	269, 1494,
	280, 1494,
	316, 1494,
	470, 1494,
	509, 1494,
	-2, 1177,
	-1, 2094,
	7, 1343,
	531, 1343,
	-2, 1226,
	-1, 2310,
	117, 96,
	307, 2073,
	460, 96,
	-2, 1906,
	-1, 2360,
	536, 117,
	-2, 2437,
	-1, 2388,
	531, 2075,
	-2, 225,
	-1, 2464,
	40, 1414,
	509, 1414,
	527, 1414,
	532, 1414,
	541, 1414,
	-2, 1410,
	-1, 2680,
	36, 2856,
	66, 2856,
	-2, 507,
	-1, 2681,
	36, 2857,
	66, 2857,
	-2, 380,
	-1, 2687,
	127, 2854,
	411, 2854,
	-2, 1190,
	-1, 2688,
	127, 2855,
	411, 2855,
	-2, 1191,
	-1, 2704,
	1, 425,
	26, 425,
	36, 425,
	64, 425,
	65, 425,
	68, 425,
	69, 425,
	71, 425,
	72, 425,
	74, 425,
	100, 425,
	130, 425,
	269, 425,
	280, 425,
	316, 425,
	470, 425,
	484, 425,
	509, 425,
	515, 425,
	529, 425,
	532, 425,
	533, 425,
	540, 425,
	-2, 124,
	-1, 2705,
	1, 423,
	26, 423,
	36, 423,
	64, 423,
	65, 423,
	68, 423,
	69, 423,
	71, 423,
	72, 423,
	74, 423,
	100, 423,
	130, 423,
	269, 423,
	280, 423,
	316, 423,
	470, 423,
	484, 423,
	509, 423,
	515, 423,
	529, 423,
	532, 423,
	533, 423,
	540, 423,
	-2, 124,
	-1, 2708,
	1, 442,
	26, 442,
	36, 442,
	64, 442,
	65, 442,
	68, 442,
	69, 442,
	71, 442,
	72, 442,
	74, 442,
	100, 442,
	130, 442,
	269, 442,
	280, 442,
	316, 442,
	470, 442,
	484, 442,
	509, 442,
	515, 442,
	529, 442,
	532, 442,
	533, 442,
	540, 442,
	-2, 124,
	-1, 2722,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1094,
	-1, 2723,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1095,
	-1, 2724,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1096,
	-1, 2725,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1097,
	-1, 2726,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1098,
	-1, 2727,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1099,
	-1, 2731,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1106,
	-1, 2737,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1110,
	-1, 2782,
	363, 1370,
	-2, 1373,
	-1, 2792,
	16, 1410,
	17, 1410,
	-2, 1342,
	-1, 2877,
	68, 1494,
	69, 1494,
	130, 1494,
	269, 1494,
	280, 1494,
	316, 1494,
	470, 1494,
	509, 1494,
	-2, 1177,
	-1, 2997,
	209, 84,
	-2, 2572,
	-1, 3070,
	536, 118,
	-2, 2437,
	-1, 3173,
	507, 2512,
	-2, 2505,
	-1, 3363,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1108,
	-1, 3364,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1112,
	-1, 3370,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1114,
	-1, 3405,
	363, 1369,
	-2, 1372,
	-1, 3559,
	75, 1598,
	76, 1598,
	77, 1598,
	78, 1598,
	79, 1598,
	81, 1598,
	82, 1598,
	-2, 1494,
	-1, 3573,
	531, 1343,
	-2, 118,
	-1, 3580,
	150, 1838,
	-2, 1773,
	-1, 3754,
	6, 2002,
	12, 2002,
	534, 2002,
	535, 2002,
	-2, 1976,
	-1, 3921,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1107,
	-1, 3924,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1116,
	-1, 3927,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1111,
	-1, 3932,
	52, 0,
	53, 0,
	54, 0,
	-2, 1129,
	-1, 3939,
	21, 1379,
	432, 1379,
	510, 1379,
	-2, 1459,
	-1, 3943,
	363, 1371,
	-2, 1374,
	-1, 3989,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1159,
	-1, 3990,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1160,
	-1, 3991,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1161,
	-1, 3992,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1162,
	-1, 3993,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1163,
	-1, 3994,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1164,
	-1, 4364,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1109,
	-1, 4365,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1113,
	-1, 4369,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1115,
	-1, 4370,
	52, 0,
	53, 0,
	54, 0,
	-2, 1130,
	-1, 4373,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1131,
	-1, 4374,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1133,
	-1, 4498,
	540, 83,
	-2, 1576,
	-1, 4643,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1117,
	-1, 4644,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1132,
	-1, 4645,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1134,
	-1, 4654,
	52, 0,
	-2, 1167,
	-1, 4905,
	52, 0,
	-2, 1168,
	-1, 5088,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 465,
	-1, 5423,
	7, 1723,
	-2, 302,
	-1, 5449,
	7, 1450,
	-2, 483,
}

const yyPrivate = 57344

const yyLast = 97403

var yyAct = [...]int16{
	1079, 5420, 4920, 5471, 5098, 690, 4921, 3349, 4910, 4536,
	5487, 4673, 2835, 5472, 4174, 5278, 3439, 5421, 3669, 4436,
	823, 1065, 4939, 2952, 5165, 4570, 3738, 3498, 5010, 2080,
	4488, 2634, 4991, 2902, 2905, 4854, 5087, 5154, 4754, 4971,
	4887, 5148, 1490, 2263, 5266, 5039, 4802, 5314, 3347, 4285,
	4940, 4888, 3305, 5234, 3427, 5217, 3698, 4885, 5017, 4090,
	4435, 1630, 755, 2696, 2283, 787, 5012, 5011, 4736, 4712,
	4427, 5086, 3597, 1221, 4671, 4328, 5062, 4569, 5065, 3724,
	3876, 1303, 3301, 4826, 85, 4798, 4781, 4495, 2998, 2918,
	3584, 3672, 4458, 4086, 242, 242, 2959, 2399, 3136, 4148,
	646, 651, 3006, 661, 665, 2928, 3093, 2791, 242, 3568,
	2860, 2652, 4286, 4291, 670, 6, 708, 3270, 715, 715,
	4834, 4224, 4295, 4178, 700, 110, 2152, 708, 2459, 1521,
	3598, 708, 2947, 4094, 4, 1362, 64, 751, 754, 759,
	754, 4742, 754, 715, 4469, 715, 676, 22, 3646, 715,
	715, 4465, 754, 715, 715, 3526, 1260, 1015, 106, 675,
	21, 2309, 20, 2308, 19, 4444, 708, 708, 708, 708,
	2920, 944, 4719, 854, 754, 754, 715, 754, 865, 2307,
	13, 3141, 715, 865, 715, 865, 715, 715, 715, 715,
	715, 2306, 12, 4639, 715, 754, 698, 754, 715, 1040,
	758, 754, 715, 715, 674, 10, 673, 9, 3236, 862,
	672, 8, 4141, 3059, 873, 2945, 875, 3826, 946, 3632,
	4018, 671, 7, 2982, 3551, 4357, 1590, 2942, 653, 110,
	1219, 242, 242, 1499, 907, 6, 3323, 3306, 3649, 3256,
	1431, 1290, 3135, 3108, 734, 110, 3716, 2919, 3060, 2789,
	2345, 1082, 2336, 1003, 3753, 2986, 64, 3183, 3732, 1239,
	4208, 2330, 667, 3007, 2985, 2973, 2340, 22, 2969, 2282,
	2944, 3543, 4059, 2265, 3554, 2906, 1051, 733, 106, 3910,
	21, 3562, 20, 2810, 19, 3408, 705, 2861, 3507, 1520,
	2089, 2747, 2987, 2642, 2479, 3352, 4672, 730, 1452, 3751,
	13, 3438, 3650, 1442, 723, 3140, 978, 3024, 1338, 3089,
	2383, 2869, 12, 1495, 707, 1246, 2357, 1207, 2799, 2316,
	1180, 2923, 2961, 2972, 3576, 10, 2927, 9, 2926, 2372,
	2925, 8, 662, 3382, 2082, 2264, 836, 2916, 2807, 2232,
	3431, 2748, 7, 1333, 2803, 2754, 2757, 1591, 2850, 2676,
	1021, 722, 1579, 2686, 1489, 897, 229, 785, 851, 3036,
	2457, 1269, 3023, 2145, 786, 1424, 1271, 3022, 132, 750,
	2939, 1225, 134, 2833, 1514, 786, 786, 2701, 1172, 947,
	949, 1562, 2104, 1061, 1052, 1580, 1023, 1560, 1011, 2633,
	666, 904, 201, 2661, 200, 689, 2537, 867, 1595, 2536,
	2484, 2356, 233, 155, 2289, 1268, 713, 108, 2344, 109,
	883, 887, 1033, 1563, 1035, 1034, 1561, 656, 1487, 1366,
	1401, 2966, 2337, 1331, 681, 221, 1541, 628, 729, 235,
	719, 1457, 234, 898, 1010, 721, 1344, 711, 3618, 1432,
	1432, 3509, 1432, 727, 1432, 3432, 694, 2653, 5417, 1628,
	1433, 1433, 1598, 1433, 3350, 1433, 1610, 1611, 1612, 5539,
	1628, 3617, 5537, 1598, 5535, 5495, 5416, 5483, 5456, 5255,
	3619, 5496, 5480, 5456, 5496, 2248, 5120, 2240, 3454, 5060,
	2889, 2238, 2245, 2249, 2244, 5464, 2246, 3878, 2240, 971,
	973, 975, 979, 2241, 2238, 1305, 654, 664, 5455, 3456,
	2250, 5432, 2654, 5425, 2241, 1262, 2654, 5456, 694, 1262,
	5433, 2250, 3531, 5407, 830, 831, 179, 1598, 696, 5389,
	695, 5345, 5080, 1076, 632, 5344, 3456, 1596, 4693, 4823,
	2238, 4713, 4858, 2654, 2238, 5331, 866, 684, 1628, 5293,
	3407, 1598, 2240, 5287, 2656, 4856, 5263, 2911, 5294, 882,
	885, 5225, 5288, 3707, 977, 3658, 716, 4608, 2241, 1598,
	5223, 5224, 1307, 5222, 5394, 5393, 2240, 5202, 5201, 4366,
	5223, 753, 5223, 774, 3472, 776, 2238, 2238, 3459, 3460,
	3461, 3462, 2241, 5198, 964, 825, 3510, 959, 961, 2250,
	3433, 5196, 5199, 5119, 5117, 5116, 940, 5096, 1628, 3331,
	5197, 1598, 5120, 2238, 1435, 994, 3495, 858, 859, 5095,
	861, 1088, 4985, 2656, 1598, 3541, 4970, 2702, 2238, 1006,
	4960, 4693, 1080, 5124, 2248, 2628, 2240, 4943, 890, 4961,
	893, 2245, 2249, 2244, 4935, 2246, 4942, 4934, 4807, 2240,
	2238, 4797, 2241, 3658, 4787, 4771, 1435, 4808, 4706, 2250,
	2656, 991, 4705, 3619, 4770, 5080, 4704, 4707, 5078, 3401,
	1076, 3658, 4702, 3456, 726, 3658, 4692, 3466, 3467, 3468,
	3402, 1435, 4661, 4913, 4659, 4693, 1628, 4626, 4566, 1598,
	4565, 2238, 708, 4660, 4564, 1306, 4627, 4567, 4558, 2656,
	4506, 4480, 1471, 2656, 4376, 2694, 4354, 2656, 3400, 3619,
	4481, 1047, 2654, 2238, 2240, 2238, 4103, 3928, 4020, 2238,
	708, 3472, 4009, 715, 90, 2656, 3937, 4021, 89, 91,
	2241, 4010, 1435, 4628, 4612, 2238, 4462, 2250, 117, 708,
	724, 1195, 708, 708, 1597, 1014, 4419, 708, 708, 2370,
	708, 3870, 854, 854, 715, 1014, 854, 4151, 1014, 4112,
	2238, 3850, 3877, 3777, 698, 114, 1471, 754, 754, 115,
	3849, 3764, 3778, 3621, 3607, 3536, 3530, 3521, 4111, 3942,
	3765, 3502, 3622, 3608, 3537, 3531, 2238, 1308, 119, 3494,
	3454, 3492, 708, 3891, 852, 93, 3491, 3905, 3495, 863,
	2238, 3490, 3882, 110, 863, 2238, 863, 3489, 3658, 3582,
	2238, 725, 3518, 88, 3405, 3517, 2238, 1309, 760, 3403,
	1310, 112, 3326, 2238, 1311, 771, 772, 773, 2238, 3289,
	715, 2656, 3516, 715, 1628, 3454, 2284, 1598, 2238, 3175,
	754, 1603, 1604, 1605, 1606, 3000, 1312, 2895, 3176, 2628,
	2891, 995, 1430, 3315, 3001, 2658, 1435, 708, 708, 2238,
	242, 242, 2240, 2657, 2656, 3923, 2239, 1558, 1555, 3346,
	3312, 3067, 2656, 1549, 2774, 2238, 1550, 1550, 2241, 715,
	754, 754, 1550, 2674, 1315, 2250, 2621, 1076, 2565, 1178,
	3456, 1556, 715, 95, 3466, 3467, 3468, 710, 4989, 4944,
	120, 1313, 1043, 1044, 113, 987, 2656, 990, 1444, 3462,
	2313, 2313, 730, 730, 992, 3810, 4278, 1302, 1314, 1606,
	1095, 998, 1000, 1001, 2656, 1170, 1496, 2656, 3470, 1095,
	97, 1174, 1095, 967, 1049, 1173, 966, 1471, 3472, 1174,
	2911, 4571, 1174, 1173, 999, 3508, 1173, 2313, 3238, 3504,
	1444, 3766, 1224, 754, 1444, 1316, 2313, 3767, 2322, 131,
	3316, 5528, 1471, 1186, 1617, 1224, 3877, 1430, 4773, 1439,
	1229, 1435, 967, 1607, 1608, 1609, 104, 969, 5502, 972,
	1503, 5063, 1601, 1602, 1603, 1604, 1605, 1606, 5352, 1168,
	1471, 1046, 102, 1601, 1602, 1603, 1604, 1605, 1606, 1200,
	1519, 5335, 3877, 1471, 708, 1597, 661, 2853, 1542, 5326,
	1542, 4159, 5110, 4100, 5320, 708, 3708, 5085, 5073, 5084,
	1435, 2277, 1223, 5072, 3067, 1453, 1454, 3090, 1324, 3457,
	3458, 3459, 3460, 3461, 3462, 5071, 5281, 1187, 1451, 978,
	3708, 1453, 1454, 978, 978, 4804, 5030, 1601, 1602, 1603,
	1604, 1605, 1606, 4922, 1455, 1251, 3457, 3458, 3459, 3460,
	3461, 3462, 1171, 4915, 4898, 1552, 4876, 4811, 4788, 1009,
	4761, 1601, 1602, 1603, 1604, 1605, 1606, 683, 4716, 2323,
	101, 984, 5282, 986, 4668, 988, 995, 985, 978, 1601,
	1602, 1603, 1604, 1605, 1606, 995, 92, 3664, 5279, 100,
	1266, 1267, 1008, 94, 2911, 3600, 995, 103, 4665, 98,
	4651, 4650, 4638, 1617, 1029, 99, 4433, 1030, 696, 4426,
	695, 4423, 4409, 4404, 1020, 2091, 4044, 1025, 1216, 1385,
	107, 1601, 1602, 1603, 1604, 1605, 1606, 4396, 96, 4395,
	4385, 4383, 972, 110, 1601, 1602, 1603, 1604, 1605, 1606,
	4382, 1436, 4381, 1400, 1258, 1440, 1230, 1406, 1236, 114,
	1179, 4380, 698, 115, 4150, 4071, 4033, 4032, 4016, 4006,
	1197, 1198, 4158, 972, 4005, 4004, 1538, 105, 3945, 3939,
	3720, 1443, 119, 1215, 3463, 3464, 3465, 708, 1546, 715,
	3677, 1465, 715, 3457, 3458, 3459, 3460, 3461, 3462, 3657,
	1227, 1228, 3616, 1093, 3581, 2267, 3512, 2268, 3505, 1601,
	1602, 1603, 1604, 1605, 1606, 708, 3485, 3477, 2288, 1364,
	118, 3476, 2321, 715, 3455, 979, 117, 1485, 3452, 979,
	979, 3451, 1505, 111, 5536, 1448, 1449, 1450, 3447, 1456,
	759, 3445, 3444, 754, 754, 754, 754, 3443, 754, 3442,
	3420, 3409, 3404, 114, 715, 1294, 3296, 115, 1300, 3294,
	1318, 4101, 3291, 708, 3290, 2890, 2881, 708, 2090, 2278,
	111, 2767, 2360, 1265, 979, 2523, 119, 1237, 4805, 1187,
	1491, 1491, 1199, 1507, 1049, 2381, 1480, 1483, 1329, 1328,
	632, 1231, 1327, 708, 1345, 754, 1048, 1363, 1007, 5524,
	680, 758, 2320, 708, 1544, 1345, 5520, 1345, 1467, 708,
	1384, 999, 2394, 1370, 1371, 1403, 2334, 2258, 1407, 1408,
	1375, 996, 1381, 999, 1427, 1553, 5435, 5401, 708, 5374,
	5369, 708, 768, 769, 770, 5362, 5303, 715, 2397, 5233,
	3429, 762, 763, 764, 765, 766, 767, 5018, 5195, 5170,
	2095, 2097, 2098, 5167, 4039, 1557, 5083, 1601, 1602, 1603,
	1604, 1605, 1606, 1209, 1210, 2147, 5082, 1213, 2400, 754,
	5048, 2496, 242, 5044, 3585, 129, 4975, 1460, 1461, 4938,
	4872, 1464, 3859, 708, 715, 4871, 4870, 4848, 2360, 2360,
	2360, 2768, 4832, 4831, 2427, 2416, 4830, 1501, 4821, 968,
	4818, 3463, 3464, 3465, 4471, 969, 4700, 708, 708, 1548,
	3457, 3458, 3459, 3460, 3461, 3462, 2147, 2380, 2317, 1226,
	1092, 4697, 4099, 1539, 2086, 754, 754, 754, 754, 754,
	2276, 1174, 4662, 2094, 4491, 1173, 1543, 4475, 968, 2090,
	754, 754, 3239, 3240, 969, 715, 715, 2304, 754, 715,
	2458, 3239, 3240, 1554, 1497, 1498, 1564, 1572, 696, 1571,
	1587, 696, 696, 1588, 1589, 1449, 1448, 2280, 4461, 997,
	1456, 1593, 1450, 2420, 1594, 3740, 4453, 2333, 2341, 2395,
	1628, 4450, 4297, 1598, 2350, 4197, 4154, 1610, 1611, 1612,
	682, 708, 3907, 4138, 4130, 4127, 4108, 4076, 4074, 2242,
	2377, 2252, 2243, 5482, 1628, 4066, 2248, 1598, 2240, 2338,
	2092, 3859, 3743, 2245, 2249, 2244, 3742, 2246, 2548, 2549,
	3737, 2247, 1621, 1622, 2241, 2365, 1181, 5280, 2134, 2626,
	3574, 2250, 2240, 708, 708, 3922, 865, 865, 865, 715,
	754, 715, 3572, 2643, 715, 715, 754, 2539, 2241, 2539,
	2431, 1542, 3571, 2539, 2539, 2250, 661, 3524, 661, 3340,
	2144, 3426, 3419, 3395, 1226, 3393, 708, 708, 2759, 708,
	3267, 1076, 3196, 3087, 3456, 1226, 3009, 2142, 3466, 3467,
	3468, 2954, 2765, 4043, 2439, 2440, 2361, 2286, 2815, 2809,
	4368, 1461, 1460, 2398, 111, 2235, 2606, 708, 2314, 1464,
	1500, 1500, 2564, 1500, 2419, 2299, 2290, 708, 2143, 1444,
	754, 1446, 3470, 2141, 2140, 2389, 2391, 2396, 2139, 2432,
	2138, 2137, 3472, 2435, 2436, 2291, 1014, 111, 2136, 2135,
	1094, 2133, 2132, 2131, 2341, 2456, 2518, 2130, 2129, 2128,
	2127, 2318, 2126, 2125, 2364, 1500, 2124, 2123, 2519, 2122,
	2121, 2524, 2120, 2119, 2616, 2617, 2618, 2118, 2117, 2443,
	2116, 117, 2629, 2630, 1076, 2261, 2099, 3456, 2662, 2493,
	2494, 3466, 3467, 3468, 2115, 2400, 2324, 2325, 2326, 2327,
	2465, 2328, 2543, 4367, 110, 2368, 2369, 2114, 114, 2113,
	2112, 2111, 115, 1506, 2110, 1496, 972, 2096, 2341, 2109,
	2615, 1095, 2361, 2361, 2361, 3470, 2107, 2106, 118, 2093,
	2091, 119, 717, 1540, 1459, 3472, 1332, 1177, 2611, 828,
	3609, 111, 2144, 4587, 3623, 1182, 2693, 2259, 2413, 1508,
	4050, 3851, 1511, 3002, 2912, 1453, 1454, 2445, 1510, 3348,
	2449, 3569, 1076, 1240, 1226, 3456, 2613, 1509, 5489, 3466,
	3467, 3468, 679, 2144, 3735, 3784, 4516, 2599, 1240, 2510,
	4766, 3936, 3440, 1512, 2392, 3640, 4983, 1402, 2387, 2371,
	2522, 2390, 3636, 4274, 2497, 4982, 2485, 2528, 1628, 4269,
	4615, 1598, 3794, 3470, 2660, 694, 2508, 2763, 3168, 2511,
	2512, 2513, 2515, 3472, 3164, 2591, 2481, 2442, 693, 1226,
	1628, 2481, 2495, 1598, 3437, 2808, 2240, 2485, 1383, 3369,
	2541, 3786, 3670, 2485, 2545, 2546, 2544, 3895, 2764, 4759,
	1291, 5219, 2241, 3894, 5163, 2373, 5162, 4981, 2240, 2250,
	2579, 3362, 2569, 4634, 3863, 1005, 1567, 980, 3104, 4974,
	4137, 3092, 677, 2598, 2241, 692, 4783, 5490, 3091, 2672,
	5409, 2250, 117, 677, 4546, 2103, 4909, 4640, 2552, 2553,
	2554, 2555, 2556, 117, 1189, 2386, 2796, 645, 2610, 1567,
	4411, 123, 117, 4410, 2592, 2992, 643, 1252, 2303, 114,
	1204, 2595, 2478, 115, 906, 906, 3746, 958, 3025, 1386,
	114, 951, 846, 4794, 115, 2638, 3020, 736, 1386, 114,
	122, 2646, 119, 115, 2608, 2609, 736, 4023, 3674, 5004,
	4559, 3694, 1017, 119, 738, 2797, 2668, 1291, 4765, 2670,
	3934, 3025, 119, 738, 3933, 4777, 2635, 2636, 2898, 2974,
	2976, 2975, 4603, 3117, 668, 112, 3019, 4321, 4047, 1500,
	2683, 135, 160, 1500, 1500, 123, 1339, 3026, 2689, 2665,
	2664, 2663, 3747, 2669, 123, 2385, 4277, 744, 4245, 2798,
	4113, 4451, 2795, 1247, 3656, 2352, 160, 2409, 2408, 1212,
	956, 3115, 2675, 881, 122, 819, 5348, 2655, 4353, 4330,
	3026, 3116, 2620, 122, 652, 1617, 2700, 641, 3902, 1500,
	1500, 2699, 2711, 4064, 1607, 1608, 1609, 2384, 4537, 691,
	4784, 4908, 5216, 1601, 1602, 1603, 1604, 1605, 1606, 4247,
	5179, 3435, 1340, 3642, 5057, 1479, 2407, 4793, 113, 3114,
	3358, 3356, 3357, 3355, 3171, 5347, 5056, 1601, 1602, 1603,
	1604, 1605, 1606, 4598, 835, 2800, 834, 4262, 694, 1628,
	4259, 1477, 1598, 2713, 3167, 2425, 1610, 1611, 1612, 833,
	2421, 832, 3065, 5479, 5321, 3749, 3733, 3837, 2242, 2551,
	965, 2243, 4666, 5172, 5478, 2248, 4790, 2240, 4547, 4789,
	2691, 3027, 2245, 2249, 2244, 2084, 2246, 2673, 5324, 2601,
	2247, 1621, 1622, 2241, 2602, 3463, 3464, 3465, 2605, 5173,
	2250, 3675, 2607, 1568, 3457, 3458, 3459, 3460, 3461, 3462,
	5192, 4810, 4331, 759, 3027, 4534, 3638, 4334, 2631, 4287,
	4528, 2695, 4332, 4338, 2800, 1341, 2794, 3641, 3299, 2783,
	3103, 4997, 2697, 2698, 4253, 3233, 1568, 1418, 1566, 3957,
	2622, 2624, 3033, 3776, 4560, 3773, 2685, 5014, 3772, 3688,
	4329, 2692, 727, 118, 2254, 3599, 2489, 863, 863, 863,
	3227, 3889, 1476, 1416, 2255, 2867, 2260, 4333, 3888, 3887,
	3886, 2374, 3885, 900, 758, 2780, 1569, 2897, 2374, 5408,
	3714, 3281, 5392, 161, 5239, 3126, 2256, 5262, 3463, 3464,
	3465, 3283, 2418, 4244, 4298, 2234, 1413, 3457, 3458, 3459,
	3460, 3461, 3462, 1513, 3211, 3821, 3637, 161, 2762, 1569,
	2403, 3245, 1410, 3244, 3243, 2800, 2823, 3610, 2374, 972,
	92, 1628, 3242, 2538, 1598, 4764, 2687, 2687, 1610, 1611,
	1612, 92, 2374, 1497, 1498, 1241, 2374, 849, 2874, 3224,
	2242, 4503, 2374, 2243, 3440, 2374, 1478, 2248, 3639, 2240,
	1241, 2374, 1570, 5220, 2245, 2249, 2244, 2374, 2246, 739,
	2374, 754, 2247, 1621, 1622, 2241, 3463, 3464, 3465, 5350,
	3748, 3754, 2250, 3223, 1415, 3457, 3458, 3459, 3460, 3461,
	3462, 2907, 3954, 2909, 2302, 1570, 2761, 2267, 2480, 2502,
	3893, 2932, 2932, 2480, 2632, 1190, 3017, 2381, 754, 1404,
	1076, 3824, 744, 3456, 4837, 2977, 3045, 3466, 3467, 3468,
	743, 1601, 1602, 1603, 1604, 1605, 1606, 1399, 1382, 3935,
	737, 1365, 715, 708, 1336, 1335, 3955, 1337, 1334, 737,
	1235, 1330, 2997, 1601, 1602, 1603, 1604, 1605, 1606, 5218,
	715, 3470, 3008, 4288, 118, 159, 3600, 158, 2589, 1379,
	754, 3472, 715, 2649, 2381, 118, 1233, 669, 1417, 3226,
	715, 3018, 2899, 3073, 118, 698, 2534, 1217, 111, 159,
	5349, 158, 2533, 726, 3061, 754, 1291, 111, 2527, 708,
	727, 2526, 2525, 1425, 745, 2427, 2830, 199, 1421, 163,
	895, 1217, 715, 715, 715, 3692, 708, 708, 3691, 4901,
	2381, 2778, 2800, 715, 1055, 3048, 1342, 5290, 2971, 2404,
	3095, 715, 3099, 715, 715, 1377, 4092, 4175, 2458, 715,
	2406, 2405, 715, 715, 2813, 4387, 715, 2458, 715, 715,
	2684, 2423, 708, 2590, 4271, 3088, 2870, 5015, 5238, 724,
	2376, 2375, 715, 715, 708, 1255, 715, 715, 2079, 2086,
	2876, 2878, 2650, 2880, 1422, 2882, 2883, 2884, 754, 754,
	2826, 4855, 2600, 715, 715, 2875, 3182, 1232, 708, 2402,
	3823, 741, 708, 3930, 715, 4998, 2651, 3381, 5291, 3062,
	3874, 2772, 5009, 2766, 3687, 2144, 2648, 3790, 715, 715,
	715, 715, 715, 2144, 3282, 715, 4289, 5016, 3787, 715,
	5317, 1412, 3754, 715, 715, 2805, 2531, 1577, 1184, 2827,
	725, 5316, 2844, 3635, 2647, 2147, 4176, 1409, 1378, 1264,
	1411, 3634, 3640, 2863, 715, 715, 3159, 2865, 715, 3636,
	715, 94, 5237, 3066, 3046, 715, 2885, 715, 715, 2938,
	2886, 3209, 715, 2859, 715, 850, 2438, 715, 715, 3068,
	3052, 1234, 965, 2828, 1617, 2993, 2825, 1420, 4215, 242,
	2914, 715, 4685, 1607, 1608, 1609, 4902, 3042, 715, 5318,
	742, 715, 1601, 1602, 1603, 1604, 1605, 1606, 715, 715,
	3953, 3028, 3008, 3105, 3254, 3177, 955, 3261, 3875, 715,
	754, 854, 822, 2587, 865, 759, 865, 865, 4803, 3631,
	2349, 726, 3109, 2970, 3342, 2428, 3178, 3180, 661, 661,
	4686, 3044, 3774, 3133, 3124, 3083, 2749, 2750, 2751, 2752,
	3119, 3051, 2915, 1559, 1517, 3269, 1188, 3274, 3275, 2829,
	2492, 4327, 2428, 754, 3071, 3072, 2989, 2301, 957, 3075,
	868, 4215, 3170, 746, 1185, 743, 4372, 4371, 748, 708,
	3202, 2490, 1027, 715, 3127, 982, 758, 3273, 2294, 692,
	4900, 2910, 4511, 1392, 2941, 4282, 3818, 724, 4087, 2837,
	3058, 2293, 3822, 3041, 5180, 4563, 5007, 3327, 3775, 3739,
	740, 4923, 5166, 4229, 4835, 2412, 5037, 708, 4477, 2980,
	5053, 2417, 2472, 3205, 2713, 2412, 3706, 2999, 3625, 2994,
	1305, 2996, 3220, 2995, 4562, 4272, 2654, 978, 2588, 4342,
	2824, 4242, 4292, 3203, 2491, 3010, 3011, 3012, 3013, 3014,
	1376, 4476, 4144, 2932, 3070, 5514, 1617, 5513, 5177, 1388,
	708, 2949, 3328, 5176, 3643, 1607, 1608, 1609, 725, 786,
	5175, 4548, 2801, 4533, 1601, 1602, 1603, 1604, 1605, 1606,
	4561, 3501, 2816, 2817, 2818, 2819, 3152, 3076, 3791, 1419,
	5292, 3031, 3155, 3156, 2105, 1578, 3257, 1307, 4145, 3788,
	3642, 3043, 1036, 1038, 786, 2295, 1208, 3345, 3047, 4216,
	5021, 786, 5036, 3015, 869, 1036, 759, 698, 3962, 3701,
	5477, 5169, 4540, 3644, 5235, 2804, 3165, 5309, 4994, 4399,
	3169, 1191, 3143, 2540, 953, 3237, 4814, 3997, 3064, 3406,
	1036, 1038, 3351, 4339, 3463, 3464, 3465, 3996, 1516, 847,
	3411, 3412, 4135, 3457, 3458, 3459, 3460, 3461, 3462, 3428,
	5315, 3248, 1391, 4232, 3252, 3173, 3278, 3279, 4217, 3179,
	3172, 2411, 870, 3680, 1515, 3251, 3142, 758, 3394, 781,
	3148, 2411, 3284, 2429, 3285, 3324, 3286, 2430, 829, 3288,
	1263, 4209, 4216, 3638, 698, 5152, 3307, 3157, 1389, 963,
	3162, 3297, 1032, 2251, 3641, 3628, 4310, 963, 3204, 1481,
	2429, 4218, 2562, 1218, 2430, 2560, 4109, 5396, 1028, 4309,
	1306, 3153, 3154, 979, 1394, 2557, 983, 2563, 3307, 2561,
	1393, 2566, 2936, 2936, 1425, 2300, 2979, 1458, 4143, 3260,
	3057, 1368, 2312, 3228, 3520, 3230, 3229, 1368, 3509, 3976,
	3232, 4217, 1447, 3330, 3229, 3432, 5509, 4230, 1462, 1463,
	4473, 4394, 2267, 4912, 4415, 2563, 4293, 4755, 2561, 5424,
	4199, 3553, 3553, 854, 1491, 2932, 3565, 3553, 3553, 3266,
	4231, 3258, 5097, 3637, 3344, 3383, 4695, 4416, 4667, 3529,
	3434, 5445, 5444, 3314, 4218, 4234, 5100, 5099, 5246, 708,
	4957, 708, 708, 5412, 5411, 1542, 708, 708, 5245, 5356,
	5355, 1426, 1308, 952, 1037, 2936, 4958, 5251, 3298, 2559,
	2740, 5248, 3303, 5252, 5247, 3639, 3304, 1037, 848, 5249,
	2744, 5027, 2742, 4160, 3310, 5250, 2739, 3423, 2741, 2743,
	715, 3700, 1309, 708, 5102, 1310, 1475, 1326, 4400, 1311,
	5101, 3354, 1037, 3265, 3359, 1243, 2640, 4134, 780, 698,
	1390, 2284, 3096, 3728, 1387, 4539, 3998, 3332, 715, 4142,
	1262, 1312, 2558, 5446, 5109, 3335, 715, 3334, 715, 978,
	708, 708, 3378, 2689, 715, 4918, 3410, 1470, 3726, 5063,
	4919, 3493, 3343, 3510, 3611, 4911, 1395, 3500, 4779, 4756,
	3433, 3589, 4200, 5254, 4500, 5253, 1500, 3045, 3259, 1315,
	1367, 1250, 1500, 1500, 3345, 4336, 1367, 3384, 2360, 5490,
	3704, 4956, 3538, 3683, 715, 3606, 1313, 3702, 3300, 3276,
	3003, 3366, 3379, 3368, 978, 978, 1032, 3596, 2775, 2779,
	3499, 2781, 3386, 1314, 5104, 715, 2367, 3387, 3040, 2108,
	5103, 5105, 5106, 1565, 3388, 2753, 3762, 1547, 3398, 1545,
	2597, 1405, 906, 3385, 1261, 715, 715, 715, 715, 3676,
	2855, 2856, 2857, 2858, 3756, 1214, 4428, 3592, 3725, 3648,
	1316, 3647, 5460, 2237, 5377, 5267, 5486, 906, 5376, 1469,
	5272, 2887, 4675, 5508, 3425, 4680, 4075, 3422, 5532, 4678,
	3563, 4679, 4681, 5419, 5274, 4710, 3048, 4531, 4487, 4052,
	3614, 3029, 5269, 1249, 3696, 715, 715, 2978, 715, 715,
	715, 5268, 3561, 2950, 1500, 2667, 3511, 2414, 5270, 1586,
	1486, 2473, 852, 2317, 3, 863, 683, 863, 863, 4437,
	2472, 3577, 3515, 3577, 2482, 3550, 3482, 3483, 3484, 2745,
	2470, 3566, 3567, 2393, 1019, 2940, 5277, 715, 5275, 3503,
	3685, 3686, 3513, 708, 3603, 979, 5283, 5284, 4690, 972,
	3695, 2086, 3711, 4434, 3817, 3131, 715, 4951, 3629, 3522,
	4950, 4691, 4948, 4723, 715, 2501, 3779, 3780, 4677, 5135,
	4682, 2427, 3532, 5507, 1500, 3626, 3560, 3534, 3533, 3558,
	3038, 3557, 5134, 3556, 3651, 1002, 2471, 2903, 2904, 5271,
	3528, 3662, 5282, 1500, 3130, 2871, 3580, 2474, 3132, 2712,
	979, 979, 754, 754, 4468, 3527, 3573, 3604, 5463, 5185,
	5186, 3668, 715, 3601, 2458, 3046, 3389, 3390, 754, 2749,
	2750, 2751, 2752, 3689, 2772, 3129, 2746, 5131, 5132, 5186,
	715, 3338, 3338, 3615, 5185, 718, 3808, 4722, 3809, 5130,
	121, 715, 3333, 865, 2936, 5276, 2643, 3884, 3042, 3718,
	4928, 3645, 3713, 3527, 3715, 3578, 3579, 2697, 2698, 978,
	708, 3671, 3666, 3667, 3853, 4183, 3755, 3752, 3908, 3909,
	3758, 3241, 3760, 1194, 3881, 5114, 5113, 4925, 3681, 125,
	126, 127, 128, 708, 4689, 708, 4927, 4926, 954, 3375,
	708, 3373, 3044, 892, 775, 3371, 5282, 3372, 3374, 5373,
	4204, 3473, 3474, 3475, 2908, 2894, 3830, 4184, 3831, 3832,
	3525, 3590, 2361, 3828, 3712, 3710, 2593, 3663, 818, 228,
	2081, 5414, 3783, 3906, 5515, 124, 3699, 3734, 4732, 3727,
	4799, 3741, 5055, 4728, 3745, 3094, 640, 3827, 642, 644,
	4185, 4186, 4187, 5415, 3806, 4523, 3948, 3949, 3950, 4324,
	4323, 4085, 2504, 1582, 3041, 2503, 2319, 4060, 2271, 2893,
	3967, 2270, 3813, 4972, 3890, 4058, 3549, 3547, 3548, 3546,
	3897, 3090, 3811, 4447, 4055, 3781, 4054, 3613, 3613, 2144,
	5413, 5013, 5354, 5353, 3865, 3866, 5184, 5182, 5111, 3039,
	4916, 4882, 4492, 4192, 2935, 2935, 4030, 4029, 3971, 3807,
	3970, 4725, 4726, 3862, 3785, 3861, 3329, 3287, 698, 3212,
	2637, 3671, 2639, 3201, 2753, 2644, 2645, 2599, 4120, 3612,
	3815, 2956, 3846, 3795, 2901, 3848, 2487, 2401, 2353, 3037,
	2348, 3844, 1437, 3899, 4734, 4727, 1397, 4730, 4731, 4733,
	4729, 1396, 1372, 1256, 1169, 979, 1004, 993, 1596, 2341,
	732, 728, 3043, 4358, 3911, 2806, 5340, 3879, 5257, 3047,
	5256, 5136, 2907, 4413, 2936, 4649, 2936, 4599, 2267, 3871,
	4479, 4359, 2932, 1038, 3896, 2932, 4263, 2935, 3544, 3549,
	3547, 3548, 3546, 4065, 3542, 3545, 3553, 3565, 3553, 3553,
	3553, 3852, 4260, 4121, 3975, 4072, 3620, 3873, 3325, 2437,
	2434, 1045, 3798, 3693, 3353, 2671, 3803, 3854, 3376, 3350,
	3901, 3337, 4509, 2381, 3717, 4508, 4097, 4080, 4550, 5438,
	3868, 2917, 3430, 3869, 715, 5227, 4786, 4551, 4446, 3544,
	3549, 3547, 3548, 3546, 3295, 3542, 3545, 4445, 1187, 3883,
	3900, 3336, 4655, 708, 2275, 1542, 4552, 2274, 4631, 3898,
	4549, 4398, 4351, 3929, 3570, 1500, 715, 3448, 3380, 2702,
	2659, 731, 715, 720, 5437, 754, 5329, 4863, 4860, 734,
	4630, 4617, 708, 4594, 4045, 4046, 4589, 4588, 4284, 4283,
	4129, 3915, 3916, 3917, 3918, 4273, 4268, 3947, 4181, 3008,
	3684, 3843, 3842, 3841, 989, 754, 3840, 4136, 2749, 2750,
	2751, 2752, 3961, 3839, 3838, 3377, 3834, 4098, 4012, 3833,
	3341, 2933, 2933, 3825, 3812, 3345, 3805, 3793, 3792, 4049,
	3789, 4107, 3723, 3944, 3722, 3721, 3418, 3417, 708, 4105,
	715, 4162, 4179, 4102, 3947, 3856, 3857, 715, 2932, 3061,
	3416, 3415, 3965, 3931, 3365, 4194, 2458, 4128, 4096, 3367,
	2756, 3867, 4172, 715, 715, 3974, 3263, 2458, 2458, 3225,
	2381, 3972, 3973, 3206, 4210, 3956, 3958, 3959, 1542, 2738,
	715, 1542, 3980, 1542, 4226, 2755, 2756, 2604, 2627, 2550,
	3648, 2547, 3647, 2542, 2535, 2521, 2517, 3391, 4248, 2516,
	715, 2514, 2509, 4225, 2933, 3969, 3396, 2507, 4221, 4157,
	2500, 4156, 4126, 2483, 2469, 2468, 715, 2772, 2467, 4170,
	2453, 3563, 2426, 4011, 2422, 715, 715, 715, 4025, 4053,
	715, 2415, 4056, 715, 715, 715, 715, 4189, 4188, 2272,
	4038, 2714, 4040, 2715, 4041, 4028, 715, 4048, 4026, 3361,
	3293, 4051, 3292, 715, 3062, 715, 1026, 4057, 981, 4027,
	4061, 4062, 970, 4031, 2603, 4992, 715, 4752, 3345, 4233,
	4067, 2804, 4069, 4070, 715, 715, 4082, 4024, 4068, 715,
	715, 715, 715, 715, 4123, 4238, 4241, 4131, 4312, 4227,
	3487, 5398, 5366, 4088, 972, 5143, 4135, 2735, 5397, 4164,
	4165, 4104, 2622, 2624, 2733, 2736, 2732, 972, 2734, 4079,
	4578, 4574, 4425, 4424, 4391, 3651, 4198, 4114, 4124, 4118,
	4390, 3819, 3200, 3197, 4122, 3194, 715, 715, 715, 715,
	715, 2934, 2934, 3648, 3690, 3647, 2935, 3190, 3925, 3926,
	2488, 2970, 2341, 4541, 3321, 4571, 3320, 2520, 759, 3319,
	3318, 2772, 3317, 3345, 3069, 4251, 708, 708, 708, 708,
	2448, 1402, 4147, 1299, 863, 1293, 2771, 4168, 3397, 5481,
	4153, 4155, 2476, 1041, 4161, 703, 2770, 4522, 4335, 972,
	164, 2475, 4149, 4166, 4167, 4205, 4169, 3109, 4171, 4252,
	4163, 5499, 2144, 1042, 5498, 704, 2953, 4190, 4489, 1262,
	4193, 2677, 4196, 3302, 1432, 5002, 5001, 4296, 1305, 758,
	4356, 4568, 976, 4201, 2934, 1433, 749, 4483, 4317, 2081,
	4316, 3845, 3730, 3082, 3050, 2957, 2343, 2335, 4340, 3983,
	3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993,
	3994, 3995, 2285, 3999, 2279, 4243, 4239, 1259, 4240, 4250,
	1248, 4352, 1242, 1238, 4246, 1220, 244, 5351, 3651, 4720,
	720, 4255, 3575, 3544, 3549, 3547, 3548, 3546, 4847, 3542,
	3545, 3257, 4846, 4743, 4311, 1307, 4744, 3074, 4206, 4745,
	3847, 4119, 3960, 3814, 4226, 3759, 4302, 3757, 3729, 3697,
	3593, 3034, 3085, 715, 3030, 2932, 2932, 4746, 2955, 2932,
	2951, 2614, 2612, 2451, 2447, 854, 2354, 715, 4133, 2339,
	2331, 3237, 3553, 3324, 3008, 4456, 2329, 854, 4301, 2311,
	1474, 4438, 1473, 1472, 1466, 1441, 4463, 1438, 1434, 4313,
	4318, 1429, 1414, 1373, 4748, 4308, 3307, 1320, 4152, 1317,
	2381, 754, 1298, 4320, 4747, 4460, 4429, 4430, 4337, 1292,
	4576, 4575, 3250, 2933, 4749, 4341, 2935, 2310, 2935, 1208,
	942, 708, 5260, 5189, 5178, 1222, 5079, 4490, 4349, 4270,
	4827, 1542, 4914, 4849, 4275, 4767, 4709, 4579, 4350, 4535,
	4521, 4512, 4322, 3588, 3055, 3049, 4474, 4478, 1482, 4227,
	754, 2366, 2262, 2936, 4319, 2236, 2936, 2625, 1306, 2381,
	1095, 715, 792, 1095, 4213, 3413, 3414, 4220, 972, 4222,
	5506, 5491, 4139, 792, 792, 854, 4454, 4455, 4484, 5327,
	4493, 2623, 4459, 5033, 3339, 4343, 4482, 1095, 3053, 856,
	1095, 4125, 3705, 3061, 856, 792, 4379, 4378, 4993, 856,
	2433, 856, 4393, 4084, 1100, 1098, 1097, 2381, 792, 792,
	4555, 1089, 2253, 974, 1504, 4498, 4496, 4785, 5307, 4780,
	932, 932, 4502, 792, 792, 792, 4554, 4996, 4782, 2458,
	5171, 4778, 2292, 4774, 3602, 4315, 3255, 4529, 4412, 4557,
	3605, 2960, 3594, 3268, 4750, 4751, 1500, 2967, 1359, 3277,
	1308, 627, 2477, 4527, 2984, 2298, 2297, 792, 4792, 4791,
	715, 4510, 5020, 715, 4432, 4507, 4290, 3056, 3210, 715,
	715, 715, 4431, 4180, 715, 715, 715, 2622, 2624, 4182,
	1309, 4389, 3703, 1310, 715, 715, 4392, 1311, 747, 3054,
	1254, 2532, 5032, 4517, 4518, 4177, 4452, 3262, 3062, 2284,
	3016, 2567, 4442, 4443, 3661, 4572, 4448, 3660, 4605, 1312,
	42, 41, 40, 39, 38, 37, 1500, 36, 35, 2936,
	2936, 62, 61, 2934, 715, 715, 4233, 4485, 715, 60,
	59, 58, 57, 2933, 56, 2933, 4422, 661, 3903, 715,
	55, 54, 53, 4472, 52, 4505, 51, 1315, 50, 49,
	48, 47, 4515, 4543, 46, 2936, 45, 44, 43, 34,
	33, 32, 4514, 4499, 1313, 31, 30, 29, 28, 27,
	26, 25, 24, 23, 2585, 3892, 3322, 1428, 1551, 1012,
	1022, 1314, 2586, 3035, 77, 4647, 4530, 76, 75, 1500,
	74, 73, 4648, 3940, 4520, 715, 72, 71, 4542, 70,
	69, 68, 67, 4525, 4635, 66, 4544, 5, 65, 80,
	82, 81, 79, 78, 63, 18, 17, 1423, 1316, 2305,
	146, 1192, 4553, 2315, 2703, 3750, 4526, 3731, 4207, 202,
	2568, 1295, 4591, 5387, 3107, 4593, 4674, 5153, 715, 4091,
	133, 5008, 3633, 3630, 4214, 4089, 4580, 4577, 2932, 5038,
	4223, 715, 4095, 2946, 4456, 4581, 4584, 4093, 2943, 5459,
	1500, 4676, 3436, 2868, 2873, 4670, 4946, 4711, 5265, 4494,
	4708, 3237, 4457, 3005, 1500, 3219, 708, 116, 3221, 3222,
	4757, 3237, 4097, 4924, 4007, 4688, 2892, 2269, 708, 4585,
	4586, 2811, 4226, 708, 87, 702, 701, 5259, 1050, 4962,
	5147, 4735, 2838, 4470, 4724, 1500, 4083, 130, 4440, 678,
	2666, 1018, 715, 2273, 2864, 4467, 4466, 2811, 5133, 5129,
	5128, 4604, 4042, 2900, 715, 4464, 2913, 2257, 16, 715,
	15, 4740, 708, 14, 4486, 715, 11, 4893, 715, 4891,
	4892, 4179, 3506, 2934, 4760, 2934, 4890, 865, 4618, 4583,
	754, 4813, 4768, 4621, 4819, 2760, 4703, 4513, 761, 4642,
	1625, 4619, 4620, 2690, 1039, 4632, 1585, 1031, 4226, 759,
	3307, 754, 754, 4899, 3966, 4386, 4884, 4762, 4825, 2102,
	5261, 4063, 2793, 4524, 3311, 910, 911, 4225, 1445, 715,
	715, 4842, 1165, 4636, 908, 715, 1090, 4227, 934, 715,
	3858, 4418, 4022, 4795, 4800, 4741, 4684, 4013, 2836, 4696,
	759, 865, 2832, 6, 4096, 4758, 4718, 4738, 715, 4753,
	4717, 2821, 2843, 110, 4406, 4772, 4687, 4796, 4857, 4776,
	758, 4840, 4828, 4775, 64, 4663, 2776, 1074, 1073, 2802,
	4721, 4886, 4867, 4833, 3421, 22, 2100, 1068, 1069, 3345,
	4816, 1064, 1576, 4737, 1573, 2936, 106, 3313, 21, 2641,
	20, 2454, 19, 4769, 4820, 4822, 2936, 2936, 3128, 3761,
	2936, 758, 4865, 4227, 3782, 3134, 4449, 5054, 13, 3659,
	3249, 1632, 4850, 4880, 4881, 4836, 792, 4838, 2936, 4839,
	12, 2822, 1627, 2, 4226, 4699, 792, 1, 715, 792,
	4929, 0, 0, 10, 0, 9, 0, 0, 854, 8,
	0, 4941, 0, 4930, 3648, 0, 3647, 0, 856, 856,
	7, 4864, 4875, 0, 0, 4739, 4869, 4866, 0, 0,
	0, 0, 0, 0, 856, 2935, 4851, 0, 2935, 4669,
	0, 0, 4683, 0, 0, 0, 4968, 4883, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 856,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 4862, 0, 4907, 0, 0, 0, 0, 0, 4969,
	4963, 0, 0, 0, 0, 0, 4538, 708, 0, 0,
	0, 0, 0, 0, 715, 0, 926, 926, 0, 4227,
	4937, 4952, 4953, 978, 2936, 4954, 4955, 0, 0, 0,
	4931, 715, 4999, 4459, 0, 0, 4936, 4977, 0, 0,
	854, 5006, 4979, 0, 2932, 0, 0, 5005, 5023, 0,
	0, 0, 0, 0, 5028, 0, 0, 0, 708, 3651,
	0, 0, 0, 0, 0, 932, 0, 0, 4976, 3307,
	3307, 0, 0, 4973, 4980, 4978, 0, 0, 4987, 0,
	1500, 715, 0, 0, 715, 0, 0, 4995, 4988, 1500,
	1500, 0, 0, 0, 0, 0, 4986, 0, 4496, 0,
	0, 0, 4984, 0, 0, 5003, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5040, 5059, 0, 5029,
	0, 2935, 2935, 5026, 0, 5025, 5049, 5022, 0, 5035,
	4609, 4610, 0, 5034, 0, 4613, 4614, 0, 0, 0,
	0, 0, 0, 5051, 0, 0, 1542, 0, 0, 2267,
	4654, 0, 0, 0, 0, 0, 0, 2935, 3855, 3008,
	0, 5050, 0, 5064, 0, 0, 0, 3860, 5127, 5067,
	5068, 0, 2933, 0, 0, 2933, 0, 1542, 5076, 1542,
	0, 5074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5115, 5092, 5093, 0, 5155, 0, 0, 698,
	792, 5151, 0, 4829, 792, 792, 4959, 0, 5107, 979,
	0, 5043, 0, 5045, 0, 5047, 0, 0, 0, 0,
	0, 0, 0, 0, 4843, 4844, 0, 0, 4407, 5150,
	5149, 792, 5123, 0, 0, 5164, 5158, 5126, 0, 0,
	0, 0, 754, 792, 0, 3719, 0, 0, 715, 792,
	5146, 0, 0, 978, 0, 0, 5160, 0, 5159, 0,
	4964, 5118, 0, 5191, 0, 1542, 0, 0, 0, 759,
	0, 0, 0, 856, 0, 856, 0, 715, 715, 2936,
	5161, 5168, 856, 0, 0, 0, 0, 0, 0, 0,
	5174, 0, 0, 856, 856, 856, 856, 856, 5181, 4886,
	5183, 5156, 0, 5187, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5108, 0, 5209, 0,
	0, 5244, 0, 2936, 0, 0, 5193, 0, 856, 0,
	758, 5208, 5212, 0, 5210, 0, 5070, 3978, 2933, 2933,
	5221, 4941, 5075, 5258, 5077, 5236, 5125, 3982, 0, 5203,
	0, 5205, 5230, 5207, 5229, 0, 5228, 0, 0, 2838,
	2838, 0, 0, 4737, 1542, 0, 5242, 5243, 0, 0,
	0, 0, 4003, 0, 2933, 0, 0, 0, 863, 0,
	5289, 0, 2934, 0, 0, 2934, 0, 0, 4226, 0,
	0, 5264, 0, 0, 0, 5308, 0, 865, 865, 2936,
	715, 5295, 5296, 0, 5305, 0, 0, 4905, 0, 0,
	2149, 856, 0, 715, 856, 5302, 0, 0, 5298, 5300,
	0, 0, 0, 0, 5137, 5138, 5139, 5140, 5310, 5311,
	1500, 0, 0, 5325, 0, 5334, 5299, 715, 0, 979,
	0, 5301, 863, 865, 2838, 2838, 2838, 0, 5304, 0,
	5330, 932, 5332, 3864, 5319, 792, 0, 2935, 932, 5322,
	0, 2149, 0, 2149, 0, 5328, 4945, 0, 2935, 2935,
	5337, 5338, 2935, 5333, 5341, 0, 5358, 1542, 1542, 5336,
	5357, 5361, 3880, 0, 0, 5040, 792, 0, 0, 2427,
	2935, 0, 792, 4227, 5346, 0, 0, 2267, 0, 0,
	5343, 2907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5312, 0, 5155, 754, 754, 0, 0,
	5206, 5368, 0, 0, 4226, 2936, 854, 0, 5382, 0,
	5363, 0, 0, 5371, 0, 5372, 5379, 5380, 0, 2936,
	5370, 0, 932, 5388, 0, 715, 5386, 4146, 2934, 2934,
	5375, 5149, 5378, 0, 0, 0, 0, 0, 5383, 0,
	5384, 754, 5399, 5395, 0, 0, 0, 0, 1076, 932,
	0, 3456, 5112, 0, 978, 3466, 3467, 3468, 5385, 0,
	1500, 5403, 5402, 0, 2934, 0, 0, 0, 0, 0,
	5422, 0, 0, 0, 0, 5404, 0, 0, 0, 0,
	0, 0, 3471, 5141, 0, 5144, 2935, 0, 5410, 3470,
	0, 0, 0, 0, 5429, 0, 5431, 0, 0, 3472,
	5156, 0, 0, 0, 0, 0, 0, 5427, 0, 4227,
	0, 0, 0, 0, 5434, 854, 5450, 5451, 5452, 5441,
	4941, 926, 792, 5428, 5430, 5436, 0, 0, 754, 5443,
	0, 5031, 0, 0, 4226, 2936, 5447, 0, 5466, 5468,
	5461, 5462, 5454, 0, 0, 0, 3307, 0, 5465, 0,
	0, 0, 0, 5469, 2933, 5190, 932, 5422, 932, 0,
	0, 856, 4674, 0, 5470, 2933, 2933, 5484, 0, 2933,
	5467, 5204, 0, 0, 5485, 5488, 0, 5493, 0, 0,
	0, 0, 854, 932, 0, 0, 792, 2933, 792, 792,
	792, 792, 5497, 0, 5494, 5501, 5503, 5492, 854, 5504,
	5505, 0, 0, 5500, 5510, 0, 0, 5516, 5517, 715,
	5511, 0, 4674, 5518, 865, 865, 5527, 5519, 5523, 0,
	5529, 5422, 5531, 5530, 0, 5522, 0, 0, 5533, 0,
	4325, 0, 0, 5534, 0, 0, 0, 5422, 5538, 4227,
	979, 0, 856, 856, 856, 5525, 5526, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	5285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5406, 0, 0, 2936, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	856, 856, 0, 2933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 932, 0, 5476, 856, 856,
	856, 856, 856, 856, 856, 856, 856, 856, 856, 856,
	856, 856, 856, 856, 0, 856, 0, 0, 0, 0,
	0, 2935, 0, 2149, 0, 0, 0, 4903, 0, 0,
	0, 5439, 5440, 0, 0, 0, 0, 0, 4906, 0,
	0, 0, 0, 5200, 2934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2934, 2934, 0, 5476, 2934,
	0, 0, 0, 5359, 5360, 2935, 0, 5475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2934, 4933, 0,
	2095, 0, 0, 0, 0, 0, 5476, 0, 0, 0,
	0, 0, 1628, 0, 0, 1598, 0, 0, 0, 1610,
	1611, 1612, 0, 0, 0, 0, 0, 0, 0, 825,
	825, 2242, 0, 0, 2243, 0, 0, 0, 2248, 0,
	2240, 0, 0, 0, 0, 2245, 2249, 2244, 5475, 2246,
	0, 2838, 2838, 2247, 1621, 1622, 2241, 1076, 0, 0,
	3456, 2935, 0, 2250, 3466, 3467, 3468, 0, 0, 0,
	0, 0, 0, 0, 5405, 0, 5475, 0, 0, 2936,
	4378, 0, 0, 0, 4501, 0, 0, 0, 863, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 3470, 5364,
	5365, 0, 0, 5367, 0, 0, 0, 926, 3472, 0,
	0, 0, 0, 2934, 926, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5041,
	5042, 0, 0, 0, 863, 0, 0, 4344, 4345, 4346,
	4347, 4348, 2838, 2838, 2838, 2838, 2838, 2838, 2838, 2838,
	2838, 2838, 2838, 2838, 2838, 0, 2838, 0, 2933, 0,
	0, 825, 3463, 3464, 3465, 0, 0, 0, 0, 0,
	0, 3457, 3458, 3459, 3460, 3461, 3462, 0, 0, 0,
	0, 0, 0, 0, 4017, 0, 0, 2935, 0, 2811,
	0, 0, 2084, 0, 0, 0, 0, 0, 926, 0,
	0, 2935, 2933, 0, 0, 0, 2936, 0, 0, 0,
	0, 0, 0, 0, 0, 2936, 4582, 5390, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1628, 0, 0, 1598, 0, 0, 0, 1610, 1611, 1612,
	0, 0, 0, 0, 0, 0, 4077, 0, 0, 2242,
	4611, 0, 2243, 0, 0, 0, 2248, 0, 2240, 0,
	0, 0, 0, 2245, 2249, 2244, 0, 2246, 2933, 0,
	0, 2247, 1621, 1622, 2241, 0, 0, 0, 0, 0,
	0, 2250, 4622, 4623, 0, 0, 1628, 0, 0, 1598,
	0, 0, 0, 1610, 1611, 1612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2242, 0, 2935, 2243, 0,
	0, 0, 2248, 0, 2240, 2838, 5448, 0, 0, 2245,
	2249, 2244, 926, 2246, 926, 0, 0, 2247, 1621, 1622,
	2241, 1628, 0, 0, 1598, 2936, 0, 2250, 1610, 1611,
	1612, 0, 0, 0, 0, 0, 0, 0, 5473, 926,
	2242, 0, 0, 2243, 0, 0, 0, 2248, 2934, 2240,
	0, 0, 0, 0, 2245, 2249, 2244, 0, 2246, 0,
	5231, 5232, 2247, 1621, 1622, 2241, 0, 0, 0, 0,
	0, 0, 2250, 5448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2933, 0, 0, 856, 856, 5512,
	856, 0, 2934, 856, 0, 0, 0, 0, 2933, 5473,
	0, 0, 0, 856, 856, 863, 863, 3659, 0, 0,
	856, 0, 856, 856, 856, 856, 856, 856, 856, 856,
	856, 856, 856, 0, 856, 0, 856, 5473, 856, 856,
	856, 856, 856, 856, 0, 856, 856, 856, 0, 1628,
	856, 0, 1598, 0, 0, 0, 1610, 1611, 1612, 2935,
	0, 0, 0, 0, 0, 0, 0, 0, 2242, 0,
	0, 2243, 0, 0, 0, 2248, 0, 2240, 2934, 0,
	0, 926, 2245, 2249, 2244, 0, 3478, 0, 0, 0,
	2247, 1621, 1622, 2241, 0, 0, 0, 0, 0, 0,
	2250, 0, 3479, 0, 0, 0, 0, 1617, 0, 0,
	0, 0, 0, 0, 0, 0, 1607, 1608, 1609, 0,
	1070, 86, 0, 3449, 2933, 1601, 1602, 1603, 1604, 1605,
	1606, 0, 3450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 856,
	856, 856, 856, 0, 0, 0, 0, 0, 5241, 0,
	0, 3463, 3464, 3465, 0, 0, 0, 0, 3480, 0,
	3457, 3458, 3459, 3460, 3461, 3462, 0, 856, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4877, 4879,
	0, 0, 0, 1628, 0, 0, 1598, 932, 0, 0,
	1610, 1611, 1612, 0, 2934, 0, 932, 0, 0, 0,
	0, 0, 2242, 0, 0, 2243, 0, 0, 2934, 2248,
	2149, 2240, 0, 0, 0, 86, 2245, 2249, 2244, 0,
	2246, 697, 699, 0, 2247, 1621, 1622, 2241, 0, 0,
	0, 86, 0, 0, 2250, 0, 0, 0, 0, 0,
	86, 2935, 5240, 0, 0, 2149, 0, 0, 0, 0,
	856, 0, 5426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 2933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 5442,
	0, 0, 4701, 4414, 0, 4701, 0, 0, 0, 0,
	4014, 0, 0, 0, 0, 0, 0, 2149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 2149, 0, 0, 0,
	0, 0, 0, 0, 2934, 1617, 0, 0, 4990, 0,
	0, 0, 0, 0, 1607, 1608, 1609, 0, 0, 0,
	0, 0, 0, 1601, 1602, 1603, 1604, 1605, 1606, 0,
	3488, 0, 4015, 0, 932, 932, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 2935, 0,
	0, 0, 856, 0, 0, 0, 0, 2935, 0, 0,
	0, 1617, 0, 0, 0, 0, 0, 0, 0, 0,
	1607, 1608, 1609, 0, 0, 0, 0, 792, 792, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5066,
	0, 5066, 5066, 0, 0, 0, 1617, 0, 0, 0,
	0, 0, 792, 0, 0, 1607, 1608, 1609, 0, 792,
	0, 0, 0, 0, 1601, 1602, 1603, 1604, 1605, 1606,
	0, 0, 0, 0, 0, 0, 0, 0, 2933, 0,
	0, 2149, 0, 0, 0, 0, 0, 856, 0, 932,
	856, 1628, 856, 856, 1598, 932, 2934, 0, 1610, 1611,
	1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2242, 0, 5121, 2243, 0, 0, 0, 2248, 0, 2240,
	0, 0, 0, 856, 2245, 2249, 2244, 2935, 2246, 0,
	0, 0, 2247, 1621, 1622, 2241, 0, 0, 792, 0,
	0, 0, 2250, 0, 792, 1305, 0, 0, 0, 4932,
	0, 0, 0, 4235, 0, 0, 0, 0, 0, 0,
	0, 0, 2475, 0, 1617, 0, 0, 0, 0, 0,
	2149, 0, 0, 1607, 1608, 1609, 792, 0, 0, 0,
	0, 0, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0,
	0, 856, 0, 0, 1628, 0, 0, 1598, 0, 856,
	0, 1610, 1611, 1612, 0, 2933, 0, 0, 0, 0,
	0, 856, 1307, 2242, 2933, 0, 2243, 0, 0, 856,
	2248, 0, 2240, 0, 0, 0, 0, 2245, 2249, 2244,
	0, 2246, 0, 0, 0, 2247, 1621, 1622, 2241, 0,
	0, 0, 1275, 0, 0, 2250, 0, 1276, 0, 856,
	856, 1285, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1275, 856, 856, 0, 0, 1276, 856, 0, 0, 1285,
	0, 0, 0, 2838, 0, 856, 0, 0, 2934, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 856, 856, 0, 1275, 1617, 0,
	0, 0, 1276, 1278, 0, 0, 1285, 1607, 1608, 1609,
	0, 856, 0, 0, 5453, 0, 1601, 1602, 1603, 1604,
	1605, 1606, 856, 0, 0, 1306, 0, 0, 0, 0,
	0, 1278, 1284, 0, 2933, 0, 2838, 0, 0, 0,
	0, 0, 4209, 0, 0, 0, 856, 856, 856, 0,
	0, 0, 0, 0, 856, 856, 856, 0, 4232, 856,
	1284, 0, 0, 1289, 0, 0, 2149, 0, 1278, 0,
	856, 0, 2149, 926, 0, 0, 0, 0, 932, 0,
	0, 0, 926, 0, 5342, 0, 0, 4236, 0, 86,
	699, 1289, 856, 0, 0, 0, 856, 1284, 0, 0,
	4234, 0, 0, 0, 0, 2934, 1274, 0, 0, 0,
	0, 0, 0, 0, 2934, 0, 0, 1308, 0, 856,
	0, 697, 0, 0, 856, 0, 0, 0, 1289, 856,
	0, 856, 0, 1279, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 0, 1309, 0, 926,
	1310, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 926, 932, 2284, 0, 1281, 0,
	792, 1274, 0, 0, 1280, 0, 1312, 0, 0, 0,
	0, 0, 1297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 0, 1281, 0, 1279, 0,
	0, 0, 1280, 0, 0, 0, 0, 0, 2149, 932,
	0, 0, 0, 0, 1315, 932, 0, 0, 0, 1282,
	0, 0, 0, 0, 0, 792, 792, 0, 0, 0,
	2838, 1313, 0, 1281, 0, 0, 0, 0, 0, 1280,
	926, 926, 0, 0, 2934, 792, 792, 1282, 1314, 0,
	4237, 3733, 0, 0, 0, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 0, 5458, 1282, 1316, 1617, 0, 0, 2838,
	0, 0, 1283, 0, 856, 1607, 1608, 1609, 0, 0,
	0, 0, 5391, 1286, 1601, 1602, 1603, 1604, 1605, 1606,
	1288, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 3144, 0, 1288, 1287,
	1286, 0, 0, 2400, 2149, 2149, 2149, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 0, 1288, 1287, 901, 0, 0,
	0, 0, 0, 932, 932, 0, 932, 1277, 0, 1617,
	0, 0, 0, 0, 0, 0, 0, 0, 1607, 1608,
	1609, 0, 0, 856, 0, 5381, 0, 1601, 1602, 1603,
	1604, 1605, 1606, 0, 0, 1277, 1628, 1291, 792, 1598,
	0, 0, 0, 1610, 1611, 1612, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 2242, 0, 0, 2243, 0,
	0, 0, 2248, 0, 2240, 1291, 0, 0, 0, 2245,
	2249, 2244, 1277, 2246, 0, 0, 0, 2247, 1621, 1622,
	2241, 697, 0, 0, 697, 697, 0, 2250, 0, 0,
	792, 0, 0, 0, 932, 0, 0, 0, 0, 0,
	0, 0, 1291, 932, 0, 0, 0, 0, 2085, 792,
	792, 0, 2087, 2088, 0, 714, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 2838, 0, 856,
	778, 0, 782, 0, 0, 0, 820, 821, 0, 0,
	826, 827, 792, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 860, 0, 0, 0, 856, 0, 871,
	0, 874, 0, 876, 877, 878, 879, 880, 856, 856,
	0, 889, 856, 856, 856, 894, 856, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 856, 0, 0, 0, 0, 0,
	856, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 856, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 926, 856, 0, 0, 0, 0,
	856, 856, 0, 932, 856, 856, 856, 856, 856, 856,
	856, 856, 856, 856, 856, 856, 856, 0, 856, 0,
	0, 0, 0, 0, 0, 856, 856, 856, 932, 0,
	0, 0, 0, 856, 0, 856, 0, 0, 0, 5273,
	0, 0, 856, 2149, 0, 0, 856, 0, 0, 0,
	0, 856, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 856, 856, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 1598, 0, 0, 0, 1610, 1611,
	1612, 0, 0, 0, 0, 0, 0, 0, 856, 856,
	2242, 856, 856, 2243, 0, 926, 0, 2248, 0, 2240,
	0, 926, 0, 0, 2245, 2249, 2244, 0, 2246, 0,
	0, 0, 2247, 1621, 1622, 2241, 0, 856, 0, 0,
	0, 0, 2250, 0, 0, 932, 856, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 932, 0, 0,
	932, 0, 0, 0, 0, 792, 0, 0, 0, 0,
	0, 0, 2838, 2838, 0, 0, 2838, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 0, 792, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 856, 856, 0, 0, 0, 0,
	0, 1617, 1183, 0, 0, 0, 0, 0, 0, 0,
	1607, 1608, 1609, 0, 0, 0, 0, 5226, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 1628, 926,
	926, 1598, 926, 0, 0, 1610, 1611, 1612, 0, 0,
	86, 0, 2149, 932, 2149, 0, 0, 2242, 0, 0,
	2243, 0, 0, 0, 2248, 2149, 2240, 0, 0, 0,
	0, 2245, 2249, 2244, 0, 2246, 0, 0, 0, 2247,
	1621, 1622, 2241, 0, 0, 0, 0, 0, 0, 2250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1628, 0, 0, 1598, 0, 0, 0, 1610, 1611, 1612,
	0, 0, 4947, 0, 0, 0, 0, 0, 0, 2242,
	0, 0, 2243, 0, 0, 2758, 2248, 0, 2240, 0,
	926, 0, 0, 2245, 2249, 2244, 2149, 2246, 932, 926,
	0, 2247, 1621, 1622, 2241, 0, 932, 0, 0, 0,
	0, 2250, 0, 1628, 0, 0, 1598, 0, 0, 0,
	1610, 1611, 1612, 0, 792, 0, 0, 0, 0, 0,
	714, 0, 2242, 0, 0, 2243, 0, 0, 2149, 2248,
	0, 2240, 0, 0, 0, 0, 2245, 2249, 2244, 0,
	2246, 0, 856, 0, 2247, 1621, 1622, 2241, 0, 0,
	0, 1211, 0, 0, 2250, 0, 0, 0, 0, 856,
	856, 0, 0, 0, 0, 856, 856, 0, 0, 0,
	0, 0, 856, 856, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 1598, 0, 0, 0, 1610, 1611,
	1612, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	2242, 0, 856, 2243, 0, 0, 0, 2248, 0, 2240,
	0, 0, 4904, 0, 2245, 2249, 2244, 1253, 2246, 0,
	1257, 0, 2247, 1621, 1622, 2241, 0, 0, 0, 0,
	0, 0, 2250, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 856, 926,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 932, 0, 1369, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 856, 0, 1398,
	0, 856, 856, 0, 926, 856, 1617, 0, 0, 0,
	0, 856, 0, 0, 0, 1607, 1608, 1609, 0, 0,
	0, 0, 5211, 856, 1601, 1602, 1603, 1604, 1605, 1606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 932, 1628, 0, 0, 1598,
	932, 0, 0, 1610, 1611, 1612, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 2242, 0, 0, 2243, 0,
	0, 0, 2248, 0, 2240, 856, 0, 0, 0, 2245,
	2249, 2244, 0, 2246, 0, 0, 4468, 2247, 1621, 1622,
	2241, 2149, 0, 0, 0, 0, 0, 2250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 926, 926, 856, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 1628, 0, 0, 1598, 0, 0,
	0, 1610, 1611, 1612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2242, 0, 856, 2243, 0, 0, 926,
	2248, 0, 2240, 0, 0, 0, 0, 2245, 2249, 2244,
	0, 2246, 932, 0, 0, 2247, 1621, 1622, 2241, 0,
	0, 0, 0, 1617, 0, 2250, 0, 792, 0, 0,
	792, 0, 1607, 1608, 1609, 0, 0, 0, 0, 5188,
	0, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 2769, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1617, 0, 0, 932, 932,
	0, 0, 0, 0, 1607, 1608, 1609, 0, 0, 0,
	0, 0, 0, 1601, 1602, 1603, 1604, 1605, 1606, 926,
	0, 0, 0, 0, 2877, 0, 714, 0, 792, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 856, 856, 856, 0, 0, 1617, 0,
	0, 0, 0, 1355, 0, 0, 0, 1607, 1608, 1609,
	2296, 0, 0, 0, 0, 0, 1601, 1602, 1603, 1604,
	1605, 1606, 0, 0, 856, 856, 0, 0, 856, 856,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2332, 0, 0, 1053, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 926, 856, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 1361, 0, 0, 0, 0,
	0, 0, 0, 856, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 1617, 0, 856, 856,
	2758, 0, 0, 0, 0, 1607, 1608, 1609, 2149, 1357,
	0, 699, 4873, 0, 1601, 1602, 1603, 1604, 1605, 1606,
	0, 2921, 2921, 1628, 0, 0, 1598, 0, 856, 0,
	1610, 1611, 1612, 932, 2452, 0, 0, 0, 0, 0,
	0, 0, 2242, 0, 0, 2243, 0, 0, 0, 2248,
	0, 2240, 0, 0, 0, 0, 2245, 2249, 2244, 0,
	2246, 0, 0, 0, 2247, 1621, 1622, 2241, 0, 0,
	0, 0, 0, 0, 2250, 0, 0, 0, 0, 1628,
	0, 2506, 1598, 856, 0, 0, 1610, 1611, 1612, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 2242, 0,
	0, 2243, 0, 0, 856, 2248, 0, 2240, 0, 0,
	0, 0, 2245, 2249, 2244, 0, 2246, 0, 0, 1356,
	2247, 1621, 1622, 2241, 932, 0, 0, 0, 0, 0,
	2250, 0, 0, 0, 0, 0, 792, 0, 0, 0,
	0, 0, 0, 2594, 0, 0, 2596, 856, 0, 0,
	926, 1617, 0, 0, 0, 0, 0, 0, 0, 1352,
	1607, 1608, 1609, 0, 932, 932, 0, 792, 792, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0, 856,
	0, 0, 1349, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 856, 0, 856,
	0, 0, 0, 0, 0, 0, 1354, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	856, 0, 0, 0, 926, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 1360, 1617,
	0, 856, 0, 0, 0, 0, 0, 856, 1607, 1608,
	1609, 0, 0, 0, 0, 4845, 0, 1601, 1602, 1603,
	1604, 1605, 1606, 0, 792, 0, 0, 0, 0, 0,
	1380, 0, 0, 94, 0, 0, 1347, 0, 0, 1574,
	0, 1581, 0, 0, 0, 0, 1628, 0, 1592, 1598,
	1353, 0, 0, 1610, 1611, 1612, 0, 932, 0, 2074,
	2075, 2076, 2077, 2078, 932, 2242, 1350, 0, 2243, 0,
	2083, 0, 2248, 1348, 2240, 0, 0, 1358, 0, 2245,
	2249, 2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622,
	2241, 0, 856, 0, 2101, 2149, 0, 2250, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 926, 0,
	856, 0, 0, 0, 1351, 0, 0, 792, 856, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 932, 0, 932, 932, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 1598, 0, 0, 2231, 1610, 1611,
	1612, 856, 0, 2085, 926, 926, 0, 856, 856, 856,
	2242, 856, 0, 2243, 0, 0, 0, 2248, 0, 2240,
	856, 2149, 0, 2921, 2245, 2249, 2244, 0, 2246, 0,
	0, 0, 2247, 1621, 1622, 2241, 0, 0, 0, 0,
	0, 0, 2250, 0, 0, 0, 0, 0, 932, 856,
	0, 2149, 0, 0, 0, 0, 0, 2758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2149, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 0,
	2085, 3392, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1617, 0,
	0, 0, 0, 0, 0, 0, 0, 1607, 1608, 1609,
	0, 0, 0, 0, 4824, 0, 1601, 1602, 1603, 1604,
	1605, 1606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1617, 0, 0, 0, 0, 0,
	0, 0, 856, 1607, 1608, 1609, 0, 0, 0, 0,
	4801, 0, 1601, 1602, 1603, 1604, 1605, 1606, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 856,
	856, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3555, 0, 3559, 0, 0, 0, 0,
	0, 0, 1628, 0, 0, 1598, 0, 0, 0, 1610,
	1611, 1612, 0, 0, 856, 0, 0, 0, 0, 0,
	926, 2242, 0, 0, 856, 0, 0, 856, 2248, 0,
	2240, 0, 0, 856, 856, 2245, 2249, 2244, 0, 2246,
	0, 0, 0, 2247, 1621, 1622, 2241, 0, 0, 0,
	0, 0, 0, 2250, 0, 0, 792, 0, 0, 0,
	926, 926, 0, 0, 0, 0, 1628, 0, 0, 1598,
	0, 0, 0, 1610, 1611, 1612, 0, 0, 0, 856,
	932, 0, 0, 0, 792, 2242, 0, 0, 2243, 0,
	856, 0, 2248, 0, 2240, 0, 0, 0, 0, 2245,
	2249, 2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622,
	2241, 0, 0, 0, 0, 0, 0, 2250, 0, 0,
	86, 1617, 0, 0, 856, 856, 0, 0, 856, 0,
	1607, 1608, 1609, 0, 0, 0, 0, 4664, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 792, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 2074, 2075, 0, 0,
	856, 0, 856, 925, 925, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 2716, 2717, 2718, 2719, 2720, 2721,
	2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731,
	0, 2737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	926, 0, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1617, 0, 0, 857,
	0, 0, 0, 0, 0, 1607, 1608, 1609, 856, 0,
	0, 0, 4646, 0, 1601, 1602, 1603, 1604, 1605, 1606,
	0, 856, 0, 1275, 0, 0, 0, 0, 1276, 932,
	1628, 0, 1285, 1598, 0, 0, 0, 1610, 1611, 1612,
	856, 0, 2149, 0, 0, 0, 0, 0, 0, 2242,
	0, 926, 2243, 926, 926, 0, 2248, 0, 2240, 0,
	0, 0, 0, 2245, 2249, 2244, 0, 2246, 0, 0,
	0, 2247, 1621, 1622, 2241, 0, 0, 0, 1355, 2990,
	0, 2250, 2486, 0, 0, 0, 0, 0, 856, 856,
	0, 0, 0, 0, 1278, 0, 0, 3004, 0, 0,
	0, 0, 0, 2149, 856, 0, 0, 0, 0, 3021,
	0, 0, 0, 0, 0, 0, 0, 3032, 0, 0,
	856, 856, 0, 1284, 926, 0, 0, 0, 0, 0,
	0, 2149, 0, 0, 0, 0, 0, 0, 0, 0,
	1361, 0, 0, 0, 0, 794, 0, 0, 4428, 3077,
	3078, 3079, 0, 0, 1289, 0, 794, 794, 0, 0,
	3086, 0, 0, 0, 0, 0, 0, 0, 3097, 0,
	3101, 3102, 0, 0, 1357, 0, 3106, 864, 794, 3110,
	3111, 0, 864, 3118, 864, 3120, 3123, 0, 0, 0,
	0, 794, 794, 2962, 0, 0, 0, 1274, 0, 3145,
	3146, 1355, 0, 3150, 3151, 0, 794, 794, 794, 0,
	0, 0, 0, 0, 2085, 0, 0, 0, 0, 0,
	3160, 3161, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 3174, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 0, 3185, 3186, 3187, 3188, 3189,
	0, 0, 3191, 0, 0, 0, 3195, 1617, 0, 1281,
	3198, 3199, 1346, 1361, 0, 1280, 1607, 1608, 1609, 0,
	0, 0, 0, 0, 0, 1601, 1602, 1603, 1604, 1605,
	1606, 3207, 3208, 0, 1356, 3213, 0, 3214, 0, 0,
	0, 0, 3215, 0, 3216, 3217, 0, 1357, 0, 3218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 0, 0, 3231, 0,
	0, 1617, 0, 0, 1352, 3234, 0, 0, 3235, 0,
	1607, 1608, 1609, 0, 0, 3246, 3247, 4637, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 86, 3264, 1349, 0, 0,
	86, 86, 0, 0, 0, 1283, 0, 0, 0, 0,
	0, 0, 2921, 0, 0, 2921, 1286, 0, 0, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3804,
	0, 1288, 1287, 0, 0, 0, 926, 1356, 0, 86,
	0, 0, 0, 1360, 0, 0, 0, 0, 0, 2790,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2812,
	2814, 0, 0, 0, 0, 0, 2820, 0, 2831, 2834,
	0, 2845, 2846, 2851, 2854, 0, 0, 1352, 94, 0,
	2862, 1347, 0, 0, 2866, 2872, 2814, 2814, 2879, 2814,
	0, 2814, 2814, 2814, 0, 1353, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 1277, 0,
	0, 1350, 1099, 0, 0, 0, 0, 0, 1348, 0,
	0, 2963, 1358, 0, 1354, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 1276, 2921, 1351,
	0, 1285, 0, 0, 0, 1617, 1360, 0, 925, 0,
	0, 0, 0, 0, 1607, 1608, 1609, 1058, 0, 0,
	0, 0, 0, 1601, 1602, 1603, 1604, 1605, 1606, 0,
	0, 2896, 0, 0, 0, 2729, 2730, 2731, 2737, 0,
	0, 94, 0, 0, 1347, 1628, 0, 0, 1598, 0,
	0, 0, 1610, 1611, 1612, 0, 0, 0, 1353, 0,
	0, 0, 0, 1278, 2242, 0, 0, 2243, 0, 0,
	0, 2248, 0, 2240, 1350, 926, 0, 0, 2245, 2249,
	2244, 1348, 2246, 0, 0, 1358, 2247, 1621, 1622, 2241,
	0, 0, 1284, 0, 0, 0, 2250, 0, 2964, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 0,
	0, 0, 1351, 1289, 2965, 793, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 793, 0, 794,
	0, 0, 794, 0, 0, 0, 912, 912, 0, 0,
	793, 793, 0, 0, 0, 0, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 793, 793, 793, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1628, 0,
	0, 1598, 0, 1279, 0, 1610, 1611, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2242, 0, 793,
	2243, 0, 0, 0, 2248, 0, 2240, 0, 0, 0,
	0, 2245, 2249, 2244, 0, 2246, 0, 0, 1281, 2247,
	1621, 1622, 2241, 0, 1280, 0, 0, 3624, 0, 2250,
	0, 4403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 1276, 0, 0,
	0, 1285, 0, 0, 0, 3665, 0, 0, 3193, 1628,
	0, 0, 1598, 3673, 0, 3673, 1610, 1611, 1612, 1282,
	0, 3682, 0, 0, 0, 0, 0, 0, 2242, 0,
	0, 2243, 0, 0, 0, 2248, 0, 2240, 0, 0,
	0, 0, 2245, 2249, 2244, 0, 2246, 0, 0, 0,
	2247, 1621, 1622, 2241, 0, 0, 0, 0, 0, 0,
	2250, 0, 0, 1278, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 3744, 0, 0, 2921, 2921, 0, 0, 2921,
	0, 0, 1284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3768, 3769, 3770, 3771, 0, 0, 3799, 0,
	1288, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 4402, 0,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3796, 3797, 0, 3800, 3801, 3802, 0, 0,
	0, 0, 0, 0, 0, 0, 1274, 0, 0, 0,
	0, 0, 0, 794, 0, 0, 0, 794, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 1279, 3820, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 794, 0, 0, 1581, 0, 0,
	0, 0, 0, 3835, 0, 2083, 794, 1291, 0, 0,
	0, 3836, 794, 0, 0, 925, 0, 1592, 1281, 0,
	0, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	0, 1628, 0, 0, 1598, 0, 0, 0, 1610, 1611,
	1612, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	2242, 0, 0, 2243, 0, 3363, 3364, 2248, 0, 2240,
	0, 3370, 4401, 0, 2245, 2249, 2244, 0, 2246, 1282,
	0, 0, 2247, 1621, 1622, 2241, 0, 3872, 0, 0,
	1617, 0, 2250, 0, 0, 0, 0, 0, 0, 1607,
	1608, 1609, 0, 0, 0, 0, 4405, 3399, 1601, 1602,
	1603, 1604, 1605, 1606, 0, 0, 0, 0, 0, 2790,
	2790, 2790, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1286, 0, 3424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 925,
	0, 925, 0, 0, 0, 0, 0, 0, 3163, 0,
	1288, 1287, 0, 0, 0, 0, 0, 0, 793, 0,
	2851, 2851, 2851, 2151, 0, 0, 925, 0, 793, 0,
	0, 793, 0, 0, 0, 0, 3497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 0, 0, 0, 0, 1276, 0, 3519, 0,
	1285, 0, 3523, 0, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 1617, 2151, 0, 2151, 0, 0, 0,
	0, 0, 1607, 1608, 1609, 3535, 0, 1277, 0, 0,
	3539, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 794,
	0, 0, 0, 0, 0, 794, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 2921, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 0, 0, 1617, 0, 0, 0, 925, 1628,
	0, 912, 1598, 1607, 1608, 1609, 1610, 1611, 1612, 86,
	0, 0, 1601, 1602, 1603, 1604, 1605, 1606, 2242, 0,
	0, 2243, 1289, 86, 0, 2248, 0, 2240, 0, 0,
	0, 0, 2245, 2249, 2244, 0, 2246, 0, 0, 0,
	2247, 1621, 1622, 2241, 0, 0, 86, 0, 0, 0,
	2250, 0, 4397, 0, 0, 0, 0, 0, 0, 0,
	0, 4106, 0, 0, 0, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 3709, 0, 1598, 0,
	0, 0, 1610, 1611, 1612, 0, 0, 0, 0, 0,
	0, 0, 1279, 3673, 2242, 794, 0, 2243, 0, 4132,
	3736, 2248, 0, 2240, 0, 0, 0, 0, 2245, 2249,
	2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622, 2241,
	0, 0, 0, 0, 0, 0, 2250, 1281, 0, 0,
	0, 0, 0, 1280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 793, 793, 0, 794,
	0, 794, 794, 794, 794, 0, 0, 4173, 0, 0,
	0, 0, 0, 0, 3673, 0, 0, 1628, 1282, 0,
	1598, 0, 0, 793, 1610, 1611, 1612, 0, 0, 0,
	4202, 4203, 0, 0, 0, 793, 2242, 0, 0, 2243,
	0, 793, 0, 2248, 0, 2240, 86, 4219, 0, 3816,
	2245, 2249, 2244, 0, 2246, 864, 864, 864, 2247, 1621,
	1622, 2241, 0, 1283, 0, 0, 1617, 4249, 2250, 0,
	0, 0, 0, 0, 1286, 1607, 1608, 1609, 0, 0,
	794, 0, 0, 4254, 1601, 1602, 1603, 1604, 1605, 1606,
	0, 0, 4256, 4257, 4258, 0, 0, 4261, 0, 0,
	4264, 4265, 4266, 4267, 0, 0, 0, 3149, 0, 1288,
	1287, 0, 0, 4276, 0, 0, 0, 0, 86, 0,
	4279, 0, 4280, 0, 0, 0, 0, 0, 0, 0,
	0, 1613, 0, 4294, 0, 0, 0, 0, 0, 0,
	0, 4299, 4300, 0, 0, 0, 4303, 4304, 4305, 4306,
	4307, 0, 0, 0, 0, 0, 2151, 1628, 0, 0,
	1598, 0, 0, 0, 1610, 1611, 1612, 0, 0, 0,
	0, 0, 1275, 0, 2921, 0, 2242, 1276, 0, 2243,
	0, 1285, 0, 2248, 0, 2240, 1277, 0, 853, 0,
	2245, 2249, 2244, 0, 2246, 0, 0, 0, 2247, 1621,
	1622, 2241, 2150, 3912, 0, 0, 0, 0, 2250, 0,
	0, 0, 0, 0, 3920, 3921, 1291, 0, 3924, 0,
	0, 0, 3927, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 3932, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 2085, 3938, 793, 0, 0,
	0, 0, 0, 2150, 0, 2150, 0, 0, 0, 0,
	2790, 1613, 0, 0, 0, 0, 3951, 3952, 0, 0,
	0, 0, 1284, 0, 0, 0, 3963, 0, 793, 0,
	0, 0, 0, 3968, 793, 0, 0, 2814, 2814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3979, 0, 1289, 1167, 0, 3981, 2790, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4000, 4001, 4002, 0, 0, 0, 0, 0, 0,
	0, 4008, 0, 0, 1617, 912, 1274, 0, 2862, 0,
	0, 0, 0, 1607, 1608, 1609, 0, 2812, 0, 0,
	4441, 2814, 1601, 1602, 1603, 1604, 1605, 1606, 0, 4034,
	4035, 4036, 0, 1279, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 913, 913, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	1617, 0, 0, 0, 0, 2814, 0, 2790, 4081, 1607,
	1608, 1609, 0, 0, 793, 0, 4388, 0, 1601, 1602,
	1603, 1604, 1605, 1606, 0, 0, 0, 0, 1628, 0,
	0, 1598, 912, 4110, 912, 1610, 1611, 1612, 0, 1282,
	0, 0, 4115, 4116, 0, 0, 0, 2242, 4532, 0,
	2243, 0, 0, 0, 2248, 0, 2240, 0, 0, 912,
	0, 2245, 2249, 2244, 0, 2246, 0, 0, 0, 2247,
	1621, 1622, 2241, 0, 0, 0, 0, 0, 793, 2250,
	793, 793, 793, 793, 1283, 0, 0, 0, 928, 928,
	0, 0, 0, 0, 0, 1286, 0, 0, 0, 0,
	0, 0, 1617, 0, 0, 0, 0, 0, 0, 86,
	925, 1607, 1608, 1609, 0, 0, 0, 0, 4375, 925,
	1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 2450, 0,
	1288, 1287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4590, 0, 0,
	4592, 0, 0, 0, 0, 0, 4595, 4596, 4597, 793,
	0, 4600, 4601, 4602, 0, 0, 0, 0, 0, 0,
	0, 4606, 4607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 4624, 4625, 0, 0, 4629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4633, 0, 0, 0,
	0, 0, 1613, 0, 0, 2150, 0, 1291, 0, 1613,
	0, 0, 1617, 0, 0, 0, 0, 0, 0, 0,
	1613, 1607, 1608, 1609, 0, 0, 0, 0, 4281, 0,
	1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 925, 925, 0,
	0, 0, 4652, 0, 0, 0, 0, 0, 0, 1628,
	0, 0, 1598, 0, 0, 0, 1610, 1611, 1612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2242, 0,
	0, 2243, 0, 0, 0, 2248, 0, 2240, 0, 0,
	0, 0, 2245, 2249, 2244, 4694, 2246, 0, 0, 0,
	2247, 1621, 1622, 2241, 0, 0, 0, 0, 4355, 1628,
	2250, 0, 1598, 0, 0, 0, 1610, 1611, 1612, 0,
	0, 0, 0, 0, 0, 4364, 4365, 0, 0, 0,
	0, 4369, 4370, 0, 0, 2248, 0, 2240, 4373, 4374,
	0, 0, 2245, 2249, 2244, 4377, 2246, 0, 0, 2790,
	2247, 1621, 1622, 2241, 0, 0, 0, 0, 0, 0,
	2250, 0, 925, 1628, 0, 0, 1598, 4384, 925, 3673,
	1610, 1611, 1612, 0, 0, 4037, 0, 0, 1592, 0,
	0, 4806, 2242, 0, 0, 2243, 4809, 0, 0, 2248,
	0, 2240, 4815, 2151, 0, 4817, 2245, 2249, 2244, 0,
	2246, 0, 0, 0, 2247, 1621, 1622, 2241, 0, 0,
	0, 0, 0, 0, 2250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4417, 0, 4420, 0, 2151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4852, 4853, 0, 0,
	0, 0, 4859, 4439, 0, 0, 4861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4874, 0, 0, 0, 0,
	2151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 0, 0, 2151,
	0, 0, 0, 1617, 0, 0, 0, 0, 0, 0,
	0, 0, 1607, 1608, 1609, 0, 0, 0, 0, 4212,
	0, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 913, 1628, 0,
	0, 1598, 0, 0, 0, 1610, 1611, 1612, 0, 0,
	794, 794, 0, 0, 0, 0, 0, 2242, 0, 0,
	2243, 0, 0, 0, 2248, 0, 2240, 0, 0, 0,
	4545, 2245, 2249, 2244, 0, 2246, 0, 1166, 0, 2247,
	1621, 1622, 2241, 0, 0, 794, 0, 0, 0, 2250,
	0, 0, 794, 0, 0, 0, 0, 0, 0, 0,
	0, 4573, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2151, 0, 0, 0, 0, 0,
	0, 3673, 0, 864, 0, 864, 864, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 5024, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4616, 794, 1613, 1613, 1613, 1613, 1613, 794, 0, 0,
	0, 1613, 0, 0, 0, 0, 0, 0, 5058, 0,
	0, 5061, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 0, 0, 2151, 0, 0, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 2841, 0, 0, 925, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4641, 0, 0, 1617, 0, 0, 0, 0, 4643,
	4644, 4645, 1275, 1607, 1608, 1609, 0, 1276, 0, 0,
	4191, 1285, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0,
	0, 0, 925, 0, 0, 0, 0, 0, 925, 0,
	4653, 0, 0, 0, 4656, 4657, 4658, 0, 0, 0,
	0, 927, 927, 0, 1617, 0, 0, 0, 0, 0,
	0, 0, 0, 1607, 1608, 1609, 0, 0, 0, 0,
	0, 2814, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 4698,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 1613,
	0, 0, 912, 0, 0, 4715, 0, 0, 1617, 0,
	0, 0, 1284, 0, 0, 0, 0, 1607, 1608, 1609,
	0, 0, 0, 909, 909, 5194, 1601, 1602, 1603, 1604,
	1605, 1606, 2150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5214, 5215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2150, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2151,
	0, 0, 0, 0, 912, 2151, 1274, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 1272, 0, 0,
	913, 0, 0, 0, 0, 0, 925, 925, 0, 925,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 2150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 2150, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 1281, 0,
	0, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	912, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5313, 0, 0,
	0, 0, 0, 794, 913, 4889, 0, 0, 0, 0,
	5323, 0, 0, 0, 0, 0, 0, 925, 0, 1282,
	0, 0, 0, 0, 0, 2862, 925, 0, 0, 928,
	0, 2464, 0, 1617, 5339, 0, 928, 0, 4917, 793,
	793, 2151, 1607, 1608, 1609, 0, 0, 0, 0, 3977,
	0, 1601, 1602, 1603, 1604, 1605, 1606, 0, 794, 794,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 1286, 0, 0, 794, 794,
	0, 793, 0, 4949, 0, 0, 1355, 0, 794, 0,
	1628, 0, 0, 1598, 0, 912, 0, 1610, 1611, 1612,
	0, 912, 0, 2150, 0, 0, 0, 0, 1270, 2242,
	1288, 1287, 2243, 0, 0, 0, 2248, 0, 2240, 0,
	928, 0, 0, 2245, 2249, 2244, 0, 2246, 0, 0,
	0, 2247, 1621, 1622, 2241, 0, 0, 0, 913, 0,
	913, 2250, 5400, 0, 0, 0, 0, 928, 1361, 0,
	0, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 913, 793, 0, 5019, 0,
	0, 0, 0, 0, 0, 0, 0, 2151, 2151, 2151,
	0, 1628, 1357, 0, 1598, 3964, 0, 1277, 1610, 1611,
	1612, 0, 2150, 3496, 0, 0, 925, 0, 793, 0,
	2242, 0, 0, 2243, 0, 0, 925, 2248, 0, 2240,
	0, 5052, 0, 1361, 2245, 2249, 2244, 1291, 2246, 0,
	0, 0, 2247, 1621, 1622, 2241, 0, 0, 0, 0,
	0, 925, 2250, 0, 0, 5069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1357, 0, 0,
	0, 794, 0, 0, 928, 0, 928, 2083, 0, 0,
	0, 0, 0, 5091, 5091, 5091, 0, 5094, 0, 0,
	1346, 0, 0, 0, 0, 0, 2814, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 0, 0, 0, 913, 0, 0,
	0, 0, 0, 794, 1613, 1613, 1613, 1613, 1613, 1613,
	1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
	0, 0, 794, 794, 0, 1613, 5521, 0, 0, 0,
	0, 0, 1352, 0, 0, 1346, 0, 0, 0, 0,
	794, 0, 2841, 2841, 0, 0, 0, 0, 794, 0,
	0, 0, 864, 0, 0, 1349, 0, 1356, 925, 0,
	0, 0, 0, 0, 0, 794, 0, 0, 0, 925,
	925, 794, 0, 925, 0, 0, 0, 0, 1613, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 927, 1352, 2150, 0,
	1613, 0, 1613, 0, 2150, 0, 925, 0, 1613, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 5213, 1613,
	1349, 1360, 1613, 0, 0, 3469, 0, 2841, 2841, 2841,
	0, 0, 0, 1613, 1613, 0, 0, 0, 0, 1613,
	0, 0, 1613, 4889, 1354, 0, 0, 0, 0, 0,
	1613, 5091, 0, 1374, 1613, 0, 94, 0, 0, 1347,
	1613, 0, 0, 0, 0, 0, 0, 1613, 909, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 912, 0, 0, 1613, 0, 1360, 0, 0, 1350,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	1358, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 1343, 0,
	5297, 94, 0, 0, 1347, 912, 0, 0, 0, 0,
	0, 912, 0, 5306, 0, 0, 2151, 1351, 1353, 0,
	2150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 0, 0, 793, 793, 0,
	0, 1348, 0, 0, 0, 1358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 793, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 793, 0, 0,
	0, 0, 0, 0, 0, 1617, 4889, 0, 0, 0,
	0, 925, 1351, 0, 1607, 1608, 1609, 0, 0, 925,
	0, 0, 0, 1601, 1602, 1603, 1604, 1605, 1606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1628, 0, 0,
	1598, 0, 0, 0, 1610, 1611, 1612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2242, 0, 794, 2243,
	0, 0, 0, 2248, 0, 2240, 2150, 2150, 2150, 0,
	2245, 2249, 2244, 0, 2246, 0, 1617, 0, 2247, 1621,
	1622, 2241, 0, 0, 0, 1607, 1608, 1609, 2250, 912,
	912, 0, 912, 0, 1601, 1602, 1603, 1604, 1605, 1606,
	0, 0, 0, 0, 5091, 0, 0, 0, 0, 0,
	0, 0, 0, 794, 0, 5418, 1628, 794, 794, 1598,
	0, 0, 0, 1610, 1611, 1612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2242, 0, 0, 2243, 0,
	793, 0, 2248, 0, 2240, 0, 0, 0, 0, 2245,
	2249, 2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622,
	2241, 0, 0, 0, 0, 0, 0, 2250, 0, 0,
	0, 1613, 927, 0, 0, 0, 0, 925, 0, 927,
	912, 0, 0, 0, 0, 2792, 0, 0, 0, 912,
	0, 0, 793, 0, 0, 2151, 0, 2151, 0, 0,
	0, 0, 0, 0, 0, 2792, 1628, 2792, 2151, 1598,
	0, 793, 793, 1610, 1611, 1612, 0, 0, 0, 0,
	0, 2792, 0, 0, 0, 2242, 0, 0, 2243, 793,
	0, 0, 2248, 0, 2240, 2790, 0, 793, 0, 2245,
	2249, 2244, 0, 2246, 909, 0, 0, 2247, 1621, 1622,
	2241, 909, 0, 925, 793, 0, 0, 2250, 0, 3486,
	793, 925, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 0, 0, 1598, 2151,
	0, 0, 1610, 1611, 1612, 0, 0, 3481, 0, 0,
	927, 0, 0, 0, 2242, 0, 0, 2243, 0, 0,
	0, 2248, 0, 2240, 0, 0, 0, 794, 2245, 2249,
	2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622, 2241,
	0, 2151, 0, 0, 0, 0, 2250, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 0, 0, 0, 0,
	0, 1613, 1613, 0, 2841, 2841, 0, 0, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 0, 909, 0, 0, 0, 0, 3469, 3469, 912,
	0, 0, 0, 0, 0, 0, 0, 1613, 0, 2464,
	0, 0, 0, 0, 0, 925, 0, 0, 2464, 0,
	0, 0, 0, 0, 912, 0, 0, 927, 0, 927,
	0, 0, 1613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 0, 0, 0, 927, 2150, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 2841, 2841, 2841, 2841, 2841,
	2841, 2841, 2841, 2841, 2841, 2841, 2841, 2841, 0, 2841,
	0, 3469, 3469, 3469, 0, 913, 0, 0, 0, 0,
	0, 925, 925, 0, 0, 0, 0, 0, 0, 909,
	913, 909, 0, 0, 0, 1613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 928, 909, 1613, 0, 0,
	0, 1613, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 0, 0, 0, 1613, 0, 0,
	0, 912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 912, 0, 0, 912, 0, 0, 0,
	0, 0, 1617, 0, 0, 0, 2464, 3181, 0, 0,
	0, 1607, 1608, 1609, 0, 3184, 927, 793, 3943, 0,
	1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 0, 912,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2151, 706, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 794, 793, 0, 0, 0, 793, 793, 2841, 0,
	0, 1617, 0, 0, 0, 0, 0, 0, 909, 0,
	1607, 1608, 1609, 0, 0, 0, 925, 3514, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 928, 928, 0, 0, 0, 913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 1613, 0, 0,
	794, 0, 0, 794, 2150, 0, 2150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2150, 0, 0,
	0, 1617, 0, 0, 1613, 0, 735, 0, 0, 0,
	1607, 1608, 1609, 0, 0, 0, 0, 925, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 839, 842, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 925, 925, 0,
	0, 0, 912, 0, 0, 0, 0, 928, 2150, 0,
	1617, 794, 0, 928, 0, 0, 0, 0, 0, 1607,
	1608, 1609, 0, 0, 1613, 0, 0, 0, 1601, 1602,
	1603, 1604, 1605, 1606, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2150, 0, 0, 135, 0, 0, 0, 209, 0, 0,
	164, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 160, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2792, 2792, 2792, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1613, 0, 0, 145, 0, 0, 0, 0, 1613, 1613,
	0, 2151, 1613, 3469, 3469, 1613, 0, 0, 0, 0,
	1613, 0, 0, 0, 0, 0, 1613, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	1613, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1613, 0, 0, 0, 0, 1613, 0, 0, 0,
	912, 0, 0, 0, 218, 0, 0, 1613, 0, 1613,
	913, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469,
	3469, 3469, 3469, 3469, 0, 0, 864, 3469, 1613, 1613,
	1613, 0, 0, 0, 150, 214, 1613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 925, 0,
	925, 925, 1613, 1613, 1613, 141, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 912, 0, 219, 794,
	0, 0, 0, 0, 912, 0, 220, 0, 0, 0,
	864, 0, 0, 0, 213, 0, 0, 3181, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 147, 1613,
	794, 794, 0, 0, 0, 0, 142, 205, 0, 0,
	0, 0, 0, 0, 143, 0, 928, 0, 0, 161,
	0, 925, 0, 2150, 0, 0, 0, 0, 1613, 0,
	0, 3181, 0, 1613, 1613, 0, 0, 913, 0, 1275,
	0, 0, 0, 0, 1276, 0, 0, 0, 1285, 0,
	793, 0, 0, 0, 0, 0, 0, 3469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 928, 0, 149, 207, 794, 0, 0,
	1278, 0, 226, 0, 223, 0, 0, 152, 0, 210,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 793,
	0, 0, 793, 0, 0, 0, 156, 0, 216, 1284,
	0, 0, 912, 0, 136, 0, 0, 928, 0, 0,
	0, 0, 144, 928, 217, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 203, 0, 0, 0, 151, 0,
	1289, 0, 0, 153, 912, 912, 0, 0, 2151, 148,
	211, 159, 0, 158, 140, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 139, 0, 0, 927, 0, 0,
	794, 163, 0, 162, 0, 2464, 3181, 1024, 3181, 0,
	0, 0, 0, 1274, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1175, 0, 0, 0, 0,
	1279, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1193, 0, 0, 0, 0, 0,
	909, 0, 1201, 1203, 927, 1205, 0, 0, 0, 909,
	0, 0, 0, 1613, 0, 1281, 0, 0, 0, 927,
	0, 1280, 1613, 1613, 2151, 0, 0, 1613, 1613, 0,
	0, 1613, 1613, 0, 0, 1613, 913, 0, 0, 0,
	0, 0, 1613, 925, 0, 913, 0, 1244, 0, 912,
	0, 0, 0, 0, 2151, 0, 2841, 0, 0, 0,
	0, 928, 928, 0, 928, 0, 1282, 0, 0, 0,
	0, 2151, 0, 0, 0, 1613, 909, 794, 1613, 0,
	2150, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 909, 0, 0, 0, 927, 927, 1613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 1321, 0, 0, 0, 0, 0, 0, 2841,
	0, 0, 1286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 2446, 1628, 1288, 1287, 1598,
	0, 928, 0, 1610, 1611, 1612, 0, 909, 909, 0,
	0, 0, 0, 0, 0, 2242, 2792, 1613, 2243, 0,
	912, 0, 2248, 0, 2240, 0, 0, 0, 0, 2245,
	2249, 2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622,
	2241, 0, 0, 1613, 0, 0, 0, 2250, 793, 0,
	927, 0, 0, 0, 0, 913, 927, 0, 0, 0,
	912, 912, 0, 2792, 0, 913, 0, 0, 0, 0,
	0, 1613, 0, 0, 1277, 0, 0, 0, 0, 793,
	793, 0, 925, 0, 0, 0, 0, 0, 0, 0,
	913, 0, 0, 0, 0, 0, 0, 0, 0, 1537,
	0, 0, 0, 0, 1291, 0, 0, 0, 0, 0,
	1537, 0, 0, 0, 1613, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 864, 864, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 1613, 1613, 1613, 0, 0, 0, 0, 0, 794,
	0, 1613, 3469, 2841, 1613, 1613, 1613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 864, 0, 0, 0, 0, 794, 0, 0,
	0, 928, 0, 2792, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1613, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	912, 3469, 2841, 1613, 0, 0, 0, 2464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2464, 2464,
	0, 0, 3181, 1628, 0, 0, 1598, 0, 794, 0,
	1610, 1611, 1612, 0, 0, 3446, 0, 0, 0, 0,
	0, 0, 2242, 0, 0, 2243, 0, 2150, 0, 2248,
	0, 2240, 0, 0, 0, 913, 2245, 2249, 2244, 0,
	2246, 0, 0, 0, 2247, 1621, 1622, 2241, 0, 793,
	0, 0, 2233, 1628, 2250, 0, 1598, 0, 0, 0,
	1610, 1611, 1612, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 2242, 912, 912, 2243, 0, 0, 0, 2248,
	2281, 2240, 0, 0, 0, 0, 2245, 2249, 2244, 0,
	2246, 0, 0, 0, 2247, 1621, 1622, 2241, 0, 0,
	0, 0, 0, 928, 2250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 928, 0, 0, 928, 927,
	0, 0, 0, 0, 0, 0, 0, 3453, 2347, 0,
	0, 0, 2351, 2150, 0, 0, 0, 2363, 0, 0,
	0, 0, 0, 0, 912, 3181, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 2151, 0, 1613, 2410, 0,
	0, 0, 0, 2150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3469, 2424, 0, 0, 0, 0, 0,
	2150, 0, 0, 0, 0, 1613, 793, 0, 0, 0,
	0, 909, 0, 2441, 0, 0, 2444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	2841, 0, 0, 3469, 0, 0, 2151, 1613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3181, 0, 0, 864, 864, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 2151, 0, 0, 0, 2505, 0,
	927, 0, 0, 2363, 2363, 2363, 927, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1617, 2529, 2530, 0, 0, 0, 0, 909, 0,
	1607, 1608, 1609, 0, 0, 0, 0, 1613, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1613, 0, 909, 0, 0, 2792, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 1613, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 2619, 0, 0, 1613,
	0, 0, 1613, 0, 0, 0, 0, 0, 1628, 0,
	0, 1598, 0, 0, 0, 1610, 1611, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2242, 0, 0,
	2243, 0, 0, 0, 2248, 0, 2240, 0, 1537, 1537,
	0, 2245, 2249, 2244, 0, 2246, 0, 0, 0, 2247,
	1621, 1622, 2241, 0, 0, 0, 913, 0, 793, 2250,
	0, 0, 0, 0, 927, 927, 912, 927, 0, 0,
	0, 1024, 1024, 1628, 1024, 0, 1598, 0, 0, 0,
	1610, 1611, 1612, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 2242, 0, 0, 2243, 0, 0, 0, 2248,
	0, 2240, 1537, 0, 0, 0, 2245, 2249, 2244, 0,
	2246, 0, 2710, 0, 2247, 1621, 1622, 2241, 0, 0,
	0, 1613, 0, 0, 2250, 0, 0, 4497, 0, 0,
	0, 0, 913, 0, 0, 0, 909, 909, 0, 909,
	2464, 0, 0, 0, 0, 0, 0, 793, 1617, 0,
	0, 0, 0, 0, 0, 927, 0, 1607, 1608, 1609,
	0, 0, 0, 0, 927, 0, 1601, 1602, 1603, 1604,
	1605, 1606, 928, 0, 0, 2841, 2841, 0, 0, 2841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3440, 1617, 0,
	0, 0, 0, 0, 0, 1613, 0, 1607, 1608, 1609,
	0, 0, 0, 0, 1613, 0, 1601, 1602, 1603, 1604,
	1605, 1606, 0, 0, 0, 0, 0, 909, 0, 1275,
	1305, 0, 0, 0, 1276, 0, 909, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 913, 912, 0, 0, 0, 0,
	0, 0, 3469, 3469, 0, 3469, 1628, 0, 0, 1598,
	0, 0, 0, 1610, 1611, 1612, 0, 0, 0, 0,
	0, 0, 0, 0, 2150, 2242, 0, 1307, 2243, 0,
	1278, 0, 2248, 0, 2240, 0, 0, 0, 913, 2245,
	2249, 2244, 0, 2246, 0, 0, 0, 2247, 1621, 1622,
	2241, 0, 0, 0, 0, 0, 1613, 2250, 1275, 1284,
	0, 0, 0, 1276, 927, 0, 0, 1285, 0, 0,
	913, 913, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2150, 0, 0, 0, 0,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 2150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1278,
	0, 0, 0, 1274, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 909, 0, 0, 0,
	1306, 0, 0, 0, 928, 0, 0, 0, 1284, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 89, 91, 928, 928, 0, 1289,
	0, 0, 0, 0, 117, 1281, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 913, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 0, 115, 927, 0, 0, 0,
	0, 0, 1274, 0, 0, 0, 0, 927, 927, 0,
	0, 927, 1308, 1617, 119, 3181, 1282, 0, 0, 0,
	0, 93, 1607, 1608, 1609, 0, 0, 2888, 0, 1279,
	0, 1601, 1602, 1603, 1604, 1605, 1606, 0, 0, 88,
	0, 0, 1309, 0, 927, 1310, 0, 112, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 1281, 0, 0, 0, 909, 0,
	1280, 1312, 1286, 0, 0, 0, 0, 0, 1617, 909,
	909, 0, 0, 909, 0, 0, 0, 1607, 1608, 1609,
	0, 928, 0, 0, 2773, 0, 1601, 1602, 1603, 1604,
	1605, 1606, 0, 0, 0, 3158, 3181, 1288, 1287, 1315,
	0, 0, 0, 0, 0, 1282, 909, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	113, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 1314, 0, 0, 913, 913, 0, 0,
	0, 0, 0, 0, 927, 0, 97, 0, 0, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 1319, 0, 1288, 1287, 2574, 0,
	0, 0, 0, 209, 1291, 0, 0, 0, 102, 0,
	0, 0, 928, 0, 0, 0, 909, 0, 0, 0,
	0, 212, 0, 0, 0, 0, 0, 1275, 1305, 927,
	0, 0, 1276, 0, 0, 0, 1285, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1617, 0, 1277, 0, 0, 0, 0, 0, 4497,
	1607, 1608, 1609, 0, 0, 0, 913, 0, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 1307, 101, 0, 1278, 0,
	0, 909, 0, 1291, 0, 0, 0, 0, 2991, 909,
	0, 0, 92, 0, 0, 100, 0, 0, 0, 94,
	0, 0, 0, 103, 0, 98, 0, 1284, 0, 0,
	218, 99, 0, 0, 0, 2570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 1289, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 198, 913, 0, 913,
	913, 3080, 3081, 2580, 0, 0, 0, 0, 2962, 0,
	0, 0, 0, 105, 0, 0, 1355, 2572, 180, 0,
	0, 1274, 928, 165, 219, 0, 0, 178, 0, 0,
	0, 0, 220, 0, 0, 927, 0, 3125, 1306, 0,
	213, 169, 2573, 0, 0, 0, 0, 0, 1279, 3147,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 192,
	171, 0, 0, 2584, 0, 0, 0, 0, 0, 111,
	913, 0, 0, 3166, 0, 0, 0, 0, 1361, 0,
	0, 0, 0, 1281, 0, 0, 0, 0, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 927, 1357, 928, 0, 928, 928, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 0, 0, 0, 1282, 0, 0, 0, 0, 0,
	199, 2575, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	1309, 0, 2581, 1310, 0, 2576, 0, 1311, 0, 0,
	223, 0, 0, 0, 0, 210, 0, 0, 224, 1304,
	0, 173, 0, 909, 0, 0, 928, 0, 0, 1312,
	1286, 909, 174, 0, 216, 0, 0, 0, 0, 2582,
	1346, 0, 0, 175, 0, 2583, 0, 0, 0, 0,
	217, 0, 0, 0, 2577, 0, 0, 176, 0, 0,
	2578, 0, 1356, 1301, 190, 1288, 1287, 1315, 0, 0,
	0, 0, 197, 0, 0, 0, 211, 0, 0, 0,
	170, 0, 177, 927, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3309, 0, 0, 0, 0, 0,
	0, 1314, 1352, 166, 0, 0, 0, 0, 2571, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 927, 0, 0,
	0, 0, 1024, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 1277, 0, 0, 0, 2963, 0, 0, 1354,
	0, 0, 0, 0, 0, 909, 0, 0, 0, 927,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 1291, 0, 0, 3360, 0, 0, 0, 0,
	199, 182, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 1360, 913, 0, 0, 0, 0, 0, 0, 909,
	0, 0, 191, 0, 0, 184, 0, 0, 188, 0,
	185, 0, 0, 0, 0, 167, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 2958,
	0, 909, 909, 0, 194, 0, 0, 0, 0, 187,
	0, 0, 0, 1353, 0, 193, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 189, 0, 0, 1350,
	196, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	1358, 0, 0, 0, 0, 0, 168, 0, 0, 0,
	0, 0, 0, 2964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1351, 928, 2965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 3583, 0, 3586, 3587, 0, 0,
	0, 3591, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2792, 0, 0, 0, 0, 0, 0, 3627, 0,
	0, 0, 0, 0, 0, 927, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3678, 3679, 909, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2363, 0, 0, 0, 909, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3829, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 927, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 927,
	909, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3913, 0,
	3914, 0, 0, 0, 0, 3919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 927, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 909, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4360, 4361, 4362, 4363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2153, 256, 2159, 273, 798, 2169, 322, 359, 574, 2156,
	2201, 419, 2206, 472, 476, 2230, 565, 2163, 2166, 2176,
	2179, 330, 2184, 803, 2192, 809, 2202, 815, 2221, 541,
	2227, 805, 806, 811, 261, 649, 564, 635, 2215, 2161,
	2219, 426, 2212, 2188, 2228, 2205, 2217, 2198, 2203, 269,
	2190, 2191, 2195, 2204, 807, 804, 808, 814, 802, 812,
	799, 810, 2225, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 2160, 2178, 375, 545, 310, 399, 2211,
	289, 432, 2224, 521, 396, 2218, 504, 524, 2180, 416,
	295, 455, 511, 512, 796, 801, 2168, 817, 2155, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 2186,
	407, 464, 621, 2158, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 4504, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 2226,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 2154, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 2170, 2171,
	2172, 800, 2173, 2174, 2175, 302, 303, 304, 305, 306,
	307, 2177, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 2181, 325, 327, 2182, 328, 331, 2183, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 2185,
	341, 342, 344, 2187, 347, 348, 349, 350, 351, 2189,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	2193, 372, 373, 374, 376, 2194, 377, 378, 381, 382,
	383, 384, 2196, 386, 594, 2197, 387, 388, 389, 2199,
	2200, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 2208, 443, 444, 445, 604, 446, 447, 448, 449,
	2209, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 2210, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 2213, 498, 608, 499, 500, 501, 502,
	503, 2214, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 2216, 522, 523, 816,
	525, 526, 527, 528, 529, 2220, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 2222,
	2223, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 2229, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 2207, 2157,
	2162, 2164, 2165, 2167, 0, 0, 0, 0, 0, 0,
	0, 1537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4763, 0, 2146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
	0, 0, 0, 0, 0, 0, 1628, 0, 0, 1598,
	0, 0, 5000, 1610, 1611, 1612, 1642, 1644, 1626, 1671,
	1692, 0, 1743, 1789, 1759, 1614, 1876, 1882, 1615, 1943,
	1947, 0, 1623, 1673, 1599, 1723, 1738, 1753, 1765, 1618,
	1624, 1616, 1880, 1619, 2024, 2035, 2055, 1620, 1621, 1622,
	1600, 2016, 2073, 1842, 2001, 1653, 0, 1629, 1967, 0,
	0, 1890, 2005, 5046, 0, 1667, 0, 0, 0, 0,
	1815, 1804, 1838, 1951, 1776, 1896, 1704, 1863, 2041, 1933,
	1852, 2047, 1965, 1666, 1732, 1716, 1768, 1833, 1974, 1649,
	1733, 1808, 2039, 1728, 1854, 0, 1695, 1898, 2040, 2003,
	1851, 2014, 1984, 2009, 1739, 1877, 1702, 1924, 1991, 1992,
	1662, 1775, 1697, 2050, 1647, 1707, 1715, 1885, 1686, 1893,
	2071, 1825, 1958, 1908, 1906, 0, 1865, 1934, 2066, 0,
	0, 1752, 0, 1746, 1884, 2058, 1693, 2032, 1927, 1889,
	1827, 1961, 1996, 1748, 1729, 1730, 1786, 1926, 1771, 1705,
	2046, 1822, 1826, 1824, 1820, 1817, 1821, 1818, 1819, 1823,
	1773, 1816, 0, 0, 1663, 1883, 1811, 1981, 1661, 1930,
	1769, 1742, 0, 0, 0, 2048, 1862, 1864, 0, 2017,
	1812, 1810, 1721, 1720, 1664, 2049, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1643, 1645, 1646, 1650, 1651,
	1652, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1668, 1669,
	1670, 1672, 1675, 1676, 1677, 1679, 1680, 1681, 1682, 1683,
	1684, 1687, 1688, 1689, 1690, 1691, 1694, 1696, 1698, 1699,
	1700, 1701, 1703, 1706, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1717, 1718, 0, 1719, 1722, 1724, 1725, 1726, 1727,
	1731, 1734, 1735, 1736, 1737, 1740, 1741, 1744, 1745, 1747,
	1749, 1750, 1751, 1754, 0, 1755, 1756, 1757, 1758, 1760,
	1761, 1762, 1763, 1764, 1766, 0, 0, 1767, 1770, 1772,
	1774, 1777, 1778, 1779, 1780, 0, 1781, 1782, 1783, 1784,
	1785, 1787, 0, 1788, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1806, 1807,
	1809, 0, 1813, 1814, 1829, 1830, 1831, 1832, 1834, 1836,
	1837, 1835, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1853, 1855, 1856, 0, 1857, 1858, 0,
	1859, 1860, 1861, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1878, 1879, 1881, 1895, 1897, 0, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1907, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1925, 1928, 1929, 1931, 1932, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1944, 1945, 1946, 1948, 1949,
	1950, 1952, 1953, 1954, 1955, 1956, 1957, 1959, 1960, 1962,
	1963, 1964, 0, 1966, 1968, 1969, 1970, 1971, 1972, 1973,
	1976, 1975, 1977, 1978, 1979, 1980, 1982, 1983, 1985, 1986,
	1987, 1988, 1989, 1990, 1993, 1994, 1995, 1997, 1998, 1999,
	2000, 2002, 2004, 2006, 2008, 2007, 2010, 2011, 2012, 2013,
	2015, 2018, 2019, 2020, 2021, 2022, 2023, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2033, 0, 2034, 2036, 2037, 2038,
	2042, 2043, 2044, 2045, 2051, 2052, 2053, 2054, 2056, 0,
	0, 2057, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2067,
	2068, 2069, 2070, 0, 2072, 1805, 1894, 1888, 1828, 1886,
	1887, 1891, 1892, 0, 0, 1648, 1665, 1674, 1678, 1685,
	0, 1617, 0, 0, 0, 0, 0, 0, 0, 0,
	1607, 1608, 1609, 0, 0, 0, 0, 0, 0, 1601,
	1602, 1603, 1604, 1605, 1606, 2148, 0, 5474, 972, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 2153, 256, 2159, 273, 798, 2169, 322, 359,
	574, 2156, 2201, 419, 2206, 472, 476, 2230, 565, 2163,
	2166, 2176, 2179, 330, 2184, 803, 2192, 809, 2202, 815,
	2221, 541, 2227, 805, 806, 811, 261, 649, 564, 635,
	2215, 2161, 2219, 426, 2212, 2188, 2228, 2205, 2217, 2198,
	2203, 269, 2190, 2191, 2195, 2204, 807, 804, 808, 814,
	802, 812, 799, 810, 2225, 463, 397, 614, 490, 268,
	314, 301, 343, 385, 497, 2160, 2178, 375, 545, 310,
	399, 2211, 289, 432, 2224, 521, 396, 2218, 504, 524,
	2180, 416, 295, 455, 511, 512, 796, 801, 2168, 817,
	2155, 299, 300, 421, 281, 429, 626, 592, 484, 442,
	440, 2186, 407, 464, 621, 2158, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 589, 593, 591,
	587, 584, 588, 585, 586, 590, 346, 583, 0, 558,
	567, 601, 581, 609, 566, 606, 576, 321, 605, 570,
	569, 615, 596, 597, 551, 611, 582, 580, 573, 572,
	568, 2226, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 2154, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 571, 797, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	2170, 2171, 2172, 800, 2173, 2174, 2175, 302, 303, 304,
	305, 306, 307, 2177, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 2181, 325, 327, 2182, 328, 331,
	2183, 332, 333, 334, 335, 336, 337, 338, 339, 575,
	340, 2185, 341, 342, 344, 2187, 347, 348, 349, 350,
	351, 2189, 352, 577, 578, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 2193, 372, 373, 374, 376, 2194, 377, 378,
	381, 382, 383, 384, 2196, 386, 594, 2197, 387, 388,
	389, 2199, 2200, 390, 391, 392, 393, 394, 395, 398,
	595, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 598, 599, 415, 417,
	418, 600, 602, 603, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 2208, 443, 444, 445, 604, 446, 447,
	448, 449, 2209, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 2210, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 607, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 2213, 498, 608, 499, 500,
	501, 502, 503, 2214, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 610, 519, 520, 2216, 522,
	523, 816, 525, 526, 527, 528, 529, 2220, 648, 530,
	612, 531, 613, 532, 533, 534, 535, 536, 537, 538,
	540, 2222, 2223, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 2229, 557, 559, 561, 639,
	616, 617, 618, 619, 620, 622, 623, 624, 625, 562,
	563, 579, 430, 424, 380, 422, 423, 427, 428, 431,
	2207, 2157, 2162, 2164, 2165, 2167, 2148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2153, 256, 2159, 273, 798, 2169, 322,
	359, 574, 2156, 2201, 419, 2206, 472, 476, 2230, 565,
	2163, 2166, 2176, 2179, 330, 2184, 803, 2192, 809, 2202,
	815, 2221, 541, 2227, 805, 806, 811, 261, 649, 564,
	635, 2215, 2161, 2219, 426, 2212, 2188, 2228, 2205, 2217,
	2198, 2203, 269, 2190, 2191, 2195, 2204, 807, 804, 808,
	814, 802, 812, 799, 810, 2225, 463, 397, 614, 490,
	268, 314, 301, 343, 385, 497, 2160, 2178, 375, 545,
	310, 399, 2211, 289, 432, 2224, 521, 396, 2218, 504,
	524, 2180, 416, 295, 455, 511, 512, 796, 801, 2168,
	817, 2155, 299, 300, 421, 281, 429, 626, 592, 484,
	442, 440, 2186, 407, 464, 621, 2158, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 589, 593,
	591, 587, 584, 588, 585, 586, 590, 346, 583, 0,
	558, 567, 601, 581, 609, 566, 606, 576, 321, 605,
	570, 569, 615, 596, 597, 551, 611, 582, 580, 573,
	572, 568, 2226, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 2154, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 571, 797, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 2170, 2171, 2172, 800, 2173, 2174, 2175, 302, 303,
	304, 305, 306, 307, 2177, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 2181, 325, 327, 2182, 328,
	331, 2183, 332, 333, 334, 335, 336, 337, 338, 339,
	575, 340, 2185, 341, 342, 344, 2187, 347, 348, 349,
	350, 351, 2189, 352, 577, 578, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 2193, 372, 373, 374, 376, 2194, 377,
	378, 381, 382, 383, 384, 2196, 386, 594, 2197, 387,
	388, 389, 2199, 2200, 390, 391, 392, 393, 394, 395,
	398, 595, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 598, 599, 415,
	417, 418, 600, 602, 603, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 2208, 443, 444, 445, 604, 446,
	447, 448, 449, 2209, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 2210, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 607, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 2213, 498, 608, 499,
	500, 501, 502, 503, 2214, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 610, 519, 520, 2216,
	522, 523, 816, 525, 526, 527, 528, 529, 2220, 648,
	530, 612, 531, 613, 532, 533, 534, 535, 536, 537,
	538, 540, 2222, 2223, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 2229, 557, 559, 561,
	639, 616, 617, 618, 619, 620, 622, 623, 624, 625,
	562, 563, 579, 430, 424, 380, 422, 423, 427, 428,
	431, 2207, 2157, 2162, 2164, 2165, 2167, 2148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2153, 256, 2159, 273, 798, 2169,
	3139, 359, 574, 2156, 2201, 419, 2206, 472, 476, 2230,
	565, 2163, 2166, 2176, 2179, 330, 2184, 803, 2192, 809,
	2202, 815, 2221, 541, 2227, 805, 806, 811, 261, 649,
	564, 635, 2215, 2161, 2219, 426, 2212, 2188, 2228, 2205,
	2217, 2198, 2203, 269, 2190, 2191, 2195, 2204, 807, 804,
	808, 814, 802, 812, 799, 810, 2225, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 3137, 2160, 2178, 375,
	545, 310, 399, 2211, 289, 432, 2224, 521, 396, 2218,
	504, 524, 2180, 416, 295, 455, 511, 512, 796, 801,
	2168, 817, 2155, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 2186, 407, 464, 621, 2158, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 2226, 246, 247, 248, 249, 250, 3138,
	252, 253, 254, 255, 257, 2154, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 797, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 2170, 2171, 2172, 800, 2173, 2174, 2175, 302,
	303, 304, 305, 306, 307, 2177, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 2181, 325, 327, 2182,
	328, 331, 2183, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 2185, 341, 342, 344, 2187, 347, 348,
	349, 350, 351, 2189, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 2193, 372, 373, 374, 376, 2194,
	377, 378, 381, 382, 383, 384, 2196, 386, 594, 2197,
	387, 388, 389, 2199, 2200, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 2208, 443, 444, 445, 604,
	446, 447, 448, 449, 2209, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 2210, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 2213, 498, 608,
	499, 500, 501, 502, 503, 2214, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	2216, 522, 523, 816, 525, 526, 527, 528, 529, 2220,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 2222, 2223, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 2229, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 2207, 2157, 2162, 2164, 2165, 2167, 931, 0,
	1496, 972, 0, 0, 0, 760, 1095, 0, 0, 0,
	0, 0, 771, 772, 773, 2153, 256, 2159, 273, 798,
	2169, 322, 359, 0, 2156, 2201, 419, 2206, 472, 476,
	2230, 0, 2163, 2166, 2176, 2179, 330, 2184, 803, 2192,
	809, 2202, 815, 2221, 541, 2227, 805, 806, 811, 261,
	930, 564, 635, 2215, 2161, 2219, 3653, 2212, 2188, 2228,
	2205, 2217, 2198, 2203, 269, 2190, 2191, 2195, 2204, 807,
	804, 808, 814, 802, 812, 799, 810, 2225, 463, 397,
	0, 490, 268, 314, 301, 343, 385, 497, 2160, 2178,
	375, 545, 310, 399, 2211, 289, 432, 2224, 521, 396,
	2218, 504, 524, 2180, 416, 295, 455, 511, 512, 796,
	801, 2168, 817, 2155, 299, 300, 421, 281, 429, 0,
	0, 484, 442, 440, 2186, 407, 464, 0, 2158, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 558, 933, 923, 915, 916, 917, 918, 919,
	920, 0, 935, 936, 937, 938, 939, 551, 929, 0,
	914, 921, 922, 924, 2226, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 2154, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 0, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 2170, 2171, 2172, 800, 2173, 2174, 2175,
	302, 303, 304, 305, 306, 307, 2177, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 2181, 325, 327,
	2182, 328, 331, 2183, 332, 333, 334, 335, 336, 337,
	338, 339, 0, 340, 2185, 341, 342, 344, 2187, 347,
	348, 349, 350, 351, 2189, 352, 0, 0, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 2193, 372, 373, 374, 376,
	2194, 377, 378, 381, 382, 383, 384, 2196, 386, 0,
	2197, 387, 388, 389, 2199, 2200, 390, 391, 392, 393,
	394, 395, 398, 0, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 3652,
	0, 415, 417, 418, 0, 0, 0, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 2208, 443, 444, 445,
	0, 446, 447, 448, 449, 2209, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 2210, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 0, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 2213, 498,
	2466, 499, 500, 501, 502, 503, 2214, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 0, 519,
	520, 2216, 522, 523, 816, 525, 526, 527, 528, 529,
	2220, 648, 530, 0, 531, 0, 532, 533, 534, 535,
	536, 537, 538, 540, 2222, 2223, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 2229, 557,
	559, 561, 639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 0, 430, 424, 380, 422, 423,
	427, 428, 431, 2207, 2157, 2162, 2164, 2165, 2167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 768,
	769, 770, 0, 0, 0, 0, 0, 0, 3654, 3655,
	764, 765, 766, 767, 931, 0, 1496, 972, 0, 0,
	0, 760, 1095, 0, 0, 0, 0, 0, 771, 772,
	773, 2153, 256, 2159, 273, 798, 2169, 322, 359, 0,
	2156, 2201, 419, 2206, 472, 476, 2230, 0, 2163, 2166,
	2176, 2179, 330, 2184, 803, 2192, 809, 2202, 815, 2221,
	541, 2227, 805, 806, 811, 261, 930, 564, 635, 2215,
	2161, 2219, 3653, 2212, 2188, 2228, 2205, 2217, 2198, 2203,
	269, 2190, 2191, 2195, 2204, 807, 804, 808, 814, 802,
	812, 799, 810, 2225, 463, 397, 0, 490, 268, 314,
	301, 343, 385, 497, 2160, 2178, 375, 545, 310, 399,
	2211, 289, 432, 2224, 521, 396, 2218, 504, 524, 2180,
	416, 295, 455, 511, 512, 796, 801, 2168, 817, 2155,
	299, 300, 421, 281, 429, 0, 0, 484, 442, 440,
	2186, 407, 464, 0, 2158, 0, 329, 0, 324, 420,
	560, 287, 539, 458, 425, 379, 487, 516, 326, 311,
	312, 355, 457, 345, 297, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 558, 933,
	923, 915, 916, 917, 918, 919, 920, 0, 935, 936,
	937, 938, 939, 551, 929, 0, 914, 921, 922, 924,
	2226, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 257, 2154, 258, 259, 260, 262, 263, 264, 795,
	265, 266, 267, 270, 271, 272, 274, 634, 275, 276,
	277, 278, 279, 280, 0, 797, 282, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 294, 296, 298, 2170,
	2171, 2172, 800, 2173, 2174, 2175, 302, 303, 304, 305,
	306, 307, 2177, 308, 309, 313, 315, 316, 317, 318,
	319, 320, 323, 2181, 325, 327, 2182, 328, 331, 2183,
	332, 333, 334, 335, 336, 337, 338, 339, 0, 340,
	2185, 341, 342, 344, 2187, 347, 348, 349, 350, 351,
	2189, 352, 0, 0, 353, 354, 356, 357, 358, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 2193, 372, 373, 374, 376, 2194, 377, 378, 381,
	382, 383, 384, 2196, 386, 0, 2197, 387, 388, 389,
	2199, 2200, 390, 391, 392, 393, 394, 395, 398, 0,
	400, 401, 402, 403, 404, 405, 406, 636, 408, 409,
	410, 411, 412, 413, 414, 4314, 0, 415, 417, 418,
	0, 0, 0, 813, 433, 434, 435, 436, 437, 438,
	439, 441, 2208, 443, 444, 445, 0, 446, 447, 448,
	449, 2209, 450, 451, 452, 453, 454, 456, 459, 460,
	461, 462, 2210, 465, 466, 467, 468, 469, 470, 471,
	473, 474, 475, 477, 478, 479, 637, 480, 481, 482,
	483, 0, 485, 486, 638, 488, 489, 491, 492, 493,
	494, 495, 496, 647, 2213, 498, 2466, 499, 500, 501,
	502, 503, 2214, 505, 506, 507, 508, 509, 510, 513,
	514, 515, 517, 518, 0, 519, 520, 2216, 522, 523,
	816, 525, 526, 527, 528, 529, 2220, 648, 530, 0,
	531, 0, 532, 533, 534, 535, 536, 537, 538, 540,
	2222, 2223, 542, 543, 544, 546, 547, 548, 549, 552,
	553, 554, 555, 556, 2229, 557, 559, 561, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	0, 430, 424, 380, 422, 423, 427, 428, 431, 2207,
	2157, 2162, 2164, 2165, 2167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 768, 769, 770, 0, 0,
	0, 0, 0, 0, 3654, 3655, 764, 765, 766, 767,
	855, 0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066,
	0, 0, 0, 0, 0, 0, 0, 2787, 256, 0,
	273, 798, 0, 322, 359, 1071, 0, 1059, 419, 0,
	472, 476, 0, 565, 1091, 0, 1063, 2788, 330, 1084,
	803, 0, 809, 1085, 815, 1083, 541, 0, 805, 806,
	811, 261, 1161, 564, 635, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 1114,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 299, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	1072, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143,
	1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146,
	1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551,
	1162, 1101, 1154, 1152, 1151, 1148, 2786, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	1126, 1104, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106,
	1107, 1111, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 1118, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 1127, 1075,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 1128, 0, 387, 388, 389, 1108, 1109, 390, 391,
	392, 393, 394, 395, 398, 1141, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 1119, 415, 417, 418, 1125, 602, 1120, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 1121, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 1078, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	1112, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	1122, 519, 520, 1113, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 1123, 531, 1124, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 1062, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 1129, 1130, 1133, 1131,
	1132, 1134, 1135, 1145, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 0, 1117, 0,
	0, 0, 1060, 0, 0, 855, 0, 1081, 972, 0,
	1086, 1087, 1076, 1095, 1066, 0, 0, 1067, 2784, 0,
	1056, 1057, 2785, 256, 0, 273, 798, 0, 322, 359,
	1071, 0, 1059, 419, 0, 472, 476, 117, 565, 1091,
	0, 1063, 0, 330, 1084, 803, 0, 809, 1085, 815,
	1083, 541, 0, 805, 806, 811, 261, 1161, 564, 635,
	0, 0, 0, 1077, 114, 0, 0, 0, 115, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 1013, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 1114, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 626, 592, 484, 442,
	440, 0, 407, 464, 621, 1072, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 1142, 1144, 1140,
	1136, 1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558,
	1147, 1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150,
	1149, 1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151,
	1148, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 1126, 1104, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 1118,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 1127, 1075, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 1128, 0, 387, 388,
	389, 1108, 1109, 390, 391, 392, 393, 394, 395, 398,
	1141, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 598, 1119, 415, 417,
	418, 1125, 602, 1120, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 1121, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 1078, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 1112, 498, 608, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 1122, 519, 520, 1113, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	1123, 531, 1124, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 1062, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	616, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562,
	563, 579, 430, 424, 380, 422, 423, 427, 428, 431,
	0, 0, 0, 1117, 0, 0, 0, 1060, 0, 118,
	855, 0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066,
	0, 0, 1067, 5081, 0, 1056, 1057, 0, 256, 0,
	273, 798, 0, 322, 359, 1071, 0, 1059, 419, 0,
	472, 476, 117, 565, 1091, 0, 1063, 0, 330, 1084,
	803, 0, 809, 1085, 815, 1083, 541, 0, 805, 806,
	811, 261, 1161, 564, 635, 0, 0, 0, 1077, 114,
	0, 0, 0, 115, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 1013, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 2871, 289, 432, 1114,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 299, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	1072, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143,
	1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146,
	1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551,
	1162, 1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	1126, 1104, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106,
	1107, 1111, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 1118, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 1127, 1075,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 1128, 0, 387, 388, 389, 1108, 1109, 390, 391,
	392, 393, 394, 395, 398, 1141, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 1119, 415, 417, 418, 1125, 602, 1120, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 1121, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 1078, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	1112, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	1122, 519, 520, 1113, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 1123, 531, 1124, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 1062, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 1129, 1130, 1133, 1131,
	1132, 1134, 1135, 1145, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 0, 1117, 0,
	0, 0, 1060, 0, 118, 855, 0, 1081, 972, 0,
	1086, 1087, 1076, 1095, 1066, 0, 0, 1067, 0, 0,
	1056, 1057, 0, 256, 0, 273, 798, 0, 322, 359,
	1071, 0, 1059, 419, 0, 472, 476, 117, 565, 1091,
	0, 1063, 0, 330, 1084, 803, 0, 809, 1085, 815,
	1083, 541, 0, 805, 806, 811, 261, 1161, 564, 635,
	0, 0, 0, 1077, 114, 0, 0, 0, 115, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 1013, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 1114, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 626, 592, 484, 442,
	440, 0, 407, 464, 621, 1072, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 1142, 1144, 1140,
	1136, 1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558,
	1147, 1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150,
	1149, 1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151,
	1148, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 1126, 1104, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 1118,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 1127, 1075, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 1128, 0, 387, 388,
	389, 1108, 1109, 390, 391, 392, 393, 394, 395, 398,
	1141, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 598, 1119, 415, 417,
	418, 1125, 602, 1120, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 1121, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 1078, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 1112, 498, 608, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 1122, 519, 520, 1113, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	1123, 531, 1124, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 1062, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	616, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562,
	563, 579, 430, 424, 380, 422, 423, 427, 428, 431,
	0, 0, 0, 1117, 0, 0, 0, 1060, 0, 118,
	855, 0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066,
	0, 0, 1067, 0, 0, 1056, 1057, 0, 256, 0,
	273, 798, 0, 322, 359, 1071, 0, 1059, 419, 0,
	472, 476, 0, 565, 1091, 0, 1063, 0, 330, 1084,
	803, 0, 809, 1085, 815, 1083, 541, 0, 805, 806,
	811, 261, 1161, 564, 635, 0, 0, 0, 1077, 0,
	2852, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 1114,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 299, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	1072, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143,
	1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146,
	1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551,
	1162, 1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	1126, 1104, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106,
	1107, 1111, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 1118, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 1127, 1075,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 1128, 2848, 387, 388, 389, 1108, 1109, 390, 391,
	392, 393, 394, 395, 398, 1141, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 1119, 415, 417, 418, 1125, 602, 1120, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 1121, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 1078, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	1112, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	1122, 519, 520, 1113, 522, 523, 816, 525, 526, 527,
	528, 529, 2849, 648, 530, 1123, 531, 1124, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 1062, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 1129, 1130, 1133, 1131,
	1132, 1134, 1135, 1145, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 2847, 1117, 0,
	0, 0, 1060, 0, 855, 0, 1081, 972, 0, 1086,
	1087, 1076, 1095, 1066, 0, 0, 0, 1067, 0, 0,
	1056, 1057, 256, 0, 273, 798, 0, 322, 359, 1071,
	0, 1059, 419, 0, 472, 476, 0, 565, 1091, 0,
	1063, 0, 330, 1084, 803, 0, 809, 1085, 815, 1083,
	541, 0, 805, 806, 811, 261, 1161, 564, 635, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 807, 804, 808, 814, 802,
	812, 799, 810, 0, 463, 397, 614, 490, 268, 314,
	301, 343, 385, 497, 0, 0, 375, 545, 310, 399,
	0, 289, 432, 1114, 521, 396, 0, 504, 524, 0,
	416, 295, 455, 511, 512, 796, 801, 0, 817, 0,
	299, 300, 421, 281, 429, 626, 592, 484, 442, 440,
	0, 407, 464, 621, 1072, 0, 329, 0, 324, 420,
	560, 287, 539, 458, 425, 379, 487, 516, 326, 311,
	312, 355, 457, 345, 297, 550, 1142, 1144, 1140, 1136,
	1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558, 1147,
	1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150, 1149,
	1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151, 1148,
	0, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 257, 0, 258, 259, 260, 262, 263, 264, 795,
	265, 266, 267, 270, 271, 272, 274, 634, 275, 276,
	277, 278, 279, 280, 1126, 1104, 282, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 294, 296, 298, 1115,
	1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305,
	306, 307, 0, 308, 309, 313, 315, 316, 317, 318,
	319, 320, 323, 0, 325, 327, 0, 328, 331, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 1118, 340,
	0, 341, 342, 344, 0, 347, 348, 349, 350, 351,
	0, 352, 1127, 1075, 353, 354, 356, 357, 358, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 374, 376, 0, 377, 378, 381,
	382, 383, 384, 0, 386, 1128, 0, 387, 388, 389,
	1108, 1109, 390, 391, 392, 393, 394, 395, 398, 1141,
	400, 401, 402, 403, 404, 405, 406, 636, 408, 409,
	410, 411, 412, 413, 414, 598, 1119, 415, 417, 418,
	1125, 602, 1120, 813, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 443, 444, 445, 1121, 446, 447, 448,
	449, 0, 450, 451, 452, 453, 454, 456, 459, 460,
	461, 462, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 474, 475, 477, 478, 479, 637, 480, 481, 482,
	483, 1078, 485, 486, 638, 488, 489, 491, 492, 493,
	494, 495, 496, 647, 1112, 498, 608, 499, 500, 501,
	502, 503, 0, 505, 506, 507, 508, 509, 510, 513,
	514, 515, 517, 518, 1122, 519, 520, 1113, 522, 523,
	816, 525, 526, 527, 528, 529, 0, 648, 530, 1123,
	531, 1124, 532, 533, 534, 535, 536, 537, 538, 540,
	0, 1062, 542, 543, 544, 546, 547, 548, 549, 552,
	553, 554, 555, 556, 0, 557, 559, 561, 639, 616,
	1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563,
	579, 430, 424, 380, 422, 423, 427, 428, 431, 0,
	0, 0, 1117, 0, 0, 0, 1060, 0, 0, 855,
	0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066, 0,
	0, 1067, 0, 0, 1056, 1057, 1054, 256, 0, 273,
	798, 0, 322, 359, 1071, 0, 1059, 419, 0, 472,
	476, 0, 565, 1091, 0, 1063, 0, 330, 1084, 803,
	0, 809, 1085, 815, 1083, 541, 0, 805, 806, 811,
	261, 1161, 564, 635, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	807, 804, 808, 814, 802, 812, 799, 810, 0, 463,
	397, 614, 490, 268, 314, 301, 343, 385, 497, 0,
	0, 375, 545, 310, 399, 0, 289, 432, 1114, 521,
	396, 0, 504, 524, 0, 416, 295, 455, 511, 512,
	796, 801, 0, 817, 0, 299, 300, 421, 281, 429,
	626, 592, 484, 442, 440, 0, 407, 464, 621, 1072,
	0, 329, 0, 324, 420, 560, 287, 539, 458, 425,
	379, 487, 516, 326, 311, 312, 355, 457, 345, 297,
	550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139,
	346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159,
	1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162,
	1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 257, 0, 258, 259,
	260, 262, 263, 264, 795, 265, 266, 267, 270, 271,
	272, 274, 634, 275, 276, 277, 278, 279, 280, 1126,
	1104, 282, 283, 284, 285, 286, 288, 290, 291, 292,
	293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107,
	1111, 302, 303, 304, 305, 306, 307, 0, 308, 309,
	313, 315, 316, 317, 318, 319, 320, 323, 0, 325,
	327, 0, 328, 331, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 1118, 340, 0, 341, 342, 344, 0,
	347, 348, 349, 350, 351, 0, 352, 1127, 1075, 353,
	354, 356, 357, 358, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 374,
	376, 0, 377, 378, 381, 382, 383, 384, 0, 386,
	1128, 0, 387, 388, 389, 1108, 1109, 390, 391, 392,
	393, 394, 395, 398, 1141, 400, 401, 402, 403, 404,
	405, 406, 636, 408, 409, 410, 411, 412, 413, 414,
	598, 1119, 415, 417, 418, 1125, 602, 1120, 813, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 443, 444,
	445, 1121, 446, 447, 448, 449, 0, 450, 451, 452,
	453, 454, 456, 459, 460, 461, 462, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 474, 475, 477, 478,
	479, 637, 480, 481, 482, 483, 1078, 485, 486, 638,
	488, 489, 491, 492, 493, 494, 495, 496, 647, 1112,
	498, 608, 499, 500, 501, 502, 503, 0, 505, 506,
	507, 508, 509, 510, 513, 514, 515, 517, 518, 1122,
	519, 520, 1113, 522, 523, 816, 525, 526, 527, 528,
	529, 0, 648, 530, 1123, 531, 1124, 532, 533, 534,
	535, 536, 537, 538, 540, 0, 1062, 542, 543, 544,
	546, 547, 548, 549, 552, 553, 554, 555, 556, 0,
	557, 559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132,
	1134, 1135, 1145, 562, 563, 579, 430, 424, 380, 422,
	423, 427, 428, 431, 0, 0, 0, 1117, 0, 0,
	0, 1060, 0, 855, 0, 1081, 972, 0, 1086, 1087,
	1076, 1095, 1066, 0, 2090, 2777, 1067, 0, 0, 1056,
	1057, 256, 0, 273, 798, 0, 322, 359, 1071, 0,
	1059, 419, 0, 472, 476, 0, 565, 1091, 0, 1063,
	0, 330, 1084, 803, 0, 809, 1085, 815, 1083, 541,
	0, 805, 806, 811, 261, 1161, 564, 635, 0, 0,
	2738, 1077, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 1114, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 1072, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137,
	1102, 1103, 1143, 1139, 346, 1138, 0, 558, 1147, 1158,
	1155, 1160, 1146, 1159, 1153, 920, 605, 1150, 1149, 1163,
	1156, 1157, 551, 1162, 1101, 1154, 1152, 1151, 1148, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 1126, 1104, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 1115, 1105,
	1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 1118, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 1127, 1075, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 1128, 0, 387, 388, 389, 1108,
	1109, 390, 391, 392, 393, 394, 395, 398, 1141, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 1119, 415, 417, 418, 1125,
	602, 1120, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 1121, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	1078, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 1112, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 1122, 519, 520, 1113, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 1123, 531,
	1124, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	1062, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 1129,
	1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 0, 0,
	0, 1117, 0, 0, 0, 1060, 0, 855, 0, 1081,
	972, 0, 1086, 1087, 1076, 1095, 1066, 0, 0, 0,
	1067, 0, 0, 1056, 1057, 256, 0, 273, 798, 0,
	322, 359, 1071, 0, 1059, 419, 0, 472, 476, 0,
	565, 1091, 0, 1063, 0, 330, 1084, 803, 0, 809,
	1085, 815, 1083, 541, 0, 805, 806, 811, 261, 1161,
	564, 635, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 807, 804,
	808, 814, 802, 812, 799, 810, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 1114, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 796, 801,
	0, 817, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 1072, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 1142,
	1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346, 1138,
	0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153, 920,
	605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101, 1154,
	1152, 1151, 1148, 3946, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 1126, 1104, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 1118, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 1127, 1075, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 1128, 0,
	387, 388, 389, 1108, 1109, 390, 391, 392, 393, 394,
	395, 398, 1141, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 1119,
	415, 417, 418, 1125, 602, 1120, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 1121,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 1078, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 1112, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 1122, 519, 520,
	1113, 522, 523, 816, 525, 526, 527, 528, 529, 0,
	648, 530, 1123, 531, 1124, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 1062, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134, 1135,
	1145, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 0, 0, 0, 1117, 0, 0, 0, 1060,
	0, 855, 0, 1081, 972, 0, 1086, 1087, 1076, 1095,
	1066, 0, 0, 0, 1067, 0, 0, 1056, 1057, 256,
	0, 273, 798, 0, 322, 359, 1071, 0, 1059, 419,
	0, 472, 476, 0, 565, 1091, 0, 1063, 0, 330,
	1084, 803, 0, 809, 1085, 815, 1083, 541, 0, 805,
	806, 811, 261, 1161, 564, 635, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 807, 804, 808, 814, 802, 812, 799, 810,
	0, 463, 397, 614, 490, 268, 314, 301, 343, 385,
	497, 0, 0, 375, 545, 310, 399, 0, 289, 432,
	1114, 521, 396, 0, 504, 524, 0, 416, 295, 455,
	511, 512, 796, 801, 0, 817, 0, 299, 300, 421,
	281, 429, 626, 592, 484, 442, 440, 0, 407, 464,
	621, 1072, 0, 329, 0, 324, 420, 560, 287, 539,
	458, 425, 379, 487, 516, 326, 311, 312, 355, 457,
	345, 297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103,
	1143, 1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160,
	1146, 1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157,
	551, 1162, 1101, 1154, 1152, 1151, 1148, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 257, 0,
	258, 259, 260, 262, 263, 264, 795, 265, 266, 267,
	270, 271, 272, 274, 634, 275, 276, 277, 278, 279,
	280, 1126, 1104, 282, 283, 284, 285, 286, 288, 290,
	291, 292, 293, 294, 296, 298, 1115, 1105, 1110, 1116,
	1106, 1107, 1111, 302, 303, 304, 305, 306, 307, 0,
	308, 309, 313, 315, 316, 317, 318, 319, 320, 323,
	0, 325, 327, 0, 328, 331, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 1118, 340, 0, 341, 342,
	344, 0, 347, 348, 349, 350, 351, 0, 352, 1127,
	1075, 353, 354, 356, 357, 358, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 374, 376, 0, 377, 378, 381, 382, 383, 384,
	0, 386, 1128, 0, 387, 388, 389, 1108, 1109, 390,
	391, 392, 393, 394, 395, 398, 1141, 400, 401, 402,
	403, 404, 405, 406, 636, 408, 409, 410, 411, 412,
	413, 414, 598, 1119, 415, 417, 418, 1125, 602, 1120,
	813, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	443, 444, 445, 1121, 446, 447, 448, 449, 0, 450,
	451, 452, 453, 454, 456, 459, 460, 461, 462, 0,
	465, 466, 467, 468, 469, 470, 471, 473, 474, 475,
	477, 478, 479, 637, 480, 481, 482, 483, 1078, 485,
	486, 638, 488, 489, 491, 492, 493, 494, 495, 496,
	647, 1112, 498, 608, 499, 500, 501, 502, 503, 0,
	505, 506, 507, 508, 509, 510, 513, 514, 515, 517,
	518, 1122, 519, 520, 1113, 522, 523, 816, 525, 526,
	527, 528, 529, 0, 648, 530, 1123, 531, 1124, 532,
	533, 534, 535, 536, 537, 538, 540, 0, 1062, 542,
	543, 544, 546, 547, 548, 549, 552, 553, 554, 555,
	556, 0, 557, 559, 561, 639, 616, 1129, 1130, 1133,
	1131, 1132, 1134, 1135, 1145, 562, 563, 579, 430, 424,
	380, 422, 423, 427, 428, 431, 0, 0, 0, 1117,
	0, 0, 0, 1060, 0, 855, 0, 1081, 972, 0,
	1086, 1087, 1076, 1095, 1066, 0, 0, 0, 1067, 3941,
	0, 1056, 1057, 256, 0, 273, 798, 0, 322, 359,
	1071, 0, 1059, 419, 0, 472, 476, 0, 565, 1091,
	0, 1063, 0, 330, 1084, 803, 0, 809, 1085, 815,
	1083, 541, 0, 805, 806, 811, 261, 1161, 564, 635,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 614, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 1114, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 626, 592, 484, 442,
	440, 0, 407, 464, 621, 1072, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 1142, 1144, 1140,
	1136, 1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558,
	1147, 1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150,
	1149, 1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151,
	1148, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 1126, 1104, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 1118,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 1127, 1075, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 1128, 0, 387, 388,
	389, 1108, 1109, 390, 391, 392, 393, 394, 395, 398,
	1141, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 598, 1119, 415, 417,
	418, 1125, 602, 1120, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 1121, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 1078, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 1112, 498, 608, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 1122, 519, 520, 1113, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	1123, 531, 1124, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 1062, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	616, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562,
	563, 579, 430, 424, 380, 422, 423, 427, 428, 431,
	0, 0, 0, 1117, 0, 0, 0, 1060, 0, 855,
	0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066, 0,
	0, 0, 1067, 3904, 0, 1056, 1057, 256, 0, 273,
	798, 0, 322, 359, 1071, 0, 1059, 419, 0, 472,
	476, 0, 565, 1091, 0, 1063, 0, 330, 1084, 803,
	0, 809, 1085, 815, 1083, 541, 0, 805, 806, 811,
	261, 1161, 564, 635, 0, 0, 0, 1077, 0, 2852,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	807, 804, 808, 814, 802, 812, 799, 810, 0, 463,
	397, 614, 490, 268, 314, 301, 343, 385, 497, 0,
	0, 375, 545, 310, 399, 0, 289, 432, 1114, 521,
	396, 0, 504, 524, 0, 416, 295, 455, 511, 512,
	796, 801, 0, 817, 0, 299, 300, 421, 281, 429,
	626, 592, 484, 442, 440, 0, 407, 464, 621, 1072,
	0, 329, 0, 324, 420, 560, 287, 539, 458, 425,
	379, 487, 516, 326, 311, 312, 355, 457, 345, 297,
	550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139,
	346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159,
	1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162,
	1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 257, 0, 258, 259,
	260, 262, 263, 264, 795, 265, 266, 267, 270, 271,
	272, 274, 634, 275, 276, 277, 278, 279, 280, 1126,
	1104, 282, 283, 284, 285, 286, 288, 290, 291, 292,
	293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107,
	1111, 302, 303, 304, 305, 306, 307, 0, 308, 309,
	313, 315, 316, 317, 318, 319, 320, 323, 0, 325,
	327, 0, 328, 331, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 1118, 340, 0, 341, 342, 344, 0,
	347, 348, 349, 350, 351, 0, 352, 1127, 1075, 353,
	354, 356, 357, 358, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 374,
	376, 0, 377, 378, 381, 382, 383, 384, 0, 386,
	1128, 0, 387, 388, 389, 1108, 1109, 390, 391, 392,
	393, 394, 395, 398, 1141, 400, 401, 402, 403, 404,
	405, 406, 636, 408, 409, 410, 411, 412, 413, 414,
	598, 1119, 415, 417, 418, 1125, 602, 1120, 813, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 443, 444,
	445, 1121, 446, 447, 448, 449, 0, 450, 451, 452,
	453, 454, 456, 459, 460, 461, 462, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 474, 475, 477, 478,
	479, 637, 480, 481, 482, 483, 1078, 485, 486, 638,
	488, 489, 491, 492, 493, 494, 495, 496, 647, 1112,
	498, 608, 499, 500, 501, 502, 503, 0, 505, 506,
	507, 508, 509, 510, 513, 514, 515, 517, 518, 1122,
	519, 520, 1113, 522, 523, 816, 525, 526, 527, 528,
	529, 0, 648, 530, 1123, 531, 1124, 532, 533, 534,
	535, 536, 537, 538, 540, 0, 1062, 542, 543, 544,
	546, 547, 548, 549, 552, 553, 554, 555, 556, 0,
	557, 559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132,
	1134, 1135, 1145, 562, 563, 579, 430, 424, 380, 422,
	423, 427, 428, 431, 0, 0, 0, 1117, 0, 0,
	0, 1060, 0, 855, 0, 1081, 972, 0, 1086, 1087,
	1076, 1095, 1066, 0, 0, 0, 1067, 0, 0, 1056,
	1057, 256, 0, 273, 798, 0, 322, 359, 1071, 0,
	1059, 419, 0, 472, 476, 0, 565, 1091, 0, 1063,
	0, 330, 1084, 803, 0, 809, 1085, 815, 1083, 541,
	0, 805, 806, 811, 261, 1161, 564, 635, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 2871,
	289, 432, 1114, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 1072, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137,
	1102, 1103, 1143, 1139, 346, 1138, 0, 558, 1147, 1158,
	1155, 1160, 1146, 1159, 1153, 920, 605, 1150, 1149, 1163,
	1156, 1157, 551, 1162, 1101, 1154, 1152, 1151, 1148, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 1126, 1104, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 1115, 1105,
	1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 1118, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 1127, 1075, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 1128, 0, 387, 388, 389, 1108,
	1109, 390, 391, 392, 393, 394, 395, 398, 1141, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 1119, 415, 417, 418, 1125,
	602, 1120, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 1121, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	1078, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 1112, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 1122, 519, 520, 1113, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 1123, 531,
	1124, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	1062, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 1129,
	1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 0, 0,
	0, 1117, 0, 0, 0, 1060, 0, 855, 0, 1081,
	972, 0, 1086, 1087, 1076, 1095, 1066, 0, 0, 0,
	1067, 0, 0, 1056, 1057, 256, 0, 273, 798, 0,
	322, 359, 1071, 0, 1059, 419, 0, 472, 476, 0,
	565, 1091, 0, 1063, 0, 330, 1084, 803, 0, 809,
	1085, 815, 1083, 541, 0, 805, 806, 811, 261, 1161,
	564, 635, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 807, 804,
	808, 814, 802, 812, 799, 810, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 1114, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 796, 801,
	0, 817, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 1072, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 1142,
	1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346, 1138,
	0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153, 920,
	605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101, 1154,
	1152, 1151, 1148, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 1126, 1104, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 1118, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 1127, 1075, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 1128, 0,
	387, 388, 389, 1108, 1109, 390, 391, 392, 393, 394,
	395, 398, 1141, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 1119,
	415, 417, 418, 1125, 602, 1120, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 1121,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 1078, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 1112, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 1122, 519, 520,
	1113, 522, 523, 816, 525, 526, 527, 528, 529, 0,
	648, 530, 1123, 531, 1124, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 1062, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134, 1135,
	1145, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 0, 0, 0, 1117, 0, 0, 0, 1060,
	0, 0, 855, 0, 1081, 972, 0, 1086, 1087, 1076,
	1095, 1066, 0, 0, 1067, 2782, 0, 1056, 1057, 1575,
	256, 0, 273, 798, 0, 322, 359, 1071, 0, 1059,
	419, 0, 472, 476, 0, 565, 1091, 0, 1063, 0,
	330, 1084, 803, 0, 809, 1085, 815, 1083, 541, 0,
	805, 806, 811, 261, 1161, 564, 635, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 1114, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 1072, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137, 1102,
	1103, 1143, 1139, 346, 1138, 0, 558, 1147, 1158, 1155,
	1160, 1146, 1159, 1153, 920, 605, 1150, 1149, 1163, 1156,
	1157, 551, 1162, 1101, 1154, 1152, 1151, 1148, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 1126, 1104, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 1115, 1105, 1110,
	1116, 1106, 1107, 1111, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 1118, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	1127, 1075, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 1128, 0, 387, 388, 389, 1108, 1109,
	390, 391, 392, 393, 394, 395, 398, 1141, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 1119, 415, 417, 418, 1125, 602,
	1120, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 1121, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 1078,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 1112, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 1122, 519, 520, 1113, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 1123, 531, 1124,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 1062,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 1129, 1130,
	1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 0, 0, 0,
	1117, 0, 0, 0, 1060, 0, 855, 0, 1081, 972,
	0, 1086, 1087, 1076, 1095, 1066, 0, 0, 0, 1067,
	0, 0, 1056, 1057, 256, 0, 273, 798, 0, 322,
	359, 1071, 0, 1059, 419, 0, 472, 476, 0, 565,
	1091, 0, 1063, 0, 330, 1084, 803, 0, 809, 1085,
	815, 1083, 541, 0, 805, 806, 811, 261, 1161, 564,
	635, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 807, 804, 808,
	814, 802, 812, 799, 810, 0, 463, 397, 614, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 1114, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 796, 801, 0,
	817, 0, 299, 300, 421, 281, 429, 626, 592, 484,
	442, 440, 0, 407, 464, 621, 1072, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 1142, 1144,
	1140, 1136, 1137, 1102, 1103, 1143, 1139, 346, 1138, 0,
	558, 1147, 1158, 1155, 1160, 1146, 1159, 1153, 920, 605,
	1150, 1149, 1163, 1156, 1157, 551, 1162, 1101, 1154, 1152,
	1151, 1148, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 1126, 1104, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	1118, 340, 0, 341, 342, 344, 0, 347, 348, 349,
	350, 351, 0, 352, 1127, 1075, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 1128, 0, 387,
	388, 389, 1108, 1109, 390, 391, 392, 393, 394, 395,
	398, 1141, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 598, 1119, 415,
	417, 418, 1125, 602, 1120, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 1121, 446,
	447, 448, 449, 0, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 1078, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 1112, 498, 608, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 1122, 519, 520, 1113,
	522, 523, 816, 525, 526, 527, 528, 529, 0, 648,
	530, 1123, 531, 1124, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 1062, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 616, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145,
	562, 563, 579, 430, 424, 380, 422, 423, 427, 428,
	431, 0, 0, 0, 1117, 0, 0, 0, 1060, 0,
	855, 0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066,
	0, 0, 0, 1067, 0, 0, 1056, 1057, 256, 0,
	273, 798, 0, 322, 359, 1071, 0, 1059, 419, 0,
	472, 476, 0, 565, 1091, 0, 1063, 0, 330, 1084,
	803, 0, 809, 1085, 815, 1083, 541, 0, 805, 806,
	811, 261, 1161, 564, 635, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 1114,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 5090, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	1072, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143,
	1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146,
	1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551,
	1162, 1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	1126, 1104, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106,
	1107, 1111, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 1118, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 1127, 1075,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 1128, 0, 387, 388, 389, 1108, 1109, 390, 391,
	392, 393, 394, 395, 398, 1141, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 1119, 415, 417, 418, 1125, 602, 1120, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 1121, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 1078, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	1112, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	1122, 519, 520, 1113, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 1123, 531, 1124, 532, 533,
	534, 535, 536, 5089, 538, 540, 0, 1062, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 1129, 1130, 1133, 1131,
	1132, 1134, 1135, 1145, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 0, 1117, 0,
	0, 0, 1060, 0, 855, 0, 1081, 972, 0, 1086,
	1087, 1076, 1095, 1066, 0, 0, 0, 1067, 0, 0,
	1056, 1057, 256, 0, 273, 798, 0, 322, 359, 1071,
	0, 1059, 419, 0, 472, 476, 0, 565, 1091, 0,
	1063, 0, 330, 1084, 803, 0, 809, 1085, 815, 1083,
	541, 0, 805, 806, 811, 261, 1161, 564, 635, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 807, 804, 808, 814, 802,
	812, 799, 810, 0, 463, 397, 614, 490, 268, 314,
	301, 343, 385, 497, 0, 0, 375, 545, 310, 399,
	0, 289, 432, 1114, 521, 396, 0, 504, 524, 0,
	416, 295, 455, 511, 512, 796, 801, 0, 817, 0,
	299, 300, 421, 281, 429, 626, 592, 484, 442, 440,
	0, 407, 464, 621, 1072, 0, 329, 0, 324, 420,
	560, 287, 539, 458, 425, 379, 487, 516, 326, 311,
	312, 355, 457, 345, 297, 550, 1142, 1144, 1140, 1136,
	1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558, 1147,
	1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150, 1149,
	1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151, 1148,
	0, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 257, 0, 258, 259, 260, 262, 263, 264, 795,
	265, 266, 267, 270, 271, 272, 274, 634, 275, 276,
	277, 278, 279, 280, 1126, 1104, 282, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 294, 296, 4895, 1115,
	1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305,
	306, 307, 0, 308, 309, 313, 315, 316, 317, 318,
	319, 320, 323, 0, 325, 327, 0, 328, 331, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 1118, 340,
	0, 341, 342, 344, 0, 347, 348, 349, 350, 351,
	0, 352, 1127, 4897, 353, 354, 356, 357, 358, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 374, 376, 0, 377, 378, 381,
	382, 383, 384, 0, 386, 1128, 0, 387, 388, 389,
	1108, 1109, 390, 391, 392, 393, 394, 395, 398, 1141,
	400, 401, 402, 403, 404, 405, 406, 636, 408, 409,
	410, 411, 412, 413, 414, 598, 1119, 415, 417, 418,
	1125, 602, 1120, 813, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 443, 444, 445, 1121, 446, 447, 448,
	449, 0, 450, 451, 452, 453, 454, 456, 459, 460,
	461, 462, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 474, 475, 477, 478, 479, 637, 480, 4896, 482,
	483, 1078, 485, 486, 638, 488, 489, 491, 492, 493,
	494, 495, 496, 647, 1112, 498, 608, 499, 500, 501,
	502, 503, 0, 505, 506, 507, 508, 509, 510, 513,
	514, 515, 517, 518, 1122, 519, 520, 1113, 522, 523,
	816, 525, 526, 527, 528, 529, 0, 648, 530, 1123,
	531, 1124, 532, 533, 534, 535, 536, 537, 538, 540,
	0, 1062, 542, 543, 544, 546, 547, 548, 549, 552,
	553, 554, 555, 556, 0, 557, 559, 561, 639, 616,
	1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563,
	579, 430, 424, 380, 422, 423, 427, 428, 431, 0,
	0, 0, 1117, 0, 0, 0, 1060, 0, 855, 0,
	1081, 972, 0, 1086, 1087, 1076, 1095, 1066, 0, 0,
	0, 4894, 0, 0, 1056, 1057, 256, 0, 273, 798,
	0, 322, 359, 1071, 0, 1059, 419, 0, 472, 476,
	0, 5088, 1091, 0, 1063, 0, 330, 1084, 803, 0,
	809, 1085, 815, 1083, 541, 0, 805, 806, 811, 261,
	1161, 564, 635, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 5090, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 1072, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153,
	920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101,
	1154, 1152, 1151, 1148, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 1075, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 1078, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 5089, 538, 540, 0, 1062, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 1117, 0, 0, 0,
	1060, 0, 855, 0, 1081, 972, 0, 1086, 1087, 1076,
	1095, 1066, 0, 0, 0, 1067, 0, 0, 1056, 1057,
	256, 0, 273, 798, 0, 322, 359, 1071, 0, 1059,
	419, 0, 472, 476, 0, 565, 1091, 0, 1063, 0,
	330, 1084, 803, 0, 809, 1085, 815, 1083, 541, 0,
	805, 806, 811, 261, 1161, 564, 635, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 1114, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 1072, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137, 1102,
	1103, 1143, 1139, 346, 1138, 0, 558, 1147, 1158, 1155,
	1160, 1146, 1159, 1153, 920, 605, 1150, 1149, 1163, 1156,
	1157, 551, 1162, 1101, 1154, 1152, 1151, 1148, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 1126, 1104, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 1115, 1105, 1110,
	1116, 1106, 1107, 1111, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 1118, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	1127, 1075, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 1128, 0, 387, 388, 389, 1108, 1109,
	390, 391, 392, 393, 394, 395, 398, 1141, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 4421, 598, 1119, 415, 417, 418, 1125, 602,
	1120, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 1121, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 1078,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 1112, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 1122, 519, 520, 1113, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 1123, 531, 1124,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 1062,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 1129, 1130,
	1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 0, 0, 0,
	1117, 0, 0, 0, 1060, 0, 855, 0, 1081, 972,
	0, 1086, 1087, 1076, 1095, 1066, 0, 0, 0, 1067,
	0, 0, 1056, 1057, 256, 0, 273, 798, 0, 322,
	359, 1071, 0, 1059, 419, 0, 472, 476, 0, 565,
	1091, 0, 1063, 0, 330, 1084, 803, 0, 809, 1085,
	815, 1083, 541, 0, 805, 806, 811, 261, 1161, 564,
	635, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 807, 804, 808,
	814, 802, 812, 799, 810, 0, 463, 397, 614, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 1114, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 796, 801, 0,
	817, 0, 299, 300, 421, 281, 429, 626, 592, 484,
	442, 440, 0, 407, 464, 621, 1072, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 1142, 1144,
	1140, 1136, 1137, 1102, 1103, 1143, 1139, 346, 1138, 0,
	558, 1147, 1158, 1155, 1160, 1146, 1159, 1153, 920, 605,
	1150, 1149, 1163, 1156, 1157, 551, 1162, 1101, 1154, 1152,
	1151, 1148, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 1126, 1104, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	1118, 340, 0, 341, 342, 344, 0, 347, 348, 349,
	350, 351, 0, 352, 1127, 1075, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 1128, 0, 387,
	388, 389, 1108, 1109, 390, 391, 392, 393, 394, 395,
	398, 1141, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 598, 1119, 415,
	417, 418, 1125, 602, 1120, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 1121, 446,
	447, 448, 449, 0, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 1078, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 1112, 498, 608, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 1122, 519, 520, 1113,
	522, 523, 816, 525, 526, 527, 528, 529, 0, 648,
	530, 1123, 531, 1124, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 1062, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 4408, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145,
	562, 563, 579, 430, 424, 380, 422, 423, 427, 428,
	431, 0, 0, 0, 1117, 0, 0, 0, 1060, 0,
	855, 0, 1081, 972, 0, 1086, 1087, 1076, 1095, 1066,
	0, 0, 0, 1067, 0, 0, 1056, 1057, 256, 0,
	273, 798, 0, 322, 359, 1071, 0, 1059, 419, 0,
	472, 476, 0, 565, 1091, 0, 1063, 0, 330, 1084,
	803, 0, 809, 1085, 815, 1083, 541, 0, 805, 806,
	811, 261, 1161, 564, 635, 0, 0, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 1114,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 3540, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	1072, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143,
	1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146,
	1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551,
	1162, 1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	1126, 1104, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106,
	1107, 1111, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 1118, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 1127, 1075,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 1128, 0, 387, 388, 389, 1108, 1109, 390, 391,
	392, 393, 394, 395, 398, 1141, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 1119, 415, 417, 418, 1125, 602, 1120, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 1121, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 1078, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	1112, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	1122, 519, 520, 1113, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 1123, 531, 1124, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 1062, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 1129, 1130, 1133, 1131,
	1132, 1134, 1135, 1145, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 0, 1117, 0,
	0, 0, 1060, 0, 855, 0, 2688, 972, 0, 1086,
	1087, 1076, 1095, 1066, 0, 0, 0, 1067, 0, 0,
	1056, 1057, 256, 0, 273, 798, 0, 322, 359, 1071,
	0, 1059, 419, 0, 472, 476, 0, 565, 1091, 0,
	1063, 0, 330, 1084, 803, 0, 809, 1085, 815, 1083,
	541, 0, 805, 806, 811, 261, 1161, 564, 635, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 807, 804, 808, 814, 802,
	812, 799, 810, 0, 463, 397, 614, 490, 268, 314,
	301, 343, 385, 497, 0, 0, 375, 545, 310, 399,
	0, 289, 432, 1114, 521, 396, 0, 504, 524, 0,
	416, 295, 455, 511, 512, 796, 801, 0, 817, 0,
	299, 300, 421, 281, 429, 626, 592, 484, 442, 440,
	0, 407, 464, 621, 1072, 0, 329, 0, 324, 420,
	560, 287, 539, 458, 425, 379, 487, 516, 326, 311,
	312, 355, 457, 345, 297, 550, 1142, 1144, 1140, 1136,
	1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558, 1147,
	1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150, 1149,
	1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151, 1148,
	0, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 257, 0, 258, 259, 260, 262, 263, 264, 795,
	265, 266, 267, 270, 271, 272, 274, 634, 275, 276,
	277, 278, 279, 280, 1126, 1104, 282, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 294, 296, 298, 1115,
	1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305,
	306, 307, 0, 308, 309, 313, 315, 316, 317, 318,
	319, 320, 323, 0, 325, 327, 0, 328, 331, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 1118, 340,
	0, 341, 342, 344, 0, 347, 348, 349, 350, 351,
	0, 352, 1127, 1075, 353, 354, 356, 357, 358, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 374, 376, 0, 377, 378, 381,
	382, 383, 384, 0, 386, 1128, 0, 387, 388, 389,
	1108, 1109, 390, 391, 392, 393, 394, 395, 398, 1141,
	400, 401, 402, 403, 404, 405, 406, 636, 408, 409,
	410, 411, 412, 413, 414, 598, 1119, 415, 417, 418,
	1125, 602, 1120, 813, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 443, 444, 445, 1121, 446, 447, 448,
	449, 0, 450, 451, 452, 453, 454, 456, 459, 460,
	461, 462, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 474, 475, 477, 478, 479, 637, 480, 481, 482,
	483, 1078, 485, 486, 638, 488, 489, 491, 492, 493,
	494, 495, 496, 647, 1112, 498, 608, 499, 500, 501,
	502, 503, 0, 505, 506, 507, 508, 509, 510, 513,
	514, 515, 517, 518, 1122, 519, 520, 1113, 522, 523,
	816, 525, 526, 527, 528, 529, 0, 648, 530, 1123,
	531, 1124, 532, 533, 534, 535, 536, 537, 538, 540,
	0, 1062, 542, 543, 544, 546, 547, 548, 549, 552,
	553, 554, 555, 556, 0, 557, 559, 561, 639, 616,
	1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563,
	579, 430, 424, 380, 422, 423, 427, 428, 431, 0,
	0, 0, 1117, 0, 0, 0, 1060, 0, 855, 0,
	1081, 972, 0, 1086, 1087, 1076, 1095, 1066, 0, 0,
	0, 1067, 0, 0, 1056, 1057, 256, 0, 273, 798,
	0, 322, 359, 1071, 0, 1059, 419, 0, 472, 476,
	0, 565, 1091, 0, 1063, 0, 330, 1084, 803, 0,
	809, 1085, 815, 1083, 541, 0, 805, 806, 811, 261,
	1161, 564, 635, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 1072, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153,
	920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101,
	1154, 1152, 1151, 1148, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 1075, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 1078, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 1062, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 1117, 0, 0, 0,
	1060, 0, 855, 0, 1081, 972, 0, 1086, 1087, 1076,
	1095, 1066, 0, 0, 0, 1067, 0, 0, 1583, 1584,
	256, 0, 273, 798, 0, 322, 359, 1071, 0, 0,
	419, 0, 472, 476, 0, 565, 1091, 0, 4714, 0,
	330, 1084, 803, 0, 809, 1085, 815, 1083, 541, 0,
	805, 806, 811, 261, 1161, 564, 635, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 1114, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 1072, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137, 1102,
	1103, 1143, 1139, 346, 1138, 0, 558, 1147, 1158, 1155,
	1160, 1146, 1159, 1153, 920, 605, 1150, 1149, 1163, 1156,
	1157, 551, 1162, 1101, 1154, 1152, 1151, 1148, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 1126, 1104, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 1115, 1105, 1110,
	1116, 1106, 1107, 1111, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 1118, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	1127, 1075, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 1128, 0, 387, 388, 389, 1108, 1109,
	390, 391, 392, 393, 394, 395, 398, 1141, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 1119, 415, 417, 418, 1125, 602,
	1120, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 1121, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 2842,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 1112, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 1122, 519, 520, 1113, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 1123, 531, 1124,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 1129, 1130,
	1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 0, 0, 0,
	1117, 0, 0, 0, 0, 0, 855, 0, 1081, 972,
	0, 1086, 1087, 1076, 1095, 1066, 0, 0, 0, 2682,
	0, 0, 2839, 2840, 256, 0, 273, 798, 0, 322,
	359, 1071, 0, 0, 419, 0, 472, 476, 0, 565,
	1091, 0, 0, 0, 330, 1084, 803, 0, 809, 1085,
	815, 1083, 541, 0, 805, 806, 811, 261, 1161, 564,
	635, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 807, 804, 808,
	814, 802, 812, 799, 810, 0, 463, 397, 614, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 1114, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 796, 801, 0,
	817, 0, 299, 300, 421, 281, 429, 626, 592, 484,
	442, 440, 0, 407, 464, 621, 1072, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 1142, 1144,
	1140, 1136, 1137, 1102, 1103, 1143, 1139, 346, 1138, 0,
	558, 1147, 1158, 1155, 1160, 1146, 1159, 1153, 920, 605,
	1150, 1149, 1163, 1156, 1157, 551, 1162, 1101, 1154, 1152,
	1151, 1148, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 1126, 1104, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	1118, 340, 0, 341, 342, 344, 0, 347, 348, 349,
	350, 351, 0, 352, 1127, 1075, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 1128, 0, 387,
	388, 389, 1108, 1109, 390, 391, 392, 393, 394, 395,
	398, 1141, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 598, 1119, 415,
	417, 418, 1125, 602, 1120, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 1121, 446,
	447, 448, 449, 0, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 2842, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 1112, 498, 608, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 1122, 519, 520, 1113,
	522, 523, 816, 525, 526, 527, 528, 529, 0, 648,
	530, 1123, 531, 1124, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 0, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 616, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145,
	562, 563, 579, 430, 424, 380, 422, 423, 427, 428,
	431, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	855, 0, 1081, 972, 0, 1086, 1087, 0, 1095, 1066,
	0, 0, 0, 2682, 0, 0, 2839, 2840, 256, 0,
	273, 798, 0, 322, 359, 1071, 0, 0, 419, 0,
	472, 476, 0, 565, 1091, 0, 0, 0, 330, 1084,
	803, 0, 809, 1085, 815, 1083, 541, 0, 805, 806,
	811, 261, 1161, 564, 635, 0, 0, 0, 426, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 1114,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 299, 300, 421, 281,
	429, 626, 592, 2681, 442, 440, 0, 407, 464, 621,
	1072, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143,
	1139, 346, 1138, 0, 558, 1147, 1158, 1155, 1160, 1146,
	1159, 1153, 920, 605, 1150, 1149, 1163, 1156, 1157, 551,
	1162, 1101, 1154, 1152, 1151, 1148, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	1126, 1104, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 1115, 1105, 1110, 1116, 1106,
	1107, 1111, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 1118, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 1127, 1075,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 1128, 0, 387, 388, 389, 1108, 1109, 390, 391,
	392, 393, 394, 395, 398, 1141, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 1119, 415, 417, 418, 1125, 602, 1120, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 1121, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 2680, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	1112, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	1122, 519, 520, 1113, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 1123, 531, 1124, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 0, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 1129, 1130, 1133, 1131,
	1132, 1134, 1135, 1145, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 855, 0, 1081, 972, 0, 1086,
	1087, 1076, 1095, 1066, 0, 0, 0, 2682, 0, 0,
	2678, 2679, 256, 0, 273, 798, 0, 322, 359, 1071,
	0, 1059, 419, 0, 472, 476, 0, 0, 1091, 0,
	1063, 0, 330, 1084, 0, 0, 0, 1085, 0, 1083,
	541, 0, 0, 0, 0, 261, 1161, 564, 635, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 807, 804, 808, 814, 802,
	812, 799, 810, 0, 463, 397, 614, 490, 268, 314,
	301, 343, 385, 497, 0, 0, 375, 545, 310, 399,
	0, 289, 432, 1114, 521, 396, 0, 504, 524, 0,
	416, 295, 455, 511, 512, 796, 801, 0, 817, 0,
	5090, 300, 421, 281, 429, 626, 592, 484, 442, 440,
	0, 407, 464, 621, 1072, 0, 329, 0, 324, 420,
	560, 287, 539, 458, 425, 379, 487, 516, 326, 311,
	312, 355, 457, 345, 297, 550, 1142, 1144, 1140, 1136,
	1137, 1102, 1103, 1143, 1139, 346, 1138, 0, 558, 1147,
	1158, 1155, 1160, 1146, 1159, 1153, 920, 605, 1150, 1149,
	1163, 1156, 1157, 551, 1162, 1101, 1154, 1152, 1151, 1148,
	0, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 257, 0, 258, 259, 260, 262, 263, 264, 795,
	265, 266, 267, 270, 271, 272, 274, 634, 275, 276,
	277, 278, 279, 280, 1126, 1104, 282, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 294, 296, 298, 1115,
	1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305,
	306, 307, 0, 308, 309, 313, 315, 316, 317, 318,
	319, 320, 323, 0, 325, 327, 0, 328, 331, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 1118, 340,
	0, 341, 342, 344, 0, 347, 348, 349, 350, 351,
	0, 352, 1127, 1075, 353, 354, 356, 357, 358, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 374, 376, 0, 377, 378, 381,
	382, 383, 384, 0, 386, 1128, 0, 387, 388, 389,
	1108, 1109, 390, 391, 392, 393, 394, 395, 398, 1141,
	400, 401, 402, 403, 404, 405, 406, 636, 408, 409,
	410, 411, 412, 413, 414, 598, 1119, 415, 417, 418,
	1125, 602, 1120, 813, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 443, 444, 445, 1121, 446, 447, 448,
	449, 0, 450, 451, 452, 453, 454, 456, 459, 460,
	461, 462, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 474, 475, 477, 478, 479, 637, 480, 481, 482,
	483, 1078, 485, 486, 638, 488, 489, 491, 492, 493,
	494, 495, 496, 647, 1112, 498, 608, 499, 500, 501,
	502, 503, 0, 505, 506, 507, 508, 509, 510, 513,
	514, 515, 517, 518, 1122, 519, 520, 1113, 522, 523,
	816, 525, 526, 527, 528, 529, 0, 648, 530, 1123,
	531, 1124, 532, 533, 534, 535, 536, 5089, 538, 540,
	0, 1062, 542, 543, 544, 546, 547, 548, 549, 552,
	553, 554, 555, 556, 0, 557, 559, 561, 639, 616,
	1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563,
	579, 430, 424, 380, 422, 423, 427, 428, 431, 0,
	0, 0, 1117, 0, 0, 0, 0, 0, 855, 0,
	1081, 972, 0, 1086, 1087, 0, 1095, 1066, 0, 0,
	0, 1067, 0, 0, 1056, 1057, 256, 0, 273, 798,
	0, 322, 359, 1071, 0, 0, 419, 0, 472, 476,
	0, 565, 1091, 0, 0, 0, 330, 1084, 803, 0,
	809, 1085, 815, 1083, 541, 0, 805, 806, 811, 261,
	1161, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 1072, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153,
	920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101,
	1154, 1152, 1151, 1148, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 1075, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 2842, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 1117, 0, 855, 0,
	1081, 972, 0, 1086, 1087, 0, 1095, 1066, 0, 0,
	0, 0, 0, 0, 0, 2682, 256, 0, 273, 798,
	0, 322, 359, 1071, 0, 0, 419, 0, 472, 476,
	0, 565, 1091, 0, 0, 0, 330, 1084, 803, 0,
	809, 1085, 815, 1083, 541, 0, 805, 806, 811, 261,
	1161, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 4078, 1072, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153,
	920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101,
	1154, 1152, 1151, 1148, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 1075, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 2842, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 1117, 0, 855, 0,
	1081, 972, 0, 1086, 1087, 0, 1095, 1066, 0, 0,
	0, 0, 0, 0, 0, 2682, 256, 0, 273, 798,
	0, 322, 359, 1071, 0, 0, 419, 0, 472, 476,
	0, 565, 1091, 0, 0, 0, 330, 1084, 803, 0,
	809, 1085, 815, 1083, 541, 0, 805, 806, 811, 261,
	1161, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 4019, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 1072, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	1138, 0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153,
	920, 605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101,
	1154, 1152, 1151, 1148, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 1075, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 2842, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 855, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 2682, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 117, 565, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 114, 0, 0, 709, 115, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 1013, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 1114, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 2930, 2931, 2929, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137,
	1102, 1103, 1143, 1139, 346, 2937, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 1126, 1104, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 1115, 1105,
	1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 1118, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 1127, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 2922, 386, 1128, 0, 387, 388, 389, 1108,
	1109, 390, 391, 392, 393, 394, 395, 398, 1141, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 1119, 415, 417, 418, 1125,
	602, 1120, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 1121, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 1112, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 1122, 519, 520, 1113, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 1123, 531,
	1124, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 1129,
	1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 0, 0,
	0, 1117, 0, 791, 0, 1496, 972, 118, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	2924, 256, 0, 273, 798, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 4966,
	0, 330, 1493, 803, 0, 809, 0, 815, 1492, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 1494, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 800, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4967, 0, 0, 1497, 1498, 4965, 256, 0, 273, 798,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	709, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 2930,
	2931, 2929, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	2937, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 2922, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 855, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 2924, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 1114, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137,
	1102, 1103, 1143, 1139, 346, 2937, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 1126, 1104, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 1115, 1105,
	1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 1118, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 1127, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 1128, 0, 387, 388, 389, 1108,
	1109, 390, 391, 392, 393, 394, 395, 398, 1141, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 1119, 415, 417, 418, 1125,
	602, 1120, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 1121, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 1112, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 1122, 519, 520, 1113, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 1123, 531,
	1124, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 1129,
	1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 855, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	4228, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	2937, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 855, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 5157, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 1114, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 1142, 1144, 1140, 1136, 1137,
	1102, 1103, 1143, 1139, 346, 2937, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 1126, 1104, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 1115, 1105,
	1110, 1116, 1106, 1107, 1111, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 1118, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 1127, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 1128, 0, 387, 388, 389, 1108,
	1109, 390, 391, 392, 393, 394, 395, 398, 1141, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 1119, 415, 417, 418, 1125,
	602, 1120, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 1121, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 1112, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 1122, 519, 520, 1113, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 1123, 531,
	1124, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 1129,
	1130, 1133, 1131, 1132, 1134, 1135, 1145, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 855, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	3063, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 1114, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 2930,
	2931, 2929, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	1142, 1144, 1140, 1136, 1137, 1102, 1103, 1143, 1139, 346,
	2937, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 1126, 1104,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 1115, 1105, 1110, 1116, 1106, 1107, 1111,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 1118, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 1127, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 1128,
	0, 387, 388, 389, 1108, 1109, 390, 391, 392, 393,
	394, 395, 398, 1141, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	1119, 415, 417, 418, 1125, 602, 1120, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	1121, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 1112, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 1122, 519,
	520, 1113, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 1123, 531, 1124, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 1129, 1130, 1133, 1131, 1132, 1134,
	1135, 1145, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 1117, 0, 791, 0,
	1496, 972, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 256, 0, 273, 798,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 1502, 0, 330, 1493, 803, 0,
	809, 0, 815, 1492, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 1494, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 800, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 791, 0, 1496, 972, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 1497, 1498,
	256, 0, 273, 798, 0, 322, 359, 574, 0, 0,
	419, 0, 472, 476, 0, 565, 0, 0, 1488, 0,
	330, 1493, 803, 0, 809, 0, 815, 1492, 541, 0,
	805, 806, 811, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 1494, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 797, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 0,
	800, 0, 0, 0, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 0, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 791, 0, 1496, 972,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 1497, 1498, 256, 0, 273, 798, 0, 322,
	359, 574, 0, 0, 419, 0, 472, 476, 0, 565,
	0, 0, 0, 0, 330, 1493, 803, 0, 809, 0,
	815, 1492, 541, 0, 805, 806, 811, 261, 649, 564,
	635, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 1494, 807, 804, 808,
	814, 802, 812, 799, 810, 0, 463, 397, 614, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 0, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 796, 801, 0,
	817, 0, 299, 300, 421, 281, 429, 626, 592, 484,
	442, 440, 0, 407, 464, 621, 0, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 589, 593,
	591, 587, 584, 588, 585, 586, 590, 346, 583, 0,
	558, 567, 601, 581, 609, 566, 606, 576, 321, 605,
	570, 569, 615, 596, 597, 551, 611, 582, 580, 573,
	572, 568, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 571, 797, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 0, 0, 0, 800, 0, 0, 0, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	575, 340, 0, 341, 342, 344, 0, 347, 348, 349,
	350, 351, 0, 352, 577, 578, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 594, 0, 387,
	388, 389, 0, 0, 390, 391, 392, 393, 394, 395,
	398, 595, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 598, 599, 415,
	417, 418, 600, 602, 603, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 604, 446,
	447, 448, 449, 0, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 607, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 0, 498, 608, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 610, 519, 520, 0,
	522, 523, 816, 525, 526, 527, 528, 529, 0, 648,
	530, 612, 531, 613, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 0, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 616, 617, 618, 619, 620, 622, 623, 624, 625,
	562, 563, 579, 430, 424, 380, 422, 423, 427, 428,
	431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 1498, 256, 0,
	273, 798, 0, 322, 359, 574, 0, 0, 419, 0,
	472, 476, 117, 565, 0, 0, 0, 0, 330, 0,
	803, 0, 809, 0, 815, 0, 541, 0, 805, 806,
	811, 261, 649, 564, 635, 0, 0, 0, 426, 114,
	0, 0, 0, 115, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 1013, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 0,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 112, 299, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	0, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 589, 593, 591, 587, 584, 588, 585, 586,
	590, 346, 583, 0, 558, 567, 601, 581, 609, 566,
	606, 576, 321, 605, 570, 569, 615, 596, 597, 551,
	611, 582, 580, 573, 572, 568, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 113, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	571, 797, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 0, 0, 0, 800, 0,
	0, 0, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 575, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 577, 578,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 594, 0, 387, 388, 389, 0, 0, 390, 391,
	392, 393, 394, 395, 398, 595, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 599, 415, 417, 418, 600, 602, 603, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 604, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 607, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	0, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	610, 519, 520, 0, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 612, 531, 613, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 0, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 617, 618, 619, 620,
	622, 623, 624, 625, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 855, 0, 0, 0, 0,
	0, 1016, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 273, 798, 111, 322, 359,
	574, 0, 0, 419, 0, 472, 476, 0, 565, 0,
	0, 0, 0, 330, 0, 803, 0, 809, 0, 815,
	0, 541, 0, 805, 806, 811, 261, 649, 564, 635,
	0, 0, 0, 426, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 614, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 0, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 626, 592, 484, 442,
	440, 0, 407, 464, 621, 0, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 589, 593, 591,
	587, 584, 588, 585, 586, 590, 346, 583, 0, 558,
	567, 601, 581, 609, 566, 606, 576, 321, 605, 570,
	569, 615, 596, 597, 551, 611, 582, 580, 573, 572,
	568, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 571, 797, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	0, 0, 0, 800, 0, 0, 0, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 575,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 577, 578, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 594, 0, 387, 388,
	389, 0, 0, 390, 391, 392, 393, 394, 395, 398,
	595, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 598, 599, 415, 417,
	418, 600, 602, 603, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 604, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 607, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 0, 498, 608, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 610, 519, 520, 0, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	612, 531, 613, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 0, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	616, 617, 618, 619, 620, 622, 623, 624, 625, 562,
	563, 579, 430, 424, 380, 422, 423, 427, 428, 431,
	243, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 0, 0, 0, 771, 772, 773, 0, 256, 0,
	273, 0, 4868, 322, 359, 574, 0, 0, 419, 0,
	472, 476, 0, 565, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 541, 0, 0, 0,
	0, 261, 649, 564, 635, 0, 0, 0, 426, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 0,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 0, 0, 0, 0, 0, 299, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	0, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 589, 593, 591, 587, 584, 588, 585, 586,
	590, 346, 583, 0, 558, 567, 601, 581, 609, 566,
	606, 576, 321, 605, 570, 569, 615, 596, 597, 551,
	611, 582, 580, 573, 572, 568, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 0, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	571, 0, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 0, 0, 0, 0, 0,
	0, 0, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 575, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 577, 578,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 594, 0, 387, 388, 389, 0, 0, 390, 391,
	392, 393, 394, 395, 398, 595, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 599, 415, 417, 418, 600, 602, 603, 0,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 604, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 607, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	0, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	610, 519, 520, 0, 522, 523, 0, 525, 526, 527,
	528, 529, 0, 648, 530, 612, 531, 613, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 0, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 617, 618, 619, 620,
	622, 623, 624, 625, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 768, 769, 770, 0, 0, 0, 0, 0, 243,
	762, 763, 764, 765, 766, 767, 760, 0, 0, 0,
	0, 0, 0, 771, 772, 773, 0, 256, 0, 273,
	0, 0, 322, 359, 574, 0, 0, 419, 0, 472,
	476, 0, 565, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 541, 0, 0, 0, 0,
	261, 649, 564, 635, 0, 0, 0, 4841, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 463,
	397, 614, 490, 268, 314, 301, 343, 385, 497, 0,
	0, 375, 545, 310, 399, 0, 289, 432, 0, 521,
	396, 0, 504, 524, 0, 416, 295, 455, 511, 512,
	0, 0, 0, 0, 0, 299, 300, 421, 281, 429,
	626, 592, 484, 442, 440, 0, 407, 464, 621, 0,
	0, 329, 0, 324, 420, 560, 287, 539, 458, 425,
	379, 487, 516, 326, 311, 312, 355, 457, 345, 297,
	550, 589, 593, 591, 587, 584, 588, 585, 586, 590,
	346, 583, 0, 558, 567, 601, 581, 609, 566, 606,
	576, 321, 605, 570, 569, 615, 596, 597, 551, 611,
	582, 580, 573, 572, 568, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 257, 0, 258, 259,
	260, 262, 263, 264, 0, 265, 266, 267, 270, 271,
	272, 274, 634, 275, 276, 277, 278, 279, 280, 571,
	0, 282, 283, 284, 285, 286, 288, 290, 291, 292,
	293, 294, 296, 298, 0, 0, 0, 0, 0, 0,
	0, 302, 303, 304, 305, 306, 307, 0, 308, 309,
	313, 315, 316, 317, 318, 319, 320, 323, 0, 325,
	327, 0, 328, 331, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 575, 340, 0, 341, 342, 344, 0,
	347, 348, 349, 350, 351, 0, 352, 577, 578, 353,
	354, 356, 357, 358, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 374,
	376, 0, 377, 378, 381, 382, 383, 384, 0, 386,
	594, 0, 387, 388, 389, 0, 0, 390, 391, 392,
	393, 394, 395, 398, 595, 400, 401, 402, 403, 404,
	405, 406, 636, 408, 409, 410, 411, 412, 413, 414,
	598, 599, 415, 417, 418, 600, 602, 603, 0, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 443, 444,
	445, 604, 446, 447, 448, 449, 0, 450, 451, 452,
	453, 454, 456, 459, 460, 461, 462, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 474, 475, 477, 478,
	479, 637, 480, 481, 482, 483, 607, 485, 486, 638,
	488, 489, 491, 492, 493, 494, 495, 496, 647, 0,
	498, 608, 499, 500, 501, 502, 503, 0, 505, 506,
	507, 508, 509, 510, 513, 514, 515, 517, 518, 610,
	519, 520, 0, 522, 523, 0, 525, 526, 527, 528,
	529, 0, 648, 530, 612, 531, 613, 532, 533, 534,
	535, 536, 537, 538, 540, 0, 0, 542, 543, 544,
	546, 547, 548, 549, 552, 553, 554, 555, 556, 0,
	557, 559, 561, 639, 616, 617, 618, 619, 620, 622,
	623, 624, 625, 562, 563, 579, 430, 424, 380, 422,
	423, 427, 428, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	768, 769, 770, 0, 0, 0, 0, 0, 243, 762,
	763, 764, 765, 766, 767, 760, 0, 0, 0, 0,
	0, 0, 771, 772, 773, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 3271, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 3272, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 768,
	769, 770, 0, 0, 0, 0, 0, 243, 762, 763,
	764, 765, 766, 767, 760, 0, 0, 0, 0, 0,
	0, 771, 772, 773, 0, 256, 0, 273, 0, 0,
	322, 359, 574, 0, 0, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 261, 649,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 0, 0,
	0, 0, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 0, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 756, 279, 280, 571, 0, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 757, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 0, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 768, 769,
	770, 0, 0, 0, 0, 0, 0, 762, 763, 764,
	765, 766, 767, 256, 0, 273, 798, 0, 322, 359,
	574, 0, 0, 419, 0, 472, 476, 0, 565, 0,
	0, 0, 0, 330, 0, 803, 0, 809, 0, 815,
	0, 541, 0, 805, 806, 811, 261, 649, 564, 635,
	0, 0, 0, 426, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 614, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 1114, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 626, 592, 484, 442,
	440, 0, 407, 464, 621, 0, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 1142, 1144, 1140,
	1136, 1137, 1102, 1103, 1143, 1139, 346, 2937, 0, 558,
	567, 601, 581, 609, 566, 606, 576, 321, 605, 570,
	569, 615, 596, 597, 551, 611, 582, 580, 573, 572,
	568, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 1126, 1104, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	1115, 1105, 1110, 1116, 1106, 1107, 1111, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 1118,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 1127, 578, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 1128, 0, 387, 388,
	389, 1108, 1109, 390, 391, 392, 393, 394, 395, 398,
	1141, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 598, 1119, 415, 417,
	418, 1125, 602, 1120, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 1121, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 607, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 1112, 498, 608, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 1122, 519, 520, 1113, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	1123, 531, 1124, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 0, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	616, 1129, 1130, 1133, 1131, 1132, 1134, 1135, 1145, 562,
	563, 579, 430, 424, 380, 422, 423, 427, 428, 431,
	791, 0, 0, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	273, 798, 0, 322, 359, 574, 0, 0, 419, 0,
	472, 476, 0, 565, 0, 0, 0, 0, 330, 0,
	803, 0, 809, 0, 815, 0, 541, 0, 805, 806,
	811, 261, 649, 564, 635, 0, 0, 0, 426, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 614, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 0,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 112, 299, 300, 421, 281,
	429, 626, 592, 484, 442, 440, 0, 407, 464, 621,
	0, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 589, 593, 591, 587, 584, 588, 585, 586,
	590, 346, 583, 0, 558, 567, 601, 581, 609, 566,
	606, 576, 321, 605, 570, 569, 615, 596, 597, 551,
	611, 582, 580, 573, 572, 568, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 113, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	571, 797, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 0, 0, 0, 800, 0,
	0, 0, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 575, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 577, 578,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 594, 0, 387, 388, 389, 0, 0, 390, 391,
	392, 393, 394, 395, 398, 595, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 598, 599, 415, 417, 418, 600, 602, 603, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 604, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 607, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	0, 498, 608, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	610, 519, 520, 0, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 612, 531, 613, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 0, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 616, 617, 618, 619, 620,
	622, 623, 624, 625, 562, 563, 579, 430, 424, 380,
	422, 423, 427, 428, 431, 0, 0, 855, 0, 1081,
	972, 1016, 1086, 1087, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 273, 798, 0,
	322, 359, 574, 0, 0, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 1084, 803, 0, 809,
	1085, 815, 1083, 541, 0, 805, 806, 811, 261, 1161,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 807, 804,
	808, 814, 802, 812, 799, 810, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 796, 801,
	0, 817, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 5449,
	0, 558, 1147, 1158, 1155, 1160, 1146, 1159, 1153, 920,
	605, 1150, 1149, 1163, 1156, 1157, 551, 1162, 1101, 1154,
	1152, 1151, 1148, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 797, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 800, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 816, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 273, 0, 0, 322, 359, 574, 0, 0,
	419, 0, 472, 476, 0, 565, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 541, 0,
	0, 0, 0, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 0, 0, 0, 0, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 0, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 0, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 0, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 0, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 0, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 273, 0, 0,
	322, 359, 574, 0, 5286, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 261, 649,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 0, 0,
	0, 0, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 0, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 0, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 0, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 273, 0, 0, 322, 359, 574, 0, 5145,
	419, 0, 472, 476, 0, 565, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 541, 0,
	0, 0, 0, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 0, 0, 0, 0, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 0, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 0, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 0,
	0, 0, 0, 0, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 0, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 0, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 0, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 273, 0, 0,
	322, 359, 574, 0, 5142, 419, 0, 472, 476, 117,
	565, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 261, 649,
	564, 635, 0, 0, 0, 426, 114, 0, 0, 0,
	115, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 397, 1013,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 0, 0,
	0, 0, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 0, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 0, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 0, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 791, 0, 0, 972, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 273, 798, 111, 322, 359, 574, 0, 0,
	419, 0, 472, 476, 0, 565, 0, 0, 0, 0,
	330, 1493, 803, 0, 809, 0, 815, 1492, 541, 0,
	805, 806, 811, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 1494, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 797, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 0,
	800, 0, 0, 0, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 0, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 791, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 273, 798, 0,
	322, 359, 574, 0, 0, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 0, 803, 0, 809,
	0, 815, 0, 541, 0, 805, 806, 811, 261, 649,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 3308, 0, 0, 0, 807, 804,
	808, 814, 802, 812, 799, 810, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 796, 801,
	0, 817, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 797, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 788, 800, 0, 0, 789, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 790, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 816, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 273, 798, 0, 322, 359, 574, 0, 0,
	419, 0, 472, 476, 0, 565, 0, 0, 0, 0,
	330, 0, 803, 0, 809, 0, 815, 0, 541, 0,
	805, 806, 811, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 2342, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 797, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 788,
	800, 0, 0, 789, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 790, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 273, 0, 0,
	322, 359, 574, 0, 0, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 261, 649,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 709,
	2358, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 0, 0,
	0, 0, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 0, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 0, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 2362, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 2359, 523, 0, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	256, 0, 273, 798, 1226, 322, 359, 574, 0, 0,
	419, 0, 472, 476, 0, 565, 0, 0, 0, 0,
	330, 0, 803, 0, 809, 0, 815, 0, 541, 0,
	805, 806, 811, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 797, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 788,
	800, 0, 0, 789, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 886, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 790, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 791, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 256, 0, 273, 798, 0,
	322, 359, 574, 0, 0, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 0, 803, 0, 809,
	0, 815, 0, 541, 0, 805, 806, 811, 261, 649,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 807, 804,
	808, 814, 802, 812, 799, 810, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 796, 801,
	0, 817, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 797, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 788, 800, 0, 0, 789, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 790, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 816, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 273, 798, 0, 322, 359, 574, 0, 0,
	419, 0, 472, 476, 0, 565, 0, 0, 0, 0,
	330, 0, 803, 0, 809, 0, 815, 0, 541, 0,
	805, 806, 811, 261, 649, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 614, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 626, 592, 484, 442, 440, 0, 407,
	464, 621, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 589, 593, 591, 587, 584, 588,
	585, 586, 590, 346, 583, 0, 558, 567, 601, 581,
	609, 566, 606, 576, 321, 605, 570, 569, 615, 596,
	597, 551, 611, 582, 580, 573, 572, 568, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 571, 797, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 788,
	800, 0, 0, 789, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 575, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	577, 578, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 594, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 595, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 598, 599, 415, 417, 418, 600, 602,
	603, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 604, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 607,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 790, 498, 608, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 610, 519, 520, 0, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 612, 531, 613,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 616, 617, 618,
	619, 620, 622, 623, 624, 625, 562, 563, 579, 430,
	424, 380, 422, 423, 427, 428, 431, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 3552, 273, 0, 0,
	322, 359, 574, 0, 0, 419, 0, 472, 476, 0,
	565, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 261, 649,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 397, 614,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 0, 0,
	0, 0, 0, 299, 300, 421, 281, 429, 626, 592,
	484, 442, 440, 0, 407, 464, 621, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 589,
	593, 591, 587, 584, 588, 585, 586, 590, 346, 583,
	0, 558, 567, 601, 581, 609, 566, 606, 576, 321,
	605, 570, 569, 615, 596, 597, 551, 611, 582, 580,
	573, 572, 568, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 0, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 571, 0, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 0, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 575, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 577, 578, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 594, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 595, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 598, 599,
	415, 417, 418, 600, 602, 603, 0, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 604,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 607, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 608,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 610, 519, 520,
	0, 522, 523, 0, 525, 526, 527, 528, 529, 0,
	648, 530, 612, 531, 613, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 616, 617, 618, 619, 620, 622, 623, 624,
	625, 562, 563, 579, 430, 424, 380, 422, 423, 427,
	428, 431, 0, 791, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 1049, 322, 950, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	788, 800, 0, 0, 789, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 790, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	0, 322, 948, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 788, 800, 0, 0, 789,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 790, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 791, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 0, 322, 945, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	788, 800, 0, 0, 789, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 943, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 790, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 788, 800, 0, 0, 789,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	784, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 790, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 791, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 1484,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 800, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 2266, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 791, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	4073, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 800, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	3429, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 1176, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 800, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 791, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 800, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 2988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 798, 0, 322, 359, 0, 0,
	0, 419, 0, 472, 476, 0, 0, 0, 0, 0,
	0, 330, 0, 803, 2460, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 930, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 0, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 0, 0, 484, 442, 440, 0,
	407, 464, 0, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 558, 933, 923,
	915, 916, 917, 918, 919, 920, 0, 935, 936, 937,
	938, 939, 551, 929, 0, 914, 921, 922, 924, 2463,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 0, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 800, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 0, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 0, 0, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 0, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 0, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 0, 0, 415, 417, 418, 0,
	2461, 0, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 0, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	0, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 2466, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 0, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 0, 531,
	0, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 0, 0,
	0, 243, 0, 0, 0, 0, 0, 562, 563, 2462,
	430, 424, 380, 422, 423, 427, 428, 431, 2983, 256,
	0, 273, 0, 0, 322, 2378, 574, 0, 0, 419,
	0, 472, 476, 0, 565, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 2981, 0, 541, 0, 0,
	0, 0, 261, 649, 564, 635, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 463, 397, 614, 490, 268, 314, 301, 343, 385,
	497, 0, 0, 375, 545, 310, 399, 0, 289, 432,
	0, 521, 396, 0, 504, 524, 0, 416, 295, 455,
	511, 512, 0, 0, 2382, 0, 0, 299, 300, 421,
	281, 429, 626, 592, 484, 442, 440, 0, 407, 464,
	621, 0, 0, 329, 0, 324, 420, 560, 287, 539,
	458, 425, 379, 487, 516, 326, 311, 312, 355, 457,
	345, 297, 550, 589, 593, 591, 587, 584, 588, 585,
	586, 590, 346, 583, 0, 558, 567, 601, 581, 609,
	566, 606, 576, 321, 605, 570, 569, 615, 596, 597,
	551, 611, 582, 580, 573, 572, 568, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 257, 0,
	258, 259, 260, 262, 263, 264, 0, 265, 266, 267,
	270, 271, 272, 274, 634, 275, 276, 277, 278, 279,
	280, 571, 0, 282, 283, 284, 285, 286, 288, 290,
	291, 292, 293, 294, 296, 298, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 304, 305, 306, 307, 0,
	308, 309, 313, 315, 316, 317, 318, 319, 320, 323,
	0, 325, 327, 0, 328, 331, 0, 2388, 333, 334,
	335, 336, 337, 338, 339, 575, 340, 0, 341, 342,
	344, 2387, 347, 348, 349, 350, 351, 0, 352, 577,
	578, 353, 354, 356, 357, 358, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 374, 376, 0, 377, 378, 381, 382, 383, 384,
	0, 386, 594, 0, 387, 388, 389, 0, 0, 390,
	391, 392, 393, 394, 395, 398, 595, 400, 401, 402,
	403, 404, 405, 406, 636, 408, 409, 410, 411, 412,
	413, 414, 598, 599, 415, 417, 418, 600, 602, 603,
	0, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	443, 444, 445, 604, 446, 447, 448, 449, 2386, 450,
	451, 452, 453, 454, 456, 459, 460, 461, 462, 0,
	465, 466, 467, 468, 469, 470, 471, 473, 474, 475,
	477, 478, 479, 637, 480, 481, 482, 483, 607, 485,
	486, 638, 488, 489, 491, 492, 493, 494, 495, 496,
	647, 0, 498, 608, 499, 500, 501, 502, 503, 0,
	505, 506, 507, 508, 509, 510, 513, 514, 515, 517,
	518, 610, 519, 520, 0, 522, 523, 0, 525, 526,
	527, 528, 529, 0, 648, 530, 612, 531, 613, 532,
	533, 534, 535, 536, 537, 538, 540, 0, 2385, 542,
	543, 544, 546, 547, 548, 549, 552, 553, 554, 555,
	556, 0, 557, 559, 561, 639, 616, 617, 618, 619,
	620, 622, 623, 624, 625, 562, 563, 579, 430, 424,
	380, 422, 423, 427, 428, 431, 243, 0, 0, 0,
	2384, 2379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 273, 0, 0, 322,
	359, 574, 0, 0, 419, 0, 472, 476, 0, 565,
	0, 0, 0, 0, 330, 0, 0, 0, 2948, 0,
	0, 0, 541, 0, 0, 0, 0, 261, 649, 564,
	635, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 463, 397, 614, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 0, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 0, 0, 2382,
	0, 0, 299, 300, 421, 281, 429, 626, 592, 484,
	442, 440, 0, 407, 464, 621, 0, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 589, 593,
	591, 587, 584, 588, 585, 586, 590, 346, 583, 0,
	558, 567, 601, 581, 609, 566, 606, 576, 321, 605,
	570, 569, 615, 596, 597, 551, 611, 582, 580, 573,
	572, 568, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 0, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 571, 0, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 0, 0, 0, 0, 0, 0, 0, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 2388, 333, 334, 335, 336, 337, 338, 339,
	575, 340, 0, 341, 342, 344, 2387, 347, 348, 349,
	350, 351, 0, 352, 577, 578, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 594, 0, 387,
	388, 389, 0, 0, 390, 391, 392, 393, 394, 395,
	398, 595, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 598, 599, 415,
	417, 418, 600, 602, 603, 0, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 604, 446,
	447, 448, 449, 2386, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 607, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 0, 498, 608, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 610, 519, 520, 0,
	522, 523, 0, 525, 526, 527, 528, 529, 0, 648,
	530, 612, 531, 613, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 2385, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 616, 617, 618, 619, 620, 622, 623, 624, 625,
	562, 563, 579, 430, 424, 380, 422, 423, 427, 428,
	431, 243, 0, 0, 0, 2384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 273, 0, 0, 322, 359, 574, 0, 0, 419,
	0, 472, 476, 0, 565, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 0, 541, 0, 0,
	0, 0, 261, 649, 564, 635, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 463, 397, 614, 490, 268, 314, 301, 343, 385,
	497, 0, 0, 375, 545, 310, 399, 0, 289, 432,
	0, 521, 396, 0, 504, 524, 0, 416, 295, 455,
	511, 512, 0, 0, 2382, 0, 0, 299, 300, 421,
	281, 429, 626, 592, 484, 442, 440, 0, 407, 464,
	621, 0, 0, 329, 0, 324, 420, 560, 287, 539,
	458, 425, 379, 487, 516, 326, 311, 312, 355, 457,
	345, 297, 550, 589, 593, 591, 587, 584, 588, 585,
	586, 590, 346, 583, 0, 558, 567, 601, 581, 609,
	566, 606, 576, 321, 605, 570, 569, 615, 596, 597,
	551, 611, 582, 580, 573, 572, 568, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 257, 0,
	258, 259, 260, 262, 263, 264, 0, 265, 266, 267,
	270, 271, 272, 274, 634, 275, 276, 277, 278, 279,
	280, 571, 0, 282, 283, 284, 285, 286, 288, 290,
	291, 292, 293, 294, 296, 298, 0, 0, 0, 0,
	0, 0, 0, 302, 303, 304, 305, 306, 307, 0,
	308, 309, 313, 315, 316, 317, 318, 319, 320, 323,
	0, 325, 327, 0, 328, 331, 0, 2388, 333, 334,
	335, 336, 337, 338, 339, 575, 340, 0, 341, 342,
	344, 2387, 347, 348, 349, 350, 351, 0, 352, 577,
	578, 353, 354, 356, 357, 358, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 374, 376, 0, 377, 378, 381, 382, 383, 384,
	0, 386, 594, 0, 387, 388, 389, 0, 0, 390,
	391, 392, 393, 394, 395, 398, 595, 400, 401, 402,
	403, 404, 405, 406, 636, 408, 409, 410, 411, 412,
	413, 414, 598, 599, 415, 417, 418, 600, 602, 603,
	0, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	443, 444, 445, 604, 446, 447, 448, 449, 2386, 450,
	451, 452, 453, 454, 456, 459, 460, 461, 462, 0,
	465, 466, 467, 468, 469, 470, 471, 473, 474, 475,
	477, 478, 479, 637, 480, 481, 482, 483, 607, 485,
	486, 638, 488, 489, 491, 492, 493, 494, 495, 496,
	647, 0, 498, 608, 499, 500, 501, 502, 503, 0,
	505, 506, 507, 508, 509, 510, 513, 514, 515, 517,
	518, 610, 519, 520, 0, 522, 523, 0, 525, 526,
	527, 528, 529, 0, 648, 530, 612, 531, 613, 532,
	533, 534, 535, 536, 537, 538, 540, 0, 2385, 542,
	543, 544, 546, 547, 548, 549, 552, 553, 554, 555,
	556, 0, 557, 559, 561, 639, 616, 617, 618, 619,
	620, 622, 623, 624, 625, 562, 563, 579, 430, 424,
	380, 422, 423, 427, 428, 431, 931, 0, 0, 0,
	2384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 273, 798, 0, 322,
	359, 0, 0, 0, 419, 0, 472, 476, 0, 0,
	0, 0, 0, 0, 330, 0, 803, 2460, 809, 0,
	815, 0, 541, 0, 805, 806, 811, 261, 930, 564,
	635, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 807, 804, 808,
	814, 802, 812, 799, 810, 0, 463, 397, 0, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 0, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 796, 801, 0,
	817, 0, 299, 300, 421, 281, 429, 0, 0, 484,
	442, 440, 0, 407, 464, 0, 0, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	558, 933, 923, 915, 916, 917, 918, 919, 920, 0,
	935, 936, 937, 938, 939, 551, 929, 0, 914, 921,
	922, 924, 2463, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 0, 797, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 0, 0, 0, 800, 0, 0, 0, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	0, 340, 0, 341, 342, 344, 0, 347, 348, 349,
	350, 351, 0, 352, 0, 0, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 0, 0, 387,
	388, 389, 0, 0, 390, 391, 392, 393, 394, 395,
	398, 0, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 0, 0, 415,
	417, 418, 0, 2461, 0, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 0, 446,
	447, 448, 449, 0, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 0, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 0, 498, 2466, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 0, 519, 520, 0,
	522, 523, 816, 525, 526, 527, 528, 529, 0, 648,
	530, 0, 531, 0, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 0, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	562, 563, 2462, 430, 424, 380, 422, 423, 427, 428,
	431, 0, 0, 256, 0, 273, 798, 0, 322, 359,
	0, 0, 0, 419, 0, 472, 476, 0, 0, 0,
	0, 0, 0, 330, 2968, 803, 2460, 809, 0, 815,
	0, 541, 0, 805, 806, 811, 261, 930, 564, 635,
	0, 0, 0, 426, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 0, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 0, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 0, 0, 484, 442,
	440, 0, 407, 464, 0, 0, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 558,
	933, 923, 915, 916, 917, 918, 919, 920, 0, 935,
	936, 937, 938, 939, 551, 929, 0, 914, 921, 922,
	924, 2463, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 0, 797, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	0, 0, 0, 800, 0, 0, 0, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 0,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 0, 0, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 0, 0, 387, 388,
	389, 0, 0, 390, 391, 392, 393, 394, 395, 398,
	0, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 0, 0, 415, 417,
	418, 0, 2461, 0, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 0, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 0, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 0, 498, 2466, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 0, 519, 520, 0, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	0, 531, 0, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 0, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	0, 0, 0, 243, 0, 0, 0, 0, 0, 562,
	563, 2462, 430, 424, 380, 422, 423, 427, 428, 431,
	655, 660, 0, 273, 0, 659, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 2455, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 657, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 3280,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 658, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 655, 660, 0, 273, 0,
	659, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 657, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 663, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 658, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 660, 0, 273, 0, 659, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 657, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 658, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2355, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	709, 2358, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 2362, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 2359, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1536, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 1522, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 1528, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	1529, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 1524, 347, 1525, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	1530, 1531, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 1532, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 1526, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 1527, 483,
	607, 485, 486, 1533, 488, 489, 491, 492, 1523, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 1534, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 1535, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	709, 2358, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 2362, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 2359, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 273, 0, 659, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 657, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 658, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3121, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 3122, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3112, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 3113, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 256, 0, 273, 0,
	0, 322, 837, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	709, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 709, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 4556, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 3552, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 4211, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 4195, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 3564, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 3763,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 2706, 0, 0,
	0, 426, 0, 0, 0, 0, 2709, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 2707, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	2705, 526, 2704, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 2708, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 1325, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 709, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 256, 0, 273, 0,
	0, 322, 1322, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 236, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 963, 265,
	266, 267, 270, 271, 272, 274, 237, 275, 962, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 239, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 240, 480, 481, 482, 483,
	607, 485, 486, 238, 488, 489, 491, 492, 493, 494,
	495, 496, 960, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 232, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 241, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 256, 0, 273, 0,
	0, 322, 840, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 685, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 687, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 686, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	629, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 631, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 630, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	5423, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 3253, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	236, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 237, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 239, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	240, 480, 481, 482, 483, 607, 485, 486, 238, 488,
	489, 491, 492, 493, 494, 495, 496, 960, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 232, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 241, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 3192, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 3100, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 3098, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 3084, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 236, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 237, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 239, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 240, 480, 481, 482, 483,
	607, 485, 486, 238, 488, 489, 491, 492, 493, 494,
	495, 496, 2498, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 2499, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 241, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 2346, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 2287, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 1518, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 1468, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 1245, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 1206, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 1202, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 1196, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 0, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 903, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 899, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 896, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 891, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 872, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 845, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 843, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 824, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 783, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 779, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 777, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 752, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	649, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 607, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 648, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 484, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 650, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 0,
	0, 322, 359, 574, 0, 0, 419, 0, 472, 476,
	0, 565, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 261,
	236, 564, 230, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 463, 397,
	614, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 0,
	0, 0, 0, 0, 299, 300, 421, 281, 429, 626,
	592, 484, 442, 440, 0, 407, 464, 621, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	589, 593, 591, 587, 584, 588, 585, 586, 590, 346,
	583, 0, 558, 567, 601, 581, 609, 566, 606, 576,
	321, 605, 570, 569, 615, 596, 597, 551, 611, 582,
	580, 573, 572, 568, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 0, 265, 266, 267, 270, 271, 272,
	274, 237, 275, 276, 277, 278, 279, 280, 571, 0,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 0, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 575, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 577, 578, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 594,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 595, 400, 401, 402, 403, 404, 405,
	406, 239, 408, 409, 410, 411, 412, 413, 414, 598,
	599, 415, 417, 418, 600, 602, 603, 0, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	604, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	240, 480, 481, 482, 483, 607, 485, 486, 238, 488,
	489, 491, 492, 493, 494, 495, 496, 231, 0, 498,
	608, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 610, 519,
	520, 0, 522, 523, 0, 525, 526, 527, 528, 529,
	0, 232, 530, 612, 531, 613, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 241, 616, 617, 618, 619, 620, 622, 623,
	624, 625, 562, 563, 579, 430, 424, 380, 422, 423,
	427, 428, 431, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 273, 0, 0, 322, 359, 574, 0,
	0, 419, 0, 472, 476, 0, 565, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 261, 649, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 397, 614, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 0, 0, 0, 0, 0, 299,
	300, 421, 281, 429, 626, 592, 0, 442, 440, 0,
	407, 464, 621, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 589, 593, 591, 587, 584,
	588, 585, 586, 590, 346, 583, 0, 558, 567, 601,
	581, 609, 566, 606, 576, 321, 605, 570, 569, 615,
	596, 597, 551, 611, 582, 580, 573, 572, 568, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 0, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 571, 0, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 0, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 575, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 577, 578, 0, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 594, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 595, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 598, 599, 415, 417, 418, 600,
	602, 603, 0, 433, 434, 435, 436, 437, 438, 0,
	441, 0, 443, 444, 445, 604, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 0, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	607, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 608, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 610, 519, 520, 0, 522, 523, 0,
	525, 526, 527, 528, 529, 0, 648, 530, 612, 531,
	613, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 616, 617,
	618, 619, 620, 622, 623, 624, 625, 562, 563, 579,
	430, 424, 380, 422, 423, 427, 428, 431, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 273, 798,
	0, 322, 359, 0, 0, 0, 419, 0, 472, 476,
	0, 0, 0, 0, 0, 0, 330, 0, 803, 2460,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	930, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	0, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 0,
	0, 484, 442, 440, 0, 407, 464, 0, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 558, 933, 923, 915, 916, 917, 918, 919,
	920, 0, 935, 936, 937, 938, 939, 551, 929, 0,
	914, 921, 922, 924, 2463, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 0, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 800, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 0, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 0, 0, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 0,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 0, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 0,
	0, 415, 417, 418, 0, 2461, 0, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	0, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 0, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	2466, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 0, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 0, 531, 0, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 562, 563, 2462, 430, 424, 380, 422, 423,
	427, 428, 431, 256, 0, 273, 798, 0, 322, 359,
	0, 0, 0, 419, 0, 472, 476, 0, 0, 0,
	0, 0, 0, 330, 0, 803, 0, 809, 2488, 815,
	0, 541, 0, 805, 806, 811, 261, 930, 564, 635,
	0, 0, 0, 426, 0, 0, 0, 0, 3595, 0,
	0, 269, 0, 0, 0, 0, 807, 804, 808, 814,
	802, 812, 799, 810, 0, 463, 397, 0, 490, 268,
	314, 301, 343, 385, 497, 0, 0, 375, 545, 310,
	399, 0, 289, 432, 0, 521, 396, 0, 504, 524,
	0, 416, 295, 455, 511, 512, 796, 801, 0, 817,
	0, 299, 300, 421, 281, 429, 0, 0, 484, 442,
	440, 0, 407, 464, 0, 0, 0, 329, 0, 324,
	420, 560, 287, 539, 458, 425, 379, 487, 516, 326,
	311, 312, 355, 457, 345, 297, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 558,
	933, 923, 915, 916, 917, 918, 919, 920, 0, 935,
	936, 937, 938, 939, 551, 929, 0, 914, 921, 922,
	924, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 257, 0, 258, 259, 260, 262, 263, 264,
	795, 265, 266, 267, 270, 271, 272, 274, 634, 275,
	276, 277, 278, 279, 280, 0, 797, 282, 283, 284,
	285, 286, 288, 290, 291, 292, 293, 294, 296, 298,
	0, 0, 0, 800, 0, 0, 0, 302, 303, 304,
	305, 306, 307, 0, 308, 309, 313, 315, 316, 317,
	318, 319, 320, 323, 0, 325, 327, 0, 328, 331,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 0,
	340, 0, 341, 342, 344, 0, 347, 348, 349, 350,
	351, 0, 352, 0, 0, 353, 354, 356, 357, 358,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 374, 376, 0, 377, 378,
	381, 382, 383, 384, 0, 386, 0, 0, 387, 388,
	389, 0, 0, 390, 391, 392, 393, 394, 395, 398,
	0, 400, 401, 402, 403, 404, 405, 406, 636, 408,
	409, 410, 411, 412, 413, 414, 0, 0, 415, 417,
	418, 0, 0, 0, 813, 433, 434, 435, 436, 437,
	438, 439, 441, 0, 443, 444, 445, 0, 446, 447,
	448, 449, 0, 450, 451, 452, 453, 454, 456, 459,
	460, 461, 462, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 474, 475, 477, 478, 479, 637, 480, 481,
	482, 483, 0, 485, 486, 638, 488, 489, 491, 492,
	493, 494, 495, 496, 647, 0, 498, 2466, 499, 500,
	501, 502, 503, 0, 505, 506, 507, 508, 509, 510,
	513, 514, 515, 517, 518, 0, 519, 520, 0, 522,
	523, 816, 525, 526, 527, 528, 529, 0, 648, 530,
	0, 531, 0, 532, 533, 534, 535, 536, 537, 538,
	540, 0, 0, 542, 543, 544, 546, 547, 548, 549,
	552, 553, 554, 555, 556, 0, 557, 559, 561, 639,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 562,
	563, 0, 430, 424, 380, 422, 423, 427, 428, 431,
	256, 0, 273, 798, 0, 322, 359, 0, 0, 0,
	419, 0, 472, 476, 0, 0, 0, 0, 0, 0,
	330, 0, 803, 0, 809, 0, 815, 0, 541, 0,
	805, 806, 811, 261, 930, 564, 635, 0, 0, 0,
	426, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 807, 804, 808, 814, 802, 812, 799,
	810, 0, 463, 397, 0, 490, 268, 314, 301, 343,
	385, 497, 0, 0, 375, 545, 310, 399, 0, 289,
	432, 0, 521, 396, 0, 504, 524, 0, 416, 295,
	455, 511, 512, 796, 801, 0, 817, 0, 299, 300,
	421, 281, 429, 0, 0, 484, 442, 440, 5457, 407,
	464, 0, 0, 0, 329, 0, 324, 420, 560, 287,
	539, 458, 425, 379, 487, 516, 326, 311, 312, 355,
	457, 345, 297, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 0, 558, 933, 923, 915,
	916, 917, 918, 919, 920, 0, 935, 936, 937, 938,
	939, 551, 929, 0, 914, 921, 922, 924, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 257,
	0, 258, 259, 260, 262, 263, 264, 795, 265, 266,
	267, 270, 271, 272, 274, 634, 275, 276, 277, 278,
	279, 280, 0, 797, 282, 283, 284, 285, 286, 288,
	290, 291, 292, 293, 294, 296, 298, 0, 0, 0,
	800, 0, 0, 0, 302, 303, 304, 305, 306, 307,
	0, 308, 309, 313, 315, 316, 317, 318, 319, 320,
	323, 0, 325, 327, 0, 328, 331, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 0, 340, 0, 341,
	342, 344, 0, 347, 348, 349, 350, 351, 0, 352,
	0, 0, 353, 354, 356, 357, 358, 360, 361, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 374, 376, 0, 377, 378, 381, 382, 383,
	384, 0, 386, 0, 0, 387, 388, 389, 0, 0,
	390, 391, 392, 393, 394, 395, 398, 0, 400, 401,
	402, 403, 404, 405, 406, 636, 408, 409, 410, 411,
	412, 413, 414, 0, 0, 415, 417, 418, 0, 0,
	0, 813, 433, 434, 435, 436, 437, 438, 439, 441,
	0, 443, 444, 445, 0, 446, 447, 448, 449, 0,
	450, 451, 452, 453, 454, 456, 459, 460, 461, 462,
	0, 465, 466, 467, 468, 469, 470, 471, 473, 474,
	475, 477, 478, 479, 637, 480, 481, 482, 483, 0,
	485, 486, 638, 488, 489, 491, 492, 493, 494, 495,
	496, 647, 0, 498, 0, 499, 500, 501, 502, 503,
	0, 505, 506, 507, 508, 509, 510, 513, 514, 515,
	517, 518, 0, 519, 520, 0, 522, 523, 816, 525,
	526, 527, 528, 529, 0, 648, 530, 0, 531, 0,
	532, 533, 534, 535, 536, 537, 538, 540, 0, 0,
	542, 543, 544, 546, 547, 548, 549, 552, 553, 554,
	555, 556, 0, 557, 559, 561, 639, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 562, 563, 0, 430,
	424, 380, 422, 423, 427, 428, 431, 256, 0, 273,
	798, 0, 322, 359, 0, 0, 0, 419, 0, 472,
	476, 0, 0, 0, 0, 0, 0, 330, 0, 803,
	0, 809, 0, 815, 0, 541, 0, 805, 806, 811,
	261, 930, 564, 635, 0, 0, 0, 426, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	807, 804, 808, 814, 802, 812, 799, 810, 0, 463,
	397, 0, 490, 268, 314, 301, 343, 385, 497, 0,
	0, 375, 545, 310, 399, 0, 289, 432, 0, 521,
	396, 0, 504, 524, 0, 416, 295, 455, 511, 512,
	796, 801, 0, 817, 0, 299, 300, 421, 281, 429,
	0, 0, 484, 442, 440, 5122, 407, 464, 0, 0,
	0, 329, 0, 324, 420, 560, 287, 539, 458, 425,
	379, 487, 516, 326, 311, 312, 355, 457, 345, 297,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 0, 558, 933, 923, 915, 916, 917, 918,
	919, 920, 0, 935, 936, 937, 938, 939, 551, 929,
	0, 914, 921, 922, 924, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 257, 0, 258, 259,
	260, 262, 263, 264, 795, 265, 266, 267, 270, 271,
	272, 274, 634, 275, 276, 277, 278, 279, 280, 0,
	797, 282, 283, 284, 285, 286, 288, 290, 291, 292,
	293, 294, 296, 298, 0, 0, 0, 800, 0, 0,
	0, 302, 303, 304, 305, 306, 307, 0, 308, 309,
	313, 315, 316, 317, 318, 319, 320, 323, 0, 325,
	327, 0, 328, 331, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 0, 340, 0, 341, 342, 344, 0,
	347, 348, 349, 350, 351, 0, 352, 0, 0, 353,
	354, 356, 357, 358, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 374,
	376, 0, 377, 378, 381, 382, 383, 384, 0, 386,
	0, 0, 387, 388, 389, 0, 0, 390, 391, 392,
	393, 394, 395, 398, 0, 400, 401, 402, 403, 404,
	405, 406, 636, 408, 409, 410, 411, 412, 413, 414,
	0, 0, 415, 417, 418, 0, 0, 0, 813, 433,
	434, 435, 436, 437, 438, 439, 441, 0, 443, 444,
	445, 0, 446, 447, 448, 449, 0, 450, 451, 452,
	453, 454, 456, 459, 460, 461, 462, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 474, 475, 477, 478,
	479, 637, 480, 481, 482, 483, 0, 485, 486, 638,
	488, 489, 491, 492, 493, 494, 495, 496, 647, 0,
	498, 0, 499, 500, 501, 502, 503, 0, 505, 506,
	507, 508, 509, 510, 513, 514, 515, 517, 518, 0,
	519, 520, 0, 522, 523, 816, 525, 526, 527, 528,
	529, 0, 648, 530, 0, 531, 0, 532, 533, 534,
	535, 536, 537, 538, 540, 0, 0, 542, 543, 544,
	546, 547, 548, 549, 552, 553, 554, 555, 556, 0,
	557, 559, 561, 639, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 562, 563, 0, 430, 424, 380, 422,
	423, 427, 428, 431, 256, 0, 273, 798, 0, 322,
	359, 0, 0, 0, 419, 0, 472, 476, 0, 0,
	0, 0, 0, 0, 330, 0, 803, 0, 809, 0,
	815, 0, 541, 0, 805, 806, 811, 261, 930, 564,
	635, 0, 0, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 807, 804, 808,
	814, 802, 812, 799, 810, 0, 463, 397, 0, 490,
	268, 314, 301, 343, 385, 497, 0, 0, 375, 545,
	310, 399, 0, 289, 432, 0, 521, 396, 0, 504,
	524, 0, 416, 295, 455, 511, 512, 796, 801, 0,
	817, 0, 299, 300, 421, 281, 429, 0, 0, 484,
	442, 440, 0, 407, 464, 0, 0, 0, 329, 0,
	324, 420, 560, 287, 539, 458, 425, 379, 487, 516,
	326, 311, 312, 355, 457, 345, 297, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 0,
	558, 933, 923, 915, 916, 917, 918, 919, 920, 0,
	935, 936, 937, 938, 939, 551, 929, 0, 914, 921,
	922, 924, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 257, 0, 258, 259, 260, 262, 263,
	264, 795, 265, 266, 267, 270, 271, 272, 274, 634,
	275, 276, 277, 278, 279, 280, 0, 797, 282, 283,
	284, 285, 286, 288, 290, 291, 292, 293, 294, 296,
	298, 0, 0, 0, 800, 0, 0, 0, 302, 303,
	304, 305, 306, 307, 0, 308, 309, 313, 315, 316,
	317, 318, 319, 320, 323, 0, 325, 327, 0, 328,
	331, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	0, 340, 0, 341, 342, 344, 0, 347, 348, 349,
	350, 351, 0, 352, 0, 0, 353, 354, 356, 357,
	358, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 374, 376, 0, 377,
	378, 381, 382, 383, 384, 0, 386, 0, 0, 387,
	388, 389, 0, 0, 390, 391, 392, 393, 394, 395,
	398, 0, 400, 401, 402, 403, 404, 405, 406, 636,
	408, 409, 410, 411, 412, 413, 414, 4878, 0, 415,
	417, 418, 0, 0, 0, 813, 433, 434, 435, 436,
	437, 438, 439, 441, 0, 443, 444, 445, 0, 446,
	447, 448, 449, 0, 450, 451, 452, 453, 454, 456,
	459, 460, 461, 462, 0, 465, 466, 467, 468, 469,
	470, 471, 473, 474, 475, 477, 478, 479, 637, 480,
	481, 482, 483, 0, 485, 486, 638, 488, 489, 491,
	492, 493, 494, 495, 496, 647, 0, 498, 0, 499,
	500, 501, 502, 503, 0, 505, 506, 507, 508, 509,
	510, 513, 514, 515, 517, 518, 0, 519, 520, 0,
	522, 523, 816, 525, 526, 527, 528, 529, 0, 648,
	530, 0, 531, 0, 532, 533, 534, 535, 536, 537,
	538, 540, 0, 0, 542, 543, 544, 546, 547, 548,
	549, 552, 553, 554, 555, 556, 0, 557, 559, 561,
	639, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	562, 563, 0, 430, 424, 380, 422, 423, 427, 428,
	431, 256, 0, 273, 798, 0, 322, 359, 0, 0,
	0, 419, 0, 472, 476, 0, 0, 0, 0, 0,
	0, 330, 0, 803, 0, 809, 0, 815, 0, 541,
	0, 805, 806, 811, 261, 930, 564, 635, 0, 0,
	0, 426, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 807, 804, 808, 814, 802, 812,
	799, 810, 0, 463, 397, 0, 490, 268, 314, 301,
	343, 385, 497, 0, 0, 375, 545, 310, 399, 0,
	289, 432, 0, 521, 396, 0, 504, 524, 0, 416,
	295, 455, 511, 512, 796, 801, 0, 817, 0, 299,
	300, 421, 281, 429, 0, 0, 484, 442, 440, 0,
	407, 464, 0, 0, 0, 329, 0, 324, 420, 560,
	287, 539, 458, 425, 379, 487, 516, 326, 311, 312,
	355, 457, 345, 297, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 558, 933, 923,
	915, 916, 917, 918, 919, 920, 0, 935, 936, 937,
	938, 939, 551, 929, 0, 914, 921, 922, 924, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	257, 0, 258, 259, 260, 262, 263, 264, 795, 265,
	266, 267, 270, 271, 272, 274, 634, 275, 276, 277,
	278, 279, 280, 0, 797, 282, 283, 284, 285, 286,
	288, 290, 291, 292, 293, 294, 296, 298, 0, 0,
	0, 800, 0, 0, 0, 302, 303, 304, 305, 306,
	307, 0, 308, 309, 313, 315, 316, 317, 318, 319,
	320, 323, 0, 325, 327, 0, 328, 331, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 0, 340, 0,
	341, 342, 344, 0, 347, 348, 349, 350, 351, 0,
	352, 0, 0, 353, 354, 356, 357, 358, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 374, 376, 0, 377, 378, 381, 382,
	383, 384, 0, 386, 0, 0, 387, 388, 389, 0,
	0, 390, 391, 392, 393, 394, 395, 398, 0, 400,
	401, 402, 403, 404, 405, 406, 636, 408, 409, 410,
	411, 412, 413, 414, 0, 0, 415, 417, 418, 0,
	0, 0, 813, 433, 434, 435, 436, 437, 438, 439,
	441, 0, 443, 444, 445, 0, 446, 447, 448, 449,
	0, 450, 451, 452, 453, 454, 456, 459, 460, 461,
	462, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	474, 475, 477, 478, 479, 637, 480, 481, 482, 483,
	0, 485, 486, 638, 488, 489, 491, 492, 493, 494,
	495, 496, 647, 0, 498, 2466, 499, 500, 501, 502,
	503, 0, 505, 506, 507, 508, 509, 510, 513, 514,
	515, 517, 518, 0, 519, 520, 0, 522, 523, 816,
	525, 526, 527, 528, 529, 0, 648, 530, 0, 531,
	0, 532, 533, 534, 535, 536, 537, 538, 540, 0,
	0, 542, 543, 544, 546, 547, 548, 549, 552, 553,
	554, 555, 556, 0, 557, 559, 561, 639, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 562, 563, 0,
	430, 424, 380, 422, 423, 427, 428, 431, 256, 0,
	273, 798, 0, 322, 359, 0, 0, 0, 419, 0,
	472, 476, 0, 0, 0, 0, 0, 0, 330, 0,
	803, 0, 809, 0, 815, 0, 541, 0, 805, 806,
	811, 261, 930, 564, 635, 0, 0, 0, 426, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 807, 804, 808, 814, 802, 812, 799, 810, 0,
	463, 397, 0, 490, 268, 314, 301, 343, 385, 497,
	0, 0, 375, 545, 310, 399, 0, 289, 432, 0,
	521, 396, 0, 504, 524, 0, 416, 295, 455, 511,
	512, 796, 801, 0, 817, 0, 299, 300, 421, 281,
	429, 0, 0, 484, 442, 440, 0, 407, 464, 0,
	0, 0, 329, 0, 324, 420, 560, 287, 539, 458,
	425, 379, 487, 516, 326, 311, 312, 355, 457, 345,
	297, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 558, 933, 923, 915, 916, 917,
	918, 919, 920, 0, 935, 936, 937, 938, 939, 551,
	929, 0, 914, 921, 922, 924, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 257, 0, 258,
	259, 260, 262, 263, 264, 795, 265, 266, 267, 270,
	271, 272, 274, 634, 275, 276, 277, 278, 279, 280,
	0, 797, 282, 283, 284, 285, 286, 288, 290, 291,
	292, 293, 294, 296, 298, 0, 0, 0, 800, 0,
	0, 0, 302, 303, 304, 305, 306, 307, 0, 308,
	309, 313, 315, 316, 317, 318, 319, 320, 323, 0,
	325, 327, 0, 328, 331, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 0, 340, 0, 341, 342, 344,
	0, 347, 348, 349, 350, 351, 0, 352, 0, 0,
	353, 354, 356, 357, 358, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	374, 376, 0, 377, 378, 381, 382, 383, 384, 0,
	386, 0, 0, 387, 388, 389, 0, 0, 390, 391,
	392, 393, 394, 395, 398, 0, 400, 401, 402, 403,
	404, 405, 406, 636, 408, 409, 410, 411, 412, 413,
	414, 4326, 0, 415, 417, 418, 0, 0, 0, 813,
	433, 434, 435, 436, 437, 438, 439, 441, 0, 443,
	444, 445, 0, 446, 447, 448, 449, 0, 450, 451,
	452, 453, 454, 456, 459, 460, 461, 462, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 474, 475, 477,
	478, 479, 637, 480, 481, 482, 483, 0, 485, 486,
	638, 488, 489, 491, 492, 493, 494, 495, 496, 647,
	0, 498, 0, 499, 500, 501, 502, 503, 0, 505,
	506, 507, 508, 509, 510, 513, 514, 515, 517, 518,
	0, 519, 520, 0, 522, 523, 816, 525, 526, 527,
	528, 529, 0, 648, 530, 0, 531, 0, 532, 533,
	534, 535, 536, 537, 538, 540, 0, 0, 542, 543,
	544, 546, 547, 548, 549, 552, 553, 554, 555, 556,
	0, 557, 559, 561, 639, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 562, 563, 0, 430, 424, 380,
	422, 423, 427, 428, 431, 256, 0, 273, 798, 0,
	322, 359, 0, 0, 0, 419, 0, 472, 476, 0,
	0, 0, 0, 0, 0, 330, 0, 803, 0, 809,
	0, 815, 0, 541, 0, 805, 806, 811, 261, 930,
	564, 635, 0, 0, 0, 426, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 807, 804,
	808, 814, 802, 812, 799, 810, 0, 463, 397, 0,
	490, 268, 314, 301, 343, 385, 497, 0, 0, 375,
	545, 310, 399, 0, 289, 432, 0, 521, 396, 0,
	504, 524, 0, 416, 295, 455, 511, 512, 796, 801,
	0, 817, 0, 299, 300, 421, 281, 429, 0, 0,
	484, 442, 440, 0, 407, 464, 0, 0, 0, 329,
	0, 324, 420, 560, 287, 539, 458, 425, 379, 487,
	516, 326, 311, 312, 355, 457, 345, 297, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	0, 558, 933, 923, 915, 916, 917, 918, 919, 920,
	0, 935, 936, 937, 938, 939, 551, 929, 0, 914,
	921, 922, 924, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 257, 0, 258, 259, 260, 262,
	263, 264, 795, 265, 266, 267, 270, 271, 272, 274,
	634, 275, 276, 277, 278, 279, 280, 0, 797, 282,
	283, 284, 285, 286, 288, 290, 291, 292, 293, 294,
	296, 298, 0, 0, 0, 800, 0, 0, 0, 302,
	303, 304, 305, 306, 307, 0, 308, 309, 313, 315,
	316, 317, 318, 319, 320, 323, 0, 325, 327, 0,
	328, 331, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 0, 340, 0, 341, 342, 344, 0, 347, 348,
	349, 350, 351, 0, 352, 0, 0, 353, 354, 356,
	357, 358, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 374, 376, 0,
	377, 378, 381, 382, 383, 384, 0, 386, 0, 0,
	387, 388, 389, 0, 0, 390, 391, 392, 393, 394,
	395, 398, 0, 400, 401, 402, 403, 404, 405, 406,
	636, 408, 409, 410, 411, 412, 413, 414, 0, 0,
	415, 417, 418, 0, 0, 0, 813, 433, 434, 435,
	436, 437, 438, 439, 441, 0, 443, 444, 445, 0,
	446, 447, 448, 449, 0, 450, 451, 452, 453, 454,
	456, 459, 460, 461, 462, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 474, 475, 477, 478, 479, 637,
	480, 481, 482, 483, 0, 485, 486, 638, 488, 489,
	491, 492, 493, 494, 495, 496, 647, 0, 498, 0,
	499, 500, 501, 502, 503, 0, 505, 506, 507, 508,
	509, 510, 513, 514, 515, 517, 518, 0, 519, 520,
	0, 522, 523, 816, 525, 526, 527, 528, 529, 0,
	648, 530, 0, 531, 0, 532, 533, 534, 535, 536,
	537, 538, 540, 0, 0, 542, 543, 544, 546, 547,
	548, 549, 552, 553, 554, 555, 556, 0, 557, 559,
	561, 639, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 562, 563, 0, 430, 424, 380, 422, 423, 427,
	428, 431, 256, 0, 273, 798, 0, 322, 941, 0,
	0, 0, 419, 0, 472, 476, 0, 0, 0, 0,
	0, 0, 330, 0, 803, 0, 809, 0, 815, 0,
	541, 0, 805, 806, 811, 261, 930, 564, 635, 0,
	0, 0, 426, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 807, 804, 808, 814, 802,
	812, 799, 810, 0, 463, 397, 0, 490, 268, 314,
	301, 343, 385, 497, 0, 0, 375, 545, 310, 399,
	0, 289, 432, 0, 521, 396, 0, 504, 524, 0,
	416, 295, 455, 511, 512, 796, 801, 0, 817, 0,
	299, 300, 421, 281, 429, 0, 0, 484, 442, 440,
	0, 407, 464, 0, 0, 0, 329, 0, 324, 420,
	560, 287, 539, 458, 425, 379, 487, 516, 326, 311,
	312, 355, 457, 345, 297, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 0, 558, 933,
	923, 915, 916, 917, 918, 919, 920, 0, 935, 936,
	937, 938, 939, 551, 929, 0, 914, 921, 922, 924,
	0, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 257, 0, 258, 259, 260, 262, 263, 264, 795,
	265, 266, 267, 270, 271, 272, 274, 634, 275, 276,
	277, 278, 279, 280, 0, 797, 282, 283, 284, 285,
	286, 288, 290, 291, 292, 293, 294, 296, 298, 0,
	0, 0, 800, 0, 0, 0, 302, 303, 304, 305,
	306, 307, 0, 308, 309, 313, 315, 316, 317, 318,
	319, 320, 323, 0, 325, 327, 0, 328, 331, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 0, 340,
	0, 341, 342, 344, 0, 347, 348, 349, 350, 351,
	0, 352, 0, 0, 353, 354, 356, 357, 358, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 374, 376, 0, 377, 378, 381,
	382, 383, 384, 0, 386, 0, 0, 387, 388, 389,
	0, 0, 390, 391, 392, 393, 394, 395, 398, 0,
	400, 401, 402, 403, 404, 405, 406, 636, 408, 409,
	410, 411, 412, 413, 414, 0, 0, 415, 417, 418,
	0, 0, 0, 813, 433, 434, 435, 436, 437, 438,
	439, 441, 0, 443, 444, 445, 0, 446, 447, 448,
	449, 0, 450, 451, 452, 453, 454, 456, 459, 460,
	461, 462, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 474, 475, 477, 478, 479, 637, 480, 481, 482,
	483, 0, 485, 486, 638, 488, 489, 491, 492, 493,
	494, 495, 496, 647, 0, 498, 0, 499, 500, 501,
	502, 503, 0, 505, 506, 507, 508, 509, 510, 513,
	514, 515, 517, 518, 0, 519, 520, 0, 522, 523,
	816, 525, 526, 527, 528, 529, 0, 648, 530, 0,
	531, 0, 532, 533, 534, 535, 536, 537, 538, 540,
	0, 0, 542, 543, 544, 546, 547, 548, 549, 552,
	553, 554, 555, 556, 0, 557, 559, 561, 639, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 562, 563,
	0, 430, 424, 380, 422, 423, 427, 428, 431, 256,
	0, 273, 798, 0, 322, 905, 0, 0, 0, 419,
	0, 472, 476, 0, 0, 0, 0, 0, 0, 330,
	0, 803, 0, 809, 0, 815, 0, 541, 0, 805,
	806, 811, 261, 930, 564, 635, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 807, 804, 808, 814, 802, 812, 799, 810,
	0, 463, 397, 0, 490, 268, 314, 301, 343, 385,
	497, 0, 0, 375, 545, 310, 399, 0, 289, 432,
	0, 521, 396, 0, 504, 524, 0, 416, 295, 455,
	511, 512, 796, 801, 0, 817, 0, 299, 300, 421,
	281, 429, 0, 0, 484, 442, 440, 0, 407, 464,
	0, 0, 0, 329, 0, 324, 420, 560, 287, 539,
	458, 425, 379, 487, 516, 326, 311, 312, 355, 457,
	345, 297, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 0, 558, 933, 923, 915, 916,
	917, 918, 919, 920, 0, 935, 936, 937, 938, 939,
	551, 929, 0, 914, 921, 922, 924, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 257, 0,
	258, 259, 260, 262, 263, 264, 795, 265, 266, 267,
	270, 271, 272, 274, 634, 275, 276, 277, 278, 279,
	280, 0, 797, 282, 283, 284, 285, 286, 288, 290,
	291, 292, 293, 294, 296, 298, 0, 0, 0, 800,
	0, 0, 0, 302, 303, 304, 305, 306, 307, 0,
	308, 309, 313, 315, 316, 317, 318, 319, 320, 323,
	0, 325, 327, 0, 328, 331, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 0, 340, 0, 341, 342,
	344, 0, 347, 348, 349, 350, 351, 0, 352, 0,
	0, 353, 354, 356, 357, 358, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 374, 376, 0, 377, 378, 381, 382, 383, 384,
	0, 386, 0, 0, 387, 388, 389, 0, 0, 390,
	391, 392, 393, 394, 395, 398, 0, 400, 401, 402,
	403, 404, 405, 406, 636, 408, 409, 410, 411, 412,
	413, 414, 0, 0, 415, 417, 418, 0, 0, 0,
	813, 433, 434, 435, 436, 437, 438, 439, 441, 0,
	443, 444, 445, 0, 446, 447, 448, 449, 0, 450,
	451, 452, 453, 454, 456, 459, 460, 461, 462, 0,
	465, 466, 467, 468, 469, 470, 471, 473, 474, 475,
	477, 478, 479, 637, 480, 481, 482, 483, 0, 485,
	486, 638, 488, 489, 491, 492, 493, 494, 495, 496,
	647, 0, 498, 0, 499, 500, 501, 502, 503, 0,
	505, 506, 507, 508, 509, 510, 513, 514, 515, 517,
	518, 0, 519, 520, 0, 522, 523, 816, 525, 526,
	527, 528, 529, 0, 648, 530, 0, 531, 0, 532,
	533, 534, 535, 536, 537, 538, 540, 0, 0, 542,
	543, 544, 546, 547, 548, 549, 552, 553, 554, 555,
	556, 0, 557, 559, 561, 639, 0, 0, 931, 0,
	0, 0, 0, 0, 0, 562, 563, 0, 430, 424,
	380, 422, 423, 427, 428, 431, 256, 0, 273, 798,
	0, 322, 359, 0, 0, 0, 419, 0, 472, 476,
	0, 0, 0, 0, 0, 0, 330, 0, 803, 0,
	809, 0, 815, 0, 541, 0, 805, 806, 811, 261,
	0, 564, 635, 0, 0, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 807,
	804, 808, 814, 802, 812, 799, 810, 0, 463, 397,
	0, 490, 268, 314, 301, 343, 385, 497, 0, 0,
	375, 545, 310, 399, 0, 289, 432, 0, 521, 396,
	0, 504, 524, 0, 416, 295, 455, 511, 512, 796,
	801, 0, 817, 0, 299, 300, 421, 281, 429, 0,
	0, 484, 442, 440, 0, 407, 464, 0, 0, 0,
	329, 0, 324, 420, 560, 287, 539, 458, 425, 379,
	487, 516, 326, 311, 312, 355, 457, 345, 297, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	321, 0, 0, 0, 0, 0, 0, 551, 0, 0,
	0, 0, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 257, 0, 258, 259, 260,
	262, 263, 264, 795, 265, 266, 267, 270, 271, 272,
	274, 634, 275, 276, 277, 278, 279, 280, 0, 797,
	282, 283, 284, 285, 286, 288, 290, 291, 292, 293,
	294, 296, 298, 0, 0, 0, 800, 0, 0, 0,
	302, 303, 304, 305, 306, 307, 0, 308, 309, 313,
	315, 316, 317, 318, 319, 320, 323, 0, 325, 327,
	0, 328, 331, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 0, 340, 0, 341, 342, 344, 0, 347,
	348, 349, 350, 351, 0, 352, 0, 0, 353, 354,
	356, 357, 358, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 374, 376,
	0, 377, 378, 381, 382, 383, 384, 0, 386, 0,
	0, 387, 388, 389, 0, 0, 390, 391, 392, 393,
	394, 395, 398, 0, 400, 401, 402, 403, 404, 405,
	406, 636, 408, 409, 410, 411, 412, 413, 414, 0,
	0, 415, 417, 418, 0, 0, 0, 813, 433, 434,
	435, 436, 437, 438, 439, 441, 0, 443, 444, 445,
	0, 446, 447, 448, 449, 0, 450, 451, 452, 453,
	454, 456, 459, 460, 461, 462, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 474, 475, 477, 478, 479,
	637, 480, 481, 482, 483, 0, 485, 486, 638, 488,
	489, 491, 492, 493, 494, 495, 496, 647, 0, 498,
	0, 499, 500, 501, 502, 503, 0, 505, 506, 507,
	508, 509, 510, 513, 514, 515, 517, 518, 0, 519,
	520, 0, 522, 523, 816, 525, 526, 527, 528, 529,
	0, 648, 530, 0, 531, 0, 532, 533, 534, 535,
	536, 537, 538, 540, 0, 0, 542, 543, 544, 546,
	547, 548, 549, 552, 553, 554, 555, 556, 0, 557,
	559, 561, 639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 0, 430, 424, 380, 422, 423,
	427, 428, 431,
}

var yyPact = [...]int32{
	15478, -1000, 350, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1404, 1404, -1000, -1000, 3253, 834, 13770,
	15896, 13740, 3304, 91014, 74854, 1404, 1520, 1487, 1478, 75864,
	90509, 1517, 63239, 62734, 1806, 1211, 949, 74349, -1000, 1519,
	1086, 1180, -1000, -1000, 3914, 67279, 346, 90004, 75864, 1171,
	15478, 3990, -1000, -1000, 2329, 3448, 67279, 3567, 3447, 1180,
	75864, -1000, 1820, 2353, 2165, 3942, 89499, 75864, 45093, 75864,
	3277, 88994, 88489, 2762, 87984, 54704, 3303, 1505, 75864, 75864,
	2232, 87479, 75864, 75864, 1178, 2602, 52178, 52178, -1000, -1000,
	1588, 1573, -1000, -1000, -1000, 66774, 73844, 86974, 86469, 1402,
	2732, 2124, 58239, 75864, 75864, 75864, 75864, 58239, 52178, 2299,
	2543, 85964, 58239, 75864, 58239, 75864, 75864, 75864, 75864, 75864,
	1503, 51673, 51168, 75864, 85459, 3276, 75864, 75864, 1987, -1000,
	84954, 84449, 83944, 96407, 95920, 4095, 54199, 53694, 53189, -1000,
	-1000, -1000, 1401, 2717, -1000, -1000, -1000, 3271, 2226, 1500,
	-1000, 2297, -1000, -1000, -1000, -1000, -1000, -1000, 1397, -1000,
	76874, 73339, 2101, -1000, -1000, 862, 3765, 4161, 4161, 3932,
	56724, 1321, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3761,
	2317, 2667, 434, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3990, 2329, 3990, 4161, 3603, 4161, -1000, -1000, -1000, -1000,
	75864, -1000, 4161, 3443, 544, 928, -1000, 770, 770, 770,
	3151, 770, 3442, 1319, 555, 782, -1000, 3068, 1817, 42496,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1429, 3088, 46116,
	-1000, 75864, 46116, -1000, 434, 3759, 2314, 2659, -1000, -1000,
	2722, 3912, 3912, 3912, 3501, 1519, -1000, -1000, 754, 742,
	1086, 24050, 24050, -1000, 3440, -1000, 379, -1000, 400, 57734,
	1176, 338, 75864, -1000, 985, -1000, 338, 29192, -1000, -1000,
	2270, -1000, 412, -1000, 2279, 1788, -1000, 2529, 75864, 3250,
	83439, 67279, 67279, 740, -1000, 770, 82934, 75864, 1390, 82429,
	4094, 58239, 58239, 75864, 1499, 58239, 2995, 1983, -1000, 1874,
	2654, -1000, 3984, 4102, 422, 1034, 75864, 75864, -1000, 427,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1258, 2079, 1203, 3982, 1697, 3981,
	2865, 81924, 1489, 3979, 3033, 1697, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1387, 75864,
	2060, 3439, 75864, 985, 3976, -1000, 2984, 2608, 95433, 75864,
	1697, 1697, -1000, -1000, -1000, -1000, 12080, 4080, 3880, 6785,
	4073, 3878, 15765, 4070, 15356, 4068, 72834, 72329, 2857, 75864,
	71824, 1913, 1175, -1000, 400, -1000, -1000, -1000, 1910, 1907,
	1906, 1909, 12490, 1175, -1000, 400, 1903, 2870, 75864, 75864,
	75864, 3438, 4064, 12425, 2302, 8362, 1900, 1400, 2616, 3437,
	3432, 75864, 1899, 1712, 3876, 1881, 2981, 1712, 3876, 2099,
	2083, 4063, 1886, 2341, 2864, -1000, 4062, 416, -1000, 4059,
	420, -1000, 3428, 4058, 418, 4056, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 409, -1000, -1000, -1000, -1000, -1000, 1070,
	2725, 1068, 1068, 1068, -1000, -1000, -1000, -1000, -1000, 497,
	513, -1000, -1000, 2704, 1173, 2704, 2704, -1000, 2730, 2704,
	418, 4055, 81419, 3009, 151, 4054, -1000, 151, 4053, 151,
	4051, -1000, 2856, -1000, 1774, -1000, -1000, -1000, 4094, -1000,
	2640, -1000, 4125, 55209, 412, 4161, 3060, 41468, 40954, 75864,
	1679, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2564, -1000, 2277, -1000, -1000, -1000, -1000, -1000, -1000, 80914,
	-1000, -1000, -1000, 64249, 52178, 65259, 1172, 75864, -1000, 75864,
	-1000, -1000, -1000, -1000, 64249, 2979, 52178, 2977, 1817, -1000,
	331, -1000, 41982, 1171, -1000, -1000, -1000, -1000, 3068, -1000,
	326, -1000, 340, -1000, 985, 325, -1000, 2276, -1000, 2684,
	2956, 2973, 1729, 3474, 2697, -1000, 28678, 2396, 33304, 3057,
	1086, -1000, -1000, 1086, 1086, 29192, -1000, 2722, -1000, -1000,
	3445, 193, -1000, 18335, -1000, -1000, 29192, 29192, 29192, 29192,
	29192, 2065, 3947, -1000, -1000, -1000, -1000, 23021, -1000, -1000,
	400, 1053, 729, -1000, -1000, 1169, -1000, 969, 1168, 400,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1156, 4161,
	1125, 29192, 1360, 2463, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1166, 1165, 2969, -1000, 1158, 1153, 1150, 1149,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1148, 1146, 1133,
	1119, 1117, 1116, 1112, 1111, 1109, 1108, 1106, 1105, 1102,
	1101, 1099, 1098, 1097, 1096, 1092, 1091, 1090, 987, 1088,
	1087, 1080, 1079, 1077, 1073, 1072, -1000, 2704, -1000, 2704,
	2704, 1068, 1068, 1070, -1000, -1000, 2730, 2704, 1068, -1000,
	-1000, 513, 497, -1000, -1000, -1000, -1000, -1000, 454, 1067,
	-1000, 400, -1000, 17519, 29192, -1000, 75864, 29192, 75864, 338,
	4132, 75864, 324, 15315, -1000, 2635, 2329, -1000, 1745, -1000,
	-1000, -1000, 1615, 4129, 55714, -1000, 75864, 3348, 3345, 3738,
	3553, 889, 3973, 770, 75864, 3945, 3971, 80409, -1000, 1065,
	1065, 2440, 75864, 1064, 95433, 2296, 1784, -1000, 52178, 4091,
	4050, 95433, -1000, 404, 19382, -1000, 19382, 3900, 3343, 43506,
	-1000, 681, 75864, 75864, 75864, 75864, -1000, 75864, 4047, -1000,
	-1000, -1000, 4041, 75864, 936, 3956, 1409, 4161, 4040, 50158,
	3955, -1000, 79904, 3426, 2248, 52178, 75864, 1491, 3424, 4037,
	-1000, 63744, 1034, 4161, 4128, 2966, -1000, -1000, 198, -1000,
	1698, -1000, 2051, 2050, 59737, 1644, 1637, 3086, 1134, 3423,
	1989, 1546, 75864, 2512, 75864, 3055, 3730, 827, 2373, 1761,
	-1000, 1063, 67279, 1591, 198, -1000, 3723, 2041, 75864, 1586,
	198, 3721, 3945, -1000, 2522, 95433, 910, -1000, 3500, -1000,
	910, 910, 3499, 2180, 1697, 1697, -1000, 75864, 198, 1726,
	75864, 14057, 4035, 3875, 11030, 4034, 75864, -1000, 901, -1000,
	3719, -1000, 61741, 400, 3717, 3714, 3713, 3139, -1000, 3150,
	3901, 1755, 3077, 3712, 9457, -1000, 3422, 3853, -1000, -1000,
	-1000, -1000, 1718, 2377, -1000, 2286, 910, 910, 75864, -1000,
	75864, 79399, -1000, -1000, 400, 3709, 3132, -1000, -1000, 1871,
	3342, 3339, 75864, 75864, 3706, 9457, 3701, 50663, 64754, 64754,
	3700, 9457, 3698, 3695, 1303, -1000, 3860, 3694, 878, 4161,
	1975, 1974, 1971, -1000, -1000, 1034, 75864, 75864, 2088, 3693,
	-1000, 2110, 2536, 2110, 3692, 50158, -1000, 2110, 2110, 3690,
	827, 827, 3688, 1611, 75864, 75864, 75864, 75864, 75864, 2814,
	2710, 2707, 1061, 337, -1000, 2673, -1000, 15696, 2283, 75864,
	75864, -1000, -1000, -1000, 75864, 75864, -1000, 75864, 75864, 95433,
	-1000, 95433, -1000, 413, 29192, -1000, 4148, -1000, -1000, -1000,
	-1000, 4148, -1000, 3768, 3691, 4148, -1000, 1055, -1000, 4148,
	-1000, -1000, 2704, 2704, -1000, -1000, 95433, 416, 4033, 50158,
	4032, 52178, 52178, 52178, 52178, -1000, -1000, -1000, -1000, -1000,
	75864, 4125, 1515, -1000, -1000, -1000, -1000, 335, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4175, 4151, -1000,
	-1000, 335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 75864, -1000,
	3687, 298, 75864, 75864, 1852, 58239, 58239, 58239, 75864, 75864,
	75864, 2867, 75864, 75864, 75864, 75864, 2046, -1000, 411, -1000,
	75864, 321, -1000, 313, 3566, 63239, 215, 65259, -1000, 1817,
	46116, -1000, -1000, -1000, 3056, 75864, 75864, -1000, 75864, -1000,
	-1000, -1000, -1000, -1000, -1000, 1762, 3509, -1000, 1336, -1000,
	1640, -1000, -1000, 332, 15315, -1000, 34846, -1000, -1000, -1000,
	1999, 15315, -1000, 32790, 32790, 1701, 75864, 2323, -1000, 2323,
	154, -1000, 2018, 2684, 2956, 3565, 71319, 24050, 95433, 75864,
	3745, 29192, 29192, 29192, 29192, 29192, 29192, 29192, 29192, 29192,
	29192, 29192, 29192, 29192, 29192, 29192, 29192, 3820, 29192, 3678,
	2939, -1000, -1000, 3686, 1027, 1756, 19382, -1000, -1000, 1041,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 545, 545, 503, 11628, 11628, 850,
	1053, 3895, 400, 15112, 323, 392, 400, -1000, -1000, -1000,
	24565, 29192, 43506, 28163, 400, -1000, 21476, -1000, 1608, 4148,
	3780, 15315, 2463, 3454, 1287, 1048, 29192, 29192, 1047, 4148,
	4148, 4148, 4148, 29192, 2192, 29192, 29192, 34332, 29192, 29192,
	23536, 29192, 29192, 29192, 29192, 29192, 2177, 29192, 2564, 35874,
	2161, 29192, 27649, 22506, 29192, 29192, 29192, 724, 29192, 29192,
	29192, 2564, 3565, 29192, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15047, -62, 723, 308, -1000, 3344, 305, 29192, -1000,
	75864, 3745, 29192, 29192, 29192, 29192, 3678, 2939, 3686, 1027,
	1041, -1000, -1000, -1000, 1689, 1953, -1000, 3420, -1000, 3154,
	48643, 3288, 75864, 553, -1000, 1197, 75864, -1000, -1000, 3526,
	38424, 38424, 3093, 3093, -1000, -1000, 60242, 75864, 3051, 4031,
	3920, 1040, -1000, 3945, 2495, 4029, 3417, 3954, -1000, 15925,
	61252, 9580, 1823, -1000, -1000, 3045, 2688, 1034, -1000, 59249,
	2295, 75864, 75864, 1385, -1000, -1000, -1000, -1000, -1000, -1000,
	1898, 75864, -1000, 19382, -1000, 303, -1000, 1196, 2950, 75864,
	-1000, 75864, 1035, 1034, 1034, 1034, 1034, 1034, -1000, 75864,
	1862, 75864, 1583, 60242, 3039, 4025, 2457, -1000, -1000, 75864,
	1700, -1000, -1000, 4022, 3053, 4122, 3953, 770, 19382, 4181,
	-1000, 4121, 2583, 39939, 75864, 1594, 473, -1000, 67279, 3869,
	403, 770, -1000, 379, -1000, 1956, 95433, 4161, 3053, 3053,
	6720, 75864, 75864, 75864, -1000, 75864, 75864, -1000, 3952, 78894,
	-1000, 95433, 75864, -1000, 1032, 3358, 1335, 1328, 3322, 70814,
	75864, 78389, 77884, 75864, 1605, -1000, -1000, 2223, 75864, -1000,
	19382, 75864, 66269, 1549, 1511, 75864, 2273, 65764, 75864, 2267,
	-1000, 75864, 1754, -1000, -1000, 52178, -1000, 3185, 2266, 19893,
	6748, 75864, 75864, 75864, 10589, 75864, 75864, -1000, -1000, -1000,
	-1000, -1000, -1000, 910, -1000, -1000, -1000, 75864, 75864, 910,
	910, 15257, 75864, 75864, 10170, 198, 1723, 75864, 1585, 198,
	1717, 67279, 1616, 75864, 297, -1000, -1000, 94459, 92024, -1000,
	2085, -1000, -1000, -1000, 409, -1000, 96894, 75864, 75864, 75864,
	75864, 75864, -1000, 3850, 77379, 29192, 3838, -1000, 75864, -1000,
	1031, 3836, 75864, 75864, -1000, -1000, -1000, 3835, 3409, 2376,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2648, 1619,
	52178, 52178, 3672, 75864, 75864, 2123, 3405, 75864, -1000, 75864,
	-1000, 320, 320, 320, 75864, -1000, 75864, 75864, -1000, -1000,
	-1000, 75864, -1000, 75864, -1000, 3923, 75864, 75864, -1000, 1855,
	1821, 3668, -1000, 1939, -1000, 52178, 2282, -1000, 76874, -1000,
	75864, -1000, 52178, 1693, 2282, -1000, -1000, 75864, -1000, -1000,
	75864, 898, 3248, 1804, 1796, 1795, 1793, 75864, 75864, 4161,
	4084, 75864, 4161, 76369, 19382, 2862, 75864, 3665, 75864, 75864,
	58239, 1029, 95433, 58239, 44564, 58239, 58239, 2949, 95433, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 63239, 62229, 1747,
	2068, 416, -1000, 420, -1000, 3940, 3403, -1000, 418, -1000,
	287, 722, 720, 3755, 3753, 717, 29192, 714, -1000, -1000,
	418, -1000, 75864, 1686, 2948, -1000, 151, 151, 151, 3927,
	2329, 41982, -1000, -1000, -1000, -1000, -1000, 49653, 75864, 298,
	298, 2844, 75864, 319, -1000, 319, 319, 181, 301, 181,
	910, 302, 417, -1000, 181, 181, 301, 3867, 3865, 3864,
	3861, 3859, -1000, 19382, 3498, 280, 75864, -1000, -1000, 49653,
	3402, 300, 3940, 535, -1000, -1000, 75864, -1000, -1000, -1000,
	-1000, -1000, 3215, -1000, 29192, 1999, 3545, -1000, 4178, 4178,
	1018, -1000, 23021, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2250, 298, 29192, 797, 1212, -1000, -1000, -1000,
	-1000, 3514, 38424, -1000, 3507, 3507, 1560, 1559, 3507, 75864,
	-1000, -1000, -1000, -1000, 3752, -1000, 295, 295, 370, 370,
	370, -1000, 587, 587, 587, 587, 587, 587, 503, 11628,
	9151, 1779, 29192, 29192, 3653, 3660, 1027, 1757, 29192, -1000,
	3318, -1000, -1000, -1000, 3564, -1000, -1000, 2100, 2899, -1000,
	-1000, -1000, -1000, 2958, 34332, 34332, -1000, -1000, -1000, 23021,
	1024, -1000, -1000, -1000, -1000, 43506, -1000, 1022, 29192, -1000,
	-1000, 3887, -1000, -1000, 29192, 168, 129, -1000, -1000, 277,
	710, 272, -1000, -1, -1000, 709, 29192, 29192, 29192, -1000,
	15315, 4149, -1000, -1000, 3650, -1000, 3649, 3636, 3635, -1000,
	1021, 708, 2724, -1000, 29192, 1287, 1020, -1000, 57229, 3527,
	2858, 2785, 1459, 1285, 14732, 29192, 707, 705, 700, 699,
	14682, 696, 3563, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5701, 689, 686, 14445, 284, 682, 5337, -1000, 34332,
	34332, 34332, 1018, 679, 675, 6148, 13244, 27135, 27135, 27135,
	674, 13175, 29192, 99, 5929, 265, 259, 254, 249, 19382,
	247, -1000, 12540, 29192, 2961, 19382, 2190, 239, 398, 666,
	-1000, 95433, 1459, 394, 1237, 664, -1000, 400, 2899, 13085,
	3165, -1000, 281, 264, 261, 29192, 3514, 235, -1000, 29192,
	-1000, -1000, 1016, -1000, 3295, -1000, 15315, -1000, -1000, -1000,
	3175, 3159, 2784, -1000, -1000, 234, -1000, -1000, -1000, -1000,
	3526, 55714, 29192, 233, -1000, 400, 3175, 32276, 74, 3473,
	68289, 68289, 40444, -1000, 37399, 69804, 68289, 68289, 1213, 3560,
	1011, 1001, 400, -1000, -1000, -1000, 989, 987, 3948, 3212,
	-1000, 3212, 662, 258, -1000, -1000, -1000, -1000, 75864, 833,
	75864, 75864, 4120, 827, 75864, 75864, 67279, 4021, 92511, 1923,
	9580, -1000, 4161, 56724, 2945, -1000, -1000, 232, -1000, -1000,
	1670, 1923, 3415, -1000, -1000, -1000, 3038, -1000, -1000, 1823,
	-1000, 660, -71, 3496, 231, -1000, -1000, -1000, 1187, 75864,
	2383, 770, 75864, 4091, 1829, 1830, 2646, -1000, 2462, -1000,
	-1000, 19382, 20404, 1490, -1000, 657, 257, -1000, 95433, 4161,
	-1000, -1000, -1000, -1000, -1000, 1023, -1000, 75864, 56724, 56724,
	-1000, 1697, 1295, 1583, -1000, 75864, 1603, 75864, 648, 75864,
	75864, 2577, 1489, 75864, 2943, -1000, -1000, 4148, 52178, 52178,
	2058, 3847, 2007, 2004, -1000, -1000, 3505, 1427, 52178, 1180,
	4020, 3313, 2718, 3920, 2940, 4188, 2381, -1000, -1000, 489,
	-1000, 400, -1000, 29192, 985, 3923, -1000, 64754, 770, 1746,
	403, 3519, 3519, 75864, 638, 3634, -1000, -1000, 3633, 3631,
	2998, 2731, 4019, -1000, 3951, 1607, 1474, 29192, 979, -1000,
	2352, 934, 975, 971, 75864, 1849, 3243, -1000, 4018, 3940,
	4016, 3940, -1000, -1000, -1000, 70309, -1000, 229, -1000, 414,
	-1000, -1000, -1000, -1000, 75864, 75864, 75864, 75864, -1000, 1710,
	-1000, -1000, -1000, -1000, 1707, -1000, 2265, -1000, -1000, -1000,
	-1000, -1000, 2351, 1705, 221, -1000, -1000, 19382, 19382, 19382,
	4161, -1000, 198, -1000, 1684, 2385, -1000, -1000, 198, 3629,
	2374, -1000, -1000, -1000, -1000, -1000, -1000, 198, 3627, 3945,
	-1000, 3626, 198, 1711, 75864, 75864, 9910, 75864, 75864, 75864,
	9411, 3625, 1303, 1583, -1000, -1000, 92024, 94459, -1000, 94459,
	-1000, 409, -1000, 367, 422, -1000, -1000, -1000, -1000, 3623,
	-1000, 3940, 4014, 15315, -1000, 1760, 29192, -1000, -1000, -1000,
	2333, 3834, -1000, -1000, -1000, 151, 75864, 1787, 2254, 3622,
	3324, 52178, 75864, -1000, -1000, -1000, -1000, -1000, -1000, 469,
	-1000, 469, 469, 3618, 3615, 75864, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 75864, -1000, -1000, -1000, -1000, -1000, 4148,
	4148, 1609, 3613, 3612, 3605, 3602, -1000, 3601, 3600, 4161,
	3950, 3940, -1000, 4011, 3940, 219, -1000, 1194, -1000, 2671,
	2669, 3241, -1000, 56724, -1000, -1000, -1000, 95433, -1000, -1000,
	-1000, 75864, 75864, 970, -1000, -1000, 95433, -1000, 3401, 3399,
	1318, 75864, 52178, 52178, -1000, -1000, -1000, 75864, -1000, -1000,
	-1000, 1207, -1000, -1000, 1207, 209, -1000, -1000, 416, 75864,
	50158, -1000, 2214, 412, -1000, 451, -1000, -1000, 52178, -1000,
	75864, 181, 58239, 251, -1000, 75864, 75864, 1738, 1736, 1735,
	1734, 1727, 242, -1000, 1764, 52178, -1000, -1000, 211, 64249,
	-1000, 52178, -1000, -1000, -1000, 3544, -1000, 1523, -1000, -1000,
	26621, 246, -1000, -1000, 1212, -1000, 951, -1000, 3247, 3453,
	29192, 74, 75864, -1000, 75864, 3507, 3507, 3507, 3507, 75864,
	-1000, 29192, 29192, 1483, 813, 29192, 34332, 34332, -1000, 29192,
	665, -1000, -1000, -1000, -1000, 3559, -1000, -1000, 2096, 2899,
	29192, -1000, -1000, 1443, 1439, -1000, -1000, -1000, -1000, 2269,
	1721, 184, -1000, 23021, 637, 26107, 228, -1000, 400, 13006,
	-1000, -1000, 900, -1000, -1000, -1000, 636, 25593, -1000, -1000,
	1266, -63, -63, 29192, 29192, 2216, 1965, 1778, 1687, 4148,
	4161, 2502, -1000, 29192, 12449, -1000, 1266, -1000, -1000, 91519,
	29192, 2899, 3396, 3394, 29192, 29192, 2851, 3494, -1000, -1000,
	2733, 11887, -1000, -1000, -1000, -1000, 95433, -1000, 29192, -1000,
	2246, -1000, -1000, 29192, 29192, -1000, 95433, 34332, 34332, 34332,
	34332, 34332, 34332, 34332, 34332, 34332, 34332, 34332, 34332, 34332,
	2756, 34332, 969, 485, 485, 485, -1000, -1000, 25079, 29192,
	29192, 95433, 633, 632, 627, -1000, 29192, 99, 29192, -1000,
	-1000, -1000, -1000, 180, -1000, 29192, 19382, 6030, 626, 36894,
	176, 1418, -1000, 2899, 29192, -1000, 1237, 3165, 29192, 3393,
	3392, 3165, -1000, 625, -1000, 624, 29192, 29192, 29192, 11682,
	3453, -1000, 814, 15315, 1180, -1000, -1000, 24050, 1042, 1180,
	1826, 75864, 400, 3175, -1000, 15315, 1193, 75864, -1000, 15315,
	3037, 38424, 3371, 3369, 38424, 3360, 3347, 3347, 3347, -1000,
	1533, -1000, 75864, 964, -1000, 68289, 69804, 68289, 68289, 52683,
	623, 3473, -1000, -1000, 56219, 957, -1000, -1000, -1000, 3022,
	956, 36384, 29192, 400, 21476, 29192, 1697, -1000, -1000, -1000,
	3338, 2338, 60242, -1000, 2026, 60747, 833, 881, 1180, -1000,
	174, 3945, 3322, 75864, 9580, 955, -1000, -1000, -1000, 2660,
	29192, -1000, -1000, 227, -1000, 208, 1486, -1000, 92024, 29192,
	29192, -1000, 75864, 1823, 75864, 3414, -1000, -1000, 3493, 92024,
	92024, -1000, 4187, 20404, 954, 75864, 3920, 953, 52178, 4091,
	-1000, 75864, -1000, -1000, 75864, 2755, -1000, 3947, 1327, 952,
	34332, 75864, 2818, -1000, 2449, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 951, 4175, 4151, 95433, -1000, 75864, 3903,
	622, 206, -1000, -1000, 75864, -1000, -1000, -1000, -1000, -1000,
	945, -1000, -1000, 422, -1000, -1000, -1000, 2338, 833, 631,
	2843, 1409, 1295, 50158, -1000, 151, 151, 52178, 52178, -1000,
	-1000, 4161, 4161, 907, 4161, 151, 3927, 75864, 3920, 75864,
	2111, 75864, -1000, 3597, 3314, -1000, 75864, 38424, 39939, 11578,
	3389, -1000, -1000, 3519, 69299, 3519, -1000, 944, -1000, 469,
	2884, 4161, 75864, 75864, -1000, 3284, -1000, -1000, -1000, 75864,
	4009, 2611, -1000, 68794, -1000, 3322, 11317, 75864, 2507, 75864,
	75864, -1000, 75864, 38929, -1000, -1000, 2632, 6622, 827, 2403,
	2080, 1484, -1000, -1000, 1697, 1561, 2507, 75864, -1000, 75864,
	-1000, -1000, -1000, -1000, -1000, 19382, 20404, 19382, -1000, -1000,
	-1000, -1000, -1000, -1000, 1696, 75864, -1000, -1000, 19893, -1000,
	-1000, -1000, -1000, -1000, 75864, 75864, 75864, 1581, 3492, 75864,
	1578, 3476, 75864, 75864, 75864, 75864, -1000, 3595, 198, 1708,
	2321, -1000, 3594, 198, 1702, 75864, -1000, -1000, -1000, -1000,
	1482, 368, 75864, -1000, 75864, -1000, 11026, 2507, -1000, 2332,
	-1000, 3588, 3587, 2037, 2630, 75864, 3931, 941, 151, 1776,
	-1000, -1000, -1000, 75864, 75864, -1000, 1303, 898, 75864, 75864,
	75864, 75864, 75864, 4161, 2658, 4005, -1000, 75864, -1000, 19382,
	-1000, 20940, 1463, 2567, -1000, 4119, 3337, 3336, -1000, 94946,
	2290, 1682, 1682, 2935, 181, 151, 151, 3940, -1000, -1000,
	-1000, -1000, -1000, 1681, -1000, 2547, 2395, 49653, 2399, -1000,
	181, -1000, 910, 417, -1000, 75864, 75864, 75864, 75864, 75864,
	-1000, 19382, -1000, -1000, -1000, -1000, -1000, 3940, 3558, 215,
	-1000, 1513, -1000, 164, -1000, 29192, -1000, 43506, -1000, -1000,
	3451, 3471, 15315, -1000, -1000, 75864, 75864, 75864, 75864, -1000,
	600, 449, 29192, 29192, 527, 1643, 1550, 449, 29192, 29192,
	-1000, -1000, 438, 2308, 2307, 29192, 29192, -1000, 10886, -1000,
	162, -1000, 29192, -1000, -1000, 4161, 29192, -1000, 619, 610,
	608, 15315, 15315, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	599, -1000, -1000, 15315, 29192, 598, 2035, -1000, 10784, 3165,
	3833, 3827, -1000, -1000, 3165, 29192, 2763, -1000, 597, 15315,
	595, 10708, -1000, 42, 42, 360, 360, 360, -1000, 512,
	512, 512, 512, 512, 512, 485, 3557, 2738, -1000, 5746,
	10430, 10198, 10117, 581, -1000, -1000, -1000, 99, 9974, -1000,
	31762, -1000, -1000, 580, 1380, 1377, -1000, 3463, 35874, 2782,
	-1000, 29192, 195, 31248, 3165, -1000, -1000, 579, -1000, 3826,
	3825, 577, -1000, -1000, 9429, 9429, 9429, 95433, 3451, -1000,
	574, 193, 3114, 38929, 3072, -1000, -1000, 3154, -1000, -1000,
	29192, -1000, 75864, 3473, 38424, 38424, 3524, 3368, 38424, -1000,
	-1000, -1000, -1000, -1000, 58239, 940, 75864, -1000, -1000, -1000,
	-1000, 68289, 935, 75864, 75864, -1000, 45611, 2961, 927, 185,
	-1, 8115, 863, 1697, 2760, -1000, 2026, 896, -1000, 2397,
	3313, -1000, 3470, 159, -1000, -1000, -1000, 3941, 2998, 60242,
	75864, 3036, 3922, 3920, -1000, 893, 3388, 1923, 96894, -1000,
	15315, 4161, 2924, 95433, -1000, 15315, 15315, 1828, -1000, 72,
	75864, 92024, -1000, 158, -1000, 1187, -1000, 3521, 2330, 4118,
	75864, -1000, 1715, -1000, -1000, -1000, 3923, 3923, 29192, 5746,
	770, 4117, -1000, 3897, -1000, -1000, 3332, -1000, -1000, 75864,
	-1000, 4161, -1000, 1862, 19382, 404, 1678, 2998, 60242, 3035,
	75864, 2439, -1000, 1673, 151, 151, -1000, -1000, -1000, -1000,
	-1000, 4116, 1539, -1000, 58239, -1000, -1000, 2742, -1000, 3858,
	3324, 52178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 74,
	-1000, -1000, 39939, -1000, -1000, -1000, -1000, 29192, -1000, 1558,
	2435, 3556, -1000, -1000, 3552, -1000, 75864, 1295, -1000, 67784,
	-1000, -1000, -1000, 156, -1000, 1648, -1000, 2431, 2346, -1000,
	152, 2507, 148, 146, -1000, 3935, 892, 3866, 29192, 3824,
	4083, 4082, -1000, -1000, 2818, 3823, 4114, 898, -1000, -1000,
	-1000, -1000, 2818, -1000, 2657, 95433, 910, 898, 3940, 3940,
	-1000, -1000, 1186, -1000, -1000, -1000, -1000, 3586, 3585, 75864,
	52178, -1000, 75864, 52178, -1000, -1000, -1000, 3582, 75864, 75864,
	75864, 1574, 3467, 75864, 75864, 75864, -1000, -1000, 1458, -1000,
	3940, -1000, -1000, 75864, 75864, 16, -1000, 4148, 4148, 95433,
	183, -1000, 4148, 4148, -1000, -1000, 1257, 29192, 3580, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3940, -1000, 4161,
	4161, -1000, 3940, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 95433, 95433, 75864, 75864, 145, 182, 75864, 3579, -1000,
	-1000, -1000, -1000, -1000, -1000, 3554, 63239, -1000, 75864, -1000,
	-1000, -1000, 1317, -1000, 181, 181, 181, 181, 181, -1000,
	-1000, 49653, 3940, -1000, -1000, 9215, 570, 1363, 29192, 3912,
	-1000, -1000, -1000, -1000, 449, 449, 29192, 29192, 29192, 449,
	438, -1000, -1000, 449, 449, -1000, -1000, 8890, -1000, 1266,
	-1000, -1000, -1000, -1000, 15315, -1000, 1266, 3465, -1000, 569,
	-1000, -1000, 568, 154, 75864, -1000, -1000, 29192, 34332, 3548,
	-1000, 29192, 29192, 29192, -1000, -1000, 142, 140, 891, -1000,
	-1000, -1000, -1000, 2782, 3463, -1000, -1000, 8765, 566, 1617,
	15315, 2783, 542, -1000, -1000, -1000, -1000, 3165, 29192, 3102,
	3165, 2236, 1363, 3267, 3121, 134, -1000, 75864, 2781, 15315,
	-1000, -1000, -1000, 3524, -1000, 880, 29192, 38424, -1000, 865,
	75864, 130, -1000, 75864, 124, 120, 95433, 116, -1000, 4113,
	3032, 33818, 29192, 536, 3223, -1000, 3989, 3989, 3202, -1000,
	3356, 19382, 863, 4161, 3313, 75864, 3806, 3806, 2881, 75864,
	-1000, 60747, 2462, 1302, 2026, 528, 833, 75864, -1000, 1692,
	4112, 38929, 67279, -1000, 113, -1000, 94459, -1000, 692, -1000,
	1451, -1000, 2918, 1488, 3532, 112, -1000, 526, 1626, 1623,
	1529, 75864, 1180, 109, 4091, -1000, 3809, 3317, 3317, 8548,
	2241, 737, -1000, 75864, -1000, -1000, 106, -1000, 75864, 1669,
	525, 75864, 1295, 2540, 75864, 1180, -1000, 75864, 859, 2111,
	75864, 857, 3931, 151, 465, 8492, 58239, 4107, 4107, 75864,
	855, 852, 851, -1000, -1000, -1000, -1000, 2507, 2361, -1000,
	-1000, -1000, -1000, -1000, 2361, 1892, 2361, 38929, 44035, -1000,
	75864, 75864, -1000, 8213, -1000, 4003, 3999, -1000, -1000, 846,
	-1000, 4110, 3903, -1000, -1000, -1000, -1000, 20404, 75864, 75864,
	2082, 452, 2082, 439, 75864, -1000, -1000, 3577, 75864, 52178,
	-1000, -1000, 3576, -1000, -1000, 2507, -1000, -1000, 2037, 43506,
	43001, -1000, 2630, 845, 844, 839, 7960, 75864, -1000, -1000,
	-1000, -1000, 3903, 524, -1000, -1000, -1000, 93972, 95433, -1000,
	49653, 49653, 3387, -1000, -1000, 211, -1000, -1000, -1000, -1000,
	75864, 15315, 30220, 449, 449, 449, -1000, 522, 2252, 29192,
	-1000, -1000, -1000, 7872, 649, 34332, 15315, 15315, 15315, -1000,
	29192, -1000, 29192, -1000, -1000, -1000, 1492, -1000, -1000, 2877,
	132, -1000, 4109, 521, 3386, 29192, -1000, -1000, -1000, -1000,
	-1000, -1000, 2901, 3102, 511, -1000, 2355, -1000, 3257, 3268,
	3227, -1000, 3514, 38929, -1000, 1180, -1000, 75864, 15315, -1000,
	29192, 105, -1000, 102, -1000, -1000, 1213, 45611, -1000, 838,
	75864, 95, -1000, 866, 34332, 7819, -1000, -1000, -1000, 3126,
	29192, 3124, -1000, 3122, -1000, -1000, -1000, 4102, 4102, -1000,
	-1000, 4102, 4102, 2919, 4161, 88, -1000, 37909, 3514, -1000,
	2881, 84, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3359, 827, 1324, 835, -1000, -1000,
	3313, 2338, 2026, 833, 1311, 1252, 1243, 1180, 80, 3322,
	96894, 9580, -1000, -1000, 348, -1000, -1000, 95433, 3774, 2516,
	1488, -1000, 2044, -1000, -1000, -1000, 75864, -1000, -1000, 3930,
	3929, -1000, -1000, 75864, 1421, -1000, 3922, 3920, -1000, 2349,
	-1000, 2108, 3377, 2048, 806, 29192, 2481, -1000, 19382, 1295,
	75864, 2338, 833, -1000, 2841, 1295, 3927, -1000, 504, 58239,
	-1000, 4176, -1000, 38424, -1000, 4107, -1000, 2461, -1000, -1000,
	58744, 29192, 29192, 2462, 3923, 832, 3923, 75864, 3923, -1000,
	-1000, 829, 3233, 827, -1000, 3866, -1000, -1000, 29192, 2372,
	3319, -1000, -1000, -1000, -1000, -1000, 1567, -1000, 1555, -1000,
	75864, 2082, 386, 75864, -1000, 841, 2909, -1000, 95433, -1000,
	95433, 95433, 29192, -1000, -1000, 3940, -1000, 493, 481, 476,
	451, 415, 1682, 3940, 117, -1000, 4103, 114, -1000, 15315,
	-1000, -1000, -1000, -1000, 21991, 825, 815, 584, -1000, 475,
	30734, 30734, 30734, 99, 29192, 649, 77, 65, -1000, 2777,
	2802, 2860, 2960, 29192, 19382, -1000, 2888, 15315, -1000, -1000,
	470, 3384, -1000, -1000, -1000, 75864, 3255, 3254, 55714, -1000,
	-1000, -1000, 63, 62, -1000, -1000, -1000, -1000, 75864, 61,
	-1000, 93485, 33818, 82, 19382, 5746, 2997, 75864, 3200, 15315,
	3143, 3461, 4161, 4161, 4161, 4161, 48138, 3808, 47633, -1000,
	-1000, 19382, -1000, -1000, -1000, -1000, -1000, 49148, -1000, 3359,
	-1000, 1539, 2617, -1000, -1000, 39434, 2462, 2881, 2026, 3313,
	2998, -1000, 1310, 1308, 3922, 2359, 812, -1000, 1923, -1000,
	-1000, 2498, 808, 1642, -1000, -1000, 4102, -1000, -1000, 2590,
	-1000, 2427, 2422, -1000, -1000, -1000, 4101, 1551, -1000, 2345,
	-1000, 3383, 3382, 3182, -1000, -1000, -1000, -1000, 3945, 7757,
	4100, 75864, -1000, -1000, 1295, 1668, 2998, 75864, -1000, -1000,
	-1000, 807, 59, -1000, 74, -1000, -1000, -1000, 51, -1000,
	4148, 36, 35, 3317, 75864, 3317, 770, 3317, 43506, 1212,
	3233, -1000, 7560, 806, -1000, 29192, 75864, 75864, -1000, -1000,
	1543, -1000, 1928, 1724, 1928, 31, -1000, 29, 19, 7215,
	-1000, -1000, -1000, -1000, -1000, -1000, 3531, -1000, 75864, 799,
	30220, -1000, 29192, 29192, 798, -1000, 2504, -1000, 35360, 2135,
	1753, 5985, 2504, 2504, 15315, -1000, -1000, -1000, 3102, 2815,
	2805, -1000, 2834, -1000, 2831, 2845, 2833, -1000, -1000, -1000,
	-1000, 2917, 376, 3460, 3458, 389, 4099, 1768, 14, -1000,
	75864, 3131, 3016, -1000, 35874, -1000, 3031, -1000, -1000, -1000,
	3098, 3222, -1000, -1000, 3096, 986, 3109, -1000, -1000, -1000,
	-1000, 72, -1000, 47128, 72, -1000, -1000, 11, -1000, -1000,
	1539, -1000, 2360, 7, -1000, 892, 3866, 29192, 3359, 3313,
	2881, 2026, -1000, -1000, -1000, 3947, 795, 38929, -1000, 2111,
	29192, -1000, -1000, -1000, 75864, 2515, 58239, 58239, 1180, 75864,
	-1000, -1000, 3201, -1000, 3207, 2456, 2456, 472, 1604, 2037,
	-1000, -1000, 75864, 1646, 1295, 467, -1000, 4172, -1000, 58744,
	-1000, -1000, 3575, -1000, 3, -1000, 2241, 3514, 459, -1000,
	1212, -1000, -1000, 15315, 2082, 2082, 75864, -1000, -1000, -1000,
	3456, -1000, 58239, 95433, -1000, -1000, -1000, 49653, -1000, -1000,
	-1000, -7, -11, 30220, -1000, 1895, 3987, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 446, 3379, 3378, -1000, -1000, 2820,
	-1000, 2819, -1000, 3102, -1000, 75864, 75864, 75864, -1000, -1000,
	75864, -1000, 794, -1000, -1000, 3131, -1000, 34332, 34332, 3805,
	-1000, 34332, -1000, 2961, 789, -1000, 55714, -1000, -1000, 3154,
	75864, 3283, 788, -1000, -1000, 72, -1000, -1000, 49148, -1000,
	-1000, 3011, 3007, -1000, 39434, 75864, 75864, 6683, 1539, 2881,
	3359, 3313, 3920, 38929, -13, 58239, 6580, -1000, -1000, 1751,
	24, 23, 3922, -1000, -1000, 2672, -1000, -1000, 3811, -1000,
	-1000, -1000, 16, 1295, 75864, -1000, -1000, -1000, -1000, 786,
	2507, -1000, 2507, 3377, -1000, -1000, -1000, -1000, -1000, 2082,
	75864, -1000, -1000, 415, -1000, -1000, -19, 1748, -1000, -1000,
	1339, 29706, -1000, 2808, 2807, -1000, -1000, 3376, 3330, 373,
	355, -1000, 29192, -1000, 5746, 5746, -1000, 5746, 3030, 75359,
	6, 2764, -29, -1000, 29192, -1000, -1000, -1000, -1000, -1000,
	-1000, 3866, -1000, 3359, 1539, 2881, 1539, -31, -1000, 2359,
	785, -1000, 3774, 3573, 3525, -1000, -1000, 770, 770, -1000,
	1295, 29192, -1000, 2507, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2795, 2794, 2887, 46623, 75864, 75864, 75864, 6292, 75864,
	-34, -1000, 92998, 3004, 3280, 3176, -47, 75864, 1539, -1000,
	3359, 3514, -1000, 38929, 3947, 18871, 2497, 1621, 1610, -1000,
	-1000, -1000, -60, 2507, -1000, -1000, -1000, 3889, 962, -1000,
	-1000, -1000, -1000, -1000, -65, 3102, 75359, 3012, 1709, 4164,
	-1000, -1000, -1000, 3154, -1000, -1000, -1000, 1539, -1000, -1000,
	3920, -67, -1000, -1000, -1000, -1000, -1000, 2111, 3918, 3915,
	-1000, 46623, 29192, -1000, 436, -1000, -1000, 2877, 2941, 2941,
	4163, 3120, 2751, -1000, 1539, -1000, 18871, 58239, 2421, 2419,
	3311, -63, -1000, 2802, 2877, 3102, -1000, 765, 75864, 3280,
	3514, -1000, 758, 58239, 58239, 75864, 419, 3102, 2802, -1000,
	75359, 3025, -1000, -1000, 18871, -1000, -1000, -1000, 4161, -1000,
	3102, -68, 693, -70, -1000, -1000, 75359, -1000, -73, -1000,
}

var yyPgo = [...]int16{
	0, 4697, 4693, 3184, 134, 0, 181, 7187, 4692, 65,
	305, 357, 4691, 1951, 426, 433, 129, 355, 369, 4016,
	9908, 9409, 126, 4681, 320, 4681, 4680, 372, 317, 259,
	4677, 241, 4675, 4674, 208, 242, 4669, 293, 4668, 423,
	4661, 38, 4659, 4657, 279, 199, 387, 416, 412, 415,
	4654, 352, 385, 353, 349, 4652, 7732, 531, 2384, 21,
	4651, 4648, 1620, 4647, 4646, 4644, 344, 4639, 290, 4638,
	4637, 4636, 4624, 12, 373, 4624, 4622, 348, 4621, 4612,
	4608, 110, 4607, 4606, 4602, 4601, 249, 343, 334, 4600,
	378, 339, 622, 233, 251, 11068, 4598, 363, 107, 1670,
	234, 4596, 4594, 12009, 4588, 4586, 11937, 11184, 9892, 4585,
	9119, 4592, 128, 257, 303, 4582, 318, 298, 431, 997,
	383, 5, 1410, 382, 4581, 4580, 4579, 193, 4576, 4575,
	57, 54, 338, 4574, 4573, 71, 36, 53, 413, 381,
	4567, 4566, 414, 4564, 4563, 9957, 62, 238, 4560, 61,
	4558, 346, 345, 63, 48, 4555, 341, 291, 333, 40,
	285, 226, 51, 225, 347, 4546, 4540, 4539, 4537, 114,
	277, 84, 6230, 409, 407, 221, 210, 206, 204, 4536,
	191, 179, 4533, 4530, 4528, 4527, 34, 43, 4526, 4525,
	275, 273, 287, 335, 4523, 337, 155, 15, 25, 151,
	172, 4522, 4520, 4519, 4518, 19, 77, 33, 4516, 4515,
	4513, 370, 4511, 424, 4510, 4509, 4508, 324, 4507, 4506,
	4504, 144, 4503, 4501, 4500, 253, 4500, 60, 68, 4499,
	41, 302, 354, 299, 391, 42, 313, 429, 276, 4498,
	418, 384, 377, 89, 247, 7, 246, 224, 274, 4497,
	281, 4496, 4495, 4495, 398, 321, 271, 272, 165, 124,
	4494, 437, 4487, 406, 4486, 4485, 4483, 4477, 330, 105,
	102, 4473, 263, 4472, 92, 4470, 4469, 109, 328, 22,
	50, 4468, 44, 99, 27, 220, 4467, 69, 326, 1,
	17, 10, 4466, 296, 4465, 74, 4464, 1193, 283, 4463,
	340, 288, 4462, 311, 70, 11, 6, 4461, 2, 8,
	4, 16, 301, 4459, 227, 4458, 90, 4457, 270, 215,
	132, 4453, 133, 4452, 79, 45, 121, 4450, 4449, 4445,
	141, 26, 4444, 88, 4443, 219, 310, 4442, 4441, 4440,
	29, 46, 120, 67, 66, 47, 28, 93, 59, 4439,
	4437, 37, 97, 4434, 243, 39, 9, 85, 309, 106,
	4433, 24, 20, 23, 405, 171, 366, 361, 4431, 35,
	308, 394, 4430, 4429, 392, 148, 368, 56, 260, 4428,
	258, 4427, 18, 4426, 98, 55, 212, 64, 58, 4425,
	81, 254, 4424, 156, 371, 4423, 319, 240, 13565, 4421,
	170, 314, 428, 82, 4420, 250, 230, 4419, 31, 358,
	117, 436, 389, 4417, 365, 4417, 4416, 4415, 163, 161,
	130, 4414, 135, 4413, 4412, 4411, 4410, 390, 4409, 4408,
	4407, 4405, 4402, 4401, 4400, 4399, 4397, 4396, 4391, 4390,
	4388, 4387, 4384, 420, 430, 4383, 359, 4382, 434, 350,
	4380, 388, 4379, 157, 4378, 386, 351, 435, 408, 399,
	4377, 228, 393, 52, 4376, 75, 417, 218, 237, 111,
	80, 4375, 4374, 236, 289, 419, 159, 146, 4373, 4372,
	4371, 4370, 4369, 4368, 4367, 4366, 4365, 4361, 4360, 4359,
	4358, 4357, 4356, 4354, 4351, 4350, 4349, 4348, 4346, 4344,
	4342, 4341, 4340, 4334, 4332, 4331, 4330, 4329, 4322, 4321,
	4318, 4317, 4315, 4314, 4313, 4312, 4311, 4310, 4307, 4304,
	269, 261, 4301, 4300, 4297, 367, 362, 307, 315, 422,
	252, 266, 91, 4295, 4292, 123, 4291, 4290, 4289, 403,
	4288, 425, 4282, 4279, 4273, 4268, 217, 122, 4267, 83,
	213, 401, 49, 4266, 4265, 248, 316, 112, 113, 4262,
	4261, 4259, 4258, 4256, 223, 4255, 4254, 255, 73, 4252,
	294, 264, 432, 356, 402, 427, 4251, 396, 4248, 611,
	404, 4247, 268, 292, 87, 360, 4242, 96, 4241, 4240,
	322, 421, 239, 4236, 4235, 4234, 72, 4233, 4232, 265,
	323, 4231, 4230, 4228, 4227, 4222, 4219, 3, 86, 32,
	13, 4218, 4217, 30, 4215, 4214, 304, 4213, 4212, 374,
	76, 78, 4211, 4206, 4205, 4204, 295, 4203, 4200, 329,
	14, 4198, 4198, 3310, 400,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 18, 18, 362, 362, 397, 397,
	397, 25, 25, 26, 26, 27, 27, 28, 28, 41,
	41, 41, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 13, 13, 14, 14, 398, 398, 24,
	24, 16, 16, 626, 626, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 15, 15, 17, 17, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 622, 622, 622, 622, 622,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 92, 94, 93, 93, 93, 101, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 60, 60, 87, 87, 91,
	91, 90, 90, 90, 90, 88, 88, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	74, 74, 76, 76, 76, 76, 76, 77, 77, 77,
	78, 12, 12, 12, 12, 12, 12, 12, 12, 79,
	79, 80, 72, 81, 81, 192, 192, 82, 82, 82,
	83, 83, 83, 84, 84, 85, 85, 85, 85, 269,
	269, 269, 579, 579, 122, 122, 122, 122, 122, 122,
	122, 73, 73, 86, 86, 86, 63, 64, 64, 67,
	67, 66, 65, 65, 68, 68, 68, 71, 71, 120,
	120, 120, 69, 69, 70, 155, 155, 155, 148, 148,
	148, 148, 148, 148, 157, 157, 157, 157, 156, 156,
	156, 156, 156, 158, 158, 158, 158, 158, 119, 119,
	99, 100, 100, 100, 100, 100, 95, 95, 95, 97,
	98, 113, 113, 114, 114, 102, 102, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 109, 109,
	105, 105, 623, 623, 624, 624, 96, 96, 96, 96,
	96, 96, 106, 107, 110, 111, 108, 108, 108, 108,
	625, 117, 117, 117, 118, 118, 104, 104, 145, 145,
	147, 147, 149, 149, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 146, 146, 121, 121,
	126, 126, 123, 123, 152, 152, 151, 151, 169, 169,
	170, 172, 172, 173, 173, 171, 171, 171, 171, 171,
	171, 171, 171, 138, 138, 139, 139, 140, 140, 142,
	143, 143, 143, 143, 141, 141, 144, 144, 144, 174,
	174, 174, 174, 174, 174, 174, 239, 239, 238, 238,
	241, 241, 241, 241, 242, 242, 243, 243, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	400, 400, 401, 401, 401, 402, 402, 402, 255, 255,
	255, 255, 255, 255, 256, 256, 256, 256, 257, 257,
	258, 258, 259, 259, 259, 260, 260, 261, 261, 263,
	264, 264, 264, 265, 265, 265, 266, 266, 266, 267,
	267, 245, 245, 195, 195, 195, 216, 248, 248, 247,
	247, 247, 247, 250, 250, 250, 250, 250, 249, 249,
	251, 251, 252, 252, 253, 253, 254, 254, 268, 268,
	277, 277, 273, 273, 274, 275, 275, 276, 276, 584,
	271, 271, 270, 270, 272, 283, 283, 285, 285, 284,
	284, 284, 284, 286, 286, 287, 287, 278, 278, 279,
	279, 280, 280, 280, 281, 281, 282, 282, 282, 282,
	282, 288, 293, 292, 292, 304, 304, 294, 294, 295,
	296, 296, 299, 299, 298, 298, 300, 300, 300, 301,
	301, 301, 302, 302, 297, 297, 303, 303, 306, 306,
	307, 307, 307, 307, 307, 307, 307, 307, 308, 308,
	308, 308, 305, 305, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 310, 310, 310, 310, 310, 311, 311,
	312, 312, 313, 313, 289, 289, 290, 290, 290, 290,
	290, 290, 291, 291, 175, 399, 399, 185, 185, 185,
	185, 185, 207, 207, 186, 186, 190, 176, 187, 187,
	193, 193, 191, 188, 188, 177, 262, 262, 178, 189,
	189, 179, 179, 210, 210, 211, 211, 217, 217, 217,
	218, 218, 219, 219, 221, 221, 222, 222, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 223, 223, 228, 229, 229, 229, 229,
	229, 229, 224, 224, 230, 235, 235, 235, 235, 231,
	231, 231, 231, 34, 34, 374, 374, 374, 374, 374,
	374, 374, 374, 373, 373, 373, 372, 372, 372, 372,
	372, 234, 234, 541, 541, 233, 233, 627, 627, 568,
	568, 212, 212, 213, 213, 214, 214, 215, 215, 199,
	199, 199, 199, 199, 208, 208, 209, 209, 200, 200,
	202, 203, 204, 204, 204, 204, 204, 197, 194, 194,
	194, 201, 201, 201, 226, 226, 227, 227, 205, 205,
	205, 206, 206, 198, 198, 153, 153, 153, 154, 154,
	154, 196, 196, 180, 180, 180, 180, 180, 180, 376,
	376, 376, 376, 376, 376, 376, 376, 314, 314, 315,
	315, 318, 318, 318, 321, 329, 329, 329, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 378, 378,
	379, 379, 380, 380, 381, 381, 316, 316, 317, 317,
	322, 322, 323, 323, 324, 324, 324, 324, 325, 328,
	328, 382, 382, 383, 383, 384, 10, 33, 319, 333,
	333, 334, 334, 334, 334, 337, 337, 337, 337, 340,
	340, 340, 386, 386, 389, 389, 391, 391, 391, 391,
	387, 387, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 628, 628,
	29, 29, 29, 385, 385, 388, 388, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 320, 320, 336, 336,
	336, 336, 336, 336, 336, 338, 338, 327, 327, 326,
	326, 342, 342, 341, 341, 341, 341, 346, 346, 346,
	346, 346, 343, 344, 345, 345, 345, 345, 345, 347,
	347, 348, 348, 349, 350, 350, 351, 351, 351, 377,
	377, 355, 355, 355, 355, 356, 356, 357, 357, 358,
	181, 181, 339, 339, 359, 359, 361, 361, 360, 360,
	363, 363, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 364, 364, 369, 369, 365, 365, 11,
	467, 467, 467, 467, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 367, 367, 367, 368, 370,
	370, 629, 629, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 421, 421, 421, 573, 573,
	573, 576, 576, 576, 576, 575, 575, 577, 577, 422,
	423, 423, 423, 423, 448, 448, 451, 452, 452, 452,
	454, 454, 454, 427, 427, 427, 427, 427, 427, 427,
	424, 424, 428, 428, 449, 449, 450, 450, 455, 453,
	453, 425, 425, 425, 425, 425, 426, 426, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 39, 39, 40, 40, 410, 89, 89, 89, 89,
	409, 75, 75, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 331, 331,
	332, 332, 332, 332, 332, 332, 352, 353, 353, 354,
	354, 354, 354, 416, 416, 416, 416, 580, 580, 581,
	581, 582, 582, 582, 583, 583, 583, 583, 583, 585,
	585, 585, 585, 585, 586, 112, 112, 112, 587, 587,
	588, 588, 590, 590, 590, 590, 590, 595, 595, 589,
	589, 596, 596, 596, 420, 614, 614, 597, 597, 578,
	578, 418, 418, 598, 598, 598, 600, 600, 599, 599,
	599, 599, 599, 605, 605, 606, 606, 608, 603, 603,
	604, 604, 611, 601, 601, 631, 631, 602, 602, 609,
	609, 630, 630, 607, 607, 607, 610, 610, 610, 610,
	612, 612, 419, 419, 419, 419, 225, 225, 613, 613,
	613, 613, 478, 478, 478, 478, 479, 480, 480, 480,
	480, 480, 480, 480, 481, 481, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
	485, 485, 520, 520, 632, 632, 486, 486, 487, 487,
	521, 521, 523, 523, 523, 523, 488, 522, 522, 524,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 510, 511, 511, 527, 527, 527, 527,
	526, 526, 525, 525, 532, 532, 512, 512, 513, 513,
	513, 528, 528, 529, 529, 530, 530, 514, 514, 514,
	514, 515, 515, 516, 517, 517, 531, 531, 563, 563,
	563, 563, 564, 564, 571, 565, 566, 566, 567, 484,
	484, 484, 484, 484, 518, 518, 519, 519, 569, 569,
	570, 570, 476, 476, 477, 404, 404, 405, 403, 403,
	403, 406, 406, 407, 407, 407, 407, 574, 574, 574,
	574, 574, 574, 574, 574, 574, 574, 574, 572, 572,
	572, 572, 237, 237, 240, 240, 232, 232, 615, 615,
	615, 615, 615, 615, 615, 615, 615, 617, 617, 617,
	236, 236, 9, 9, 9, 9, 619, 619, 456, 456,
	456, 616, 616, 616, 616, 616, 618, 618, 618, 618,
	457, 457, 375, 375, 375, 375, 375, 375, 393, 393,
	30, 30, 31, 32, 32, 35, 35, 35, 35, 36,
	36, 38, 38, 38, 38, 394, 395, 395, 396, 396,
	490, 490, 491, 536, 536, 536, 536, 533, 533, 535,
	534, 534, 492, 537, 537, 493, 493, 494, 495, 538,
	538, 542, 542, 543, 543, 543, 543, 543, 544, 544,
	545, 545, 546, 546, 547, 547, 496, 548, 548, 497,
	497, 498, 498, 550, 550, 555, 555, 555, 499, 499,
	499, 500, 500, 500, 500, 551, 551, 556, 556, 556,
	556, 556, 556, 556, 246, 246, 501, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 503, 503, 503, 549,
	549, 549, 504, 559, 559, 552, 552, 557, 557, 557,
	557, 557, 539, 539, 620, 620, 620, 621, 621, 505,
	506, 506, 553, 553, 558, 558, 507, 508, 554, 554,
	554, 554, 509, 509, 540, 540, 560, 560, 561, 561,
	562, 562, 45, 45, 45, 44, 44, 159, 159, 162,
	162, 162, 162, 162, 165, 166, 167, 168, 163, 163,
	160, 161, 161, 164, 164, 127, 127, 128, 128, 130,
	132, 132, 132, 131, 133, 133, 129, 129, 134, 134,
	134, 134, 135, 135, 136, 136, 136, 136, 136, 137,
	137, 137, 137, 137, 47, 47, 47, 47, 46, 46,
	48, 48, 48, 48, 48, 48, 49, 49, 50, 50,
	51, 52, 52, 52, 53, 53, 54, 54, 55, 55,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 430, 430, 633, 633, 633, 444, 444, 444,
	431, 437, 435, 432, 432, 433, 433, 433, 433, 443,
	443, 436, 434, 434, 434, 434, 434, 434, 458, 458,
	459, 459, 445, 445, 445, 445, 445, 445, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 475, 475, 438,
	439, 439, 440, 440, 441, 441, 442, 460, 460, 447,
	447, 447, 472, 472, 472, 465, 465, 465, 465, 465,
	465, 461, 461, 461, 461, 461, 462, 462, 466, 466,
	466, 466, 466, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 463, 463, 468, 468, 470, 470,
	464, 464, 473, 471, 471, 471, 469, 469, 42, 42,
	37, 37, 43, 43, 124, 125, 125, 417, 417, 417,
	411, 411, 591, 591, 591, 591, 591, 591, 591, 591,
	591, 591, 591, 591, 591, 591, 591, 591, 591, 593,
	593, 592, 592, 592, 594, 594, 594, 594, 594, 634,
	634, 408, 408, 408, 408, 412, 412, 482, 483, 413,
	413, 414, 414, 414, 414, 415, 415, 415, 415,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 2, 3,
	0, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 3, 4, 4, 6, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 1, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 5, 6, 3,
	4, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 6,
	2, 3, 5, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 3, 1,
	5, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 6, 4, 4, 4, 4, 5, 7, 7, 9,
	4, 6, 5, 5, 7, 7, 4, 7, 4, 6,
	6, 4, 5, 4, 5, 3, 11, 8, 9, 8,
	1, 0, 5, 5, 3, 3, 5, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	5, 3, 4, 1, 3, 3, 1, 2, 2, 0,
	1, 2, 0, 2, 3, 3, 3, 4, 0, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 2, 4, 1, 5, 2, 5, 2, 5, 2,
	1, 3, 3, 0, 1, 0, 3, 0, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 0,
	5, 0, 5, 0, 0, 1, 1, 3, 1, 1,
	1, 3, 3, 1, 1, 1, 2, 4, 4, 2,
	3, 5, 5, 1, 3, 1, 0, 1, 2, 3,
	2, 4, 2, 3, 2, 0, 1, 2, 0, 9,
	9, 2, 1, 4, 4, 4, 1, 0, 1, 3,
	3, 2, 1, 1, 2, 0, 1, 3, 2, 3,
	2, 3, 1, 4, 2, 3, 2, 3, 2, 3,
	1, 1, 2, 2, 4, 1, 2, 3, 3, 4,
	5, 4, 5, 4, 2, 2, 2, 1, 1, 0,
	5, 2, 2, 2, 3, 1, 0, 1, 3, 9,
	1, 2, 0, 7, 7, 0, 10, 6, 0, 4,
	5, 2, 0, 2, 4, 0, 1, 1, 0, 5,
	2, 4, 1, 1, 4, 5, 4, 0, 2, 0,
	1, 0, 1, 5, 1, 0, 2, 0, 2, 6,
	2, 0, 1, 3, 2, 4, 0, 1, 3, 2,
	1, 0, 1, 3, 3, 2, 0, 2, 2, 2,
	3, 3, 4, 1, 3, 3, 2, 7, 12, 1,
	3, 2, 3, 3, 1, 2, 2, 2, 2, 1,
	2, 13, 2, 2, 0, 2, 0, 1, 3, 3,
	1, 3, 1, 3, 3, 3, 3, 3, 0, 3,
	3, 0, 3, 0, 7, 7, 3, 0, 2, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 3, 3,
	6, 0, 3, 0, 2, 3, 2, 3, 4, 4,
	3, 3, 0, 5, 2, 5, 2, 0, 4, 2,
	1, 0, 1, 0, 1, 3, 3, 6, 7, 5,
	7, 9, 2, 0, 7, 1, 3, 1, 4, 4,
	7, 2, 1, 1, 1, 3, 2, 8, 1, 3,
	3, 5, 2, 1, 3, 7, 2, 0, 10, 1,
	2, 9, 11, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 3, 0, 1, 3, 2, 0, 1, 1,
	3, 3, 1, 1, 3, 3, 3, 3, 4, 4,
	3, 3, 2, 1, 3, 2, 1, 1, 1, 1,
	3, 0, 1, 3, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 2, 2, 1, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 0, 2, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 4,
	4, 4, 5, 5, 2, 5, 3, 5, 2, 0,
	3, 1, 2, 5, 5, 8, 3, 4, 8, 5,
	0, 4, 3, 0, 1, 3, 1, 3, 2, 2,
	4, 4, 5, 2, 0, 1, 1, 0, 2, 2,
	0, 2, 0, 13, 16, 12, 15, 14, 17, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 0, 2, 2, 1, 0, 3, 0, 1, 3,
	1, 1, 2, 4, 6, 6, 10, 1, 2, 1,
	3, 4, 0, 1, 3, 2, 1, 1, 6, 2,
	0, 3, 1, 1, 2, 1, 2, 2, 2, 2,
	3, 0, 1, 2, 1, 2, 1, 3, 2, 3,
	1, 2, 2, 2, 1, 2, 3, 1, 2, 2,
	2, 2, 3, 3, 3, 1, 3, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 0, 2, 1, 4,
	4, 5, 2, 5, 5, 7, 3, 1, 5, 9,
	3, 9, 4, 11, 10, 2, 0, 1, 3, 3,
	6, 4, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 3, 3, 4,
	0, 1, 0, 6, 1, 3, 3, 3, 5, 2,
	0, 3, 4, 4, 0, 2, 0, 4, 0, 3,
	16, 19, 1, 0, 2, 0, 4, 0, 1, 3,
	2, 0, 4, 6, 4, 6, 4, 4, 6, 4,
	6, 5, 7, 5, 7, 4, 6, 10, 13, 10,
	13, 11, 14, 1, 3, 1, 0, 1, 3, 1,
	1, 1, 1, 1, 2, 5, 3, 6, 4, 6,
	6, 9, 5, 7, 6, 6, 5, 5, 5, 5,
	9, 4, 5, 7, 6, 4, 8, 4, 2, 4,
	3, 6, 4, 3, 3, 3, 2, 2, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 4, 4, 3,
	2, 3, 2, 2, 3, 4, 3, 2, 2, 3,
	4, 4, 4, 5, 1, 4, 4, 4, 3, 3,
	2, 1, 0, 6, 4, 6, 4, 6, 8, 4,
	6, 4, 6, 5, 7, 2, 3, 3, 2, 5,
	1, 1, 2, 3, 2, 1, 1, 2, 1, 2,
	2, 4, 3, 5, 1, 3, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	6, 5, 3, 5, 1, 0, 1, 3, 2, 1,
	1, 2, 3, 4, 3, 2, 4, 4, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 3, 3, 3,
	3, 3, 2, 1, 3, 2, 3, 5, 5, 5,
	2, 1, 3, 6, 6, 6, 6, 6, 8, 8,
	6, 6, 7, 9, 9, 8, 10, 6, 6, 6,
	6, 6, 6, 6, 8, 6, 8, 6, 8, 7,
	9, 6, 8, 7, 9, 8, 10, 8, 10, 9,
	11, 8, 10, 9, 11, 8, 8, 7, 6, 6,
	6, 6, 8, 8, 8, 8, 6, 9, 0, 2,
	2, 1, 2, 2, 2, 2, 3, 1, 3, 3,
	1, 5, 3, 9, 12, 7, 7, 3, 2, 1,
	3, 1, 3, 3, 3, 3, 2, 2, 1, 1,
	1, 1, 2, 1, 1, 1, 4, 5, 1, 0,
	1, 2, 2, 2, 2, 1, 1, 1, 3, 3,
	5, 1, 4, 0, 2, 3, 0, 1, 1, 2,
	1, 17, 21, 1, 1, 2, 1, 3, 1, 1,
	1, 3, 1, 2, 0, 1, 2, 4, 1, 1,
	1, 1, 1, 3, 0, 1, 0, 1, 1, 4,
	0, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	2, 0, 9, 11, 12, 14, 3, 0, 3, 4,
	4, 0, 6, 4, 9, 7, 6, 4, 6, 6,
	5, 7, 9, 6, 6, 5, 4, 4, 3, 6,
	6, 6, 6, 4, 7, 5, 8, 7, 8, 6,
	5, 8, 1, 0, 1, 0, 4, 6, 5, 8,
	2, 0, 2, 2, 2, 1, 5, 2, 0, 2,
	6, 6, 6, 10, 6, 6, 6, 9, 9, 6,
	6, 9, 6, 7, 7, 6, 2, 2, 2, 2,
	1, 2, 1, 0, 1, 2, 10, 13, 5, 4,
	4, 2, 0, 2, 2, 1, 0, 11, 14, 12,
	15, 8, 11, 8, 7, 9, 1, 1, 3, 3,
	5, 6, 1, 3, 1, 3, 1, 3, 3, 7,
	9, 9, 8, 6, 1, 0, 1, 3, 3, 1,
	5, 3, 8, 11, 6, 1, 0, 5, 2, 3,
	0, 2, 0, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 2, 2, 1, 2, 2, 2, 2, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 2, 0,
	2, 0, 4, 1, 3, 1, 2, 2, 2, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	11, 13, 5, 1, 2, 2, 1, 1, 3, 5,
	1, 3, 7, 2, 0, 5, 5, 10, 8, 2,
	0, 2, 0, 1, 1, 1, 1, 1, 2, 0,
	2, 0, 4, 0, 5, 0, 8, 1, 1, 8,
	11, 6, 8, 1, 3, 1, 1, 3, 4, 7,
	6, 5, 5, 5, 5, 1, 3, 4, 4, 4,
	3, 4, 3, 1, 4, 0, 8, 5, 5, 6,
	7, 7, 7, 4, 4, 5, 11, 10, 10, 2,
	2, 0, 13, 2, 0, 1, 3, 5, 5, 3,
	6, 2, 1, 0, 2, 4, 0, 1, 3, 6,
	8, 8, 1, 3, 5, 5, 10, 10, 11, 11,
	5, 5, 6, 10, 1, 0, 2, 0, 1, 0,
	2, 2, 1, 1, 0, 4, 0, 1, 3, 1,
	1, 1, 1, 1, 2, 4, 4, 5, 2, 0,
	3, 1, 3, 4, 3, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 3, 3,
	3, 0, 1, 4, 2, 2, 2, 2, 2, 3,
	2, 2, 3, 0, 2, 2, 1, 1, 1, 0,
	2, 4, 5, 6, 4, 5, 2, 3, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 2, 3, 2, 5, 4, 3,
	3, 3, 3, 3, 1, 1, 0, 2, 3, 0,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 0,
	3, 6, 3, 5, 3, 5, 3, 5, 2, 0,
	2, 0, 1, 2, 2, 2, 3, 3, 2, 2,
	3, 3, 1, 1, 3, 3, 2, 1, 1, 8,
	8, 11, 5, 7, 6, 9, 5, 2, 0, 3,
	3, 3, 7, 7, 10, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 5, 1, 3, 2, 2,
	2, 2, 2, 1, 2, 2, 4, 3, 2, 2,
	2, 2, 2, 2, 3, 2, 2, 2, 2, 5,
	5, 5, 5, 5, 1, 3, 1, 2, 3, 0,
	3, 1, 2, 1, 1, 1, 3, 0, 1, 3,
	1, 3, 1, 3, 6, 4, 0, 5, 5, 5,
	1, 2, 4, 5, 1, 1, 1, 1, 3, 3,
	2, 2, 1, 2, 2, 2, 2, 1, 2, 1,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 2, 1, 3, 7, 4, 1,
	3, 4, 6, 4, 8, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -430, -169, -175, -176, -177,
	-178, -179, -180, -181, -182, -183, -184, -416, -417, -418,
	-419, -476, -477, -478, -479, -480, -481, -482, -483, -484,
	-485, -486, -487, -488, -489, -510, -511, -512, -513, -514,
	-515, -516, -517, -490, -491, -492, -493, -494, -495, -496,
	-497, -498, -499, -500, -501, -502, -503, -504, -505, -506,
	-507, -508, -509, -421, -422, -429, -431, -432, -433, -434,
	-435, -436, -437, -438, -439, -440, -441, -442, -423, -424,
	-428, -425, -426, 266, 212, -171, -172, -260, 111, 26,
	22, 27, 394, 93, 401, 191, 436, 228, 407, 413,
	397, 378, 290, 405, 274, 475, -453, 428, -174, -173,
	-259, 531, 119, 202, 63, 67, -267, 36, 518, 86,
	540, -633, 486, 457, -633, 96, 97, 98, 99, 531,
	-218, 115, -376, -339, -27, 33, 414, 261, 62, 464,
	454, 225, 276, 284, 422, 103, -404, 268, 449, 375,
	194, 438, 387, 443, 512, -539, 406, 71, 453, 451,
	58, 289, 473, 471, 40, 67, 307, 419, 480, 85,
	284, 104, 199, 225, 236, 247, 261, 286, 71, -541,
	62, 375, 385, 387, 409, 414, 422, 443, 412, 460,
	268, 406, 103, 449, 438, 454, 464, 276, 40, 384,
	-371, -374, -373, 464, 261, 307, 103, 406, 71, 67,
	419, 480, 85, 284, 225, 236, 438, 454, 194, 268,
	276, -541, 387, 414, 422, 375, 412, 460, 85, -573,
	58, 423, 457, -574, -572, -237, 56, 217, 414, 347,
	406, 488, -5, 4, -19, -20, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 22, 201, 203, 204,
	205, 55, 206, 207, 208, 210, 211, 212, 88, 70,
	213, 214, 215, 24, 216, 218, 219, 220, 221, 222,
	223, 123, 226, 227, 228, 229, 230, 141, 231, 101,
	232, 233, 234, 235, 236, 111, 237, 154, 238, 120,
	121, 90, 246, 247, 248, 249, 250, 251, 253, 254,
	98, 149, 150, 255, 89, 256, 257, 258, 259, 260,
	261, 176, 27, 262, 138, 264, 148, 265, 267, 136,
	42, 268, 270, 271, 272, 273, 274, 275, 276, 277,
	279, 281, 282, 91, 283, 153, 165, 285, 286, 287,
	288, 289, 291, 294, 295, 151, 296, 297, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 312, 313, 314, 96, 315, 317, 318, 145,
	503, 319, 320, 321, 322, 92, 324, 327, 328, 329,
	332, 333, 334, 335, 336, 337, 105, 85, 338, 99,
	340, 341, 342, 343, 344, 345, 346, 131, 348, 349,
	350, 351, 352, 353, 354, 357, 110, 358, 359, 32,
	139, 122, 504, 505, 502, 144, 62, 506, 507, 124,
	501, 508, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 373, 374, 375, 377, 378, 379, 380,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 390, 391, 84, 132, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	407, 408, 409, 410, 127, 412, 413, 146, 415, 416,
	87, 417, 418, 419, 420, 421, 422, 93, 425, 427,
	428, 429, 430, 431, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 445,
	446, 104, 448, 449, 108, 451, 452, 453, 454, 455,
	458, 460, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 50, 472, 473, 474, 97, 475, 476, 477, 478,
	155, 183, 479, 480, 481, 482, 483, 485, 168, 486,
	140, 487, 498, 499, 57, 37, 173, 169, 189, 179,
	178, 224, 188, 187, 29, 278, 175, 292, 293, 500,
	186, 171, 185, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 325, 339, 181, 182, 355, 356,
	360, 170, 361, 362, 376, 177, 174, 411, 426, 172,
	444, 184, 459, 461, 86, 180, 489, 490, 491, 492,
	493, 133, 494, 495, 496, 497, 125, -576, -575, 56,
	457, 423, -237, 21, 217, 58, 347, 406, 414, 488,
	-633, 457, -633, 379, -633, 379, -5, 423, 457, 56,
	413, -5, 457, -461, -462, 21, -466, 63, 392, 26,
	22, -5, -461, 290, -462, -5, -427, -453, 118, 531,
	-169, -175, -176, -177, -178, -476, -477, 26, -215, 531,
	79, -213, 531, 118, -237, 56, 457, 423, 21, -160,
	-121, 470, 316, 269, 509, -173, -174, -172, -171, -172,
	-259, -251, -252, 21, 41, -400, -398, -401, -5, 66,
	541, -261, 84, -263, -7, -5, -261, 531, -3, -444,
	30, -457, -456, -616, 318, 389, 252, 31, 73, -402,
	-400, 64, 73, -170, -169, -398, 67, 480, 84, 419,
	307, 286, 385, 460, 117, 199, 458, -540, 463, 34,
	-18, -5, 28, -15, -5, -146, 221, 279, -149, -5,
	11, -150, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -15, 87, -15, 28, -7, 28,
	246, 67, -7, 28, 336, -11, -467, -9, 241, 245,
	424, 4, -19, -20, -21, 209, 115, 225, 25, 81,
	242, 116, 79, 44, 76, 52, 53, 75, 77, 46,
	82, 54, 80, 363, 78, 48, 450, 118, 85, 460,
	-7, -7, 340, -362, 28, -15, -7, -7, 531, 236,
	-11, -11, 453, 451, 453, 451, -400, 28, 21, -398,
	28, 21, -398, 28, -398, 28, 480, 67, 246, 93,
	401, -409, -579, -95, -5, 4, -19, -21, -15, -15,
	-7, -15, -408, -579, -21, -5, -11, -467, 321, 221,
	279, -7, 28, -408, -7, -408, -7, -7, -7, -7,
	-7, 460, -11, -467, 21, -11, 336, -467, 21, -7,
	-15, 28, 87, -15, -7, 383, 28, -17, -15, 28,
	-13, -7, -7, 28, -234, 28, -99, -100, -102, -103,
	-109, -105, -108, -95, 186, 171, 172, 173, 174, 175,
	176, 187, 188, 170, 189, -110, -111, -106, -107, 184,
	56, 4, -19, 169, -96, 178, 179, 180, 181, 182,
	-234, 28, 25, 336, -365, 28, -467, -365, 28, -365,
	28, 480, 246, 67, 87, 340, 460, 321, 480, -573,
	423, -573, 219, 209, -456, 431, 64, 61, 527, 533,
	57, -94, 7, -94, -617, -94, 40, -236, -9, -94,
	506, 57, 318, 209, -444, -457, -444, -94, -444, 61,
	-94, -5, -94, 74, 61, 541, 383, 531, -225, 531,
	-225, -225, 104, -225, 74, 506, 64, 506, -213, -427,
	-448, -451, -452, 86, -9, -453, 515, 473, -212, 116,
	-448, -449, -450, -455, -398, -448, 57, 318, 209, -138,
	-47, -140, 130, -48, -49, -142, 68, 280, 69, -143,
	-45, 21, 41, -45, -45, 70, -160, -121, 532, 532,
	-239, -238, -241, -56, 536, -58, 534, 535, -145, 31,
	516, -120, 471, 40, -60, -59, 13, 531, -63, -61,
	-172, 29, 134, -69, -70, 293, 11, 62, 411, -5,
	-92, 6, -94, 49, 43, 47, 9, 10, -579, -622,
	-101, 38, -122, -297, -62, 12, -103, -623, -624, -108,
	-625, 185, 161, 162, 225, 240, 243, 244, 330, 331,
	241, 245, 424, 447, 103, 239, 242, 512, 278, 356,
	362, 376, 444, 459, 461, 360, 224, 292, 325, 490,
	491, 493, 494, 492, 495, 496, 159, 160, 166, 164,
	158, 339, 156, 163, 157, 497, 173, 169, 189, 179,
	178, 188, 187, 175, 186, 171, 181, 182, 170, 174,
	172, 56, 184, 180, -110, -111, -106, -107, -238, 74,
	536, -87, -90, 533, 529, -398, 531, 531, 541, -261,
	-24, 531, -119, -56, 218, 354, 541, -616, 327, 66,
	487, 252, -399, -398, 93, -5, 23, -402, -402, 532,
	-225, -398, 28, -398, 480, -398, 28, -28, 25, -579,
	-579, -7, 460, -579, 130, -541, -376, 473, 209, -406,
	31, -568, 23, -113, 533, -394, 531, -15, -15, 533,
	-394, 23, 368, 257, 452, 231, -394, 64, 31, -29,
	36, 518, 31, 140, -398, 28, -528, 464, 31, 130,
	28, -29, 480, -7, -537, 365, 74, -7, -24, 31,
	-393, 130, 36, 232, -99, -15, -29, -29, -364, -367,
	398, -366, 207, 256, 196, 22, 27, 477, 93, 223,
	264, 258, 309, 354, 122, 31, 365, 401, 400, 153,
	-31, 507, 29, 45, -364, -368, 398, 207, 29, 45,
	-364, 398, -387, -390, 354, 23, 213, 90, 305, 335,
	338, 342, 364, 419, 436, 402, 473, 29, -364, 398,
	29, -398, 28, 21, -400, 28, 140, -572, -237, -575,
	398, -39, 531, -87, 398, 398, 398, 398, -370, 27,
	93, 196, 477, 398, -411, -591, 215, 404, 441, 300,
	434, 482, 277, 418, 324, 31, 237, 127, 445, -578,
	366, 93, -422, -39, -87, 398, -475, 196, 27, -7,
	-15, -15, 74, 29, 398, -411, 398, 93, 196, 27,
	398, -411, 398, 398, -529, -31, 479, 398, 93, 232,
	394, 196, 27, 264, 258, 430, 74, 74, -7, 398,
	-29, -443, 45, -443, 398, 130, -29, -443, -443, 398,
	93, 401, 398, 93, 29, 368, 257, 452, 231, 398,
	196, 27, 93, -413, -414, 22, 97, -475, -460, 29,
	541, -397, 24, 35, 29, 541, -397, 74, 29, 541,
	-397, 29, -114, -113, 531, -104, 531, 177, -114, -114,
	-114, 531, -117, 518, 519, 531, -117, -118, 183, 531,
	-118, -118, 178, 179, -118, -397, 29, -17, 28, 130,
	28, 541, 29, 29, 29, 140, 368, 257, 452, 231,
	-28, 219, 23, -236, 40, -94, 120, -240, 40, -232,
	-235, -231, 49, 43, 74, -236, 6, 534, 535, -93,
	-92, -240, 40, -5, -615, -94, 4, -231, 40, 58,
	49, 43, 74, 504, -619, 260, 234, 327, 413, -5,
	-474, -16, 67, 419, 284, 286, 385, 409, 247, 261,
	321, 322, 367, 414, 449, 464, 21, -398, -365, -466,
	531, -14, -5, -14, -474, 130, -365, 130, -427, 532,
	541, -454, -235, -231, -213, 532, 541, -24, 532, 327,
	-46, -47, -139, -138, -142, 130, 389, 97, 354, 427,
	503, -49, -48, -50, -56, 21, -55, 91, 349, -51,
	-52, -56, -58, 534, 535, -141, 122, -173, -173, -173,
	-161, -164, -56, -138, -47, -254, 73, 541, 14, 39,
	55, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -145, 30, 33, 46, 516, 44, 48,
	52, 53, 54, 37, 45, -148, 23, -8, 11, 62,
	-149, 4, -23, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 21, 200, 22, 201, 202, 119, 510, 94,
	203, 204, 205, 60, 206, 207, 208, 209, 210, 211,
	212, 173, 115, 169, 189, 511, 88, 70, 213, 214,
	215, 24, 216, 38, 512, 217, 218, 219, 513, 220,
	221, 222, 223, 224, 225, 514, 123, 226, 227, 228,
	229, 230, 25, 141, 231, 101, 232, 117, 233, 234,
	235, 236, 111, 237, 81, 154, 238, 120, 239, 240,
	241, 242, 243, 244, 245, 121, 90, 246, 247, 249,
	188, 187, 250, 40, 251, 252, 253, 254, 98, 149,
	150, 255, 89, 95, 256, 257, 258, 259, 41, 109,
	260, 261, 176, 27, 262, 263, 138, 264, 148, 265,
	266, 267, 136, 42, 268, 270, 271, 272, 273, 29,
	274, 275, 276, 277, 278, 43, 279, 282, 91, 175,
	283, 153, 284, 165, 285, 116, 79, 286, 287, 288,
	289, 291, 292, 293, 294, 295, 151, 296, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 76, 500, 313, 314, 96, 315,
	186, 171, 185, 317, 318, 75, 166, 160, 162, 163,
	159, 161, 156, 164, 158, 126, 157, 145, 503, 319,
	320, 321, 322, 92, 323, 326, 324, 325, 77, 327,
	328, 329, 58, 330, 331, 332, 333, 334, 335, 336,
	337, 105, 85, 338, 99, 339, 340, 342, 343, 345,
	346, 347, 181, 82, 182, 131, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 31, 110, 358, 359,
	47, 360, 32, 170, 139, 122, 504, 505, 502, 144,
	66, 506, 507, 124, 501, 361, 80, 362, 102, 364,
	365, 366, 367, 368, 369, 370, 129, 371, 128, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 112, 387, 152, 143, 388, 389,
	174, 390, 391, 84, 132, 392, 393, 394, 395, 396,
	397, 398, 399, 34, 400, 401, 402, 35, 403, 404,
	405, 78, 406, 407, 408, 409, 410, 411, 127, 412,
	413, 146, 414, 415, 416, 87, 418, 63, 419, 420,
	421, 422, 423, 424, 93, 426, 425, 427, 428, 429,
	430, 172, 431, 432, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 444,
	445, 59, 446, 104, 447, 67, 448, 450, 449, 108,
	451, 452, 453, 454, 106, 455, 56, 184, 456, 457,
	458, 459, 460, 461, 49, 462, 463, 464, 465, 466,
	467, 468, 142, 469, 471, 50, 472, 473, 474, 97,
	103, 83, 475, 476, 477, 478, 155, 86, 180, 190,
	118, 479, 480, 481, 482, 51, 483, 486, 140, 487,
	488, 489, 490, 491, 492, 493, 133, 494, 495, 496,
	497, 125, 499, 57, -56, -56, -56, -56, -56, 363,
	-340, 32, -88, -56, -119, -172, -87, -172, -172, -68,
	529, 531, 531, 531, -87, -94, 531, -94, -94, 531,
	-64, -56, -126, 485, -123, 281, 531, 531, 130, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, -254, 531, -90, -97, 536, -6, 4, -19,
	-20, -21, -22, 21, 202, 119, 30, 510, 134, 23,
	94, 60, 511, 38, 512, 513, 39, 514, 117, 26,
	239, 240, 241, 243, 244, 245, 40, 252, 95, 41,
	109, 263, 266, 269, 43, 280, 130, 284, 64, 290,
	71, 72, 45, 311, 316, 73, 323, 326, 68, 330,
	331, 31, 47, 69, 74, 66, 33, 509, 372, 381,
	392, 100, 63, 424, 432, 59, 447, 67, 106, 61,
	456, 49, 470, 471, 103, 83, 190, 51, 65, 484,
	36, -56, -91, -398, -119, -263, 23, -13, 541, 532,
	39, 55, 30, 33, 46, 44, 48, 52, 37, 45,
	62, 218, -616, -618, 389, 399, 421, -185, -169, 102,
	531, 40, 23, -187, -193, -191, 531, -5, -5, -262,
	83, 83, 61, -210, 64, 61, 531, 122, 370, 31,
	-225, -398, -520, -387, 354, 31, -18, 28, -5, -580,
	531, -580, -598, 211, 198, 315, -7, -563, -565, 531,
	-99, 321, 480, 84, -467, -407, -180, -181, -418, -419,
	26, 29, -99, 533, -97, -395, -396, -6, -539, 83,
	-146, 531, 267, 388, -15, -15, -15, -15, -15, 29,
	-521, 29, -7, 531, 370, 31, -530, -529, -94, 29,
	-531, -467, 103, 31, -458, -405, 28, -398, 74, 332,
	-467, -398, 464, 74, 29, 21, -551, -556, 67, 448,
	-5, -401, 242, -398, -394, -94, 23, 130, -458, -458,
	541, 61, -629, 117, 514, 370, 370, -319, 28, 514,
	-320, -5, 117, -336, 513, 471, 381, 284, 270, -629,
	117, -629, 117, 117, 168, 335, 473, 194, 449, -352,
	531, 74, 460, 201, 400, 412, 411, 460, 412, 411,
	-398, 309, 153, -15, 122, 61, -352, 298, 411, 531,
	-400, 449, 61, 370, -398, 449, 61, -390, 90, 338,
	342, -100, -231, -628, 70, -231, -231, 70, 346, -29,
	-29, -398, 61, -629, -398, -364, 398, 29, 45, -364,
	398, 29, -7, 61, -40, 532, -583, -585, -98, -112,
	45, 361, 500, 190, -95, -99, 426, 61, 61, 61,
	61, 117, 40, 31, 117, 40, 31, -569, 117, -570,
	513, 31, 117, 61, -634, -591, 35, 74, 47, 418,
	254, 317, 324, -231, -231, -15, -5, -574, 423, 457,
	61, 103, 398, 83, 83, -398, -7, 61, -634, 61,
	-394, -551, -551, -551, 61, -634, 61, 61, -31, -94,
	47, 61, -394, 387, -94, 387, 387, 387, -394, -398,
	-398, 398, -536, 264, 258, 61, -459, -577, 93, -422,
	247, -577, 61, -531, -459, -577, -577, 61, -352, -352,
	61, 438, -15, -15, -15, -15, -15, 61, 208, 155,
	155, 208, 155, 208, 531, 541, 208, -522, -372, -371,
	199, 512, 261, 286, 62, 385, 409, 458, 464, -374,
	247, 406, 443, 449, 307, -472, -447, 290, 405, 45,
	130, -17, -15, -13, -7, -15, -7, -99, -234, -114,
	-119, -92, -92, 56, 56, -92, 531, -92, -118, -118,
	-234, -397, 29, -531, 29, -467, -365, -365, -365, -398,
	457, 541, -92, 6, -92, 6, -5, 61, 541, -16,
	-16, 246, 422, -412, -408, -412, -412, -13, -17, -13,
	139, -42, -37, -5, -13, -13, -17, 448, 420, 287,
	386, 410, -469, 36, 291, -14, 541, 532, 532, 64,
	-461, -462, -469, -462, -427, -451, -214, 119, -449, -455,
	-449, 66, 503, 427, 541, -52, -54, -58, 534, 535,
	411, 127, 531, -54, 411, 127, -53, -92, 6, -53,
	-144, 359, 430, -16, 541, 83, -153, 94, 95, -46,
	-139, -242, 64, -392, 453, 451, 58, 289, 473, 67,
	-398, -241, -99, -15, 56, 58, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, 46, 44, 48, 37, 45, -56, 61, 47,
	31, 49, 43, 50, 41, 260, 357, -157, -156, 350,
	351, 352, 353, 166, -152, 59, 60, -151, -172, 531,
	-155, 510, 432, 21, -6, 531, -120, 411, 531, -172,
	41, 31, -90, 532, 541, -119, -71, 530, -68, -119,
	-146, -119, 532, -73, 532, 536, 190, 21, 41, -86,
	-56, -98, -95, -115, 498, 344, 248, 297, 341, -116,
	417, -92, -67, -66, 51, -123, 71, -132, 508, 531,
	-298, -58, -56, -293, -56, 531, -92, -92, -92, -92,
	-56, -78, -12, 4, 498, 344, 248, 297, 341, 417,
	-94, -56, -79, -74, -56, -73, -80, -57, -58, 534,
	535, -145, 411, -76, -74, -56, -56, 511, 326, 456,
	-77, -56, 64, -119, -56, -119, -119, -119, -119, 346,
	-81, -192, -56, -619, -58, 346, -56, -73, -299, -303,
	-298, 100, -56, -296, -171, -303, -293, -172, -293, -56,
	-293, 532, -293, -293, -293, -619, -242, -119, 530, 542,
	532, 532, -264, 85, 31, 532, -56, 468, 229, 389,
	-194, 74, -207, 103, 104, -186, -190, -5, 86, -5,
	-242, 541, 527, -188, -191, -88, -195, 65, -243, -244,
	-400, -172, 323, -255, 531, -268, -278, -288, -269, 127,
	125, 126, -5, -122, -62, -297, -579, 166, -244, -211,
	112, -211, -314, -315, -318, -319, -321, -320, 46, -15,
	122, 29, -363, 36, 531, 29, 74, 31, 404, -587,
	-588, -590, 23, 321, 458, 484, -591, -581, 532, -582,
	-583, -587, -600, -599, 96, 98, 97, 462, 122, 198,
	-394, 536, -564, 509, -566, -571, -567, -583, 4, 321,
	-7, -398, 480, -406, -376, -27, -18, -5, -333, -97,
	532, 541, 527, 130, -7, -271, -270, -272, -5, 531,
	-394, -394, -394, -394, -394, -15, -523, 414, 479, 64,
	24, -7, -525, -526, -527, 295, 354, 478, -314, 122,
	29, 284, -7, 422, 29, -445, -446, 446, 197, 406,
	45, 371, 265, 469, 309, 4, 232, 476, 103, 23,
	31, -225, -6, 7, -538, 23, -548, 307, 67, -550,
	-555, -5, -269, 531, -15, 448, -393, 541, -400, 45,
	-87, -225, -225, 387, -99, -94, -366, -7, -7, -7,
	-398, -398, 31, -319, 28, -99, -7, 531, -340, -358,
	83, 503, 503, -359, 83, -5, -92, -7, 28, -5,
	28, -7, -7, 505, 223, 340, -7, -353, -354, -6,
	-7, -7, 21, 103, 460, 412, 460, 412, -7, 327,
	-7, 21, 103, -7, 327, -398, 411, -467, -38, 110,
	79, 40, 83, 327, -32, -35, -384, 93, 196, 27,
	-10, -6, -364, -367, 398, -7, -7, -398, -364, 398,
	-7, -7, -231, -15, -15, -231, -231, -364, 398, -387,
	-7, -7, -364, 398, 61, -629, -398, 449, 61, -629,
	-400, 398, -525, -526, -7, 532, 541, -98, -112, -585,
	-112, -95, 361, -113, -95, -7, -7, -7, -7, -7,
	47, -7, 28, -56, 47, -7, 531, 47, -7, -7,
	47, 74, 254, 317, -11, -365, 61, -7, -7, 398,
	-545, 61, 74, -7, -7, -7, -7, -7, -7, -13,
	-393, -13, -13, 398, 398, 61, 400, 201, -11, -446,
	-573, -7, -11, 422, -7, -7, -34, -93, 40, 534,
	535, 93, 398, 398, 398, 398, -7, -7, -94, -26,
	28, -272, -94, 28, -5, -593, -592, -6, -414, 196,
	27, -5, -524, 61, -7, -15, -409, 531, -99, -408,
	-410, 221, 279, -146, -408, -408, 130, -99, -461, -461,
	290, 414, 406, 103, -397, -397, -397, 74, -397, 532,
	532, 532, 57, 57, 532, -119, 532, -397, -17, 422,
	130, -403, 36, -456, -232, -463, -468, -467, 71, -398,
	140, -13, 541, -43, -231, 541, 533, 45, 45, 45,
	45, 45, -464, -473, -6, 70, 532, -5, -463, 74,
	-397, 64, -449, 97, -51, -54, 66, 36, -92, 6,
	531, -119, 334, -164, -147, -149, 62, -154, 517, -245,
	65, -243, -626, 67, -626, 453, 451, 453, 451, -626,
	-398, 57, 42, -56, -56, 61, -152, 59, -151, 42,
	-56, 47, 49, 43, 50, 41, 260, 357, -157, -156,
	64, 357, -158, 36, 168, 155, 134, 139, 146, -57,
	-57, -119, -172, 531, -146, 531, -119, 41, -88, -56,
	530, 530, 541, 532, 532, 532, -121, 541, -160, 532,
	-86, -73, -73, 16, 17, 61, 61, 61, 61, 531,
	532, -65, -66, 263, -56, -132, 531, -131, -5, 531,
	65, -300, 47, 192, 155, 542, -302, 509, -312, -311,
	515, -56, 532, 532, 532, 532, 23, 532, 64, 532,
	541, 532, 532, 372, 541, 532, 14, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, -145,
	52, 45, 62, -57, -57, -57, 532, 532, 48, 64,
	130, 23, -77, -77, -77, 532, 64, -119, 541, 532,
	532, 532, 532, -6, 532, 541, 23, -56, -284, 129,
	-6, 541, 532, -300, 541, 532, -99, -301, 541, 47,
	192, -312, 532, -158, 532, -303, 541, 541, 541, -56,
	-245, 532, -91, -56, 531, 85, -196, 100, 101, 155,
	532, 541, -88, -195, -193, -56, 532, 541, -196, -56,
	120, 541, 81, -256, 75, 82, 79, 77, 78, 76,
	-248, -247, 23, -5, -248, -172, -268, -278, -288, -172,
	-255, -244, -250, -247, 23, -5, -248, -248, -277, 518,
	64, 531, 531, -87, 531, 74, -217, -94, 113, 114,
	-217, 532, 541, -398, -316, 531, -398, -398, 23, -352,
	-14, -398, -400, 29, -586, 67, -112, -596, -420, 212,
	403, -590, -595, -94, -236, -589, 130, 532, 541, 40,
	527, -596, 74, 33, 122, -600, 532, 532, 509, 541,
	70, 532, 541, 527, -7, 295, -225, -398, 209, -406,
	-334, 117, -335, -337, 39, 31, 47, 471, 381, 513,
	40, 392, 288, 252, 311, -396, -375, -112, -22, -147,
	-231, -94, 355, 62, 534, 535, 464, 532, 541, -99,
	-518, -519, -94, -394, 64, -7, -236, -236, -29, -382,
	507, -527, -532, -7, 295, 478, -532, 532, -398, -398,
	246, -528, -7, 130, -92, -365, -365, 406, 71, -94,
	47, 371, 371, 68, 474, -365, -169, 29, -377, 83,
	273, 51, -363, -542, 130, 4, 295, 64, 541, -56,
	-24, -393, -556, -225, 414, -225, -246, 65, -246, -13,
	532, 61, 61, 61, -324, 130, 40, -28, 282, 29,
	31, -381, -380, 439, -336, 270, -56, 531, -331, 307,
	531, -358, 531, 531, -7, -370, 27, 93, 401, 196,
	-389, -233, -31, -391, 402, 93, -331, 29, -397, 29,
	-397, -36, -5, 40, 532, 541, 527, 533, -7, -7,
	-7, -7, 418, 418, 327, 307, 418, 532, 541, -384,
	-384, -10, -33, -94, 61, -629, 117, 93, 364, 61,
	93, 364, 61, 61, 61, -629, -7, -7, -364, 398,
	-7, -7, -7, -364, 398, 61, -31, -583, -112, -112,
	538, -113, 61, -397, 29, -570, -56, -331, 313, 47,
	-7, 398, 398, 196, 27, 61, -546, 83, -365, -398,
	-393, -393, -393, 61, 61, -7, -7, 438, 61, 61,
	61, 61, 61, 61, -94, 31, -397, 29, -397, 541,
	532, 527, -233, 93, -236, -99, -15, -15, -89, 531,
	-99, 74, 74, 506, -13, -365, -365, -15, -117, -117,
	532, -397, -7, -531, 246, 354, -470, 541, 36, -467,
	-13, -408, 541, -37, -5, 414, 414, 414, 414, 414,
	-469, 541, -471, 506, 49, 43, -467, -469, -474, -365,
	66, 36, 455, -119, 532, 541, -154, 531, 91, 92,
	-44, 71, -56, -398, -398, -626, -626, -626, -626, -398,
	-56, -56, 42, 42, -56, -57, -57, -56, 42, 64,
	357, -158, -56, 471, 471, 30, 30, 532, -56, 532,
	-119, 532, 541, 532, -68, 532, 190, -86, -121, -121,
	-121, -56, -56, 344, 297, 341, -116, 341, -116, -116,
	-92, -94, 266, -56, 106, -160, -133, -5, -56, -158,
	74, 74, -293, -293, -301, 70, 166, 532, -99, -56,
	-157, -56, -99, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, 41, 31, 260, -57,
	-56, -56, -56, -99, 532, 532, 532, -119, -56, 532,
	541, -192, -6, -82, 380, 442, 532, -58, -285, 70,
	532, 541, -84, 479, -158, -298, -312, -303, -293, 74,
	74, -303, 532, 532, -56, -56, -56, 23, -44, 530,
	-170, -238, -201, 531, 74, -169, -169, 102, -190, -196,
	527, -191, 122, -244, 75, 75, -244, -256, 75, -257,
	80, -257, -257, -124, 450, -5, 531, -248, -250, -248,
	-248, 532, -5, 531, 531, 124, 531, -58, 133, -293,
	-73, -56, -29, -219, -627, 83, -347, 310, -318, -329,
	-348, -349, 370, -317, -322, -323, -320, -5, -316, 531,
	122, 370, -169, 532, -520, -359, -7, -587, 531, 206,
	-56, 541, 541, 464, -582, -56, -56, -398, -599, -14,
	74, 70, -571, -564, -567, 4, -375, 531, -532, -363,
	531, -467, -7, -15, 252, 47, -340, 503, 531, -57,
	-398, -386, 201, 70, 253, 299, -99, -272, -283, 39,
	532, 541, -15, -521, 531, -113, -347, -316, 531, 370,
	140, -530, -382, -531, -365, -365, -94, -94, -93, -94,
	-403, -405, -363, -7, -630, 286, 385, -533, -535, -5,
	-544, 61, -543, 21, 63, 96, 97, 98, -532, -243,
	-555, 532, 74, -246, -5, 242, -246, 531, -393, 36,
	168, -94, -7, -7, 86, -319, 29, -379, -378, 230,
	-5, 40, 532, -14, -332, 31, 252, 311, 354, -7,
	-14, -331, -14, -327, -326, -205, -5, -269, 531, 31,
	275, 298, 246, -390, 288, 31, 275, 438, -352, -380,
	-378, -352, 288, -391, 93, 464, -29, 438, -5, -7,
	-354, -375, -6, 418, -7, -35, -7, -7, -7, 449,
	70, -7, 449, 70, -7, -7, -7, -7, 61, 61,
	-629, 93, 364, 61, 61, -629, -7, 464, 538, -7,
	-7, 532, 313, 61, 61, -552, -557, 62, 286, 439,
	-553, -558, 62, 286, -7, -547, 36, 531, 398, -7,
	-7, -31, -34, -7, -7, -7, -7, -7, -94, 211,
	198, 29, -5, -592, 355, -594, -112, -22, -147, -231,
	-94, 464, 23, 83, 83, -99, 355, 321, -465, 448,
	287, 410, 420, 465, 415, -465, 130, -397, 422, 246,
	-469, -468, 290, -231, -13, -13, -13, -13, -13, -473,
	-397, 64, -469, 455, 532, -56, -146, -163, 72, 70,
	-398, -398, -398, -398, -56, -56, 42, 30, 30, -56,
	-56, 319, 319, -56, -56, 532, 532, -56, -94, -86,
	532, 532, 532, 532, -56, 532, -129, 370, 532, -303,
	47, 47, -303, -161, 148, 532, 532, 64, 64, 41,
	260, 42, 130, 64, 532, 532, -72, -119, 489, 532,
	483, 483, -285, 70, -58, 132, 155, -56, -85, 541,
	-56, 354, -303, 532, 47, 47, 532, -304, 129, -304,
	-304, -100, -163, 532, 109, -227, -205, 117, -207, -56,
	-216, -7, -244, -244, -258, 83, 74, 75, -244, -579,
	531, -13, -247, 531, -270, -270, -5, -273, -274, -269,
	-284, 531, 541, -121, -189, -199, -208, -209, 51, -221,
	-222, 531, -29, 150, -348, 531, 304, 271, -377, 70,
	532, 541, -333, 36, -324, -314, -15, 122, -613, 36,
	-363, 531, 74, -596, -276, -584, -98, -95, -614, -94,
	130, -99, -605, 393, -398, -564, 532, -554, 64, 61,
	-560, 312, 23, -14, -406, -335, 31, -393, -393, -56,
	-225, 23, 40, 83, -15, -94, -383, -384, 422, -324,
	-314, 122, -7, 284, 422, 23, -356, 449, -579, 273,
	30, 45, -546, -365, -550, -56, 286, 500, 286, 64,
	36, 45, 64, -319, -382, -5, 40, -331, 532, 252,
	476, 299, 253, 309, 532, 532, 532, 541, 36, -206,
	-198, 39, -206, -56, 47, 28, 28, -386, 47, 23,
	-34, -386, -99, -231, -34, -397, -397, 527, 61, 61,
	-7, -365, -7, -365, 61, -7, -7, -7, 449, 70,
	-7, -7, -7, 464, -397, -331, -7, -7, 541, -92,
	-92, -99, 541, -92, -92, 513, -56, 61, -397, -94,
	-94, -397, -99, -99, -7, -7, 532, 541, 541, -7,
	61, 64, -461, -7, 506, -463, -397, 532, 532, -127,
	484, -56, -45, -56, -56, -56, 532, -121, -121, 70,
	532, 532, -7, -56, -57, 64, -56, -56, -56, 532,
	541, 532, 531, -285, 532, 532, 435, 155, 532, -303,
	-294, -295, -293, -305, -306, 40, -307, 136, 47, 49,
	43, 50, 138, -303, -83, 306, 354, -127, -265, 87,
	97, 110, 532, 541, -7, 155, -258, 531, -56, -244,
	531, -13, 532, -270, 532, 532, 532, 541, -275, 23,
	123, -286, -287, -57, 40, -56, 532, -196, -199, -200,
	30, -200, 105, 31, -220, 115, 116, 149, 47, 154,
	151, 152, 42, 153, 148, -223, -228, -6, -221, -94,
	-377, -16, -330, 227, 230, 233, 251, 298, 288, 308,
	438, 439, 21, -330, -41, 36, 168, -5, -322, 507,
	-348, 532, -316, -398, 513, 216, 58, 23, -227, -400,
	541, 532, -112, 266, -597, -4, -420, 464, -601, 130,
	-606, -608, -603, 348, 502, -612, 64, 532, 532, 433,
	433, -561, -562, 478, 354, -532, -169, 532, -357, 83,
	-357, 532, -341, 337, 298, 531, -7, 532, 541, -7,
	422, 532, -398, -382, 246, -7, -169, -7, 531, -630,
	-535, 531, -547, 64, 532, -408, -549, 23, -549, -15,
	531, 531, 531, -333, -342, 303, -342, 392, -342, -326,
	-146, 62, -362, -15, -15, 532, 29, 29, 531, 23,
	-283, -375, -7, -7, -369, 359, 93, -369, 93, -7,
	61, -7, -365, 61, -557, -146, -410, -408, 531, -558,
	531, 531, 531, 532, -7, -283, 532, -99, 355, -99,
	-463, -463, 74, -469, -128, -130, -5, -159, -162, -56,
	-165, -167, -166, -168, 531, 238, 408, 293, 532, -134,
	388, 127, 294, -119, 130, -57, -119, -81, 499, 354,
	-309, 168, 36, 541, 23, 532, 74, -56, 134, 139,
	-308, -306, 532, 306, -266, 90, 89, 88, 93, -245,
	-205, -169, -13, -119, 532, 532, -277, -274, 531, -279,
	-280, -5, 541, 532, 23, -57, -292, 23, 106, -56,
	106, 105, -568, -568, -568, -568, 152, 31, 47, -94,
	532, 541, -229, -235, -231, 536, 40, 531, -245, -41,
	532, -355, 74, -352, 505, 531, -333, -377, -347, -348,
	-316, 506, 513, 513, -169, 532, -359, -584, -587, 540,
	-99, -609, 51, -631, 262, -608, -604, 67, 411, -331,
	-398, 36, 36, -532, 478, -613, -363, 307, -338, 354,
	-346, -343, -344, 74, 79, 369, 429, -388, 531, -56,
	-559, 279, -384, -382, -7, -347, -316, 140, -382, -403,
	532, -579, -534, 7, -243, -549, 301, 205, -328, -325,
	-9, -119, -119, -393, 531, -393, -398, -393, 531, -153,
	-352, -206, -56, 298, -30, 83, 449, 449, -7, -369,
	93, -7, -620, 130, -620, -621, -99, -621, -621, -56,
	-397, 532, 532, 532, -470, -397, -465, -397, 541, 23,
	541, 532, 531, 531, 425, 532, -135, -136, 37, 467,
	120, -56, -135, -135, -56, 532, 532, 155, -310, 145,
	144, 140, 134, 140, 134, 141, 142, -295, -6, 136,
	532, 74, -14, 91, 91, -187, 532, 532, -270, 532,
	541, -99, 130, -287, 541, -6, -304, -5, -202, -203,
	109, 97, 98, -204, 109, 96, 70, -94, -94, -94,
	-94, -14, 536, 47, -14, 536, -228, -224, -230, -235,
	-355, -356, 228, -350, -351, -5, -269, 531, -41, -348,
	-377, -324, 506, 506, -613, -361, 303, 531, -596, 273,
	531, -602, 411, 437, -568, 130, 286, 286, 23, 449,
	309, -344, 74, -343, 74, 97, 98, -387, 532, 23,
	-15, -382, 422, -324, -7, 531, 532, 541, 532, 541,
	-92, 532, 532, -357, -14, -357, -225, -357, -146, -154,
	-153, 532, -388, -56, -7, -7, 449, -385, 391, 87,
	509, -385, 532, 541, 532, 532, 532, 64, -130, -131,
	-162, -119, -119, 531, -137, 270, -136, 377, 283, 411,
	377, 283, -137, -137, -308, 143, 143, 140, 140, 134,
	140, 134, 140, 138, 136, 93, 70, 70, -245, -249,
	23, -125, 399, 532, -280, -281, -282, 4, 40, 31,
	47, 128, 124, -58, 123, 110, 93, 110, -197, 102,
	531, 40, 86, 107, 108, -14, 536, 532, 541, -356,
	27, 98, 380, 532, 541, -198, -198, -56, -355, -377,
	-41, -348, -340, 531, -227, -630, -56, -611, -5, 262,
	-408, -408, -169, -7, -345, 354, 35, 24, 93, -345,
	532, 440, -552, -7, 422, -382, 532, 7, -325, 61,
	-331, 532, -331, -341, -245, 532, -154, -369, -369, -7,
	70, -408, -99, -463, 532, 532, -159, 120, 71, 455,
	354, 30, 532, 74, 74, 140, 140, -306, -5, -14,
	-14, -5, 531, -282, -57, -57, 47, -57, -284, 531,
	-187, -207, -186, 86, 531, -230, 127, 127, -351, -362,
	-362, 532, -356, -41, -355, -377, -363, -360, -205, 532,
	-579, 532, 411, 541, 541, -613, 195, 47, 40, -382,
	-7, 531, -346, -331, -369, -15, -397, 532, 411, 501,
	-136, 146, 146, 74, 61, 83, 93, 93, -56, 123,
	-289, -290, -5, 131, 155, 532, -119, -198, -355, -356,
	-41, -356, 532, 541, -361, 531, -609, 61, 64, -225,
	-225, -382, -119, -331, 147, 147, 136, -59, -579, 166,
	-5, -5, -5, 532, -279, 532, 541, 130, -99, -313,
	128, -197, -197, 102, 532, -362, -356, -355, -245, -205,
	-340, -607, -610, -92, 6, -94, -6, 273, 433, 433,
	532, 40, 531, 532, -305, -290, 124, -291, -311, 29,
	128, 7, -207, -356, -363, 532, 541, -630, 36, 36,
	-59, -73, 532, -309, -291, -291, 7, 123, 23, 155,
	-356, -610, -579, 286, 286, 83, -121, -310, -309, -305,
	531, -7, -197, -245, 531, -408, -408, -5, 532, -308,
	-310, -289, 123, -607, -308, 532, 531, 532, -289, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 2876, 2876, 1488, -2, 0, 1771, -2,
	1834, 1834, 0, 0, 0, 2876, 0, 2876, 2876, 0,
	0, 0, 0, 0, 1576, 1848, 1844, 0, -2, 1479,
	1575, 0, 2239, 2240, 1611, 0, 1522, 0, 0, 0,
	-2, 2879, 2874, 2875, 2631, 0, 0, 0, 0, 0,
	0, 1770, 0, 0, 2775, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 1899, 1900,
	0, 0, -2, 2072, 2752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1833,
	0, 0, 0, 0, 0, 2252, 0, 0, 0, 2248,
	2249, 2250, 0, 0, 2254, 2255, 2256, 0, 0, 0,
	1817, 0, 1820, 1821, 1822, 1823, 1824, 1825, 0, 2195,
	283, 394, 428, 2200, 2577, 0, 511, 167, 384, -2,
	375, 461, 2592, 102, 103, 104, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 295, 296, 297, 298, 299, 300, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	376, 377, 378, 379, 380, 381, 382, 383, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 2209, 2201, 511,
	428, 394, 2205, 2206, 167, 283, 301, 375, 384, 461,
	2879, 2631, 2879, 0, 2879, 0, 2864, 394, 428, 511,
	382, 2866, 0, 0, 2941, 2942, 2946, 2437, 2437, 2437,
	148, 2437, 0, 0, 2941, 2437, 2210, 1844, 1576, 0,
	2223, 2224, 2225, 2226, 2227, 2228, 2229, 2566, 1842, 0,
	1847, 2235, 0, 1843, 2241, 511, 428, 394, 2245, -2,
	0, 2784, 2784, 2784, 0, -2, 1493, 1494, 0, 1494,
	0, 1527, 0, 1610, 1612, 1521, 1550, 1551, 117, 0,
	0, 1572, 358, 1577, 120, 112, 1573, 0, 2, 2872,
	0, 2873, 2630, 2618, 0, 0, 2624, 0, 0, 0,
	1555, 0, 0, 0, 1490, 2437, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 1834, 2774, -2,
	0, -2, 252, 1840, 134, 0, 171, 233, 1476, 0,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 2458, 0, 0, 252, 2002, 252,
	0, 0, 2522, 252, 288, 2002, 2109, 2110, 2111, 2112,
	2113, 2612, 2613, 2614, 2615, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 0, 0,
	2674, 0, 0, 120, 252, 86, 2639, 0, 0, 0,
	2002, 2002, 1901, 1902, 1903, 1904, 0, 252, 0, 0,
	252, 0, 0, 252, 0, 252, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, -2, -2, 1408, 0, 0,
	0, 0, 0, 0, -2, 3033, 0, 2109, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 2889, 0, 288, -2, 2889, 0,
	0, 252, 0, 0, 0, 2928, 252, 90, 136, 252,
	90, 113, 0, 252, 90, 252, 1831, 1400, 1401, 1402,
	1403, 1404, 1405, 1414, 1417, 1418, 1419, 1420, 1421, 1457,
	214, 1414, 1414, 1414, 1427, 1428, 1429, 1430, 1431, 1453,
	1453, 1406, 1407, 1455, 1443, 1455, 1455, 1438, 0, 1455,
	90, 252, 0, 288, 2894, 252, 2107, 2892, 252, 2896,
	252, 2251, 0, 2253, 0, 1815, 1816, 1819, 98, 2196,
	394, 2197, 169, 0, 2198, 0, 0, 0, 0, 0,
	0, 2580, 1204, 2581, 2582, 2607, 2608, 2583, 2610, 2611,
	0, 2202, 0, 2204, 2860, 2861, 2862, 2870, 2863, 0,
	2871, 2865, 2869, 0, 0, 0, 2943, 0, 2948, 0,
	2949, 2950, 2951, 2952, 0, 0, 0, 0, 1576, 2212,
	0, 2214, 2222, 515, 2217, 2218, 2219, 2565, 1844, 1841,
	0, 2232, 2234, 2236, 120, 0, 2242, 0, 2244, 2839,
	1506, 1503, 0, 2836, 2837, 1507, 0, 0, 0, 1515,
	0, 2782, 2783, 0, 0, 0, -2, 0, 1491, 1492,
	1617, 1526, 1528, 1532, 1533, 1081, 0, 0, 0, 0,
	0, 0, 1971, 1148, 1171, 1172, 1235, 0, 1175, 1176,
	1177, 474, 0, 1182, 1183, 478, 1458, 321, 507, 1225,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 0, 0,
	0, 1358, 1481, 1483, 1239, 1203, 1185, 1186, 1187, 1188,
	1189, -2, 488, 485, 530, 1241, 1242, 1244, 1246, 1248,
	1250, 1251, 1252, 1253, 1254, 1255, -2, 0, 475, 499,
	503, 504, 510, 513, 514, 500, 471, 477, 494, 518,
	519, 521, 523, 520, 524, 525, 487, 484, -2, 490,
	491, 495, 489, 486, 493, 526, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 496, -2, -2, -2,
	-2, -2, -2, -2, 1432, 1433, 1434, 1435, 1617, 0,
	1552, 118, 1227, 0, 1230, 1553, 0, 0, 0, 1574,
	0, 0, 0, 1398, 2877, 0, 0, 2620, 0, 2622,
	2623, 2625, 0, 1735, 0, 1556, 0, 1757, 0, 0,
	0, 0, 252, 2437, 0, 2473, 252, 85, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 1905, 0, 2443,
	0, 0, 1839, 135, 0, 2456, 0, 2753, 0, 0,
	2457, 0, 0, 0, 0, 0, 2463, 0, 0, 2481,
	2000, 2001, 0, 0, 0, 252, 2526, 0, 0, 0,
	0, 2899, 0, 0, 0, 0, 0, 0, 0, 0,
	2708, 0, 0, 0, 0, 0, 2899, 2899, 2082, 2095,
	2182, 2103, 0, 0, 0, 2182, 2182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2174, 0, 0, 0, 2084, 2086, 0, 0, 0, 0,
	2087, 0, 2476, 1980, 0, 0, 0, 1984, 1999, 1987,
	0, 0, 0, 0, 2002, -2, 1997, 0, 2089, 2182,
	0, 0, 252, 0, 0, 252, 0, 2246, 0, 2247,
	0, 2270, 0, 1343, 0, 0, 0, 0, 2447, 0,
	0, 0, 0, 0, 3030, 3000, 0, 0, 3004, 3005,
	3006, 3007, 0, 0, 3012, 0, 0, 0, 0, 3017,
	0, 0, 2390, 3031, -2, 0, 0, 2917, 2918, 0,
	0, 0, 0, 0, 0, 3030, 0, 0, 0, 0,
	0, 3030, 0, 0, 2519, 2520, 0, 0, 0, 0,
	0, 0, 0, 2733, 2734, 0, 0, 0, 0, 0,
	2901, 0, 0, 0, 0, 0, 2901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3038, 3039, 0, 2488, 1834, 0, 0,
	0, 2184, 88, 89, 0, 0, 2186, 0, 0, 0,
	2189, 0, 1415, 1414, 0, 1422, 0, 1423, 1424, 1425,
	1426, 0, 1447, 0, 0, 0, 1449, 1445, 1454, 0,
	1436, 1437, 1455, 1455, 1441, 2191, 0, 90, 252, 0,
	0, 0, 0, 0, 0, 1818, 2257, 2258, 2259, 2260,
	0, 0, 0, 2584, 2585, 2587, 2578, 2588, 2590, 2594,
	2596, 2597, 1805, 1806, 1807, 1808, 1809, 0, 0, 1812,
	1205, 2589, 2591, 2593, 2579, 2598, 2599, 2600, 2601, 2602,
	2603, 2604, 2605, 2606, 2586, 2616, 2617, 2203, 382, 2868,
	0, 2953, 0, 390, 0, 241, 348, 378, 196, 213,
	276, 277, 331, 384, 421, 433, 0, 121, 2987, 2947,
	0, 0, 115, 0, 0, 0, 2987, 0, 2211, 1576,
	0, 2216, 2220, 2221, 1846, 2235, 0, 2238, 2235, 2243,
	1497, 2838, 1498, 1505, 1508, 0, 0, 1510, 0, 1512,
	0, 2834, 2835, 2840, 2848, 2849, 0, 2858, 2859, 2846,
	0, 2850, -2, 0, 0, 1518, 0, 1523, 1524, 1525,
	2800, 2801, 1887, 2839, 1506, 1535, 0, 0, 0, 683,
	651, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 0, 644, 898, -2, 0, -2, 985,
	816, 1119, 1121, -2, 795, 0, 0, 1531, -2, 895,
	1378, 110, 111, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 645, 646,
	647, 648, 649, 650, 652, 653, 654, 655, 656, 657,
	658, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	791, 792, 793, 794, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 896, 897, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1086, 1087, 1101, 1104, 1105, 0,
	0, 0, 1173, 1398, 0, -2, 1178, 1179, 1180, 1181,
	0, 0, 0, 0, -2, 1198, 0, 1200, 1222, 0,
	0, 1357, 1483, 0, 2812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 0, 1301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1687, 1687, 0, 0, 0, 0, 0, 0,
	0, 0, 1535, 0, 1228, 1231, 1232, 1409, 105, 106,
	107, 108, 109, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 1229, 0, 0, 0, 1578, 1582, 0, 0, 1589,
	0, 0, 0, 0, 1380, 1382, 0, 0, 1484, 0,
	0, 2878, 2619, 2621, 0, 0, 2629, 1870, 1737, 0,
	0, 0, 0, 1535, 1748, 0, 0, 1235, 1557, 1595,
	0, 0, 1766, 1766, 1763, 1764, 1908, 0, 0, 0,
	2081, 0, 2470, 2472, 0, 0, 0, 252, 84, 2369,
	0, 2369, 0, 2393, 2394, 0, 0, 0, 2455, 0,
	0, 0, 0, 0, 2572, 2571, 2573, 2574, 2575, 2576,
	-2, 85, 1960, 0, 1411, 0, 2656, 2658, 0, 0,
	1477, 1631, 0, 0, 0, 0, 0, 0, 2465, 0,
	2478, 0, 2513, 1908, 0, 0, 0, 2525, 2521, 0,
	0, 2536, 2537, 0, 2881, 0, 252, 2437, 0, 0,
	2673, 2680, 0, 0, 0, 0, 2639, 2715, 0, 420,
	-2, 2437, 2723, 0, 2638, 0, 0, 0, 2880, 2882,
	0, 0, 0, 0, 2181, 0, 0, 2114, 252, 0,
	2138, 0, 0, 2017, 0, 1971, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 2146, 2147, 0, 0, 2167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2160, 0, 0, 2162, 2163, 0, 2168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1981, 1985, 1990,
	1991, 1982, 1983, 0, 1998, 1988, 1989, 0, 0, 0,
	0, 0, 0, 0, 0, 2091, 2182, 0, 0, 2093,
	2182, 0, 2513, 0, 0, 2262, 2263, 0, 0, 2358,
	2359, 2360, 2361, 2363, -2, 2365, 0, 0, 0, 0,
	0, 0, 2180, 0, 0, 0, 0, 2450, 0, 2559,
	0, 0, 0, 0, 2997, 3001, 3029, 0, 0, 0,
	3010, 3011, 3013, 3014, 3015, 3016, 3018, 2389, 394, 428,
	0, 0, 0, 0, 0, 2691, 0, 0, 2998, 0,
	2711, 2713, 2712, 2714, 0, 2999, 0, 0, 2518, 2523,
	2524, 0, 2727, 0, 2728, 2639, 0, 0, 2735, 0,
	0, 0, 2662, 2663, 2666, 0, 2883, 2885, 0, 2208,
	0, 2886, 0, 0, 2884, 2887, 2888, 0, 2675, 2676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 2486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1826,
	1827, 1828, 1829, 1830, 2252, 2926, 2927, 0, 0, 0,
	0, 90, 137, 90, 114, 90, 0, 1832, 90, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 1440,
	90, 2193, 0, 0, 0, 2108, 2895, 2893, 2897, 2570,
	0, 0, 1206, 1810, 1207, 1811, 2867, 0, 0, 2954,
	2955, 0, 0, 2958, 3035, 2959, 2960, 2961, 2962, 2963,
	0, 2965, 2988, 2990, 2966, 2967, 2968, 0, 0, 0,
	0, 0, 2922, 0, 0, 0, 0, 2944, 2436, 0,
	0, 2941, 90, 0, 2213, 2215, 2235, 1845, 2231, 2237,
	2233, 1504, 0, 1513, 0, 0, 0, 2851, 0, 0,
	-2, -2, 0, 2847, 2856, 2857, 2852, -2, -2, 2853,
	1509, 1516, 0, 1514, 0, 0, 1890, 1885, 1886, 1501,
	1502, 1592, 0, 1616, -2, -2, 283, 244, -2, 0,
	133, 1529, 1082, 1083, 0, 1085, 1088, 1089, 1090, 1091,
	1092, 1093, -2, -2, -2, -2, -2, -2, 1100, 1102,
	1103, -2, 1381, 1383, 0, 1484, 0, -2, 0, 1118,
	0, 1123, 1125, 1127, 0, 1140, 1142, 0, 1397, 1384,
	1385, 1386, 1387, 1388, 0, 0, 1485, 1135, 1486, 0,
	0, 1375, 1376, 1377, 1530, 0, 1122, 0, 0, 1139,
	1969, 0, 1236, 1235, 0, 0, 0, 1366, 1367, 0,
	0, 0, -2, 1479, 1344, 0, 0, 0, 0, 1351,
	1353, 0, -2, 1201, 1209, 1210, 1211, 1212, 1213, 1214,
	1223, 0, 1363, 1359, 0, 2812, 0, 1238, 0, 0,
	1678, 1081, 0, 1683, 1721, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 0, 0, 0, 1353, 1300, 0, 0, 1149, 0,
	0, 0, 507, 0, 0, 1353, 0, 0, 0, 0,
	0, 1398, 0, 1309, 0, 0, 0, 0, 0, 0,
	0, 1323, 1326, 0, 0, 0, 0, 0, 1678, 0,
	1672, 0, 1353, 1681, 1721, 0, 1670, -2, 1397, 0,
	1687, 1295, 0, 0, 0, 0, 1592, 0, 1233, 1230,
	1554, 1590, 0, 1580, 0, 119, 1399, 2626, 2627, 2628,
	1892, 0, 0, 1742, 1743, 0, 1744, 1235, 1741, 1736,
	1595, 0, 0, 0, 1753, 1752, 1892, 0, 1756, 1536,
	1598, 1598, 0, 1542, 0, 1607, 1598, 1598, 1621, 380,
	527, 492, 117, 1339, 1340, 1341, 0, 483, 0, 0,
	1765, 0, 0, 1907, 1909, 1911, 1912, 1913, 0, 1937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2383,
	2368, 2370, 0, 0, 0, 2375, 2376, 0, 2348, 2349,
	2351, 2383, 0, 2396, 2398, 2399, 2400, 2402, 2395, 0,
	2454, 0, 0, 0, 0, 2542, 2546, 2544, 1406, 0,
	2772, 2437, 0, 2442, 0, 0, 0, -2, 2446, 1412,
	2655, 0, 0, 0, 2759, 0, 1630, 1632, 0, 2555,
	2469, 2459, 2460, 2461, 2462, 0, 2480, 0, 0, 0,
	2485, 2002, 1952, 2512, 2510, 0, 0, 0, 0, 0,
	0, 0, 2522, 0, 0, 2898, 2902, 0, 0, 0,
	0, 0, 0, 0, 2912, 2913, 0, 0, 0, 0,
	0, 2060, 0, 2081, 2682, 0, 0, 2697, 2698, 0,
	2703, 2705, 2706, 0, 120, 2639, 2710, 0, 2437, 0,
	-2, 2725, 2725, 0, 0, 0, 2104, 2293, 0, 0,
	0, 98, 0, 2116, 252, 1935, 0, 0, 0, 2328,
	0, 0, 0, 0, 0, 1836, 0, 2328, 252, 90,
	252, 90, 2140, 2143, 2145, 0, 2166, 0, 2337, 2340,
	2144, 2148, 2151, 2152, 0, 0, 0, 0, 2156, 0,
	2153, 2154, 2155, 2159, 0, 2161, 0, 2164, 2169, 2651,
	2652, 2653, 0, 0, 0, 2643, 2645, 395, 143, 215,
	0, 1956, 2083, 2096, 2182, 0, 2301, 2178, 2085, 0,
	0, 2295, 1986, 1992, 1993, 1994, 1996, 2088, 0, 2477,
	2297, 0, 2090, 2182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 2273, 2261, 0, 0, 2357, 0,
	2356, 1414, 2362, 1414, 0, 2274, 2275, 2276, 2277, 0,
	2448, 90, 252, 2179, 2449, 0, 0, 2328, 2453, 2280,
	0, 0, 3008, 3009, 2281, 2891, 0, 0, 0, 0,
	2693, 0, 0, 2287, 2288, 2289, 2290, 2291, 2292, 2639,
	2729, 2639, 2639, 0, 0, 0, 2664, 2665, 2318, 2900,
	2207, 2890, 2319, 0, 2320, 2321, 2701, 1813, 1814, 0,
	0, 0, 0, 0, 0, 0, 2326, 0, 0, 0,
	0, 90, 2553, 252, 90, 0, 3019, 3023, 3040, 0,
	0, 1836, 2487, 0, 2490, 2491, 2492, 0, 2494, 2495,
	2496, 171, 233, 0, 2499, 2500, 0, 2502, 0, 0,
	0, 0, 0, 0, 2183, 2185, 2187, 0, 2190, 1413,
	1456, 1453, 1451, 1452, 1453, 0, 1442, 2192, 90, 0,
	0, 2564, 0, 2199, 2595, 2979, 2974, 2976, 0, 122,
	0, 2957, 0, 2964, 2992, 0, 0, 0, 0, 0,
	0, 0, 2987, 2981, 0, 0, 2945, 116, 2987, 0,
	2924, 0, 2230, 1511, 2841, 0, 2844, 0, 2854, 2855,
	0, 0, 1517, 2802, 1890, 1460, 0, 2804, 0, 2786,
	0, 1534, 0, 123, 0, 124, 124, 124, 124, 0,
	132, 0, 0, -2, -2, 0, 0, 0, 1136, 0,
	-2, 1120, 1124, 1126, 1128, 0, 1141, 1144, 0, 1397,
	0, 1143, 1146, 0, 0, 1389, 1390, 1391, 1392, 0,
	0, 0, 1137, 0, 0, 0, 0, 1970, 1174, 1399,
	1364, 1365, 0, 1184, 1459, -2, 0, 0, 1478, 1345,
	1479, 1479, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1360, 0, 0, 1237, 0, 2810, 2811, 2815,
	0, 1397, 0, 0, 0, 0, 1681, 0, 1662, 1720,
	0, 0, 1243, 1245, 1247, 1249, 0, 1258, 0, 1259,
	0, 1261, 1262, 0, 0, 1263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1151, 1152, 1166, 1264, 1265, 0, 0,
	0, 0, 0, 0, 0, 1270, 0, 1308, 0, 1272,
	1273, 1274, 1275, 0, 1280, 0, 0, 1329, 0, 0,
	0, 0, 1286, 1397, 0, 1288, 1721, 1687, 0, 0,
	0, 1687, 1291, 0, 1293, 0, 0, 0, 0, 0,
	2786, 1613, 0, 1229, 0, 1581, 1734, 0, 1873, 0,
	0, 0, 1746, 1892, 1749, 1750, 0, 0, 1755, 1593,
	192, 0, 0, 0, 0, 0, 1569, 1569, 1569, 1567,
	1538, 1597, 0, 1602, 1540, 1598, 1607, 1598, 1598, -2,
	1542, 0, 1544, 1603, 0, 1602, 1546, 1548, 1618, 0,
	0, 0, 0, -2, 0, 0, 2002, 1767, 1768, 1769,
	-2, 2050, 0, 1917, 2052, 0, 1937, 0, 0, 2080,
	0, 2473, 2075, 0, 2369, 0, 2364, 2345, 2381, 0,
	0, 2371, 2372, 2377, 2373, 2374, 0, 2347, 0, 0,
	0, 2346, 0, 0, 0, 0, 2538, 2539, 0, 0,
	0, 2545, 0, 0, 0, 0, 2081, 0, 0, 2445,
	1959, 0, 1962, 1963, 0, 0, 2008, 1971, 0, 0,
	0, 0, 0, 1965, 0, 2657, 2659, 2632, 2633, 2634,
	2635, 2636, 2637, 321, 1464, 1465, 0, 2467, 0, 1636,
	0, 2554, 2556, 2464, 0, 2482, 2483, 2484, 2481, 2503,
	0, 2511, 2506, 2514, 2507, 2509, 2508, 2050, 1937, 0,
	0, 2526, 1952, 0, 2903, 2904, 2905, 0, 0, 2908,
	2909, 0, 0, 0, 0, 2916, 2570, 0, 2081, 0,
	0, 0, 2672, 2689, 0, 2679, 0, 0, 0, 0,
	0, 2709, 2716, 2725, 0, 2725, 2720, 0, 2722, 2639,
	0, 0, 0, 0, 2175, 0, 1947, 2176, 2177, 0,
	0, 1931, 1934, 0, 2016, 2075, 0, 0, 2020, 0,
	0, 2328, 0, 0, 2074, 2118, 0, 0, 0, 0,
	2131, 0, 2137, 1974, -2, 0, 2139, 0, 2135, 0,
	2142, 2165, 2649, 2650, 2336, 0, 0, 0, 2149, 2157,
	2150, 2158, 2170, 2171, 0, 0, 2172, 2642, 0, 2646,
	2647, 2648, 1955, 1957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2299, 0, 2092, 2182,
	0, 2303, 0, 2094, 2182, 0, 2504, 2264, 2354, 2355,
	0, 0, 0, 2451, 0, 2558, 0, 2561, 3002, 0,
	2282, 0, 0, 0, 0, 0, 2695, 0, 2690, 0,
	2732, 2730, 2731, 0, 0, 2317, 0, 0, 0, 0,
	0, 0, 0, 0, 2549, 0, 3041, 0, 3043, 0,
	3037, 0, 0, 0, 2489, 0, 0, 0, 2265, 0,
	0, 0, 0, 0, 2929, 2930, 2931, 90, 1446, 1448,
	1444, 2194, 2534, 0, 2568, 0, 2987, 0, 0, 2977,
	2956, 3036, 0, 2989, 2991, 0, 0, 0, 0, 0,
	2923, 0, 2982, 2983, 2984, 2985, 2986, 90, 0, 2987,
	2842, 0, 2845, 0, 1373, 0, 2803, 0, 1888, 1889,
	2799, 0, 1591, 125, 126, 0, 0, 0, 0, 131,
	1084, -2, 0, 0, -2, 0, 0, -2, 0, 0,
	1145, 1147, -2, 1394, 1396, 0, 0, 1487, 0, -2,
	0, 1370, 0, -2, 1368, 1346, 0, 1352, 0, 0,
	0, 1354, 1355, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	0, 1202, 1356, 1362, 0, 0, 2817, 2814, 0, 1687,
	0, 0, 1674, 1675, 1687, 0, 1719, 1240, 0, 1310,
	0, 0, 1150, 1153, 1154, 1155, 1156, 1157, 1158, -2,
	-2, -2, -2, -2, -2, 1165, 0, 0, 1169, 1321,
	0, 1304, 1305, 0, 1267, 1268, 1269, 1307, 0, 1276,
	0, 1324, 1325, 0, 0, 0, 1282, 1639, 0, 161,
	1283, 0, 1338, 0, 1687, 1673, 1686, 0, 1671, 0,
	0, 0, 1292, 1294, 1666, 1666, 1666, 0, 2799, 1234,
	0, 1891, 0, 0, 0, 1738, 1739, 0, 1745, 1747,
	0, 1754, 0, 1537, 0, 0, 0, 0, 0, 1564,
	1568, 1565, 1566, 1539, 0, 1600, 0, 1541, 1545, 1547,
	1549, 1558, 1600, 0, 0, 1620, 0, 0, 522, 0,
	1479, 0, 1777, 2002, 0, 1837, 2052, 0, 1910, 1914,
	2060, 2051, 0, 0, 1938, 1940, 1941, 1960, 0, 1908,
	0, 0, 2441, 2081, 2471, 0, 0, 2383, 0, 2386,
	2384, 0, 0, 0, 2350, 2352, 2353, 2404, 2397, 2401,
	0, 0, 2543, 0, 2547, 0, 2548, 0, 2777, 0,
	0, 2572, 0, 1964, 1966, 2007, 2639, 2639, 0, 2012,
	2437, 0, 1972, 0, 1967, 1968, 0, 1633, 1634, 0,
	2468, 0, 2466, 2479, 0, 2515, 0, 0, 1908, 0,
	0, 0, 2531, 0, 2906, 2907, 2910, 2911, 2914, 2915,
	2562, 0, 2066, 2059, 0, 2421, 2422, 0, 2667, 0,
	2693, 0, 2681, 2683, 2684, 2685, 2686, 2687, 2696, 2699,
	2704, 2707, 0, 2717, 2718, 2719, 2721, 0, 2726, 0,
	0, 0, 2305, 2311, 0, 2115, 0, 1952, 1930, 0,
	1932, 1933, 2328, 0, 2329, 0, 2331, 0, 0, 2069,
	0, 2022, 0, 0, 2027, 0, 1884, 1884, 0, 0,
	2122, 2132, 1835, 1978, 0, 0, 0, 0, 2126, 2128,
	2129, 2127, 0, 1975, 0, 0, 0, 0, 90, 90,
	2338, 2339, 2342, 2173, 2654, 2644, 2294, 0, 0, 0,
	0, 2302, 0, 0, 2296, 2307, 2298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2279, 2366, 0, 2278,
	90, 2328, 3003, 0, 0, 2760, 2745, 0, 0, 0,
	2761, 2762, 0, 0, 2285, 2678, 0, 0, 0, 2315,
	2316, 2533, 2702, 2322, 2323, 2324, 2325, 90, 2552, 0,
	0, 93, 90, 3020, 3021, 3022, 3024, 3025, 3026, 3027,
	3028, 0, 0, 0, 0, 0, 0, 0, 0, 2935,
	2936, 2937, 2938, 2939, 2940, 0, 0, 2188, 0, 2569,
	2919, 2975, 0, 2993, 2969, 2970, 2971, 2972, 2973, 2980,
	2920, 0, 90, 2843, 1372, 1399, 0, 2806, 0, 2784,
	127, 128, 129, 130, -2, -2, 0, 0, 0, -2,
	-2, 1393, 1395, -2, -2, 1138, 1369, 1399, 1199, 1479,
	1347, 1349, 1350, 1224, 1361, 1480, 1479, 0, 1482, 0,
	1676, 1677, 0, 1682, 0, 1257, 1260, 0, 0, 0,
	1170, 0, 0, 0, 1266, 1271, 0, 0, 517, 1281,
	1327, 1328, 1640, 0, 1641, 1637, 1638, 0, 0, 0,
	1333, 309, 0, 1289, 1679, 1680, 1290, 1687, 0, 1703,
	1687, 1332, 2806, 1585, 0, 0, 1876, 0, 0, 1751,
	1594, 1596, 1559, 0, 1561, 0, 0, 0, 1563, 0,
	0, 0, 1543, 0, 0, 0, 112, 0, 1622, 1626,
	0, 0, 0, 0, 1892, 1759, 1859, 1859, 0, 1761,
	1774, 0, 1777, 0, 2060, 0, 0, 0, 101, 0,
	1936, 0, 1942, 0, 2052, 0, 1937, 0, 2432, 0,
	0, 0, 0, 2343, 0, 1627, 0, 1410, -2, 2378,
	0, 2379, 2414, 0, 2431, 0, 2540, 0, 0, 0,
	2779, 0, 0, 0, 2444, 1961, 0, 2068, 2068, 0,
	2036, 0, 1973, 0, 1635, 2557, 0, 1953, 0, 0,
	0, 0, 1952, 0, 0, 0, 2567, 0, 0, 0,
	0, 0, 2695, 2688, 0, 0, 0, 2741, 2741, 0,
	0, 0, 0, 2117, 1960, 1928, 1929, 2018, 2032, 2330,
	2334, 2332, 2333, 2335, 2032, 0, 2032, 0, 0, 1878,
	87, 0, 1879, 0, 2119, 0, 0, 1979, 2120, 0,
	2124, 0, 1636, 1977, 2125, 2134, 2141, 0, 0, 0,
	2106, 0, 2106, 0, 0, 2309, 2300, 0, 0, 0,
	2313, 2304, 0, 2367, 2452, 2560, 2283, 2284, 0, 0,
	0, 2751, 0, 0, 0, 0, 0, 0, 2327, 2550,
	2551, 3042, 1636, 0, 2497, 2498, 2266, 0, 0, 2501,
	0, 0, 0, 2535, 2978, 2987, 2925, 1374, 1461, 1519,
	0, 2798, 0, -2, -2, -2, 1371, 0, 2821, 0,
	1684, 1685, 1718, 1320, -2, 0, 1306, 1302, 1303, 1277,
	0, 1278, 0, 1642, 1284, 1285, 0, 1334, 1287, 1712,
	1665, 1667, 0, 0, 0, 0, 1689, 1690, 1691, 1692,
	1693, 1694, 1697, 1701, 0, 1330, 0, 1520, 1588, 0,
	0, 1869, 1592, 0, 1872, 0, 1560, 0, 1571, 1562,
	0, 0, 1601, 0, 1604, 1606, 1621, 0, 1624, 0,
	0, 0, 1643, 0, 0, 1664, 1346, 1758, 1760, 0,
	0, 0, 1854, 0, 1776, 1778, 1779, 1840, 1840, 1782,
	1783, 1840, 1840, 0, 0, 0, 1793, 1801, 1592, 1772,
	101, 0, 1915, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1916, 2064, 0, 0, 0, 1939, 1960,
	2060, 2050, 2052, 1937, 0, 0, 0, 0, 0, 2075,
	0, 2369, 1629, 2382, 0, 2387, 2388, 0, 2420, 2416,
	2403, 2405, 0, 2408, 2409, 2328, 0, 2541, 2767, 0,
	0, 2773, 2778, 0, 0, 2776, 2441, 2081, 2009, 0,
	2010, 2026, 2041, 0, 2006, 0, 2744, 1951, 0, 1952,
	0, 2050, 1937, 2516, 0, 1952, 2570, 2065, 0, 0,
	2668, 0, 2677, 0, 2724, 2741, 2738, 0, 2737, 2766,
	0, 0, 0, 1958, 2639, 0, 2639, 0, 2639, 2028,
	2029, 321, 1887, 86, 1883, 1884, 2123, 2133, 0, 0,
	2641, 2341, 2306, 2312, 2097, 2105, 0, 2099, 0, 2308,
	0, 2106, 0, 0, 2746, 2756, 2756, 2749, 0, 2763,
	0, 0, 0, 2692, 2286, 90, 2493, 0, 0, 0,
	2979, 90, 0, 90, 2805, 2807, 0, 2785, 2787, 2789,
	2790, 2791, 2792, 2793, 0, 191, 377, 478, 1348, 0,
	0, 0, 0, 2816, 0, -2, 0, 0, 1335, 1336,
	1717, 0, 0, 0, 0, 1297, 0, 1688, 1695, 1696,
	0, 0, 1299, 1331, 1579, 0, 0, 0, 0, 1871,
	1877, 1740, 0, 0, 1599, 1605, 1619, 1623, 0, 0,
	1649, 0, 0, 0, 0, 1646, 1666, 0, 0, 1858,
	0, 1856, 0, 0, 0, 0, 0, 0, 0, 1792,
	1775, 0, 1795, 1796, 1797, 1798, 1799, 0, 1762, 2064,
	2049, 2066, 0, 99, 100, 0, 1943, 101, 2052, 2060,
	0, 2438, 0, 0, 2441, 2077, 0, 1628, 2383, 2385,
	2380, 0, 0, 0, 2415, 2406, 1840, 2410, 2411, 0,
	2430, 0, 0, 2780, 2781, 2433, 0, 0, 2011, 0,
	2013, 2037, 2038, 0, 2033, 2034, 2035, 2014, 0, 0,
	0, 0, 1954, 2527, 1952, 0, 0, 0, 2532, 2563,
	2660, 0, 0, 2670, 2700, 2736, 2739, 2740, 0, 1949,
	0, 0, 0, 2068, 0, 2068, 2437, 2068, 0, 1890,
	1887, 1880, 0, 2006, 2136, 0, 0, 0, 2310, 2101,
	0, 2314, 2004, 0, 2004, 0, 2757, 0, 0, 0,
	3044, 2267, 2269, 2268, 2932, 2933, 0, 2921, 0, 0,
	0, 2794, 0, 0, 0, 2813, 2833, 2822, -2, 436,
	192, 0, 2833, 2833, 1319, 1279, 1322, 1337, 1701, 0,
	0, 1704, 0, 1706, 0, 0, 0, 1668, 1669, 1702,
	1298, 0, 0, 0, 0, 1592, 1609, 2996, 0, 1647,
	0, 1651, 0, 1644, 0, 1645, 0, 1663, 1849, 1850,
	0, 0, 1861, 1851, 0, 0, 0, 1780, 1781, 1784,
	1785, 1786, 1787, 0, 1790, 1791, 1794, 0, 1802, 1804,
	2066, 1895, 0, 0, 2054, 1884, 1884, 0, 2064, 2060,
	101, 2052, 2439, 2440, 2434, 1971, 0, 0, 2344, 0,
	0, 2413, 2417, 2418, 0, 0, 0, 0, 0, 0,
	2025, 2039, 0, 2040, 0, 0, 0, 0, 0, 0,
	2743, 2529, 0, 0, 1952, 0, 2669, 0, 1944, 0,
	1948, 1945, 0, 2328, 0, 2328, 2036, 1592, 0, 1881,
	1890, 2121, 2130, 2640, 2106, 2106, 0, 2747, 2003, 2754,
	0, 2748, 0, 0, 2764, 2765, 2694, 0, 2808, 2809,
	2788, 0, 0, 0, 2818, 0, 0, 2824, 2825, 2826,
	2827, 2828, 2819, 2820, 0, 1714, 1716, 1705, 1707, 0,
	1710, 0, 1711, 1698, 1699, 0, 0, 0, 1868, 1570,
	0, 2994, 0, 1625, 1650, 1653, 1654, 0, 0, 0,
	1659, 0, 1652, 0, 0, 1852, 0, 1853, 1862, 0,
	0, 0, 0, 1855, 1857, 1788, 1789, 1800, 0, 1893,
	2061, 0, 0, 2053, 0, 87, 87, 0, 2066, 101,
	2064, 2060, 2081, 0, 0, 0, 0, 2407, 2412, 0,
	2770, 2771, 2441, 2067, 2042, 0, 2045, 2046, 0, 2043,
	2005, 2015, 2742, 1952, 0, 2517, 2661, 2671, 1950, 0,
	2019, 2031, 2021, 2041, 2328, 2030, 1882, 2098, 2100, 2106,
	0, 2750, 2758, 90, 2796, 2795, 0, 0, 2830, 2831,
	0, 0, 1296, 0, 0, 1708, 1709, 0, 0, 0,
	0, 1608, 0, 1655, 1656, 1657, 1658, 1660, 0, 0,
	1860, 0, 0, 1866, 0, 1803, 2062, 2063, 2055, 2056,
	2057, 1884, 1897, 2064, 2066, 101, 2066, 0, 2078, 2077,
	0, 2419, 2420, 0, 0, 2435, 2044, 2437, 2437, 2528,
	1952, 0, 2328, 2024, 2102, 2755, 2934, 2797, 2829, 2832,
	2823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1724, 0, -2, 0, 0, 0, 87, 2066, 1896,
	2064, 1592, 2076, 0, 1971, 2425, 0, 0, 0, 2047,
	2048, 2530, 0, 2023, 1713, 1715, 1700, 0, 0, -2,
	1587, 1583, 1584, 2995, 0, 1703, 0, 0, 1733, 0,
	1722, 1863, 1864, 0, 1867, 2058, 1894, 2066, 2070, 2079,
	2081, 0, 2423, 2426, 2427, 2428, 2429, 0, 0, 0,
	1946, 0, 0, 1648, 0, 1725, 1726, 1712, 1733, 1733,
	0, 0, 0, 1898, 2066, 2391, 0, 0, 0, 0,
	0, 1479, 1661, 1717, 1712, 1703, 1732, 0, 0, 0,
	1592, 2424, 0, 0, 0, 0, 0, 1701, 1717, 1729,
	0, 0, 1865, 2071, 2425, 2768, 2769, 1586, 0, 1727,
	1701, 0, 0, 0, 1728, 1730, 0, 2392, 0, 1731,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:587
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = nil
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:712
		{
			yyVAL.str = ""
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.list = yyDollar[1].list
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:717
		{
			yyVAL.list = nil
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:723
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:727
		{
			yyVAL.ival = 1
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:728
		{
			yyVAL.ival = 0
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:732
		{
			yyVAL.ival = 1
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:733
		{
			yyVAL.ival = 0
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:737
		{
			yyVAL.bval = true
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:738
		{
			yyVAL.bval = false
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.bval = true
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:743
		{
			yyVAL.bval = false
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:747
		{
			yyVAL.list = yyDollar[2].list
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:748
		{
			yyVAL.list = nil
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:749
		{
			yyVAL.list = nil
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.str = yyDollar[1].str
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.str = yyDollar[1].str
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.str = yyDollar[1].str
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.str = yyDollar[1].str
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.str = yyDollar[1].str
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.str = yyDollar[1].str
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.str = yyDollar[1].str
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.str = yyDollar[1].str
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.str = yyDollar[1].str
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:780
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:784
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:797
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:805
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:812
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:841
		{
			yyVAL.list = yyDollar[2].list
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:842
		{
			yyVAL.list = nil
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:851
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:864
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:870
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:876
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:882
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:888
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:895
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:902
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:908
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:927
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:943
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "abort"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "absent"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "absolute"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "access"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "action"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "add"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "admin"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "after"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "aggregate"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "also"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "alter"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "always"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "asensitive"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "assertion"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "assignment"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "at"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "atomic"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "attach"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "attribute"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "backward"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "before"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "begin"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "breadth"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "by"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "cache"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "call"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "called"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "cascade"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "cascaded"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "catalog"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "chain"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "characteristics"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "checkpoint"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "class"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "close"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "cluster"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "columns"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "comment"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "comments"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "commit"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "committed"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "compression"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "conditional"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "configuration"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "conflict"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "connection"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "constraints"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "content"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "continue"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "conversion"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "copy"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "cost"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "csv"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "cube"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "current"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "cursor"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "cycle"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "data"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "database"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "day"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "deallocate"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "declare"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "defaults"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "deferred"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "definer"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "delete"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "delimiter"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "delimiters"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "depends"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "depth"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "detach"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "dictionary"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "disable"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "discard"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "document"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "domain"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "double"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "drop"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "each"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "empty"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "enable"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "encoding"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "encrypted"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "enum"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "error"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "escape"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "event"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "exclude"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "excluding"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "exclusive"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "execute"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "explain"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "expression"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "extension"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "external"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "family"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "filter"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "finalize"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "first"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "following"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "force"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "format"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "forward"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "function"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "functions"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "generated"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "global"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "granted"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "groups"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "handler"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "header"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "hold"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "hour"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "identity"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "if"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "immediate"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "immutable"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "implicit"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "import"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "include"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "including"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "increment"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "indent"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "index"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "indexes"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "inherit"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "inherits"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "inline"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "input"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "insensitive"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "insert"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "instead"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "invoker"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "isolation"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "keep"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "key"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "keys"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "label"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "language"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "large"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "last"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "leakproof"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "level"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "listen"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "load"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "local"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "location"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "lock"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "locked"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "logged"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "mapping"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "match"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "matched"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "materialized"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "maxvalue"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "merge"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "method"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "minute"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "minvalue"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "mode"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "month"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "move"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "name"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "names"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "nested"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "new"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "next"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "nfc"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "nfd"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "nfkc"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "nfkd"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "no"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "normalized"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "nothing"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "notify"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "nowait"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "nulls"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "object"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "of"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "off"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "oids"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "old"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "omit"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "operator"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "option"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "options"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "ordinality"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "others"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "over"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "overriding"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "owned"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "owner"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "parallel"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "parameter"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "parser"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "partial"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "partition"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "passing"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "password"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "path"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "plan"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "plans"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "policy"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "preceding"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "prepare"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "prepared"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "preserve"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "prior"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "privileges"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "procedural"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "procedure"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "procedures"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "program"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "publication"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "quote"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "quotes"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "range"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "read"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "reassign"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "recheck"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "recursive"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "ref"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "referencing"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "refresh"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "reindex"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "relative"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "release"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "rename"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "repeatable"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "replace"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "replica"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "reset"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "restart"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "restrict"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "return"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "returns"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "revoke"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "role"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "rollback"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "rollup"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "routine"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "routines"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "rows"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "rule"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "savepoint"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "scalar"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "schema"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "schemas"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "scroll"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "search"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "second"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "security"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "sequence"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "sequences"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "serializable"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "server"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "session"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "set"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "sets"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "share"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "show"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "simple"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "skip"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "snapshot"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "source"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "sql"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "stable"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "standalone"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "start"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "statement"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "statistics"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "stdin"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "stdout"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "storage"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "stored"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "strict"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "string"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "strip"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "subscription"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "support"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "sysid"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "system"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "tables"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "tablespace"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "target"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "temp"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "template"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "temporary"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "text"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "ties"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "transaction"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "transform"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "trigger"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "truncate"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "trusted"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "type"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "types"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "uescape"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "unbounded"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "uncommitted"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "unconditional"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "unencrypted"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "unknown"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "unlisten"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "unlogged"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "until"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "update"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "vacuum"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "valid"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "validate"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "validator"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "value"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "varying"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "version"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "view"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "views"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "volatile"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "whitespace"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "within"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "without"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "work"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "wrapper"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "write"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "xml"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "year"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "yes"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "zone"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "between"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "bigint"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "bit"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "boolean"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "char"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "character"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "coalesce"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "dec"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "decimal"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "exists"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "extract"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "float"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "greatest"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "grouping"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "inout"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "int"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "integer"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "interval"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "json"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "json_array"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "json_arrayagg"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "json_exists"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "json_object"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "json_objectagg"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "json_query"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "json_scalar"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "json_serialize"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "json_table"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "json_value"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "least"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "merge_action"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "national"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "nchar"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "none"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "normalize"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "nullif"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "numeric"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "out"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "overlay"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "position"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "precision"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "real"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "row"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "setof"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "smallint"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "substring"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "time"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "timestamp"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "treat"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "trim"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "values"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "varchar"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "xmlattributes"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "xmlconcat"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "xmlelement"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "xmlexists"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "xmlforest"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "xmlparse"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "xmlpi"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "xmlroot"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "xmlserialize"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "xmltable"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "authorization"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "binary"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "collation"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "concurrently"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "cross"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "current_schema"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "freeze"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "full"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "ilike"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "inner"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "is"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "isnull"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "join"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "left"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "like"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "natural"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "notnull"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "outer"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "overlaps"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "right"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "similar"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "tablesample"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "verbose"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "all"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "analyse"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "analyze"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "and"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "any"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "array"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "as"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "asc"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "asymmetric"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "both"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "case"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "cast"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "check"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "collate"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "column"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "constraint"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "create"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "current_catalog"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "current_date"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "current_role"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "current_time"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "current_timestamp"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "current_user"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "default"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "deferrable"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "desc"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "distinct"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "do"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "else"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "end"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "except"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "false"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "fetch"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "for"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "foreign"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "from"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "grant"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "group"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "having"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "in"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "initially"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "intersect"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "into"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "lateral"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "leading"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "limit"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "localtime"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "localtimestamp"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "not"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "null"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "offset"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "on"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "only"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "or"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "order"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "placing"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "primary"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "references"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "returning"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "select"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "session_user"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "some"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "symmetric"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "system_user"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "table"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "then"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "to"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "trailing"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "true"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "union"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "unique"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "user"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "using"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "variadic"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "when"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "where"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "window"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "with"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "abort"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "absent"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "absolute"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "access"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "action"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "add"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "admin"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "after"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "aggregate"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "all"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "also"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "alter"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "always"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "analyse"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "analyze"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "and"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "any"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "asc"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "asensitive"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "assertion"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "assignment"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "asymmetric"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "at"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "atomic"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "attach"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "attribute"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "authorization"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "backward"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "before"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "begin"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "between"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "bigint"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "binary"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "bit"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "boolean"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "both"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "breadth"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "by"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "cache"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "call"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "called"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "cascade"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "cascaded"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "case"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "cast"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "catalog"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "chain"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "characteristics"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "check"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "checkpoint"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "class"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "close"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "cluster"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "coalesce"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "collate"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "collation"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "column"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "columns"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "comment"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "comments"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "commit"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "committed"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "compression"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "concurrently"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "conditional"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "configuration"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "conflict"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "connection"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "constraint"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "constraints"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "content"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "continue"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "conversion"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "copy"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "cost"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "cross"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "csv"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "cube"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "current"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "current_catalog"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "current_date"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "current_role"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "current_schema"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "current_time"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "current_timestamp"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "current_user"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "cursor"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "cycle"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "data"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "database"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "deallocate"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "dec"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "decimal"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "declare"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "default"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "defaults"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "deferrable"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "deferred"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "definer"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "delete"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "delimiter"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "delimiters"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "depends"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "depth"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "desc"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "detach"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "dictionary"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "disable"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "discard"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "distinct"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "do"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "document"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "domain"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "double"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "drop"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "each"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "else"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "empty"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "enable"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "encoding"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "encrypted"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "end"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "enum"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "error"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "escape"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "event"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "exclude"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "excluding"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "exclusive"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "execute"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "exists"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "explain"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "expression"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "extension"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "external"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "extract"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "false"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "family"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "finalize"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "first"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "float"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "following"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "force"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "foreign"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "format"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "forward"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "freeze"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "full"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "function"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "functions"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "generated"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "global"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "granted"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "greatest"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "grouping"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "groups"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "handler"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "header"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "hold"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "identity"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "if"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "ilike"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "immediate"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "immutable"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "implicit"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "import"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "in"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "include"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "including"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "increment"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "indent"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "index"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "indexes"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "inherit"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "inherits"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "initially"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "inline"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "inner"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "inout"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "input"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "insensitive"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "insert"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "instead"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "int"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "integer"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "interval"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "invoker"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "is"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "isolation"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "join"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "json"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "json_array"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "json_arrayagg"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "json_exists"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "json_object"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "json_objectagg"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "json_query"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "json_scalar"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "json_serialize"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "json_table"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "json_value"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "keep"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "key"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "keys"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "label"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "language"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "large"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "last"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "lateral"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "leading"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "leakproof"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "least"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "left"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "level"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "like"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "listen"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "load"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "local"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "localtime"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "localtimestamp"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "location"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "lock"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "locked"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "logged"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "mapping"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "match"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "matched"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "materialized"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "maxvalue"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "merge"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "merge_action"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "method"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "minvalue"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "mode"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "move"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "name"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "names"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "national"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "natural"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "nchar"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "nested"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "new"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "next"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "nfc"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "nfd"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "nfkc"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "nfkd"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "no"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "none"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "normalize"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "normalized"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "not"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "nothing"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "notify"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "nowait"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "null"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "nullif"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "nulls"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "numeric"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "object"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "of"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "off"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "oids"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "old"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "omit"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "only"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "operator"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "option"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "options"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "or"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "ordinality"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "others"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "out"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "outer"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "overlay"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "overriding"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "owned"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "owner"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "parallel"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "parameter"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "parser"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "partial"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "partition"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "passing"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "password"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "path"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "placing"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "plan"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "plans"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "policy"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "position"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "preceding"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "prepare"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "prepared"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "preserve"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "primary"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "prior"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "privileges"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "procedural"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "procedure"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "procedures"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "program"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "publication"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "quote"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "quotes"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "range"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "read"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "real"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "reassign"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "recheck"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "recursive"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "ref"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "references"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "referencing"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "refresh"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "reindex"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "relative"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "release"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "rename"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "repeatable"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "replace"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "replica"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "reset"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "restart"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "restrict"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "return"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "returns"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "revoke"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "right"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "role"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "rollback"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "rollup"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "routine"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "routines"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "row"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "rows"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "rule"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "savepoint"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "scalar"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "schema"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "schemas"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "scroll"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "search"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "security"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "select"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "sequence"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "sequences"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "serializable"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "server"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "session"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "session_user"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "set"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "setof"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "sets"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "share"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "show"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "similar"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "simple"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "skip"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "smallint"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "snapshot"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "some"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "source"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "sql"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "stable"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "standalone"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "start"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "statement"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "statistics"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "stdin"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "stdout"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "storage"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "stored"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "strict"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "string"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "strip"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "subscription"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "substring"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "support"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "symmetric"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "sysid"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "system"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "system_user"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "table"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "tables"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "tablesample"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "tablespace"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "target"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "temp"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "template"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "temporary"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "text"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "then"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "ties"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "time"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "timestamp"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "trailing"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "transaction"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "transform"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "treat"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "trigger"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "trim"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "true"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "truncate"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "trusted"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "type"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "types"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "uescape"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "unbounded"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "uncommitted"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "unconditional"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "unencrypted"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "unique"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "unknown"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "unlisten"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "unlogged"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "until"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "update"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "user"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "using"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "vacuum"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "valid"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "validate"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "validator"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "value"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "values"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "varchar"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "variadic"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "verbose"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "version"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "view"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "views"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "volatile"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "when"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "whitespace"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "work"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "wrapper"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "write"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "xml"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "xmlattributes"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "xmlconcat"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "xmlelement"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "xmlexists"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "xmlforest"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "xmlparse"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "xmlpi"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "xmlroot"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "xmlserialize"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "xmltable"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "yes"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "zone"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1963
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1084:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1969
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1974
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1979
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1984
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1989
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1994
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1999
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2004
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2009
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2014
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2019
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2024
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2029
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2034
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2039
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2044
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2049
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2053
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2057
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2061
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2065
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2069
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2073
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2078
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2085
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2090
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2097
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2102
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2109
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2114
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2121
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2128
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2135
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2142
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2153
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2165
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2174
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2178
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2182
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2186
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2190
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2194
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2198
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2203
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2208
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1132:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2213
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2218
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1134:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2223
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2228
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2233
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2238
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2247
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2257
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2261
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2266
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2272
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2278
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2285
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2292
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2300
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2317
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2336
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2341
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2343
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2347
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2352
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2356
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2361
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2366
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2371
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2376
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2381
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2386
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2391
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2396
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2401
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2406
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2411
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2416
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2420
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2424
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2429
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2434
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2439
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2446
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2447
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2449
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2458
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2468
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2472
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2477
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2481
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2485
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2489
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2495
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2501
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2518
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2520
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2521
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2522
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2526
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2530
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2534
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2538
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2542
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2550
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2554
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2559
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2566
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2576
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2581
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2588
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2602
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2605
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2606
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2622
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2624
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2628
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2630
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2634
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2638
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2642
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2653
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2657
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2668
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2679
		{
			yyVAL.list = nil
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2684
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2688
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2702
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2712
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2716
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2722
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2723
		{
			yyVAL.node = nil
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2727
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2739
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2744
		{
			yyVAL.list = nil
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2746
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2758
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2782
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2815
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2821
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2829
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2834
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2839
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2844
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2849
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2854
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2859
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2864
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2869
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2874
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2879
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2884
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2889
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2897
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2902
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2907
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2912
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2916
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2924
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2932
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2942
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2950
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2958
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2966
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2974
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2982
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2991
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2999
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3007
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3015
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3023
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3029
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3034
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3039
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3044
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3049
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3054
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3059
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3064
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3069
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3074
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3083
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3092
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3097
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3103
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3109
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3120
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3128
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3140
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3152
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3165
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3173
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3179
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3185
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3193
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1296:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3204
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1297:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3229
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1298:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3245
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1299:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3265
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3275
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3279
		{
			yyVAL.list = nil
		}
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3286
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3290
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3294
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3298
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3307
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3314
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3319
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3323
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3330
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3340
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3341
		{
			yyVAL.str = "year"
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3342
		{
			yyVAL.str = "month"
		}
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3343
		{
			yyVAL.str = "day"
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3344
		{
			yyVAL.str = "hour"
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3345
		{
			yyVAL.str = "minute"
		}
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3346
		{
			yyVAL.str = "second"
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3347
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3352
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3357
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3365
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3368
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3373
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3377
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3385
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3389
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3394
		{
			yyVAL.bval = true
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.bval = false
		}
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3396
		{
			yyVAL.bval = false
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3399
		{
			yyVAL.bval = true
		}
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3400
		{
			yyVAL.bval = false
		}
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3401
		{
			yyVAL.bval = false
		}
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3410
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3417
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3421
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3436
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3437
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3438
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3442
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3446
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3457
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3461
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3468
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3474
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1348:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3480
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3488
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3494
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3502
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3506
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3513
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3517
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3521
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3528
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3533
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3534
		{
			yyVAL.node = nil
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3538
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3540
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3548
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3554
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3555
		{
			yyVAL.node = nil
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3560
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3564
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3568
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3573
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3575
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3582
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3585
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3592
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3593
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3597
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3603
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3604
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3605
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3614
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3626
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3636
		{
			yyVAL.str = "NFC"
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3637
		{
			yyVAL.str = "NFD"
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3638
		{
			yyVAL.str = "NFKC"
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3639
		{
			yyVAL.str = "NFKD"
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3643
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3644
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3646
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3651
		{
			yyVAL.bval = true
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3652
		{
			yyVAL.bval = true
		}
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.bval = false
		}
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.bval = false
		}
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3655
		{
			yyVAL.bval = false
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3664
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3678
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3680
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3687
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3690
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3701
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3708
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3712
		{
			yyVAL.list = nil
		}
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3718
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3724
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3739
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3747
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3751
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3763
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3768
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3773
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3784
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3788
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3794
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3798
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3804
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3808
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3816
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3820
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3828
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3836
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3844
		{
			yyVAL.str = "varchar"
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3848
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3856
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3864
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3874
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3885
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3899
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3911
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3923
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3933
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3943
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3953
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3965
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3970
		{
			yyVAL.ival = 1
		}
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3971
		{
			yyVAL.ival = 0
		}
	case 1453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3972
		{
			yyVAL.ival = 0
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.ival = 1
		}
	case 1455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3976
		{
			yyVAL.ival = 0
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3980
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3997
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4001
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4008
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4012
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4018
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4021
		{
			yyVAL.str = "+"
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4022
		{
			yyVAL.str = "-"
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4023
		{
			yyVAL.str = "*"
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4024
		{
			yyVAL.str = "/"
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4025
		{
			yyVAL.str = "%"
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4026
		{
			yyVAL.str = "^"
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4027
		{
			yyVAL.str = "<"
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4028
		{
			yyVAL.str = ">"
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4029
		{
			yyVAL.str = "="
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4030
		{
			yyVAL.str = "<="
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4031
		{
			yyVAL.str = ">="
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4032
		{
			yyVAL.str = "<>"
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4036
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4040
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4049
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4050
		{
			yyVAL.list = nil
		}
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4055
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4059
		{
			yyVAL.list = nil
		}
	case 1482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4064
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4068
		{
			yyVAL.node = nil
		}
	case 1484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4072
		{
			yyVAL.ival = 0
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4073
		{
			yyVAL.ival = 0
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4077
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4082
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4097
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4098
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4102
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4107
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4108
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4117
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4118
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4127
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4129
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4136
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4148
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4160
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4166
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4173
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4186
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4206
		{
			yyVAL.list = nil
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4211
		{
			yyVAL.list = nil
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4220
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4228
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4240
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4241
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4242
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4243
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4248
		{
			yyVAL.list = nil
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4253
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4254
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4255
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1519:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4266
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1520:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4285
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4303
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4313
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4318
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4323
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4328
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4339
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4340
		{
			yyVAL.list = nil
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4344
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4345
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4350
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4354
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4359
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4364
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4375
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4376
		{
			yyVAL.list = nil
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4381
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4390
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4398
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4408
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4419
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4430
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4434
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4440
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4458
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4477
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4485
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4494
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4502
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4514
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4520
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4527
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4533
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4539
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4549
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4553
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4559
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4576
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4580
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4589
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4615
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4641
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4649
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4659
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4660
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4661
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4662
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4667
		{
			yyVAL.ival = 1
		}
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4668
		{
			yyVAL.ival = 0
		}
	case 1570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4678
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4689
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4700
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4704
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4708
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4714
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4715
		{
			yyVAL.with = nil
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4720
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4724
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1579:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4732
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4760
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4761
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4762
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1583:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4767
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1584:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4773
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4779
		{
			yyVAL.node = nil
		}
	case 1586:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4786
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4795
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4803
		{
			yyVAL.node = nil
		}
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4814
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4822
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4836
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4837
		{
			yyVAL.node = nil
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4845
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4847
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4851
		{
			yyVAL.node = nil
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4855
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4863
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4864
		{
			yyVAL.alias = nil
		}
	case 1599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4869
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4874
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4878
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4883
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4898
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4902
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4907
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4912
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4920
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4924
		{
			yyVAL.alias = nil
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4932
		{
			yyVAL.ival = 1
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4933
		{
			yyVAL.ival = 0
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4937
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4938
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4942
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4943
		{
			yyVAL.list = nil
		}
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4953
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4956
		{
			yyVAL.into = nil
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4967
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4976
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4986
		{
			yyVAL.ival = 1
		}
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4987
		{
			yyVAL.ival = 0
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4993
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4997
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5004
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5013
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5014
		{
			yyVAL.list = nil
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5028
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5040
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.list = nil
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5064
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5073
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5084
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5089
		{
			yyVAL.node = nil
		}
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5094
		{
			yyVAL.str = "BY REF"
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5095
		{
			yyVAL.str = "BY VALUE"
		}
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5101
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5105
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5109
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5113
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5121
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5125
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5133
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5138
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1647:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5147
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1648:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5155
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5166
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5170
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5179
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5184
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5189
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5199
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5203
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5216
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5220
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5224
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5228
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1661:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5241
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5265
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5276
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5277
		{
			yyVAL.node = nil
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5282
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5283
		{
			yyVAL.node = nil
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5287
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5288
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5293
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5299
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5300
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5306
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5310
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5322
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5326
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5333
		{
			yyVAL.bval = false
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5334
		{
			yyVAL.bval = true
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5335
		{
			yyVAL.bval = false
		}
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5339
		{
			yyVAL.bval = false
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5340
		{
			yyVAL.bval = true
		}
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5341
		{
			yyVAL.bval = true
		}
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5346
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5347
		{
			yyVAL.list = nil
		}
	case 1684:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5358
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1685:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5373
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5386
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5393
		{
			yyVAL.node = nil
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5399
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5407
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5418
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5419
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5420
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5421
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5423
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5425
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5430
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5434
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1700:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5438
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.node = nil
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5447
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5448
		{
			yyVAL.node = nil
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5453
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5454
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5458
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5459
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5460
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5466
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5469
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5470
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5476
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5506
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5507
		{
			yyVAL.node = nil
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5512
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5513
		{
			yyVAL.node = nil
		}
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5519
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5523
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5532
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5541
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1728:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5555
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5569
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1730:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5580
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1731:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5589
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5600
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5601
		{
			yyVAL.node = nil
		}
	case 1734:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5617
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5629
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5633
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5642
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5648
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5655
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1740:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5662
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5670
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5679
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5685
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5689
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5697
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1747:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5709
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5722
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5726
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5737
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5743
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5763
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5769
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5770
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1755:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5780
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5792
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5796
		{
			yyVAL.list = nil
		}
	case 1758:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5811
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5828
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5832
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1761:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5843
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1762:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5867
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5903
		{
			yyVAL.ival = 1
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5904
		{
			yyVAL.ival = 0
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5908
		{
			yyVAL.ival = 1
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5909
		{
			yyVAL.ival = 0
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5914
		{
			yyVAL.str = ""
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5915
		{
			yyVAL.str = ""
		}
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5920
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.node = nil
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.node = nil
		}
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5935
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5936
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5941
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5949
		{
			yyVAL.list = nil
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5956
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5960
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5964
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5968
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5972
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5976
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5980
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5984
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5988
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5992
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5996
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6000
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6004
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6008
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6012
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6020
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6024
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6031
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6037
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6038
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6039
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6040
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6041
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6042
		{
			yyVAL.node = nil
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6051
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6057
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6061
		{
			yyVAL.str = "true"
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6062
		{
			yyVAL.str = "false"
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6063
		{
			yyVAL.str = "on"
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6064
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6068
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6069
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6071
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6080
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.node = nil
		}
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6085
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6086
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6087
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6088
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6089
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6090
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6092
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6098
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6102
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6103
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6106
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6116
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6123
		{
			yyVAL.bval = true
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6124
		{
			yyVAL.bval = false
		}
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6128
		{
			yyVAL.ival = 1
		}
	case 1836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6129
		{
			yyVAL.ival = 0
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6145
		{
			yyVAL.node = nil
		}
	case 1840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6147
		{
			yyVAL.node = nil
		}
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6155
		{
			yyVAL.ival = 1
		}
	case 1842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6156
		{
			yyVAL.ival = 0
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6160
		{
			yyVAL.ival = 1
		}
	case 1844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6161
		{
			yyVAL.ival = 0
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6165
		{
			yyVAL.ival = 1
		}
	case 1846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6166
		{
			yyVAL.ival = 0
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.ival = 1
		}
	case 1848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6171
		{
			yyVAL.ival = 0
		}
	case 1849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6180
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6186
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6192
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1852:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6198
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1853:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6204
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1855:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6217
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6218
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6222
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6223
		{
			yyVAL.node = nil
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6228
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6243
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6252
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1863:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6259
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6266
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1865:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6279
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6292
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6301
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1868:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6316
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1869:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6326
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.onconflict = nil
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6345
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6354
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6361
		{
			yyVAL.node = nil
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6372
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6376
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6383
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6387
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6394
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6399
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6404
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1881:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6412
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1882:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6423
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6437
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6438
		{
			yyVAL.list = nil
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6442
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6443
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6444
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6448
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6449
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1890:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6450
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6455
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6459
		{
			yyVAL.list = nil
		}
	case 1893:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6480
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1894:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6496
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1895:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6513
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1896:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6529
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1897:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6546
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1898:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6563
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6581
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6582
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6583
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6584
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6585
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6586
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6587
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6588
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6592
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6593
		{
			yyVAL.list = nil
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6598
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6603
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6610
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6617
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6624
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6628
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6632
		{
			yyVAL.ival = 0
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6638
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6639
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6640
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6641
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6642
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6643
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6644
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6645
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6646
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6647
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6652
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6653
		{
			yyVAL.str = "default"
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6657
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6658
		{
			yyVAL.str = ""
		}
	case 1932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6662
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6663
		{
			yyVAL.str = "default"
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6667
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1935:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6668
		{
			yyVAL.str = ""
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6673
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6674
		{
			yyVAL.list = nil
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6679
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6685
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6692
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6693
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6698
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6704
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1944:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6715
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1945:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6744
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1946:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6753
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6763
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6772
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1950:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6783
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1951:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6791
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1952:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6792
		{
			yyVAL.list = nil
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6797
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6801
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6809
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6815
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6820
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1958:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6825
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6837
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6849
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6854
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6855
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6857
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6870
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6875
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6880
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6885
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6893
		{
			yyVAL.bval = true
		}
	case 1970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6894
		{
			yyVAL.bval = false
		}
	case 1971:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6895
		{
			yyVAL.bval = true
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6899
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6900
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6905
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6907
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6912
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6916
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6920
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6930
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6936
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6937
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6942
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6946
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6950
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6954
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6958
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6962
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6966
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6970
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6974
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6978
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6982
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6986
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6990
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6994
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6998
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7002
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7008
		{
		}
	case 1999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7009
		{
		}
	case 2000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7013
		{
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7014
		{
		}
	case 2002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7015
		{
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7020
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2004:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7027
		{
			yyVAL.bval = false
		}
	case 2005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7031
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7032
		{
			yyVAL.list = nil
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7037
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7041
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2009:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7045
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2010:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7054
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2011:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7060
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7066
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2013:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7072
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2014:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7089
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2015:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7096
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7106
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7111
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2018:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7116
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7124
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7135
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7146
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2022:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7156
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2023:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7167
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2024:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7188
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7202
		{
			yyVAL.bval = true
		}
	case 2026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7203
		{
			yyVAL.bval = false
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7209
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7215
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7223
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2030:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7228
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2031:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7236
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7240
		{
			yyVAL.list = nil
		}
	case 2033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7247
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7251
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7255
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7259
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7266
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7276
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7286
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7293
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7300
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7315
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7328
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7335
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7342
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7349
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7356
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7363
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2049:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7372
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7373
		{
			yyVAL.list = nil
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7377
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2052:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7378
		{
			yyVAL.partspec = nil
		}
	case 2053:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7383
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7391
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7396
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7404
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7411
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2058:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7418
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7427
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7428
		{
			yyVAL.str = ""
		}
	case 2061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7432
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2062:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7433
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2063:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7434
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2064:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7435
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7439
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2066:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7440
		{
			yyVAL.str = ""
		}
	case 2067:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7444
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7445
		{
			yyVAL.str = ""
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7449
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2070:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7462
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2071:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7477
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7493
		{
			yyVAL.bval = true
		}
	case 2073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7494
		{
			yyVAL.bval = false
		}
	case 2074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7498
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7499
		{
			yyVAL.str = "btree"
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7503
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2077:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7504
		{
			yyVAL.list = nil
		}
	case 2078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7509
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7514
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7522
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7523
		{
			yyVAL.list = nil
		}
	case 2082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7535
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2083:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7541
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2084:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7548
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2085:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7554
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2086:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7561
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2087:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7570
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2088:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7576
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2089:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7583
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2090:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7589
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2091:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7596
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2092:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7602
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2093:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7609
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2094:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7615
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7622
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2096:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7631
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2097:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7641
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2098:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7648
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2099:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7656
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2100:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7663
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7671
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2102:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7678
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7689
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7694
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7702
		{
			yyVAL.bval = true
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7703
		{
			yyVAL.bval = false
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7708
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7713
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7721
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7752
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7775
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7782
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7789
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7800
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7807
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7814
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7821
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7828
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7833
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7838
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2121:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7843
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7848
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7853
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7860
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7865
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7872
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7877
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7882
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7887
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2130:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7892
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7902
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7907
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2133:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7914
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7921
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7929
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2136:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7940
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7950
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7955
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7960
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7971
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7976
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7984
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7992
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7997
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8002
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8007
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8012
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8017
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8022
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8027
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8032
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8037
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8042
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8047
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8052
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8057
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8062
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8067
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8072
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8077
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8082
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8087
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8093
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8098
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8105
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8110
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8115
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8120
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8125
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8130
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8135
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8140
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8145
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8149
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8157
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8165
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8172
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8183
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8192
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8193
		{
			yyVAL.node = nil
		}
	case 2181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8197
		{
		}
	case 2182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8198
		{
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8209
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8222
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8235
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8248
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8261
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8276
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8291
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8304
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8317
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8330
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8343
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2194:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8356
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8372
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8378
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8384
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8393
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8397
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8400
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8404
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8406
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8410
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8421
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8425
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8431
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8432
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8436
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8445
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8449
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8457
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8462
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8469
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8473
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8481
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8487
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8488
		{
			yyVAL.str = "analyze"
		}
	case 2219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8489
		{
			yyVAL.str = "format"
		}
	case 2220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8493
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8494
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8495
		{
			yyVAL.node = nil
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8499
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8500
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8501
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8502
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8503
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8504
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8505
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8514
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8535
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8542
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8551
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8557
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8558
		{
			yyVAL.list = nil
		}
	case 2236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8563
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8567
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8575
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8581
		{
			yyVAL.str = "analyze"
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8582
		{
			yyVAL.str = "analyse"
		}
	case 2241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8591
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8595
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8599
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8603
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8607
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8618
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8622
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8629
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8630
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8631
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8632
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8633
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8634
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8635
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8636
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8637
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8638
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8639
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8640
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8641
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8654
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8655
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8660
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8664
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8672
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8684
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8689
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8691
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8693
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8697
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8710
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8712
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8716
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8727
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8738
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8749
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8760
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8771
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8783
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8794
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8805
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8816
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8827
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2284:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8844
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2285:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8861
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2286:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8873
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8885
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8896
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8907
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8918
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8929
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8940
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8951
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8962
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8973
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8984
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8995
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9006
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9017
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2300:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9028
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2301:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9039
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2302:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9050
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9061
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2304:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9072
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9083
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2306:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9096
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2307:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9109
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2308:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9122
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2309:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9135
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2310:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9148
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2311:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9161
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2312:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9173
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2313:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9185
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2314:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9198
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2315:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9211
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2316:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9223
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9235
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9246
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9257
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9268
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9279
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9290
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9301
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9312
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9323
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9334
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2327:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9345
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9371
		{
			yyVAL.ival = 0
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9373
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9387
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9388
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9389
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9390
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9391
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9392
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9396
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9401
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9406
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9414
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9418
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9422
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9426
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2343:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9440
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2344:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9454
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2345:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9470
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2346:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9485
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9500
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9501
		{
			yyVAL.list = nil
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9506
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9510
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9518
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9522
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9527
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9535
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9544
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9553
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9562
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9571
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9582
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9583
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9584
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9585
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9586
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9590
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9594
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9596
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9606
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9618
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9619
		{
			yyVAL.list = nil
		}
	case 2370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9624
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9630
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9638
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9642
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9646
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9650
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9654
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9661
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9667
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9677
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9683
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9691
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9695
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9707
		{
			yyVAL.node = nil
		}
	case 2384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9714
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9723
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9733
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9745
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9749
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2391:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9765
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2392:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9797
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9828
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9829
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9830
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9835
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9837
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9877
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9884
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9891
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9898
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9905
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9914
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9915
		{
			yyVAL.list = nil
		}
	case 2405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9919
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9924
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9932
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9943
		{
			yyVAL.bval = true
		}
	case 2409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9944
		{
			yyVAL.bval = false
		}
	case 2410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9948
		{
			yyVAL.bval = true
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9949
		{
			yyVAL.bval = false
		}
	case 2412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9953
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9958
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9962
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9974
		{
			yyVAL.bval = true
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9975
		{
			yyVAL.bval = false
		}
	case 2419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9979
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9980
		{
			yyVAL.node = nil
		}
	case 2423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9989
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9994
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9998
		{
			yyVAL.list = nil
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10003
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10006
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10007
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10008
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10012
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10013
		{
			yyVAL.rangevar = nil
		}
	case 2432:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10026
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2433:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10042
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2434:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10058
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2435:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10074
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10091
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10092
		{
			yyVAL.list = nil
		}
	case 2438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10096
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10097
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10098
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10099
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10110
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10117
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2444:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10124
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2445:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10131
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10147
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10165
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10171
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10176
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10181
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2451:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10187
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2452:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10195
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10203
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10218
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10234
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10240
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10245
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10250
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10256
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10261
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10266
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2462:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10271
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10276
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2464:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10281
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10286
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10291
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10296
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2468:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10307
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10312
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10326
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10331
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10338
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10339
		{
			yyVAL.list = nil
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10342
		{
		}
	case 2475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10343
		{
		}
	case 2476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10354
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10358
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10371
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10376
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10384
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10393
		{
			yyVAL.list = nil
		}
	case 2482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10400
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10404
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10408
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10413
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10426
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10434
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10443
		{
			yyVAL.list = nil
		}
	case 2489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10450
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10463
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10467
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10471
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2493:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10475
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10486
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10490
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2497:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10494
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2498:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10503
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10512
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10516
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2501:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10520
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10525
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2503:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10537
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2504:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10543
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10547
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10553
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10554
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10555
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10556
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10560
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10561
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10565
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10566
		{
			yyVAL.list = nil
		}
	case 2514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10570
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10571
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2516:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10588
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2517:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10593
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10599
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10603
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10607
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10613
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10614
		{
			yyVAL.str = ""
		}
	case 2523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10618
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10619
		{
			yyVAL.str = ""
		}
	case 2525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10623
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10624
		{
			yyVAL.str = ""
		}
	case 2527:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10637
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2528:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10643
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2529:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10649
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2530:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10655
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2531:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10667
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2532:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10671
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2533:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10677
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2534:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10683
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2535:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10687
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10693
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10694
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10699
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10705
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10711
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10717
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10731
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10735
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10743
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10750
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10757
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10761
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10769
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2549:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10776
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2550:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10784
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2551:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10793
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2552:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10802
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10810
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10826
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10828
		{
			yyVAL.list = nil
		}
	case 2556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10833
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10835
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10840
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10849
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10854
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10865
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10885
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2563:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10893
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10904
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10910
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10911
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10916
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10928
		{
			yyVAL.bval = true
		}
	case 2569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.bval = false
		}
	case 2570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10930
		{
			yyVAL.bval = true
		}
	case 2571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10935
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10944
		{
			yyVAL.list = nil
		}
	case 2577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10955
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10957
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10961
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10966
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10971
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10976
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10984
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10989
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10994
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10998
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11009
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11017
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11021
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11025
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11029
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11036
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11040
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11047
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11053
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11060
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11061
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11065
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11066
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11067
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11068
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11069
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11070
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11072
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11073
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11077
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11078
		{
			yyVAL.str = "default"
		}
	case 2609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11079
		{
			yyVAL.str = ""
		}
	case 2610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11083
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11084
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11088
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11089
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11090
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11091
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11095
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11096
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11101
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11107
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11112
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11120
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11124
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11128
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11132
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11136
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11142
		{
			yyVAL.str = "read uncommitted"
		}
	case 2627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11143
		{
			yyVAL.str = "read committed"
		}
	case 2628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11144
		{
			yyVAL.str = "repeatable read"
		}
	case 2629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11145
		{
			yyVAL.str = "serializable"
		}
	case 2630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11149
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11150
		{
			yyVAL.list = nil
		}
	case 2632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11154
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11155
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11156
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11159
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11160
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11161
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11165
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11166
		{
			yyVAL.list = nil
		}
	case 2640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11170
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11171
		{
			yyVAL.node = nil
		}
	case 2642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11175
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11180
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11185
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11193
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11197
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11203
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11209
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11215
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11216
		{
			yyVAL.str = ""
		}
	case 2651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11220
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11221
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11222
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11223
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11227
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11232
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11237
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11244
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11245
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2660:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11256
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2661:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11260
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11266
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11272
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11273
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11274
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11275
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11280
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11285
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11293
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11300
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11305
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2672:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11319
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11325
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11326
		{
			yyVAL.rolespec = nil
		}
	case 2675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11331
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11335
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2677:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11350
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2678:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11358
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11365
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11377
		{
			yyVAL.bval = true
		}
	case 2681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11381
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11382
		{
			yyVAL.str = "all"
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11386
		{
			yyVAL.str = "all"
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11387
		{
			yyVAL.str = "select"
		}
	case 2685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11388
		{
			yyVAL.str = "insert"
		}
	case 2686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11389
		{
			yyVAL.str = "update"
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11390
		{
			yyVAL.str = "delete"
		}
	case 2688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11394
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11395
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11403
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11404
		{
			yyVAL.list = nil
		}
	case 2692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11408
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11409
		{
			yyVAL.node = nil
		}
	case 2694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11413
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11414
		{
			yyVAL.node = nil
		}
	case 2696:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11425
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11431
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11432
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2699:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11443
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2700:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11447
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11454
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2702:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11458
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11464
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11465
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11469
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11470
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11471
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11482
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2709:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11486
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2710:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11490
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11497
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11501
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11505
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11509
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11515
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11516
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11521
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11526
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11530
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11534
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2721:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11546
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11552
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11557
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2724:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11563
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11564
		{
			yyVAL.node = nil
		}
	case 2726:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11575
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11582
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11586
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2729:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11590
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2730:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11594
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2731:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11598
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2732:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11602
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11606
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11612
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2736:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11631
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2737:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11635
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2738:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11639
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11645
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11646
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11647
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2742:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11659
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11665
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11666
		{
			yyVAL.list = nil
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11670
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11671
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11676
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11682
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11686
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2750:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11690
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11694
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11700
		{
			yyVAL.bval = true
		}
	case 2753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11701
		{
			yyVAL.bval = false
		}
	case 2754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11705
		{
			yyVAL.list = nil
		}
	case 2755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11706
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11707
		{
			yyVAL.list = nil
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11711
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11712
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11723
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2760:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11736
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11740
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11746
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11747
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2764:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11752
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11758
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2766:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11773
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2767:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11786
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2768:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11793
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2769:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11799
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11805
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2771:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11811
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2772:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11826
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2773:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11832
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11838
		{
			yyVAL.bval = true
		}
	case 2775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11839
		{
			yyVAL.bval = false
		}
	case 2776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11844
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11845
		{
			yyVAL.list = nil
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11849
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11850
		{
			yyVAL.list = nil
		}
	case 2780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11854
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11855
		{
			yyVAL.list = nil
		}
	case 2782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11858
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11859
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11860
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11865
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11872
		{
			yyVAL.groupClause = nil
		}
	case 2787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11878
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11879
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11883
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11884
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11885
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11886
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11887
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11892
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11899
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11906
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11913
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11922
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11923
		{
			yyVAL.node = nil
		}
	case 2800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11930
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11934
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11935
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11940
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11947
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11958
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11960
		{
			yyVAL.list = nil
		}
	case 2807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11965
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11970
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11978
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11987
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11989
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11996
		{
			yyVAL.windef = nil
		}
	case 2813:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12001
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12015
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12016
		{
			yyVAL.str = ""
		}
	case 2816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12020
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12021
		{
			yyVAL.list = nil
		}
	case 2818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12026
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12033
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12040
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12047
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12058
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12072
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12107
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12115
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12123
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12131
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12139
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12149
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12150
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2831:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12151
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12152
		{
			yyVAL.ival = 0
		}
	case 2833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12153
		{
			yyVAL.ival = 0
		}
	case 2834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12162
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12167
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12172
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12176
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12186
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12187
		{
			yyVAL.selectLimit = nil
		}
	case 2840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12192
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12200
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12207
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2843:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12215
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12223
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2845:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12231
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12242
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12245
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12249
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12251
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12258
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12271
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12273
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12277
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12284
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12285
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12290
		{
			yyVAL.ival = 0
		}
	case 2857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12291
		{
			yyVAL.ival = 0
		}
	case 2858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12295
		{
			yyVAL.ival = 0
		}
	case 2859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12296
		{
			yyVAL.ival = 0
		}
	case 2860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12309
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12315
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12321
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12327
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12333
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12338
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12343
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2867:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12348
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12353
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12358
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12364
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12370
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12379
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12385
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12392
		{
		}
	case 2875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12393
		{
		}
	case 2876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12394
		{
		}
	case 2877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12398
		{
			yyVAL.bval = true
		}
	case 2878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12399
		{
			yyVAL.bval = false
		}
	case 2879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12400
		{
			yyVAL.bval = false
		}
	case 2880:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12413
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2881:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12420
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2882:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12427
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2883:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12434
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2884:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12440
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2885:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12449
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12453
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2887:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12457
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2888:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12461
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12467
		{
			yyVAL.str = ""
		}
	case 2890:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12468
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2891:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12473
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12483
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12487
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12491
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2895:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12495
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12499
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2897:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12503
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12511
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12522
		{
			yyVAL.list = nil
		}
	case 2900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12527
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12538
		{
			yyVAL.list = nil
		}
	case 2902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12542
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12544
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12548
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12552
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12556
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12560
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12567
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12571
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12575
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12579
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12584
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12588
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12623
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12627
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12631
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12637
		{
			yyVAL.ival = 1
		}
	case 2918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12638
		{
			yyVAL.ival = -1
		}
	case 2919:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12650
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2920:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12662
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2921:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12671
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2922:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12683
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2923:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12689
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2924:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12698
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2925:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12705
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2926:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12724
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12730
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12731
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12736
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12740
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12744
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2932:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12756
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2933:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12764
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2934:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12772
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12782
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12783
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12784
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12785
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 2939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12786
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 2940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12787
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 2941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12792
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12794
		{
			yyVAL.list = nil
		}
	case 2943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12796
		{
			yyVAL.list = nil
		}
	case 2944:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12798
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2945:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12803
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12809
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 2947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12810
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 2948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12814
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 2949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12818
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 2950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12822
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 2951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12826
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 2952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12830
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 2953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12840
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 2954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12848
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 2955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12856
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 2956:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12864
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 2957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12872
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 2958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12880
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 2959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12888
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 2960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12896
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 2961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12904
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 2962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12912
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 2963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12920
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12928
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 2965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12936
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 2966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12944
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 2967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12952
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 2968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12960
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 2969:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12968
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 2970:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12976
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 2971:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12984
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 2972:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12992
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 2973:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13000
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 2974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13011
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 2975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13012
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13016
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13017
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2978:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13022
		{
			yyVAL.bval = true
		}
	case 2979:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13023
		{
			yyVAL.bval = false
		}
	case 2980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13027
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13028
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13033
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13039
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 2984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13040
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 2985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13041
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 2986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13044
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 2987:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13045
		{
			yyVAL.rolespec = nil
		}
	case 2988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13050
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13054
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13062
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13066
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13071
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13072
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2994:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13076
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 2995:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13084
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13088
		{
			yyVAL.node = nil
		}
	case 2997:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13102
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2998:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13107
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2999:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13112
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13120
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13121
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3002:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13127
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3003:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13131
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13135
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13139
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13143
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13147
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13151
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13155
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13159
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13163
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13167
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3013:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13171
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13175
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13179
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13183
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13187
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13192
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13198
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13199
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3021:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13204
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13208
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13212
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13218
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13219
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13220
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13221
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13222
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13233
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13246
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13253
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13260
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13274
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13276
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3037:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13288
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3038:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13296
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13309
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13310
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3041:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13316
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3042:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13323
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3043:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13331
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3044:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13339
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13360
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13361
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13362
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13363
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	}
	goto yystack /* stack new state and value */
}
